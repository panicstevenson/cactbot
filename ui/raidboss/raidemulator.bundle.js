/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 63:
/***/ ((__unused_webpack___webpack_module__, __unused_webpack___webpack_exports__, __webpack_require__) => {


// EXTERNAL MODULE: ./resources/util.ts
var util = __webpack_require__(556);
;// CONCATENATED MODULE: ./resources/party.ts

const emptyRoleToPartyNames = () => {
    return {
        tank: [],
        healer: [],
        dps: [],
        crafter: [],
        gatherer: [],
        none: [],
    };
};
class PartyTracker {
    constructor() {
        this.details = [];
        this.partyNames_ = [];
        this.partyIds_ = [];
        this.allianceNames_ = [];
        this.allianceIds_ = [];
        this.nameToRole_ = {};
        this.idToName_ = {};
        this.roleToPartyNames_ = emptyRoleToPartyNames();
    }
    // Bind this to PartyChanged events.
    onPartyChanged(e) {
        if (!e || !e.party)
            return;
        this.reset();
        this.details = e.party;
        for (const p of e.party) {
            this.allianceIds_.push(p.id);
            this.allianceNames_.push(p.name);
            const jobName = util/* default.jobEnumToJob */.Z.jobEnumToJob(p.job);
            const role = util/* default.jobToRole */.Z.jobToRole(jobName);
            this.idToName_[p.id] = p.name;
            this.nameToRole_[p.name] = role;
            if (p.inParty) {
                this.partyIds_.push(p.id);
                this.partyNames_.push(p.name);
                this.roleToPartyNames_[role].push(p.name);
            }
        }
    }
    reset() {
        // original event data
        this.details = [];
        this.partyNames_ = [];
        this.partyIds_ = [];
        this.allianceNames_ = [];
        this.allianceIds_ = [];
        this.nameToRole_ = {};
        this.idToName_ = {};
        // role -> [names] but only for party
        this.roleToPartyNames_ = emptyRoleToPartyNames();
    }
    // returns an array of the names of players in your immediate party
    get partyNames() {
        return this.partyNames_;
    }
    get partyIds() {
        return this.partyIds_;
    }
    // returns an array of the names of players in your alliance
    get allianceNames() {
        return this.allianceNames_;
    }
    // returns an array of the names of tanks in your immediate party
    get tankNames() {
        return this.roleToPartyNames_['tank'];
    }
    // returns an array of the names of healers in your immediate party
    get healerNames() {
        return this.roleToPartyNames_['healer'];
    }
    // returns an array of the names of dps players in your immediate party
    get dpsNames() {
        return this.roleToPartyNames_['dps'];
    }
    // returns true if the named player in your alliance is a particular role
    isRole(name, role) {
        return this.nameToRole_[name] === role;
    }
    // returns true if the named player in your alliance is a tank
    isTank(name) {
        return this.isRole(name, 'tank');
    }
    // returns true if the named player in your alliance is a healer
    isHealer(name) {
        return this.isRole(name, 'healer');
    }
    // returns true if the named player in your alliance is a dps
    isDPS(name) {
        return this.isRole(name, 'dps');
    }
    // returns true if the named player is in your immediate party
    inParty(name) {
        return this.partyNames.includes(name);
    }
    // returns true if the named player is in your alliance
    inAlliance(name) {
        return this.allianceNames.includes(name);
    }
    // for a named player, returns the other tank in your immediate party
    // if named player is not a tank, or there's not exactly two tanks
    // in your immediate party, returns null.
    otherTank(name) {
        const names = this.tankNames;
        if (names.length !== 2)
            return;
        if (names[0] === name)
            return names[1];
        if (names[1] === name)
            return names[0];
    }
    // see: otherTank, but for healers.
    otherHealer(name) {
        const names = this.roleToPartyNames_['healer'];
        if (names.length !== 2)
            return;
        if (names[0] === name)
            return names[1];
        if (names[1] === name)
            return names[0];
    }
    // returns the job name of the specified party member
    jobName(name) {
        var _a;
        const partyIndex = this.partyNames.indexOf(name);
        if (partyIndex >= 0)
            return util/* default.jobEnumToJob */.Z.jobEnumToJob((_a = this.details[partyIndex]) === null || _a === void 0 ? void 0 : _a.job);
    }
    nameFromId(id) {
        return this.idToName_[id];
    }
}

// EXTERNAL MODULE: ./resources/regexes.ts
var resources_regexes = __webpack_require__(911);
// EXTERNAL MODULE: ./resources/responses.ts
var responses = __webpack_require__(667);
// EXTERNAL MODULE: ./resources/user_config.ts
var user_config = __webpack_require__(633);
// EXTERNAL MODULE: ./ui/raidboss/data/raidboss_manifest.txt + 328 modules
var raidboss_manifest = __webpack_require__(318);
;// CONCATENATED MODULE: ./ui/raidboss/raidboss_options.ts

// These options are ones that are not auto-defined by raidboss_config.js.
const defaultRaidbossNonConfigOptions = {
    PlayerNicks: {},
    InfoSound: '../../resources/sounds/freesound/percussion_hit.ogg',
    AlertSound: '../../resources/sounds/BigWigs/Alert.ogg',
    AlarmSound: '../../resources/sounds/BigWigs/Alarm.ogg',
    LongSound: '../../resources/sounds/BigWigs/Long.ogg',
    PullSound: '../../resources/sounds/freesound/sonar.ogg',
    AudioAllowed: true,
    DisabledTriggers: {},
    PerTriggerAutoConfig: {},
    PerTriggerOptions: {},
    Triggers: [],
    IsRemoteRaidboss: false,
    TransformTts: (t) => t,
};
// TODO: figure out how to get this type from raidboss_config??
// These values are overwritten and are just here for typing.
const defaultRaidbossConfigOptions = {
    Debug: false,
    DefaultAlertOutput: 'textAndSound',
    AlertsLanguage: undefined,
    TimelineLanguage: undefined,
    TimelineEnabled: true,
    AlertsEnabled: true,
    ShowTimerBarsAtSeconds: 30,
    KeepExpiredTimerBarsForSeconds: 0.7,
    BarExpiresSoonSeconds: 6,
    MaxNumberOfTimerBars: 6,
    DisplayAlarmTextForSeconds: 3,
    DisplayAlertTextForSeconds: 3,
    DisplayInfoTextForSeconds: 3,
    AlarmSoundVolume: 1,
    AlertSoundVolume: 1,
    InfoSoundVolume: 1,
    LongSoundVolume: 1,
    PullSoundVolume: 1,
    cactbotWormholeStrat: false,
    cactbote8sUptimeKnockbackStrat: false,
};
// See user/raidboss-example.js for documentation.
const Options = {
    ...user_config/* default.getDefaultBaseOptions */.Z.getDefaultBaseOptions(),
    ...defaultRaidbossNonConfigOptions,
    ...defaultRaidbossConfigOptions,
};
/* harmony default export */ const raidboss_options = (Options);

;// CONCATENATED MODULE: ./ui/raidboss/raidboss_config.js







const kOptionKeys = {
  output: 'Output',
  duration: 'Duration',
  beforeSeconds: 'BeforeSeconds',
  outputStrings: 'OutputStrings'
}; // No sound only option, because that's silly.

const kTriggerOptions = {
  default: {
    label: {
      en: '✔ Defaults',
      de: '✔ Standards',
      fr: '✔ Défauts',
      ja: '✔ 初期設定',
      cn: '✔ 默认设置',
      ko: '✔ 기본'
    }
  },
  textAndSound: {
    label: {
      en: '🆙🔊 Text and Sound',
      de: '🆙🔊 Text und Ton',
      fr: '🆙🔊 Texte et son',
      ja: '🆙🔊 テキストと音声',
      cn: '🆙🔊 文字显示与提示音',
      ko: '🆙🔊 텍스트와 소리'
    }
  },
  ttsAndText: {
    label: {
      en: '🆙💬 Text and TTS',
      de: '🆙💬 Text und TTS',
      fr: '🆙💬 Texte et TTS',
      ja: '🆙💬 テキストとTTS',
      cn: '🆙💬 文字显示与TTS',
      ko: '🆙💬 텍스트와 TTS'
    }
  },
  ttsOnly: {
    label: {
      en: '💬 TTS Only',
      de: '💬 Nur TTS',
      fr: '💬 TTS Seulement',
      ja: '💬 TTSのみ',
      cn: '💬 只使用TTS',
      ko: '💬 TTS만'
    }
  },
  textOnly: {
    label: {
      en: '🆙 Text Only',
      de: '🆙 Nur Text',
      fr: '🆙 Texte seulement',
      ja: '🆙 テキストのみ',
      cn: '🆙 只使用文字显示',
      ko: '🆙 텍스트만'
    }
  },
  disabled: {
    label: {
      en: '❌ Disabled',
      de: '❌ Deaktiviert',
      fr: '❌ Désactivé',
      ja: '❌ 無効',
      cn: '❌ 禁用',
      ko: '❌ 비활성화'
    }
  }
};
const kDetailKeys = {
  'triggerRegex': {
    label: {
      en: 'regex',
      de: 'regex',
      fr: 'regex',
      ja: '正規表現',
      cn: '正则表达式',
      ko: '정규식'
    },
    cls: 'regex-text',
    debugOnly: true
  },
  'triggerNetRegex': {
    label: {
      en: 'netregex',
      de: 'netregex',
      fr: 'netregex',
      ja: 'ネット正規表現',
      cn: '网络日志正则表达式'
    },
    cls: 'regex-text',
    debugOnly: true
  },
  'timelineRegex': {
    label: {
      en: 'timeline',
      de: 'timeline',
      fr: 'timeline',
      ja: 'タイムライン',
      cn: '时间轴',
      ko: '타임라인'
    },
    cls: 'regex-text',
    debugOnly: true
  },
  'beforeSeconds': {
    label: {
      en: 'before (sec)',
      de: 'Vorher (Sekunden)',
      fr: 'avant (seconde)',
      ja: 'その前に (秒)',
      cn: '提前 (秒)',
      ko: '앞당김 (초)'
    },
    cls: 'before-seconds-text',
    generatedManually: true
  },
  'condition': {
    label: {
      en: 'condition',
      de: 'condition',
      fr: 'condition',
      ja: '条件',
      cn: '条件',
      ko: '조건'
    },
    cls: 'condition-text',
    debugOnly: true
  },
  'duration': {
    label: {
      en: 'duration (sec)',
      de: 'Dauer (Sekunden)',
      fr: 'Durée (secondes)',
      ja: '存続時間 (秒)',
      cn: '持续时间 (秒)',
      ko: '지속 시간 (초)'
    },
    cls: 'duration-text',
    generatedManually: true
  },
  'preRun': {
    label: {
      en: 'preRun',
      de: 'preRun',
      fr: 'preRun',
      ja: 'プレ実行',
      cn: '预运行',
      ko: '사전 실행'
    },
    cls: 'prerun-text',
    debugOnly: true
  },
  'alarmText': {
    label: {
      en: 'alarm',
      de: 'alarm',
      fr: 'alarme',
      ja: '警報',
      cn: '警报文本',
      ko: '경고'
    },
    cls: 'alarm-text'
  },
  'alertText': {
    label: {
      en: 'alert',
      de: 'alert',
      fr: 'alerte',
      ja: '警告',
      cn: '警告文本',
      ko: '주의'
    },
    cls: 'alert-text'
  },
  'infoText': {
    label: {
      en: 'info',
      de: 'info',
      fr: 'info',
      ja: '情報',
      cn: '信息文本',
      ko: '안내'
    },
    cls: 'info-text'
  },
  'tts': {
    label: {
      en: 'tts',
      de: 'tts',
      fr: 'tts',
      ja: 'TTS',
      cn: 'TTS',
      ko: 'TTS'
    },
    cls: 'tts-text'
  },
  'sound': {
    label: {
      en: 'sound',
      de: 'sound',
      fr: 'son',
      ja: '音声',
      cn: '提示音',
      ko: '소리'
    },
    cls: 'sound-text'
  },
  'run': {
    label: {
      en: 'run',
      de: 'run',
      fr: 'run',
      ja: '実行',
      cn: '运行',
      ko: '실행'
    },
    cls: 'run-text',
    debugOnly: true
  }
};
const kMiscTranslations = {
  // Shows up for un-set values.
  valueDefault: {
    en: '(default)',
    de: '(Standard)',
    fr: '(Défaut)',
    ja: '(初期値)',
    cn: '(默认值)',
    ko: '(기본값)'
  },
  // Shown when the UI can't decipher the output of a function.
  valueIsFunction: {
    en: '(function)',
    de: '(Funktion)',
    fr: '(Fonction)',
    ja: '(関数)',
    cn: '(函数)',
    ko: '(함수)'
  },
  // Warning label for triggers without ids or overridden triggers.
  warning: {
    en: '⚠️ warning',
    de: '⚠️ Warnung',
    fr: '⚠️ Attention',
    ja: '⚠️ 警告',
    cn: '⚠️ 警告',
    ko: '⚠️ 주의'
  },
  // Shows up for triggers without ids.
  missingId: {
    en: 'missing id field',
    de: 'Fehlendes ID Feld',
    fr: 'Champ ID manquant',
    ja: 'idがありません',
    cn: '缺少id属性',
    ko: 'ID 필드값 없음'
  },
  // Shows up for triggers that are overridden by other triggers.
  overriddenByFile: {
    en: 'overridden by "${file}"',
    de: 'Überschrieben durch "${file}"',
    fr: 'Écrasé(e) par "${file}"',
    ja: '"${file}"に上書きました',
    cn: '被"${file}"文件覆盖',
    ko: '"${file}" 파일에서 덮어씌움'
  },
  // Opens trigger file on Github.
  viewTriggerSource: {
    en: 'View Trigger Source',
    de: 'Zeige Trigger Quelle',
    ja: 'トリガーのコードを表示',
    cn: '显示触发器源码',
    ko: '트리거 출처 열기'
  }
};

const validDurationOrUndefined = val => {
  val = parseFloat(val);
  if (!isNaN(val) && val >= 0) return val;
  return undefined;
};

const canBeConfigured = trig => !trig.isMissingId && !trig.overriddenByFile;

const addTriggerDetail = (container, labelText, detailText, detailCls) => {
  const label = document.createElement('div');
  label.innerText = labelText;
  label.classList.add('trigger-label');
  container.appendChild(label);
  const detail = document.createElement('div');
  detail.classList.add('trigger-detail');
  detail.innerText = detailText;
  container.appendChild(detail);
  if (detailCls) detail.classList.add(detailCls);
}; // This is used both for top level Options and for PerTriggerAutoConfig settings.
// Unfortunately due to poor decisions in the past, PerTriggerOptions has different
// fields here.  This should be fixed.


function setOptionsFromOutputValue(options, value) {
  if (value === 'default') {// Nothing.
  } else if (value === 'textAndSound') {
    options.TextAlertsEnabled = true;
    options.SoundAlertsEnabled = true;
    options.SpokenAlertsEnabled = false;
  } else if (value === 'ttsAndText') {
    options.TextAlertsEnabled = true;
    options.SoundAlertsEnabled = true;
    options.SpokenAlertsEnabled = true;
  } else if (value === 'ttsOnly') {
    options.TextAlertsEnabled = false;
    options.SoundAlertsEnabled = true;
    options.SpokenAlertsEnabled = true;
  } else if (value === 'textOnly') {
    options.TextAlertsEnabled = true;
    options.SoundAlertsEnabled = false;
    options.SpokenAlertsEnabled = false;
  } else if (value === 'disabled') {
    options.TextAlertsEnabled = false;
    options.SoundAlertsEnabled = false;
    options.SpokenAlertsEnabled = false;
  } else {
    console.error('unknown output type: ' + value);
  }
} // Helper for doing nothing during trigger eval, but still recording any
// calls to `output.responseOutputStrings = x;` via callback.


class DoNothingFuncProxy {
  constructor(outputStringsCallback) {
    return new Proxy(this, {
      set(target, property, value) {
        if (property === 'responseOutputStrings') {
          outputStringsCallback(value);
          return true;
        } // Ignore other property setting here.

      },

      get(target, name) {
        return () => {};
      }

    });
  }

}

class RaidbossConfigurator {
  constructor(cactbotConfigurator) {
    this.base = cactbotConfigurator; // TODO: is it worth adding the complexity to reflect this change in triggers that use it?
    // This is probably where using something like vue or react would be easier.
    // For the moment, folks can just reload, for real.

    this.alertsLang = this.base.getOption('raidboss', 'AlertsLanguage', this.base.lang);
    this.timelineLang = this.base.getOption('raidboss', 'TimelineLanguage', this.base.lang);
  }

  buildUI(container, raidbossFiles, userOptions) {
    const fileMap = this.processRaidbossFiles(raidbossFiles, userOptions);
    const expansionDivs = {};

    for (const key in fileMap) {
      const info = fileMap[key]; // "expansion" here is technically section, which includes "general triggers"
      // and one section per user file.

      const expansion = info.section;
      if (Object.keys(info.triggers).length === 0) continue;

      if (!expansionDivs[expansion]) {
        const expansionContainer = document.createElement('div');
        expansionContainer.classList.add('trigger-expansion-container', 'collapsed');
        container.appendChild(expansionContainer);
        const expansionHeader = document.createElement('div');
        expansionHeader.classList.add('trigger-expansion-header');

        expansionHeader.onclick = () => {
          expansionContainer.classList.toggle('collapsed');
        };

        expansionHeader.innerText = expansion;
        expansionContainer.appendChild(expansionHeader);
        expansionDivs[expansion] = expansionContainer;
      }

      const triggerContainer = document.createElement('div');
      triggerContainer.classList.add('trigger-file-container', 'collapsed');
      expansionDivs[expansion].appendChild(triggerContainer);
      const headerDiv = document.createElement('div');
      headerDiv.classList.add('trigger-file-header');

      headerDiv.onclick = () => {
        triggerContainer.classList.toggle('collapsed');
      };

      const parts = [info.title, info.type, info.prefix];

      for (let i = 0; i < parts.length; ++i) {
        if (!parts[i]) continue;
        const partDiv = document.createElement('div');
        partDiv.classList.add('trigger-file-header-part');
        partDiv.innerText = parts[i];
        headerDiv.appendChild(partDiv);
      }

      triggerContainer.appendChild(headerDiv);
      const triggerOptions = document.createElement('div');
      triggerOptions.classList.add('trigger-file-options');
      triggerContainer.appendChild(triggerOptions);

      for (const id in info.triggers) {
        const trig = info.triggers[id]; // Don't construct triggers that won't show anything.

        let hasOutputFunc = false;

        for (const func of responses/* triggerOutputFunctions */.ug) {
          if (trig[func]) {
            hasOutputFunc = true;
            break;
          }
        }

        if (!hasOutputFunc && !this.base.developerOptions) continue; // Build the trigger label.

        const triggerDiv = document.createElement('div');
        triggerDiv.innerHTML = trig.isMissingId ? '(???)' : trig.id;
        triggerDiv.classList.add('trigger');
        triggerOptions.appendChild(triggerDiv); // Container for the right side ui (select boxes, all of the info).

        const triggerDetails = document.createElement('div');
        triggerDetails.classList.add('trigger-details');
        triggerOptions.appendChild(triggerDetails);
        if (canBeConfigured(trig)) triggerDetails.appendChild(this.buildTriggerOptions(trig, triggerDiv));

        if (trig.isMissingId) {
          addTriggerDetail(triggerDetails, this.base.translate(kMiscTranslations.warning), this.base.translate(kMiscTranslations.missingId));
        }

        if (trig.overriddenByFile) {
          const baseText = this.base.translate(kMiscTranslations.overriddenByFile);
          const detailText = baseText.replace('${file}', trig.overriddenByFile);
          addTriggerDetail(triggerDetails, this.base.translate(kMiscTranslations.warning), detailText);
        } // Append some details about the trigger so it's more obvious what it is.


        for (const detailKey in kDetailKeys) {
          if (kDetailKeys[detailKey].generatedManually) continue;
          if (!this.base.developerOptions && kDetailKeys[detailKey].debugOnly) continue;
          if (!trig[detailKey] && !trig.output[detailKey]) continue;
          const detailCls = [kDetailKeys[detailKey].cls];
          let detailText;

          if (trig.output[detailKey]) {
            detailText = trig.output[detailKey];
          } else if (typeof trig[detailKey] === 'function') {
            detailText = this.base.translate(kMiscTranslations.valueIsFunction);
            detailCls.push('function-text');
          } else {
            detailText = trig[detailKey];
          }

          addTriggerDetail(triggerDetails, this.base.translate(kDetailKeys[detailKey].label), detailText, detailCls);
        }

        if (!canBeConfigured(trig)) continue; // Add beforeSeconds manually for timeline triggers.

        if (trig.isTimelineTrigger) {
          const detailKey = 'beforeSeconds';
          const optionKey = kOptionKeys.beforeSeconds;
          const label = document.createElement('div');
          label.innerText = this.base.translate(kDetailKeys[detailKey].label);
          label.classList.add('trigger-label');
          triggerDetails.appendChild(label);
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-before-seconds');
          const input = document.createElement('input');
          div.appendChild(input);
          input.type = 'text';
          input.step = 'any'; // Say "(default)" for more complicated things like functions.

          let defaultValue = kMiscTranslations.valueDefault;
          if (trig.beforeSeconds === undefined) defaultValue = 0;else if (typeof trig.beforeSeconds === 'number') defaultValue = trig.beforeSeconds;
          input.placeholder = this.base.translate(defaultValue);
          input.value = this.base.getOption('raidboss', 'triggers', trig.id, optionKey, '');

          const setFunc = () => {
            const val = validDurationOrUndefined(input.value) || '';
            this.base.setOption('raidboss', 'triggers', trig.id, optionKey, val);
          };

          input.onchange = setFunc;
          input.oninput = setFunc;
          triggerDetails.appendChild(div);
        } // Add duration manually with an input to override.


        if (hasOutputFunc) {
          const detailKey = 'duration';
          const optionKey = kOptionKeys.duration;
          const label = document.createElement('div');
          label.innerText = this.base.translate(kDetailKeys[detailKey].label);
          label.classList.add('trigger-label');
          triggerDetails.appendChild(label);
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-duration');
          const input = document.createElement('input');
          div.appendChild(input);
          input.type = 'text';
          input.step = 'any';
          input.placeholder = this.base.translate(kMiscTranslations.valueDefault);
          input.value = this.base.getOption('raidboss', 'triggers', trig.id, optionKey, '');

          const setFunc = () => {
            const val = validDurationOrUndefined(input.value) || '';
            this.base.setOption('raidboss', 'triggers', trig.id, optionKey, val);
          };

          input.onchange = setFunc;
          input.oninput = setFunc;
          triggerDetails.appendChild(div);
        } // Add output strings manually


        const outputStrings = trig.outputStrings || {};

        for (const key in outputStrings) {
          const optionKey = kOptionKeys.outputStrings;
          const template = this.base.translate(outputStrings[key]);
          const label = document.createElement('div');
          label.innerText = key;
          label.classList.add('trigger-outputstring-label');
          triggerDetails.appendChild(label);
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-outputstring');
          const input = document.createElement('input');
          div.appendChild(input);
          input.type = 'text';
          input.placeholder = template;
          input.value = this.base.getOption('raidboss', 'triggers', trig.id, optionKey, key, '');

          const setFunc = () => this.base.setOption('raidboss', 'triggers', trig.id, optionKey, key, input.value);

          input.onchange = setFunc;
          input.oninput = setFunc;
          triggerDetails.appendChild(div);
        }

        const label = document.createElement('div');
        triggerDetails.appendChild(label);
        const div = document.createElement('div');
        div.classList.add('option-input-container', 'trigger-source');
        const baseUrl = 'https://github.com/quisquous/cactbot/blob/triggers';
        const path = key.split('-');
        let urlFilepath;

        if (path.length === 3) {
          // 00-misc/general.js
          urlFilepath = `${path[0]}-${path[1]}/${[...path].slice(2).join('-')}`;
        } else {
          // 02-arr/raids/t1.js
          urlFilepath = `${path[0]}-${path[1]}/${path[2]}/${[...path].slice(3).join('-')}`;
        }

        const escapedTriggerId = trig.id.replace(/'/g, '\\\'');
        const uriComponent = encodeURIComponent(`id: '${escapedTriggerId}'`).replace(/'/g, '%27');
        const urlString = `${baseUrl}/${urlFilepath}.js#:~:text=${uriComponent}`;
        div.innerHTML = `<a href="${urlString}" target="_blank">(${this.base.translate(kMiscTranslations.viewTriggerSource)})</a>`;
        triggerDetails.appendChild(div);
      }
    }
  } // This duplicates the raidboss function of the same name.


  valueOrFunction(f, data, matches, output) {
    const result = typeof f === 'function' ? f(data, matches, output) : f;
    if (result !== Object(result)) return result;
    if (result[this.alertsLang]) return this.valueOrFunction(result[this.alertsLang]);
    if (result[this.timelineLang]) return this.valueOrFunction(result[this.timelineLang]); // For partially localized results where this localization doesn't
    // exist, prefer English over nothing.

    return this.valueOrFunction(result['en']);
  }

  processTrigger(trig) {
    // TODO: with some hackiness (e.g. regexes?) we could figure out which
    // output string came from which alert type (alarm, alert, info, tts).
    trig.output = new DoNothingFuncProxy(outputStrings => {
      trig.outputStrings = trig.outputStrings || {};
      Object.assign(trig.outputStrings, outputStrings);
    });
    const kBaseFakeData = {
      party: new PartyTracker(),
      lang: this.base.lang,
      currentHP: 1000,
      options: this.base.configOptions,
      ShortName: x => x,
      StopCombat: () => {},
      ParseLocaleFloat: parseFloat,
      CanStun: () => util/* default.canStun */.Z.canStun(this.job),
      CanSilence: () => util/* default.canSilence */.Z.canSilence(this.job),
      CanSleep: () => util/* default.canSleep */.Z.canSleep(this.job),
      CanCleanse: () => util/* default.canCleanse */.Z.canCleanse(this.job),
      CanFeint: () => util/* default.canFeint */.Z.canFeint(this.job),
      CanAddle: () => util/* default.canAddle */.Z.canAddle(this.job)
    };
    const kFakeData = [{
      me: 'Tini Poutini',
      job: 'GNB',
      role: 'tank'
    }, {
      me: 'Potato Chippy',
      job: 'WHM',
      role: 'healer'
    }, {
      me: 'Tater Tot',
      job: 'BLM',
      role: 'dps'
    }, {
      me: 'Hash Brown',
      job: 'DRG',
      role: 'dps'
    }, {
      me: 'Aloo Gobi',
      job: 'BLU',
      role: 'dps'
    }];

    for (let i = 0; i < kFakeData.length; ++i) kFakeData[i] = Object.assign({}, kFakeData[i], kBaseFakeData);

    const kFakeMatches = {
      // TODO: really should convert all triggers to use regexes.js.
      // Mooooost triggers use matches[1] to be a name.
      1: kFakeData[0].me,
      sourceId: '41234567',
      source: 'Enemy',
      id: '1234',
      ability: 'Ability',
      targetId: '1234567',
      target: kFakeData[0].me,
      flags: '',
      x: 100,
      y: 100,
      z: 0,
      heading: 0,
      npcId: undefined,
      effect: 'Effect',
      duration: 30,
      code: '00',
      line: '',
      name: 'Name',
      capture: true
    };
    const output = {};
    const keys = ['alarmText', 'alertText', 'infoText', 'tts', 'sound']; // Try to determine some sample output?
    // This could get much more complicated if we wanted it to.

    const evalTrigger = (trig, key, idx) => {
      try {
        const result = this.valueOrFunction(trig[key], kFakeData[idx], kFakeMatches, trig.output);
        if (!result) return false; // Super hack:

        if (result.includes('undefined') || result.includes('NaN')) return false;
        output[key] = result;
        return true;
      } catch (e) {
        // This is all totally bogus.  Many triggers assume fields on data
        // are properly defined when these calls happen, so will throw errors.
        // So just silently ignore.
        return false;
      }
    }; // Handle 'response' first.


    if (trig.response) {
      const r = trig.response;

      for (let d = 0; d < kFakeData.length; ++d) {
        try {
          // Can't use ValueOrFunction here as r returns a non-localizable object.
          // FIXME: this hackily replicates some raidboss logic too.
          let response = r;

          while (typeof response === 'function') {
            // TODO: check if this has builtInResponseStr first.
            response = response(kFakeData[d], kFakeMatches, trig.output);
          }

          if (!response) continue;

          if (!trig.outputStrings) {
            for (const key of keys) evalTrigger(response, key, d);
          }

          break;
        } catch (e) {
          continue;
        }
      }
    } // Only evaluate fields if there are not outputStrings.
    // outputStrings will indicate more clearly what the trigger says.


    if (!trig.outputStrings) {
      for (const key of keys) {
        if (!trig[key]) continue;

        for (let d = 0; d < kFakeData.length; ++d) {
          if (evalTrigger(trig, key, d)) break;
        }
      }
    }

    trig.output = output;
    const lang = this.base.lang;

    const getRegex = baseField => {
      const shortLanguage = lang.charAt(0).toUpperCase() + lang.slice(1);
      const langSpecificRegex = trig[baseField + shortLanguage] || trig[baseField];
      if (!langSpecificRegex) return;
      const baseRegex = resources_regexes/* default.parse */.Z.parse(langSpecificRegex);
      if (!baseRegex) return;
      return resources_regexes/* default.parse */.Z.parse(baseRegex);
    };

    if (trig.isTimelineTrigger) {
      trig.timelineRegex = getRegex('regex');
    } else {
      trig.triggerRegex = getRegex('regex');
      trig.triggerNetRegex = getRegex('netRegex');
    }

    return trig;
  }

  processRaidbossFiles(files, userOptions) {
    // `files` is map of filename => triggerSet (for trigger files)
    // `map` is a sorted map of shortened zone key => { various fields, triggerSet }
    const map = this.base.processFiles(files, userOptions.Triggers);
    let triggerIdx = 0; // While walking through triggers, record any previous triggers with the same
    // id so that the ui can disable overriding information.

    const previousTriggerWithId = {};

    for (const item of Object.values(map)) {
      // TODO: maybe each trigger set needs a zone name, and we should
      // use that instead of the filename???
      const rawTriggers = {
        trigger: [],
        timeline: []
      };
      const triggerSet = item.triggerSet;
      if (triggerSet.triggers) rawTriggers.trigger.push(...triggerSet.triggers);
      if (triggerSet.timelineTriggers) rawTriggers.timeline.push(...triggerSet.timelineTriggers);
      item.triggers = {};

      for (const key in rawTriggers) {
        for (const trig of rawTriggers[key]) {
          triggerIdx++;

          if (!trig.id) {
            // Give triggers with no id some "unique" string so that they can
            // still be added to the set and show up in the ui.
            trig.id = `!!NoIdTrigger${triggerIdx}`;
            trig.isMissingId = true;
          } // Track if this trigger overrides any previous trigger.


          const previous = previousTriggerWithId[trig.id];
          if (previous) previous.overriddenByFile = triggerSet.filename;
          previousTriggerWithId[trig.id] = trig;
          trig.isTimelineTrigger = key === 'timeline'; // Also, if a user has two of the same id in the same triggerSet (?!)
          // then only the second trigger will show up.

          item.triggers[trig.id] = this.processTrigger(trig);
        }
      }
    }

    return map;
  }

  buildTriggerOptions(trig, labelDiv) {
    const optionKey = kOptionKeys.output;
    const div = document.createElement('div');
    div.classList.add('trigger-options');

    const updateLabel = input => {
      if (input.value === 'hidden' || input.value === 'disabled') labelDiv.classList.add('disabled');else labelDiv.classList.remove('disabled');
    };

    const input = document.createElement('select');
    div.appendChild(input);
    const selectValue = this.base.getOption('raidboss', 'triggers', trig.id, optionKey, 'default');

    for (const key in kTriggerOptions) {
      // Hide debug only options unless they are selected.
      // Otherwise, it will look weird to pick something like 'Disabled',
      // but then not show it when developer options are turned off.
      if (!this.base.developerOptions && kTriggerOptions[key].debugOnly && key !== selectValue) continue;
      const elem = document.createElement('option');
      elem.innerHTML = this.base.translate(kTriggerOptions[key].label);
      elem.value = key;
      elem.selected = key === selectValue;
      input.appendChild(elem);
      updateLabel(input);

      input.onchange = () => {
        updateLabel(input);
        let value = input.value;
        if (value.includes('default')) value = 'default';
        this.base.setOption('raidboss', 'triggers', trig.id, optionKey, input.value);
      };
    }

    return div;
  }

} // Raidboss needs to do some extra processing of user files.


const userFileHandler = (name, files, options, basePath) => {
  if (!options.Triggers) return;

  for (const set of options.Triggers) {
    // Annotate triggers with where they came from.  Note, options is passed in repeatedly
    // as multiple sets of user files add triggers, so only process each file once.
    if (set.isUserTriggerSet) continue; // `filename` here is just cosmetic for better debug printing to make it more clear
    // where a trigger or an override is coming from.

    set.filename = `${basePath}${name}`;
    set.isUserTriggerSet = true; // Convert set.timelineFile to set.timeline.

    if (set.timelineFile) {
      const lastIndex = Math.max(name.lastIndexOf('/'), name.lastIndexOf('\\')); // If lastIndex === -1, truncate name to the empty string.
      // if lastIndex > -1, truncate name after the final slash.

      const dir = name.substring(0, lastIndex + 1);
      const timelineFile = `${dir}${set.timelineFile}`;
      delete set.timelineFile;

      if (!(timelineFile in files)) {
        console.log(`ERROR: '${name}' specifies non-existent timeline file '${timelineFile}'.`);
        continue;
      } // set.timeline is processed recursively.


      set.timeline = [set.timeline, files[timelineFile]];
    }
  }
};

const templateOptions = {
  buildExtraUI: (base, container) => {
    const builder = new RaidbossConfigurator(base);
    const userOptions = { ...raidboss_options
    };
    user_config/* default.loadUserFiles */.Z.loadUserFiles('raidboss', userOptions, () => {
      builder.buildUI(container, raidboss_manifest/* default */.Z, userOptions);
    });
  },
  processExtraOptions: (options, savedConfig) => {
    // raidboss will look up this.options.PerTriggerAutoConfig to find these values.
    const optionName = 'PerTriggerAutoConfig';
    options[optionName] = options[optionName] || {};
    const triggers = savedConfig.triggers;
    if (!triggers) return;
    const perTrigger = options[optionName];
    const outputObjs = {};
    const keys = Object.keys(kTriggerOptions);

    for (const key of keys) {
      outputObjs[key] = {};
      setOptionsFromOutputValue(outputObjs[key], key);
    }

    for (const id in triggers) {
      const autoConfig = {};
      const output = triggers[id][kOptionKeys.output];
      if (output) Object.assign(autoConfig, outputObjs[output]);
      const duration = validDurationOrUndefined(triggers[id][kOptionKeys.duration]);
      if (duration) autoConfig[kOptionKeys.duration] = duration;
      const beforeSeconds = validDurationOrUndefined(triggers[id][kOptionKeys.beforeSeconds]);
      if (beforeSeconds) autoConfig[kOptionKeys.beforeSeconds] = beforeSeconds;
      const outputStrings = triggers[id][kOptionKeys.outputStrings];
      if (outputStrings) autoConfig[kOptionKeys.outputStrings] = outputStrings;
      if (output || duration || outputStrings) perTrigger[id] = autoConfig;
    }
  },
  options: [{
    id: 'Debug',
    name: {
      en: 'Enable debug mode',
      de: 'Aktiviere Debugmodus',
      fr: 'Activer le mode debug',
      ja: 'デバッグモードを有効にする',
      cn: '启用调试模式',
      ko: '디버그 모드 활성화'
    },
    type: 'checkbox',
    debugOnly: true
  }, {
    id: 'DefaultAlertOutput',
    name: {
      en: 'Default alert output',
      de: 'Standard Alert Ausgabe',
      fr: 'Alerte par défaut',
      ja: '警告情報出力既定値',
      cn: '默认警报提示信息输出方式',
      ko: '기본 알람 출력 방식'
    },
    type: 'select',
    options: {
      en: {
        '🆙🔊 Text and Sound': 'textAndSound',
        '🆙💬 Text and TTS': 'ttsAndText',
        '💬 TTS Only': 'ttsOnly',
        '🆙 Text Only': 'textOnly',
        '❌ Disabled': 'disabled'
      },
      de: {
        '🆙🔊 Text und Ton': 'textAndSound',
        '🆙💬 Text und TTS': 'ttsAndText',
        '💬 Nur TTS': 'ttsOnly',
        '🆙 Nur Text': 'textOnly',
        '❌ Deaktiviert': 'disabled'
      },
      fr: {
        '🆙🔊 Texte et son': 'textAndSound',
        '🆙💬 Texte et TTS': 'ttsAndText',
        '💬 TTS seulement': 'ttsOnly',
        '🆙 Texte seulement': 'textOnly',
        '❌ Désactivé': 'disabled'
      },
      ja: {
        '🆙🔊 テキストと音声': 'textAndSound',
        '🆙💬 テキストとTTS': 'ttsAndText',
        '💬 TTSのみ': 'ttsOnly',
        '🆙 テキストのみ': 'textOnly',
        '❌ 無効': 'disabled'
      },
      cn: {
        '🆙🔊 文字显示与提示音': 'textAndSound',
        '🆙💬 文字显示与TTS': 'ttsAndText',
        '💬 只使用TTS': 'ttsOnly',
        '🆙 只使用文字显示': 'textOnly',
        '❌ 禁用': 'disabled'
      },
      ko: {
        '🆙🔊 텍스트와 소리': 'textAndSound',
        '🆙💬 텍스트와 TTS': 'ttsAndText',
        '💬 TTS만': 'ttsOnly',
        '🆙 텍스트만': 'textOnly',
        '❌ 비활성화': 'disabled'
      }
    },
    default: 'textAndSound',
    setterFunc: setOptionsFromOutputValue
  }, {
    id: 'AlertsLanguage',
    name: {
      en: 'Alerts language',
      de: 'Alert Sprache',
      fr: 'Langue des alertes',
      ja: '警告情報の言語',
      cn: '警报提示文字的语言',
      ko: '알람 언어'
    },
    type: 'select',
    options: {
      en: {
        'Use Display Language': 'default',
        'English (en)': 'en',
        'Chinese (cn)': 'cn',
        'German (de)': 'de',
        'French (fr)': 'fr',
        'Japanese (ja)': 'ja',
        'Korean (ko)': 'ko'
      },
      fr: {
        'Utiliser la langue d\'affichage': 'default',
        'Anglais (en)': 'en',
        'Chinois (cn)': 'cn',
        'Allemand (de)': 'de',
        'Français (fr)': 'fr',
        'Japonais (ja)': 'ja',
        'Coréen (ko)': 'ko'
      },
      ja: {
        '表示言語既定値': 'default',
        '英語 (en)': 'en',
        '中国語 (cn)': 'cn',
        'ドイツ語 (de)': 'de',
        'フランス語 (fr)': 'fr',
        '日本語 (ja)': 'ja',
        '韓国語 (ko)': 'ko'
      },
      cn: {
        '使用显示语言': 'default',
        '英语 (en)': 'en',
        '汉语 (cn)': 'cn',
        '德语 (de)': 'de',
        '法语 (fr)': 'fr',
        '日语 (ja)': 'ja',
        '韩语 (ko)': 'ko'
      },
      ko: {
        '주 사용 언어 사용': 'default',
        '영어 (en)': 'en',
        '중국어 (cn)': 'cn',
        '독일어 (de)': 'de',
        '프랑스어 (fr)': 'fr',
        '일본어 (ja)': 'ja',
        '한국어 (ko)': 'ko'
      }
    },
    default: 'default',
    debug: true,
    setterFunc: (options, value) => {
      if (value === 'default') return;
      options['AlertsLanguage'] = value;
    }
  }, {
    id: 'TimelineLanguage',
    name: {
      en: 'Timeline language',
      de: 'Timeline Sprache',
      fr: 'Langue de la timeline',
      ja: 'タイムラインの言語',
      cn: '时间轴文本的语言',
      ko: '타임라인 언어'
    },
    type: 'select',
    options: {
      en: {
        'Use FFXIV Plugin Language': 'default',
        'English (en)': 'en',
        'Chinese (cn)': 'cn',
        'German (de)': 'de',
        'French (fr)': 'fr',
        'Japanese (ja)': 'ja',
        'Korean (ko)': 'ko'
      },
      de: {
        'Benutze FFXIV Plugin Sprache': 'default',
        'Englisch (en)': 'en',
        'Chinesisch (cn)': 'cn',
        'Deutsch (de)': 'de',
        'Französisch (fr)': 'fr',
        'Japanisch (ja)': 'ja',
        'Koreanisch (ko)': 'ko'
      },
      fr: {
        'Utiliser la langue du Plugin FFXIV': 'default',
        'Anglais (en)': 'en',
        'Chinois (cn)': 'cn',
        'Allemand (de)': 'de',
        'Français (fr)': 'fr',
        'Japonais (ja)': 'ja',
        'Coréen (ko)': 'ko'
      },
      ja: {
        'FFXIV Pluginの言語設定': 'default',
        '英語 (en)': 'en',
        '中国語 (cn)': 'cn',
        'ドイツ語 (de)': 'de',
        'フランス語 (fr)': 'fr',
        '日本語 (ja)': 'ja',
        '韓国語 (ko)': 'ko'
      },
      cn: {
        '使用最终幻想XIV解析插件设置的语言': 'default',
        '英语 (en)': 'en',
        '汉语 (cn)': 'cn',
        '德语 (de)': 'de',
        '法语 (fr)': 'fr',
        '日语 (ja)': 'ja',
        '韩语 (ko)': 'ko'
      },
      ko: {
        'FFXIV Plugin 언어 사용': 'default',
        '영어 (en)': 'en',
        '중국어 (cn)': 'cn',
        '독일어 (de)': 'de',
        '프랑스어 (fr)': 'fr',
        '일본어 (ja)': 'ja',
        '한국어 (ko)': 'ko'
      }
    },
    default: 'default',
    debug: true,
    setterFunc: (options, value) => {
      if (value === 'default') return;
      options['TimelineLanguage'] = value;
    }
  }, {
    id: 'Skin',
    name: {
      en: 'Raidboss Skin',
      de: 'Raidboss Skin',
      fr: 'Raidboss Skin',
      ja: 'Raidbossのスキン',
      cn: 'Raidboss皮肤',
      ko: 'Raidboss 스킨'
    },
    type: 'select',
    options: {
      en: {
        'Default': 'default',
        'lippe': 'lippe'
      },
      de: {
        'Default': 'default',
        'lippe': 'lippe'
      },
      fr: {
        'Défaut': 'default',
        'lippe': 'lippe'
      },
      ja: {
        '初期設定': 'default',
        'lippe': 'lippe'
      },
      cn: {
        '默认': 'default',
        'lippe': 'lippe'
      },
      ko: {
        '기본': 'default',
        'lippe': 'lippe'
      }
    },
    default: 'default'
  }, {
    id: 'TimelineEnabled',
    name: {
      en: 'Timeline enabled',
      de: 'Timeline aktiviert',
      fr: 'Timeline activée',
      ja: 'タイムラインを有効にする',
      cn: '启用时间轴',
      ko: '타임라인 활성화'
    },
    type: 'checkbox',
    default: true
  }, {
    id: 'AlertsEnabled',
    name: {
      en: 'Alerts enabled',
      de: 'Alerts aktiviert',
      fr: 'Alertes activées',
      ja: '警告情報を有効にする',
      cn: '启用提示文本显示',
      ko: '알람 활성화'
    },
    type: 'checkbox',
    default: true
  }, {
    id: 'ShowTimerBarsAtSeconds',
    name: {
      en: 'Timer bar show window (seconds)',
      de: 'Timer-Bar Anzeigedauer (in Sekunden)',
      fr: 'Fenêtre d\'affichage de la barre de temps (secondes)',
      ja: 'タイムバーに時間表示 (秒)',
      cn: '计时条显示时长 (秒)',
      ko: '타임라인을 표시할 기준 시간 (초 이하)'
    },
    type: 'float',
    default: 30
  }, {
    id: 'KeepExpiredTimerBarsForSeconds',
    name: {
      en: 'Keep expired timer bar (seconds)',
      de: 'Behalte abgelaufene Timer-Bar (in Sekunden)',
      fr: 'Garder la barre de temps expirée (secondes)',
      ja: '終了したタイムバーが消えるまでの待ち時間 (秒)',
      cn: '已失效的计时条的淡出时间 (秒)',
      ko: '만료된 타임라인이 사라지기까지의 시간 (초)'
    },
    type: 'float',
    default: 0.7
  }, {
    id: 'BarExpiresSoonSeconds',
    name: {
      en: 'Time to recolor timer as expiring soon (seconds)',
      de: 'Zeit bis ein bald auslaufender Timer umgefärbt wird (in Sekunden)',
      fr: 'Recolorisation de la barre de temps avant expiration (secondes)',
      ja: 'タイムバーが終了前に再度色付けの残り時間 (秒)',
      cn: '倒计时小于该值时当前计时条变色 (秒)',
      ko: '타임라인의 색상을 바꿀 기준 시간 (초 이하)'
    },
    type: 'integer',
    default: 6
  }, {
    id: 'MaxNumberOfTimerBars',
    name: {
      en: 'Max number of timer bars',
      de: 'Max Anzahl an Timer-Bars',
      fr: 'Nombre max de barres de temps',
      ja: 'タイムバーの最大数',
      cn: '计时条最大数量',
      ko: '표시할 타임라인의 최대 개수'
    },
    type: 'integer',
    default: 6
  }, {
    id: 'DisplayAlarmTextForSeconds',
    name: {
      en: 'Alarm text display duration (seconds)',
      de: 'Alarm-Text Anzeigedauer (in Sekunden)',
      fr: 'Durée d\'affichage du texte d\'alarme (secondes)',
      ja: '警報テキスト表示時間の長さ (秒)',
      cn: '警报文字显示持续时间 (秒)',
      ko: '경고 텍스트를 표시할 시간 (초)'
    },
    type: 'float',
    default: 3
  }, {
    id: 'DisplayAlertTextForSeconds',
    name: {
      en: 'Alert text display duration (seconds)',
      de: 'Alert-Text Anzeigedauer (in Sekunden)',
      fr: 'Durée d\'affichage du texte d\'alerte (secondes)',
      ja: '警告テキスト表示時間の長さ (秒)',
      cn: '警告文字显示持续时间 (秒)',
      ko: '주의 텍스트를 표시할 시간 (초)'
    },
    type: 'float',
    default: 3
  }, {
    id: 'DisplayInfoTextForSeconds',
    name: {
      en: 'Info text display duration (seconds)',
      de: 'Info-Text Anzeigedauer (in Sekunden)',
      fr: 'Durée d\'affichage du texte d\'information (secondes)',
      ja: '情報テキスト表示時間の長さ (秒)',
      cn: '信息文字显示持续时间 (秒)',
      ko: '안내 텍스트를 표시할 시간 (초)'
    },
    type: 'float',
    default: 3
  }, {
    id: 'AlarmSoundVolume',
    name: {
      en: 'Alarm sound volume (0-1)',
      de: 'Alarm Lautstärke (0-1)',
      fr: 'Volume de l\'alarme (0-1)',
      ja: '警報音声の音量 (0-1)',
      cn: '警报提示音的音量 (0-1)',
      ko: '경고 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'AlertSoundVolume',
    name: {
      en: 'Alert sound volume (0-1)',
      de: 'Alert Lautstärke (0-1)',
      fr: 'Volume de l\'alerte (0-1)',
      ja: '警告音声の音量 (0-1)',
      cn: '警告提示音的音量 (0-1)',
      ko: '주의 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'InfoSoundVolume',
    name: {
      en: 'Info sound volume (0-1)',
      de: 'Info Lautstärke (0-1)',
      fr: 'Volume de l\'info (0-1)',
      ja: '情報音声の音量 (0-1)',
      cn: '信息提示音的音量 (0-1)',
      ko: '안내 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'LongSoundVolume',
    name: {
      en: 'Long sound volume (0-1)',
      de: 'Langer Ton Lautstärke (0-1)',
      fr: 'Volume du son long (0-1)',
      ja: '長い音声の音量 (0-1)',
      cn: '长提示音的音量 (0-1)',
      ko: '긴 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'PullSoundVolume',
    name: {
      en: 'Pull sound volume (0-1)',
      de: 'Pull Lautstärke (0-1)',
      fr: 'Volume du son de pull (0-1)',
      ja: 'タゲ取る効果音の音量 (0-1)',
      cn: '开怪提示音的音量 (0-1)',
      ko: '풀링 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'cactbotWormholeStrat',
    // TODO: maybe need some way to group these kinds of
    // options if we end up having a lot?
    name: {
      en: 'Alex Ultimate: enable cactbot Wormhole strat',
      de: 'Alex Ultimate: aktiviere cactbot Wormhole Strategie',
      fr: 'Alex fatal : activer cactbot pour Wormhole strat',
      ja: '絶アレキサンダー討滅戦：cactbot「次元断絶のマーチ」ギミック',
      cn: '亚历山大绝境战：cactbot灵泉辅助功能',
      ko: '절 알렉: cactbot 웜홀 공략방식 활성화'
    },
    type: 'checkbox',
    default: false
  }, {
    id: 'cactbote8sUptimeKnockbackStrat',
    name: {
      en: 'e8s: enable cactbot Uptime Knockback strat',
      de: 'e8s: aktiviere cactbot Uptime Knockback Strategie',
      fr: 'e8s : activer cactbot pour Uptime Knockback strat',
      ja: 'エデン零式共鳴編４層：cactbot「ヘヴンリーストライク (ノックバック)」ギミック',
      cn: 'E8S: 启用cactbot的击退提示功能',
      ko: '공명 영웅 4층: cactbot 정확한 타이밍 넉백방지 공략 활성화'
    },
    type: 'checkbox',
    default: false
  }]
};
user_config/* default.registerOptions */.Z.registerOptions('raidboss', templateOptions, userFileHandler);
;// CONCATENATED MODULE: ./ui/raidboss/emulator/ui/EmulatedMap.js
class EmulatedMap {
  constructor(emulator) {}

}
// EXTERNAL MODULE: ./resources/netregexes.ts
var netregexes = __webpack_require__(641);
;// CONCATENATED MODULE: ./resources/translations.ts


// Fill in LocaleRegex so that things like LocaleRegex.countdownStart.de is a valid regex.
const localeLines = {
    countdownStart: {
        en: 'Battle commencing in (?<time>\\y{Float}) seconds! \\((?<player>.*?)\\)',
        de: 'Noch (?<time>\\y{Float}) Sekunden bis Kampfbeginn! \\((?<player>.*?)\\)',
        fr: 'Début du combat dans (?<time>\\y{Float}) secondes[ ]?! \\((?<player>.*?)\\)',
        ja: '戦闘開始まで(?<time>\\y{Float})秒！ \\((?<player>.*?)\\)',
        cn: '距离战斗开始还有(?<time>\\y{Float})秒！ （(?<player>.*?)）',
        ko: '전투 시작 (?<time>\\y{Float})초 전! \\((?<player>.*?)\\)',
    },
    countdownEngage: {
        en: 'Engage!',
        de: 'Start!',
        fr: 'À l\'attaque[ ]?!',
        ja: '戦闘開始！',
        cn: '战斗开始！',
        ko: '전투 시작!',
    },
    countdownCancel: {
        en: 'Countdown canceled by (?<player>\\y{Name})',
        de: '(?<player>\\y{Name}) hat den Countdown abgebrochen',
        fr: 'Le compte à rebours a été interrompu par (?<player>\\y{Name})[ ]?\\.',
        ja: '(?<player>\\y{Name})により、戦闘開始カウントがキャンセルされました。',
        cn: '(?<player>\\y{Name})取消了战斗开始倒计时。',
        ko: '(?<player>\\y{Name}) 님이 초읽기를 취소했습니다\\.',
    },
    areaSeal: {
        en: '(?<area>.*?) will be sealed off in (?<time>\\y{Float}) seconds!',
        de: 'Noch (?<time>\\y{Float}) Sekunden, bis sich (?<area>.*?) schließt',
        fr: 'Fermeture (?<area>.*?) dans (?<time>\\y{Float}) secondes[ ]?\\.',
        ja: '(?<area>.*?)の封鎖まであと(?<time>\\y{Float})秒',
        cn: '距(?<area>.*?)被封锁还有(?<time>\\y{Float})秒',
        ko: '(?<time>\\y{Float})초 후에 (?<area>.*?)(이|가) 봉쇄됩니다\\.',
    },
    areaUnseal: {
        en: '(?<area>.*?) is no longer sealed.',
        de: '(?<area>.*?) öffnet sich erneut.',
        fr: 'Ouverture (?<area>.*?)[ ]?!',
        ja: '(?<area>.*?)の封鎖が解かれた……',
        cn: '(?<area>.*?)的封锁解除了',
        ko: '(?<area>.*?)의 봉쇄가 해제되었습니다\\.',
    },
    // Recipe name always start with \ue0bb
    // HQ icon is \ue03c
    craftingStart: {
        en: 'You begin synthesizing (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
        de: 'Du hast begonnen, durch Synthese (?<count>(ein(e|es|em|er)?|\\d+) )?\ue0bb(?<recipe>.*) herzustellen\\.',
        fr: 'Vous commencez à fabriquer (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
        ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(×(?<count>\\d+))?の製作を開始した。',
        cn: '(?<player>\\y{Name})开始制作“\ue0bb(?<recipe>.*)”(×(?<count>\\d+))?。',
        ko: '\ue0bb(?<recipe>.*)(×(?<count>\\d+)개)? 제작을 시작합니다\\.',
    },
    trialCraftingStart: {
        en: 'You begin trial synthesis of \ue0bb(?<recipe>.*)\\.',
        de: 'Du hast mit der Testsynthese von \ue0bb(?<recipe>.*) begonnen\\.',
        fr: 'Vous commencez une synthèse d\'essai pour une? \ue0bb(?<recipe>.*)\\.',
        ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習を開始した。',
        cn: '(?<player>\\y{Name})开始练习制作\ue0bb(?<recipe>.*)。',
        ko: '\ue0bb(?<recipe>.*) 제작 연습을 시작합니다\\.',
    },
    craftingFinish: {
        en: 'You synthesize (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
        de: 'Du hast erfolgreich (?<count>(ein(e|es|em|er)?|\\d+) )?(?<recipe>.*)(\ue03c)? hergestellt\\.',
        fr: 'Vous fabriquez (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
        ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+))?を完成させた！',
        cn: '(?<player>\\y{Name})制作“\ue0bb(?<recipe>.*)(\ue03c)?”(×(?<count>\\d+))?成功！',
        ko: '(?<player>\\y{Name}) 님이 \ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+)개)?(을|를) 완성했습니다!',
    },
    trialCraftingFinish: {
        en: 'Your trial synthesis of \ue0bb(?<recipe>.*) proved a success!',
        de: 'Die Testsynthese von \ue0bb(?<recipe>.*) war erfolgreich!',
        fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) a été couronnée de succès!',
        ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に成功した！',
        cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)成功了！',
        ko: '\ue0bb(?<recipe>.*) 제작 연습에 성공했습니다!',
    },
    craftingFail: {
        en: 'Your synthesis fails!',
        de: 'Deine Synthese ist fehlgeschlagen!',
        fr: 'La synthèse échoue\\.{3}',
        ja: '(?<player>\\y{Name})は製作に失敗した……',
        cn: '(?<player>\\y{Name})制作失败了……',
        ko: '제작에 실패했습니다……\\.',
    },
    trialCraftingFail: {
        en: 'Your trial synthesis of \ue0bb(?<recipe>.*) failed\\.{3}',
        de: 'Die Testsynthese von \ue0bb(?<recipe>.*) ist fehlgeschlagen\\.{3}',
        fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) s\'est soldée par un échec\\.{3}',
        ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に失敗した……',
        cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)失败了……',
        ko: '\ue0bb(?<recipe>.*) 제작 연습에 실패했습니다……\\.',
    },
    craftingCancel: {
        en: 'You cancel the synthesis\\.',
        de: 'Du hast die Synthese abgebrochen\\.',
        fr: 'La synthèse est annulée\\.',
        ja: '(?<player>\\y{Name})は製作を中止した。',
        cn: '(?<player>\\y{Name})中止了制作作业。',
        ko: '제작을 중지했습니다\\.',
    },
    trialCraftingCancel: {
        en: 'You abandoned trial synthesis\\.',
        de: 'Testsynthese abgebrochen\\.',
        fr: 'Vous avez interrompu la synthèse d\'essai\\.',
        ja: '(?<player>\\y{Name})は製作練習を中止した。',
        cn: '(?<player>\\y{Name})停止了练习。',
        ko: '제작 연습을 중지했습니다\\.',
    },
};
class RegexSet {
    get localeRegex() {
        if (this.regexes)
            return this.regexes;
        this.regexes = this.buildLocaleRegexes(localeLines, (s) => resources_regexes/* default.gameLog */.Z.gameLog({ line: s + '.*?' }));
        return this.regexes;
    }
    get localeNetRegex() {
        if (this.netRegexes)
            return this.netRegexes;
        this.netRegexes = this.buildLocaleRegexes(localeLines, (s) => netregexes/* default.gameLog */.Z.gameLog({ line: s + '[^|]*?' }));
        return this.netRegexes;
    }
    buildLocaleRegexes(locales, builder) {
        return Object.fromEntries(Object
            .entries(locales)
            .map(([key, lines]) => [key, this.buildLocaleRegex(lines, builder)]));
    }
    buildLocaleRegex(lines, builder) {
        const regexEn = builder(lines.en);
        return {
            en: regexEn,
            de: lines.de ? builder(lines.de) : regexEn,
            fr: lines.fr ? builder(lines.fr) : regexEn,
            ja: lines.ja ? builder(lines.ja) : regexEn,
            cn: lines.cn ? builder(lines.cn) : regexEn,
            ko: lines.ko ? builder(lines.ko) : regexEn,
        };
    }
}
const regexSet = new RegexSet();
const LocaleRegex = regexSet.localeRegex;
const LocaleNetRegex = regexSet.localeNetRegex;

;// CONCATENATED MODULE: ./ui/raidboss/emulator/EmulatorCommon.ts


class EmulatorCommon_EmulatorCommon {
    static cloneData(data, exclude = ['options', 'party']) {
        const ret = {};
        // Use extra logic for top-level extend for property exclusion
        // This cut the execution time of this code from 41,000ms to 50ms when parsing a 12 minute pull
        for (const i in data) {
            if (exclude.includes(i))
                continue;
            if (typeof data[i] === 'object')
                ret[i] = EmulatorCommon_EmulatorCommon._cloneData(data[i]);
            else
                // Assignment of any to any. See DataType definition above for reasoning.
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                ret[i] = data[i];
        }
        return ret;
    }
    static _cloneData(data) {
        if (typeof data === 'object') {
            if (Array.isArray(data)) {
                const ret = [];
                for (let i = 0; i < data.length; ++i)
                    ret[i] = EmulatorCommon_EmulatorCommon._cloneData(data[i]);
                return ret;
            }
            if (data === null)
                return null;
            if (data instanceof RegExp)
                return new RegExp(data);
            const ret = {};
            for (const i in data)
                ret[i] = EmulatorCommon_EmulatorCommon._cloneData(data[i]);
            return ret;
        }
        return data;
    }
    static timeToString(time, includeMillis = true) {
        const negative = time < 0 ? '-' : '';
        time = Math.abs(time);
        const millisNum = time % 1000;
        const secsNum = ((time % (60 * 1000)) - millisNum) / 1000;
        // Milliseconds
        const millis = `00${millisNum}`.substr(-3);
        const secs = `0${secsNum}`.substr(-2);
        const mins = `0${((((time % (60 * 60 * 1000)) - millisNum) / 1000) - secsNum) / 60}`.substr(-2);
        return negative + mins + ':' + secs + (includeMillis ? '.' + millis : '');
    }
    static timeToDateString(time) {
        return this.dateObjectToDateString(new Date(time));
    }
    static dateObjectToDateString(date) {
        const year = date.getFullYear();
        const month = EmulatorCommon_EmulatorCommon.zeroPad((date.getMonth() + 1).toString());
        const day = EmulatorCommon_EmulatorCommon.zeroPad(date.getDate().toString());
        return `${year}-${month}-${day}`;
    }
    static timeToTimeString(time, includeMillis = false) {
        return this.dateObjectToTimeString(new Date(time), includeMillis);
    }
    static dateObjectToTimeString(date, includeMillis = false) {
        const hour = EmulatorCommon_EmulatorCommon.zeroPad(date.getHours().toString());
        const minute = EmulatorCommon_EmulatorCommon.zeroPad(date.getMinutes().toString());
        const second = EmulatorCommon_EmulatorCommon.zeroPad(date.getSeconds().toString());
        let ret = `${hour}:${minute}:${second}`;
        if (includeMillis)
            ret = ret + `.${date.getMilliseconds()}`;
        return ret;
    }
    static msToDuration(ms) {
        const tmp = EmulatorCommon_EmulatorCommon.timeToString(ms, false);
        return tmp.replace(':', 'm') + 's';
    }
    static dateTimeToString(time, includeMillis = false) {
        const date = new Date(time);
        return `${this.dateObjectToDateString(date)} ${this.dateObjectToTimeString(date, includeMillis)}`;
    }
    static zeroPad(str, len = 2) {
        return ('' + str).padStart(len, '0');
    }
    static properCase(str) {
        return str.replace(/([^\W_]+[^\s-]*) */g, (txt) => {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
    }
    static spacePadLeft(str, len) {
        return str.padStart(len, ' ');
    }
    static doesLineMatch(line, regexes) {
        if (regexes instanceof RegExp)
            return regexes.exec(line);
        for (const langStr in regexes) {
            const lang = langStr;
            const res = regexes[lang].exec(line);
            if (res) {
                if (res.groups)
                    res.groups.language = lang;
                return res;
            }
        }
        return null;
    }
    static matchStart(line) {
        var _a, _b, _c, _d;
        let res;
        // Currently all of these regexes have groups if they match at all,
        // but be robust to that changing in the future.
        res = EmulatorCommon_EmulatorCommon.doesLineMatch(line, EmulatorCommon_EmulatorCommon.countdownRegexes);
        if (res) {
            (_a = res.groups) !== null && _a !== void 0 ? _a : (res.groups = {});
            res.groups.StartIn = (parseInt((_b = res.groups.time) !== null && _b !== void 0 ? _b : '0') * 1000).toString();
            res.groups.StartType = 'Countdown';
            return res;
        }
        res = EmulatorCommon_EmulatorCommon.doesLineMatch(line, EmulatorCommon_EmulatorCommon.sealRegexes);
        if (res) {
            (_c = res.groups) !== null && _c !== void 0 ? _c : (res.groups = {});
            res.groups.StartIn = '0';
            res.groups.StartType = 'Seal';
            return res;
        }
        res = EmulatorCommon_EmulatorCommon.doesLineMatch(line, EmulatorCommon_EmulatorCommon.engageRegexes);
        if (res) {
            (_d = res.groups) !== null && _d !== void 0 ? _d : (res.groups = {});
            res.groups.StartIn = '0';
            res.groups.StartType = 'Engage';
            return res;
        }
    }
    static matchEnd(line) {
        var _a, _b, _c, _d;
        let res;
        // Currently all of these regexes have groups if they match at all,
        // but be robust to that changing in the future.
        res = EmulatorCommon_EmulatorCommon.doesLineMatch(line, EmulatorCommon_EmulatorCommon.winRegex);
        if (res) {
            (_a = res.groups) !== null && _a !== void 0 ? _a : (res.groups = {});
            res.groups.EndType = 'Win';
            return res;
        }
        res = EmulatorCommon_EmulatorCommon.doesLineMatch(line, EmulatorCommon_EmulatorCommon.wipeRegex);
        if (res) {
            (_b = res.groups) !== null && _b !== void 0 ? _b : (res.groups = {});
            res.groups.EndType = 'Wipe';
            return res;
        }
        res = EmulatorCommon_EmulatorCommon.doesLineMatch(line, EmulatorCommon_EmulatorCommon.cactbotWipeRegex);
        if (res) {
            (_c = res.groups) !== null && _c !== void 0 ? _c : (res.groups = {});
            res.groups.EndType = 'Cactbot Wipe';
            return res;
        }
        res = EmulatorCommon_EmulatorCommon.doesLineMatch(line, EmulatorCommon_EmulatorCommon.unsealRegexes);
        if (res) {
            (_d = res.groups) !== null && _d !== void 0 ? _d : (res.groups = {});
            res.groups.EndType = 'Unseal';
            return res;
        }
    }
}
EmulatorCommon_EmulatorCommon.sealRegexes = LocaleNetRegex.areaSeal;
EmulatorCommon_EmulatorCommon.engageRegexes = LocaleNetRegex.countdownEngage;
EmulatorCommon_EmulatorCommon.countdownRegexes = LocaleNetRegex.countdownStart;
EmulatorCommon_EmulatorCommon.unsealRegexes = LocaleNetRegex.areaUnseal;
EmulatorCommon_EmulatorCommon.wipeRegex = netregexes/* default.network6d */.Z.network6d({ command: '40000010' });
EmulatorCommon_EmulatorCommon.winRegex = netregexes/* default.network6d */.Z.network6d({ command: '40000003' });
EmulatorCommon_EmulatorCommon.cactbotWipeRegex = netregexes/* default.echo */.Z.echo({ line: 'cactbot wipe.*?' });

;// CONCATENATED MODULE: ./ui/raidboss/emulator/EventBus.ts
/**
 * This is a base class that classes can extend to inherit event bus capabilities.
 * This allows other classes to listen for events with the `on` function.
 * The inheriting class can fire those events with the `dispatch` function.
 */
class EventBus_EventBus {
    constructor() {
        this.listeners = {};
    }
    /**
     * Subscribe to an event
     *
     * @param event The event(s) to subscribe to, space separated
     * @param callback The callback to invoke
     * @param scope Optional. The scope to apply the function against
     * @returns The callbacks registered to the event(s)
     */
    on(event, callback, scope) {
        var _a, _b;
        var _c;
        const events = event.split(' ');
        const ret = [];
        scope = scope !== null && scope !== void 0 ? scope : (typeof window === 'undefined' ? {} : window);
        for (const event of events) {
            const events = (_a = (_c = this.listeners)[event]) !== null && _a !== void 0 ? _a : (_c[event] = []);
            if (callback !== undefined)
                events.push({ event: event, scope: scope, callback: callback });
            ret.push(...((_b = this.listeners[event]) !== null && _b !== void 0 ? _b : []));
        }
        return ret;
    }
    /**
     * Dispatch an event to any subscribers
     *
     * @param event The event to dispatch
     * @param eventArguments The event arguments to pass to listeners
     * @returns A promise that can be await'd or ignored
     */
    async dispatch(event, ...eventArguments) {
        var _a;
        if (this.listeners[event] === undefined)
            return;
        for (const l of (_a = this.listeners[event]) !== null && _a !== void 0 ? _a : []) {
            const res = l.callback.apply(l.scope, eventArguments);
            await Promise.resolve(res);
        }
    }
}

// EXTERNAL MODULE: ./resources/not_reached.ts
var not_reached = __webpack_require__(509);
;// CONCATENATED MODULE: ./ui/raidboss/emulator/ui/Tooltip.ts

const hideEvents = [
    'mouseleave',
    'blur',
];
const validDirections = (/* unused pure expression or super */ null && ([
    'top',
    'right',
    'bottom',
    'left',
]));
const showEvents = [
    'mouseenter',
    'focus',
];
const toPx = (px) => `${px}px`;
class Tooltip {
    constructor(
    // @TODO: Refactor this to only accept HTMLElement after upstream classes are converted
    targetRef, direction, text, autoShow = true, autoHide = true) {
        this.offset = {
            x: 0,
            y: 0,
        };
        Tooltip.initializeTemplates();
        let target;
        if (typeof targetRef === 'string')
            target = document.querySelector(targetRef);
        else
            target = targetRef;
        if (!(target instanceof HTMLElement)) {
            const msg = 'Invalid selector or element passed to Tooltip';
            console.error(msg);
            throw new Error(msg);
        }
        this.target = target;
        this.direction = direction;
        this.tooltip = Tooltip.cloneTemplate(direction);
        const innerElem = this.tooltip.querySelector('.tooltip-inner');
        if (!(innerElem instanceof HTMLElement))
            throw new not_reached/* UnreachableCode */.$();
        this.inner = innerElem;
        const arrowElem = this.tooltip.querySelector('.arrow');
        if (!(arrowElem instanceof HTMLElement))
            throw new not_reached/* UnreachableCode */.$();
        this.arrow = arrowElem;
        this.setText(text);
        document.body.append(this.tooltip);
        if (autoShow) {
            showEvents.forEach((e) => {
                this.target.addEventListener(e, () => {
                    this.show();
                });
            });
        }
        if (autoHide) {
            hideEvents.forEach((e) => {
                this.target.addEventListener(e, () => {
                    this.hide();
                });
            });
        }
    }
    setText(text) {
        this.inner.textContent = text;
    }
    show() {
        const targetRect = this.target.getBoundingClientRect();
        const targetMiddle = {
            x: targetRect.x + (targetRect.width / 2),
            y: targetRect.y + (targetRect.height / 2),
        };
        const tooltipRect = this.tooltip.getBoundingClientRect();
        // Middle of tooltip - half of arrow height
        const lrArrowHeight = (tooltipRect.height / 2) -
            (this.arrow.getBoundingClientRect().height / 2);
        switch (this.direction) {
            case 'top':
                this.tooltip.style.left = toPx((targetMiddle.x - (tooltipRect.width / 2)) + this.offset.x);
                this.tooltip.style.bottom = toPx((targetRect.y - tooltipRect.height) + this.offset.y);
                break;
            case 'right':
                this.tooltip.style.left = toPx(targetRect.right + this.offset.x);
                this.tooltip.style.top = toPx((targetMiddle.y - (tooltipRect.height / 2)) + this.offset.y);
                this.arrow.style.top = toPx(lrArrowHeight);
                break;
            case 'bottom':
                this.tooltip.style.left = toPx((targetMiddle.x - (tooltipRect.width / 2)) + this.offset.x);
                this.tooltip.style.top = toPx(targetRect.bottom + this.offset.y);
                break;
            case 'left':
                this.tooltip.style.left = toPx((targetRect.left - tooltipRect.width) + this.offset.x);
                this.tooltip.style.top = toPx((targetMiddle.y - (tooltipRect.height / 2)) + this.offset.y);
                this.arrow.style.top = toPx(lrArrowHeight);
                break;
        }
        this.tooltip.classList.add('show');
        this.tooltip.setAttribute('data-show', '');
    }
    hide() {
        this.tooltip.classList.remove('show');
        this.tooltip.removeAttribute('data-show');
    }
    static initializeTemplates() {
        if (Tooltip.templates)
            return;
        Tooltip.templates = {
            top: Tooltip.getTemplate('top'),
            right: Tooltip.getTemplate('right'),
            bottom: Tooltip.getTemplate('bottom'),
            left: Tooltip.getTemplate('left'),
        };
    }
    static getTemplate(dir) {
        const elemName = `${dir}TooltipTemplate`;
        const ret = document.getElementById(elemName);
        if (ret instanceof HTMLElement)
            return ret;
        throw new not_reached/* UnreachableCode */.$();
    }
    static cloneTemplate(direction) {
        var _a;
        const template = Tooltip.templates[direction];
        const node = (_a = template.content.querySelector('.tooltip')) === null || _a === void 0 ? void 0 : _a.cloneNode(true);
        if (node instanceof HTMLElement)
            return node;
        throw new not_reached/* UnreachableCode */.$();
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/ui/EmulatedPartyInfo.js




class EmulatedPartyInfo extends EventBus_EventBus {
  constructor(emulator) {
    super();
    this.tooltips = [];
    this.emulator = emulator;
    this.$partyInfo = document.querySelector('.partyInfoColumn .party');
    this.$triggerInfo = document.querySelector('.triggerInfoColumn');
    this.$triggerHideSkippedCheckbox = document.querySelector('.triggerHideSkipped');
    this.$triggerHideCollectCheckbox = document.querySelector('.triggerHideCollector');
    this.$triggerBar = document.querySelector('.playerTriggers');
    this.triggerBars = [];
    this.latestDisplayedState = 0;
    this.displayedParty = {};
    this.currentPerspective = null;

    for (let i = 0; i < 8; ++i) this.triggerBars[i] = this.$triggerBar.querySelector('.player' + i);

    emulator.on('tick', (currentLogTime, lastLogLineTime) => {
      if (lastLogLineTime) {
        this.updatePartyInfo(emulator, lastLogLineTime);
        this.latestDisplayedState = Math.max(this.latestDisplayedState, lastLogLineTime);
      }
    });
    emulator.on('currentEncounterChanged', encounter => {
      this.resetPartyInfo(encounter);
    });
    emulator.on('preSeek', time => {
      this.latestDisplayedState = 0;
    });
    emulator.on('postSeek', time => {
      this.updatePartyInfo(emulator, time);
      this.latestDisplayedState = Math.max(this.latestDisplayedState, time);
    });

    this.updateTriggerState = () => {
      if (this.$triggerHideSkippedCheckbox.checked) this.hideNonExecutedTriggers();else this.showNonExecutedTriggers();
      if (this.$triggerHideCollectCheckbox.checked) this.hideCollectorTriggers();else this.showCollectorTriggers();
    };

    this.$triggerHideSkippedCheckbox.addEventListener('change', this.updateTriggerState);
    this.$triggerHideCollectCheckbox.addEventListener('change', this.updateTriggerState);
    this.$triggerItemTemplate = document.querySelector('template.triggerItem').content.firstElementChild;
    this.$playerInfoRowTemplate = document.querySelector('template.playerInfoRow').content.firstElementChild;
    this.$playerTriggerInfoTemplate = document.querySelector('template.playerTriggerInfo').content.firstElementChild;
    this.$jsonViewerTemplate = document.querySelector('template.jsonViewer').content.firstElementChild;
    this.$triggerLabelTemplate = document.querySelector('template.triggerLabel').content.firstElementChild;
    this.$wrapCollapseTemplate = document.querySelector('template.wrapCollapse').content.firstElementChild;
  }

  hideNonExecutedTriggers() {
    this.$triggerInfo.querySelectorAll('.trigger-not-executed').forEach(n => {
      n.classList.add('d-none');
    });
  }

  showNonExecutedTriggers() {
    this.$triggerInfo.querySelectorAll('.trigger-not-executed').forEach(n => {
      n.classList.remove('d-none');
    });
  }

  hideCollectorTriggers() {
    this.$triggerInfo.querySelectorAll('.trigger-no-output').forEach(n => {
      n.classList.add('d-none');
    });
  }

  showCollectorTriggers() {
    this.$triggerInfo.querySelectorAll('.trigger-no-output').forEach(n => {
      n.classList.remove('d-none');
    });
  }
  /**
   * @param {RaidEmulator} emulator
   * @param {string} timestamp
   */


  updatePartyInfo(emulator, timestamp) {
    for (const id in this.displayedParty) this.updateCombatantInfo(emulator.currentEncounter, id, timestamp);
  }
  /**
   * @param {AnalyzedEncounter} encounter
   */


  resetPartyInfo(encounter) {
    this.tooltips.map(tt => {
      tt.tooltip.remove();
      return null;
    });
    this.tooltips = [];
    this.currentPerspective = null;
    this.displayedParty = {};
    this.latestDisplayedState = 0;
    this.$partyInfo.innerHTML = '';
    this.$triggerBar.querySelectorAll('.triggerItem').forEach(n => {
      n.remove();
    });
    const membersToDisplay = encounter.encounter.combatantTracker.partyMembers.sort((l, r) => {
      const a = encounter.encounter.combatantTracker.combatants[l];
      const b = encounter.encounter.combatantTracker.combatants[r];
      return EmulatedPartyInfo.jobOrder.indexOf(a.job) - EmulatedPartyInfo.jobOrder.indexOf(b.job);
    }).slice(0, 8);
    document.querySelectorAll('.playerTriggerInfo').forEach(n => {
      n.remove();
    });

    for (let i = 0; i < membersToDisplay.length; ++i) {
      const id = membersToDisplay[i];
      const obj = this.getPartyInfoObjectFor(encounter, id);
      this.displayedParty[id] = obj;
      this.updateCombatantInfo(encounter, id);
      this.$partyInfo.append(obj.$rootElem);
      this.$triggerInfo.append(obj.$triggerElem);
      this.triggerBars[i].classList.remove('tank');
      this.triggerBars[i].classList.remove('healer');
      this.triggerBars[i].classList.remove('dps');

      if (encounter.encounter.combatantTracker.combatants[id].job) {
        this.triggerBars[i].classList.add(util/* default.jobToRole */.Z.jobToRole(encounter.encounter.combatantTracker.combatants[id].job));
      }

      for (const triggerIndex in encounter.perspectives[id].triggers) {
        const trigger = encounter.perspectives[id].triggers[triggerIndex];
        if (!trigger.status.executed || trigger.resolvedOffset > encounter.encounter.duration) continue;
        const $e = this.$triggerItemTemplate.cloneNode(true);
        $e.style.left = trigger.resolvedOffset / encounter.encounter.duration * 100 + '%';
        this.tooltips.push(new Tooltip($e, 'bottom', trigger.triggerHelper.trigger.id));
        this.triggerBars[i].append($e);
      }
    }

    this.updateTriggerState();
    this.selectPerspective(membersToDisplay[0]);
  }

  selectPerspective(id) {
    if (id === this.currentPerspective) return;
    if (!this.emulator.currentEncounter.encounter.combatantTracker.combatants[id].job) return;
    this.currentPerspective = id;
    this.$triggerInfo.querySelectorAll('.playerTriggerInfo').forEach(r => r.classList.add('d-none'));
    this.displayedParty[id].$triggerElem.classList.remove('d-none');
    this.$partyInfo.querySelectorAll('.playerInfoRow').forEach(r => {
      r.classList.remove('border');
      r.classList.remove('border-success');
    });
    this.displayedParty[id].$rootElem.classList.add('border');
    this.displayedParty[id].$rootElem.classList.add('border-success');
    this.dispatch('selectPerspective', id);
  }

  updateCombatantInfo(encounter, id, stateID = null) {
    if (stateID <= this.latestDisplayedState) return;
    const combatant = encounter.encounter.combatantTracker.combatants[id];
    if (!combatant) return;
    stateID = stateID || combatant.getState(0);
    const State = combatant.getState(stateID);
    if (State === undefined) return;
    const hpProg = State.hp / State.maxHp * 100;
    let hpLabel = State.hp + '/' + State.maxHp;
    hpLabel = EmulatorCommon_EmulatorCommon.spacePadLeft(hpLabel, State.maxHp.toString().length * 2 + 1);
    this.displayedParty[id].$hpProgElem.ariaValueNow = State.hp;
    this.displayedParty[id].$hpProgElem.ariaValueMax = State.maxHp;
    this.displayedParty[id].$hpProgElem.style.width = hpProg + '%';
    this.displayedParty[id].$hpLabelElem.textContent = hpLabel;
    const mpProg = State.mp / State.maxMp * 100;
    let mpLabel = State.mp + '/' + State.maxMp;
    mpLabel = EmulatorCommon_EmulatorCommon.spacePadLeft(mpLabel, State.maxMp.toString().length * 2 + 1);
    this.displayedParty[id].$mpProgElem.ariaValueNow = State.mp;
    this.displayedParty[id].$mpProgElem.ariaValueMax = State.maxMp;
    this.displayedParty[id].$mpProgElem.style.width = mpProg + '%';
    this.displayedParty[id].$mpLabelElem.textContent = mpLabel;
  }

  getPartyInfoObjectFor(encounter, id) {
    const $e = this.$playerInfoRowTemplate.cloneNode(true);
    const $hp = $e.querySelector('.hp');
    const $mp = $e.querySelector('.mp');
    const $name = $e.querySelector('.playerName');
    const ret = {
      $rootElem: $e,
      $iconElem: $e.querySelector('jobicon'),
      $hpElem: $hp,
      $hpLabelElem: $hp.querySelector('.label'),
      $hpProgElem: $hp.querySelector('.progress-bar'),
      $mpElem: $mp,
      $mpLabelElem: $mp.querySelector('.label'),
      $mpProgElem: $mp.querySelector('.progress-bar'),
      $nameElem: $name,
      id: id,
      $triggerElem: this.getTriggerInfoObjectFor(encounter, id)
    };
    const combatant = encounter.encounter.combatantTracker.combatants[id];
    ret.$rootElem.classList.add((combatant.job || '').toUpperCase());
    this.tooltips.push(new Tooltip(ret.$rootElem, 'left', combatant.name));
    $name.innerHTML = combatant.name;
    ret.$rootElem.addEventListener('click', e => {
      this.selectPerspective(id);
    });
    ret.$triggerElem.setAttribute('data-id', id);
    return ret;
  }

  getTriggerInfoObjectFor(encounter, id) {
    const $ret = this.$playerTriggerInfoTemplate.cloneNode(true);
    const $container = $ret.querySelector('.d-flex.flex-column');
    const per = encounter.perspectives[id];
    const $initDataViewer = this.$jsonViewerTemplate.cloneNode(true);
    $initDataViewer.textContent = JSON.stringify(per.initialData, null, 2);
    $container.append(this._wrapCollapse({
      time: '00:00',
      name: 'Initial Data',
      classes: ['data'],
      $obj: $initDataViewer
    }));
    const $triggerContainer = $container.querySelector('.d-flex.flex-column');

    for (const i in per.triggers.sort((l, r) => l.resolvedOffset - r.resolvedOffset)) {
      const $triggerDataViewer = this.$jsonViewerTemplate.cloneNode(true);
      $triggerDataViewer.textContent = JSON.stringify(per.triggers[i], null, 2);
      const triggerText = this.getTriggerLabelText(per.triggers[i]);

      const $trigger = this._wrapCollapse({
        time: this.getTriggerResolvedLabelTime(per.triggers[i]),
        name: per.triggers[i].triggerHelper.trigger.id,
        icon: this.getTriggerLabelIcon(per.triggers[i]),
        text: triggerText,
        classes: [per.triggers[i].status.responseType],
        $obj: $triggerDataViewer
      });

      if (per.triggers[i].status.executed) $trigger.classList.add('trigger-executed');else $trigger.classList.add('trigger-not-executed');
      if (triggerText === undefined) $trigger.classList.add('trigger-no-output');else $trigger.classList.add('trigger-output');
      $triggerContainer.append($trigger);
    }

    $container.append($triggerContainer);
    const $finalDataViewer = this.$jsonViewerTemplate.cloneNode(true);
    $finalDataViewer.textContent = JSON.stringify(per.finalData, null, 2);
    $container.append(this._wrapCollapse({
      time: EmulatorCommon_EmulatorCommon.timeToString(encounter.encounter.duration - encounter.encounter.initialOffset, false),
      name: 'Final Data',
      classes: ['data'],
      $obj: $finalDataViewer
    }));
    return $ret;
  }

  getTriggerLabelText(trigger) {
    let ret = trigger.status.responseLabel;
    if (typeof ret === 'object') ret = trigger.triggerHelper.valueOrFunction(ret);
    if (typeof ret === 'boolean') ret = undefined;else if (typeof ret === 'undefined') ret = undefined;else if (typeof ret !== 'string') ret = 'Invalid Result?';
    if (ret === '') ret = undefined;
    return ret;
  }

  getTriggerLabelIcon(trigger) {
    const type = trigger.status.responseType;

    switch (type) {
      case 'info':
        return 'info';

      case 'alert':
        return 'bell';

      case 'alarm':
        return 'exclamation';

      case 'tts':
        return 'bullhorn';

      case 'audiofile':
        return 'volume-up';
    }

    return undefined;
  }

  getTriggerFiredLabelTime(Trigger) {
    return EmulatorCommon_EmulatorCommon.timeToString(Trigger.logLine.offset - this.emulator.currentEncounter.encounter.initialOffset, false);
  }

  getTriggerResolvedLabelTime(Trigger) {
    return EmulatorCommon_EmulatorCommon.timeToString(Trigger.resolvedOffset - this.emulator.currentEncounter.encounter.initialOffset, false);
  }
  /**
   * @param {object} params Parameters to use for the wrapper.
   * @param {Element} params.$obj Object to wrap in a collapseable button
   * @param {string} [params.time] Time to display
   * @param {string} [params.name] Name/label of the button
   * @param {string} [params.icon] FontAwesome icon to display
   * @param {[string]} [params.classes] Array of classes to add to the button
   * @param {CallableFunction} [params.onclick] Callback to trigger when clicking the button
   */


  _wrapCollapse(params) {
    const $ret = this.$wrapCollapseTemplate.cloneNode(true);
    const $button = $ret.querySelector('.btn');
    const $time = $ret.querySelector('.trigger-label-time');
    const $name = $ret.querySelector('.trigger-label-name');
    const $icon = $ret.querySelector('.trigger-label-icon');
    const $text = $ret.querySelector('.trigger-label-text');
    if (params.name === undefined) $name.parentNode.removeChild($name);else $name.textContent = params.name;
    if (params.time === undefined) $time.parentNode.removeChild($time);else $time.textContent = params.time;
    if (params.text === undefined) $text.parentNode.removeChild($text);else $text.textContent = params.text;
    if (params.icon === undefined) $icon.parentNode.removeChild($icon);else $icon.innerHTML = `<i class="fa fa-${params.icon}" aria-hidden="true"></i>`;
    if (Array.isArray(params.classes)) params.classes.forEach(c => $button.classList.add('triggertype-' + c));
    const $wrapper = $ret.querySelector('.wrap-collapse-wrapper');
    $button.addEventListener('click', () => {
      if ($wrapper.classList.contains('d-none')) $wrapper.classList.remove('d-none');else $wrapper.classList.add('d-none');
      typeof params.onclick === 'function' && params.onclick();
    });
    $wrapper.append(params.$obj);
    return $ret;
  }

}
EmulatedPartyInfo.jobOrder = ['PLD', 'WAR', 'DRK', 'GNB', 'WHM', 'SCH', 'AST', 'MNK', 'DRG', 'NIN', 'SAM', 'BRD', 'MCH', 'DNC', 'BLM', 'SMN', 'RDM', 'BLU'];
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/Combatant.ts

class Combatant {
    constructor(id, name) {
        this.name = '';
        this.server = '';
        this.states = {};
        this.significantStates = [];
        this.latestTimestamp = -1;
        this.id = id;
        this.setName(name);
    }
    setName(name) {
        var _a, _b, _c;
        // Sometimes network lines arrive after the combatant has been cleared
        // from memory in the client, so the network line will have a valid ID
        // but the name will be blank. Since we're tracking the name for the
        // entire fight and not on a state-by-state basis, we don't want to
        // blank out a name in this case.
        // If a combatant actually has a blank name, that's still allowed by
        // the constructor.
        if (name === '')
            return;
        const parts = name.split('(');
        this.name = (_a = parts[0]) !== null && _a !== void 0 ? _a : '';
        if (parts.length > 1)
            this.server = (_c = (_b = parts[1]) === null || _b === void 0 ? void 0 : _b.replace(/\)$/, '')) !== null && _c !== void 0 ? _c : '';
    }
    hasState(timestamp) {
        return this.states[timestamp] !== undefined;
    }
    pushState(timestamp, state) {
        this.states[timestamp] = state;
        this.latestTimestamp = timestamp;
        if (!this.significantStates.includes(timestamp))
            this.significantStates.push(timestamp);
    }
    nextSignificantState(timestamp) {
        var _a;
        // Shortcut out if this is significant or if there's no higher significant state
        const index = this.significantStates.indexOf(timestamp);
        const lastSignificantStateIndex = this.significantStates.length - 1;
        // If timestamp is a significant state already, and it's not the last one, return the next
        if (index >= 0 && index < lastSignificantStateIndex)
            return this.getStateByIndex(index + 1);
        // If timestamp is the last significant state or the timestamp is past the last significant
        // state, return the last significant state
        else if (index === lastSignificantStateIndex ||
            timestamp > ((_a = this.significantStates[lastSignificantStateIndex]) !== null && _a !== void 0 ? _a : 0))
            return this.getStateByIndex(lastSignificantStateIndex);
        for (let i = 0; i < this.significantStates.length; ++i) {
            const stateIndex = this.significantStates[i];
            if (stateIndex && stateIndex > timestamp)
                return this.getStateByIndex(i);
        }
        return this.getStateByIndex(this.significantStates.length - 1);
    }
    pushPartialState(timestamp, props) {
        var _a;
        if (this.states[timestamp] === undefined) {
            // Clone the last state before this timestamp
            const stateTimestamp = (_a = this.significantStates
                .filter((s) => s < timestamp)
                .sort((a, b) => b - a)[0]) !== null && _a !== void 0 ? _a : this.significantStates[0];
            if (stateTimestamp === undefined)
                throw new not_reached/* UnreachableCode */.$();
            const state = this.states[stateTimestamp];
            if (!state)
                throw new not_reached/* UnreachableCode */.$();
            this.states[timestamp] = state.partialClone(props);
        }
        else {
            const state = this.states[timestamp];
            if (!state)
                throw new not_reached/* UnreachableCode */.$();
            this.states[timestamp] = state.partialClone(props);
        }
        this.latestTimestamp = Math.max(this.latestTimestamp, timestamp);
        const lastSignificantStateTimestamp = this.significantStates[this.significantStates.length - 1];
        if (!lastSignificantStateTimestamp)
            throw new not_reached/* UnreachableCode */.$();
        const oldStateJSON = JSON.stringify(this.states[lastSignificantStateTimestamp]);
        const newStateJSON = JSON.stringify(this.states[timestamp]);
        if (lastSignificantStateTimestamp !== timestamp && newStateJSON !== oldStateJSON)
            this.significantStates.push(timestamp);
    }
    getState(timestamp) {
        const stateByTimestamp = this.states[timestamp];
        if (stateByTimestamp)
            return stateByTimestamp;
        const initialTimestamp = this.significantStates[0];
        if (initialTimestamp === undefined)
            throw new not_reached/* UnreachableCode */.$();
        if (timestamp < initialTimestamp)
            return this.getStateByIndex(0);
        let i = 0;
        for (; i < this.significantStates.length; ++i) {
            const prevTimestamp = this.significantStates[i];
            if (prevTimestamp === undefined)
                throw new not_reached/* UnreachableCode */.$();
            if (prevTimestamp > timestamp)
                return this.getStateByIndex(i - 1);
        }
        return this.getStateByIndex(i - 1);
    }
    // Should only be called when `index` is valid.
    getStateByIndex(index) {
        const stateIndex = this.significantStates[index];
        if (stateIndex === undefined)
            throw new not_reached/* UnreachableCode */.$();
        const state = this.states[stateIndex];
        if (state === undefined)
            throw new not_reached/* UnreachableCode */.$();
        return state;
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/CombatantJobSearch.ts
class CombatantJobSearch {
    static getJob(abilityId) {
        for (const [key, value] of Object.entries(CombatantJobSearch.abilities)) {
            if (value === null || value === void 0 ? void 0 : value.includes(abilityId))
                return key;
        }
    }
}
CombatantJobSearch.abilityMatchRegex = /[a-fA-F0-9]{1,4}/i;
CombatantJobSearch.abilities = {
    PLD: [
        12959, 12961, 12964, 12967, 12968, 12969, 12970, 12971, 12972, 12973, 12974, 12975,
        12976, 12978, 12980, 12981, 12982, 12983, 12984, 12985, 12986, 12987, 12988, 12989,
        12991, 12992, 12993, 12994, 12996, 13000, 13001, 13006, 14480, 16457, 16458, 16459,
        16460, 16461, 17669, 17671, 17672, 17691, 17692, 17693, 17694, 17866, 18050, 27, 29,
        30, 3538, 3539, 3540, 3541, 3542, 4284, 4285, 4286, 50207, 50209, 50246, 50260, 50261,
        50262, 50263, 50264, 7382, 7383, 7384, 7385, 8746, 8749, 8750, 8751, 8752, 8754, 8755,
        8756,
    ],
    WAR: [
        16462, 16463, 16464, 16465, 17695, 17696, 17697, 17698, 17889, 3549, 3550, 3551, 3552,
        4289, 4290, 4291, 49, 50157, 50218, 50249, 50265, 50266, 50267, 50268, 50269, 51, 52,
        7386, 7387, 7388, 7389, 8758, 8761, 8762, 8763, 8764, 8765, 8767, 8768,
    ],
    DRK: [
        16466, 16467, 16468, 16469, 16470, 16471, 16472, 17700, 17701, 17702, 3617, 3621, 3623,
        3624, 3625, 3629, 3632, 3634, 3636, 3638, 3639, 3640, 3641, 3643, 4303, 4304, 4305, 4306,
        4307, 4308, 4309, 4310, 4311, 4312, 4680, 50158, 50159, 50271, 50272, 50319, 7390, 7391,
        7392, 7393, 8769, 8772, 8773, 8775, 8776, 8777, 8778, 8779,
    ],
    GNB: [
        17703, 17704, 17705, 17706, 17707, 17708, 17709, 17710, 17711, 17712, 17713, 17714,
        17716, 17717, 17890, 17891, 16137, 50320, 16138, 16139, 16140, 16141, 16142, 16143,
        16144, 16145, 16162, 50257, 16148, 16149, 16151, 16152, 50258, 16153, 16154, 16146,
        16147, 16150, 16159, 16160, 16161, 16155, 16156, 16157, 16158, 16163, 16164, 16165,
        50259,
    ],
    WHM: [
        12958, 12962, 12965, 12997, 13002, 13003, 13004, 13005, 131, 136, 137, 139, 140, 14481,
        1584, 16531, 16532, 16533, 16534, 16535, 16536, 17688, 17689, 17690, 17789, 17790, 17791,
        17793, 17794, 17832, 3568, 3569, 3570, 3571, 4296, 4297, 50181, 50182, 50196, 50307,
        50308, 50309, 50310, 7430, 7431, 7432, 7433, 8895, 8896, 8900, 9621, 127, 133,
    ],
    SCH: [
        16537, 16538, 16539, 16540, 16541, 16542, 16543, 16544, 16545, 16546, 16547, 16548, 16550,
        16551, 166, 167, 17215, 17216, 17795, 17796, 17797, 17798, 17802, 17864, 17865, 17869,
        17870, 17990, 185, 186, 188, 189, 190, 3583, 3584, 3585, 3586, 3587, 4300, 50184, 50214,
        50311, 50312, 50313, 50324, 7434, 7435, 7436, 7437, 7438, 7869, 802, 803, 805, 8904, 8905,
        8909, 9622,
    ],
    AST: [
        10027, 10028, 10029, 16552, 16553, 16554, 16555, 16556, 16557, 16558, 16559, 17055, 17151,
        17152, 17804, 17805, 17806, 17807, 17809, 17991, 3590, 3593, 3594, 3595, 3596, 3598, 3599,
        3600, 3601, 3603, 3604, 3605, 3606, 3608, 3610, 3612, 3613, 3614, 3615, 4301, 4302, 4401,
        4402, 4403, 4404, 4405, 4406, 4677, 4678, 4679, 50122, 50124, 50125, 50186, 50187, 50188,
        50189, 50314, 50315, 50316, 7439, 7440, 7441, 7442, 7443, 7444, 7445, 7448, 8324, 8913,
        8914, 8916, 9629,
    ],
    MNK: [
        12960, 12963, 12966, 12977, 12979, 12990, 12995, 12998, 12999, 14476, 14478, 16473, 16474,
        16475, 16476, 17674, 17675, 17676, 17677, 17719, 17720, 17721, 17722, 17723, 17724, 17725,
        17726, 3543, 3545, 3546, 3547, 4262, 4287, 4288, 50160, 50161, 50245, 50273, 50274, 63, 70,
        71, 7394, 7395, 7396, 74, 8780, 8781, 8782, 8783, 8784, 8785, 8787, 8789, 8925,
    ],
    DRG: [
        16477, 16478, 16479, 16480, 17728, 17729, 3553, 3554, 3555, 3556, 3557, 4292, 4293, 50162,
        50163, 50247, 50275, 50276, 7397, 7398, 7399, 7400, 86, 8791, 8792, 8793, 8794, 8795,
        8796, 8797, 8798, 8799, 8802, 8803, 8804, 8805, 8806, 92, 94, 95, 96, 9640, 75, 78,
    ],
    NIN: [
        16488, 16489, 16491, 16492, 16493, 17413, 17414, 17415, 17416, 17417, 17418, 17419, 17420,
        17732, 17733, 17734, 17735, 17736, 17737, 17738, 17739, 2246, 2259, 2260, 2261, 2262,
        2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 3563, 3566, 4295, 50165,
        50166, 50167, 50250, 50279, 50280, 7401, 7402, 7403, 8807, 8808, 8809, 8810, 8812, 8814,
        8815, 8816, 8820, 9461,
    ],
    SAM: [
        16481, 16482, 16483, 16484, 16485, 16486, 16487, 17740, 17741, 17742, 17743, 17744, 50208,
        50215, 50277, 50278, 7477, 7478, 7479, 7480, 7481, 7482, 7483, 7484, 7485, 7486, 7487,
        7488, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7501, 7502, 7855,
        7857, 7867, 8821, 8822, 8823, 8824, 8825, 8826, 8828, 8829, 8830, 8831, 8833,
    ],
    BRD: [
        10023, 114, 116, 117, 118, 13007, 14479, 16494, 16495, 16496, 17678, 17679, 17680, 17681,
        17682, 17745, 17747, 3558, 3559, 3560, 3561, 3562, 4294, 50168, 50169, 50282, 50283, 50284,
        50285, 50286, 50287, 7404, 7405, 7406, 7407, 7408, 7409, 8836, 8837, 8838, 8839, 8841,
        8842, 8843, 8844, 9625, 106,
    ],
    MCH: [
        16497, 16498, 16499, 16500, 16501, 16502, 16503, 16504, 16766, 16889, 17206, 17209, 17749,
        17750, 17751, 17752, 17753, 17754, 2864, 2866, 2868, 2870, 2872, 2873, 2874, 2876, 2878,
        2890, 4276, 4675, 4676, 50117, 50119, 50288, 50289, 50290, 50291, 50292, 50293, 50294,
        7410, 7411, 7412, 7413, 7414, 7415, 7416, 7418, 8848, 8849, 8850, 8851, 8853, 8855,
    ],
    DNC: [
        17756, 17757, 17758, 17759, 17760, 17761, 17762, 17763, 17764, 17765, 17766, 17767,
        17768, 17769, 17770, 17771, 17772, 17773, 17824, 17825, 17826, 17827, 17828, 17829,
        18076, 15989, 15990, 15993, 15997, 15999, 16000, 16001, 16002, 16003, 16191, 16192,
        15991, 15994, 16007, 50252, 15995, 15992, 15996, 16008, 16010, 50251, 16015, 16012,
        16006, 18073, 50253, 16011, 16009, 50254, 15998, 16004, 16193, 16194, 16195, 16196,
        16013, 16005, 50255, 50256, 16014,
    ],
    BLM: [
        14477, 153, 154, 158, 159, 162, 16505, 16506, 16507, 17683, 17684, 17685, 17686, 17687,
        17774, 17775, 3573, 3574, 3575, 3576, 3577, 4298, 50171, 50172, 50173, 50174, 50295,
        50296, 50297, 50321, 50322, 7419, 7420, 7421, 7422, 8858, 8859, 8860, 8861, 8862, 8863,
        8864, 8865, 8866, 8867, 8869, 9637, 149, 155, 141, 152,
    ],
    SMN: [
        16510, 16511, 16513, 16514, 16515, 16516, 16517, 16518, 16519, 16522, 16523, 16549,
        16795, 16796, 16797, 16798, 16799, 16800, 16801, 16802, 16803, 17777, 17778, 17779,
        17780, 17781, 17782, 17783, 17784, 17785, 180, 184, 3578, 3579, 3580, 3581, 3582, 4299,
        50176, 50177, 50178, 50213, 50217, 50298, 50299, 50300, 50301, 50302, 7423, 7424, 7425,
        7426, 7427, 7428, 7429, 7449, 7450, 787, 788, 791, 792, 794, 796, 797, 798, 800, 801,
        8872, 8873, 8874, 8877, 8878, 8879, 8880, 8881, 9014, 9432,
    ],
    RDM: [
        10025, 16524, 16525, 16526, 16527, 16528, 16529, 16530, 17786, 17787, 17788, 50195,
        50200, 50201, 50216, 50303, 50304, 50305, 50306, 7503, 7504, 7505, 7506, 7507, 7509,
        7510, 7511, 7512, 7513, 7514, 7515, 7516, 7517, 7518, 7519, 7520, 7521, 7523, 7524,
        7525, 7526, 7527, 7528, 7529, 7530, 8882, 8883, 8884, 8885, 8887, 8888, 8889, 8890,
        8891, 8892, 9433, 9434,
    ],
    BLU: [
        11715, 11383, 11384, 11385, 11386, 11387, 11388, 11389, 11390, 11391, 11392, 11393,
        11394, 11395, 11396, 11397, 11398, 11399, 11400, 11401, 11402, 11403, 11404, 11405,
        11406, 11407, 11408, 11409, 11410, 11411, 11412, 11413, 11414, 11415, 11416, 11417,
        11418, 11419, 11420, 11421, 11422, 11423, 11424, 11425, 11426, 11427, 11428, 11429,
        11430, 11431, 50219, 50220, 50221, 50222, 50223, 50224,
    ],
};

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/CombatantState.ts
class CombatantState {
    constructor(posX, posY, posZ, heading, targetable, hp, maxHp, mp, maxMp) {
        this.posX = posX;
        this.posY = posY;
        this.posZ = posZ;
        this.heading = heading;
        this.targetable = targetable;
        this.hp = hp;
        this.maxHp = maxHp;
        this.mp = mp;
        this.maxMp = maxMp;
    }
    partialClone(props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        return new CombatantState((_a = props.posX) !== null && _a !== void 0 ? _a : this.posX, (_b = props.posY) !== null && _b !== void 0 ? _b : this.posY, (_c = props.posZ) !== null && _c !== void 0 ? _c : this.posZ, (_d = props.heading) !== null && _d !== void 0 ? _d : this.heading, (_e = props.targetable) !== null && _e !== void 0 ? _e : this.targetable, (_f = props.hp) !== null && _f !== void 0 ? _f : this.hp, (_g = props.maxHp) !== null && _g !== void 0 ? _g : this.maxHp, (_h = props.mp) !== null && _h !== void 0 ? _h : this.mp, (_j = props.maxMp) !== null && _j !== void 0 ? _j : this.maxMp);
    }
    toPluginState() {
        return {
            PosX: this.posX,
            PosY: this.posY,
            PosZ: this.posZ,
            Heading: this.heading,
            CurrentHP: this.hp,
            MaxHP: this.maxHp,
            CurrentMP: this.mp,
            MaxMP: this.maxMp,
        };
    }
}

;// CONCATENATED MODULE: ./resources/pet_names.ts
// Auto-generated from gen_pet_names.py
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
    'cn': [
        '绿宝石兽',
        '黄宝石兽',
        '伊弗利特之灵',
        '泰坦之灵',
        '迦楼罗之灵',
        '朝日小仙女',
        '夕月小仙女',
        '车式浮空炮塔',
        '象式浮空炮塔',
        '亚灵神巴哈姆特',
        '亚灵神不死鸟',
        '炽天使',
        '月长宝石兽',
        '英雄的掠影',
        '后式自走人偶',
        '分身',
    ],
    'de': [
        'Smaragd-Karfunkel',
        'Topas-Karfunkel',
        'Ifrit-Egi',
        'Titan-Egi',
        'Garuda-Egi',
        'Eos',
        'Selene',
        'Selbstschuss-Gyrocopter TURM',
        'Selbstschuss-Gyrocopter LÄUFER',
        'Demi-Bahamut',
        'Demi-Phönix',
        'Seraph',
        'Mondstein-Karfunkel',
        'Schattenschemen',
        'Automaton DAME',
        'Gedoppeltes Ich',
    ],
    'en': [
        'Emerald Carbuncle',
        'Topaz Carbuncle',
        'Ifrit-Egi',
        'Titan-Egi',
        'Garuda-Egi',
        'Eos',
        'Selene',
        'Rook Autoturret',
        'Bishop Autoturret',
        'Demi-Bahamut',
        'Demi-Phoenix',
        'Seraph',
        'Moonstone Carbuncle',
        'Esteem',
        'Automaton Queen',
        'Bunshin',
    ],
    'fr': [
        'Carbuncle émeraude',
        'Carbuncle topaze',
        'Ifrit-Egi',
        'Titan-Egi',
        'Garuda-Egi',
        'Eos',
        'Selene',
        'Auto-tourelle Tour',
        'Auto-tourelle Fou',
        'Demi-Bahamut',
        'Demi-Phénix',
        'Séraphin',
        'Carbuncle hécatolite',
        'Estime',
        'Automate Reine',
        'Ombre',
    ],
    'ja': [
        'カーバンクル・エメラルド',
        'カーバンクル・トパーズ',
        'イフリート・エギ',
        'タイタン・エギ',
        'ガルーダ・エギ',
        'フェアリー・エオス',
        'フェアリー・セレネ',
        'オートタレット・ルーク',
        'オートタレット・ビショップ',
        'デミ・バハムート',
        'デミ・フェニックス',
        'セラフィム',
        'カーバンクル・ムーンストーン',
        '英雄の影身',
        'オートマトン・クイーン',
        '分身',
    ],
    'ko': [
        '카벙클 에메랄드',
        '카벙클 토파즈',
        '이프리트 에기',
        '타이탄 에기',
        '가루다 에기',
        '요정 에오스',
        '요정 셀레네',
        '자동포탑 룩',
        '자동포탑 비숍',
        '데미바하무트',
        '데미피닉스',
        '세라핌',
        '카벙클 문스톤',
        '영웅의 환영',
        '자동인형 퀸',
        '분신',
    ],
};
/* harmony default export */ const pet_names = (data);

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent.ts

const fields = {
    event: 0,
    timestamp: 1,
};
/**
 * Generic class to track an FFXIV log line
 */
class LineEvent {
    constructor(repo, networkLine, parts) {
        var _a, _b, _c;
        this.networkLine = networkLine;
        this.offset = 0;
        this.invalid = false;
        this.index = 0;
        this.decEvent = parseInt((_a = parts[fields.event]) !== null && _a !== void 0 ? _a : '0');
        this.hexEvent = EmulatorCommon_EmulatorCommon.zeroPad(this.decEvent.toString(16).toUpperCase());
        this.timestamp = new Date((_b = parts[fields.timestamp]) !== null && _b !== void 0 ? _b : '0').getTime();
        this.checksum = (_c = parts.slice(-1)[0]) !== null && _c !== void 0 ? _c : '';
        repo.updateTimestamp(this.timestamp);
        this.convertedLine = this.prefix() + (parts.join(':')).replace('|', ':');
    }
    prefix() {
        return '[' + EmulatorCommon_EmulatorCommon.timeToTimeString(this.timestamp, true) + '] ' + this.hexEvent + ':';
    }
    static isDamageHallowed(damage) {
        return (parseInt(damage, 16) & parseInt('1000', 16)) > 0;
    }
    static isDamageBig(damage) {
        return (parseInt(damage, 16) & parseInt('4000', 16)) > 0;
    }
    static calculateDamage(damage) {
        if (LineEvent.isDamageHallowed(damage))
            return 0;
        damage = EmulatorCommon_EmulatorCommon.zeroPad(damage, 8);
        const parts = [
            damage.substr(0, 2),
            damage.substr(2, 2),
            damage.substr(4, 2),
            damage.substr(6, 2),
        ];
        if (!LineEvent.isDamageBig(damage))
            return parseInt(parts.slice(0, 2).reverse().join(''), 16);
        return parseInt((parts[3] + parts[0]) +
            (parseInt(parts[1], 16) - parseInt(parts[3], 16)).toString(16), 16);
    }
}
const isLineEventSource = (line) => {
    return 'isSource' in line;
};
const isLineEventTarget = (line) => {
    return 'isTarget' in line;
};
const isLineEventJobLevel = (line) => {
    return 'isJobLevel' in line;
};
const isLineEventAbility = (line) => {
    return 'isAbility' in line;
};

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/CombatantTracker.ts





class CombatantTracker {
    constructor(logLines, language) {
        this.combatants = {};
        this.partyMembers = [];
        this.enemies = [];
        this.others = [];
        this.pets = [];
        this.initialStates = {};
        this.language = language;
        this.firstTimestamp = Number.MAX_SAFE_INTEGER;
        this.lastTimestamp = 0;
        this.initialize(logLines);
        // Clear initialStates after we initialize, we don't need it anymore
        this.initialStates = {};
    }
    initialize(logLines) {
        var _a, _b, _c, _d, _e, _f, _g;
        // First pass: Get list of combatants, figure out where they
        // start at if possible
        for (const line of logLines) {
            this.firstTimestamp = Math.min(this.firstTimestamp, line.timestamp);
            this.lastTimestamp = Math.max(this.lastTimestamp, line.timestamp);
            if (isLineEventSource(line))
                this.addCombatantFromLine(line);
            if (isLineEventTarget(line))
                this.addCombatantFromTargetLine(line);
        }
        // Between passes: Create our initial combatant states
        for (const id in this.initialStates) {
            const state = (_a = this.initialStates[id]) !== null && _a !== void 0 ? _a : {};
            (_b = this.combatants[id]) === null || _b === void 0 ? void 0 : _b.pushState(this.firstTimestamp, new CombatantState(Number(state.posX), Number(state.posY), Number(state.posZ), Number(state.heading), (_c = state.targetable) !== null && _c !== void 0 ? _c : false, Number(state.hp), Number(state.maxHp), Number(state.mp), Number(state.maxMp)));
        }
        // Second pass: Analyze combatant information for tracking
        const eventTracker = {};
        for (const line of logLines) {
            if (isLineEventSource(line)) {
                const state = this.extractStateFromLine(line);
                if (state) {
                    eventTracker[line.id] = (_d = eventTracker[line.id]) !== null && _d !== void 0 ? _d : 0;
                    ++eventTracker[line.id];
                    (_e = this.combatants[line.id]) === null || _e === void 0 ? void 0 : _e.pushPartialState(line.timestamp, state);
                }
            }
            if (isLineEventTarget(line)) {
                const state = this.extractStateFromTargetLine(line);
                if (state) {
                    eventTracker[line.targetId] = (_f = eventTracker[line.targetId]) !== null && _f !== void 0 ? _f : 0;
                    ++eventTracker[line.targetId];
                    (_g = this.combatants[line.targetId]) === null || _g === void 0 ? void 0 : _g.pushPartialState(line.timestamp, state);
                }
            }
        }
        // Figure out party/enemy/other status
        const petNames = pet_names[this.language];
        this.others = this.others.filter((ID) => {
            var _a, _b, _c, _d, _e;
            if (((_a = this.combatants[ID]) === null || _a === void 0 ? void 0 : _a.job) !== undefined &&
                ((_b = this.combatants[ID]) === null || _b === void 0 ? void 0 : _b.job) !== 'NONE' &&
                ID.startsWith('1')) {
                this.partyMembers.push(ID);
                return false;
            }
            else if (petNames.includes((_d = (_c = this.combatants[ID]) === null || _c === void 0 ? void 0 : _c.name) !== null && _d !== void 0 ? _d : '')) {
                this.pets.push(ID);
                return false;
            }
            else if (((_e = eventTracker[ID]) !== null && _e !== void 0 ? _e : 0) > 0) {
                this.enemies.push(ID);
                return false;
            }
            return true;
        });
        // Main combatant is the one that took the most actions
        this.mainCombatantID = this.enemies.sort((l, r) => {
            var _a, _b;
            return ((_a = eventTracker[r]) !== null && _a !== void 0 ? _a : 0) - ((_b = eventTracker[l]) !== null && _b !== void 0 ? _b : 0);
        })[0];
    }
    addCombatantFromLine(line) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const combatant = this.initCombatant(line.id, line.name);
        const initState = (_a = this.initialStates[line.id]) !== null && _a !== void 0 ? _a : {};
        const extractedState = (_b = this.extractStateFromLine(line)) !== null && _b !== void 0 ? _b : {};
        initState.posX = (_c = initState.posX) !== null && _c !== void 0 ? _c : extractedState.posX;
        initState.posY = (_d = initState.posY) !== null && _d !== void 0 ? _d : extractedState.posY;
        initState.posZ = (_e = initState.posZ) !== null && _e !== void 0 ? _e : extractedState.posZ;
        initState.heading = (_f = initState.heading) !== null && _f !== void 0 ? _f : extractedState.heading;
        initState.targetable = (_g = initState.targetable) !== null && _g !== void 0 ? _g : extractedState.targetable;
        initState.hp = (_h = initState.hp) !== null && _h !== void 0 ? _h : extractedState.hp;
        initState.maxHp = (_j = initState.maxHp) !== null && _j !== void 0 ? _j : extractedState.maxHp;
        initState.mp = (_k = initState.mp) !== null && _k !== void 0 ? _k : extractedState.mp;
        initState.maxMp = (_l = initState.maxMp) !== null && _l !== void 0 ? _l : extractedState.maxMp;
        if (isLineEventJobLevel(line)) {
            combatant.job = (_o = (_m = this.combatants[line.id]) === null || _m === void 0 ? void 0 : _m.job) !== null && _o !== void 0 ? _o : line.job;
            combatant.level = (_q = (_p = this.combatants[line.id]) === null || _p === void 0 ? void 0 : _p.level) !== null && _q !== void 0 ? _q : line.level;
        }
        if (isLineEventAbility(line)) {
            if (!combatant.job && !line.id.startsWith('4') && line.abilityId !== undefined)
                combatant.job = CombatantJobSearch.getJob(line.abilityId);
        }
    }
    addCombatantFromTargetLine(line) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        this.initCombatant(line.targetId, line.targetName);
        const initState = (_a = this.initialStates[line.targetId]) !== null && _a !== void 0 ? _a : {};
        const extractedState = (_b = this.extractStateFromTargetLine(line)) !== null && _b !== void 0 ? _b : {};
        initState.posX = (_c = initState.posX) !== null && _c !== void 0 ? _c : extractedState.posX;
        initState.posY = (_d = initState.posY) !== null && _d !== void 0 ? _d : extractedState.posY;
        initState.posZ = (_e = initState.posZ) !== null && _e !== void 0 ? _e : extractedState.posZ;
        initState.heading = (_f = initState.heading) !== null && _f !== void 0 ? _f : extractedState.heading;
        initState.hp = (_g = initState.hp) !== null && _g !== void 0 ? _g : extractedState.hp;
        initState.maxHp = (_h = initState.maxHp) !== null && _h !== void 0 ? _h : extractedState.maxHp;
        initState.mp = (_j = initState.mp) !== null && _j !== void 0 ? _j : extractedState.mp;
        initState.maxMp = (_k = initState.maxMp) !== null && _k !== void 0 ? _k : extractedState.maxMp;
    }
    extractStateFromLine(line) {
        const state = {};
        if (line.x !== undefined)
            state.posX = line.x;
        if (line.y !== undefined)
            state.posY = line.y;
        if (line.z !== undefined)
            state.posZ = line.z;
        if (line.heading !== undefined)
            state.heading = line.heading;
        if (line.targetable !== undefined)
            state.targetable = line.targetable;
        if (line.hp !== undefined)
            state.hp = line.hp;
        if (line.maxHp !== undefined)
            state.maxHp = line.maxHp;
        if (line.mp !== undefined)
            state.mp = line.mp;
        if (line.maxMp !== undefined)
            state.maxMp = line.maxMp;
        return state;
    }
    extractStateFromTargetLine(line) {
        const state = {};
        if (line.targetX !== undefined)
            state.posX = line.targetX;
        if (line.targetY !== undefined)
            state.posY = line.targetY;
        if (line.targetZ !== undefined)
            state.posZ = line.targetZ;
        if (line.targetHeading !== undefined)
            state.heading = line.targetHeading;
        if (line.targetHp !== undefined)
            state.hp = line.targetHp;
        if (line.targetMaxHp !== undefined)
            state.maxHp = line.targetMaxHp;
        if (line.targetMp !== undefined)
            state.mp = line.targetMp;
        if (line.targetMaxMp !== undefined)
            state.maxMp = line.targetMaxMp;
        return state;
    }
    initCombatant(id, name) {
        let combatant = this.combatants[id];
        if (combatant === undefined) {
            combatant = this.combatants[id] = new Combatant(id, name);
            this.others.push(id);
            this.initialStates[id] = {
                targetable: true,
            };
        }
        else if (combatant.name === '') {
            combatant.setName(name);
        }
        return combatant;
    }
    getMainCombatantName() {
        var _a, _b;
        if (this.mainCombatantID)
            return (_b = (_a = this.combatants[this.mainCombatantID]) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'Unknown';
        return 'Unknown';
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LogRepository.ts
class LogRepository {
    constructor() {
        this.Combatants = {};
        this.firstTimestamp = Number.MAX_SAFE_INTEGER;
    }
    updateTimestamp(timestamp) {
        this.firstTimestamp = Math.min(this.firstTimestamp, timestamp);
    }
    updateCombatant(id, c) {
        id = id.toUpperCase();
        if (id && id.length) {
            let combatant = this.Combatants[id];
            if (combatant === undefined) {
                combatant = {
                    name: c.name,
                    job: c.job,
                    spawn: c.spawn,
                    despawn: c.despawn,
                };
                this.Combatants[id] = combatant;
            }
            else {
                combatant.name = c.name || combatant.name;
                combatant.job = c.job || combatant.job;
                combatant.spawn = Math.min(combatant.spawn, c.spawn);
                combatant.despawn = Math.max(combatant.despawn, c.despawn);
            }
        }
    }
    resolveName(id, name, fallbackId = null, fallbackName = null) {
        var _a, _b;
        let ret = name;
        if (fallbackId !== null) {
            if (id === 'E0000000' && ret === '') {
                if (fallbackId.startsWith('4'))
                    ret = fallbackName !== null && fallbackName !== void 0 ? fallbackName : '';
                else
                    ret = 'Unknown';
            }
        }
        if (ret === '')
            ret = (_b = (_a = this.Combatants[id]) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : '';
        return ret;
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x00.ts

const LineEvent0x00_fields = {
    type: 2,
    speaker: 3,
};
// Chat event
class LineEvent0x00 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b;
        super(repo, line, parts);
        this.type = (_a = parts[LineEvent0x00_fields.type]) !== null && _a !== void 0 ? _a : '';
        this.speaker = (_b = parts[LineEvent0x00_fields.speaker]) !== null && _b !== void 0 ? _b : '';
        this.message = parts.slice(4, -1).join('|');
        // The exact reason for this check isn't clear anymore but may be related to
        // https://github.com/ravahn/FFXIV_ACT_Plugin/issues/250
        if (this.message.split('\u001f\u001f').length > 1)
            this.invalid = true;
        this.convertedLine =
            this.prefix() + this.type + ':' +
                // If speaker is blank, it's excluded from the converted line
                (this.speaker !== '' ? this.speaker + ':' : '') +
                this.message.trim();
        this.convertedLine = LineEvent00.replaceChatSymbols(this.convertedLine);
    }
    static replaceChatSymbols(line) {
        for (const rep of LineEvent00.chatSymbolReplacements)
            line = line.replace(rep.Search, rep.Replace);
        return line;
    }
}
LineEvent0x00.chatSymbolReplacements = [
    {
        Search: /:\uE06F/g,
        Replace: ':⇒',
        Type: 'Symbol',
    },
    {
        Search: / \uE0BB\uE05C/g,
        Replace: ' ',
        Type: 'Positive Effect',
    },
    {
        Search: / \uE0BB\uE05B/g,
        Replace: ' ',
        Type: 'Negative Effect',
    },
];
class LineEvent00 extends LineEvent0x00 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x01.ts


const LineEvent0x01_fields = {
    zoneId: 2,
    zoneName: 3,
};
// Zone change event
class LineEvent0x01_LineEvent0x01 extends LineEvent {
    constructor(repo, networkLine, parts) {
        var _a, _b;
        super(repo, networkLine, parts);
        this.zoneId = (_a = parts[LineEvent0x01_fields.zoneId]) !== null && _a !== void 0 ? _a : '';
        this.zoneName = (_b = parts[LineEvent0x01_fields.zoneName]) !== null && _b !== void 0 ? _b : '';
        this.zoneNameProperCase = EmulatorCommon_EmulatorCommon.properCase(this.zoneName);
        this.convertedLine = this.prefix() +
            'Changed Zone to ' + this.zoneName + '.';
        this.properCaseConvertedLine = this.prefix() +
            'Changed Zone to ' + this.zoneNameProperCase + '.';
    }
}
class LineEvent01 extends LineEvent0x01_LineEvent0x01 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x02.ts

const LineEvent0x02_fields = {
    id: 2,
    name: 3,
};
// Player change event
class LineEvent0x02 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c;
        super(repo, line, parts);
        this.id = (_b = (_a = parts[LineEvent0x02_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x02_fields.name]) !== null && _c !== void 0 ? _c : '';
        this.convertedLine = this.prefix() + 'Changed primary player to ' + this.name + '.';
    }
}
class LineEvent02 extends LineEvent0x02 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x03.ts



const LineEvent0x03_fields = {
    id: 2,
    name: 3,
    jobIdHex: 4,
    levelString: 5,
    ownerId: 6,
    worldId: 7,
    worldName: 8,
    npcNameId: 9,
    npcBaseId: 10,
    currentHp: 11,
    maxHpString: 14,
    currentMp: 13,
    maxMpString: 14,
    currentTp: 15,
    maxTp: 16,
    xString: 17,
    yString: 18,
    zString: 19,
    heading: 20,
};
// Added combatant event
class LineEvent0x03 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
        super(repo, line, parts);
        this.isSource = true;
        this.isJobLevel = true;
        this.id = (_b = (_a = parts[LineEvent0x03_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x03_fields.name]) !== null && _c !== void 0 ? _c : '';
        this.jobIdHex = (_e = (_d = parts[LineEvent0x03_fields.jobIdHex]) === null || _d === void 0 ? void 0 : _d.toUpperCase()) !== null && _e !== void 0 ? _e : '';
        this.jobId = parseInt(this.jobIdHex, 16);
        this.job = util/* default.jobEnumToJob */.Z.jobEnumToJob(this.jobId);
        this.levelString = (_f = parts[LineEvent0x03_fields.levelString]) !== null && _f !== void 0 ? _f : '';
        this.level = parseFloat(this.levelString);
        this.ownerId = (_h = (_g = parts[LineEvent0x03_fields.ownerId]) === null || _g === void 0 ? void 0 : _g.toUpperCase()) !== null && _h !== void 0 ? _h : '';
        this.worldId = (_j = parts[LineEvent0x03_fields.worldId]) !== null && _j !== void 0 ? _j : '';
        this.worldName = (_k = parts[LineEvent0x03_fields.worldName]) !== null && _k !== void 0 ? _k : '';
        this.npcNameId = (_l = parts[LineEvent0x03_fields.npcNameId]) !== null && _l !== void 0 ? _l : '';
        this.npcBaseId = (_m = parts[LineEvent0x03_fields.npcBaseId]) !== null && _m !== void 0 ? _m : '';
        this.hp = parseFloat((_o = parts[LineEvent0x03_fields.currentHp]) !== null && _o !== void 0 ? _o : '');
        this.maxHpString = (_p = parts[LineEvent0x03_fields.maxHpString]) !== null && _p !== void 0 ? _p : '';
        this.maxHp = parseFloat(this.maxHpString);
        this.mp = parseFloat((_q = parts[LineEvent0x03_fields.currentMp]) !== null && _q !== void 0 ? _q : '');
        this.maxMpString = (_r = parts[LineEvent0x03_fields.maxMpString]) !== null && _r !== void 0 ? _r : '';
        this.maxMp = parseFloat(this.maxMpString);
        this.tp = parseFloat((_s = parts[LineEvent0x03_fields.currentTp]) !== null && _s !== void 0 ? _s : '');
        this.maxTp = parseFloat((_t = parts[LineEvent0x03_fields.maxTp]) !== null && _t !== void 0 ? _t : '');
        this.xString = (_u = parts[LineEvent0x03_fields.xString]) !== null && _u !== void 0 ? _u : '';
        this.x = parseFloat(this.xString);
        this.yString = (_v = parts[LineEvent0x03_fields.yString]) !== null && _v !== void 0 ? _v : '';
        this.y = parseFloat(this.yString);
        this.zString = (_w = parts[LineEvent0x03_fields.zString]) !== null && _w !== void 0 ? _w : '';
        this.z = parseFloat(this.zString);
        this.heading = parseFloat((_x = parts[LineEvent0x03_fields.heading]) !== null && _x !== void 0 ? _x : '');
        repo.updateCombatant(this.id, {
            name: this.name,
            spawn: this.timestamp,
            despawn: this.timestamp,
            job: this.jobIdHex,
        });
        let combatantName = this.name;
        if (this.worldName !== '')
            combatantName = combatantName + '(' + this.worldName + ')';
        this.convertedLine = this.prefix() + this.id.toUpperCase() +
            ':Added new combatant ' + combatantName +
            '.  Job: ' + this.job +
            ' Level: ' + this.levelString +
            ' Max HP: ' + this.maxHpString +
            ' Max MP: ' + this.maxMpString +
            ' Pos: (' + this.xString + ',' + this.yString + ',' + this.zString + ')';
        // This last part is guesswork for the area between 9 and 10.
        const unknownValue = this.npcNameId +
            EmulatorCommon_EmulatorCommon.zeroPad(this.npcBaseId, 8 + Math.max(0, 6 - this.npcNameId.length));
        if (unknownValue !== '00000000000000')
            this.convertedLine += ' (' + unknownValue + ')';
        this.convertedLine += '.';
    }
}
class LineEvent03 extends LineEvent0x03 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x04.ts

// Removed combatant event
// Extend the add combatant event to reduce duplicate code since they're
// the same from a data perspective
class LineEvent0x04 extends LineEvent0x03 {
    constructor(repo, line, parts) {
        super(repo, line, parts);
        this.convertedLine = this.prefix() + this.id.toUpperCase() +
            ':Removing combatant ' + this.name +
            '. Max MP: ' + this.maxMpString +
            '. Pos: (' + this.xString + ',' + this.yString + ',' + this.zString + ')';
    }
}
class LineEvent04 extends LineEvent0x04 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x0C.ts

const LineEvent0x0C_fields = {
    class: 2,
    strength: 3,
    dexterity: 4,
    vitality: 5,
    intelligence: 6,
    mind: 7,
    piety: 8,
    attackPower: 9,
    directHit: 10,
    criticalHit: 11,
    attackMagicPotency: 12,
    healMagicPotency: 13,
    determination: 14,
    skillSpeed: 15,
    spellSpeed: 16,
    tenacity: 18,
};
// Player stats event
class LineEvent0x0C extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        super(repo, line, parts);
        this.class = (_a = parts[LineEvent0x0C_fields.class]) !== null && _a !== void 0 ? _a : '';
        this.strength = (_b = parts[LineEvent0x0C_fields.strength]) !== null && _b !== void 0 ? _b : '';
        this.dexterity = (_c = parts[LineEvent0x0C_fields.dexterity]) !== null && _c !== void 0 ? _c : '';
        this.vitality = (_d = parts[LineEvent0x0C_fields.vitality]) !== null && _d !== void 0 ? _d : '';
        this.intelligence = (_e = parts[LineEvent0x0C_fields.intelligence]) !== null && _e !== void 0 ? _e : '';
        this.mind = (_f = parts[LineEvent0x0C_fields.mind]) !== null && _f !== void 0 ? _f : '';
        this.piety = (_g = parts[LineEvent0x0C_fields.piety]) !== null && _g !== void 0 ? _g : '';
        this.attackPower = (_h = parts[LineEvent0x0C_fields.attackPower]) !== null && _h !== void 0 ? _h : '';
        this.directHit = (_j = parts[LineEvent0x0C_fields.directHit]) !== null && _j !== void 0 ? _j : '';
        this.criticalHit = (_k = parts[LineEvent0x0C_fields.criticalHit]) !== null && _k !== void 0 ? _k : '';
        this.attackMagicPotency = (_l = parts[LineEvent0x0C_fields.attackMagicPotency]) !== null && _l !== void 0 ? _l : '';
        this.healMagicPotency = (_m = parts[LineEvent0x0C_fields.healMagicPotency]) !== null && _m !== void 0 ? _m : '';
        this.determination = (_o = parts[LineEvent0x0C_fields.determination]) !== null && _o !== void 0 ? _o : '';
        this.skillSpeed = (_p = parts[LineEvent0x0C_fields.skillSpeed]) !== null && _p !== void 0 ? _p : '';
        this.spellSpeed = (_q = parts[LineEvent0x0C_fields.spellSpeed]) !== null && _q !== void 0 ? _q : '';
        this.tenacity = (_r = parts[LineEvent0x0C_fields.tenacity]) !== null && _r !== void 0 ? _r : '';
        this.convertedLine = this.prefix() +
            'Player Stats: ' + parts.slice(2, parts.length - 1).join(':').replace(/\|/g, ':');
    }
}
class LineEvent12 extends LineEvent0x0C {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x14.ts


const LineEvent0x14_fields = {
    id: 2,
    name: 3,
    abilityId: 4,
    abilityName: 5,
    targetId: 6,
    targetName: 7,
    duration: 8,
};
// Ability use event
class LineEvent0x14 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        super(repo, line, parts);
        this.isSource = true;
        this.isTarget = true;
        this.isAbility = true;
        this.id = (_b = (_a = parts[LineEvent0x14_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x14_fields.name]) !== null && _c !== void 0 ? _c : '';
        this.abilityIdHex = (_e = (_d = parts[LineEvent0x14_fields.abilityId]) === null || _d === void 0 ? void 0 : _d.toUpperCase()) !== null && _e !== void 0 ? _e : '';
        this.abilityId = parseInt(this.abilityIdHex);
        this.abilityName = (_f = parts[LineEvent0x14_fields.abilityName]) !== null && _f !== void 0 ? _f : '';
        this.targetId = (_h = (_g = parts[LineEvent0x14_fields.targetId]) === null || _g === void 0 ? void 0 : _g.toUpperCase()) !== null && _h !== void 0 ? _h : '';
        this.targetName = (_j = parts[LineEvent0x14_fields.targetName]) !== null && _j !== void 0 ? _j : '';
        this.duration = (_k = parts[LineEvent0x14_fields.duration]) !== null && _k !== void 0 ? _k : '';
        repo.updateCombatant(this.id, {
            job: undefined,
            name: this.name,
            spawn: this.timestamp,
            despawn: this.timestamp,
        });
        repo.updateCombatant(this.targetId, {
            job: undefined,
            name: this.targetName,
            spawn: this.timestamp,
            despawn: this.timestamp,
        });
        const target = this.targetName.length === 0 ? 'Unknown' : this.targetName;
        this.convertedLine = this.prefix() + this.abilityIdHex +
            ':' + this.name +
            ' starts using ' + this.abilityName +
            ' on ' + target + '.';
        this.properCaseConvertedLine = this.prefix() + this.abilityIdHex +
            ':' + EmulatorCommon_EmulatorCommon.properCase(this.name) +
            ' starts using ' + this.abilityName +
            ' on ' + EmulatorCommon_EmulatorCommon.properCase(target) + '.';
    }
}
class LineEvent20 extends LineEvent0x14 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x15.ts

const LineEvent0x15_fields = {
    id: 2,
    name: 3,
    flags: 8,
    damage: 9,
    abilityId: 4,
    abilityName: 5,
    targetId: 6,
    targetName: 7,
    targetHp: 24,
    targetMaxHp: 25,
    targetMp: 26,
    targetMaxMp: 27,
    targetX: 30,
    targetY: 31,
    targetZ: 32,
    targetHeading: 33,
    sourceHp: 34,
    sourceMaxHp: 35,
    sourceMp: 36,
    sourceMaxMp: 37,
    x: 40,
    y: 41,
    z: 42,
    heading: 43,
};
// Ability hit single target event
class LineEvent0x15 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
        super(repo, line, parts);
        this.isSource = true;
        this.isTarget = true;
        this.isAbility = true;
        this.id = (_b = (_a = parts[LineEvent0x15_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x15_fields.name]) !== null && _c !== void 0 ? _c : '';
        this.flags = (_d = parts[LineEvent0x15_fields.flags]) !== null && _d !== void 0 ? _d : '';
        const fieldOffset = this.flags === '3F' ? 2 : 0;
        this.damage = LineEvent.calculateDamage((_e = parts[LineEvent0x15_fields.damage + fieldOffset]) !== null && _e !== void 0 ? _e : '');
        this.abilityId = parseInt((_g = (_f = parts[LineEvent0x15_fields.abilityId]) === null || _f === void 0 ? void 0 : _f.toUpperCase()) !== null && _g !== void 0 ? _g : '');
        this.abilityName = (_h = parts[LineEvent0x15_fields.abilityName]) !== null && _h !== void 0 ? _h : '';
        this.targetId = (_k = (_j = parts[LineEvent0x15_fields.targetId]) === null || _j === void 0 ? void 0 : _j.toUpperCase()) !== null && _k !== void 0 ? _k : '';
        this.targetName = (_l = parts[LineEvent0x15_fields.targetName]) !== null && _l !== void 0 ? _l : '';
        this.targetHp = parseInt((_m = parts[LineEvent0x15_fields.targetHp + fieldOffset]) !== null && _m !== void 0 ? _m : '');
        this.targetMaxHp = parseInt((_o = parts[LineEvent0x15_fields.targetMaxHp + fieldOffset]) !== null && _o !== void 0 ? _o : '');
        this.targetMp = parseInt((_p = parts[LineEvent0x15_fields.targetMp + fieldOffset]) !== null && _p !== void 0 ? _p : '');
        this.targetMaxMp = parseInt((_q = parts[LineEvent0x15_fields.targetMaxMp + fieldOffset]) !== null && _q !== void 0 ? _q : '');
        this.targetX = parseFloat((_r = parts[LineEvent0x15_fields.targetX + fieldOffset]) !== null && _r !== void 0 ? _r : '');
        this.targetY = parseFloat((_s = parts[LineEvent0x15_fields.targetY + fieldOffset]) !== null && _s !== void 0 ? _s : '');
        this.targetZ = parseFloat((_t = parts[LineEvent0x15_fields.targetZ + fieldOffset]) !== null && _t !== void 0 ? _t : '');
        this.targetHeading = parseFloat((_u = parts[LineEvent0x15_fields.targetHeading + fieldOffset]) !== null && _u !== void 0 ? _u : '');
        this.hp = parseInt((_v = parts[LineEvent0x15_fields.sourceHp + fieldOffset]) !== null && _v !== void 0 ? _v : '');
        this.maxHp = parseInt((_w = parts[LineEvent0x15_fields.sourceMaxHp + fieldOffset]) !== null && _w !== void 0 ? _w : '');
        this.mp = parseInt((_x = parts[LineEvent0x15_fields.sourceMp + fieldOffset]) !== null && _x !== void 0 ? _x : '');
        this.maxMp = parseInt((_y = parts[LineEvent0x15_fields.sourceMaxMp + fieldOffset]) !== null && _y !== void 0 ? _y : '');
        this.x = parseFloat((_z = parts[LineEvent0x15_fields.x + fieldOffset]) !== null && _z !== void 0 ? _z : '');
        this.y = parseFloat((_0 = parts[LineEvent0x15_fields.y + fieldOffset]) !== null && _0 !== void 0 ? _0 : '');
        this.z = parseFloat((_1 = parts[LineEvent0x15_fields.z + fieldOffset]) !== null && _1 !== void 0 ? _1 : '');
        this.heading = parseFloat((_2 = parts[LineEvent0x15_fields.heading + fieldOffset]) !== null && _2 !== void 0 ? _2 : '');
        repo.updateCombatant(this.id, {
            job: undefined,
            name: this.name,
            spawn: this.timestamp,
            despawn: this.timestamp,
        });
        repo.updateCombatant(this.targetId, {
            job: undefined,
            name: this.targetName,
            spawn: this.timestamp,
            despawn: this.timestamp,
        });
    }
}
class LineEvent21 extends LineEvent0x15 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x16.ts

// Ability hit multiple/no target event
// Duplicate of 0x15 as far as data
class LineEvent0x16 extends LineEvent0x15 {
    constructor(repo, line, parts) {
        super(repo, line, parts);
    }
}
class LineEvent22 extends LineEvent0x16 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x17.ts

const LineEvent0x17_fields = {
    id: 2,
    name: 3,
    abilityId: 4,
    abilityName: 5,
    reason: 6,
};
// Cancel ability event
class LineEvent0x17 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g;
        super(repo, line, parts);
        this.isSource = true;
        this.isAbility = true;
        this.id = (_b = (_a = parts[LineEvent0x17_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x17_fields.name]) !== null && _c !== void 0 ? _c : '';
        this.abilityId = parseInt((_e = (_d = parts[LineEvent0x17_fields.abilityId]) === null || _d === void 0 ? void 0 : _d.toUpperCase()) !== null && _e !== void 0 ? _e : '');
        this.abilityName = (_f = parts[LineEvent0x17_fields.abilityName]) !== null && _f !== void 0 ? _f : '';
        this.reason = (_g = parts[LineEvent0x17_fields.reason]) !== null && _g !== void 0 ? _g : '';
    }
}
class LineEvent23 extends LineEvent0x17 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x18.ts


const LineEvent0x18_fields = {
    id: 2,
    name: 3,
    type: 4,
    effectId: 5,
    damage: 6,
    currentHp: 7,
    maxHp: 8,
    currentMp: 9,
    maxMp: 10,
    currentTp: 11,
    maxTp: 12,
    x: 13,
    y: 14,
    z: 15,
    heading: 16,
};
// DoT/HoT event
class LineEvent0x18 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        super(repo, line, parts);
        this.isSource = true;
        this.id = (_b = (_a = parts[LineEvent0x18_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x18_fields.name]) !== null && _c !== void 0 ? _c : '';
        this.type = (_d = parts[LineEvent0x18_fields.type]) !== null && _d !== void 0 ? _d : '';
        this.effectId = (_f = (_e = parts[LineEvent0x18_fields.effectId]) === null || _e === void 0 ? void 0 : _e.toUpperCase()) !== null && _f !== void 0 ? _f : '';
        this.damage = parseInt((_g = parts[LineEvent0x18_fields.damage]) !== null && _g !== void 0 ? _g : '', 16);
        this.hp = parseInt((_h = parts[LineEvent0x18_fields.currentHp]) !== null && _h !== void 0 ? _h : '');
        this.maxHp = parseInt((_j = parts[LineEvent0x18_fields.maxHp]) !== null && _j !== void 0 ? _j : '');
        this.mp = parseInt((_k = parts[LineEvent0x18_fields.currentMp]) !== null && _k !== void 0 ? _k : '');
        this.maxMp = parseInt((_l = parts[LineEvent0x18_fields.maxMp]) !== null && _l !== void 0 ? _l : '');
        this.tp = parseInt((_m = parts[LineEvent0x18_fields.currentTp]) !== null && _m !== void 0 ? _m : '');
        this.maxTp = parseInt((_o = parts[LineEvent0x18_fields.maxTp]) !== null && _o !== void 0 ? _o : '');
        this.x = parseFloat((_p = parts[LineEvent0x18_fields.x]) !== null && _p !== void 0 ? _p : '');
        this.y = parseFloat((_q = parts[LineEvent0x18_fields.y]) !== null && _q !== void 0 ? _q : '');
        this.z = parseFloat((_r = parts[LineEvent0x18_fields.z]) !== null && _r !== void 0 ? _r : '');
        this.heading = parseFloat((_s = parts[LineEvent0x18_fields.heading]) !== null && _s !== void 0 ? _s : '');
        repo.updateCombatant(this.id, {
            job: undefined,
            name: this.name,
            spawn: this.timestamp,
            despawn: this.timestamp,
        });
        let effectName = '';
        const resolvedName = repo.resolveName(this.id, this.name);
        if (this.effectId in LineEvent0x18.showEffectNamesFor)
            effectName = (_t = LineEvent0x18.showEffectNamesFor[this.effectId]) !== null && _t !== void 0 ? _t : '';
        let effectPart = '';
        if (effectName)
            effectPart = effectName + ' ';
        this.convertedLine = this.prefix() + effectPart + this.type +
            ' Tick on ' + resolvedName +
            ' for ' + this.damage.toString() + ' damage.';
        this.properCaseConvertedLine = this.prefix() + effectPart + this.type +
            ' Tick on ' + EmulatorCommon_EmulatorCommon.properCase(resolvedName) +
            ' for ' + this.damage.toString() + ' damage.';
    }
}
LineEvent0x18.showEffectNamesFor = {
    '4C4': 'Excognition',
    '35D': 'Wildfire',
    '1F5': 'Doton',
    '2ED': 'Salted Earth',
    '4B5': 'Flamethrower',
    '2E3': 'Asylum',
    '777': 'Asylum',
    '798': 'Sacred Soil',
    '4C7': 'Fey Union',
    '742': 'Nascent Glint',
};
class LineEvent24 extends LineEvent0x18 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x19.ts


const LineEvent0x19_fields = {
    id: 2,
    name: 3,
    targetId: 4,
    targetName: 5,
};
// Combatant defeated event
class LineEvent0x19 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f;
        super(repo, line, parts);
        this.id = (_b = (_a = parts[LineEvent0x19_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x19_fields.name]) !== null && _c !== void 0 ? _c : '';
        this.targetId = (_e = (_d = parts[LineEvent0x19_fields.targetId]) === null || _d === void 0 ? void 0 : _d.toUpperCase()) !== null && _e !== void 0 ? _e : '';
        this.targetName = (_f = parts[LineEvent0x19_fields.targetName]) !== null && _f !== void 0 ? _f : '';
        repo.updateCombatant(this.id, {
            job: undefined,
            name: this.name,
            spawn: this.timestamp,
            despawn: this.timestamp,
        });
        repo.updateCombatant(this.targetId, {
            job: undefined,
            name: this.targetName,
            spawn: this.timestamp,
            despawn: this.timestamp,
        });
        let resolvedName = undefined;
        let resolvedTargetName = undefined;
        if (this.id !== '00')
            resolvedName = repo.resolveName(this.id, this.name);
        if (this.targetId !== '00')
            resolvedTargetName = repo.resolveName(this.targetId, this.targetName);
        const defeatedName = (resolvedName !== null && resolvedName !== void 0 ? resolvedName : this.name);
        const killerName = (resolvedTargetName !== null && resolvedTargetName !== void 0 ? resolvedTargetName : this.targetName);
        this.convertedLine = this.prefix() + defeatedName +
            ' was defeated by ' + killerName + '.';
        this.properCaseConvertedLine = this.prefix() + EmulatorCommon_EmulatorCommon.properCase(defeatedName) +
            ' was defeated by ' + EmulatorCommon_EmulatorCommon.properCase(killerName) + '.';
    }
}
class LineEvent25 extends LineEvent0x19 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1A.ts


const LineEvent0x1A_fields = {
    abilityId: 2,
    abilityName: 3,
    durationString: 4,
    id: 5,
    name: 6,
    targetId: 7,
    targetName: 8,
    stacks: 9,
    targetHp: 10,
    sourceHp: 11,
};
// Gain status effect event
// Deliberately don't flag this as LineEventSource or LineEventTarget
// because 0x1A line values aren't accurate
class LineEvent0x1A extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        super(repo, line, parts);
        this.isAbility = true;
        this.abilityId = parseInt((_b = (_a = parts[LineEvent0x1A_fields.abilityId]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '');
        this.abilityName = (_c = parts[LineEvent0x1A_fields.abilityName]) !== null && _c !== void 0 ? _c : '';
        this.durationString = (_d = parts[LineEvent0x1A_fields.durationString]) !== null && _d !== void 0 ? _d : '';
        this.durationFloat = parseFloat(this.durationString);
        this.id = (_f = (_e = parts[LineEvent0x1A_fields.id]) === null || _e === void 0 ? void 0 : _e.toUpperCase()) !== null && _f !== void 0 ? _f : '';
        this.name = (_g = parts[LineEvent0x1A_fields.name]) !== null && _g !== void 0 ? _g : '';
        this.targetId = (_j = (_h = parts[LineEvent0x1A_fields.targetId]) === null || _h === void 0 ? void 0 : _h.toUpperCase()) !== null && _j !== void 0 ? _j : '';
        this.targetName = (_k = parts[LineEvent0x1A_fields.targetName]) !== null && _k !== void 0 ? _k : '';
        this.stacks = parseInt((_l = parts[LineEvent0x1A_fields.stacks]) !== null && _l !== void 0 ? _l : '0');
        this.targetHp = parseInt((_m = parts[LineEvent0x1A_fields.targetHp]) !== null && _m !== void 0 ? _m : '');
        this.hp = parseInt((_o = parts[LineEvent0x1A_fields.sourceHp]) !== null && _o !== void 0 ? _o : '');
        repo.updateCombatant(this.id, {
            name: this.name,
            spawn: this.timestamp,
            despawn: this.timestamp,
            job: undefined,
        });
        repo.updateCombatant(this.targetId, {
            name: this.targetName,
            spawn: this.timestamp,
            despawn: this.timestamp,
            job: undefined,
        });
        this.resolvedName = repo.resolveName(this.id, this.name);
        this.resolvedTargetName = repo.resolveName(this.targetId, this.targetName);
        this.fallbackResolvedTargetName =
            repo.resolveName(this.id, this.name, this.targetId, this.targetName);
        let stackCountText = '';
        if (this.stacks > 0 && this.stacks < 20 &&
            LineEvent0x1A.showStackCountFor.includes(this.abilityId))
            stackCountText = ' (' + this.stacks.toString() + ')';
        this.convertedLine = this.prefix() + this.targetId +
            ':' + this.targetName +
            ' gains the effect of ' + this.abilityName +
            ' from ' + this.fallbackResolvedTargetName +
            ' for ' + this.durationString + ' Seconds.' + stackCountText;
        this.properCaseConvertedLine = this.prefix() + this.targetId +
            ':' + EmulatorCommon_EmulatorCommon.properCase(this.targetName) +
            ' gains the effect of ' + this.abilityName +
            ' from ' + EmulatorCommon_EmulatorCommon.properCase(this.fallbackResolvedTargetName) +
            ' for ' + this.durationString + ' Seconds.' + stackCountText;
    }
}
LineEvent0x1A.showStackCountFor = [
    304,
    406,
    350,
    714,
    505,
    1239,
    1297,
];
class LineEvent26 extends LineEvent0x1A {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1B.ts

const LineEvent0x1B_fields = {
    targetId: 2,
    targetName: 3,
    headmarkerId: 6,
};
// Head marker event
class LineEvent0x1B extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d;
        super(repo, line, parts);
        this.isSource = true;
        this.id = (_b = (_a = parts[LineEvent0x1B_fields.targetId]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x1B_fields.targetName]) !== null && _c !== void 0 ? _c : '';
        this.headmarkerId = (_d = parts[LineEvent0x1B_fields.headmarkerId]) !== null && _d !== void 0 ? _d : '';
    }
}
class LineEvent27 extends LineEvent0x1B {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1C.ts

const LineEvent0x1C_fields = {
    operation: 2,
    waymark: 3,
    id: 4,
    name: 5,
    x: 6,
    y: 7,
    z: 8,
};
// Floor waymarker event
class LineEvent0x1C extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        super(repo, line, parts);
        this.operation = (_a = parts[LineEvent0x1C_fields.operation]) !== null && _a !== void 0 ? _a : '';
        this.waymark = (_b = parts[LineEvent0x1C_fields.waymark]) !== null && _b !== void 0 ? _b : '';
        this.id = (_d = (_c = parts[LineEvent0x1C_fields.id]) === null || _c === void 0 ? void 0 : _c.toUpperCase()) !== null && _d !== void 0 ? _d : '';
        this.name = (_e = parts[LineEvent0x1C_fields.name]) !== null && _e !== void 0 ? _e : '';
        this.x = (_f = parts[LineEvent0x1C_fields.x]) !== null && _f !== void 0 ? _f : '';
        this.y = (_g = parts[LineEvent0x1C_fields.y]) !== null && _g !== void 0 ? _g : '';
        this.z = (_h = parts[LineEvent0x1C_fields.z]) !== null && _h !== void 0 ? _h : '';
    }
}
class LineEvent28 extends LineEvent0x1C {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1D.ts

const LineEvent0x1D_fields = {
    operation: 2,
    waymark: 3,
    id: 4,
    name: 5,
    targetId: 6,
    targetName: 7,
};
// Waymarker
class LineEvent0x1D extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        super(repo, line, parts);
        this.operation = (_a = parts[LineEvent0x1D_fields.operation]) !== null && _a !== void 0 ? _a : '';
        this.waymark = (_b = parts[LineEvent0x1D_fields.waymark]) !== null && _b !== void 0 ? _b : '';
        this.id = (_d = (_c = parts[LineEvent0x1D_fields.id]) === null || _c === void 0 ? void 0 : _c.toUpperCase()) !== null && _d !== void 0 ? _d : '';
        this.name = (_e = parts[LineEvent0x1D_fields.name]) !== null && _e !== void 0 ? _e : '';
        this.targetId = (_g = (_f = parts[LineEvent0x1D_fields.targetId]) === null || _f === void 0 ? void 0 : _f.toUpperCase()) !== null && _g !== void 0 ? _g : '';
        this.targetName = (_h = parts[LineEvent0x1D_fields.targetName]) !== null && _h !== void 0 ? _h : '';
    }
}
class LineEvent29 extends LineEvent0x1D {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1E.ts


// Lose status effect event
// Extend the gain status event to reduce duplicate code since they're
// the same from a data perspective
class LineEvent0x1E extends LineEvent0x1A {
    constructor(repo, line, parts) {
        super(repo, line, parts);
        let stackCountText = '';
        if (this.stacks > 0 && this.stacks < 20 &&
            LineEvent0x1A.showStackCountFor.includes(this.abilityId))
            stackCountText = ' (' + this.stacks.toString() + ')';
        this.convertedLine = this.prefix() + this.targetId +
            ':' + this.targetName +
            ' loses the effect of ' + this.abilityName +
            ' from ' + this.fallbackResolvedTargetName +
            ' for ' + this.durationString + ' Seconds.' + stackCountText;
        this.properCaseConvertedLine = this.prefix() + this.targetId +
            ':' + EmulatorCommon_EmulatorCommon.properCase(this.targetName) +
            ' loses the effect of ' + this.abilityName +
            ' from ' + EmulatorCommon_EmulatorCommon.properCase(this.fallbackResolvedTargetName) +
            ' for ' + this.durationString + ' Seconds.' + stackCountText;
    }
}
class LineEvent30 extends LineEvent0x1E {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1F.ts


const splitFunc = (s) => [
    s.substr(6, 2),
    s.substr(4, 2),
    s.substr(2, 2),
    s.substr(0, 2),
];
const LineEvent0x1F_fields = {
    id: 2,
    dataBytes1: 3,
    dataBytes2: 4,
    dataBytes3: 5,
    dataBytes4: 6,
};
// Job gauge event
class LineEvent0x1F extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        super(repo, line, parts);
        this.id = (_b = (_a = parts[LineEvent0x1F_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.dataBytes1 = EmulatorCommon_EmulatorCommon.zeroPad((_c = parts[LineEvent0x1F_fields.dataBytes1]) !== null && _c !== void 0 ? _c : '');
        this.dataBytes2 = EmulatorCommon_EmulatorCommon.zeroPad((_d = parts[LineEvent0x1F_fields.dataBytes2]) !== null && _d !== void 0 ? _d : '');
        this.dataBytes3 = EmulatorCommon_EmulatorCommon.zeroPad((_e = parts[LineEvent0x1F_fields.dataBytes3]) !== null && _e !== void 0 ? _e : '');
        this.dataBytes4 = EmulatorCommon_EmulatorCommon.zeroPad((_f = parts[LineEvent0x1F_fields.dataBytes4]) !== null && _f !== void 0 ? _f : '');
        this.jobGaugeBytes = [
            ...splitFunc(this.dataBytes1),
            ...splitFunc(this.dataBytes2),
            ...splitFunc(this.dataBytes3),
            ...splitFunc(this.dataBytes4),
        ];
        this.name = ((_g = repo.Combatants[this.id]) === null || _g === void 0 ? void 0 : _g.name) || '';
        repo.updateCombatant(this.id, {
            name: (_h = repo.Combatants[this.id]) === null || _h === void 0 ? void 0 : _h.name,
            spawn: this.timestamp,
            despawn: this.timestamp,
            job: (_j = this.jobGaugeBytes[0]) === null || _j === void 0 ? void 0 : _j.toUpperCase(),
        });
        this.convertedLine = this.prefix() +
            this.id + ':' + this.name +
            ':' + this.dataBytes1 +
            ':' + this.dataBytes2 +
            ':' + this.dataBytes3 +
            ':' + this.dataBytes4;
        this.properCaseConvertedLine = this.prefix() +
            this.id + ':' + (EmulatorCommon_EmulatorCommon.properCase(this.name)) +
            ':' + this.dataBytes1 +
            ':' + this.dataBytes2 +
            ':' + this.dataBytes3 +
            ':' + this.dataBytes4;
    }
}
class LineEvent31 extends LineEvent0x1F {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x22.ts

const LineEvent0x22_fields = {
    id: 2,
    name: 3,
    targetId: 4,
    targetName: 5,
    targetable: 6,
};
// Nameplate toggle
class LineEvent0x22 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g;
        super(repo, line, parts);
        this.isSource = true;
        this.id = (_b = (_a = parts[LineEvent0x22_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x22_fields.name]) !== null && _c !== void 0 ? _c : '';
        this.targetId = (_e = (_d = parts[LineEvent0x22_fields.targetId]) === null || _d === void 0 ? void 0 : _d.toUpperCase()) !== null && _e !== void 0 ? _e : '';
        this.targetName = (_f = parts[LineEvent0x22_fields.targetName]) !== null && _f !== void 0 ? _f : '';
        this.targetable = !!parseInt((_g = parts[LineEvent0x22_fields.targetable]) !== null && _g !== void 0 ? _g : '', 16);
    }
}
class LineEvent34 extends LineEvent0x22 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x23.ts

const LineEvent0x23_fields = {
    id: 2,
    name: 3,
    targetId: 4,
    targetName: 5,
    tetherId: 8,
};
// Tether event
class LineEvent0x23 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g;
        super(repo, line, parts);
        this.id = (_b = (_a = parts[LineEvent0x23_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x23_fields.name]) !== null && _c !== void 0 ? _c : '';
        this.targetId = (_e = (_d = parts[LineEvent0x23_fields.targetId]) === null || _d === void 0 ? void 0 : _d.toUpperCase()) !== null && _e !== void 0 ? _e : '';
        this.targetName = (_f = parts[LineEvent0x23_fields.targetName]) !== null && _f !== void 0 ? _f : '';
        this.tetherId = (_g = parts[LineEvent0x23_fields.tetherId]) !== null && _g !== void 0 ? _g : '';
    }
}
class LineEvent35 extends LineEvent0x23 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x24.ts

const LineEvent0x24_fields = {
    valueHex: 2,
    bars: 3,
};
// Limit gauge event
class LineEvent0x24 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b;
        super(repo, line, parts);
        this.valueHex = (_a = parts[LineEvent0x24_fields.valueHex]) !== null && _a !== void 0 ? _a : '';
        this.valueDec = parseInt(this.valueHex, 16);
        this.bars = (_b = parts[LineEvent0x24_fields.bars]) !== null && _b !== void 0 ? _b : '';
        this.convertedLine = this.prefix() + 'Limit Break: ' + this.valueHex;
    }
}
class LineEvent36 extends LineEvent0x24 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x25.ts

const LineEvent0x25_fields = {
    id: 2,
    name: 3,
    sequenceId: 4,
    currentHp: 5,
    maxHp: 6,
    currentMp: 7,
    maxMp: 8,
    currentTp: 9,
    maxTp: 10,
    x: 11,
    y: 12,
    z: 13,
    heading: 14,
};
// Action sync event
class LineEvent0x25 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        super(repo, line, parts);
        this.isSource = true;
        this.id = (_b = (_a = parts[LineEvent0x25_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x25_fields.name]) !== null && _c !== void 0 ? _c : '';
        this.sequenceId = (_d = parts[LineEvent0x25_fields.sequenceId]) !== null && _d !== void 0 ? _d : '';
        this.hp = parseInt((_e = parts[LineEvent0x25_fields.currentHp]) !== null && _e !== void 0 ? _e : '');
        this.maxHp = parseInt((_f = parts[LineEvent0x25_fields.maxHp]) !== null && _f !== void 0 ? _f : '');
        this.mp = parseInt((_g = parts[LineEvent0x25_fields.currentMp]) !== null && _g !== void 0 ? _g : '');
        this.maxMp = parseInt((_h = parts[LineEvent0x25_fields.maxMp]) !== null && _h !== void 0 ? _h : '');
        this.tp = parseInt((_j = parts[LineEvent0x25_fields.currentTp]) !== null && _j !== void 0 ? _j : '');
        this.maxTp = parseInt((_k = parts[LineEvent0x25_fields.maxTp]) !== null && _k !== void 0 ? _k : '');
        this.x = parseFloat((_l = parts[LineEvent0x25_fields.x]) !== null && _l !== void 0 ? _l : '');
        this.y = parseFloat((_m = parts[LineEvent0x25_fields.y]) !== null && _m !== void 0 ? _m : '');
        this.z = parseFloat((_o = parts[LineEvent0x25_fields.z]) !== null && _o !== void 0 ? _o : '');
        this.heading = parseFloat((_p = parts[LineEvent0x25_fields.heading]) !== null && _p !== void 0 ? _p : '');
    }
}
class LineEvent37 extends LineEvent0x25 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x26.ts



const LineEvent0x26_fields = {
    id: 2,
    name: 3,
    jobLevelData: 4,
    currentHp: 5,
    maxHp: 6,
    currentMp: 7,
    maxMp: 8,
    currentTp: 9,
    maxTp: 10,
    x: 11,
    y: 12,
    z: 13,
    heading: 14,
};
// Network status effect event
class LineEvent0x26 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        super(repo, line, parts);
        this.isSource = true;
        this.isJobLevel = true;
        this.id = (_b = (_a = parts[LineEvent0x26_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x26_fields.name]) !== null && _c !== void 0 ? _c : '';
        this.jobLevelData = (_d = parts[LineEvent0x26_fields.jobLevelData]) !== null && _d !== void 0 ? _d : '';
        this.hp = parseInt((_e = parts[LineEvent0x26_fields.currentHp]) !== null && _e !== void 0 ? _e : '');
        this.maxHp = parseInt((_f = parts[LineEvent0x26_fields.maxHp]) !== null && _f !== void 0 ? _f : '');
        this.mp = parseInt((_g = parts[LineEvent0x26_fields.currentMp]) !== null && _g !== void 0 ? _g : '');
        this.maxMp = parseInt((_h = parts[LineEvent0x26_fields.maxMp]) !== null && _h !== void 0 ? _h : '');
        this.tp = parseInt((_j = parts[LineEvent0x26_fields.currentTp]) !== null && _j !== void 0 ? _j : '');
        this.maxTp = parseInt((_k = parts[LineEvent0x26_fields.maxTp]) !== null && _k !== void 0 ? _k : '');
        this.x = parseFloat((_l = parts[LineEvent0x26_fields.x]) !== null && _l !== void 0 ? _l : '');
        this.y = parseFloat((_m = parts[LineEvent0x26_fields.y]) !== null && _m !== void 0 ? _m : '');
        this.z = parseFloat((_o = parts[LineEvent0x26_fields.z]) !== null && _o !== void 0 ? _o : '');
        this.heading = parseFloat((_p = parts[LineEvent0x26_fields.heading]) !== null && _p !== void 0 ? _p : '');
        const padded = EmulatorCommon_EmulatorCommon.zeroPad(this.jobLevelData, 8);
        this.jobIdHex = padded.substr(6, 2).toUpperCase();
        this.jobId = parseInt(this.jobIdHex, 16);
        this.job = util/* default.jobEnumToJob */.Z.jobEnumToJob(this.jobId);
        this.level = parseInt(padded.substr(4, 2), 16);
    }
}
class LineEvent38 extends LineEvent0x26 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x27.ts

const LineEvent0x27_fields = {
    id: 2,
    name: 3,
    currentHp: 4,
    maxHp: 5,
    currentMp: 6,
    maxMp: 7,
    currentTp: 8,
    maxTp: 9,
    x: 10,
    y: 11,
    z: 12,
    heading: 13,
};
// Network update hp event
class LineEvent0x27 extends LineEvent {
    constructor(repo, line, parts) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        super(repo, line, parts);
        this.isSource = true;
        this.id = (_b = (_a = parts[LineEvent0x27_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';
        this.name = (_c = parts[LineEvent0x27_fields.name]) !== null && _c !== void 0 ? _c : '';
        this.hp = parseInt((_d = parts[LineEvent0x27_fields.currentHp]) !== null && _d !== void 0 ? _d : '');
        this.maxHp = parseInt((_e = parts[LineEvent0x27_fields.maxHp]) !== null && _e !== void 0 ? _e : '');
        this.mp = parseInt((_f = parts[LineEvent0x27_fields.currentMp]) !== null && _f !== void 0 ? _f : '');
        this.maxMp = parseInt((_g = parts[LineEvent0x27_fields.maxMp]) !== null && _g !== void 0 ? _g : '');
        this.tp = parseInt((_h = parts[LineEvent0x27_fields.currentTp]) !== null && _h !== void 0 ? _h : '');
        this.maxTp = parseInt((_j = parts[LineEvent0x27_fields.maxTp]) !== null && _j !== void 0 ? _j : '');
        this.x = parseFloat((_k = parts[LineEvent0x27_fields.x]) !== null && _k !== void 0 ? _k : '');
        this.y = parseFloat((_l = parts[LineEvent0x27_fields.y]) !== null && _l !== void 0 ? _l : '');
        this.z = parseFloat((_m = parts[LineEvent0x27_fields.z]) !== null && _m !== void 0 ? _m : '');
        this.heading = parseFloat((_o = parts[LineEvent0x27_fields.heading]) !== null && _o !== void 0 ? _o : '');
    }
}
class LineEvent39 extends LineEvent0x27 {
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/ParseLine.ts

























class ParseLine {
    static parse(repo, line) {
        let ret;
        const parts = line.split('|');
        const event = parts[0];
        // Don't parse raw network packet lines
        if (!event || event === '252')
            return;
        // This is ugly, but Webpack prefers being explicit
        switch ('LineEvent' + event) {
            case 'LineEvent00':
                ret = new LineEvent00(repo, line, parts);
                break;
            case 'LineEvent01':
                ret = new LineEvent01(repo, line, parts);
                break;
            case 'LineEvent02':
                ret = new LineEvent02(repo, line, parts);
                break;
            case 'LineEvent03':
                ret = new LineEvent03(repo, line, parts);
                break;
            case 'LineEvent04':
                ret = new LineEvent04(repo, line, parts);
                break;
            case 'LineEvent12':
                ret = new LineEvent12(repo, line, parts);
                break;
            case 'LineEvent20':
                ret = new LineEvent20(repo, line, parts);
                break;
            case 'LineEvent21':
                ret = new LineEvent21(repo, line, parts);
                break;
            case 'LineEvent22':
                ret = new LineEvent22(repo, line, parts);
                break;
            case 'LineEvent23':
                ret = new LineEvent23(repo, line, parts);
                break;
            case 'LineEvent24':
                ret = new LineEvent24(repo, line, parts);
                break;
            case 'LineEvent25':
                ret = new LineEvent25(repo, line, parts);
                break;
            case 'LineEvent26':
                ret = new LineEvent26(repo, line, parts);
                break;
            case 'LineEvent27':
                ret = new LineEvent27(repo, line, parts);
                break;
            case 'LineEvent28':
                ret = new LineEvent28(repo, line, parts);
                break;
            case 'LineEvent29':
                ret = new LineEvent29(repo, line, parts);
                break;
            case 'LineEvent30':
                ret = new LineEvent30(repo, line, parts);
                break;
            case 'LineEvent31':
                ret = new LineEvent31(repo, line, parts);
                break;
            case 'LineEvent34':
                ret = new LineEvent34(repo, line, parts);
                break;
            case 'LineEvent35':
                ret = new LineEvent35(repo, line, parts);
                break;
            case 'LineEvent36':
                ret = new LineEvent36(repo, line, parts);
                break;
            case 'LineEvent37':
                ret = new LineEvent37(repo, line, parts);
                break;
            case 'LineEvent38':
                ret = new LineEvent38(repo, line, parts);
                break;
            case 'LineEvent39':
                ret = new LineEvent39(repo, line, parts);
                break;
            default:
                ret = new LineEvent(repo, line, parts);
        }
        // Also don't parse lines with a non-sane date. This is 2000-01-01 00:00:00
        if (ret && ret.timestamp < 946684800)
            return;
        // Finally, if the object marks itself as invalid, skip it
        if (ret && ret.invalid)
            return;
        return ret;
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/NetworkLogConverter.ts



const isLineEvent = (line) => {
    return !!line;
};
class NetworkLogConverter extends EventBus_EventBus {
    convertFile(data) {
        const repo = new LogRepository();
        return this.convertLines(
        // Split data into an array of separate lines, removing any blank lines.
        data.split(NetworkLogConverter.lineSplitRegex).filter((l) => l !== ''), repo);
    }
    convertLines(lines, repo) {
        let lineEvents = lines.map((l) => ParseLine.parse(repo, l)).filter(isLineEvent);
        // Call `convert` to convert the network line to non-network format and update indexing values
        lineEvents = lineEvents.map((l, i) => {
            l.index = i;
            return l;
        });
        // Sort the lines based on `${timestamp}_${index}` to handle out-of-order lines properly
        // @TODO: Remove this once underlying CombatantTracker update issues are resolved
        return lineEvents.sort((l, r) => (`${l.timestamp}_${l.index}`).localeCompare(`${r.timestamp}_${r.index}`));
    }
}
NetworkLogConverter.lineSplitRegex = /\r?\n/gm;

;// CONCATENATED MODULE: ./resources/languages.ts
const languages = ['en', 'de', 'fr', 'ja', 'cn', 'ko'];
const isLang = (lang) => {
    const langStrs = languages;
    if (!lang)
        return false;
    return langStrs.includes(lang);
};

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/Encounter.ts








const isPetName = (name, language) => {
    if (language)
        return pet_names[language].includes(name);
    for (const lang in pet_names) {
        if (!isLang(lang))
            throw new not_reached/* UnreachableCode */.$();
        if (pet_names[lang].includes(name))
            return true;
    }
    return false;
};
const isValidTimestamp = (timestamp) => {
    return timestamp > 0 && timestamp < Number.MAX_SAFE_INTEGER;
};
class Encounter {
    constructor(encounterDay, encounterZoneId, encounterZoneName, logLines) {
        this.encounterDay = encounterDay;
        this.encounterZoneId = encounterZoneId;
        this.encounterZoneName = encounterZoneName;
        this.logLines = logLines;
        this.initialOffset = Number.MAX_SAFE_INTEGER;
        this.endStatus = 'Unknown';
        this.startStatus = 'Unknown';
        this.engageAt = Number.MAX_SAFE_INTEGER;
        this.firstPlayerAbility = Number.MAX_SAFE_INTEGER;
        this.firstEnemyAbility = Number.MAX_SAFE_INTEGER;
        this.firstLineIndex = 0;
        this.startTimestamp = 0;
        this.endTimestamp = 0;
        this.duration = 0;
        this.playbackOffset = 0;
        this.language = 'en';
        this.version = Encounter.encounterVersion;
    }
    initialize() {
        const startStatuses = new Set();
        this.logLines.forEach((line, i) => {
            var _a, _b, _c, _d;
            if (!line)
                throw new not_reached/* UnreachableCode */.$();
            let res = EmulatorCommon_EmulatorCommon.matchStart(line.networkLine);
            if (res) {
                this.firstLineIndex = i;
                if ((_a = res.groups) === null || _a === void 0 ? void 0 : _a.StartType)
                    startStatuses.add(res.groups.StartType);
                if ((_b = res.groups) === null || _b === void 0 ? void 0 : _b.StartIn) {
                    const startIn = parseInt(res.groups.StartIn);
                    if (startIn >= 0)
                        this.engageAt = Math.min(line.timestamp + startIn, this.engageAt);
                }
            }
            else {
                res = EmulatorCommon_EmulatorCommon.matchEnd(line.networkLine);
                if (res) {
                    if ((_c = res.groups) === null || _c === void 0 ? void 0 : _c.EndType)
                        this.endStatus = res.groups.EndType;
                }
                else if (isLineEventSource(line) && isLineEventTarget(line)) {
                    if (line.id.startsWith('1') ||
                        (line.id.startsWith('4') && isPetName(line.name, this.language))) {
                        // Player or pet ability
                        if (line.targetId.startsWith('4') && !isPetName(line.targetName, this.language)) {
                            // Targetting non player or pet
                            this.firstPlayerAbility = Math.min(this.firstPlayerAbility, line.timestamp);
                        }
                    }
                    else if (line.id.startsWith('4') && !isPetName(line.name, this.language)) {
                        // Non-player ability
                        if (line.targetId.startsWith('1') || isPetName(line.targetName, this.language)) {
                            // Targetting player or pet
                            this.firstEnemyAbility = Math.min(this.firstEnemyAbility, line.timestamp);
                        }
                    }
                }
            }
            const matchedLang = (_d = res === null || res === void 0 ? void 0 : res.groups) === null || _d === void 0 ? void 0 : _d.language;
            if (isLang(matchedLang))
                this.language = matchedLang;
        });
        this.combatantTracker = new CombatantTracker(this.logLines, this.language);
        this.startTimestamp = this.combatantTracker.firstTimestamp;
        this.endTimestamp = this.combatantTracker.lastTimestamp;
        this.duration = this.endTimestamp - this.startTimestamp;
        if (this.initialOffset === Number.MAX_SAFE_INTEGER) {
            if (this.engageAt < Number.MAX_SAFE_INTEGER)
                this.initialOffset = this.engageAt - this.startTimestamp;
            else if (this.firstPlayerAbility < Number.MAX_SAFE_INTEGER)
                this.initialOffset = this.firstPlayerAbility - this.startTimestamp;
            else if (this.firstEnemyAbility < Number.MAX_SAFE_INTEGER)
                this.initialOffset = this.firstEnemyAbility - this.startTimestamp;
            else
                this.initialOffset = 0;
        }
        const firstLine = this.logLines[this.firstLineIndex];
        if (firstLine && firstLine.offset)
            this.playbackOffset = firstLine.offset;
        this.startStatus = [...startStatuses].sort().join(', ');
    }
    get initialTimestamp() {
        return this.startTimestamp + this.initialOffset;
    }
    shouldPersistFight() {
        return isValidTimestamp(this.firstPlayerAbility) && isValidTimestamp(this.firstEnemyAbility);
    }
    upgrade(version) {
        if (Encounter.encounterVersion <= version)
            return false;
        const repo = new LogRepository();
        const converter = new NetworkLogConverter();
        this.logLines = converter.convertLines(this.logLines.map((l) => l.networkLine), repo);
        this.version = Encounter.encounterVersion;
        this.initialize();
        return true;
    }
}
Encounter.encounterVersion = 1;

;// CONCATENATED MODULE: ./ui/raidboss/emulator/ui/EncounterTab.js


class EncounterTab extends EventBus_EventBus {
  constructor(persistor) {
    super();
    this.persistor = persistor;
    this.$zoneColumn = document.querySelector('#encountersTab .zoneList');
    this.$dateColumn = document.querySelector('#encountersTab .dateList');
    this.$encounterColumn = document.querySelector('#encountersTab .encounterList');
    this.$infoColumn = document.querySelector('#encountersTab .encounterInfo');
    this.$encounterTabRowTemplate = document.querySelector('template.encounterTabRow').content.firstElementChild;
    this.$encounterTabEncounterRowTemplate = document.querySelector('template.encounterTabEncounterRow').content.firstElementChild;
    this.$encounterInfoTemplate = document.querySelector('template.encounterInfo').content.firstElementChild;
  }

  refresh() {
    this.encounters = {};
    this.persistor.listEncounters().then(encounters => {
      for (const i in encounters) {
        const enc = encounters[i];
        const zone = enc.zoneName;
        const encDate = EmulatorCommon_EmulatorCommon.timeToDateString(enc.start);
        const encTime = EmulatorCommon_EmulatorCommon.timeToTimeString(enc.start);
        const encDuration = EmulatorCommon_EmulatorCommon.msToDuration(enc.duration);
        this.encounters[zone] = this.encounters[zone] || {};
        this.encounters[zone][encDate] = this.encounters[zone][encDate] || [];
        this.encounters[zone][encDate].push({
          start: encTime,
          name: enc.name,
          duration: encDuration,
          encounter: enc
        });
      }

      this.refreshUI();
    });
  }

  refreshUI() {
    this.refreshZones();
    this.refreshDates();
    this.refreshEncounters();
    this.refreshInfo();
  }

  refreshZones() {
    this.$zoneColumn.innerHTML = '';
    let clear = true;
    const zones = new Set(Object.keys(this.encounters));

    for (const zone of [...zones].sort()) {
      const $row = this.$encounterTabRowTemplate.cloneNode(true);
      $row.innerText = zone;

      if (zone === this.currentZone) {
        clear = false;
        $row.classList.add('selected');
      }

      $row.addEventListener('click', ev => {
        const t = ev.currentTarget;
        t.parentElement.querySelectorAll('.selectorRow.selected').forEach(n => {
          n.classList.remove('selected');
        });
        t.classList.add('selected');
        this.currentZone = t.textContent;
        this.refreshUI();
      });
      this.$zoneColumn.append($row);
    }

    if (clear) this.currentZone = undefined;
  }

  refreshDates() {
    this.$dateColumn.innerHTML = '';
    let clear = true;

    if (this.currentZone !== undefined) {
      const dates = new Set(Object.keys(this.encounters[this.currentZone]));

      for (const date of [...dates].sort()) {
        const $row = this.$encounterTabRowTemplate.cloneNode(true);
        $row.innerText = date;

        if (date === this.currentDate) {
          clear = false;
          $row.classList.add('selected');
        }

        $row.addEventListener('click', ev => {
          const t = ev.currentTarget;
          t.parentElement.querySelectorAll('.selectorRow.selected').forEach(n => {
            n.classList.remove('selected');
          });
          t.classList.add('selected');
          this.currentDate = t.textContent;
          this.refreshUI();
        });
        this.$dateColumn.append($row);
      }
    }

    if (clear) this.currentDate = undefined;
  }

  refreshEncounters() {
    this.$encounterColumn.innerHTML = '';
    let clear = true;

    if (this.currentZone !== undefined && this.currentDate !== undefined) {
      const sortedEncounters = this.encounters[this.currentZone][this.currentDate].sort((l, r) => {
        return l.start.localeCompare(r.start);
      });

      for (const i in sortedEncounters) {
        const enc = this.encounters[this.currentZone][this.currentDate][i];
        const $row = this.$encounterTabEncounterRowTemplate.cloneNode(true);
        $row.setAttribute('data-index', i);

        if (i === this.currentEncounter) {
          clear = false;
          $row.classList.add('selected');
        }

        $row.querySelector('.encounterStart').innerText = '[' + enc.start + ']';
        $row.querySelector('.encounterName').innerText = enc.name;
        $row.querySelector('.encounterDuration').innerText = '(' + enc.duration + ')';
        $row.addEventListener('click', ev => {
          const t = ev.currentTarget;
          t.parentElement.querySelectorAll('.selectorRow.selected').forEach(n => {
            n.classList.remove('selected');
          });
          t.classList.add('selected');
          this.currentEncounter = t.getAttribute('data-index');
          this.refreshUI();
        });
        this.$encounterColumn.append($row);
      }
    }

    if (clear) this.currentEncounter = undefined;
  }

  refreshInfo() {
    this.$infoColumn.innerHTML = '';

    if (this.currentZone !== undefined && this.currentDate !== undefined && this.currentEncounter !== undefined) {
      /**
       * @type PersistorEncounter
       */
      const enc = this.encounters[this.currentZone][this.currentDate][this.currentEncounter].encounter;
      let pullAt = 'N/A';
      if (!isNaN(enc.offset)) pullAt = EmulatorCommon_EmulatorCommon.timeToString(enc.offset, false);
      const $info = this.$encounterInfoTemplate.cloneNode(true);
      $info.querySelector('.encounterLoad').addEventListener('click', () => {
        this.dispatch('load', this.encounters[this.currentZone][this.currentDate][this.currentEncounter].encounter.id);
      });
      $info.querySelector('.encounterParse').addEventListener('click', () => {
        this.dispatch('parse', this.encounters[this.currentZone][this.currentDate][this.currentEncounter].encounter.id);
      });
      $info.querySelector('.encounterPrune').addEventListener('click', () => {
        this.dispatch('prune', this.encounters[this.currentZone][this.currentDate][this.currentEncounter].encounter.id);
      });
      $info.querySelector('.encounterDelete').addEventListener('click', () => {
        this.dispatch('delete', this.encounters[this.currentZone][this.currentDate][this.currentEncounter].encounter.id);
      });
      $info.querySelector('.encounterZone .label').textContent = enc.zoneName;
      $info.querySelector('.encounterStart .label').textContent = EmulatorCommon_EmulatorCommon.dateTimeToString(enc.start);
      $info.querySelector('.encounterDuration .label').textContent = EmulatorCommon_EmulatorCommon.timeToString(enc.duration, false);
      $info.querySelector('.encounterOffset .label').textContent = pullAt;
      $info.querySelector('.encounterName .label').textContent = enc.name;
      $info.querySelector('.encounterStartStatus .label').textContent = enc.startStatus;
      $info.querySelector('.encounterEndStatus .label').textContent = enc.endStatus;
      this.$infoColumn.append($info);
    }
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/LogEventHandler.ts



class LogEventHandler extends (/* unused pure expression or super */ null && (EventBus)) {
    constructor() {
        super(...arguments);
        this.currentFight = [];
        this.currentZoneName = 'Unknown';
        this.currentZoneId = '-1';
    }
    parseLogs(logs) {
        for (const lineObj of logs) {
            this.currentFight.push(lineObj);
            lineObj.offset = lineObj.timestamp - this.currentFightStart;
            const res = EmulatorCommon.matchEnd(lineObj.networkLine);
            if (res) {
                this.endFight();
            }
            else if (lineObj instanceof LineEvent0x01) {
                this.currentZoneId = lineObj.zoneId;
                this.currentZoneName = lineObj.zoneName;
                this.endFight();
            }
        }
    }
    get currentFightStart() {
        var _a, _b;
        return (_b = (_a = this.currentFight[0]) === null || _a === void 0 ? void 0 : _a.timestamp) !== null && _b !== void 0 ? _b : 0;
    }
    get currentFightEnd() {
        var _a, _b;
        return (_b = (_a = this.currentFight.slice(-1)[0]) === null || _a === void 0 ? void 0 : _a.timestamp) !== null && _b !== void 0 ? _b : 0;
    }
    endFight() {
        if (this.currentFight.length < 2)
            return;
        const start = new Date(this.currentFightStart).toISOString();
        const end = new Date(this.currentFightEnd).toISOString();
        console.debug(`Dispatching new fight
Start: ${start}
End: ${end}
Zone: ${this.currentZoneName}
Line Count: ${this.currentFight.length}
`);
        void this.dispatch('fight', start.substr(0, 10), this.currentZoneId, this.currentZoneName, this.currentFight);
        this.currentFight = [];
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/PersistorEncounter.js
class PersistorEncounter {
  constructor(encounter) {
    this.id = encounter.id;
    this.name = encounter.combatantTracker.getMainCombatantName();
    this.start = encounter.startTimestamp;
    this.offset = encounter.initialOffset;
    this.startStatus = encounter.startStatus;
    this.endStatus = encounter.endStatus;
    this.zoneId = encounter.encounterZoneId;
    this.zoneName = encounter.encounterZoneName;
    this.duration = encounter.endTimestamp - encounter.startTimestamp;
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/Persistor.js




class Persistor extends EventBus_EventBus {
  constructor() {
    super();
    this.DB = null;
    this.initializeDB();
  }

  initializeDB() {
    const request = window.indexedDB.open('RaidEmulatorEncounters', Persistor.dbVersion);
    request.addEventListener('success', ev => {
      this.DB = ev.target.result;
      this.dispatch('ready');
    });
    request.addEventListener('upgradeneeded', ev => {
      const promises = [];
      let encountersStorage;
      let encounterSummariesStorage; // We deliberately avoid using breaks for this switch/case to allow
      // incremental upgrades to apply in sequence

      switch (ev.oldVersion) {
        case 0:
          encountersStorage = ev.target.result.createObjectStore('Encounters', {
            keyPath: 'id',
            autoIncrement: true
          });
          encounterSummariesStorage = ev.target.result.createObjectStore('EncounterSummaries', {
            keyPath: 'id',
            autoIncrement: true
          });
          encounterSummariesStorage.createIndex('zoneName', 'zoneName');
          encounterSummariesStorage.createIndex('start', 'start');
          encounterSummariesStorage.createIndex('zoneName_start', ['zoneName', 'start']);
      }

      promises.push(new Promise(res => {
        encountersStorage.transaction.addEventListener('complete', tev => {
          res();
        });
      }));
      promises.push(new Promise(res => {
        encounterSummariesStorage.transaction.addEventListener('complete', tev => {
          res();
        });
      }));
      let completed = 0;

      for (const i in promises) {
        promises[i].then(() => {
          ++completed;

          if (completed === promises.length) {
            this.DB = ev.target.result;
            this.dispatch('ready');
          }
        });
      }
    });
  }

  persistEncounter(baseEncounter) {
    let ret;

    if (this.DB !== null) {
      let resolver;
      ret = new Promise(res => {
        resolver = res;
      });
      const encounter = EmulatorCommon_EmulatorCommon.cloneData(baseEncounter, []);
      delete encounter.combatantTracker;
      const encountersStorage = this.encountersStorage;
      let req;

      if (encounter.id === null) {
        delete encounter.id;
        req = encountersStorage.add(encounter);
      } else {
        req = encountersStorage.put(encounter);
      }

      req.addEventListener('success', ev => {
        baseEncounter.id = encounter.id = ev.target.result;
        const encounterSummariesStorage = this.encounterSummariesStorage;
        const summary = new PersistorEncounter(baseEncounter);
        const req2 = encounterSummariesStorage.put(summary);
        req2.addEventListener('success', ev => {
          resolver();
        });
      });
    } else {
      ret = new Promise(r => r());
    }

    return ret;
  }

  loadEncounter(id) {
    return new Promise(res => {
      if (this.DB !== null) {
        const encountersStorage = this.encountersStorage;
        const req = encountersStorage.get(id);
        req.addEventListener('success', ev => {
          const enc = req.result;
          const ret = new Encounter(enc.encounterDay, enc.encounterZoneId, enc.encounterZoneName, enc.logLines);
          ret.id = enc.id; // Check for encounter upgrade, re-save encounter if it's upgraded.

          if (ret.upgrade(enc.version)) {
            this.persistEncounter(ret).then(() => {
              res(ret);
            });
          } else {
            ret.initialize();
            res(ret);
          }
        });
      } else {
        res(null);
      }
    });
  }

  deleteEncounter(id) {
    return new Promise(res => {
      if (this.DB !== null) {
        const encountersStorage = this.encountersStorage;
        const req = encountersStorage.delete(id);
        req.addEventListener('success', ev => {
          const encounterSummariesStorage = this.encounterSummariesStorage;
          const req = encounterSummariesStorage.delete(id);
          req.addEventListener('success', ev => {
            res(true);
          });
          req.addEventListener('error', ev => {
            res(false);
          });
        });
        req.addEventListener('error', ev => {
          res(false);
        });
      } else {
        res(null);
      }
    });
  }

  listEncounters(zoneName = null, startTimestamp = null, endTimestamp = null) {
    return new Promise(res => {
      if (this.DB !== null) {
        const encounterSummariesStorage = this.encounterSummariesStorage;
        let keyRange = null;
        let index = null;

        if (zoneName !== null) {
          if (startTimestamp !== null) {
            index = encounterSummariesStorage.index('zoneName_start');

            if (endTimestamp !== null) {
              keyRange = IDBKeyRange.bound([zoneName, startTimestamp], [zoneName, endTimestamp], [true, true], [true, true]);
            } else {
              keyRange = IDBKeyRange.lowerBound([zoneName, startTimestamp], [true, true]);
            }
          } else {
            index = encounterSummariesStorage.index('zoneName');
            keyRange = IDBKeyRange.only(zoneName);
          }
        } else if (startTimestamp !== null) {
          index = encounterSummariesStorage.index('start');
          if (endTimestamp !== null) keyRange = IDBKeyRange.bound(startTimestamp, endTimestamp, true, true);else keyRange = IDBKeyRange.lowerBound(startTimestamp, true);
        }

        let req;
        if (keyRange !== null) req = index.getAll(keyRange);else req = encounterSummariesStorage.getAll();
        req.addEventListener('success', ev => {
          res(req.result);
        });
      } else {
        res([]);
      }
    });
  }

  async clearDB() {
    let p1Res;
    const p1 = new Promise(res => {
      p1Res = res;
    });
    let p2Res;
    const p2 = new Promise(res => {
      p2Res = res;
    });
    this.encountersStorage.clear().addEventListener('success', () => {
      p1Res();
    });
    this.encounterSummariesStorage.clear().addEventListener('success', () => {
      p2Res();
    });
    await p1;
    await p2;
  }

  async exportDB() {
    const ret = {
      encounters: []
    };
    const summaries = await this.listEncounters();

    for (const summary of summaries) {
      const enc = await this.loadEncounter(summary.id);
      ret.encounters.push({
        encounterDay: EmulatorCommon_EmulatorCommon.timeToDateString(summary.Start),
        encounterZoneName: summary.ZoneName,
        encounterZoneId: summary.ZoneId,
        encounterLines: enc.logLines
      });
    }

    return ret;
  }

  async importDB(DB) {
    DB.encounters.forEach(enc => {
      this.persistEncounter(new Encounter(enc.encounterDay, enc.encounterZoneId, enc.encounterZoneName, enc.encounterLines));
    });
  }

  get encountersStorage() {
    return this.DB.transaction('Encounters', 'readwrite').objectStore('Encounters');
  }

  get encounterSummariesStorage() {
    return this.DB.transaction('EncounterSummaries', 'readwrite').objectStore('EncounterSummaries');
  }

}
Persistor.dbVersion = 3;
// EXTERNAL MODULE: ./resources/overlay_plugin_api.ts
var overlay_plugin_api = __webpack_require__(511);
;// CONCATENATED MODULE: ./ui/raidboss/autoplay_helper.ts
class AutoplayHelper {
    static Check() {
        const context = new AudioContext();
        return context.state === 'suspended';
    }
    static Prompt() {
        const button = document.createElement('button');
        button.innerText = 'Click to enable audio';
        button.classList.add('autoplay-helper-button');
        button.onclick = function () {
            button.remove();
        };
        document.body.appendChild(button);
    }
    static CheckAndPrompt() {
        if (AutoplayHelper.Check())
            AutoplayHelper.Prompt();
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/browser_tts_engine.ts
class TTSItem {
    constructor(text, lang, voice) {
        this.text = text;
        this.item = new SpeechSynthesisUtterance(text);
        if (lang)
            this.item.lang = lang;
        if (voice)
            this.item.voice = voice;
    }
    play() {
        window.speechSynthesis.speak(this.item);
    }
}
class BrowserTTSEngine {
    constructor(lang) {
        this.ttsItems = {};
        const cactbotLangToSpeechLang = {
            en: 'en-US',
            de: 'de-DE',
            fr: 'fr-FR',
            ja: 'ja-JP',
            // TODO: maybe need to provide an option of zh-CN, zh-HK, zh-TW?
            cn: 'zh-CN',
            ko: 'ko-KR',
        };
        // figure out what TTS engine type we need
        if (window.speechSynthesis !== undefined) {
            window.speechSynthesis.onvoiceschanged = () => {
                const speechLang = cactbotLangToSpeechLang[lang];
                const voice = window.speechSynthesis.getVoices().find((voice) => voice.lang === speechLang);
                if (voice) {
                    this.speechLang = speechLang;
                    this.speechVoice = voice;
                    window.speechSynthesis.onvoiceschanged = null;
                }
                else {
                    console.error('BrowserTTS error: could not find voice');
                }
            };
        }
        else {
            console.error('BrowserTTS error: no browser support for window.speechSynthesis');
        }
    }
    play(text) {
        if (!this.speechVoice)
            return;
        try {
            let ttsItem = this.ttsItems[text];
            if (!ttsItem) {
                ttsItem = new TTSItem(text, this.speechLang, this.speechVoice);
                this.ttsItems[text] = ttsItem;
            }
            ttsItem.play();
        }
        catch (e) {
            console.error('Exception performing TTS', e);
        }
    }
}

;// CONCATENATED MODULE: ./resources/player_override.ts


// @TODO: Swap the order of these arguments, make playerName optional instead
const addPlayerChangedOverrideListener = (func, playerName) => {
    if (!func)
        return;
    let lastPlayerChangedEvent = null;
    let lastPlayerJob = null;
    const onPlayerChanged = (e) => {
        if (playerName) {
            e.detail.name = playerName;
            if (lastPlayerJob) {
                // Use the non-overridden job if we don't know an overridden one.
                e.detail.job = lastPlayerJob;
            }
        }
        lastPlayerChangedEvent = e;
        func(e);
    };
    (0,overlay_plugin_api/* addOverlayListener */.PS)('onPlayerChangedEvent', onPlayerChanged);
    if (!playerName)
        return;
    (0,overlay_plugin_api/* addOverlayListener */.PS)('PartyChanged', (e) => {
        const player = e.party.find((p) => p.name === playerName);
        if (!player)
            return;
        const newJob = util/* default.jobEnumToJob */.Z.jobEnumToJob(player.job);
        if (newJob === lastPlayerJob)
            return;
        lastPlayerJob = newJob;
        // This event may come before the first onPlayerChangedEvent.
        if (lastPlayerChangedEvent)
            onPlayerChanged(lastPlayerChangedEvent);
    });
};
// Common UI for selecting a player.
// Only used for raidboss, but could ostensibly be reused for oopsy,
// if there's ever player specific stuff.
// TODO: it would be nice to show the "connected / not connected" bit in the UI.
const addRemotePlayerSelectUI = (lang) => {
    const instructionTextByLang = {
        en: 'Select a Player\n(the list will update when in an instance)',
        de: 'Wähle einen Spieler\n(Diese Liste aktualisiert sich, sobald eine Instance betretten wird)',
        fr: 'Sélectionner un joueur\n (la liste se mettra à jour dans une instance)',
        ja: 'プレーヤー名を選択してください\n(インスタンスに入るとリストが更新する)',
        cn: '请选择玩家名称\n(此列表将会在进入副本后更新)',
        ko: '플레이어를 선택하세요\n(인스턴스에 있으면 리스트가 업데이트됩니다.)',
    };
    const forceTTSByLang = {
        en: 'Force Enable Text To Speech',
        de: 'Erzwinge Text in Sprache (TTS)',
        fr: 'Forcer l\'activation de la synthèse vocale (TTS)',
        ja: 'TTSを強制的に有効化する',
        cn: '强制启用TTS',
        ko: 'TTS 기능을 활성화하기',
    };
    const buttonTextByLang = {
        en: 'Start Overlay',
        de: 'Start Overlay',
        fr: 'Démarrer l\'Overlay',
        ja: 'オーバーレイを起動',
        cn: '启用悬浮窗',
        ko: '오버레이 시작',
    };
    const defaultTextByLang = {
        en: '(no override)',
        de: '(kein überschreiben)',
        fr: '(pas de dérogation)',
        ja: '(既定値)',
        cn: '(默认值)',
        ko: '(플레이어 지정 안함)',
    };
    // TODO: probably should save forceTTS as well, maybe save some {} options?
    const kStorageKey = 'cactbot-last-selected-player';
    const savePlayerName = (name) => {
        window.localStorage.setItem(kStorageKey, name);
    };
    const loadPlayerName = () => {
        return window.localStorage.getItem(kStorageKey);
    };
    // Add common UI to select a player.
    const container = document.createElement('div');
    container.id = 'player-select';
    document.body.appendChild(container);
    const instructionElem = document.createElement('div');
    instructionElem.id = 'player-select-instructions';
    instructionElem.innerHTML = instructionTextByLang[lang] || instructionTextByLang['en'];
    container.appendChild(instructionElem);
    const listElem = document.createElement('div');
    listElem.id = 'player-select-list';
    container.appendChild(listElem);
    const ttsElem = document.createElement('input');
    ttsElem.type = 'checkbox';
    ttsElem.id = 'player-select-tts';
    ttsElem.name = 'player-select-tts';
    container.appendChild(ttsElem);
    const ttsLabel = document.createElement('label');
    ttsLabel.id = 'player-select-tts-label';
    ttsLabel.htmlFor = 'player-select-tts';
    ttsLabel.innerHTML = forceTTSByLang[lang] || forceTTSByLang['en'];
    container.appendChild(ttsLabel);
    const buttonElem = document.createElement('button');
    buttonElem.id = 'player-select-button';
    buttonElem.name = 'player-select-button';
    buttonElem.innerHTML = buttonTextByLang[lang] || buttonTextByLang['en'];
    container.appendChild(buttonElem);
    buttonElem.addEventListener('click', () => {
        const forceTTS = ttsElem.checked;
        let playerName = '';
        let radioIndex = 0;
        for (;;) {
            radioIndex++;
            const elem = document.getElementById(`player-radio-${radioIndex}`);
            if (!elem || !(elem instanceof HTMLInputElement))
                break;
            if (!elem.checked)
                continue;
            playerName = elem.value;
            break;
        }
        if (playerName)
            savePlayerName(playerName);
        // Preserve existing parameters.
        const currentParams = new URLSearchParams(window.location.search);
        const paramMap = {};
        // Yes, this is (v, k) and not (k, v).
        currentParams.forEach((v, k) => paramMap[k] = decodeURIComponent(v));
        paramMap.player = playerName;
        // Use 1/0 to be consistent with other query parameters rather than string true/false.
        paramMap.forceTTS = forceTTS ? 1 : 0;
        // TODO: overlay_plugin_api.js doesn't support uri encoded OVERLAY_WS parameters.
        // So this can't use URLSearchParams.toString yet.  Manually build string.
        let search = '?';
        for (const [k, v] of Object.entries(paramMap))
            search += `${k}=${v}&`;
        // Reload the page with more options.
        window.location.search = search;
    });
    const lastSelectedPlayer = loadPlayerName();
    const buildList = (party) => {
        while (listElem.firstChild) {
            if (listElem.lastChild)
                listElem.removeChild(listElem.lastChild);
        }
        let radioCount = 0;
        const addRadio = (name, value, extraClass) => {
            radioCount++;
            const inputName = `player-radio-${radioCount}`;
            const inputElem = document.createElement('input');
            inputElem.type = 'radio';
            inputElem.value = value;
            inputElem.id = inputName;
            inputElem.name = 'player-radio';
            inputElem.classList.add('player-radio', extraClass);
            listElem.appendChild(inputElem);
            const labelElem = document.createElement('label');
            labelElem.htmlFor = inputName;
            labelElem.innerHTML = name;
            listElem.appendChild(labelElem);
            return inputElem;
        };
        const defaultText = defaultTextByLang[lang] || defaultTextByLang['en'];
        const defaultElem = addRadio(defaultText, '', 'player-radio-default');
        defaultElem.checked = true;
        if (lastSelectedPlayer) {
            const last = addRadio(lastSelectedPlayer, lastSelectedPlayer, 'player-radio-last');
            last.checked = true;
        }
        const partyPlayers = party.filter((p) => p.inParty && p.name !== lastSelectedPlayer);
        const partyNames = partyPlayers.map((p) => p.name).sort();
        for (const name of partyNames)
            addRadio(name, name, 'player-radio-party');
        const alliancePlayers = party.filter((p) => !p.inParty && p.name !== lastSelectedPlayer);
        const allianceNames = alliancePlayers.map((p) => p.name).sort();
        for (const name of allianceNames)
            addRadio(name, name, 'player-radio-alliance');
    };
    addOverlayListener('PartyChanged', (e) => {
        buildList(e.party);
    });
    buildList([]);
};

// EXTERNAL MODULE: ./resources/zone_id.ts
var zone_id = __webpack_require__(248);
;// CONCATENATED MODULE: ./ui/raidboss/popup-text.ts









const isRaidbossLooseTimelineTrigger = (trigger) => {
    return 'isTimelineTrigger' in trigger;
};
const isNetRegexTrigger = (trigger) => {
    if (trigger && !isRaidbossLooseTimelineTrigger(trigger))
        return 'netRegex' in trigger;
    return false;
};
const isRegexTrigger = (trigger) => {
    if (trigger && !isRaidbossLooseTimelineTrigger(trigger))
        return 'regex' in trigger;
    return false;
};
// There should be (at most) six lines of instructions.
const raidbossInstructions = {
    en: [
        'Instructions as follows:',
        'This is debug text for resizing.',
        'It goes away when you lock the overlay',
        'along with the blue background.',
        'Timelines and triggers will show up in supported zones.',
        'Test raidboss with a /countdown in Summerford Farms.',
    ],
    de: [
        'Anweisungen wie folgt:',
        'Dies ist ein Debug-Text zur Größenänderung.',
        'Er verschwindet, wenn du das Overlay sperrst,',
        'zusammen mit dem blauen Hintergrund.',
        'Timeline und Trigger werden in den unterstützten Zonen angezeigt.',
        'Testen Sie Raidboss mit einem /countdown in Sommerfurt-Höfe.',
    ],
    fr: [
        'Instructions :',
        'Ceci est un texte de test pour redimensionner.',
        'Il disparaitra \(ainsi que le fond bleu\) quand',
        'l\'overlay sera bloqué.',
        'Les timelines et triggers seront affichés dans les zones supportées.',
        'Testez raidboss avec un /countdown aux Vergers d\'Estival',
    ],
    ja: [
        '操作手順：',
        'デバッグ用のテキストです。',
        '青色のオーバーレイを',
        'ロックすれば消える。',
        'サポートするゾーンにタイムラインとトリガーテキストが表示できる。',
        'サマーフォード庄に/countdownコマンドを実行し、raidbossをテストできる。',
    ],
    cn: [
        '请按以下步骤操作：',
        '这是供用户调整悬浮窗大小的调试用文本',
        '当你锁定此蓝色背景的悬浮窗',
        '该文本即会消失。',
        '在支持的区域中会自动加载时间轴和触发器。',
        '可在盛夏农庄使用/countdown命令测试该raidboss模块。',
    ],
    ko: [
        '<조작 설명>',
        '크기 조정을 위한 디버그 창입니다',
        '파란 배경과 이 텍스트는',
        '오버레이를 위치잠금하면 사라집니다',
        '지원되는 구역에서 타임라인과 트리거가 표시됩니다',
        '여름여울 농장에서 초읽기를 실행하여 테스트 해볼 수 있습니다',
    ],
};
// Because apparently people don't understand uppercase greek letters,
// add a special case to not uppercase them.
const triggerUpperCase = (str) => {
    return str.replace(/[^αβγδ]/g, (x) => x.toUpperCase());
};
// Disable no-explicit-any due to catch clauses requiring any
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const onTriggerException = (trigger, e) => {
    var _a, _b;
    // When a fight ends and there are open promises, from delaySeconds or promise itself,
    // all promises will be rejected.  In this case there is no error; simply return without logging.
    if (!e)
        return;
    let str = 'Error in trigger: ' + (trigger.id ? trigger.id : '[unknown trigger id]');
    if (trigger.filename)
        str += ' (' + trigger.filename + ')';
    console.error(str);
    if (e instanceof Error) {
        const lines = (_b = (_a = e.stack) === null || _a === void 0 ? void 0 : _a.split('\n')) !== null && _b !== void 0 ? _b : [];
        for (let i = 0; i < lines.length; ++i)
            console.error(lines[i]);
    }
};
const sounds = ['Alarm', 'Alert', 'Info', 'Long', 'Pull'];
const soundStrs = sounds;
const texts = (/* unused pure expression or super */ null && (['info', 'alert', 'alarm']));
const textMap = {
    info: {
        text: 'infoText',
        upperText: 'InfoText',
        upperSound: 'InfoSound',
        upperSoundVolume: 'InfoSoundVolume',
    },
    alert: {
        text: 'alertText',
        upperText: 'AlertText',
        upperSound: 'AlertSound',
        upperSoundVolume: 'AlertSoundVolume',
    },
    alarm: {
        text: 'alarmText',
        upperText: 'AlarmText',
        upperSound: 'AlarmSound',
        upperSoundVolume: 'AlarmSoundVolume',
    },
};
// Helper for handling trigger overrides.
//
// asList will return a list of triggers in the same order as append was called, except:
// If a later trigger has the same id as a previous trigger, it will replace the previous trigger
// and appear in the same order that the previous trigger appeared.
// e.g. a, b1, c, b2 (where b1 and b2 share the same id) yields [a, b2, c] as the final list.
//
// JavaScript dictionaries are *almost* ordered automatically as we would want,
// but want to handle missing ids and integer ids (you shouldn't, but just in case).
class OrderedTriggerList {
    constructor() {
        this.triggers = [];
        this.idToIndex = {};
    }
    push(trigger) {
        const idx = trigger.id ? this.idToIndex[trigger.id] : undefined;
        if (idx && trigger.id) {
            const oldTrigger = this.triggers[idx];
            if (oldTrigger === undefined)
                throw new not_reached/* UnreachableCode */.$();
            // TODO: be verbose now while this is fresh, but hide this output behind debug flags later.
            const triggerFile = (trigger) => trigger.filename ? `'${trigger.filename}'` : 'user override';
            const oldFile = triggerFile(oldTrigger);
            const newFile = triggerFile(trigger);
            console.log(`Overriding '${trigger.id}' from ${oldFile} with ${newFile}.`);
            this.triggers[idx] = trigger;
            return;
        }
        // Normal case of a new trigger, with no overriding.
        if (trigger.id)
            this.idToIndex[trigger.id] = this.triggers.length;
        this.triggers.push(trigger);
    }
    asList() {
        return this.triggers;
    }
}
const isObject = (x) => x instanceof Object;
class TriggerOutputProxy {
    constructor(trigger, displayLang, perTriggerAutoConfig) {
        var _a;
        this.trigger = trigger;
        this.displayLang = displayLang;
        this.perTriggerAutoConfig = perTriggerAutoConfig;
        this.overrideStrings = {};
        this.responseOutputStrings = {};
        this.unknownValue = '???';
        this.outputStrings = (_a = trigger.outputStrings) !== null && _a !== void 0 ? _a : {};
        if (trigger.id && perTriggerAutoConfig) {
            const config = perTriggerAutoConfig[trigger.id];
            if (config && config.OutputStrings)
                this.overrideStrings = config.OutputStrings;
        }
        return new Proxy(this, {
            // Response output string subtlety:
            // Take this example response:
            //
            //    response: (data, matches, output) => {
            //      return {
            //        alarmText: output.someAlarm(),
            //        outputStrings: { someAlarm: 'string' }, // <- impossible
            //      };
            //    },
            //
            // Because the object being returned is evaluated all at once, the object
            // cannot simultaneously define outputStrings and use those outputStrings.
            // So, instead, responses need to set `output.responseOutputStrings`.
            // HOWEVER, this also has its own issues!  This value is set for the trigger
            // (which may have multiple active in flight instances).  This *should* be
            // ok because we guarantee that response/alarmText/alertText/infoText/tts
            // are evaluated sequentially for a single trigger before any other trigger
            // instance evaluates that set of triggers.  Finally, for ease of automating
            // the config ui, the response should return the exact same set of
            // outputStrings every time.  Thank you for coming to my TED talk.
            set(target, property, value) {
                var _a;
                if (property === 'responseOutputStrings') {
                    if (isObject(value)) {
                        target[property] = value;
                        return true;
                    }
                    console.error(`Invalid responseOutputStrings on trigger ${(_a = target.trigger.id) !== null && _a !== void 0 ? _a : 'Unknown'}`);
                    return false;
                }
                // Be kind to user triggers that do weird things, and just console error this
                // instead of throwing an exception.
                console.error(`Invalid property '${String(property)}' on output.`);
                return false;
            },
            get(target, name) {
                // TODO: add a test that verifies nobody does this.
                if (name === 'toJSON' || typeof name !== 'string')
                    return '{}';
                // Because output.func() must exist at the time of trigger eval,
                // always provide a function even before we know which keys are valid.
                return (params) => {
                    var _a, _b;
                    const id = (_a = target.trigger.id) !== null && _a !== void 0 ? _a : 'Unknown Trigger';
                    // Priority: per-trigger config from ui > response > built-in trigger
                    // Ideally, response provides everything and trigger provides nothing,
                    // or there's no response and trigger provides everything.  Having
                    // this well-defined smooths out the collision edge cases.
                    let str = target.getReplacement(target.overrideStrings[name], params, name, id);
                    if (str === undefined) {
                        const responseString = target.responseOutputStrings[name];
                        if (isObject(responseString))
                            str = target.getReplacement(responseString, params, name, id);
                    }
                    if (str === undefined)
                        str = target.getReplacement(target.outputStrings[name], params, name, id);
                    if (str === undefined) {
                        console.error(`Trigger ${(_b = target.trigger.id) !== null && _b !== void 0 ? _b : ''} has missing outputString ${name}.`);
                        return target.unknownValue;
                    }
                    return str;
                };
            },
        });
    }
    getReplacement(
    // Can't use optional modifier for this arg since the others aren't optional
    template, params, name, id) {
        var _a;
        if (!template)
            return;
        let value;
        if (typeof template === 'string')
            // user config
            value = template;
        else
            value = (_a = template[this.displayLang]) !== null && _a !== void 0 ? _a : template['en'];
        if (typeof value !== 'string') {
            console.error(`Trigger ${id} has invalid outputString ${name}.`, JSON.stringify(template));
            return;
        }
        return value.replace(/\${\s*([^}\s]+)\s*}/g, (_fullMatch, key) => {
            if (params && key in params) {
                const str = params[key];
                switch (typeof str) {
                    case 'string':
                        return str;
                    case 'number':
                        return str.toString();
                }
                console.error(`Trigger ${id} has non-string param value ${key}.`);
                return this.unknownValue;
            }
            console.error(`Trigger ${id} can't replace ${key} in ${JSON.stringify(template)}.`);
            return this.unknownValue;
        });
    }
    static makeOutput(trigger, displayLang, perTriggerAutoConfig) {
        // `Output` is the common type used for the trigger data interface to support arbitrary
        // string keys and always returns a string. However, TypeScript doesn't have good support
        // for the Proxy representing this structure so we need to cast Proxy => unknown => Output
        return new TriggerOutputProxy(trigger, displayLang, perTriggerAutoConfig);
    }
}
const defaultOutput = TriggerOutputProxy.makeOutput({}, 'en');
class PopupText {
    constructor(options, timelineLoader, raidbossDataFiles) {
        var _a, _b, _c, _d;
        this.options = options;
        this.timelineLoader = timelineLoader;
        this.raidbossDataFiles = raidbossDataFiles;
        this.triggers = [];
        this.netTriggers = [];
        this.timers = {};
        this.triggerSuppress = {};
        this.currentTriggerID = 0;
        this.inCombat = false;
        this.resetWhenOutOfCombat = true;
        this.partyTracker = new PartyTracker();
        this.kMaxRowsOfText = 2;
        this.me = '';
        this.job = 'NONE';
        this.role = 'none';
        this.triggerSets = [];
        this.zoneName = '';
        this.zoneId = -1;
        this.dataInitializers = [];
        this.options = options;
        this.timelineLoader = timelineLoader;
        this.ProcessDataFiles(raidbossDataFiles);
        this.infoText = document.getElementById('popup-text-info');
        this.alertText = document.getElementById('popup-text-alert');
        this.alarmText = document.getElementById('popup-text-alarm');
        this.parserLang = (_a = this.options.ParserLanguage) !== null && _a !== void 0 ? _a : 'en';
        this.displayLang = (_d = (_c = (_b = this.options.AlertsLanguage) !== null && _b !== void 0 ? _b : this.options.DisplayLanguage) !== null && _c !== void 0 ? _c : this.options.ParserLanguage) !== null && _d !== void 0 ? _d : 'en';
        if (this.options.IsRemoteRaidboss) {
            this.ttsEngine = new BrowserTTSEngine(this.displayLang);
            this.ttsSay = (text) => {
                var _a;
                (_a = this.ttsEngine) === null || _a === void 0 ? void 0 : _a.play(this.options.TransformTts(text));
            };
        }
        else {
            this.ttsSay = (text) => {
                void (0,overlay_plugin_api/* callOverlayHandler */.ae)({
                    call: 'cactbotSay',
                    text: this.options.TransformTts(text),
                });
            };
        }
        this.data = this.getDataObject();
        // check to see if we need user interaction to play audio
        // only if audio is enabled in options
        if (this.options.AudioAllowed)
            AutoplayHelper.CheckAndPrompt();
        this.Reset();
        this.AddDebugInstructions();
        this.HookOverlays();
    }
    AddDebugInstructions() {
        raidbossInstructions[this.displayLang].forEach((line, i) => {
            const elem = document.getElementById(`instructions-${i}`);
            if (!elem)
                return;
            elem.innerHTML = line;
        });
    }
    HookOverlays() {
        (0,overlay_plugin_api/* addOverlayListener */.PS)('PartyChanged', (e) => {
            this.partyTracker.onPartyChanged(e);
        });
        addPlayerChangedOverrideListener((e) => {
            this.OnPlayerChange(e);
        }, this.options.PlayerNameOverride);
        (0,overlay_plugin_api/* addOverlayListener */.PS)('ChangeZone', (e) => {
            this.OnChangeZone(e);
        });
        (0,overlay_plugin_api/* addOverlayListener */.PS)('onInCombatChangedEvent', (e) => {
            this.OnInCombatChange(e.detail.inGameCombat);
        });
        (0,overlay_plugin_api/* addOverlayListener */.PS)('onLogEvent', (e) => {
            this.OnLog(e);
        });
        (0,overlay_plugin_api/* addOverlayListener */.PS)('LogLine', (e) => {
            this.OnNetLog(e);
        });
    }
    OnPlayerChange(e) {
        if (this.job !== e.detail.job || this.me !== e.detail.name)
            this.OnJobChange(e);
        this.data.currentHP = e.detail.currentHP;
    }
    ProcessDataFiles(files) {
        this.triggerSets = [];
        for (const [filename, json] of Object.entries(files)) {
            if (!filename.endsWith('.js') && !filename.endsWith('.ts'))
                continue;
            if (typeof json !== 'object') {
                console.log('Unexpected JSON from ' + filename + ', expected an array');
                continue;
            }
            if (!json.triggers) {
                console.log('Unexpected JSON from ' + filename + ', expected a triggers');
                continue;
            }
            if (typeof json.triggers !== 'object' || !(json.triggers.length >= 0)) {
                console.log('Unexpected JSON from ' + filename + ', expected triggers to be an array');
                continue;
            }
            this.triggerSets.push({
                filename: filename,
                ...json,
            });
        }
        // User triggers must come last so that they override built-in files.
        Array.prototype.push.apply(this.triggerSets, this.options.Triggers);
    }
    OnChangeZone(e) {
        if (this.zoneName !== e.zoneName) {
            this.zoneName = e.zoneName;
            this.zoneId = e.zoneID;
            this.ReloadTimelines();
        }
    }
    ReloadTimelines() {
        var _a, _b, _c;
        if (!this.triggerSets || !this.me || !this.zoneName || !this.timelineLoader.IsReady())
            return;
        // Drop the triggers and timelines from the previous zone, so we can add new ones.
        this.triggers = [];
        this.netTriggers = [];
        let timelineFiles = [];
        let timelines = [];
        const replacements = [];
        const timelineStyles = [];
        this.resetWhenOutOfCombat = true;
        const orderedTriggers = new OrderedTriggerList();
        // Recursively/iteratively process timeline entries for triggers.
        // Functions get called with data, arrays get iterated, strings get appended.
        const addTimeline = (function (obj) {
            if (Array.isArray(obj)) {
                for (const objVal of obj)
                    addTimeline(objVal);
            }
            else if (typeof obj === 'function') {
                addTimeline(obj(this.data));
            }
            else if (obj) {
                timelines.push(obj);
            }
        }).bind(this);
        // construct something like regexDe or regexFr.
        const langSuffix = this.parserLang.charAt(0).toUpperCase() + this.parserLang.slice(1);
        const regexParserLang = 'regex' + langSuffix;
        const netRegexParserLang = 'netRegex' + langSuffix;
        for (const set of this.triggerSets) {
            // zoneRegex can be undefined, a regex, or translatable object of regex.
            const haveZoneRegex = 'zoneRegex' in set;
            const haveZoneId = 'zoneId' in set;
            if (!haveZoneRegex && !haveZoneId || haveZoneRegex && haveZoneId) {
                console.error(`Trigger set must include exactly one of zoneRegex or zoneId property`);
                continue;
            }
            if (haveZoneId && set.zoneId === undefined) {
                const filename = set.filename ? `'${set.filename}'` : '(user file)';
                console.error(`Trigger set has zoneId, but with nothing specified in ${filename}.  ` +
                    `Did you misspell the ZoneId.ZoneName?`);
                continue;
            }
            if (set.zoneId) {
                if (set.zoneId !== zone_id/* default.MatchAll */.Z.MatchAll && set.zoneId !== this.zoneId && !(typeof set.zoneId === 'object' && set.zoneId.includes(this.zoneId)))
                    continue;
            }
            else if (set.zoneRegex) {
                let zoneRegex = set.zoneRegex;
                if (typeof zoneRegex !== 'object') {
                    console.error('zoneRegex must be translatable object or regexp: ' + JSON.stringify(set.zoneRegex));
                    continue;
                }
                else if (!(zoneRegex instanceof RegExp)) {
                    const parserLangRegex = zoneRegex[this.parserLang];
                    if (parserLangRegex) {
                        zoneRegex = parserLangRegex;
                    }
                    else if (zoneRegex['en']) {
                        zoneRegex = zoneRegex['en'];
                    }
                    else {
                        console.error('unknown zoneRegex parser language: ' + JSON.stringify(set.zoneRegex));
                        continue;
                    }
                    if (!(zoneRegex instanceof RegExp)) {
                        console.error('zoneRegex must be regexp: ' + JSON.stringify(set.zoneRegex));
                        continue;
                    }
                }
                if (this.zoneName.search(resources_regexes/* default.parse */.Z.parse(zoneRegex)) < 0)
                    continue;
            }
            if (this.options.Debug) {
                if (set.filename)
                    console.log('Loading ' + set.filename);
                else
                    console.log('Loading user triggers for zone');
            }
            const setFilename = (_a = set.filename) !== null && _a !== void 0 ? _a : 'Unknown';
            if (set.initData) {
                this.dataInitializers.push({
                    file: setFilename,
                    func: set.initData,
                });
            }
            // Adjust triggers for the parser language.
            if (set.triggers && this.options.AlertsEnabled) {
                for (const trigger of set.triggers) {
                    // Add an additional resolved regex here to save
                    // time later.  This will clobber each time we
                    // load this, but that's ok.
                    trigger.filename = setFilename;
                    const id = trigger.id;
                    if (!isRegexTrigger(trigger) && !isNetRegexTrigger(trigger)) {
                        console.error(`Trigger ${id}: has no regex property specified`);
                        continue;
                    }
                    this.ProcessTrigger(trigger);
                    let found = false;
                    const triggerObject = trigger;
                    // parser-language-based regex takes precedence.
                    if (isRegexTrigger(trigger)) {
                        const regex = (_b = triggerObject[regexParserLang]) !== null && _b !== void 0 ? _b : trigger.regex;
                        if (regex instanceof RegExp) {
                            trigger.localRegex = resources_regexes/* default.parse */.Z.parse(regex);
                            orderedTriggers.push(trigger);
                            found = true;
                        }
                    }
                    if (isNetRegexTrigger(trigger)) {
                        const netRegex = (_c = triggerObject[netRegexParserLang]) !== null && _c !== void 0 ? _c : trigger.netRegex;
                        if (netRegex instanceof RegExp) {
                            trigger.localNetRegex = resources_regexes/* default.parse */.Z.parse(netRegex);
                            orderedTriggers.push(trigger);
                            found = true;
                        }
                    }
                    if (!found) {
                        console.error('Trigger ' + trigger.id + ': missing regex and netRegex');
                        continue;
                    }
                }
            }
            if (set.overrideTimelineFile) {
                const filename = set.filename ? `'${set.filename}'` : '(user file)';
                console.log(`Overriding timeline from ${filename}.`);
                // If the timeline file override is set, all previously loaded timeline info is dropped.
                // Styles, triggers, and translations are kept, as they may still apply to the new one.
                timelineFiles = [];
                timelines = [];
            }
            // And set the timeline files/timelines from each set that matches.
            if (set.timelineFile) {
                if (set.filename) {
                    const dir = set.filename.substring(0, set.filename.lastIndexOf('/'));
                    timelineFiles.push(dir + '/' + set.timelineFile);
                }
                else {
                    // Note: For user files, this should get handled by raidboss_config.js,
                    // where `timelineFile` should get converted to `timeline`.
                    console.error('Can\'t specify timelineFile in non-manifest file:' + set.timelineFile);
                }
            }
            if (set.timeline)
                addTimeline(set.timeline);
            if (set.timelineReplace)
                replacements.push(...set.timelineReplace);
            if (set.timelineTriggers) {
                for (const trigger of set.timelineTriggers) {
                    this.ProcessTrigger(trigger);
                    trigger.isTimelineTrigger = true;
                    orderedTriggers.push(trigger);
                }
            }
            if (set.timelineStyles)
                timelineStyles.push(...set.timelineStyles);
            if (set.resetWhenOutOfCombat !== undefined)
                this.resetWhenOutOfCombat && (this.resetWhenOutOfCombat = set.resetWhenOutOfCombat);
        }
        // Store all the collected triggers in order, and filter out disabled triggers.
        const filterEnabled = (trigger) => !('disabled' in trigger && trigger.disabled);
        const allTriggers = orderedTriggers.asList().filter(filterEnabled);
        this.triggers = allTriggers.filter(isRegexTrigger);
        this.netTriggers = allTriggers.filter(isNetRegexTrigger);
        const timelineTriggers = allTriggers.filter(isRaidbossLooseTimelineTrigger);
        this.Reset();
        this.timelineLoader.SetTimelines(timelineFiles, timelines, replacements, timelineTriggers, timelineStyles);
    }
    ProcessTrigger(trigger) {
        // These properties are used internally by ReloadTimelines only and should
        // not exist on user triggers.  However, the trigger objects themselves are
        // reused when reloading pages, and so it is impossible to verify that
        // these properties don't exist.  Therefore, just delete them silently.
        if (isRaidbossLooseTimelineTrigger(trigger))
            delete trigger.isTimelineTrigger;
        delete trigger.localRegex;
        delete trigger.localNetRegex;
        trigger.output = TriggerOutputProxy.makeOutput(trigger, this.options.DisplayLanguage, this.options.PerTriggerAutoConfig);
    }
    OnJobChange(e) {
        this.me = e.detail.name;
        this.job = e.detail.job;
        this.role = util/* default.jobToRole */.Z.jobToRole(this.job);
        this.ReloadTimelines();
    }
    OnInCombatChange(inCombat) {
        if (this.inCombat === inCombat)
            return;
        if (this.resetWhenOutOfCombat)
            this.SetInCombat(inCombat);
    }
    SetInCombat(inCombat) {
        if (this.inCombat === inCombat)
            return;
        // Stop timers when stopping combat to stop any active timers that
        // are delayed.  However, also reset when starting combat.
        // This prevents late attacks from affecting |data| which
        // throws off the next run, potentially.
        this.inCombat = inCombat;
        if (!this.inCombat) {
            this.StopTimers();
            this.timelineLoader.StopCombat();
        }
        if (this.inCombat)
            this.Reset();
    }
    ShortNamify(name) {
        // TODO: make this unique among the party in case of first name collisions.
        // TODO: probably this should be a general cactbot utility.
        if (typeof name !== 'string') {
            console.error('called ShortNamify with non-string');
            return '???';
        }
        const nick = this.options.PlayerNicks[name];
        if (nick)
            return nick;
        const idx = name.indexOf(' ');
        return idx < 0 ? name : name.substr(0, idx);
    }
    Reset() {
        this.data = this.getDataObject();
        this.StopTimers();
        this.triggerSuppress = {};
        for (const initObj of this.dataInitializers) {
            const init = initObj.func;
            const data = init();
            if (typeof data === 'object') {
                this.data = {
                    ...data,
                    ...this.data,
                };
            }
            else {
                console.log(`Error in file: ${initObj.file}: these triggers may not work;
        initData function returned invalid object: ${init.toString()}`);
            }
        }
    }
    StopTimers() {
        this.timers = {};
    }
    OnLog(e) {
        var _a;
        // This could conceivably be determined based on the line's contents as well, but
        // not sure if that's worth the effort
        const currentTime = +new Date();
        for (const log of e.detail.logs) {
            if (log.includes('00:0038:cactbot wipe'))
                this.SetInCombat(false);
            for (const trigger of this.triggers) {
                const r = (_a = trigger.localRegex) === null || _a === void 0 ? void 0 : _a.exec(log);
                if (r)
                    this.OnTrigger(trigger, r, currentTime);
            }
        }
    }
    OnNetLog(e) {
        var _a;
        const log = e.rawLine;
        // This could conceivably be determined based on `new Date(e.line[1])` as well, but
        // not sure if that's worth the effort
        const currentTime = +new Date();
        for (const trigger of this.netTriggers) {
            const r = (_a = trigger.localNetRegex) === null || _a === void 0 ? void 0 : _a.exec(log);
            if (r)
                this.OnTrigger(trigger, r, currentTime);
        }
    }
    OnTrigger(trigger, matches, currentTime) {
        try {
            this.OnTriggerInternal(trigger, matches, currentTime);
        }
        catch (e) {
            onTriggerException(trigger, e);
        }
    }
    OnTriggerInternal(trigger, matches, currentTime) {
        if (this._onTriggerInternalCheckSuppressed(trigger, currentTime))
            return;
        let groups = {};
        // If using named groups, treat matches.groups as matches
        // so triggers can do things like matches.target.
        if (matches && matches.groups)
            groups = matches.groups;
        // Set up a helper object so we don't have to throw
        // a ton of info back and forth between subfunctions
        const triggerHelper = this._onTriggerInternalGetHelper(trigger, groups, currentTime);
        if (!this._onTriggerInternalCondition(triggerHelper))
            return;
        this._onTriggerInternalPreRun(triggerHelper);
        // Evaluate for delay here, but run delay later
        const delayPromise = this._onTriggerInternalDelaySeconds(triggerHelper);
        this._onTriggerInternalDurationSeconds(triggerHelper);
        this._onTriggerInternalSuppressSeconds(triggerHelper);
        const triggerPostDelay = () => {
            const promise = this._onTriggerInternalPromise(triggerHelper);
            const triggerPostPromise = () => {
                this._onTriggerInternalSound(triggerHelper);
                this._onTriggerInternalSoundVolume(triggerHelper);
                this._onTriggerInternalResponse(triggerHelper);
                this._onTriggerInternalAlarmText(triggerHelper);
                this._onTriggerInternalAlertText(triggerHelper);
                this._onTriggerInternalInfoText(triggerHelper);
                // Priority audio order:
                // * user disabled (play nothing)
                // * if tts options are enabled globally or for this trigger:
                //   * user TTS triggers tts override
                //   * tts entries in the trigger
                //   * default alarm tts
                //   * default alert tts
                //   * default info tts
                // * if sound options are enabled globally or for this trigger:
                //   * user trigger sound overrides
                //   * sound entries in the trigger
                //   * alarm noise
                //   * alert noise
                //   * info noise
                // * else, nothing
                //
                // In general, tts comes before sounds and user overrides come
                // before defaults.  If a user trigger or tts entry is specified as
                // being valid but empty, this will take priority over the default
                // tts texts from alarm/alert/info and will prevent tts from playing
                // and allowing sounds to be played instead.
                this._onTriggerInternalTTS(triggerHelper);
                this._onTriggerInternalPlayAudio(triggerHelper);
                this._onTriggerInternalRun(triggerHelper);
            };
            // The trigger body must run synchronously when there is no promise.
            if (promise)
                promise.then(triggerPostPromise, (e) => onTriggerException(trigger, e));
            else
                triggerPostPromise();
        };
        // The trigger body must run synchronously when there is no delay.
        if (delayPromise)
            delayPromise.then(triggerPostDelay, (e) => onTriggerException(trigger, e));
        else
            triggerPostDelay();
    }
    // Build a default triggerHelper object for this trigger
    _onTriggerInternalGetHelper(trigger, matches, now) {
        var _a, _b, _c;
        const id = trigger.id;
        let options = {};
        let config = {};
        let suppressed = false;
        if (id) {
            options = (_a = this.options.PerTriggerOptions[id]) !== null && _a !== void 0 ? _a : options;
            config = (_b = this.options.PerTriggerAutoConfig[id]) !== null && _b !== void 0 ? _b : config;
            suppressed = (_c = this.options.DisabledTriggers[id]) !== null && _c !== void 0 ? _c : suppressed;
        }
        const triggerHelper = {
            trigger: trigger,
            now: now,
            triggerOptions: options,
            triggerAutoConfig: config,
            // This setting only suppresses output, trigger still runs for data/logic purposes
            userSuppressedOutput: suppressed,
            matches: matches,
            // Default options
            textAlertsEnabled: this.options.TextAlertsEnabled,
            soundAlertsEnabled: this.options.SoundAlertsEnabled,
            spokenAlertsEnabled: this.options.SpokenAlertsEnabled,
            groupSpokenAlertsEnabled: this.options.GroupSpokenAlertsEnabled,
            valueOrFunction: (f) => {
                var _a;
                let result = f;
                if (typeof result === 'function')
                    result = result(this.data, triggerHelper.matches, triggerHelper.output);
                // All triggers return either a string directly, or an object
                // whose keys are different parser language based names.  For simplicity,
                // this is valid to do for any trigger entry that can handle a function.
                // In case anybody wants to encapsulate any fancy grammar, the values
                // in this object can also be functions.
                if (typeof result !== 'object' || result === null)
                    return result;
                return triggerHelper.valueOrFunction((_a = result[this.displayLang]) !== null && _a !== void 0 ? _a : result['en']);
            },
            get output() {
                var _a;
                if (this.trigger.output)
                    return this.trigger.output;
                console.log(`Missing trigger.output for trigger ${(_a = trigger.id) !== null && _a !== void 0 ? _a : 'Unknown'}`);
                return defaultOutput;
            },
        };
        this._onTriggerInternalHelperDefaults(triggerHelper);
        return triggerHelper;
    }
    _onTriggerInternalCheckSuppressed(trigger, when) {
        const id = trigger.id;
        if (id !== undefined) {
            const suppress = this.triggerSuppress[id];
            if (suppress !== undefined) {
                if (suppress > when)
                    return true;
                delete this.triggerSuppress[id];
            }
        }
        return false;
    }
    _onTriggerInternalCondition(triggerHelper) {
        var _a;
        const condition = (_a = triggerHelper.triggerOptions.Condition) !== null && _a !== void 0 ? _a : triggerHelper.trigger.condition;
        if (condition) {
            if (condition === true)
                return true;
            if (!condition(this.data, triggerHelper.matches, triggerHelper.output))
                return false;
        }
        return true;
    }
    // Set defaults for triggerHelper object (anything that won't change based on
    // other trigger functions running)
    _onTriggerInternalHelperDefaults(triggerHelper) {
        if (triggerHelper.triggerAutoConfig) {
            const textAlertsEnabled = triggerHelper.triggerAutoConfig.TextAlertsEnabled;
            if (textAlertsEnabled !== undefined)
                triggerHelper.textAlertsEnabled = textAlertsEnabled;
            const soundAlertsEnabled = triggerHelper.triggerAutoConfig.SoundAlertsEnabled;
            if (soundAlertsEnabled !== undefined)
                triggerHelper.soundAlertsEnabled = soundAlertsEnabled;
            const spokenAlertsEnabled = triggerHelper.triggerAutoConfig.SpokenAlertsEnabled;
            if (spokenAlertsEnabled !== undefined)
                triggerHelper.spokenAlertsEnabled = spokenAlertsEnabled;
        }
        if (triggerHelper.triggerOptions) {
            const textAlertsEnabled = triggerHelper.triggerOptions.TextAlert;
            if (textAlertsEnabled !== undefined)
                triggerHelper.textAlertsEnabled = textAlertsEnabled;
            const soundAlertsEnabled = triggerHelper.triggerOptions.SoundAlert;
            if (soundAlertsEnabled !== undefined)
                triggerHelper.soundAlertsEnabled = soundAlertsEnabled;
            const spokenAlertsEnabled = triggerHelper.triggerOptions.SpeechAlert;
            if (spokenAlertsEnabled !== undefined)
                triggerHelper.spokenAlertsEnabled = spokenAlertsEnabled;
            const groupSpokenAlertsEnabled = triggerHelper.triggerOptions.GroupSpeechAlert;
            if (groupSpokenAlertsEnabled !== undefined)
                triggerHelper.groupSpokenAlertsEnabled = groupSpokenAlertsEnabled;
        }
        if (triggerHelper.userSuppressedOutput) {
            triggerHelper.textAlertsEnabled = false;
            triggerHelper.soundAlertsEnabled = false;
            triggerHelper.spokenAlertsEnabled = false;
            triggerHelper.groupSpokenAlertsEnabled = false;
        }
        if (!this.options.AudioAllowed) {
            triggerHelper.soundAlertsEnabled = false;
            triggerHelper.spokenAlertsEnabled = false;
            triggerHelper.groupSpokenAlertsEnabled = false;
        }
    }
    _onTriggerInternalPreRun(triggerHelper) {
        var _a, _b;
        (_b = (_a = triggerHelper.trigger) === null || _a === void 0 ? void 0 : _a.preRun) === null || _b === void 0 ? void 0 : _b.call(_a, this.data, triggerHelper.matches, triggerHelper.output);
    }
    _onTriggerInternalDelaySeconds(triggerHelper) {
        const delay = 'delaySeconds' in triggerHelper.trigger ? triggerHelper.valueOrFunction(triggerHelper.trigger.delaySeconds) : 0;
        if (!delay || delay <= 0 || typeof delay !== 'number')
            return;
        const triggerID = this.currentTriggerID++;
        this.timers[triggerID] = true;
        return new Promise((res, rej) => {
            window.setTimeout(() => {
                if (this.timers[triggerID])
                    res();
                else if (rej)
                    rej();
                delete this.timers[triggerID];
            }, delay * 1000);
        });
    }
    _onTriggerInternalDurationSeconds(triggerHelper) {
        let valueDuration = triggerHelper.valueOrFunction(triggerHelper.trigger.durationSeconds);
        if (typeof valueDuration !== 'number')
            valueDuration = undefined;
        triggerHelper.duration = {
            fromConfig: triggerHelper.triggerAutoConfig.Duration,
            fromTrigger: valueDuration,
            alarmText: this.options.DisplayAlarmTextForSeconds,
            alertText: this.options.DisplayAlertTextForSeconds,
            infoText: this.options.DisplayInfoTextForSeconds,
        };
    }
    _onTriggerInternalSuppressSeconds(triggerHelper) {
        const suppress = 'suppressSeconds' in triggerHelper.trigger ? triggerHelper.valueOrFunction(triggerHelper.trigger.suppressSeconds) : 0;
        if (typeof suppress !== 'number')
            return;
        if (triggerHelper.trigger.id && suppress > 0)
            this.triggerSuppress[triggerHelper.trigger.id] = triggerHelper.now + (suppress * 1000);
    }
    _onTriggerInternalPromise(triggerHelper) {
        var _a;
        let promise;
        if ('promise' in triggerHelper.trigger) {
            const id = (_a = triggerHelper.trigger.id) !== null && _a !== void 0 ? _a : 'Unknown';
            if (typeof triggerHelper.trigger.promise === 'function') {
                promise = triggerHelper.trigger.promise(this.data, triggerHelper.matches, triggerHelper.output);
                // Make sure we actually get a Promise back from the function
                if (Promise.resolve(promise) !== promise) {
                    console.error(`Trigger ${id}: promise function did not return a promise`);
                    promise = undefined;
                }
            }
            else {
                console.error(`Trigger ${id}: promise defined but not a function`);
            }
        }
        return promise;
    }
    _onTriggerInternalSound(triggerHelper) {
        const result = triggerHelper.valueOrFunction(triggerHelper.trigger.sound);
        if (typeof result === 'string')
            triggerHelper.soundUrl = result;
    }
    _onTriggerInternalSoundVolume(triggerHelper) {
        const result = triggerHelper.valueOrFunction(triggerHelper.trigger.soundVolume);
        if (typeof result === 'number')
            triggerHelper.triggerSoundVol = result;
    }
    _onTriggerInternalResponse(triggerHelper) {
        let response = {};
        const trigger = triggerHelper.trigger;
        if (trigger.response) {
            // Can't use ValueOrFunction here as r returns a non-localizable object.
            response = trigger.response;
            while (typeof response === 'function')
                response = response(this.data, triggerHelper.matches, triggerHelper.output);
            // Turn falsy values into a default no-op response.
            if (!response)
                response = {};
        }
        triggerHelper.response = response;
    }
    _onTriggerInternalAlarmText(triggerHelper) {
        this._addTextFor('alarm', triggerHelper);
    }
    _onTriggerInternalAlertText(triggerHelper) {
        this._addTextFor('alert', triggerHelper);
    }
    _onTriggerInternalInfoText(triggerHelper) {
        this._addTextFor('info', triggerHelper);
    }
    _onTriggerInternalTTS(triggerHelper) {
        if (!triggerHelper.groupSpokenAlertsEnabled || typeof triggerHelper.ttsText === 'undefined') {
            let result = undefined;
            if (triggerHelper.triggerOptions.TTSText) {
                result = triggerHelper.valueOrFunction(triggerHelper.triggerOptions.TTSText);
            }
            else if (triggerHelper.trigger.tts) {
                result = triggerHelper.valueOrFunction(triggerHelper.trigger.tts);
            }
            else if (triggerHelper.response) {
                const resp = triggerHelper.response;
                if (resp.tts)
                    result = triggerHelper.valueOrFunction(resp.tts);
            }
            // Allow false or null to disable tts entirely
            // Undefined will fall back to defaultTTSText
            if (result !== undefined) {
                if (result)
                    triggerHelper.ttsText = result === null || result === void 0 ? void 0 : result.toString();
            }
            else {
                triggerHelper.ttsText = triggerHelper.defaultTTSText;
            }
        }
    }
    _onTriggerInternalPlayAudio(triggerHelper) {
        var _a, _b, _c;
        if (triggerHelper.trigger.sound &&
            triggerHelper.soundUrl &&
            soundStrs.includes(triggerHelper.soundUrl)) {
            const namedSound = triggerHelper.soundUrl + 'Sound';
            const namedSoundVolume = triggerHelper.soundUrl + 'SoundVolume';
            const sound = this.options[namedSound];
            if (typeof sound === 'string') {
                triggerHelper.soundUrl = sound;
                const soundVol = this.options[namedSoundVolume];
                if (typeof soundVol === 'number')
                    triggerHelper.soundVol = soundVol;
            }
        }
        triggerHelper.soundUrl = (_a = triggerHelper.triggerOptions.SoundOverride) !== null && _a !== void 0 ? _a : triggerHelper.soundUrl;
        triggerHelper.soundVol = (_c = (_b = triggerHelper.triggerOptions.VolumeOverride) !== null && _b !== void 0 ? _b : triggerHelper.triggerSoundVol) !== null && _c !== void 0 ? _c : triggerHelper.soundVol;
        // Text to speech overrides all other sounds.  This is so
        // that a user who prefers tts can still get the benefit
        // of infoText triggers without tts entries by turning
        // on (speech=true, text=true, sound=true) but this will
        // not cause tts to play over top of sounds or noises.
        if (triggerHelper.ttsText && triggerHelper.spokenAlertsEnabled) {
            // Heuristics for auto tts.
            // * In case this is an integer.
            triggerHelper.ttsText = triggerHelper.ttsText.toString();
            // * Remove a bunch of chars.
            triggerHelper.ttsText = triggerHelper.ttsText.replace(/[#!]/g, '');
            // * slashes between mechanics
            triggerHelper.ttsText = triggerHelper.ttsText.replace('/', ' ');
            // * tildes at the end for emphasis
            triggerHelper.ttsText = triggerHelper.ttsText.replace(/~+$/, '');
            // * arrows helping visually simple to understand e.g. ↖ Front left / Back right ↘
            triggerHelper.ttsText = triggerHelper.ttsText.replace(/[↖-↙]/g, '');
            // * Korean TTS reads wrong with '1번째'
            triggerHelper.ttsText = triggerHelper.ttsText.replace('1번째', '첫번째');
            // * arrows at the front or the end are directions, e.g. "east =>"
            triggerHelper.ttsText = triggerHelper.ttsText.replace(/[-=]>\s*$/g, '');
            triggerHelper.ttsText = triggerHelper.ttsText.replace(/^\s*<[-=]/g, '');
            // * arrows in the middle are a sequence, e.g. "in => out => spread"
            const arrowReplacement = {
                en: ' then ',
                de: ' dann ',
                fr: ' puis ',
                ja: 'や',
                cn: '然后',
                ko: ' 그리고 ',
            };
            triggerHelper.ttsText = triggerHelper.ttsText.replace(/\s*(<[-=]|[=-]>)\s*/g, arrowReplacement[this.displayLang]);
            this.ttsSay(triggerHelper.ttsText);
        }
        else if (triggerHelper.soundUrl && triggerHelper.soundAlertsEnabled) {
            this._playAudioFile(triggerHelper, triggerHelper.soundUrl, triggerHelper.soundVol);
        }
    }
    _onTriggerInternalRun(triggerHelper) {
        var _a, _b;
        (_b = (_a = triggerHelper.trigger) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.call(_a, this.data, triggerHelper.matches, triggerHelper.output);
    }
    _createTextFor(triggerHelper, text, textType, lowerTextKey, duration) {
        var _a, _b;
        // info-text
        const textElementClass = textType + '-text';
        if (textType !== 'info')
            text = triggerUpperCase(text);
        const holder = (_a = this[lowerTextKey]) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('holder')[0];
        const div = this._makeTextElement(triggerHelper, text, textElementClass);
        if (!holder)
            throw new not_reached/* UnreachableCode */.$();
        holder.appendChild(div);
        if (holder.children.length > this.kMaxRowsOfText)
            (_b = holder.firstChild) === null || _b === void 0 ? void 0 : _b.remove();
        window.setTimeout(() => {
            if (holder.contains(div))
                holder.removeChild(div);
        }, duration * 1000);
    }
    _addTextFor(textType, triggerHelper) {
        var _a, _b, _c, _d;
        // infoText
        const lowerTextKey = textMap[textType].text;
        // InfoText
        const upperTextKey = textMap[textType].upperText;
        // InfoSound
        const upperSound = textMap[textType].upperSound;
        // InfoSoundVolume
        const upperSoundVolume = textMap[textType].upperSoundVolume;
        let textObj = triggerHelper.triggerOptions[upperTextKey];
        if (!textObj && triggerHelper.trigger[lowerTextKey])
            textObj = triggerHelper.trigger[lowerTextKey];
        if (!textObj && triggerHelper.response)
            textObj = triggerHelper.response[lowerTextKey];
        if (textObj) {
            let text = triggerHelper.valueOrFunction(textObj);
            if (!text)
                return;
            if (typeof text === 'number')
                text = text.toString();
            if (typeof text !== 'string')
                text = String(text);
            triggerHelper.defaultTTSText = (_a = triggerHelper.defaultTTSText) !== null && _a !== void 0 ? _a : text;
            if (text && typeof text === 'string' && triggerHelper.textAlertsEnabled) {
                // per-trigger option > trigger field > option duration by text type
                let duration = (_c = (_b = triggerHelper.duration) === null || _b === void 0 ? void 0 : _b.fromConfig) !== null && _c !== void 0 ? _c : (_d = triggerHelper.duration) === null || _d === void 0 ? void 0 : _d.fromTrigger;
                if (duration === undefined && triggerHelper.duration)
                    duration = triggerHelper.duration[lowerTextKey];
                if (duration === undefined)
                    duration = 0;
                this._createTextFor(triggerHelper, text, textType, lowerTextKey, duration);
                if (!triggerHelper.soundUrl) {
                    triggerHelper.soundUrl = this.options[upperSound];
                    triggerHelper.soundVol = this.options[upperSoundVolume];
                }
            }
        }
    }
    _makeTextElement(_triggerHelper, text, className) {
        const div = document.createElement('div');
        div.classList.add(className);
        div.classList.add('animate-text');
        div.innerText = text;
        return div;
    }
    _playAudioFile(triggerHelper, url, volume) {
        const audio = new Audio(url);
        audio.volume = volume !== null && volume !== void 0 ? volume : 1;
        void audio.play();
    }
    getDataObject() {
        let preserveHP = 0;
        if (this.data && this.data.currentHP)
            preserveHP = this.data.currentHP;
        // TODO: make a breaking change at some point and
        // make all this style consistent, sorry.
        return {
            me: this.me,
            job: this.job,
            role: this.role,
            party: this.partyTracker,
            lang: this.parserLang,
            parserLang: this.parserLang,
            displayLang: this.displayLang,
            currentHP: preserveHP,
            options: this.options,
            ShortName: this.ShortNamify.bind(this),
            StopCombat: () => this.SetInCombat(false),
            ParseLocaleFloat: parseFloat,
            CanStun: () => util/* default.canStun */.Z.canStun(this.job),
            CanSilence: () => util/* default.canSilence */.Z.canSilence(this.job),
            CanSleep: () => util/* default.canSleep */.Z.canSleep(this.job),
            CanCleanse: () => util/* default.canCleanse */.Z.canCleanse(this.job),
            CanFeint: () => util/* default.canFeint */.Z.canFeint(this.job),
            CanAddle: () => util/* default.canAddle */.Z.canAddle(this.job),
        };
    }
}
class PopupTextGenerator {
    constructor(popupText) {
        this.popupText = popupText;
    }
    Info(text, currentTime) {
        this.popupText.OnTrigger({
            infoText: text,
            tts: text,
        }, null, currentTime);
    }
    Alert(text, currentTime) {
        this.popupText.OnTrigger({
            alertText: text,
            tts: text,
        }, null, currentTime);
    }
    Alarm(text, currentTime) {
        this.popupText.OnTrigger({
            alarmText: text,
            tts: text,
        }, null, currentTime);
    }
    TTS(text, currentTime) {
        this.popupText.OnTrigger({
            infoText: text,
            tts: text,
        }, null, currentTime);
    }
    Trigger(trigger, matches, currentTime) {
        this.popupText.OnTrigger(trigger, matches, currentTime);
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/ui/ProgressBar.js


class ProgressBar {
  constructor(emulator) {
    this.$progressBarTooltip = new Tooltip('.encounterProgressBar', 'bottom', '', false);
    this.$progressBarCurrent = document.querySelector('.current-timestamp');
    this.$progressBarDuration = document.querySelector('.duration-timestamp');
    this.$progress = document.querySelector('.encounterProgressBar');
    this.$progressBar = document.querySelector('.encounterProgressBar .progress-bar');
    this.$engageIndicator = document.querySelector('.progressBarRow .engageIndicator');
    new Tooltip(this.$engageIndicator, 'bottom', 'Fight Begins');
    this.emulator = emulator;
    this.$progress.addEventListener('mousemove', e => {
      if (this.emulator.currentEncounter) {
        const percent = e.offsetX / e.currentTarget.offsetWidth;
        const time = Math.floor(this.emulator.currentEncounter.encounter.duration * percent) - this.emulator.currentEncounter.encounter.initialOffset;
        this.$progressBarTooltip.offset.x = e.offsetX - e.currentTarget.offsetWidth / 2;
        this.$progressBarTooltip.setText(EmulatorCommon_EmulatorCommon.timeToString(time));
        this.$progressBarTooltip.show();
      }
    });
    this.$progress.addEventListener('click', e => {
      if (this.emulator.currentEncounter) {
        const percent = e.offsetX / e.currentTarget.offsetWidth;
        const time = Math.floor(this.emulator.currentEncounter.encounter.duration * percent);
        this.emulator.seek(time);
      }
    });
    emulator.on('currentEncounterChanged', encounter => {
      this.$progressBarCurrent.textContent = EmulatorCommon_EmulatorCommon.timeToString(0, false);
      this.$progressBarDuration.textContent = EmulatorCommon_EmulatorCommon.timeToString(encounter.encounter.duration - encounter.encounter.initialOffset, false);
      this.$progressBar.style.width = '0%';
      this.$progressBar.setAttribute('ariaValueMax', encounter.encounter.duration);

      if (isNaN(encounter.encounter.initialOffset)) {
        this.$engageIndicator.classList.add('d-none');
      } else {
        const initialPercent = encounter.encounter.initialOffset / emulator.currentEncounter.encounter.duration * 100;
        this.$engageIndicator.classList.remove('d-none');
        this.$engageIndicator.style.left = initialPercent + '%';
      }
    });
    emulator.on('tick', currentLogTime => {
      const currentOffset = currentLogTime - emulator.currentEncounter.encounter.startTimestamp;
      const progPercent = currentOffset / emulator.currentEncounter.encounter.duration * 100;
      const progValue = currentLogTime - emulator.currentEncounter.encounter.initialTimestamp;
      this.$progressBarCurrent.textContent = EmulatorCommon_EmulatorCommon.timeToString(progValue, false);
      this.$progressBar.setAttribute('ariaValueNow', progValue);
      this.$progressBar.style.width = progPercent + '%';
    });
    const $play = document.querySelector('.progressBarRow button.play');
    const $pause = document.querySelector('.progressBarRow button.pause');
    $play.addEventListener('click', () => {
      if (this.emulator.play()) {
        $play.classList.add('d-none');
        $pause.classList.remove('d-none');
      }
    });
    $pause.addEventListener('click', () => {
      if (this.emulator.pause()) {
        $pause.classList.add('d-none');
        $play.classList.remove('d-none');
      }
    });
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/common_replacement.ts
// TODO: maybe this should be structured identically to a timelineReplace section.
// It's awkward to refer to these string keys, so name them as replaceSync[keys.sealKey].
const syncKeys = {
    // Match Regexes, NetRegexes, and timeline constructions of seal log lines.
    seal: '(?<=00:0839:|00\\|[^|]*\\|0839\\|\\|)(.*) will be sealed off(?: in (?:[0-9]+ seconds)?)?',
    unseal: 'is no longer sealed',
    engage: 'Engage!',
};
const textKeys = {
    // Match directions in replaceText
    // eg: `(N)`, `(SW)`, `(NE/NW)`, etc.
    E: '(?<= \\(|\\/)E(?=\\)|\\/)',
    N: '(?<= \\(|\\/)N(?=\\)|\\/)',
    S: '(?<= \\(|\\/)S(?=\\)|\\/)',
    W: '(?<= \\(|\\/)W(?=\\)|\\/)',
    NE: '(?<= \\(|\\/)NE(?=\\)|\\/)',
    NW: '(?<= \\(|\\/)NW(?=\\)|\\/)',
    SE: '(?<= \\(|\\/)SE(?=\\)|\\/)',
    SW: '(?<= \\(|\\/)SW(?=\\)|\\/)',
    // Match Roles in replaceText
    // eg: `(Tank)`, `(Healer)`, `(DPS)`, etc
    Tank: '(?<= \\(|\\/)Tanks?(?=\\)|\\/)',
    Healer: '(?<= \\(|\\/)Healers?(?=\\)|\\/)',
    DPS: '(?<= \\(|\\/)DPS(?=\\)|\\/)',
    // Match `--1--` style text.
    Number: '--(\\s*\\d+\\s*)--',
};
const commonReplacement = {
    replaceSync: {
        [syncKeys.seal]: {
            en: '$1 will be sealed off',
            de: 'Noch 15 Sekunden, bis sich (?:(?:der|die|das) )?(?:Zugang zu(?:[rm]| den)? )?$1 schließt',
            fr: 'Fermeture d(?:e|u|es) $1 dans',
            ja: '$1の封鎖まであと',
            cn: '距$1被封锁还有',
            ko: '15초 후에 $1(?:이|가) 봉쇄됩니다',
        },
        [syncKeys.unseal]: {
            en: 'is no longer sealed',
            de: 'öffnet sich (?:wieder|erneut)',
            fr: 'Ouverture ',
            ja: 'の封鎖が解かれた',
            cn: '的封锁解除了',
            ko: '의 봉쇄가 해제되었습니다',
        },
        [syncKeys.engage]: {
            en: 'Engage!',
            de: 'Start!',
            fr: 'À l\'attaque',
            ja: '戦闘開始！',
            cn: '战斗开始！',
            ko: '전투 시작!',
        },
    },
    replaceText: {
        '--adds spawn--': {
            de: '--Adds erscheinen--',
            fr: '--Apparition d\'adds--',
            ja: '--雑魚出現--',
            cn: '--小怪出现--',
            ko: '--쫄 소환--',
        },
        '--adds targetable--': {
            de: '--Adds anvisierbar--',
            fr: '--Adds ciblables--',
            ja: '--雑魚ターゲット可能--',
            cn: '--小怪可选中--',
            ko: '--쫄 타겟 가능--',
        },
        '--center--': {
            de: '--Mitte--',
            fr: '--Centre--',
            ja: '--センター--',
            cn: '--中央--',
            ko: '--중앙--',
        },
        '\\(center\\)': {
            de: '(Mitte)',
            fr: '(Centre)',
            ja: '(センター)',
            cn: '(中央)',
            ko: '(중앙)',
        },
        '--clones appear--': {
            de: '--Klone erscheinen--',
            fr: '--Apparition des clones--',
            ja: '--幻影出現--',
            cn: '--克隆 体 出现--',
            ko: '--분신 소환--',
        },
        '--corner--': {
            de: '--Ecke--',
            fr: '--Coin--',
            ja: '--コーナー--',
            cn: '--角落--',
            ko: '--구석--',
        },
        '--dps burn--': {
            de: '--DPS burn--',
            fr: '--Burn dps--',
            ja: '--火力出せ--',
            cn: '--转火--',
            ko: '--딜 체크--',
        },
        '--east--': {
            de: '--Osten--',
            fr: '--Est--',
            ja: '--東--',
            cn: '--东--',
            ko: '--동쪽--',
        },
        '\\(east\\)': {
            de: '(Osten)',
            fr: '(Est)',
            ja: '(東)',
            cn: '(东)',
            ko: '(동쪽)',
        },
        'Enrage': {
            de: 'Finalangriff',
            fr: 'Enrage',
            ja: '時間切れ',
            cn: '狂暴',
            ko: '전멸기',
        },
        '--frozen--': {
            de: '--eingefroren--',
            fr: '--Gelé--',
            ja: '--凍結--',
            cn: '--冻结--',
            ko: '--동결--',
        },
        '--in--': {
            de: '--Rein--',
            fr: '--Intérieur--',
            ja: '--中--',
            cn: '--内--',
            ko: '--안--',
        },
        '\\(In\\)': {
            de: '(Rein)',
            fr: '(Intérieur)',
            ja: '(中)',
            cn: '(内)',
            ko: '(안)',
        },
        '\\(inner\\)': {
            de: '(innen)',
            fr: '(intérieur)',
            ja: '(中)',
            cn: '(内)',
            ko: '(안)',
        },
        '--jump--': {
            de: '--Sprung--',
            fr: '--Saut--',
            ja: '--ジャンプ--',
            cn: '--跳--',
            ko: '--점프--',
        },
        '--knockback--': {
            de: '--Rückstoß--',
            fr: '--Poussée--',
            ja: '--ノックバック--',
            cn: '--击退--',
            ko: '--넉백--',
        },
        '--middle--': {
            de: '--Mitte--',
            fr: '--Milieu--',
            ja: '--中央--',
            cn: '--中间--',
            ko: '--중앙--',
        },
        '\\(middle\\)': {
            de: '(Mitte)',
            fr: '(Milieu)',
            ja: '(中央)',
            cn: '(中间)',
            ko: '(중앙)',
        },
        '--north--': {
            de: '--Norden--',
            fr: '--Nord--',
            ja: '--北--',
            cn: '--北--',
            ko: '--북쪽--',
        },
        '\\(north\\)': {
            de: '(Norden)',
            fr: '(Nord)',
            ja: '(北)',
            cn: '(北)',
            ko: '(북쪽)',
        },
        '--northeast--': {
            de: '--Nordosten--',
            fr: '--Nord-Est--',
            ja: '--北東--',
            cn: '--东北--',
            ko: '--북동--',
        },
        '--northwest--': {
            de: '--Nordwesten--',
            fr: '--Nord-Ouest--',
            ja: '--北西--',
            cn: '--西北--',
            ko: '--북서--',
        },
        '--out--': {
            de: '--Raus--',
            fr: '--Extérieur--',
            ja: '--外--',
            cn: '--外--',
            ko: '--밖--',
        },
        '\\(Out\\)': {
            de: '(Raus)',
            fr: '(Extérieur)',
            ja: '(外)',
            cn: '(外)',
            ko: '(밖)',
        },
        '\\(outer\\)': {
            de: '(außen)',
            fr: '(extérieur)',
            ja: '(外)',
            cn: '(外)',
            ko: '(밖)',
        },
        '\\(outside\\)': {
            de: '(Draußen)',
            fr: '(À l\'extérieur)',
            ja: '(外)',
            cn: '(外面)',
            ko: '(바깥)',
        },
        '--rotate--': {
            de: '--rotieren--',
            fr: '--rotation--',
            ja: '--回転--',
            cn: '--龙回转--',
            ko: '--회전--',
        },
        '--south--': {
            de: '--Süden--',
            fr: '--Sud--',
            ja: '--南--',
            cn: '--南--',
            ko: '--남쪽--',
        },
        '\\(south\\)': {
            de: '(Süden)',
            fr: '(Sud)',
            ja: '(南)',
            cn: '(南)',
            ko: '(남쪽)',
        },
        '--southeast--': {
            de: '--Südosten--',
            fr: '--Sud-Est--',
            ja: '--南東--',
            cn: '--东南--',
            ko: '--남동--',
        },
        '--southwest--': {
            de: '--Südwesten--',
            fr: '--Sud-Ouest--',
            ja: '--南西--',
            cn: '--西南--',
            ko: '--남서--',
        },
        '--split--': {
            de: '--teilen--',
            fr: '--division--',
            ja: '--分裂--',
            cn: '--分裂--',
            ko: '--분열--',
        },
        '--stun--': {
            de: '--Betäubung--',
            fr: '--Étourdissement--',
            ja: '--スタン--',
            cn: '--击晕--',
            ko: '--기절--',
        },
        '--sync--': {
            de: '--synchronisation--',
            fr: '--synchronisation--',
            ja: '--シンク--',
            cn: '--同步化--',
            ko: '--동기화--',
        },
        '--([0-9]+x )?targetable--': {
            de: '--$1anvisierbar--',
            fr: '--$1ciblable--',
            ja: '--$1ターゲット可能--',
            cn: '--$1可选中--',
            ko: '--$1타겟 가능--',
        },
        '--teleport--': {
            de: '--teleportation--',
            fr: '--téléportation--',
            ja: '--テレポート--',
            cn: '--傳送--',
            ko: '--순간 이동--',
        },
        '--untargetable--': {
            de: '--nich anvisierbar--',
            fr: '--non ciblable--',
            ja: '--ターゲット不可--',
            cn: '--无法选中--',
            ko: '--타겟 불가능--',
        },
        '--west--': {
            de: '--Westen--',
            fr: '--Ouest--',
            ja: '--西--',
            cn: '--西--',
            ko: '--서쪽--',
        },
        [textKeys.E]: {
            de: 'O',
            fr: 'E',
            ja: '東',
            cn: '东',
            ko: '동',
        },
        [textKeys.N]: {
            de: 'N',
            fr: 'N',
            ja: '北',
            cn: '北',
            ko: '북',
        },
        [textKeys.S]: {
            de: 'S',
            fr: 'S',
            ja: '南',
            cn: '南',
            ko: '남',
        },
        [textKeys.W]: {
            de: 'W',
            fr: 'O',
            ja: '西',
            cn: '西',
            ko: '서',
        },
        [textKeys.NE]: {
            de: 'NO',
            fr: 'NE',
            ja: '北東',
            cn: '东北',
            ko: '북동',
        },
        [textKeys.NW]: {
            de: 'NW',
            fr: 'NO',
            ja: '北西',
            cn: '西北',
            ko: '북서',
        },
        [textKeys.SE]: {
            de: 'SO',
            fr: 'SE',
            ja: '南東',
            cn: '东南',
            ko: '남동',
        },
        [textKeys.SW]: {
            de: 'SW',
            fr: 'SO',
            ja: '南西',
            cn: '西南',
            ko: '남서',
        },
        [textKeys.Tank]: {
            de: 'Tank',
            fr: 'Tank',
            ja: 'タンク',
            cn: '坦克',
            ko: '탱커',
        },
        [textKeys.Healer]: {
            de: 'Heiler',
            fr: 'Healer',
            ja: 'ヒーラー',
            cn: '治疗',
            ko: '힐러',
        },
        [textKeys.DPS]: {
            de: 'DPS',
            fr: 'DPS',
            ja: 'DPS',
            cn: 'DPS',
            ko: '딜러',
        },
        [textKeys.Number]: {
            de: '--$1--',
            fr: '--$1--',
            ja: '--$1--',
            cn: '--$1--',
            ko: '--$1--',
        },
    },
};
// Keys into commonReplacement objects that represent "partial" translations,
// in the sense that even if it applies, there still needs to be another
// translation for it to be complete.  These keys should be exactly the same
// as the keys from the commonReplacement block above.
const partialCommonReplacementKeys = [
    // Because the zone name needs to be translated here, this is partial.
    syncKeys.seal,
    // Directions
    textKeys.E,
    textKeys.N,
    textKeys.S,
    textKeys.W,
    textKeys.NE,
    textKeys.NW,
    textKeys.SE,
    textKeys.SW,
    // Roles
    textKeys.Tank,
    textKeys.Healer,
    textKeys.DPS,
];

;// CONCATENATED MODULE: ./ui/raidboss/timeline.ts




const kBig = 1000000000; // Something bigger than any fight length in seconds.
const timelineInstructions = {
    en: [
        'These lines are',
        'debug timeline entries.',
        'If you lock the overlay,',
        'they will disappear!',
        'Real timelines automatically',
        'appear when supported.',
    ],
    de: [
        'Diese Zeilen sind',
        'Timeline Debug-Einträge.',
        'Wenn du das Overlay sperrst,',
        'werden sie verschwinden!',
        'Echte Timelines erscheinen automatisch,',
        'wenn sie unterstützt werden.',
    ],
    fr: [
        'Ces lignes sont',
        'des timelines de test.',
        'Si vous bloquez l\'overlay,',
        'elles disparaîtront !',
        'Les vraies Timelines',
        'apparaîtront automatiquement.',
    ],
    ja: [
        'こちらはデバッグ用の',
        'タイムラインです。',
        'オーバーレイをロックすれば、',
        'デバッグ用テキストも消える',
        'サポートするゾーンにはタイム',
        'ラインを動的にロードする。',
    ],
    cn: [
        '显示在此处的是',
        '调试用时间轴。',
        '将此悬浮窗锁定',
        '则会立刻消失',
        '真实的时间轴会根据',
        '当前区域动态加载并显示',
    ],
    ko: [
        '이 막대바는 디버그용',
        '타임라인 입니다.',
        '오버레이를 위치잠금하면,',
        '이 막대바도 사라집니다.',
        '지원되는 구역에서 타임라인이',
        '자동으로 표시됩니다.',
    ],
};
const activeText = {
    en: 'Active:',
    de: 'Aktiv:',
    fr: 'Active :',
    ja: '(進行):',
    cn: '(进行中):',
    ko: '시전중:',
};
// TODO: Duplicated in 'jobs'
const computeBackgroundColorFrom = (element, classList) => {
    const div = document.createElement('div');
    const classes = classList.split('.');
    for (const cls of classes)
        div.classList.add(cls);
    element.appendChild(div);
    const color = window.getComputedStyle(div).backgroundColor;
    element.removeChild(div);
    return color;
};
// This class reads the format of ACT Timeline plugin, described in
// docs/TimelineGuide.md
class Timeline {
    constructor(text, replacements, triggers, styles, options) {
        this.timebase = 0;
        this.nextEvent = 0;
        this.nextText = 0;
        this.nextSyncStart = 0;
        this.nextSyncEnd = 0;
        this.addTimerCallback = null;
        this.removeTimerCallback = null;
        this.showInfoTextCallback = null;
        this.showAlertTextCallback = null;
        this.showAlarmTextCallback = null;
        this.speakTTSCallback = null;
        this.triggerCallback = null;
        this.syncTimeCallback = null;
        this.updateTimer = 0;
        this.options = options || {};
        this.perTriggerAutoConfig = this.options['PerTriggerAutoConfig'] || {};
        this.replacements = replacements;
        const lang = this.options.TimelineLanguage || this.options.ParserLanguage || 'en';
        this.activeText = lang in activeText ? activeText[lang] : activeText['en'];
        // A set of names which will not be notified about.
        this.ignores = {};
        // Sorted by event occurrence time.
        this.events = [];
        // Sorted by event occurrence time.
        this.texts = [];
        // Sorted by sync.start time.
        this.syncStarts = [];
        // Sorted by sync.end time.
        this.syncEnds = [];
        // Not sorted.
        this.activeSyncs = [];
        // Sorted by event occurrence time.
        this.activeEvents = [];
        // Sorted by line.
        this.errors = [];
        this.LoadFile(text, triggers, styles);
        this.Stop();
    }
    GetReplacedHelper(text, replaceKey, replaceLang, isGlobal) {
        if (!this.replacements)
            return text;
        for (const r of this.replacements) {
            if (r.locale && r.locale !== replaceLang)
                continue;
            const reps = r[replaceKey];
            if (!reps)
                continue;
            for (const [key, value] of Object.entries(reps))
                text = text.replace(resources_regexes/* default.parse */.Z.parse(key), value);
        }
        // Common Replacements
        const replacement = commonReplacement[replaceKey];
        if (!replacement)
            return text;
        for (const [key, value] of Object.entries(replacement)) {
            const repl = value[replaceLang];
            if (!repl)
                continue;
            const regex = isGlobal ? resources_regexes/* default.parseGlobal */.Z.parseGlobal(key) : resources_regexes/* default.parse */.Z.parse(key);
            text = text.replace(regex, repl);
        }
        return text;
    }
    GetReplacedText(text) {
        if (!this.replacements)
            return text;
        const replaceLang = this.options.TimelineLanguage || this.options.ParserLanguage || 'en';
        const isGlobal = false;
        return this.GetReplacedHelper(text, 'replaceText', replaceLang, isGlobal);
    }
    GetReplacedSync(sync) {
        if (!this.replacements)
            return sync;
        const replaceLang = this.options.ParserLanguage || 'en';
        const isGlobal = true;
        return this.GetReplacedHelper(sync, 'replaceSync', replaceLang, isGlobal);
    }
    GetMissingTranslationsToIgnore() {
        return [
            '--Reset--',
            '--sync--',
            'Start',
            '^ ?21:',
            '^(\\(\\?\\<timestamp\\>\\^\\.\\{14\\}\\)) (1B|21|23):',
            '^(\\^\\.\\{14\\})? ?(1B|21|23):',
            '^::\\y{AbilityCode}:$',
            '^\\.\\*$',
        ].map((x) => resources_regexes/* default.parse */.Z.parse(x));
    }
    LoadFile(text, triggers, styles) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.events = [];
        this.syncStarts = [];
        this.syncEnds = [];
        let uniqueid = 1;
        const texts = {};
        const regexes = {
            comment: /^\s*#/,
            commentLine: /#.*$/,
            durationCommand: /(?:[^#]*?\s)?(?<text>duration\s+(?<seconds>[0-9]+(?:\.[0-9]+)?))(\s.*)?$/,
            ignore: /^hideall\s+\"(?<id>[^"]+)\"$/,
            jumpCommand: /(?:[^#]*?\s)?(?<text>jump\s+(?<seconds>[0-9]+(?:\.[0-9]+)?))(?:\s.*)?$/,
            line: /^(?<text>(?<time>[0-9]+(?:\.[0-9]+)?)\s+"(?<name>.*?)")(\s+(.*))?/,
            popupText: /^(?<type>info|alert|alarm)text\s+\"(?<id>[^"]+)\"\s+before\s+(?<beforeSeconds>-?[0-9]+(?:\.[0-9]+)?)(?:\s+\"(?<text>[^"]+)\")?$/,
            soundAlert: /^define\s+soundalert\s+"[^"]*"\s+"[^"]*"$/,
            speaker: /define speaker "[^"]*"(\s+"[^"]*")?\s+(-?[0-9]+(?:\.[0-9]+)?)\s+(-?[0-9]+(?:\.[0-9]+)?)/,
            syncCommand: /(?:[^#]*?\s)?(?<text>sync\s*\/(?<regex>.*)\/)(?<args>\s.*)?$/,
            tts: /^alertall\s+"(?<id>[^"]*)"\s+before\s+(?<beforeSeconds>-?[0-9]+(?:\.[0-9]+)?)\s+(?<command>sound|speak\s+"[^"]*")\s+"(?<text>[^"]*)"$/,
            windowCommand: /(?:[^#]*?\s)?(?<text>window\s+(?:(?<start>[0-9]+(?:\.[0-9]+)?),)?(?<end>[0-9]+(?:\.[0-9]+)?))(?:\s.*)?$/,
        };
        // Make all regexes case insensitive, and parse any special \y{} groups.
        for (const trigger of triggers !== null && triggers !== void 0 ? triggers : []) {
            if (trigger.regex)
                trigger.regex = resources_regexes/* default.parse */.Z.parse(trigger.regex);
        }
        const lines = text.split('\n');
        let lineNumber = 0;
        for (let line of lines) {
            ++lineNumber;
            line = line.trim();
            // Drop comments and empty lines.
            if (!line || regexes.comment.test(line))
                continue;
            const originalLine = line;
            let match = regexes.ignore.exec(line);
            if (match && match['groups']) {
                const ignore = match['groups'];
                if (ignore.id)
                    this.ignores[ignore.id] = true;
                continue;
            }
            match = regexes.tts.exec(line);
            if (match && match['groups']) {
                const tts = match['groups'];
                if (!tts.id || !tts.beforeSeconds || !tts.command)
                    throw new not_reached/* UnreachableCode */.$();
                // TODO: Support alert sounds?
                if (tts.command === 'sound')
                    continue;
                const ttsItems = texts[tts.id] || [];
                texts[tts.id] = ttsItems;
                ttsItems.push({
                    type: 'tts',
                    secondsBefore: parseFloat(tts.beforeSeconds),
                    text: tts.text ? tts.text : tts.id,
                });
                continue;
            }
            match = regexes.soundAlert.exec(line);
            if (match)
                continue;
            match = regexes.speaker.exec(line);
            if (match)
                continue;
            match = regexes.popupText.exec(line);
            if (match && match['groups']) {
                const popupText = match['groups'];
                if (!popupText.type || !popupText.id || !popupText.beforeSeconds)
                    throw new not_reached/* UnreachableCode */.$();
                const popupTextItems = texts[popupText.id] || [];
                texts[popupText.id] = popupTextItems;
                const type = popupText.type;
                if (type !== 'info' && type !== 'alert' && type !== 'alarm')
                    continue;
                popupTextItems.push({
                    type: type,
                    secondsBefore: parseFloat(popupText.beforeSeconds),
                    text: popupText.text ? popupText.text : popupText.id,
                });
                continue;
            }
            match = regexes.line.exec(line);
            if (!(match && match['groups'])) {
                this.errors.push({
                    lineNumber: lineNumber,
                    line: originalLine,
                    error: 'Invalid format',
                });
                console.log('Unknown timeline: ' + originalLine);
                continue;
            }
            const parsedLine = match['groups'];
            // Technically the name can be empty
            if (!parsedLine.text || !parsedLine.time || parsedLine.name === undefined)
                throw new not_reached/* UnreachableCode */.$();
            line = line.replace(parsedLine.text, '').trim();
            // There can be # in the ability name, but probably not in the regex.
            line = line.replace(regexes.commentLine, '').trim();
            const seconds = parseFloat(parsedLine.time);
            const e = {
                id: uniqueid++,
                time: seconds,
                // The original ability name in the timeline.  Used for hideall, infotext, etc.
                name: parsedLine.name,
                // The text to display.  Not used for any logic.
                text: this.GetReplacedText(parsedLine.name),
                activeTime: 0,
                lineNumber: lineNumber,
            };
            if (line) {
                let commandMatch = regexes.durationCommand.exec(line);
                if (commandMatch && commandMatch['groups']) {
                    const durationCommand = commandMatch['groups'];
                    if (!durationCommand.text || !durationCommand.seconds)
                        throw new not_reached/* UnreachableCode */.$();
                    line = line.replace(durationCommand.text, '').trim();
                    e.duration = parseFloat(durationCommand.seconds);
                }
                commandMatch = regexes.syncCommand.exec(line);
                if (commandMatch && commandMatch['groups']) {
                    const syncCommand = commandMatch['groups'];
                    if (!syncCommand.text || !syncCommand.regex)
                        throw new not_reached/* UnreachableCode */.$();
                    line = line.replace(syncCommand.text, '').trim();
                    const sync = {
                        id: uniqueid,
                        origRegexStr: syncCommand.regex,
                        regex: resources_regexes/* default.parse */.Z.parse(this.GetReplacedSync(syncCommand.regex)),
                        start: seconds - 2.5,
                        end: seconds + 2.5,
                        time: seconds,
                        lineNumber: lineNumber,
                    };
                    if (syncCommand.args) {
                        let argMatch = regexes.windowCommand.exec(syncCommand.args);
                        if (argMatch && argMatch['groups']) {
                            const windowCommand = argMatch['groups'];
                            if (!windowCommand.text || !windowCommand.end)
                                throw new not_reached/* UnreachableCode */.$();
                            line = line.replace(windowCommand.text, '').trim();
                            if (windowCommand.start) {
                                sync.start = seconds - parseFloat(windowCommand.start);
                                sync.end = seconds + parseFloat(windowCommand.end);
                            }
                            else {
                                sync.start = seconds - (parseFloat(windowCommand.end) / 2);
                                sync.end = seconds + (parseFloat(windowCommand.end) / 2);
                            }
                        }
                        argMatch = regexes.jumpCommand.exec(syncCommand.args);
                        if (argMatch && argMatch['groups']) {
                            const jumpCommand = argMatch['groups'];
                            if (!jumpCommand.text || !jumpCommand.seconds)
                                throw new not_reached/* UnreachableCode */.$();
                            line = line.replace(jumpCommand.text, '').trim();
                            sync.jump = parseFloat(jumpCommand.seconds);
                        }
                    }
                    this.syncStarts.push(sync);
                    this.syncEnds.push(sync);
                }
            }
            // If there's text left that isn't a comment then we didn't parse that text so report it.
            if (line && !regexes.comment.exec(line)) {
                console.log(`Unknown content '${line}' in timeline: ${originalLine}`);
                this.errors.push({
                    lineNumber: lineNumber,
                    line: originalLine,
                    error: 'Extra text',
                });
            }
            else {
                this.events.push(e);
            }
        }
        // Validate that all timeline triggers match something.
        for (const trigger of triggers !== null && triggers !== void 0 ? triggers : []) {
            let found = false;
            for (const event of this.events) {
                if (trigger.regex && trigger.regex.test(event.name)) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                const text = `No match for timeline trigger ${(_b = (_a = trigger.regex) === null || _a === void 0 ? void 0 : _a.source) !== null && _b !== void 0 ? _b : ''} in ${(_c = trigger.id) !== null && _c !== void 0 ? _c : ''}`;
                this.errors.push({ error: text });
                console.error(`*** ERROR: ${text}`);
            }
        }
        for (const e of this.events) {
            for (const matchedTextEvent of (_d = texts[e.name]) !== null && _d !== void 0 ? _d : []) {
                const type = matchedTextEvent.type;
                if (type !== 'info' && type !== 'alert' && type !== 'alarm')
                    continue;
                this.texts.push({
                    type: type,
                    time: e.time - (matchedTextEvent.secondsBefore || 0),
                    text: (_e = matchedTextEvent.text) !== null && _e !== void 0 ? _e : '',
                });
            }
            // Rather than matching triggers at run time, pre-match all the triggers
            // against timeline text and insert them as text events to run.
            for (const trigger of triggers !== null && triggers !== void 0 ? triggers : []) {
                const m = (_f = trigger.regex) === null || _f === void 0 ? void 0 : _f.exec(e.name);
                if (!m)
                    continue;
                // TODO: beforeSeconds should support being a function.
                const autoConfig = trigger.id && this.perTriggerAutoConfig[trigger.id] || {};
                const beforeSeconds = (_g = autoConfig['BeforeSeconds']) !== null && _g !== void 0 ? _g : trigger.beforeSeconds;
                this.texts.push({
                    type: 'trigger',
                    time: e.time - (beforeSeconds || 0),
                    trigger: trigger,
                    matches: m,
                });
            }
            for (const style of styles !== null && styles !== void 0 ? styles : []) {
                if (!style.regex.test(e.name))
                    continue;
                e.style = style.style;
            }
        }
        // Sort by time, but when the time is the same, sort by file order.
        // Then assign a sortKey to each event so that we can maintain that order.
        this.events.sort((a, b) => {
            if (a.time === b.time)
                return a.id - b.id;
            return a.time - b.time;
        });
        this.events.forEach((event, idx) => event.sortKey = idx);
        this.texts.sort((a, b) => {
            return a.time - b.time;
        });
        this.syncStarts.sort((a, b) => {
            return a.start - b.start;
        });
        this.syncEnds.sort((a, b) => {
            return a.end - b.end;
        });
    }
    Stop() {
        this.timebase = 0;
        this.nextEvent = 0;
        this.nextText = 0;
        this.nextSyncStart = 0;
        this.nextSyncEnd = 0;
        const fightNow = 0;
        this._AdvanceTimeTo(fightNow);
        this._CollectActiveSyncs(fightNow);
        this._ClearTimers();
        this._CancelUpdate();
        if (this.syncTimeCallback)
            this.syncTimeCallback(fightNow, false);
    }
    SyncTo(fightNow, currentTime) {
        // This records the actual time which aligns with "0" in the timeline.
        const newTimebase = new Date(currentTime - fightNow * 1000).valueOf();
        // Skip syncs that are too close.  Many syncs happen on abilities that
        // hit 8 to 24 people, and so this is a lot of churn.
        if (Math.abs(newTimebase - this.timebase) <= 2)
            return;
        this.timebase = newTimebase;
        this.nextEvent = 0;
        this.nextText = 0;
        this.nextSyncStart = 0;
        this.nextSyncEnd = 0;
        // This will skip text events without running them.
        this._AdvanceTimeTo(fightNow);
        this._CollectActiveSyncs(fightNow);
        // Clear all timers except any synthetic duration events.
        // This is because if the sync goes even a hair into the future, then
        // the duration ending event will get dropped here.
        // FIXME: we could be smarter here and know ahead of time where all the duration
        // events are, so that we could skip ahead into the future where a duration
        // event has started but not expired and have that work properly.
        this._AddDurationTimers(fightNow);
        this._ClearExceptRunningDurationTimers(fightNow);
        this._AddUpcomingTimers(fightNow);
        this._CancelUpdate();
        this._ScheduleUpdate(fightNow);
        if (this.syncTimeCallback)
            this.syncTimeCallback(fightNow, true);
    }
    _CollectActiveSyncs(fightNow) {
        this.activeSyncs = [];
        for (let i = this.nextSyncEnd; i < this.syncEnds.length; ++i) {
            const syncEnd = this.syncEnds[i];
            if (syncEnd && syncEnd.start <= fightNow)
                this.activeSyncs.push(syncEnd);
        }
    }
    OnLogLine(line, currentTime) {
        for (const sync of this.activeSyncs) {
            if (line.search(sync.regex) >= 0) {
                if ('jump' in sync) {
                    if (!sync.jump)
                        this.Stop();
                    else
                        this.SyncTo(sync.jump, currentTime);
                }
                else {
                    this.SyncTo(sync.time, currentTime);
                }
                break;
            }
        }
    }
    _AdvanceTimeTo(fightNow) {
        let event = this.events[this.nextEvent];
        while (this.nextEvent < this.events.length && event && event.time <= fightNow)
            event = this.events[++this.nextEvent];
        let text = this.texts[this.nextText];
        while (this.nextText < this.texts.length && text && text.time <= fightNow)
            text = this.texts[++this.nextText];
        let syncStart = this.syncStarts[this.nextSyncStart];
        while (this.nextSyncStart < this.syncStarts.length && syncStart && syncStart.start <= fightNow)
            syncStart = this.syncStarts[++this.nextSyncStart];
        let syncEnd = this.syncEnds[this.nextSyncEnd];
        while (this.nextSyncEnd < this.syncEnds.length && syncEnd && syncEnd.end <= fightNow)
            syncEnd = this.syncEnds[++this.nextSyncEnd];
    }
    _ClearTimers() {
        if (this.removeTimerCallback) {
            for (const activeEvent of this.activeEvents)
                this.removeTimerCallback(activeEvent, false);
        }
        this.activeEvents = [];
    }
    _ClearExceptRunningDurationTimers(fightNow) {
        const durationEvents = [];
        for (const event of this.activeEvents) {
            if (event.isDur && event.time > fightNow) {
                durationEvents.push(event);
                continue;
            }
            if (this.removeTimerCallback)
                this.removeTimerCallback(event, false, true);
        }
        this.activeEvents = durationEvents;
    }
    _RemoveExpiredTimers(fightNow) {
        let activeEvent = this.activeEvents[0];
        while (this.activeEvents.length && activeEvent && activeEvent.time <= fightNow) {
            if (this.removeTimerCallback)
                this.removeTimerCallback(activeEvent, true);
            this.activeEvents.splice(0, 1);
            activeEvent = this.activeEvents[0];
        }
    }
    _AddDurationTimers(fightNow) {
        const events = [];
        for (let i = 0; i < this.activeEvents.length; ++i) {
            const e = this.activeEvents[i];
            if (e && e.time <= fightNow && e.duration) {
                const durationEvent = {
                    id: e.id,
                    time: e.time + e.duration,
                    sortKey: e.sortKey,
                    name: e.name,
                    text: `${this.activeText} ${e.text}`,
                    isDur: true,
                };
                events.push(durationEvent);
                this.activeEvents.splice(i, 1);
                if (this.addTimerCallback)
                    this.addTimerCallback(fightNow, durationEvent, true);
                --i;
            }
        }
        if (events.length)
            Array.prototype.push.apply(this.activeEvents, events);
        this.activeEvents.sort((a, b) => {
            return a.time - b.time;
        });
    }
    _AddUpcomingTimers(fightNow) {
        while (this.nextEvent < this.events.length &&
            this.activeEvents.length < this.options.MaxNumberOfTimerBars) {
            const e = this.events[this.nextEvent];
            if (!e)
                break;
            if (e.time - fightNow > this.options.ShowTimerBarsAtSeconds)
                break;
            if (fightNow < e.time && !(e.name in this.ignores)) {
                this.activeEvents.push(e);
                if (this.addTimerCallback)
                    this.addTimerCallback(fightNow, e, false);
            }
            ++this.nextEvent;
        }
    }
    _AddPassedTexts(fightNow) {
        while (this.nextText < this.texts.length) {
            const t = this.texts[this.nextText];
            if (!t)
                break;
            if (t.time > fightNow)
                break;
            if (t.type === 'info') {
                if (this.showInfoTextCallback)
                    this.showInfoTextCallback(t.text, this.timebase);
            }
            else if (t.type === 'alert') {
                if (this.showAlertTextCallback)
                    this.showAlertTextCallback(t.text, this.timebase);
            }
            else if (t.type === 'alarm') {
                if (this.showAlarmTextCallback)
                    this.showAlarmTextCallback(t.text, this.timebase);
            }
            else if (t.type === 'tts') {
                if (this.speakTTSCallback)
                    this.speakTTSCallback(t.text, this.timebase);
            }
            else if (t.type === 'trigger') {
                if (this.triggerCallback)
                    this.triggerCallback(t.trigger, t.matches, this.timebase);
            }
            ++this.nextText;
        }
    }
    _CancelUpdate() {
        if (this.updateTimer) {
            window.clearTimeout(this.updateTimer);
            this.updateTimer = 0;
        }
    }
    _ScheduleUpdate(fightNow) {
        console.assert(this.timebase, '_ScheduleUpdate called while stopped');
        let nextEventStarting = kBig;
        let nextTextOccurs = kBig;
        let nextEventEnding = kBig;
        let nextSyncStarting = kBig;
        let nextSyncEnding = kBig;
        if (this.nextEvent < this.events.length) {
            const nextEvent = this.events[this.nextEvent];
            if (nextEvent) {
                const nextEventEndsAt = nextEvent.time;
                console.assert(nextEventStarting > fightNow, 'nextEvent wasn\'t updated before calling _ScheduleUpdate');
                // There might be more events than we can show, so the next event might be in
                // the past. If that happens, then ignore it, as we can't use that for our timer.
                const showNextEventAt = nextEventEndsAt - this.options.ShowTimerBarsAtSeconds;
                if (showNextEventAt > fightNow)
                    nextEventStarting = showNextEventAt;
            }
        }
        if (this.nextText < this.texts.length) {
            const nextText = this.texts[this.nextText];
            if (nextText) {
                nextTextOccurs = nextText.time;
                console.assert(nextTextOccurs > fightNow, 'nextText wasn\'t updated before calling _ScheduleUpdate');
            }
        }
        if (this.activeEvents.length > 0) {
            const activeEvent = this.activeEvents[0];
            if (activeEvent) {
                nextEventEnding = activeEvent.time;
                console.assert(nextEventEnding > fightNow, 'Expired activeEvents weren\'t pruned before calling _ScheduleUpdate');
            }
        }
        if (this.nextSyncStart < this.syncStarts.length) {
            const syncStarts = this.syncStarts[this.nextSyncStart];
            if (syncStarts) {
                nextSyncStarting = syncStarts.start;
                console.assert(nextSyncStarting > fightNow, 'nextSyncStart wasn\'t updated before calling _ScheduleUpdate');
            }
        }
        if (this.nextSyncEnd < this.syncEnds.length) {
            const syncEnds = this.syncEnds[this.nextSyncEnd];
            if (syncEnds) {
                nextSyncEnding = syncEnds.end;
                console.assert(nextSyncEnding > fightNow, 'nextSyncEnd wasn\'t updated before calling _ScheduleUpdate');
            }
        }
        const nextTime = Math.min(nextEventStarting, nextEventEnding, nextTextOccurs, nextSyncStarting, nextSyncEnding);
        if (nextTime !== kBig) {
            console.assert(nextTime > fightNow, 'nextTime is in the past');
            this.updateTimer = window.setTimeout(() => {
                this._OnUpdateTimer(Date.now());
            }, (nextTime - fightNow) * 1000);
        }
    }
    _OnUpdateTimer(currentTime) {
        console.assert(this.timebase, '_OnTimerUpdate called while stopped');
        // This is the number of seconds into the fight (subtracting Dates gives milliseconds).
        const fightNow = (currentTime - this.timebase) / 1000;
        // Send text events now or they'd be skipped by _AdvanceTimeTo().
        this._AddPassedTexts(fightNow);
        this._AdvanceTimeTo(fightNow);
        this._CollectActiveSyncs(fightNow);
        this._AddDurationTimers(fightNow);
        this._RemoveExpiredTimers(fightNow);
        this._AddUpcomingTimers(fightNow);
        this._ScheduleUpdate(fightNow);
    }
    SetAddTimer(c) {
        this.addTimerCallback = c;
    }
    SetRemoveTimer(c) {
        this.removeTimerCallback = c;
    }
    SetShowInfoText(c) {
        this.showInfoTextCallback = c;
    }
    SetShowAlertText(c) {
        this.showAlertTextCallback = c;
    }
    SetShowAlarmText(c) {
        this.showAlarmTextCallback = c;
    }
    SetSpeakTTS(c) {
        this.speakTTSCallback = c;
    }
    SetTrigger(c) {
        this.triggerCallback = c;
    }
    SetSyncTime(c) {
        this.syncTimeCallback = c;
    }
}
class TimelineUI {
    constructor(options) {
        this.options = options;
        this.root = null;
        this.barColor = null;
        this.barExpiresSoonColor = null;
        this.timerlist = null;
        this.activeBars = {};
        this.expireTimers = {};
        this.debugElement = null;
        this.debugFightTimer = null;
        this.timeline = null;
        this.options = options;
        this.init = false;
        this.lang = this.options.TimelineLanguage || this.options.ParserLanguage || 'en';
        this.AddDebugInstructions();
    }
    Init() {
        if (this.init)
            return;
        this.init = true;
        this.root = document.getElementById('timeline-container');
        if (!this.root)
            throw new Error('can\'t find timeline-container');
        this.root.classList.add(`lang-${this.lang}`);
        if (this.options.Skin)
            this.root.classList.add(`skin-${this.options.Skin}`);
        this.barColor = computeBackgroundColorFrom(this.root, 'timeline-bar-color');
        this.barExpiresSoonColor = computeBackgroundColorFrom(this.root, 'timeline-bar-color.soon');
        this.timerlist = document.getElementById('timeline');
        if (this.timerlist)
            this.timerlist.style.gridTemplateRows = `repeat(${this.options.MaxNumberOfTimerBars}, min-content)`;
        this.activeBars = {};
        this.expireTimers = {};
    }
    AddDebugInstructions() {
        var _a;
        const lang = this.lang in timelineInstructions ? this.lang : 'en';
        const instructions = timelineInstructions[lang];
        // Helper for positioning/resizing when locked.
        const helper = document.getElementById('timeline-resize-helper');
        if (!helper)
            return;
        const rows = Math.max(6, this.options.MaxNumberOfTimerBars);
        helper.style.gridTemplateRows = `repeat(${rows}, 1fr)`;
        for (let i = 0; i < this.options.MaxNumberOfTimerBars; ++i) {
            const helperBar = document.createElement('div');
            if (!helperBar)
                continue;
            helperBar.classList.add('text');
            helperBar.classList.add('resize-helper-bar');
            helperBar.classList.add('timeline-bar-color');
            if (i < 1)
                helperBar.classList.add('soon');
            if (i < instructions.length)
                helperBar.innerText = (_a = instructions[i]) !== null && _a !== void 0 ? _a : '';
            else
                helperBar.innerText = `${i + 1}`;
            helper.appendChild(helperBar);
        }
        // For simplicity in code, always make debugElement valid,
        // however it does not exist in the raid emulator.
        this.debugElement = document.getElementById('timeline-debug');
        if (!this.debugElement)
            this.debugElement = document.createElement('div');
    }
    SetPopupTextInterface(popupText) {
        this.popupText = popupText;
    }
    SetTimeline(timeline) {
        this.Init();
        if (this.timeline) {
            this.timeline.SetAddTimer(null);
            this.timeline.SetRemoveTimer(null);
            this.timeline.SetShowInfoText(null);
            this.timeline.SetShowAlertText(null);
            this.timeline.SetShowAlarmText(null);
            this.timeline.SetSpeakTTS(null);
            this.timeline.SetTrigger(null);
            this.timeline.SetSyncTime(null);
            while (this.timerlist && this.timerlist.lastChild)
                this.timerlist.removeChild(this.timerlist.lastChild);
            if (this.debugElement)
                this.debugElement.innerHTML = '';
            this.debugFightTimer = null;
            this.activeBars = {};
        }
        this.timeline = timeline;
        if (this.timeline) {
            this.timeline.SetAddTimer(this.OnAddTimer.bind(this));
            this.timeline.SetRemoveTimer(this.OnRemoveTimer.bind(this));
            this.timeline.SetShowInfoText(this.OnShowInfoText.bind(this));
            this.timeline.SetShowAlertText(this.OnShowAlertText.bind(this));
            this.timeline.SetShowAlarmText(this.OnShowAlarmText.bind(this));
            this.timeline.SetSpeakTTS(this.OnSpeakTTS.bind(this));
            this.timeline.SetTrigger(this.OnTrigger.bind(this));
            this.timeline.SetSyncTime(this.OnSyncTime.bind(this));
        }
    }
    OnAddTimer(fightNow, e, channeling) {
        var _a, _b;
        const div = document.createElement('div');
        const bar = document.createElement('timer-bar');
        div.classList.add('timer-bar');
        div.appendChild(bar);
        bar.duration = `${channeling ? e.time - fightNow : this.options.ShowTimerBarsAtSeconds}`;
        bar.value = `${e.time - fightNow}`;
        bar.righttext = 'remain';
        bar.lefttext = e.text;
        bar.toward = 'right';
        bar.stylefill = !channeling ? 'fill' : 'empty';
        if (e.style)
            bar.applyStyles(e.style);
        if (!channeling && e.time - fightNow > this.options.BarExpiresSoonSeconds) {
            bar.fg = this.barColor;
            window.setTimeout(this.OnTimerExpiresSoon.bind(this, e.id), (e.time - fightNow - this.options.BarExpiresSoonSeconds) * 1000);
        }
        else {
            bar.fg = this.barExpiresSoonColor;
        }
        // Adding a timer with the same id immediately removes the previous.
        const activeBar = this.activeBars[e.id];
        if (activeBar) {
            const div = activeBar.parentNode;
            (_a = div === null || div === void 0 ? void 0 : div.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(div);
        }
        if (e.sortKey)
            div.style.order = e.sortKey.toString();
        div.id = e.id.toString();
        (_b = this.timerlist) === null || _b === void 0 ? void 0 : _b.appendChild(div);
        this.activeBars[e.id] = bar;
        if (e.id in this.expireTimers) {
            window.clearTimeout(this.expireTimers[e.id]);
            delete this.expireTimers[e.id];
        }
    }
    OnTimerExpiresSoon(id) {
        const bar = this.activeBars[id];
        if (bar)
            bar.fg = this.barExpiresSoonColor;
    }
    OnRemoveTimer(e, expired, force = false) {
        if (!force && expired && this.options.KeepExpiredTimerBarsForSeconds) {
            this.expireTimers[e.id] = window.setTimeout(this.OnRemoveTimer.bind(this, e, false), this.options.KeepExpiredTimerBarsForSeconds * 1000);
            return;
        }
        else if (e.id in this.expireTimers) {
            window.clearTimeout(this.expireTimers[e.id]);
            delete this.expireTimers[e.id];
        }
        const bar = this.activeBars[e.id];
        if (!bar)
            return;
        const div = bar.parentNode;
        const element = document.getElementById(e.id.toString());
        if (!element)
            return;
        const removeBar = () => {
            var _a;
            (_a = div === null || div === void 0 ? void 0 : div.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(div);
            delete this.activeBars[e.id];
        };
        if (!force)
            element.classList.add('animate-timer-bar-removed');
        if (window.getComputedStyle(element).animationName !== 'none') {
            // Wait for animation to finish
            element.addEventListener('animationend', removeBar);
        }
        else {
            removeBar();
        }
    }
    OnShowInfoText(text, currentTime) {
        if (this.popupText)
            this.popupText.Info(text, currentTime);
    }
    OnShowAlertText(text, currentTime) {
        if (this.popupText)
            this.popupText.Alert(text, currentTime);
    }
    OnShowAlarmText(text, currentTime) {
        if (this.popupText)
            this.popupText.Alarm(text, currentTime);
    }
    OnSpeakTTS(text, currentTime) {
        if (this.popupText)
            this.popupText.TTS(text, currentTime);
    }
    OnTrigger(trigger, matches, currentTime) {
        if (this.popupText)
            this.popupText.Trigger(trigger, matches, currentTime);
    }
    OnSyncTime(fightNow, running) {
        if (!this.options.Debug || !this.debugElement)
            return;
        if (!running) {
            if (this.debugFightTimer)
                this.debugElement.removeChild(this.debugFightTimer);
            this.debugFightTimer = null;
            return;
        }
        if (!this.debugFightTimer) {
            this.debugFightTimer = document.createElement('timer-bar');
            this.debugFightTimer.width = '100px';
            this.debugFightTimer.height = '17px';
            this.debugFightTimer.duration = `${kBig}`;
            this.debugFightTimer.lefttext = 'elapsed';
            this.debugFightTimer.toward = 'right';
            this.debugFightTimer.stylefill = 'fill';
            this.debugFightTimer.bg = 'transparent';
            this.debugFightTimer.fg = 'transparent';
            this.debugElement.appendChild(this.debugFightTimer);
        }
        // Force this to be reset.
        this.debugFightTimer.elapsed = '0';
        this.debugFightTimer.elapsed = fightNow.toString();
    }
}
class TimelineController {
    constructor(options, ui, raidbossDataFiles) {
        this.options = options;
        this.ui = ui;
        this.activeTimeline = null;
        this.options = options;
        this.ui = ui;
        this.timelines = {};
        for (const [filename, file] of Object.entries(raidbossDataFiles)) {
            if (!filename.endsWith('.txt'))
                continue;
            this.timelines[filename] = file;
        }
        // Used to suppress any Engage! if there's a wipe between /countdown and Engage!.
        this.suppressNextEngage = false;
        this.wipeRegex = resources_regexes/* default.network6d */.Z.network6d({ command: '40000010' });
    }
    SetPopupTextInterface(popupText) {
        this.ui.SetPopupTextInterface(popupText);
    }
    SetInCombat(inCombat) {
        // Wipe lines come before combat is false, but because OnLogEvent doesn't process
        // lines when out of combat, suppress any engages that come before the next countdown
        // just as a safety, especially for old ARR content where wipe lines don't happen.
        if (!inCombat)
            this.suppressNextEngage = true;
        if (!inCombat && this.activeTimeline)
            this.activeTimeline.Stop();
    }
    OnLogEvent(e) {
        if (!this.activeTimeline)
            return;
        const currentTime = Date.now();
        for (const log of e.detail.logs) {
            if (LocaleRegex.countdownStart[this.options.ParserLanguage].test(log)) {
                // As you can't start a countdown while in combat, the next engage is real.
                this.suppressNextEngage = false;
            }
            else if (LocaleRegex.countdownEngage[this.options.ParserLanguage].test(log)) {
                // If we see an engage after a wipe, but before combat has started otherwise
                // (e.g. countdown > wipe > face pull > engage), don't process this engage line
                if (this.suppressNextEngage)
                    continue;
            }
            else if (this.wipeRegex.test(log)) {
                // If we see a wipe, ignore the next engage.  If we see a countdown before that wipe,
                // we will clear this.  Therefore, this will only apply to active countdowns.
                this.suppressNextEngage = true;
            }
            this.activeTimeline.OnLogLine(log, currentTime);
        }
    }
    SetActiveTimeline(timelineFiles, timelines, replacements, triggers, styles) {
        this.activeTimeline = null;
        let text = '';
        // Get the text from each file in |timelineFiles|.
        for (const timelineFile of timelineFiles) {
            const name = this.timelines[timelineFile];
            if (name)
                text = `${text}\n${name}`;
            else
                console.log(`Timeline file not found: ${timelineFile}`);
        }
        // Append text from each block in |timelines|.
        for (const timeline of timelines)
            text = `${text}\n${timeline}`;
        if (text)
            this.activeTimeline = new Timeline(text, replacements, triggers, styles, this.options);
        this.ui.SetTimeline(this.activeTimeline);
    }
    IsReady() {
        return this.timelines !== null;
    }
}
class TimelineLoader {
    constructor(timelineController) {
        this.timelineController = timelineController;
        this.timelineController = timelineController;
    }
    SetTimelines(timelineFiles, timelines, replacements, triggers, styles) {
        this.timelineController.SetActiveTimeline(timelineFiles, timelines, replacements, triggers, styles);
    }
    IsReady() {
        return this.timelineController.IsReady();
    }
    StopCombat() {
        this.timelineController.SetInCombat(false);
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorTimeline.ts

class RaidEmulatorTimeline extends Timeline {
    constructor(text, replacements, triggers, styles, options) {
        super(text, replacements, triggers, styles, options);
        this.emulatedStatus = 'pause';
    }
    bindTo(emulator) {
        this.emulator = emulator;
        emulator.on('play', () => {
            this.emulatedStatus = 'play';
        });
        emulator.on('pause', () => {
            this.emulatedStatus = 'pause';
        });
    }
    emulatedSync(currentLogTime) {
        var _a, _b, _c;
        if (!currentLogTime)
            return;
        // This is a bit complicated due to jumps in timelines. If we've already got a timebase,
        // fightNow needs to be calculated based off of that instead of initialOffset
        // timebase = 0 when not set
        const baseTimestamp = this.timebase || ((_c = (_b = (_a = this.emulator) === null || _a === void 0 ? void 0 : _a.currentEncounter) === null || _b === void 0 ? void 0 : _b.encounter) === null || _c === void 0 ? void 0 : _c.initialTimestamp) ||
            currentLogTime;
        const fightNow = (currentLogTime - baseTimestamp) / 1000;
        this.SyncTo(fightNow, currentLogTime);
        this._OnUpdateTimer(currentLogTime);
    }
    _ScheduleUpdate(_fightNow) {
        // Override
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorTimelineController.ts


class RaidEmulatorTimelineController extends TimelineController {
    constructor() {
        super(...arguments);
        this.activeTimeline = null;
    }
    bindTo(emulator) {
        this.emulator = emulator;
        if (this.activeTimeline)
            this.activeTimeline.bindTo(emulator);
    }
    // Override
    SetActiveTimeline(timelineFiles, timelines, replacements, triggers, styles) {
        this.activeTimeline = null;
        let text = '';
        // Get the text from each file in |timelineFiles|.
        for (const timelineFile of timelineFiles) {
            const name = this.timelines[timelineFile];
            if (name)
                text = `${text}\n${name}`;
            else
                console.log(`Timeline file not found: ${timelineFile}`);
        }
        // Append text from each block in |timelines|.
        for (const timeline of timelines)
            text = `${text}\n${timeline}`;
        if (text) {
            this.activeTimeline =
                new RaidEmulatorTimeline(text, replacements, triggers, styles, this.options);
            if (this.emulator)
                this.activeTimeline.bindTo(this.emulator);
        }
        this.ui.SetTimeline(this.activeTimeline);
    }
    // Override
    OnLogEvent(e) {
        if (!this.activeTimeline)
            return;
        for (const line of e.detail.logs) {
            this.activeTimeline.OnLogLine(line.properCaseConvertedLine || line.convertedLine, line.timestamp);
            // Only call _OnUpdateTimer if we have a timebase from the previous call to OnLogLine
            // This avoids spamming the console with a ton of messages
            if (this.activeTimeline.timebase)
                this.activeTimeline._OnUpdateTimer(line.timestamp);
        }
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/StubbedPopupText.ts

class StubbedPopupText extends PopupText {
    constructor(options, timelineLoader, raidbossFileData) {
        super(options, timelineLoader, raidbossFileData);
    }
    HookOverlays() {
        // Stubbed, we don't want overlay hooks
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/PopupTextAnalysis.ts


class Resolver {
    constructor(status) {
        this.status = status;
    }
    async isResolved(log) {
        if (this.delayUntil) {
            if (this.delayUntil < log.timestamp) {
                delete this.delayUntil;
                if (this.delayResolver)
                    this.delayResolver();
                await this.delayPromise;
            }
            else {
                return false;
            }
        }
        if (this.promise)
            await this.promise;
        if (this.run)
            this.run();
        if (this.final)
            this.final();
        return true;
    }
    setDelay(delayUntil) {
        this.delayUntil = delayUntil;
        return this.delayPromise = new Promise((res) => {
            this.delayResolver = res;
        });
    }
    setPromise(promise) {
        this.promise = promise;
    }
    setRun(run) {
        this.run = run;
    }
    setFinal(final) {
        this.final = final;
    }
    setHelper(triggerHelper) {
        this.triggerHelper = triggerHelper;
    }
}
class PopupTextAnalysis extends StubbedPopupText {
    constructor() {
        super(...arguments);
        this.triggerResolvers = [];
    }
    // Override `OnTrigger` so we can use our own exception handler
    OnTrigger(trigger, matches, currentTime) {
        try {
            this.OnTriggerInternal(trigger, matches, currentTime);
        }
        catch (e) {
            console.log(trigger, e);
        }
    }
    async OnLog(e) {
        var _a, _b;
        for (const logObj of e.detail.logs) {
            const log = (_a = logObj.properCaseConvertedLine) !== null && _a !== void 0 ? _a : logObj.convertedLine;
            if (log.includes('00:0038:cactbot wipe'))
                this.SetInCombat(false);
            for (const trigger of this.triggers) {
                const r = (_b = trigger.localRegex) === null || _b === void 0 ? void 0 : _b.exec(log);
                if (!r)
                    continue;
                const resolver = this.currentResolver = new Resolver({
                    initialData: EmulatorCommon_EmulatorCommon.cloneData(this.data),
                    suppressed: false,
                    executed: false,
                });
                this.triggerResolvers.push(resolver);
                this.OnTrigger(trigger, r, logObj.timestamp);
                resolver.setFinal(() => {
                    var _a;
                    resolver.status.finalData = EmulatorCommon_EmulatorCommon.cloneData(this.data);
                    (_a = resolver.triggerHelper) === null || _a === void 0 ? true : delete _a.resolver;
                    if (this.callback)
                        this.callback(logObj, resolver.triggerHelper, resolver.status, this.data);
                });
            }
            await this.checkResolved(logObj);
        }
    }
    async OnNetLog(e) {
        var _a, _b;
        for (const logObj of e.detail.logs) {
            const log = logObj.networkLine;
            for (const trigger of this.netTriggers) {
                const r = (_a = trigger.localNetRegex) === null || _a === void 0 ? void 0 : _a.exec(log);
                if (r) {
                    const resolver = this.currentResolver = new Resolver({
                        initialData: EmulatorCommon_EmulatorCommon.cloneData(this.data),
                        suppressed: false,
                        executed: false,
                    });
                    this.triggerResolvers.push(resolver);
                    const matches = (_b = r.groups) !== null && _b !== void 0 ? _b : {};
                    this._onTriggerInternalGetHelper(trigger, matches, logObj.timestamp);
                    this.OnTrigger(trigger, r, logObj.timestamp);
                    resolver.setFinal(() => {
                        var _a;
                        resolver.status.finalData = EmulatorCommon_EmulatorCommon.cloneData(this.data);
                        (_a = resolver.triggerHelper) === null || _a === void 0 ? true : delete _a.resolver;
                        if (this.callback)
                            this.callback(logObj, resolver.triggerHelper, resolver.status, this.data);
                    });
                }
            }
            await this.checkResolved(logObj);
        }
    }
    async checkResolved(logObj) {
        await Promise.all(this.triggerResolvers.map(async (resolver) => await resolver.isResolved(logObj)))
            .then((results) => {
            this.triggerResolvers = this.triggerResolvers.filter((_, index) => !results[index]);
        });
    }
    _onTriggerInternalCondition(triggerHelper) {
        const ret = super._onTriggerInternalCondition(triggerHelper);
        if (triggerHelper.resolver)
            triggerHelper.resolver.status.condition = ret;
        return ret;
    }
    _onTriggerInternalDelaySeconds(triggerHelper) {
        var _a;
        // Can't inherit the default logic for delay since we don't
        // want to delay for mass processing of the timeline
        const delay = 'delaySeconds' in triggerHelper.trigger ? triggerHelper.valueOrFunction(triggerHelper.trigger.delaySeconds) : 0;
        if (typeof delay === 'number') {
            if (triggerHelper.resolver)
                triggerHelper.resolver.status.delay = delay;
            if (!delay || delay <= 0)
                return;
            return (_a = triggerHelper.resolver) === null || _a === void 0 ? void 0 : _a.setDelay(triggerHelper.now + (delay * 1000));
        }
    }
    _onTriggerInternalPromise(triggerHelper) {
        const ret = super._onTriggerInternalPromise(triggerHelper);
        if (triggerHelper.resolver)
            triggerHelper.resolver.status.promise = ret;
        if (!ret)
            return ret;
        if (triggerHelper.resolver)
            triggerHelper.resolver.setPromise(ret);
        return;
    }
    _onTriggerInternalTTS(triggerHelper) {
        super._onTriggerInternalTTS(triggerHelper);
        if (triggerHelper.ttsText !== undefined &&
            triggerHelper.resolver &&
            triggerHelper.resolver.status.responseType === undefined) {
            triggerHelper.resolver.status.responseType = 'tts';
            triggerHelper.resolver.status.responseLabel = triggerHelper.ttsText;
        }
    }
    _onTriggerInternalRun(triggerHelper) {
        var _a;
        (_a = triggerHelper.resolver) === null || _a === void 0 ? void 0 : _a.setRun(() => {
            if (triggerHelper.resolver)
                triggerHelper.resolver.status.executed = true;
            super._onTriggerInternalRun(triggerHelper);
        });
    }
    _makeTextElement(triggerHelper, text, _className) {
        var _a;
        var _b;
        if (triggerHelper.resolver)
            (_a = (_b = triggerHelper.resolver.status).result) !== null && _a !== void 0 ? _a : (_b.result = text);
        return document.createElement('div');
    }
    _createTextFor(triggerHelper, text, textType, _lowerTextKey, _duration) {
        // No-op for functionality, but store off this info for feedback
        if (triggerHelper.resolver) {
            triggerHelper.resolver.status.responseType = textType;
            triggerHelper.resolver.status.responseLabel = text;
        }
    }
    _playAudioFile(triggerHelper, url, _volume) {
        // No-op for functionality, but store off this info for feedback
        if (triggerHelper.resolver) {
            // If we already have text and this is a default alert sound, don't override that info
            if (triggerHelper.resolver.status.responseType) {
                if (triggerHelper.resolver.status.responseType === 'info' &&
                    url === this.options.InfoSound)
                    return;
                if (triggerHelper.resolver.status.responseType === 'alert' &&
                    url === this.options.AlertSound)
                    return;
                if (triggerHelper.resolver.status.responseType === 'alarm' &&
                    url === this.options.AlarmSound)
                    return;
            }
            triggerHelper.resolver.status.responseType = 'audiofile';
            triggerHelper.resolver.status.responseLabel = url;
        }
    }
    _onTriggerInternalGetHelper(trigger, matches, now) {
        var _a;
        const ret = {
            ...super._onTriggerInternalGetHelper(trigger, matches, now),
        };
        ret.resolver = this.currentResolver;
        (_a = ret.resolver) === null || _a === void 0 ? void 0 : _a.setHelper(ret);
        return ret;
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorTimelineUI.ts



class RaidEmulatorTimelineUI extends TimelineUI {
    constructor(options) {
        super(options);
        this.emulatedTimerBars = [];
        this.emulatedStatus = 'pause';
        const container = document.querySelector('.timer-bar-container');
        if (!(container instanceof HTMLElement))
            throw new not_reached/* UnreachableCode */.$();
        this.$barContainer = container;
        const pTemplate = document.querySelector('template.progress');
        if (!(pTemplate instanceof HTMLTemplateElement))
            throw new not_reached/* UnreachableCode */.$();
        if (!(pTemplate.content.firstElementChild instanceof HTMLElement))
            throw new not_reached/* UnreachableCode */.$();
        this.$progressTemplate = pTemplate.content.firstElementChild;
    }
    bindTo(emulator) {
        emulator.on('tick', (currentLogTime, lastLogLineTime) => {
            for (const bar of this.emulatedTimerBars)
                this.updateBar(bar, currentLogTime);
            const toRemove = this.emulatedTimerBars
                .filter((bar) => bar.forceRemoveAt <= currentLogTime);
            for (const bar of toRemove)
                bar.$progress.remove();
            this.emulatedTimerBars = this.emulatedTimerBars.filter((bar) => {
                return bar.forceRemoveAt > currentLogTime;
            });
            this.timeline && this.timeline.timebase && this.timeline._OnUpdateTimer(lastLogLineTime);
        });
        emulator.on('play', () => {
            this.emulatedStatus = 'play';
            if (this.timeline instanceof RaidEmulatorTimeline)
                this.timeline.emulatedSync(emulator.currentLogTime);
        });
        emulator.on('pause', () => {
            this.emulatedStatus = 'pause';
        });
        emulator.on('preSeek', (_time) => {
            this.timeline && this.timeline.Stop();
            for (const bar of this.emulatedTimerBars)
                bar.$progress.remove();
            this.emulatedTimerBars = [];
        });
        emulator.on('postSeek', (currentLogTime) => {
            if (this.timeline instanceof RaidEmulatorTimeline)
                this.timeline.emulatedSync(currentLogTime);
            for (const bar of this.emulatedTimerBars)
                this.updateBar(bar, currentLogTime);
        });
        emulator.on('currentEncounterChanged', this.stop.bind(this));
    }
    stop() {
        this.timeline && this.timeline.Stop();
        for (const bar of this.emulatedTimerBars)
            bar.$progress.remove();
        this.emulatedTimerBars = [];
    }
    updateBar(bar, currentLogTime) {
        const barElapsed = currentLogTime - bar.start;
        let barProg = Math.min((barElapsed / bar.duration) * 100, 100);
        if (bar.style === 'empty')
            barProg = 100 - barProg;
        let rightText = ((bar.duration - barElapsed) / 1000).toFixed(1);
        if (barProg >= 100)
            rightText = '';
        bar.$leftLabel.textContent = bar.event.text;
        bar.$rightLabel.textContent = rightText;
        bar.$bar.style.width = `${barProg}%`;
    }
    Init() {
        // This space intentionally left blank
    }
    AddDebugInstructions() {
        // This space intentionally left blank
    }
    // Override
    OnAddTimer(fightNow, e, channeling) {
        if (!this.timeline)
            throw new not_reached/* UnreachableCode */.$();
        const end = this.timeline.timebase + (e.time * 1000);
        const start = end - (this.options.ShowTimerBarsAtSeconds * 1000);
        const $progress = this.$progressTemplate.cloneNode(true);
        if (!($progress instanceof HTMLElement))
            throw new not_reached/* UnreachableCode */.$();
        const $progBar = $progress.querySelector('.progress-bar');
        const $progLeft = $progress.querySelector('.timer-bar-left-label');
        const $progRight = $progress.querySelector('.timer-bar-right-label');
        if (!($progBar instanceof HTMLDivElement &&
            $progLeft instanceof HTMLElement &&
            $progRight instanceof HTMLElement))
            throw new not_reached/* UnreachableCode */.$();
        const bar = {
            $progress: $progress,
            $bar: $progBar,
            $leftLabel: $progLeft,
            $rightLabel: $progRight,
            start: start,
            style: !channeling ? 'fill' : 'empty',
            duration: (channeling ? e.time - fightNow : this.options.ShowTimerBarsAtSeconds) * 1000,
            event: e,
            forceRemoveAt: 0,
        };
        bar.forceRemoveAt = bar.start + bar.duration;
        if (this.options.KeepExpiredTimerBarsForSeconds)
            bar.forceRemoveAt += this.options.KeepExpiredTimerBarsForSeconds * 1000;
        this.emulatedTimerBars.push(bar);
        this.$barContainer.append(bar.$progress);
        this.updateBar(bar, bar.start);
    }
    // Override
    OnRemoveTimer(e, expired) {
        const bars = this.emulatedTimerBars.filter((bar) => bar.event.id === e.id);
        bars.forEach((bar) => {
            if (!this.timeline)
                throw new not_reached/* UnreachableCode */.$();
            bar.forceRemoveAt = this.timeline.timebase;
            if (expired && this.options.KeepExpiredTimerBarsForSeconds)
                bar.forceRemoveAt += this.options.KeepExpiredTimerBarsForSeconds * 1000;
        });
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorAnalysisTimelineUI.ts

class RaidEmulatorAnalysisTimelineUI extends RaidEmulatorTimelineUI {
    constructor(options) {
        super(options);
        // Use orphaned child div to prevent DOM updates
        this.$barContainer = document.createElement('div');
    }
    updateBar(_bar, _currentLogTime) {
        // Stubbed out for performance
    }
    OnAddTimer(_fightNow, _e, _channeling) {
        // Stubbed out for performance
    }
    OnRemoveTimer(_e, _expired) {
        // Stubbed out for performance
    }
}

;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/AnalyzedEncounter.js










class AnalyzedEncounter extends EventBus_EventBus {
  /**
   * @param {Encounter} encounter
   */
  constructor(options, encounter, emulator) {
    super();
    this.options = options;
    this.popupText = null;
    this.perspectives = {};
    this.encounter = encounter;
    this.emulator = emulator;
  }

  selectPerspective(ID) {
    const partyMember = this.encounter.combatantTracker.combatants[ID];
    this.popupText.partyTracker.onPartyChanged({
      party: this.encounter.combatantTracker.partyMembers.map(ID => {
        return {
          name: this.encounter.combatantTracker.combatants[ID].name,
          job: util/* default.jobToJobEnum */.Z.jobToJobEnum(this.encounter.combatantTracker.combatants[ID].job),
          inParty: true
        };
      })
    });
    this.popupText.OnPlayerChange({
      detail: {
        name: partyMember.name,
        job: partyMember.job,
        currentHP: partyMember.getState(this.encounter.logLines[0].timestamp).HP
      }
    });
    this.popupText.OnChangeZone({
      zoneName: this.encounter.encounterZoneName,
      zoneID: parseInt(this.encounter.encounterZoneId, 16)
    });
  }

  async analyze(popupText) {
    this.popupText = popupText; // @TODO: Make this run in parallel sometime in the future, since it could be really slow?

    for (const index in this.encounter.combatantTracker.partyMembers) await this.analyzeFor(this.encounter.combatantTracker.partyMembers[index]);

    this.dispatch('analyzed');
  }

  async analyzeFor(ID) {
    let currentLogIndex = 0;
    const partyMember = this.encounter.combatantTracker.combatants[ID];

    if (!partyMember.job) {
      this.perspectives[ID] = {
        initialData: {},
        triggers: []
      };
      return;
    }

    const timelineUI = new RaidEmulatorAnalysisTimelineUI(this.options);
    const timelineController = new RaidEmulatorTimelineController(this.options, timelineUI, raidboss_manifest/* default */.Z);
    timelineController.bindTo(this.emulator);
    const popupText = new PopupTextAnalysis(this.popupText.options, new TimelineLoader(timelineController), raidboss_manifest/* default */.Z);
    timelineUI.popupText = popupText;
    timelineController.SetPopupTextInterface(new PopupTextGenerator(popupText));
    popupText.partyTracker.onPartyChanged({
      party: this.encounter.combatantTracker.partyMembers.map(ID => {
        return {
          name: this.encounter.combatantTracker.combatants[ID].name,
          job: util/* default.jobToJobEnum */.Z.jobToJobEnum(this.encounter.combatantTracker.combatants[ID].job),
          inParty: true
        };
      })
    });
    popupText.OnPlayerChange({
      detail: {
        name: partyMember.name,
        job: partyMember.job,
        currentHP: partyMember.getState(this.encounter.logLines[0].timestamp).HP
      }
    });
    popupText.OnChangeZone({
      zoneName: this.encounter.encounterZoneName,
      zoneID: parseInt(this.encounter.encounterZoneId, 16)
    });

    if (timelineController.activeTimeline) {
      timelineController.activeTimeline.SetTrigger(async (trigger, matches) => {
        // Some async magic here, force waiting for the entirety of
        // the trigger execution before continuing
        const delayPromise = new Promise(res => {
          popupText.delayResolver = res;
        });
        const promisePromise = new Promise(res => {
          popupText.promiseResolver = res;
        });
        const runPromise = new Promise(res => {
          popupText.runResolver = res;
        });
        const currentLine = this.encounter.logLines[currentLogIndex];
        popupText.OnTrigger(trigger, matches, currentLine.timestamp);
        await delayPromise;
        await promisePromise;
        const triggerHelper = await runPromise;
        triggerHelper.resolver.status.finalData = EmulatorCommon_EmulatorCommon.cloneData(popupText.data);
        popupText.callback(currentLine, triggerHelper, triggerHelper.resolver.status);
      });
    }

    popupText.callback = (log, triggerHelper, currentTriggerStatus, finalData) => {
      this.perspectives[ID].triggers.push({
        triggerHelper: triggerHelper,
        status: currentTriggerStatus,
        logLine: log,
        resolvedOffset: log.timestamp - this.encounter.startTimestamp + currentTriggerStatus.delay * 1000
      });
    };

    popupText.triggerResolvers = [];
    this.perspectives[ID] = {
      initialData: EmulatorCommon_EmulatorCommon.cloneData(popupText.data, []),
      triggers: [],
      finalData: popupText.data
    };

    for (; currentLogIndex < this.encounter.logLines.length; ++currentLogIndex) {
      const log = this.encounter.logLines[currentLogIndex];
      await this.dispatch('analyzeLine', log);

      if (this.encounter.combatantTracker.combatants[ID].hasState(log.timestamp)) {
        popupText.OnPlayerChange({
          detail: {
            name: this.encounter.combatantTracker.combatants[ID].name,
            job: this.encounter.combatantTracker.combatants[ID].job,
            currentHP: this.encounter.combatantTracker.combatants[ID].getState(log.timestamp).HP
          }
        });
      }

      const event = {
        detail: {
          logs: [log]
        }
      };
      await popupText.OnLog(event);
      await popupText.OnNetLog(event);
      timelineController.OnLogEvent(event);
    }

    timelineUI.stop();
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/RaidEmulator.js


class RaidEmulator extends EventBus_EventBus {
  constructor(options) {
    super();
    this.options = options;
    this.encounters = [];
    this.currentEncounter = null;
    this.playingInterval = null;
    this.currentLogLineIndex = null;
    this.lastLogLineTime = null;
    this.lastTickTime = null;
  }

  addEncounter(encounter) {
    this.encounters.push(encounter);
  }

  setCurrent(index) {
    const enc = this.encounters[index]; // If language was autodetected from the encounter, set the current ParserLanguage
    // appropriately

    if (enc.language) this.options.ParserLanguage = enc.language;
    this.currentEncounter = new AnalyzedEncounter(this.options, enc, this);
    this.dispatch('preCurrentEncounterChanged', this.currentEncounter);
    this.currentEncounter.analyze(this.popupText).then(() => {
      this.dispatch('currentEncounterChanged', this.currentEncounter);
    });
  }

  setCurrentByID(id) {
    const index = this.encounters.findIndex(v => v.id === id);
    if (index === -1) return false;
    this.setCurrent(index);
    return true;
  }

  selectPerspective(ID) {
    this.currentEncounter.selectPerspective(ID);
    this.seekTo(this.currentLogTime);
  }

  play() {
    if (this.currentEncounter === null) return false;
    const firstIndex = this.currentEncounter.encounter.firstLineIndex;
    this.currentLogTime = this.currentLogTime || this.currentEncounter.encounter.logLines[firstIndex].timestamp;
    this.currentLogLineIndex = this.currentLogLineIndex || firstIndex - 1;
    this.lastTickTime = Date.now();
    this.playingInterval = window.setInterval(this.tick.bind(this), RaidEmulator.playbackSpeed);
    this.dispatch('play');
    return true;
  }

  pause() {
    window.clearInterval(this.playingInterval);
    this.lastTickTime = null;
    this.playingInterval = null;
    this.dispatch('pause');
    return true;
  }

  async seek(timeOffset) {
    const seekTimestamp = this.currentEncounter.encounter.startTimestamp + timeOffset;
    return await this.seekTo(seekTimestamp);
  }

  async seekTo(seekTimestamp) {
    await this.dispatch('preSeek', seekTimestamp);
    this.currentLogLineIndex = -1;
    let logs = [];
    const playing = this.playingInterval !== null;
    if (playing) this.pause();

    for (let i = this.currentLogLineIndex + 1; i < this.currentEncounter.encounter.logLines.length; ++i) {
      const line = this.currentEncounter.encounter.logLines[i];

      if (line.timestamp <= seekTimestamp) {
        logs.push(line); // Bunch emitted lines for performance reasons

        if (logs.length > 100) {
          await this.dispatch('emitLogs', {
            logs: logs
          });
          logs = [];
        }

        this.currentLogTime = this.lastLogLineTime = line.timestamp;
        ++this.currentLogLineIndex;
        await this.dispatch('midSeek', line);
        continue;
      }

      break;
    } // Emit any remaining lines if needed


    if (logs.length) {
      await this.dispatch('emitLogs', {
        logs: logs
      });
      await this.dispatch('midSeek', logs.pop());
    }

    await this.dispatch('postSeek', seekTimestamp);
    await this.dispatch('tick', this.currentLogTime, this.lastLogLineTime);
    if (playing) this.play();
  }

  async tick() {
    if (this.currentLogLineIndex + 1 >= this.currentEncounter.encounter.logLines.length) {
      this.pause();
      return;
    }

    if (this.playingInterval === null) return;
    const logs = [];
    const timeDiff = Date.now() - this.lastTickTime;
    const lastTimestamp = this.currentLogTime + timeDiff;

    for (let i = this.currentLogLineIndex + 1; i < this.currentEncounter.encounter.logLines.length; ++i) {
      if (this.currentEncounter.encounter.logLines[i].timestamp <= lastTimestamp) {
        logs.push(this.currentEncounter.encounter.logLines[i]);
        this.lastLogLineTime = this.currentEncounter.encounter.logLines[i].timestamp;
        ++this.currentLogLineIndex;
        continue;
      }

      break;
    }

    this.currentLogTime += timeDiff;
    this.lastTickTime += timeDiff;
    if (logs.length) await this.dispatch('emitLogs', {
      logs: logs
    });
    await this.dispatch('tick', this.currentLogTime, this.lastLogLineTime);
  }

  setPopupText(popupText) {
    this.popupText = popupText;
  }

}
RaidEmulator.playbackSpeed = 10;
;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorOverlayApiHook.js

class RaidEmulatorOverlayApiHook {
  constructor(emulator) {
    this.emulator = emulator;
    this.originalCall = (0,overlay_plugin_api/* setCallOverlayHandlerOverride */.GL)(this.call.bind(this));
    this.currentLogTime = 0;
    emulator.on('tick', currentLogTime => {
      this.currentLogTime = currentLogTime;
    });
    emulator.on('preSeek', currentLogTime => {
      this.currentLogTime = 0;
    });
    emulator.on('preCurrentEncounterChanged', encounter => {
      this.currentLogTime = 0;
      encounter.on('analyzeLine', log => {
        this.currentLogTime = log.timestamp;
      });
    });
  }

  call(msg) {
    if (msg.call === 'getCombatants') {
      const tracker = this.emulator.currentEncounter.encounter.combatantTracker;
      const timestamp = this.currentLogTime;
      return new Promise(res => {
        const combatants = [];
        const hasIds = msg.ids !== undefined && msg.ids.length > 0;
        const hasNames = msg.names !== undefined && msg.names.length > 0;

        for (const [id, combatant] of Object.entries(tracker.combatants)) {
          // nextSignificantState is a bit inefficient but given that this isn't run every tick
          // we can afford to be a bit inefficient for readability's sake
          const combatantState = {
            ID: combatant.id,
            Name: combatant.name,
            Level: combatant.level,
            Job: combatant.job,
            ...combatant.nextSignificantState(timestamp).toPluginState()
          };
          if (!hasIds && !hasNames) combatants.push(combatantState);else if (hasIds && msg.ids.includes(parseInt(id, 16))) combatants.push(combatantState);else if (hasNames && msg.names.includes(tracker.combatants[id].name)) combatants.push(combatantState);
        } // @TODO: Move this to track properly on the Combatant object


        combatants.forEach(c => {
          const lines = this.emulator.currentEncounter.encounter.logLines.filter(l => l.decEvent === 3 && l.id === c.ID);

          if (lines.length > 0) {
            c.OwnerID = parseInt(lines[0].ownerId);
            c.BNpcNameID = parseInt(lines[0].npcNameId);
            c.BNpcID = parseInt(lines[0].npcBaseId);
          }
        });
        res({
          combatants: combatants
        });
      });
    }

    return this.originalCall(msg);
  }

}
;// CONCATENATED MODULE: ./ui/raidboss/emulator/overrides/RaidEmulatorPopupText.js

class RaidEmulatorPopupText extends StubbedPopupText {
  constructor(options, timelineLoader, raidbossFileData) {
    super(options, timelineLoader, raidbossFileData);
    this.$popupTextContainerWrapper = document.querySelector('.popup-text-container-outer');
    this.emulatedOffset = 0;
    this.emulator = null;
    this.displayedText = [];
    this.scheduledTriggers = [];
    this.seeking = false;
    this.$textElementTemplate = document.querySelector('template.textElement').content.firstElementChild;
    this.audioDebugTextDuration = 2000;
  }

  async doUpdate(currentLogTime) {
    this.emulatedOffset = currentLogTime;

    for (const t of this.scheduledTriggers) {
      const remaining = t.expires - currentLogTime;

      if (remaining <= 0) {
        t.resolver();
        await t.promise;
      }
    }

    this.scheduledTriggers = this.scheduledTriggers.filter(t => {
      return t.expires - currentLogTime > 0;
    });
    this.displayedText = this.displayedText.filter(t => {
      const remaining = t.expires - currentLogTime;

      if (remaining > 0) {
        t.element.querySelector('.popup-text-remaining').textContent = '(' + (remaining / 1000).toFixed(1) + ')';
        return true;
      }

      t.element.remove();
      return false;
    });
  }

  OnLog(logs) {
    for (const l of logs) {
      const log = l.properCaseConvertedLine || l.convertedLine;
      const currentTime = l.timestamp;
      if (log.includes('00:0038:cactbot wipe')) this.SetInCombat(false);

      for (const trigger of this.triggers) {
        const r = log.match(trigger.localRegex);
        if (r) this.OnTrigger(trigger, r, currentTime);
      }
    }
  }

  OnNetLog(logs) {
    for (const l of logs) {
      const log = l.networkLine;
      const currentTime = l.timestamp;

      for (const trigger of this.netTriggers) {
        const r = log.match(trigger.localNetRegex);
        if (r) this.OnTrigger(trigger, r, currentTime);
      }
    }
  }

  bindTo(emulator) {
    this.emulator = emulator;
    emulator.on('emitLogs', event => {
      this.OnLog(event.logs);
      this.OnNetLog(event.logs);
    });
    emulator.on('tick', async currentLogTime => {
      await this.doUpdate(currentLogTime);
    });
    emulator.on('midSeek', async line => {
      await this.doUpdate(line.timestamp);
    });
    emulator.on('preSeek', time => {
      this.seeking = true;

      this._emulatorReset();
    });
    emulator.on('postSeek', async time => {
      // This is a hacky fix for audio still playing during seek
      window.setTimeout(() => {
        this.seeking = false;
      }, 5);
    });
    emulator.on('currentEncounterChanged', () => {
      this._emulatorReset();

      this.OnChangeZone({
        zoneName: emulator.currentEncounter.encounter.encounterZoneName,
        zoneID: parseInt(emulator.currentEncounter.encounter.encounterZoneId, 16)
      });
    });
  }

  _emulatorReset() {
    for (const i of this.scheduledTriggers) i.rejecter();

    this.scheduledTriggers = [];
    this.displayedText = this.displayedText.filter(t => {
      t.element.remove();
      return false;
    });
    this.triggerSuppress = [];
  }

  _createTextFor(triggerHelper, text, textType, lowerTextKey, duration) {
    const textElementClass = textType + '-text';

    const e = this._makeTextElement(triggerHelper, text, textElementClass);

    this.addDisplayText(e, this.emulatedOffset + duration * 1000);
  }

  _onTriggerInternalDelaySeconds(triggerHelper) {
    const delay = 'delaySeconds' in triggerHelper.trigger ? triggerHelper.valueOrFunction(triggerHelper.trigger.delaySeconds) : 0;
    if (!delay || delay <= 0) return null;
    let resolver;
    let rejecter;
    const ret = new Promise((res, rej) => {
      resolver = res;
      rejecter = rej;
    });
    this.scheduledTriggers.push({
      expires: this.emulatedOffset + delay * 1000,
      promise: ret,
      resolver: resolver,
      rejecter: rejecter
    });
    return ret;
  }

  _playAudioFile(triggerHelper, url, volume) {
    if (![this.options.InfoSound, this.options.AlertSound, this.options.AlarmSound].includes(url)) {
      const div = this._makeTextElement(triggerHelper, url, 'audio-file');

      this.addDisplayText(div, this.emulatedOffset + this.audioDebugTextDuration);
    }

    if (this.seeking) return;

    super._playAudioFile(triggerHelper, url, volume);
  }

  ttsSay(ttsText) {
    if (this.seeking) return;

    const div = this._makeTextElement(triggerHelper, ttsText, 'tts-text');

    this.addDisplayText(div, this.emulatedOffset + this.audioDebugTextDuration);
    super.ttsSay(ttsText);
  }

  _makeTextElement(triggerHelper, text, className) {
    const $ret = this.$textElementTemplate.cloneNode(true);
    $ret.classList.add(className);
    $ret.querySelector('.popup-text').textContent = text;
    return $ret;
  }

  addDisplayText($e, endTimestamp) {
    const remaining = (endTimestamp - this.emulatedOffset) / 1000;
    $e.querySelector('.popup-text-remaining').textContent = '(' + remaining.toFixed(1) + ')';
    this.$popupTextContainerWrapper.append($e);
    this.displayedText.push({
      element: $e,
      expires: endTimestamp
    });
  }

}
// EXTERNAL MODULE: ./node_modules/worker-loader/dist/runtime/inline.js
var inline = __webpack_require__(477);
;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/NetworkLogConverterWorker.js



function Worker_fn() {
  return inline("/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\nvar __webpack_exports__ = {};\n\n;// CONCATENATED MODULE: ./resources/regexes.ts\nconst startsUsingParams = ['timestamp', 'source', 'id', 'ability', 'target', 'capture'];\nconst abilityParams = ['timestamp', 'source', 'sourceId', 'id', 'ability', 'targetId', 'target', 'capture'];\nconst abilityFullParams = [\n    'timestamp',\n    'sourceId',\n    'source',\n    'id',\n    'ability',\n    'targetId',\n    'target',\n    'flags',\n    'flag0',\n    'flag1',\n    'flag2',\n    'flag3',\n    'flag4',\n    'flag5',\n    'flag6',\n    'flag7',\n    'flag8',\n    'flag9',\n    'flag10',\n    'flag11',\n    'flag12',\n    'flag13',\n    'flag14',\n    'targetHp',\n    'targetMaxHp',\n    'targetMp',\n    'targetMaxMp',\n    'targetX',\n    'targetY',\n    'targetZ',\n    'targetHeading',\n    'hp',\n    'maxHp',\n    'mp',\n    'maxMp',\n    'x',\n    'y',\n    'z',\n    'heading',\n    'capture',\n];\nconst headMarkerParams = ['timestamp', 'targetId', 'target', 'id', 'capture'];\nconst addedCombatantParams = ['timestamp', 'name', 'capture'];\nconst addedCombatantFullParams = [\n    'timestamp',\n    'id',\n    'name',\n    'job',\n    'level',\n    'hp',\n    'x',\n    'y',\n    'z',\n    'npcId',\n    'capture',\n];\nconst removingCombatantParams = [\n    'timestamp',\n    'id',\n    'name',\n    'hp',\n    'x',\n    'y',\n    'z',\n    'capture',\n];\nconst gainsEffectParams = ['timestamp', 'targetId', 'target', 'effect', 'source', 'duration', 'capture'];\nconst statusEffectExplicitParams = [\n    'timestamp',\n    'targetId',\n    'target',\n    'job',\n    'hp',\n    'maxHp',\n    'mp',\n    'maxMp',\n    'x',\n    'y',\n    'z',\n    'heading',\n    'data0',\n    'data1',\n    'data2',\n    'data3',\n    'data4',\n    'capture',\n];\nconst losesEffectParams = ['timestamp', 'targetId', 'target', 'effect', 'source', 'capture'];\nconst statChangeParams = [\n    'timestamp',\n    'job',\n    'strength',\n    'dexterity',\n    'vitality',\n    'intelligence',\n    'mind',\n    'piety',\n    'attackPower',\n    'directHit',\n    'criticalHit',\n    'attackMagicPotency',\n    'healMagicPotency',\n    'determination',\n    'skillSpeed',\n    'spellSpeed',\n    'tenacity',\n    'capture',\n];\nconst tetherParams = ['timestamp', 'source', 'sourceId', 'target', 'targetId', 'id', 'capture'];\nconst wasDefeatedParams = ['timestamp', 'target', 'source', 'capture'];\nconst hasHPParams = ['timestamp', 'name', 'hp', 'capture'];\nconst echoParams = ['timestamp', 'code', 'line', 'capture'];\nconst dialogParams = ['timestamp', 'code', 'line', 'name', 'capture'];\nconst messageParams = ['timestamp', 'code', 'line', 'capture'];\nconst gameLogParams = ['timestamp', 'code', 'line', 'capture'];\nconst gameNameLogParams = ['timestamp', 'code', 'name', 'line', 'capture'];\nconst changeZoneParams = ['timestamp', 'name', 'capture'];\nconst network6dParams = ['timestamp', 'instance', 'command', 'data0', 'data1', 'data2', 'data3', 'capture'];\nclass Regexes {\n    /**\n     * fields: source, id, ability, target, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#14-networkstartscasting\n     */\n    static startsUsing(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'startsUsing', startsUsingParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        let str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 14:' +\n            Regexes.maybeCapture(capture, 'id', f.id, '\\\\y{AbilityCode}') + ':';\n        if (f.source || f.id || f.target || capture)\n            str += Regexes.maybeCapture(capture, 'source', f.source, '.*?') + ' starts using ';\n        if (f.ability || f.target || capture)\n            str += Regexes.maybeCapture(capture, 'ability', f.ability, '.*?') + ' on ';\n        if (f.target || capture)\n            str += Regexes.maybeCapture(capture, 'target', f.target, '.*?') + '\\\\.';\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: sourceId, source, id, ability, targetId, target, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#15-networkability\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#16-networkaoeability\n     */\n    static ability(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'ability', abilityParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        let str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 1[56]:' + Regexes.maybeCapture(capture, 'sourceId', '\\\\y{ObjectId}') + ':' +\n            Regexes.maybeCapture(capture, 'source', f.source, '[^:]*?') + ':';\n        if (f.id || f.ability || f.target || f.targetId || capture)\n            str += Regexes.maybeCapture(capture, 'id', f.id, '\\\\y{AbilityCode}') + ':';\n        if (f.ability || f.target || f.targetId || capture)\n            str += Regexes.maybeCapture(capture, 'ability', f.ability, '[^:]*?') + ':';\n        if (f.target || f.targetId || capture)\n            str += Regexes.maybeCapture(capture, 'targetId', '\\\\y{ObjectId}') + ':';\n        if (f.target || capture)\n            str += Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':';\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: sourceId, source, id, ability, targetId, target, flags, x, y, z, heading, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#15-networkability\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#16-networkaoeability\n     */\n    static abilityFull(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'abilityFull', abilityFullParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 1[56]:' +\n            Regexes.maybeCapture(capture, 'sourceId', f.sourceId, '\\\\y{ObjectId}') + ':' +\n            Regexes.maybeCapture(capture, 'source', f.source, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'id', f.id, '\\\\y{AbilityCode}') + ':' +\n            Regexes.maybeCapture(capture, 'ability', f.ability, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\\\y{ObjectId}') + ':' +\n            Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flags', f.flags, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag0', f.flag0, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag1', f.flag1, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag2', f.flag2, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag3', f.flag3, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag4', f.flag4, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag5', f.flag5, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag6', f.flag6, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag7', f.flag7, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag8', f.flag8, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag9', f.flag9, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag10', f.flag10, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag11', f.flag11, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag12', f.flag12, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag13', f.flag13, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'flag14', f.flag13, '[^:]*?') + ':' +\n            Regexes.optional(Regexes.maybeCapture(capture, 'targetHp', f.targetHp, '\\\\y{Float}')) + ':' +\n            Regexes.optional(Regexes.maybeCapture(capture, 'targetMaxHp', f.targetMaxHp, '\\\\y{Float}')) + ':' +\n            Regexes.optional(Regexes.maybeCapture(capture, 'targetMp', f.targetMp, '\\\\y{Float}')) + ':' +\n            Regexes.optional(Regexes.maybeCapture(capture, 'targetMaxMp', f.targetMaxMp, '\\\\y{Float}')) + ':' +\n            Regexes.optional('\\\\y{Float}') + ':' + // Target TP\n            Regexes.optional('\\\\y{Float}') + ':' + // Target Max TP\n            Regexes.optional(Regexes.maybeCapture(capture, 'targetX', f.targetX, '\\\\y{Float}')) + ':' +\n            Regexes.optional(Regexes.maybeCapture(capture, 'targetY', f.targetY, '\\\\y{Float}')) + ':' +\n            Regexes.optional(Regexes.maybeCapture(capture, 'targetZ', f.targetZ, '\\\\y{Float}')) + ':' +\n            Regexes.optional(Regexes.maybeCapture(capture, 'targetHeading', f.targetHeading, '\\\\y{Float}')) + ':' +\n            Regexes.maybeCapture(capture, 'hp', f.hp, '\\\\y{Float}') + ':' +\n            Regexes.maybeCapture(capture, 'maxHp', f.maxHp, '\\\\y{Float}') + ':' +\n            Regexes.maybeCapture(capture, 'mp', f.mp, '\\\\y{Float}') + ':' +\n            Regexes.maybeCapture(capture, 'maxMp', f.maxMp, '\\\\y{Float}') + ':' +\n            '\\\\y{Float}:' + // Source TP\n            '\\\\y{Float}:' + // Source Max TP\n            Regexes.maybeCapture(capture, 'x', f.x, '\\\\y{Float}') + ':' +\n            Regexes.maybeCapture(capture, 'y', f.y, '\\\\y{Float}') + ':' +\n            Regexes.maybeCapture(capture, 'z', f.z, '\\\\y{Float}') + ':' +\n            Regexes.maybeCapture(capture, 'heading', f.heading, '\\\\y{Float}') + ':' +\n            '.*?$'; // Unknown last field\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: targetId, target, id, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1b-networktargeticon-head-markers\n     */\n    static headMarker(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'headMarker', headMarkerParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 1B:' +\n            Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\\\y{ObjectId}') + ':' +\n            Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':....:....:' +\n            Regexes.maybeCapture(capture, 'id', f.id, '....') + ':';\n        return Regexes.parse(str);\n    }\n    // fields: name, capture\n    // matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#03-addcombatant\n    static addedCombatant(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'addedCombatant', addedCombatantParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 03:\\\\y{ObjectId}:Added new combatant ' +\n            Regexes.maybeCapture(capture, 'name', f.name, '.*?') + '\\\\.';\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: id, name, hp, x, y, z, npcId, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#03-addcombatant\n     */\n    static addedCombatantFull(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'addedCombatantFull', addedCombatantFullParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 03:' + Regexes.maybeCapture(capture, 'id', f.id, '\\\\y{ObjectId}') +\n            ':Added new combatant ' + Regexes.maybeCapture(capture, 'name', f.name, '[^:]*?') +\n            '\\\\. {2}Job: ' + Regexes.maybeCapture(capture, 'job', f.job, '[^:]*?') +\n            ' Level: ' + Regexes.maybeCapture(capture, 'level', f.level, '[^:]*?') +\n            ' Max HP: ' + Regexes.maybeCapture(capture, 'hp', f.hp, '[0-9]+') + '\\.' +\n            '.*?Pos: \\\\(' +\n            Regexes.maybeCapture(capture, 'x', f.x, '\\\\y{Float}') + ',' +\n            Regexes.maybeCapture(capture, 'y', f.y, '\\\\y{Float}') + ',' +\n            Regexes.maybeCapture(capture, 'z', f.z, '\\\\y{Float}') + '\\\\)' +\n            '(?: \\\\(' + Regexes.maybeCapture(capture, 'npcId', f.npcId, '.*?') + '\\\\))?\\\\.';\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: id, name, hp, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#04-removecombatant\n     */\n    static removingCombatant(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'removingCombatant', removingCombatantParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 04:' + Regexes.maybeCapture(capture, 'id', '\\\\y{ObjectId}') +\n            ':Removing combatant ' +\n            Regexes.maybeCapture(capture, 'name', f.name, '.*?') + '\\\\.' +\n            '.*?Max HP: ' + Regexes.maybeCapture(capture, 'hp', f.hp, '[0-9]+') + '\\.' +\n            Regexes.optional('.*?Pos: \\\\(' +\n                Regexes.maybeCapture(capture, 'x', f.x, '\\\\y{Float}') + ',' +\n                Regexes.maybeCapture(capture, 'y', f.y, '\\\\y{Float}') + ',' +\n                Regexes.maybeCapture(capture, 'z', f.z, '\\\\y{Float}') + '\\\\)');\n        return Regexes.parse(str);\n    }\n    // fields: targetId, target, effect, source, duration, capture\n    // matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1a-networkbuff\n    static gainsEffect(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'gainsEffect', gainsEffectParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 1A:' +\n            Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\\\y{ObjectId}') + ':' +\n            Regexes.maybeCapture(capture, 'target', f.target, '.*?') +\n            ' gains the effect of ' +\n            Regexes.maybeCapture(capture, 'effect', f.effect, '.*?') +\n            ' from ' +\n            Regexes.maybeCapture(capture, 'source', f.source, '.*?') +\n            ' for ' +\n            Regexes.maybeCapture(capture, 'duration', f.duration, '\\\\y{Float}') +\n            ' Seconds\\\\.';\n        return Regexes.parse(str);\n    }\n    /**\n     * Prefer gainsEffect over this function unless you really need extra data.\n     * fields: targetId, target, job, hp, maxHp, mp, maxMp, x, y, z, heading,\n     *         data0, data1, data2, data3, data4\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#26-networkstatuseffects\n     */\n    static statusEffectExplicit(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'statusEffectExplicit', statusEffectExplicitParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const kField = '.*?:';\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 26:' +\n            Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\\\y{ObjectId}') + ':' +\n            Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':' +\n            '[0-9A-F]{0,6}' + Regexes.maybeCapture(capture, 'job', f.job, '[0-9A-F]{0,2}') + ':' +\n            Regexes.maybeCapture(capture, 'hp', f.hp, '\\\\y{Float}') + ':' +\n            Regexes.maybeCapture(capture, 'maxHp', f.maxHp, '\\\\y{Float}') + ':' +\n            Regexes.maybeCapture(capture, 'mp', f.mp, '\\\\y{Float}') + ':' +\n            Regexes.maybeCapture(capture, 'maxMp', f.maxMp, '\\\\y{Float}') + ':' +\n            kField + // tp lol\n            kField + // max tp extra lol\n            // x, y, z heading may be blank\n            Regexes.optional(Regexes.maybeCapture(capture, 'x', f.x, '\\\\y{Float}')) + ':' +\n            Regexes.optional(Regexes.maybeCapture(capture, 'y', f.y, '\\\\y{Float}')) + ':' +\n            Regexes.optional(Regexes.maybeCapture(capture, 'z', f.z, '\\\\y{Float}')) + ':' +\n            Regexes.optional(Regexes.maybeCapture(capture, 'heading', f.heading, '\\\\y{Float}')) + ':' +\n            Regexes.maybeCapture(capture, 'data0', f.data0, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'data1', f.data1, '[^:]*?') + ':' +\n            // data2, 3, 4 may not exist and the line may terminate.\n            Regexes.optional(Regexes.maybeCapture(capture, 'data2', f.data2, '[^:]*?') + ':') +\n            Regexes.optional(Regexes.maybeCapture(capture, 'data3', f.data3, '[^:]*?') + ':') +\n            Regexes.optional(Regexes.maybeCapture(capture, 'data4', f.data4, '[^:]*?') + ':');\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: targetId, target, effect, source, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1e-networkbuffremove\n     */\n    static losesEffect(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'losesEffect', losesEffectParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 1E:' +\n            Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\\\y{ObjectId}') + ':' +\n            Regexes.maybeCapture(capture, 'target', f.target, '.*?') +\n            ' loses the effect of ' +\n            Regexes.maybeCapture(capture, 'effect', f.effect, '.*?') +\n            ' from ' +\n            Regexes.maybeCapture(capture, 'source', f.source, '.*?') + '\\\\.';\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: source, sourceId, target, targetId, id, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#23-networktether\n     */\n    static tether(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'tether', tetherParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 23:' +\n            Regexes.maybeCapture(capture, 'sourceId', f.sourceId, '\\\\y{ObjectId}') + ':' +\n            Regexes.maybeCapture(capture, 'source', f.source, '[^:]*?') + ':' +\n            Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\\\y{ObjectId}') + ':' +\n            Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') +\n            ':....:....:' +\n            Regexes.maybeCapture(capture, 'id', f.id, '....') + ':';\n        return Regexes.parse(str);\n    }\n    /**\n     * 'target' was defeated by 'source'\n     * fields: target, source, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#19-networkdeath\n     */\n    static wasDefeated(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'wasDefeated', wasDefeatedParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 19:' +\n            Regexes.maybeCapture(capture, 'target', f.target, '.*?') +\n            ' was defeated by ' +\n            Regexes.maybeCapture(capture, 'source', f.source, '.*?') + '\\\\.';\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: name, hp, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#0d-combatanthp\n     */\n    static hasHP(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'hasHP', hasHPParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 0D:' +\n            Regexes.maybeCapture(capture, 'name', f.name, '.*?') +\n            ' HP at ' +\n            Regexes.maybeCapture(capture, 'hp', f.hp, '\\\\d+') + '%';\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: code, line, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline\n     */\n    static echo(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'echo', echoParams);\n        return Regexes.gameLog({\n            line: f.line,\n            capture: f.capture,\n            code: '0038',\n        });\n    }\n    /**\n     * fields: code, line, name, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline\n     */\n    static dialog(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'dialog', dialogParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 00:' +\n            Regexes.maybeCapture(capture, 'code', '0044') + ':' +\n            Regexes.maybeCapture(capture, 'name', f.name, '.*?') + ':' +\n            Regexes.maybeCapture(capture, 'line', f.line, '.*') + '$';\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: code, line, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline\n     */\n    static message(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'message', messageParams);\n        return Regexes.gameLog({\n            line: f.line,\n            capture: f.capture,\n            code: '0839',\n        });\n    }\n    /**\n     * fields: code, line, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline\n     */\n    static gameLog(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'gameLog', gameLogParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 00:' +\n            Regexes.maybeCapture(capture, 'code', f.code, '....') + ':' +\n            Regexes.maybeCapture(capture, 'line', f.line, '.*') + '$';\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: code, name, line, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline\n     * Some game log lines have names in them, but not all.  All network log lines for these\n     * have empty fields, but these get dropped by the ACT FFXV plugin.\n     */\n    static gameNameLog(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'gameNameLog', gameNameLogParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 00:' +\n            Regexes.maybeCapture(capture, 'code', f.code, '....') + ':' +\n            Regexes.maybeCapture(capture, 'name', f.name, '[^:]*') + ':' +\n            Regexes.maybeCapture(capture, 'line', f.line, '.*') + '$';\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: job, strength, dexterity, vitality, intelligence, mind, piety, attackPower,\n     *         directHit, criticalHit, attackMagicPotency, healMagicPotency, determination,\n     *         skillSpeed, spellSpeed, tenacity, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#0c-playerstats\n     */\n    static statChange(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'statChange', statChangeParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 0C:Player Stats: ' +\n            Regexes.maybeCapture(capture, 'job', f.job, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'strength', f.strength, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'dexterity', f.dexterity, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'vitality', f.vitality, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'intelligence', f.intelligence, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'mind', f.mind, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'piety', f.piety, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'attackPower', f.attackPower, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'directHit', f.directHit, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'criticalHit', f.criticalHit, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'attackMagicPotency', f.attackMagicPotency, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'healMagicPotency', f.healMagicPotency, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'determination', f.determination, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'skillSpeed', f.skillSpeed, '\\\\d+') + ':' +\n            Regexes.maybeCapture(capture, 'spellSpeed', f.spellSpeed, '\\\\d+') +\n            ':0:' +\n            Regexes.maybeCapture(capture, 'tenacity', f.tenacity, '\\\\d+');\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: name, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#01-changezone\n     */\n    static changeZone(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'changeZone', changeZoneParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 01:Changed Zone to ' +\n            Regexes.maybeCapture(capture, 'name', f.name, '.*?') + '\\\\.';\n        return Regexes.parse(str);\n    }\n    /**\n     * fields: instance, command, data0, data1, data2, data3\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#21-network6d-actor-control-lines\n     */\n    static network6d(f) {\n        if (typeof f === 'undefined')\n            f = {};\n        Regexes.validateParams(f, 'network6d', network6dParams);\n        const capture = Regexes.trueIfUndefined(f.capture);\n        const str = Regexes.maybeCapture(capture, 'timestamp', '\\\\y{Timestamp}') +\n            ' 21:' +\n            Regexes.maybeCapture(capture, 'instance', f.instance, '.*?') + ':' +\n            Regexes.maybeCapture(capture, 'command', f.command, '.*?') + ':' +\n            Regexes.maybeCapture(capture, 'data0', f.data0, '.*?') + ':' +\n            Regexes.maybeCapture(capture, 'data1', f.data1, '.*?') + ':' +\n            Regexes.maybeCapture(capture, 'data2', f.data2, '.*?') + ':' +\n            Regexes.maybeCapture(capture, 'data3', f.data3, '.*?') + '$';\n        return Regexes.parse(str);\n    }\n    /**\n     * Helper function for building named capture group\n     */\n    static maybeCapture(capture, name, value, defaultValue) {\n        if (!value)\n            value = defaultValue;\n        value = Regexes.anyOf(value);\n        return capture ? Regexes.namedCapture(name, value) : value;\n    }\n    static optional(str) {\n        return `(?:${str})?`;\n    }\n    // Creates a named regex capture group named |name| for the match |value|.\n    static namedCapture(name, value) {\n        if (name.includes('>'))\n            console.error('\"' + name + '\" contains \">\".');\n        if (name.includes('<'))\n            console.error('\"' + name + '\" contains \">\".');\n        return '(?<' + name + '>' + value + ')';\n    }\n    /**\n     * Convenience for turning multiple args into a unioned regular expression.\n     * anyOf(x, y, z) or anyOf([x, y, z]) do the same thing, and return (?:x|y|z).\n     * anyOf(x) or anyOf(x) on its own simplifies to just x.\n     * args may be strings or RegExp, although any additional markers to RegExp\n     * like /insensitive/i are dropped.\n     */\n    static anyOf(...args) {\n        const anyOfArray = (array) => {\n            return `(?:${array.map((elem) => elem instanceof RegExp ? elem.source : elem).join('|')})`;\n        };\n        let array = [];\n        if (args.length === 1) {\n            if (Array.isArray(args[0]))\n                array = args[0];\n            else if (args[0])\n                array = [args[0]];\n            else\n                array = [];\n        }\n        else {\n            // TODO: more accurate type instead of `as` cast\n            array = args;\n        }\n        return anyOfArray(array);\n    }\n    static parse(regexpString) {\n        const kCactbotCategories = {\n            Timestamp: '^.{14}',\n            NetTimestamp: '.{33}',\n            NetField: '(?:[^|]*\\\\|)',\n            LogType: '[0-9A-Fa-f]{2}',\n            AbilityCode: '[0-9A-Fa-f]{1,8}',\n            ObjectId: '[0-9A-F]{8}',\n            // Matches any character name (including empty strings which the FFXIV\n            // ACT plugin can generate when unknown).\n            Name: '(?:[^\\\\s:|]+(?: [^\\\\s:|]+)?|)',\n            // Floats can have comma as separator in FFXIV plugin output: https://github.com/ravahn/FFXIV_ACT_Plugin/issues/137\n            Float: '-?[0-9]+(?:[.,][0-9]+)?(?:E-?[0-9]+)?',\n        };\n        // All regexes in cactbot are case insensitive.\n        // This avoids headaches as things like `Vice and Vanity` turns into\n        // `Vice And Vanity`, especially for French and German.  It appears to\n        // have a ~20% regex parsing overhead, but at least they work.\n        let modifiers = 'i';\n        if (regexpString instanceof RegExp) {\n            modifiers += (regexpString.global ? 'g' : '') +\n                (regexpString.multiline ? 'm' : '');\n            regexpString = regexpString.source;\n        }\n        regexpString = regexpString.replace(/\\\\y\\{(.*?)\\}/g, (match, group) => {\n            return kCactbotCategories[group] || match;\n        });\n        return new RegExp(regexpString, modifiers);\n    }\n    // Like Regex.Regexes.parse, but force global flag.\n    static parseGlobal(regexpString) {\n        const regex = Regexes.parse(regexpString);\n        let modifiers = 'gi';\n        if (regexpString instanceof RegExp)\n            modifiers += (regexpString.multiline ? 'm' : '');\n        return new RegExp(regex.source, modifiers);\n    }\n    static trueIfUndefined(value) {\n        if (typeof (value) === 'undefined')\n            return true;\n        return !!value;\n    }\n    static validateParams(f, funcName, params) {\n        if (f === null)\n            return;\n        if (typeof f !== 'object')\n            return;\n        const keys = Object.keys(f);\n        for (let k = 0; k < keys.length; ++k) {\n            const key = keys[k];\n            if (key && !params.includes(key)) {\n                throw new Error(`${funcName}: invalid parameter '${key}'.  ` +\n                    `Valid params: ${JSON.stringify(params)}`);\n            }\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./resources/netregexes.ts\n\n// Differences from Regexes:\n// * may have more fields\n// * AddedCombatant npc id is broken up into npcNameId and npcBaseId\n// * gameLog always splits name into its own field (but previously wouldn't)\nconst separator = '\\\\|';\nconst matchDefault = '[^|]*';\nconst netregexes_startsUsingParams = (/* unused pure expression or super */ null && (['timestamp', 'sourceId', 'source', 'id', 'ability', 'targetId', 'target', 'castTime']));\nconst netregexes_abilityParams = (/* unused pure expression or super */ null && (['sourceId', 'source', 'id', 'ability', 'targetId', 'target']));\nconst netregexes_abilityFullParams = (/* unused pure expression or super */ null && (['sourceId', 'source', 'id', 'ability', 'targetId', 'target', 'flags', 'damage', 'targetCurrentHp', 'targetMaxHp', 'x', 'y', 'z', 'heading']));\nconst netregexes_headMarkerParams = (/* unused pure expression or super */ null && (['targetId', 'target', 'id']));\nconst netregexes_addedCombatantParams = (/* unused pure expression or super */ null && (['id', 'name']));\nconst netregexes_addedCombatantFullParams = (/* unused pure expression or super */ null && (['id', 'name', 'job', 'level', 'ownerId', 'world', 'npcNameId', 'npcBaseId', 'currentHp', 'hp', 'x', 'y', 'z', 'heading']));\nconst netregexes_removingCombatantParams = (/* unused pure expression or super */ null && (['id', 'name', 'hp']));\nconst netregexes_gainsEffectParams = (/* unused pure expression or super */ null && (['effectId', 'effect', 'duration', 'sourceId', 'source', 'targetId', 'target', 'count']));\nconst netregexes_statusEffectExplicitParams = (/* unused pure expression or super */ null && (['targetId', 'target', 'hp', 'maxHp', 'x', 'y', 'z', 'heading', 'data0', 'data1', 'data2', 'data3', 'data4']));\nconst netregexes_losesEffectParams = (/* unused pure expression or super */ null && (['effectId', 'effect', 'sourceId', 'source', 'targetId', 'target', 'count']));\nconst netregexes_tetherParams = (/* unused pure expression or super */ null && (['sourceId', 'source', 'targetId', 'target', 'id']));\nconst netregexes_wasDefeatedParams = (/* unused pure expression or super */ null && (['targetId', 'target', 'sourceId', 'source']));\nconst netregexes_echoParams = (/* unused pure expression or super */ null && (['code', 'name', 'line']));\nconst netregexes_dialogParams = (/* unused pure expression or super */ null && (['code', 'name', 'line']));\nconst netregexes_messageParams = (/* unused pure expression or super */ null && (['code', 'name', 'line']));\nconst netregexes_gameLogParams = (/* unused pure expression or super */ null && (['code', 'name', 'line']));\nconst netregexes_gameNameLogParams = (/* unused pure expression or super */ null && (['code', 'name', 'line']));\nconst netregexes_statChangeParams = (/* unused pure expression or super */ null && (['job', 'strength', 'dexterity', 'vitality', 'intelligence', 'mind', 'piety', 'attackPower', 'directHit', 'criticalHit', 'attackMagicPotency', 'healMagicPotency', 'determination', 'skillSpeed', 'spellSpeed', 'tenacity']));\nconst netregexes_changeZoneParams = (/* unused pure expression or super */ null && (['id', 'name']));\nconst netregexes_network6dParams = (/* unused pure expression or super */ null && (['instance', 'command', 'data0', 'data1', 'data2', 'data3']));\nconst nameToggleParams = (/* unused pure expression or super */ null && (['id', 'name', 'toggle']));\n// If NetRegexes.setFlagTranslationsNeeded is set to true, then any\n// regex created that requires a translation will begin with this string\n// and match the magicStringRegex.  This is maybe a bit goofy, but is\n// a pretty straightforward way to mark regexes for translations.\n// If issue #1306 is ever resolved, we can remove this.\nconst magicTranslationString = `^^`;\nconst magicStringRegex = /^\\^\\^/;\nconst keysThatRequireTranslation = [\n    'ability',\n    'name',\n    'source',\n    'target',\n    'line',\n];\nconst parseHelper = (params, funcName, fields) => {\n    var _a, _b, _c, _d, _e, _f;\n    params = params !== null && params !== void 0 ? params : {};\n    const validFields = [];\n    for (const value of Object.values(fields)) {\n        if (typeof value !== 'object')\n            continue;\n        validFields.push(value.field);\n    }\n    Regexes.validateParams(params, funcName, ['capture', ...validFields]);\n    // Find the last key we care about, so we can shorten the regex if needed.\n    const capture = Regexes.trueIfUndefined(params.capture);\n    const fieldKeys = Object.keys(fields);\n    let maxKey;\n    if (capture) {\n        maxKey = fieldKeys[fieldKeys.length - 1];\n    }\n    else {\n        maxKey = 0;\n        for (const key of fieldKeys) {\n            const value = (_a = fields[key]) !== null && _a !== void 0 ? _a : {};\n            if (typeof value !== 'object')\n                continue;\n            const fieldName = (_b = fields[key]) === null || _b === void 0 ? void 0 : _b.field;\n            if (fieldName && fieldName in params)\n                maxKey = key;\n        }\n    }\n    // For testing, it's useful to know if this is a regex that requires\n    // translation.  We test this by seeing if there are any specified\n    // fields, and if so, inserting a magic string that we can detect.\n    // This lets us differentiate between \"regex that should be translated\"\n    // e.g. a regex with `target` specified, and \"regex that shouldn't\"\n    // e.g. a gains effect with just effectId specified.\n    const transParams = Object.keys(params).filter((k) => keysThatRequireTranslation.includes(k));\n    const needsTranslations = NetRegexes.flagTranslationsNeeded && transParams.length > 0;\n    // Build the regex from the fields.\n    let str = needsTranslations ? magicTranslationString : '^';\n    let lastKey = -1;\n    for (const _key in fields) {\n        const key = parseInt(_key);\n        // Fill in blanks.\n        const missingFields = key - lastKey - 1;\n        if (missingFields === 1)\n            str += '\\\\y{NetField}';\n        else if (missingFields > 1)\n            str += `\\\\y{NetField}{${missingFields}}`;\n        lastKey = key;\n        const value = fields[key];\n        if (typeof value !== 'object')\n            throw new Error(`${funcName}: invalid value: ${JSON.stringify(value)}`);\n        const fieldName = (_c = fields[key]) === null || _c === void 0 ? void 0 : _c.field;\n        const fieldValue = (_f = (_e = (_d = fields[key]) === null || _d === void 0 ? void 0 : _d.value) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : matchDefault;\n        if (fieldName) {\n            str += Regexes.maybeCapture(\n            // more accurate type instead of `as` cast\n            // maybe this function needs a refactoring\n            capture, fieldName, params[fieldName], fieldValue) +\n                separator;\n        }\n        else {\n            str += fieldValue + separator;\n        }\n        // Stop if we're not capturing and don't care about future fields.\n        if (key >= (maxKey !== null && maxKey !== void 0 ? maxKey : 0))\n            break;\n    }\n    return Regexes.parse(str);\n};\nclass NetRegexes {\n    static setFlagTranslationsNeeded(value) {\n        NetRegexes.flagTranslationsNeeded = value;\n    }\n    static doesNetRegexNeedTranslation(regex) {\n        // Need to `setFlagTranslationsNeeded` before calling this function.\n        console.assert(NetRegexes.flagTranslationsNeeded);\n        const str = typeof regex === 'string' ? regex : regex.source;\n        return !!magicStringRegex.exec(str);\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#14-networkstartscasting\n     */\n    static startsUsing(params) {\n        return parseHelper(params, 'startsUsing', {\n            0: { field: 'type', value: '20' },\n            1: { field: 'timestamp' },\n            2: { field: 'sourceId' },\n            3: { field: 'source' },\n            4: { field: 'id' },\n            5: { field: 'ability' },\n            6: { field: 'targetId' },\n            7: { field: 'target' },\n            8: { field: 'castTime' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#15-networkability\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#16-networkaoeability\n     */\n    static ability(params) {\n        return parseHelper(params, 'ability', {\n            0: { field: 'type', value: '2[12]' },\n            1: { field: 'timestamp' },\n            2: { field: 'sourceId' },\n            3: { field: 'source' },\n            4: { field: 'id' },\n            5: { field: 'ability' },\n            6: { field: 'targetId' },\n            7: { field: 'target' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#15-networkability\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#16-networkaoeability\n     */\n    static abilityFull(params) {\n        return parseHelper(params, 'abilityFull', {\n            0: { field: 'type', value: '2[12]' },\n            1: { field: 'timestamp' },\n            2: { field: 'sourceId' },\n            3: { field: 'source' },\n            4: { field: 'id' },\n            5: { field: 'ability' },\n            6: { field: 'targetId' },\n            7: { field: 'target' },\n            8: { field: 'flags' },\n            9: { field: 'damage' },\n            24: { field: 'targetCurrentHp' },\n            25: { field: 'targetMaxHp' },\n            40: { field: 'x' },\n            41: { field: 'y' },\n            42: { field: 'z' },\n            43: { field: 'heading' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1b-networktargeticon-head-markers\n     */\n    static headMarker(params) {\n        return parseHelper(params, 'headMarker', {\n            0: { field: 'type', value: '27' },\n            1: { field: 'timestamp' },\n            2: { field: 'targetId' },\n            3: { field: 'target' },\n            6: { field: 'id' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#03-addcombatant\n     */\n    static addedCombatant(params) {\n        return parseHelper(params, 'addedCombatant', {\n            0: { field: 'type', value: '03' },\n            1: { field: 'timestamp' },\n            2: { field: 'id' },\n            3: { field: 'name' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#03-addcombatant\n     */\n    static addedCombatantFull(params) {\n        return parseHelper(params, 'addedCombatantFull', {\n            0: { field: 'type', value: '03' },\n            1: { field: 'timestamp' },\n            2: { field: 'id' },\n            3: { field: 'name' },\n            4: { field: 'job' },\n            5: { field: 'level' },\n            6: { field: 'ownerId' },\n            8: { field: 'world' },\n            9: { field: 'npcNameId' },\n            10: { field: 'npcBaseId' },\n            11: { field: 'currentHp' },\n            12: { field: 'hp' },\n            17: { field: 'x' },\n            18: { field: 'y' },\n            19: { field: 'z' },\n            20: { field: 'heading' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#04-removecombatant\n     */\n    static removingCombatant(params) {\n        return parseHelper(params, 'removingCombatant', {\n            0: { field: 'type', value: '04' },\n            1: { field: 'timestamp' },\n            2: { field: 'id' },\n            3: { field: 'name' },\n            12: { field: 'hp' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1a-networkbuff\n     */\n    static gainsEffect(params) {\n        return parseHelper(params, 'gainsEffect', {\n            0: { field: 'type', value: '26' },\n            1: { field: 'timestamp' },\n            2: { field: 'effectId' },\n            3: { field: 'effect' },\n            4: { field: 'duration' },\n            5: { field: 'sourceId' },\n            6: { field: 'source' },\n            7: { field: 'targetId' },\n            8: { field: 'target' },\n            9: { field: 'count' },\n        });\n    }\n    /**\n     * Prefer gainsEffect over this function unless you really need extra data.\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#26-networkstatuseffects\n     */\n    static statusEffectExplicit(params) {\n        return parseHelper(params, 'statusEffectExplicit', {\n            0: { field: 'type', value: '38' },\n            1: { field: 'timestamp' },\n            2: { field: 'targetId' },\n            3: { field: 'target' },\n            5: { field: 'hp' },\n            6: { field: 'maxHp' },\n            11: { field: 'x' },\n            12: { field: 'y' },\n            13: { field: 'z' },\n            14: { field: 'heading' },\n            15: { field: 'data0' },\n            16: { field: 'data1' },\n            17: { field: 'data2' },\n            18: { field: 'data3' },\n            19: { field: 'data4' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1e-networkbuffremove\n     */\n    static losesEffect(params) {\n        return parseHelper(params, 'losesEffect', {\n            0: { field: 'type', value: '30' },\n            1: { field: 'timestamp' },\n            2: { field: 'effectId' },\n            3: { field: 'effect' },\n            5: { field: 'sourceId' },\n            6: { field: 'source' },\n            7: { field: 'targetId' },\n            8: { field: 'target' },\n            9: { field: 'count' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#23-networktether\n     */\n    static tether(params) {\n        return parseHelper(params, 'tether', {\n            0: { field: 'type', value: '35' },\n            1: { field: 'timestamp' },\n            2: { field: 'sourceId' },\n            3: { field: 'source' },\n            4: { field: 'targetId' },\n            5: { field: 'target' },\n            8: { field: 'id' },\n        });\n    }\n    /**\n     * 'target' was defeated by 'source'\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#19-networkdeath\n     */\n    static wasDefeated(params) {\n        return parseHelper(params, 'wasDefeated', {\n            0: { field: 'type', value: '25' },\n            1: { field: 'timestamp' },\n            2: { field: 'targetId' },\n            3: { field: 'target' },\n            4: { field: 'sourceId' },\n            5: { field: 'source' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline\n     */\n    static echo(params) {\n        if (typeof params === 'undefined')\n            params = {};\n        Regexes.validateParams(params, 'echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);\n        params.code = '0038';\n        return NetRegexes.gameLog(params);\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline\n     */\n    static dialog(params) {\n        if (typeof params === 'undefined')\n            params = {};\n        Regexes.validateParams(params, 'dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);\n        params.code = '0044';\n        return NetRegexes.gameLog(params);\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline\n     */\n    static message(params) {\n        if (typeof params === 'undefined')\n            params = {};\n        Regexes.validateParams(params, 'message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);\n        params.code = '0839';\n        return NetRegexes.gameLog(params);\n    }\n    /**\n     * fields: code, name, line, capture\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline\n     */\n    static gameLog(params) {\n        return parseHelper(params, 'gameLog', {\n            0: { field: 'type', value: '00' },\n            1: { field: 'timestamp' },\n            2: { field: 'code' },\n            3: { field: 'name' },\n            4: { field: 'line' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline\n     */\n    static gameNameLog(params) {\n        // for compat with Regexes.\n        return NetRegexes.gameLog(params);\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#0c-playerstats\n     */\n    static statChange(params) {\n        return parseHelper(params, 'statChange', {\n            0: { field: 'type', value: '12' },\n            1: { field: 'timestamp' },\n            2: { field: 'job' },\n            3: { field: 'strength' },\n            4: { field: 'dexterity' },\n            5: { field: 'vitality' },\n            6: { field: 'intelligence' },\n            7: { field: 'mind' },\n            8: { field: 'piety' },\n            9: { field: 'attackPower' },\n            10: { field: 'directHit' },\n            11: { field: 'criticalHit' },\n            12: { field: 'attackMagicPotency' },\n            13: { field: 'healMagicPotency' },\n            14: { field: 'determination' },\n            15: { field: 'skillSpeed' },\n            16: { field: 'spellSpeed' },\n            18: { field: 'tenacity' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#01-changezone\n     */\n    static changeZone(params) {\n        return parseHelper(params, 'changeZone', {\n            0: { field: 'type', value: '01' },\n            1: { field: 'timestamp' },\n            2: { field: 'id' },\n            3: { field: 'name' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#21-network6d-actor-control-lines\n     */\n    static network6d(params) {\n        return parseHelper(params, 'network6d', {\n            0: { field: 'type', value: '33' },\n            1: { field: 'timestamp' },\n            2: { field: 'instance' },\n            3: { field: 'command' },\n            4: { field: 'data0' },\n            5: { field: 'data1' },\n            6: { field: 'data2' },\n            7: { field: 'data3' },\n        });\n    }\n    /**\n     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#22-networknametoggle\n     */\n    static nameToggle(params) {\n        return parseHelper(params, 'nameToggle', {\n            0: { field: 'type', value: '34' },\n            1: { field: 'timestamp' },\n            2: { field: 'id' },\n            3: { field: 'name' },\n            6: { field: 'toggle' },\n        });\n    }\n}\nNetRegexes.flagTranslationsNeeded = false;\n\n;// CONCATENATED MODULE: ./resources/translations.ts\n\n\n// Fill in LocaleRegex so that things like LocaleRegex.countdownStart.de is a valid regex.\nconst localeLines = {\n    countdownStart: {\n        en: 'Battle commencing in (?<time>\\\\y{Float}) seconds! \\\\((?<player>.*?)\\\\)',\n        de: 'Noch (?<time>\\\\y{Float}) Sekunden bis Kampfbeginn! \\\\((?<player>.*?)\\\\)',\n        fr: 'Début du combat dans (?<time>\\\\y{Float}) secondes[ ]?! \\\\((?<player>.*?)\\\\)',\n        ja: '戦闘開始まで(?<time>\\\\y{Float})秒！ \\\\((?<player>.*?)\\\\)',\n        cn: '距离战斗开始还有(?<time>\\\\y{Float})秒！ （(?<player>.*?)）',\n        ko: '전투 시작 (?<time>\\\\y{Float})초 전! \\\\((?<player>.*?)\\\\)',\n    },\n    countdownEngage: {\n        en: 'Engage!',\n        de: 'Start!',\n        fr: 'À l\\'attaque[ ]?!',\n        ja: '戦闘開始！',\n        cn: '战斗开始！',\n        ko: '전투 시작!',\n    },\n    countdownCancel: {\n        en: 'Countdown canceled by (?<player>\\\\y{Name})',\n        de: '(?<player>\\\\y{Name}) hat den Countdown abgebrochen',\n        fr: 'Le compte à rebours a été interrompu par (?<player>\\\\y{Name})[ ]?\\\\.',\n        ja: '(?<player>\\\\y{Name})により、戦闘開始カウントがキャンセルされました。',\n        cn: '(?<player>\\\\y{Name})取消了战斗开始倒计时。',\n        ko: '(?<player>\\\\y{Name}) 님이 초읽기를 취소했습니다\\\\.',\n    },\n    areaSeal: {\n        en: '(?<area>.*?) will be sealed off in (?<time>\\\\y{Float}) seconds!',\n        de: 'Noch (?<time>\\\\y{Float}) Sekunden, bis sich (?<area>.*?) schließt',\n        fr: 'Fermeture (?<area>.*?) dans (?<time>\\\\y{Float}) secondes[ ]?\\\\.',\n        ja: '(?<area>.*?)の封鎖まであと(?<time>\\\\y{Float})秒',\n        cn: '距(?<area>.*?)被封锁还有(?<time>\\\\y{Float})秒',\n        ko: '(?<time>\\\\y{Float})초 후에 (?<area>.*?)(이|가) 봉쇄됩니다\\\\.',\n    },\n    areaUnseal: {\n        en: '(?<area>.*?) is no longer sealed.',\n        de: '(?<area>.*?) öffnet sich erneut.',\n        fr: 'Ouverture (?<area>.*?)[ ]?!',\n        ja: '(?<area>.*?)の封鎖が解かれた……',\n        cn: '(?<area>.*?)的封锁解除了',\n        ko: '(?<area>.*?)의 봉쇄가 해제되었습니다\\\\.',\n    },\n    // Recipe name always start with \\ue0bb\n    // HQ icon is \\ue03c\n    craftingStart: {\n        en: 'You begin synthesizing (?<count>(an?|\\\\d+) )?\\ue0bb(?<recipe>.*)\\\\.',\n        de: 'Du hast begonnen, durch Synthese (?<count>(ein(e|es|em|er)?|\\\\d+) )?\\ue0bb(?<recipe>.*) herzustellen\\\\.',\n        fr: 'Vous commencez à fabriquer (?<count>(une?|\\\\d+) )?\\ue0bb(?<recipe>.*)\\\\.',\n        ja: '(?<player>\\\\y{Name})は\\ue0bb(?<recipe>.*)(×(?<count>\\\\d+))?の製作を開始した。',\n        cn: '(?<player>\\\\y{Name})开始制作“\\ue0bb(?<recipe>.*)”(×(?<count>\\\\d+))?。',\n        ko: '\\ue0bb(?<recipe>.*)(×(?<count>\\\\d+)개)? 제작을 시작합니다\\\\.',\n    },\n    trialCraftingStart: {\n        en: 'You begin trial synthesis of \\ue0bb(?<recipe>.*)\\\\.',\n        de: 'Du hast mit der Testsynthese von \\ue0bb(?<recipe>.*) begonnen\\\\.',\n        fr: 'Vous commencez une synthèse d\\'essai pour une? \\ue0bb(?<recipe>.*)\\\\.',\n        ja: '(?<player>\\\\y{Name})は\\ue0bb(?<recipe>.*)の製作練習を開始した。',\n        cn: '(?<player>\\\\y{Name})开始练习制作\\ue0bb(?<recipe>.*)。',\n        ko: '\\ue0bb(?<recipe>.*) 제작 연습을 시작합니다\\\\.',\n    },\n    craftingFinish: {\n        en: 'You synthesize (?<count>(an?|\\\\d+) )?\\ue0bb(?<recipe>.*)(\\ue03c)?\\\\.',\n        de: 'Du hast erfolgreich (?<count>(ein(e|es|em|er)?|\\\\d+) )?(?<recipe>.*)(\\ue03c)? hergestellt\\\\.',\n        fr: 'Vous fabriquez (?<count>(une?|\\\\d+) )?\\ue0bb(?<recipe>.*)(\\ue03c)?\\\\.',\n        ja: '(?<player>\\\\y{Name})は\\ue0bb(?<recipe>.*)(\\ue03c)?(×(?<count>\\\\d+))?を完成させた！',\n        cn: '(?<player>\\\\y{Name})制作“\\ue0bb(?<recipe>.*)(\\ue03c)?”(×(?<count>\\\\d+))?成功！',\n        ko: '(?<player>\\\\y{Name}) 님이 \\ue0bb(?<recipe>.*)(\\ue03c)?(×(?<count>\\\\d+)개)?(을|를) 완성했습니다!',\n    },\n    trialCraftingFinish: {\n        en: 'Your trial synthesis of \\ue0bb(?<recipe>.*) proved a success!',\n        de: 'Die Testsynthese von \\ue0bb(?<recipe>.*) war erfolgreich!',\n        fr: 'Votre synthèse d\\'essai pour fabriquer \\ue0bb(?<recipe>.*) a été couronnée de succès!',\n        ja: '(?<player>\\\\y{Name})は\\ue0bb(?<recipe>.*)の製作練習に成功した！',\n        cn: '(?<player>\\\\y{Name})练习制作\\ue0bb(?<recipe>.*)成功了！',\n        ko: '\\ue0bb(?<recipe>.*) 제작 연습에 성공했습니다!',\n    },\n    craftingFail: {\n        en: 'Your synthesis fails!',\n        de: 'Deine Synthese ist fehlgeschlagen!',\n        fr: 'La synthèse échoue\\\\.{3}',\n        ja: '(?<player>\\\\y{Name})は製作に失敗した……',\n        cn: '(?<player>\\\\y{Name})制作失败了……',\n        ko: '제작에 실패했습니다……\\\\.',\n    },\n    trialCraftingFail: {\n        en: 'Your trial synthesis of \\ue0bb(?<recipe>.*) failed\\\\.{3}',\n        de: 'Die Testsynthese von \\ue0bb(?<recipe>.*) ist fehlgeschlagen\\\\.{3}',\n        fr: 'Votre synthèse d\\'essai pour fabriquer \\ue0bb(?<recipe>.*) s\\'est soldée par un échec\\\\.{3}',\n        ja: '(?<player>\\\\y{Name})は\\ue0bb(?<recipe>.*)の製作練習に失敗した……',\n        cn: '(?<player>\\\\y{Name})练习制作\\ue0bb(?<recipe>.*)失败了……',\n        ko: '\\ue0bb(?<recipe>.*) 제작 연습에 실패했습니다……\\\\.',\n    },\n    craftingCancel: {\n        en: 'You cancel the synthesis\\\\.',\n        de: 'Du hast die Synthese abgebrochen\\\\.',\n        fr: 'La synthèse est annulée\\\\.',\n        ja: '(?<player>\\\\y{Name})は製作を中止した。',\n        cn: '(?<player>\\\\y{Name})中止了制作作业。',\n        ko: '제작을 중지했습니다\\\\.',\n    },\n    trialCraftingCancel: {\n        en: 'You abandoned trial synthesis\\\\.',\n        de: 'Testsynthese abgebrochen\\\\.',\n        fr: 'Vous avez interrompu la synthèse d\\'essai\\\\.',\n        ja: '(?<player>\\\\y{Name})は製作練習を中止した。',\n        cn: '(?<player>\\\\y{Name})停止了练习。',\n        ko: '제작 연습을 중지했습니다\\\\.',\n    },\n};\nclass RegexSet {\n    get localeRegex() {\n        if (this.regexes)\n            return this.regexes;\n        this.regexes = this.buildLocaleRegexes(localeLines, (s) => Regexes.gameLog({ line: s + '.*?' }));\n        return this.regexes;\n    }\n    get localeNetRegex() {\n        if (this.netRegexes)\n            return this.netRegexes;\n        this.netRegexes = this.buildLocaleRegexes(localeLines, (s) => NetRegexes.gameLog({ line: s + '[^|]*?' }));\n        return this.netRegexes;\n    }\n    buildLocaleRegexes(locales, builder) {\n        return Object.fromEntries(Object\n            .entries(locales)\n            .map(([key, lines]) => [key, this.buildLocaleRegex(lines, builder)]));\n    }\n    buildLocaleRegex(lines, builder) {\n        const regexEn = builder(lines.en);\n        return {\n            en: regexEn,\n            de: lines.de ? builder(lines.de) : regexEn,\n            fr: lines.fr ? builder(lines.fr) : regexEn,\n            ja: lines.ja ? builder(lines.ja) : regexEn,\n            cn: lines.cn ? builder(lines.cn) : regexEn,\n            ko: lines.ko ? builder(lines.ko) : regexEn,\n        };\n    }\n}\nconst regexSet = new RegexSet();\nconst LocaleRegex = regexSet.localeRegex;\nconst LocaleNetRegex = regexSet.localeNetRegex;\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/EmulatorCommon.ts\n\n\nclass EmulatorCommon {\n    static cloneData(data, exclude = ['options', 'party']) {\n        const ret = {};\n        // Use extra logic for top-level extend for property exclusion\n        // This cut the execution time of this code from 41,000ms to 50ms when parsing a 12 minute pull\n        for (const i in data) {\n            if (exclude.includes(i))\n                continue;\n            if (typeof data[i] === 'object')\n                ret[i] = EmulatorCommon._cloneData(data[i]);\n            else\n                // Assignment of any to any. See DataType definition above for reasoning.\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                ret[i] = data[i];\n        }\n        return ret;\n    }\n    static _cloneData(data) {\n        if (typeof data === 'object') {\n            if (Array.isArray(data)) {\n                const ret = [];\n                for (let i = 0; i < data.length; ++i)\n                    ret[i] = EmulatorCommon._cloneData(data[i]);\n                return ret;\n            }\n            if (data === null)\n                return null;\n            if (data instanceof RegExp)\n                return new RegExp(data);\n            const ret = {};\n            for (const i in data)\n                ret[i] = EmulatorCommon._cloneData(data[i]);\n            return ret;\n        }\n        return data;\n    }\n    static timeToString(time, includeMillis = true) {\n        const negative = time < 0 ? '-' : '';\n        time = Math.abs(time);\n        const millisNum = time % 1000;\n        const secsNum = ((time % (60 * 1000)) - millisNum) / 1000;\n        // Milliseconds\n        const millis = `00${millisNum}`.substr(-3);\n        const secs = `0${secsNum}`.substr(-2);\n        const mins = `0${((((time % (60 * 60 * 1000)) - millisNum) / 1000) - secsNum) / 60}`.substr(-2);\n        return negative + mins + ':' + secs + (includeMillis ? '.' + millis : '');\n    }\n    static timeToDateString(time) {\n        return this.dateObjectToDateString(new Date(time));\n    }\n    static dateObjectToDateString(date) {\n        const year = date.getFullYear();\n        const month = EmulatorCommon.zeroPad((date.getMonth() + 1).toString());\n        const day = EmulatorCommon.zeroPad(date.getDate().toString());\n        return `${year}-${month}-${day}`;\n    }\n    static timeToTimeString(time, includeMillis = false) {\n        return this.dateObjectToTimeString(new Date(time), includeMillis);\n    }\n    static dateObjectToTimeString(date, includeMillis = false) {\n        const hour = EmulatorCommon.zeroPad(date.getHours().toString());\n        const minute = EmulatorCommon.zeroPad(date.getMinutes().toString());\n        const second = EmulatorCommon.zeroPad(date.getSeconds().toString());\n        let ret = `${hour}:${minute}:${second}`;\n        if (includeMillis)\n            ret = ret + `.${date.getMilliseconds()}`;\n        return ret;\n    }\n    static msToDuration(ms) {\n        const tmp = EmulatorCommon.timeToString(ms, false);\n        return tmp.replace(':', 'm') + 's';\n    }\n    static dateTimeToString(time, includeMillis = false) {\n        const date = new Date(time);\n        return `${this.dateObjectToDateString(date)} ${this.dateObjectToTimeString(date, includeMillis)}`;\n    }\n    static zeroPad(str, len = 2) {\n        return ('' + str).padStart(len, '0');\n    }\n    static properCase(str) {\n        return str.replace(/([^\\W_]+[^\\s-]*) */g, (txt) => {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n    }\n    static spacePadLeft(str, len) {\n        return str.padStart(len, ' ');\n    }\n    static doesLineMatch(line, regexes) {\n        if (regexes instanceof RegExp)\n            return regexes.exec(line);\n        for (const langStr in regexes) {\n            const lang = langStr;\n            const res = regexes[lang].exec(line);\n            if (res) {\n                if (res.groups)\n                    res.groups.language = lang;\n                return res;\n            }\n        }\n        return null;\n    }\n    static matchStart(line) {\n        var _a, _b, _c, _d;\n        let res;\n        // Currently all of these regexes have groups if they match at all,\n        // but be robust to that changing in the future.\n        res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.countdownRegexes);\n        if (res) {\n            (_a = res.groups) !== null && _a !== void 0 ? _a : (res.groups = {});\n            res.groups.StartIn = (parseInt((_b = res.groups.time) !== null && _b !== void 0 ? _b : '0') * 1000).toString();\n            res.groups.StartType = 'Countdown';\n            return res;\n        }\n        res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.sealRegexes);\n        if (res) {\n            (_c = res.groups) !== null && _c !== void 0 ? _c : (res.groups = {});\n            res.groups.StartIn = '0';\n            res.groups.StartType = 'Seal';\n            return res;\n        }\n        res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.engageRegexes);\n        if (res) {\n            (_d = res.groups) !== null && _d !== void 0 ? _d : (res.groups = {});\n            res.groups.StartIn = '0';\n            res.groups.StartType = 'Engage';\n            return res;\n        }\n    }\n    static matchEnd(line) {\n        var _a, _b, _c, _d;\n        let res;\n        // Currently all of these regexes have groups if they match at all,\n        // but be robust to that changing in the future.\n        res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.winRegex);\n        if (res) {\n            (_a = res.groups) !== null && _a !== void 0 ? _a : (res.groups = {});\n            res.groups.EndType = 'Win';\n            return res;\n        }\n        res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.wipeRegex);\n        if (res) {\n            (_b = res.groups) !== null && _b !== void 0 ? _b : (res.groups = {});\n            res.groups.EndType = 'Wipe';\n            return res;\n        }\n        res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.cactbotWipeRegex);\n        if (res) {\n            (_c = res.groups) !== null && _c !== void 0 ? _c : (res.groups = {});\n            res.groups.EndType = 'Cactbot Wipe';\n            return res;\n        }\n        res = EmulatorCommon.doesLineMatch(line, EmulatorCommon.unsealRegexes);\n        if (res) {\n            (_d = res.groups) !== null && _d !== void 0 ? _d : (res.groups = {});\n            res.groups.EndType = 'Unseal';\n            return res;\n        }\n    }\n}\nEmulatorCommon.sealRegexes = LocaleNetRegex.areaSeal;\nEmulatorCommon.engageRegexes = LocaleNetRegex.countdownEngage;\nEmulatorCommon.countdownRegexes = LocaleNetRegex.countdownStart;\nEmulatorCommon.unsealRegexes = LocaleNetRegex.areaUnseal;\nEmulatorCommon.wipeRegex = NetRegexes.network6d({ command: '40000010' });\nEmulatorCommon.winRegex = NetRegexes.network6d({ command: '40000003' });\nEmulatorCommon.cactbotWipeRegex = NetRegexes.echo({ line: 'cactbot wipe.*?' });\n\n;// CONCATENATED MODULE: ./resources/not_reached.ts\n// Helper Error for TypeScript situations where the programmer thinks they\n// know better than TypeScript that some situation will never occur.\n// The intention here is that the programmer does not expect a particular\n// bit of code to happen, and so has not written careful error handling.\n// If it does occur, at least there will be an error and we can figure out why.\n// This is preferable to casting or disabling TypeScript altogether in order to\n// avoid syntax errors.\n// One common example is a regex, where if the regex matches then all of the\n// (non-optional) regex groups will also be valid, but TypeScript doesn't know.\nclass UnreachableCode extends Error {\n    constructor() {\n        super('This code shouldn\\'t be reached');\n    }\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/Combatant.ts\n\nclass Combatant {\n    constructor(id, name) {\n        this.name = '';\n        this.server = '';\n        this.states = {};\n        this.significantStates = [];\n        this.latestTimestamp = -1;\n        this.id = id;\n        this.setName(name);\n    }\n    setName(name) {\n        var _a, _b, _c;\n        // Sometimes network lines arrive after the combatant has been cleared\n        // from memory in the client, so the network line will have a valid ID\n        // but the name will be blank. Since we're tracking the name for the\n        // entire fight and not on a state-by-state basis, we don't want to\n        // blank out a name in this case.\n        // If a combatant actually has a blank name, that's still allowed by\n        // the constructor.\n        if (name === '')\n            return;\n        const parts = name.split('(');\n        this.name = (_a = parts[0]) !== null && _a !== void 0 ? _a : '';\n        if (parts.length > 1)\n            this.server = (_c = (_b = parts[1]) === null || _b === void 0 ? void 0 : _b.replace(/\\)$/, '')) !== null && _c !== void 0 ? _c : '';\n    }\n    hasState(timestamp) {\n        return this.states[timestamp] !== undefined;\n    }\n    pushState(timestamp, state) {\n        this.states[timestamp] = state;\n        this.latestTimestamp = timestamp;\n        if (!this.significantStates.includes(timestamp))\n            this.significantStates.push(timestamp);\n    }\n    nextSignificantState(timestamp) {\n        var _a;\n        // Shortcut out if this is significant or if there's no higher significant state\n        const index = this.significantStates.indexOf(timestamp);\n        const lastSignificantStateIndex = this.significantStates.length - 1;\n        // If timestamp is a significant state already, and it's not the last one, return the next\n        if (index >= 0 && index < lastSignificantStateIndex)\n            return this.getStateByIndex(index + 1);\n        // If timestamp is the last significant state or the timestamp is past the last significant\n        // state, return the last significant state\n        else if (index === lastSignificantStateIndex ||\n            timestamp > ((_a = this.significantStates[lastSignificantStateIndex]) !== null && _a !== void 0 ? _a : 0))\n            return this.getStateByIndex(lastSignificantStateIndex);\n        for (let i = 0; i < this.significantStates.length; ++i) {\n            const stateIndex = this.significantStates[i];\n            if (stateIndex && stateIndex > timestamp)\n                return this.getStateByIndex(i);\n        }\n        return this.getStateByIndex(this.significantStates.length - 1);\n    }\n    pushPartialState(timestamp, props) {\n        var _a;\n        if (this.states[timestamp] === undefined) {\n            // Clone the last state before this timestamp\n            const stateTimestamp = (_a = this.significantStates\n                .filter((s) => s < timestamp)\n                .sort((a, b) => b - a)[0]) !== null && _a !== void 0 ? _a : this.significantStates[0];\n            if (stateTimestamp === undefined)\n                throw new UnreachableCode();\n            const state = this.states[stateTimestamp];\n            if (!state)\n                throw new UnreachableCode();\n            this.states[timestamp] = state.partialClone(props);\n        }\n        else {\n            const state = this.states[timestamp];\n            if (!state)\n                throw new UnreachableCode();\n            this.states[timestamp] = state.partialClone(props);\n        }\n        this.latestTimestamp = Math.max(this.latestTimestamp, timestamp);\n        const lastSignificantStateTimestamp = this.significantStates[this.significantStates.length - 1];\n        if (!lastSignificantStateTimestamp)\n            throw new UnreachableCode();\n        const oldStateJSON = JSON.stringify(this.states[lastSignificantStateTimestamp]);\n        const newStateJSON = JSON.stringify(this.states[timestamp]);\n        if (lastSignificantStateTimestamp !== timestamp && newStateJSON !== oldStateJSON)\n            this.significantStates.push(timestamp);\n    }\n    getState(timestamp) {\n        const stateByTimestamp = this.states[timestamp];\n        if (stateByTimestamp)\n            return stateByTimestamp;\n        const initialTimestamp = this.significantStates[0];\n        if (initialTimestamp === undefined)\n            throw new UnreachableCode();\n        if (timestamp < initialTimestamp)\n            return this.getStateByIndex(0);\n        let i = 0;\n        for (; i < this.significantStates.length; ++i) {\n            const prevTimestamp = this.significantStates[i];\n            if (prevTimestamp === undefined)\n                throw new UnreachableCode();\n            if (prevTimestamp > timestamp)\n                return this.getStateByIndex(i - 1);\n        }\n        return this.getStateByIndex(i - 1);\n    }\n    // Should only be called when `index` is valid.\n    getStateByIndex(index) {\n        const stateIndex = this.significantStates[index];\n        if (stateIndex === undefined)\n            throw new UnreachableCode();\n        const state = this.states[stateIndex];\n        if (state === undefined)\n            throw new UnreachableCode();\n        return state;\n    }\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/CombatantJobSearch.ts\nclass CombatantJobSearch {\n    static getJob(abilityId) {\n        for (const [key, value] of Object.entries(CombatantJobSearch.abilities)) {\n            if (value === null || value === void 0 ? void 0 : value.includes(abilityId))\n                return key;\n        }\n    }\n}\nCombatantJobSearch.abilityMatchRegex = /[a-fA-F0-9]{1,4}/i;\nCombatantJobSearch.abilities = {\n    PLD: [\n        12959, 12961, 12964, 12967, 12968, 12969, 12970, 12971, 12972, 12973, 12974, 12975,\n        12976, 12978, 12980, 12981, 12982, 12983, 12984, 12985, 12986, 12987, 12988, 12989,\n        12991, 12992, 12993, 12994, 12996, 13000, 13001, 13006, 14480, 16457, 16458, 16459,\n        16460, 16461, 17669, 17671, 17672, 17691, 17692, 17693, 17694, 17866, 18050, 27, 29,\n        30, 3538, 3539, 3540, 3541, 3542, 4284, 4285, 4286, 50207, 50209, 50246, 50260, 50261,\n        50262, 50263, 50264, 7382, 7383, 7384, 7385, 8746, 8749, 8750, 8751, 8752, 8754, 8755,\n        8756,\n    ],\n    WAR: [\n        16462, 16463, 16464, 16465, 17695, 17696, 17697, 17698, 17889, 3549, 3550, 3551, 3552,\n        4289, 4290, 4291, 49, 50157, 50218, 50249, 50265, 50266, 50267, 50268, 50269, 51, 52,\n        7386, 7387, 7388, 7389, 8758, 8761, 8762, 8763, 8764, 8765, 8767, 8768,\n    ],\n    DRK: [\n        16466, 16467, 16468, 16469, 16470, 16471, 16472, 17700, 17701, 17702, 3617, 3621, 3623,\n        3624, 3625, 3629, 3632, 3634, 3636, 3638, 3639, 3640, 3641, 3643, 4303, 4304, 4305, 4306,\n        4307, 4308, 4309, 4310, 4311, 4312, 4680, 50158, 50159, 50271, 50272, 50319, 7390, 7391,\n        7392, 7393, 8769, 8772, 8773, 8775, 8776, 8777, 8778, 8779,\n    ],\n    GNB: [\n        17703, 17704, 17705, 17706, 17707, 17708, 17709, 17710, 17711, 17712, 17713, 17714,\n        17716, 17717, 17890, 17891, 16137, 50320, 16138, 16139, 16140, 16141, 16142, 16143,\n        16144, 16145, 16162, 50257, 16148, 16149, 16151, 16152, 50258, 16153, 16154, 16146,\n        16147, 16150, 16159, 16160, 16161, 16155, 16156, 16157, 16158, 16163, 16164, 16165,\n        50259,\n    ],\n    WHM: [\n        12958, 12962, 12965, 12997, 13002, 13003, 13004, 13005, 131, 136, 137, 139, 140, 14481,\n        1584, 16531, 16532, 16533, 16534, 16535, 16536, 17688, 17689, 17690, 17789, 17790, 17791,\n        17793, 17794, 17832, 3568, 3569, 3570, 3571, 4296, 4297, 50181, 50182, 50196, 50307,\n        50308, 50309, 50310, 7430, 7431, 7432, 7433, 8895, 8896, 8900, 9621, 127, 133,\n    ],\n    SCH: [\n        16537, 16538, 16539, 16540, 16541, 16542, 16543, 16544, 16545, 16546, 16547, 16548, 16550,\n        16551, 166, 167, 17215, 17216, 17795, 17796, 17797, 17798, 17802, 17864, 17865, 17869,\n        17870, 17990, 185, 186, 188, 189, 190, 3583, 3584, 3585, 3586, 3587, 4300, 50184, 50214,\n        50311, 50312, 50313, 50324, 7434, 7435, 7436, 7437, 7438, 7869, 802, 803, 805, 8904, 8905,\n        8909, 9622,\n    ],\n    AST: [\n        10027, 10028, 10029, 16552, 16553, 16554, 16555, 16556, 16557, 16558, 16559, 17055, 17151,\n        17152, 17804, 17805, 17806, 17807, 17809, 17991, 3590, 3593, 3594, 3595, 3596, 3598, 3599,\n        3600, 3601, 3603, 3604, 3605, 3606, 3608, 3610, 3612, 3613, 3614, 3615, 4301, 4302, 4401,\n        4402, 4403, 4404, 4405, 4406, 4677, 4678, 4679, 50122, 50124, 50125, 50186, 50187, 50188,\n        50189, 50314, 50315, 50316, 7439, 7440, 7441, 7442, 7443, 7444, 7445, 7448, 8324, 8913,\n        8914, 8916, 9629,\n    ],\n    MNK: [\n        12960, 12963, 12966, 12977, 12979, 12990, 12995, 12998, 12999, 14476, 14478, 16473, 16474,\n        16475, 16476, 17674, 17675, 17676, 17677, 17719, 17720, 17721, 17722, 17723, 17724, 17725,\n        17726, 3543, 3545, 3546, 3547, 4262, 4287, 4288, 50160, 50161, 50245, 50273, 50274, 63, 70,\n        71, 7394, 7395, 7396, 74, 8780, 8781, 8782, 8783, 8784, 8785, 8787, 8789, 8925,\n    ],\n    DRG: [\n        16477, 16478, 16479, 16480, 17728, 17729, 3553, 3554, 3555, 3556, 3557, 4292, 4293, 50162,\n        50163, 50247, 50275, 50276, 7397, 7398, 7399, 7400, 86, 8791, 8792, 8793, 8794, 8795,\n        8796, 8797, 8798, 8799, 8802, 8803, 8804, 8805, 8806, 92, 94, 95, 96, 9640, 75, 78,\n    ],\n    NIN: [\n        16488, 16489, 16491, 16492, 16493, 17413, 17414, 17415, 17416, 17417, 17418, 17419, 17420,\n        17732, 17733, 17734, 17735, 17736, 17737, 17738, 17739, 2246, 2259, 2260, 2261, 2262,\n        2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 3563, 3566, 4295, 50165,\n        50166, 50167, 50250, 50279, 50280, 7401, 7402, 7403, 8807, 8808, 8809, 8810, 8812, 8814,\n        8815, 8816, 8820, 9461,\n    ],\n    SAM: [\n        16481, 16482, 16483, 16484, 16485, 16486, 16487, 17740, 17741, 17742, 17743, 17744, 50208,\n        50215, 50277, 50278, 7477, 7478, 7479, 7480, 7481, 7482, 7483, 7484, 7485, 7486, 7487,\n        7488, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7501, 7502, 7855,\n        7857, 7867, 8821, 8822, 8823, 8824, 8825, 8826, 8828, 8829, 8830, 8831, 8833,\n    ],\n    BRD: [\n        10023, 114, 116, 117, 118, 13007, 14479, 16494, 16495, 16496, 17678, 17679, 17680, 17681,\n        17682, 17745, 17747, 3558, 3559, 3560, 3561, 3562, 4294, 50168, 50169, 50282, 50283, 50284,\n        50285, 50286, 50287, 7404, 7405, 7406, 7407, 7408, 7409, 8836, 8837, 8838, 8839, 8841,\n        8842, 8843, 8844, 9625, 106,\n    ],\n    MCH: [\n        16497, 16498, 16499, 16500, 16501, 16502, 16503, 16504, 16766, 16889, 17206, 17209, 17749,\n        17750, 17751, 17752, 17753, 17754, 2864, 2866, 2868, 2870, 2872, 2873, 2874, 2876, 2878,\n        2890, 4276, 4675, 4676, 50117, 50119, 50288, 50289, 50290, 50291, 50292, 50293, 50294,\n        7410, 7411, 7412, 7413, 7414, 7415, 7416, 7418, 8848, 8849, 8850, 8851, 8853, 8855,\n    ],\n    DNC: [\n        17756, 17757, 17758, 17759, 17760, 17761, 17762, 17763, 17764, 17765, 17766, 17767,\n        17768, 17769, 17770, 17771, 17772, 17773, 17824, 17825, 17826, 17827, 17828, 17829,\n        18076, 15989, 15990, 15993, 15997, 15999, 16000, 16001, 16002, 16003, 16191, 16192,\n        15991, 15994, 16007, 50252, 15995, 15992, 15996, 16008, 16010, 50251, 16015, 16012,\n        16006, 18073, 50253, 16011, 16009, 50254, 15998, 16004, 16193, 16194, 16195, 16196,\n        16013, 16005, 50255, 50256, 16014,\n    ],\n    BLM: [\n        14477, 153, 154, 158, 159, 162, 16505, 16506, 16507, 17683, 17684, 17685, 17686, 17687,\n        17774, 17775, 3573, 3574, 3575, 3576, 3577, 4298, 50171, 50172, 50173, 50174, 50295,\n        50296, 50297, 50321, 50322, 7419, 7420, 7421, 7422, 8858, 8859, 8860, 8861, 8862, 8863,\n        8864, 8865, 8866, 8867, 8869, 9637, 149, 155, 141, 152,\n    ],\n    SMN: [\n        16510, 16511, 16513, 16514, 16515, 16516, 16517, 16518, 16519, 16522, 16523, 16549,\n        16795, 16796, 16797, 16798, 16799, 16800, 16801, 16802, 16803, 17777, 17778, 17779,\n        17780, 17781, 17782, 17783, 17784, 17785, 180, 184, 3578, 3579, 3580, 3581, 3582, 4299,\n        50176, 50177, 50178, 50213, 50217, 50298, 50299, 50300, 50301, 50302, 7423, 7424, 7425,\n        7426, 7427, 7428, 7429, 7449, 7450, 787, 788, 791, 792, 794, 796, 797, 798, 800, 801,\n        8872, 8873, 8874, 8877, 8878, 8879, 8880, 8881, 9014, 9432,\n    ],\n    RDM: [\n        10025, 16524, 16525, 16526, 16527, 16528, 16529, 16530, 17786, 17787, 17788, 50195,\n        50200, 50201, 50216, 50303, 50304, 50305, 50306, 7503, 7504, 7505, 7506, 7507, 7509,\n        7510, 7511, 7512, 7513, 7514, 7515, 7516, 7517, 7518, 7519, 7520, 7521, 7523, 7524,\n        7525, 7526, 7527, 7528, 7529, 7530, 8882, 8883, 8884, 8885, 8887, 8888, 8889, 8890,\n        8891, 8892, 9433, 9434,\n    ],\n    BLU: [\n        11715, 11383, 11384, 11385, 11386, 11387, 11388, 11389, 11390, 11391, 11392, 11393,\n        11394, 11395, 11396, 11397, 11398, 11399, 11400, 11401, 11402, 11403, 11404, 11405,\n        11406, 11407, 11408, 11409, 11410, 11411, 11412, 11413, 11414, 11415, 11416, 11417,\n        11418, 11419, 11420, 11421, 11422, 11423, 11424, 11425, 11426, 11427, 11428, 11429,\n        11430, 11431, 50219, 50220, 50221, 50222, 50223, 50224,\n    ],\n};\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/CombatantState.ts\nclass CombatantState {\n    constructor(posX, posY, posZ, heading, targetable, hp, maxHp, mp, maxMp) {\n        this.posX = posX;\n        this.posY = posY;\n        this.posZ = posZ;\n        this.heading = heading;\n        this.targetable = targetable;\n        this.hp = hp;\n        this.maxHp = maxHp;\n        this.mp = mp;\n        this.maxMp = maxMp;\n    }\n    partialClone(props) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        return new CombatantState((_a = props.posX) !== null && _a !== void 0 ? _a : this.posX, (_b = props.posY) !== null && _b !== void 0 ? _b : this.posY, (_c = props.posZ) !== null && _c !== void 0 ? _c : this.posZ, (_d = props.heading) !== null && _d !== void 0 ? _d : this.heading, (_e = props.targetable) !== null && _e !== void 0 ? _e : this.targetable, (_f = props.hp) !== null && _f !== void 0 ? _f : this.hp, (_g = props.maxHp) !== null && _g !== void 0 ? _g : this.maxHp, (_h = props.mp) !== null && _h !== void 0 ? _h : this.mp, (_j = props.maxMp) !== null && _j !== void 0 ? _j : this.maxMp);\n    }\n    toPluginState() {\n        return {\n            PosX: this.posX,\n            PosY: this.posY,\n            PosZ: this.posZ,\n            Heading: this.heading,\n            CurrentHP: this.hp,\n            MaxHP: this.maxHp,\n            CurrentMP: this.mp,\n            MaxMP: this.maxMp,\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./resources/pet_names.ts\n// Auto-generated from gen_pet_names.py\n// DO NOT EDIT THIS FILE DIRECTLY\nconst data = {\n    'cn': [\n        '绿宝石兽',\n        '黄宝石兽',\n        '伊弗利特之灵',\n        '泰坦之灵',\n        '迦楼罗之灵',\n        '朝日小仙女',\n        '夕月小仙女',\n        '车式浮空炮塔',\n        '象式浮空炮塔',\n        '亚灵神巴哈姆特',\n        '亚灵神不死鸟',\n        '炽天使',\n        '月长宝石兽',\n        '英雄的掠影',\n        '后式自走人偶',\n        '分身',\n    ],\n    'de': [\n        'Smaragd-Karfunkel',\n        'Topas-Karfunkel',\n        'Ifrit-Egi',\n        'Titan-Egi',\n        'Garuda-Egi',\n        'Eos',\n        'Selene',\n        'Selbstschuss-Gyrocopter TURM',\n        'Selbstschuss-Gyrocopter LÄUFER',\n        'Demi-Bahamut',\n        'Demi-Phönix',\n        'Seraph',\n        'Mondstein-Karfunkel',\n        'Schattenschemen',\n        'Automaton DAME',\n        'Gedoppeltes Ich',\n    ],\n    'en': [\n        'Emerald Carbuncle',\n        'Topaz Carbuncle',\n        'Ifrit-Egi',\n        'Titan-Egi',\n        'Garuda-Egi',\n        'Eos',\n        'Selene',\n        'Rook Autoturret',\n        'Bishop Autoturret',\n        'Demi-Bahamut',\n        'Demi-Phoenix',\n        'Seraph',\n        'Moonstone Carbuncle',\n        'Esteem',\n        'Automaton Queen',\n        'Bunshin',\n    ],\n    'fr': [\n        'Carbuncle émeraude',\n        'Carbuncle topaze',\n        'Ifrit-Egi',\n        'Titan-Egi',\n        'Garuda-Egi',\n        'Eos',\n        'Selene',\n        'Auto-tourelle Tour',\n        'Auto-tourelle Fou',\n        'Demi-Bahamut',\n        'Demi-Phénix',\n        'Séraphin',\n        'Carbuncle hécatolite',\n        'Estime',\n        'Automate Reine',\n        'Ombre',\n    ],\n    'ja': [\n        'カーバンクル・エメラルド',\n        'カーバンクル・トパーズ',\n        'イフリート・エギ',\n        'タイタン・エギ',\n        'ガルーダ・エギ',\n        'フェアリー・エオス',\n        'フェアリー・セレネ',\n        'オートタレット・ルーク',\n        'オートタレット・ビショップ',\n        'デミ・バハムート',\n        'デミ・フェニックス',\n        'セラフィム',\n        'カーバンクル・ムーンストーン',\n        '英雄の影身',\n        'オートマトン・クイーン',\n        '分身',\n    ],\n    'ko': [\n        '카벙클 에메랄드',\n        '카벙클 토파즈',\n        '이프리트 에기',\n        '타이탄 에기',\n        '가루다 에기',\n        '요정 에오스',\n        '요정 셀레네',\n        '자동포탑 룩',\n        '자동포탑 비숍',\n        '데미바하무트',\n        '데미피닉스',\n        '세라핌',\n        '카벙클 문스톤',\n        '영웅의 환영',\n        '자동인형 퀸',\n        '분신',\n    ],\n};\n/* harmony default export */ const pet_names = (data);\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent.ts\n\nconst fields = {\n    event: 0,\n    timestamp: 1,\n};\n/**\n * Generic class to track an FFXIV log line\n */\nclass LineEvent {\n    constructor(repo, networkLine, parts) {\n        var _a, _b, _c;\n        this.networkLine = networkLine;\n        this.offset = 0;\n        this.invalid = false;\n        this.index = 0;\n        this.decEvent = parseInt((_a = parts[fields.event]) !== null && _a !== void 0 ? _a : '0');\n        this.hexEvent = EmulatorCommon.zeroPad(this.decEvent.toString(16).toUpperCase());\n        this.timestamp = new Date((_b = parts[fields.timestamp]) !== null && _b !== void 0 ? _b : '0').getTime();\n        this.checksum = (_c = parts.slice(-1)[0]) !== null && _c !== void 0 ? _c : '';\n        repo.updateTimestamp(this.timestamp);\n        this.convertedLine = this.prefix() + (parts.join(':')).replace('|', ':');\n    }\n    prefix() {\n        return '[' + EmulatorCommon.timeToTimeString(this.timestamp, true) + '] ' + this.hexEvent + ':';\n    }\n    static isDamageHallowed(damage) {\n        return (parseInt(damage, 16) & parseInt('1000', 16)) > 0;\n    }\n    static isDamageBig(damage) {\n        return (parseInt(damage, 16) & parseInt('4000', 16)) > 0;\n    }\n    static calculateDamage(damage) {\n        if (LineEvent.isDamageHallowed(damage))\n            return 0;\n        damage = EmulatorCommon.zeroPad(damage, 8);\n        const parts = [\n            damage.substr(0, 2),\n            damage.substr(2, 2),\n            damage.substr(4, 2),\n            damage.substr(6, 2),\n        ];\n        if (!LineEvent.isDamageBig(damage))\n            return parseInt(parts.slice(0, 2).reverse().join(''), 16);\n        return parseInt((parts[3] + parts[0]) +\n            (parseInt(parts[1], 16) - parseInt(parts[3], 16)).toString(16), 16);\n    }\n}\nconst isLineEventSource = (line) => {\n    return 'isSource' in line;\n};\nconst isLineEventTarget = (line) => {\n    return 'isTarget' in line;\n};\nconst isLineEventJobLevel = (line) => {\n    return 'isJobLevel' in line;\n};\nconst isLineEventAbility = (line) => {\n    return 'isAbility' in line;\n};\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/CombatantTracker.ts\n\n\n\n\n\nclass CombatantTracker {\n    constructor(logLines, language) {\n        this.combatants = {};\n        this.partyMembers = [];\n        this.enemies = [];\n        this.others = [];\n        this.pets = [];\n        this.initialStates = {};\n        this.language = language;\n        this.firstTimestamp = Number.MAX_SAFE_INTEGER;\n        this.lastTimestamp = 0;\n        this.initialize(logLines);\n        // Clear initialStates after we initialize, we don't need it anymore\n        this.initialStates = {};\n    }\n    initialize(logLines) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        // First pass: Get list of combatants, figure out where they\n        // start at if possible\n        for (const line of logLines) {\n            this.firstTimestamp = Math.min(this.firstTimestamp, line.timestamp);\n            this.lastTimestamp = Math.max(this.lastTimestamp, line.timestamp);\n            if (isLineEventSource(line))\n                this.addCombatantFromLine(line);\n            if (isLineEventTarget(line))\n                this.addCombatantFromTargetLine(line);\n        }\n        // Between passes: Create our initial combatant states\n        for (const id in this.initialStates) {\n            const state = (_a = this.initialStates[id]) !== null && _a !== void 0 ? _a : {};\n            (_b = this.combatants[id]) === null || _b === void 0 ? void 0 : _b.pushState(this.firstTimestamp, new CombatantState(Number(state.posX), Number(state.posY), Number(state.posZ), Number(state.heading), (_c = state.targetable) !== null && _c !== void 0 ? _c : false, Number(state.hp), Number(state.maxHp), Number(state.mp), Number(state.maxMp)));\n        }\n        // Second pass: Analyze combatant information for tracking\n        const eventTracker = {};\n        for (const line of logLines) {\n            if (isLineEventSource(line)) {\n                const state = this.extractStateFromLine(line);\n                if (state) {\n                    eventTracker[line.id] = (_d = eventTracker[line.id]) !== null && _d !== void 0 ? _d : 0;\n                    ++eventTracker[line.id];\n                    (_e = this.combatants[line.id]) === null || _e === void 0 ? void 0 : _e.pushPartialState(line.timestamp, state);\n                }\n            }\n            if (isLineEventTarget(line)) {\n                const state = this.extractStateFromTargetLine(line);\n                if (state) {\n                    eventTracker[line.targetId] = (_f = eventTracker[line.targetId]) !== null && _f !== void 0 ? _f : 0;\n                    ++eventTracker[line.targetId];\n                    (_g = this.combatants[line.targetId]) === null || _g === void 0 ? void 0 : _g.pushPartialState(line.timestamp, state);\n                }\n            }\n        }\n        // Figure out party/enemy/other status\n        const petNames = pet_names[this.language];\n        this.others = this.others.filter((ID) => {\n            var _a, _b, _c, _d, _e;\n            if (((_a = this.combatants[ID]) === null || _a === void 0 ? void 0 : _a.job) !== undefined &&\n                ((_b = this.combatants[ID]) === null || _b === void 0 ? void 0 : _b.job) !== 'NONE' &&\n                ID.startsWith('1')) {\n                this.partyMembers.push(ID);\n                return false;\n            }\n            else if (petNames.includes((_d = (_c = this.combatants[ID]) === null || _c === void 0 ? void 0 : _c.name) !== null && _d !== void 0 ? _d : '')) {\n                this.pets.push(ID);\n                return false;\n            }\n            else if (((_e = eventTracker[ID]) !== null && _e !== void 0 ? _e : 0) > 0) {\n                this.enemies.push(ID);\n                return false;\n            }\n            return true;\n        });\n        // Main combatant is the one that took the most actions\n        this.mainCombatantID = this.enemies.sort((l, r) => {\n            var _a, _b;\n            return ((_a = eventTracker[r]) !== null && _a !== void 0 ? _a : 0) - ((_b = eventTracker[l]) !== null && _b !== void 0 ? _b : 0);\n        })[0];\n    }\n    addCombatantFromLine(line) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n        const combatant = this.initCombatant(line.id, line.name);\n        const initState = (_a = this.initialStates[line.id]) !== null && _a !== void 0 ? _a : {};\n        const extractedState = (_b = this.extractStateFromLine(line)) !== null && _b !== void 0 ? _b : {};\n        initState.posX = (_c = initState.posX) !== null && _c !== void 0 ? _c : extractedState.posX;\n        initState.posY = (_d = initState.posY) !== null && _d !== void 0 ? _d : extractedState.posY;\n        initState.posZ = (_e = initState.posZ) !== null && _e !== void 0 ? _e : extractedState.posZ;\n        initState.heading = (_f = initState.heading) !== null && _f !== void 0 ? _f : extractedState.heading;\n        initState.targetable = (_g = initState.targetable) !== null && _g !== void 0 ? _g : extractedState.targetable;\n        initState.hp = (_h = initState.hp) !== null && _h !== void 0 ? _h : extractedState.hp;\n        initState.maxHp = (_j = initState.maxHp) !== null && _j !== void 0 ? _j : extractedState.maxHp;\n        initState.mp = (_k = initState.mp) !== null && _k !== void 0 ? _k : extractedState.mp;\n        initState.maxMp = (_l = initState.maxMp) !== null && _l !== void 0 ? _l : extractedState.maxMp;\n        if (isLineEventJobLevel(line)) {\n            combatant.job = (_o = (_m = this.combatants[line.id]) === null || _m === void 0 ? void 0 : _m.job) !== null && _o !== void 0 ? _o : line.job;\n            combatant.level = (_q = (_p = this.combatants[line.id]) === null || _p === void 0 ? void 0 : _p.level) !== null && _q !== void 0 ? _q : line.level;\n        }\n        if (isLineEventAbility(line)) {\n            if (!combatant.job && !line.id.startsWith('4') && line.abilityId !== undefined)\n                combatant.job = CombatantJobSearch.getJob(line.abilityId);\n        }\n    }\n    addCombatantFromTargetLine(line) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        this.initCombatant(line.targetId, line.targetName);\n        const initState = (_a = this.initialStates[line.targetId]) !== null && _a !== void 0 ? _a : {};\n        const extractedState = (_b = this.extractStateFromTargetLine(line)) !== null && _b !== void 0 ? _b : {};\n        initState.posX = (_c = initState.posX) !== null && _c !== void 0 ? _c : extractedState.posX;\n        initState.posY = (_d = initState.posY) !== null && _d !== void 0 ? _d : extractedState.posY;\n        initState.posZ = (_e = initState.posZ) !== null && _e !== void 0 ? _e : extractedState.posZ;\n        initState.heading = (_f = initState.heading) !== null && _f !== void 0 ? _f : extractedState.heading;\n        initState.hp = (_g = initState.hp) !== null && _g !== void 0 ? _g : extractedState.hp;\n        initState.maxHp = (_h = initState.maxHp) !== null && _h !== void 0 ? _h : extractedState.maxHp;\n        initState.mp = (_j = initState.mp) !== null && _j !== void 0 ? _j : extractedState.mp;\n        initState.maxMp = (_k = initState.maxMp) !== null && _k !== void 0 ? _k : extractedState.maxMp;\n    }\n    extractStateFromLine(line) {\n        const state = {};\n        if (line.x !== undefined)\n            state.posX = line.x;\n        if (line.y !== undefined)\n            state.posY = line.y;\n        if (line.z !== undefined)\n            state.posZ = line.z;\n        if (line.heading !== undefined)\n            state.heading = line.heading;\n        if (line.targetable !== undefined)\n            state.targetable = line.targetable;\n        if (line.hp !== undefined)\n            state.hp = line.hp;\n        if (line.maxHp !== undefined)\n            state.maxHp = line.maxHp;\n        if (line.mp !== undefined)\n            state.mp = line.mp;\n        if (line.maxMp !== undefined)\n            state.maxMp = line.maxMp;\n        return state;\n    }\n    extractStateFromTargetLine(line) {\n        const state = {};\n        if (line.targetX !== undefined)\n            state.posX = line.targetX;\n        if (line.targetY !== undefined)\n            state.posY = line.targetY;\n        if (line.targetZ !== undefined)\n            state.posZ = line.targetZ;\n        if (line.targetHeading !== undefined)\n            state.heading = line.targetHeading;\n        if (line.targetHp !== undefined)\n            state.hp = line.targetHp;\n        if (line.targetMaxHp !== undefined)\n            state.maxHp = line.targetMaxHp;\n        if (line.targetMp !== undefined)\n            state.mp = line.targetMp;\n        if (line.targetMaxMp !== undefined)\n            state.maxMp = line.targetMaxMp;\n        return state;\n    }\n    initCombatant(id, name) {\n        let combatant = this.combatants[id];\n        if (combatant === undefined) {\n            combatant = this.combatants[id] = new Combatant(id, name);\n            this.others.push(id);\n            this.initialStates[id] = {\n                targetable: true,\n            };\n        }\n        else if (combatant.name === '') {\n            combatant.setName(name);\n        }\n        return combatant;\n    }\n    getMainCombatantName() {\n        var _a, _b;\n        if (this.mainCombatantID)\n            return (_b = (_a = this.combatants[this.mainCombatantID]) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'Unknown';\n        return 'Unknown';\n    }\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LogRepository.ts\nclass LogRepository {\n    constructor() {\n        this.Combatants = {};\n        this.firstTimestamp = Number.MAX_SAFE_INTEGER;\n    }\n    updateTimestamp(timestamp) {\n        this.firstTimestamp = Math.min(this.firstTimestamp, timestamp);\n    }\n    updateCombatant(id, c) {\n        id = id.toUpperCase();\n        if (id && id.length) {\n            let combatant = this.Combatants[id];\n            if (combatant === undefined) {\n                combatant = {\n                    name: c.name,\n                    job: c.job,\n                    spawn: c.spawn,\n                    despawn: c.despawn,\n                };\n                this.Combatants[id] = combatant;\n            }\n            else {\n                combatant.name = c.name || combatant.name;\n                combatant.job = c.job || combatant.job;\n                combatant.spawn = Math.min(combatant.spawn, c.spawn);\n                combatant.despawn = Math.max(combatant.despawn, c.despawn);\n            }\n        }\n    }\n    resolveName(id, name, fallbackId = null, fallbackName = null) {\n        var _a, _b;\n        let ret = name;\n        if (fallbackId !== null) {\n            if (id === 'E0000000' && ret === '') {\n                if (fallbackId.startsWith('4'))\n                    ret = fallbackName !== null && fallbackName !== void 0 ? fallbackName : '';\n                else\n                    ret = 'Unknown';\n            }\n        }\n        if (ret === '')\n            ret = (_b = (_a = this.Combatants[id]) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : '';\n        return ret;\n    }\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/EventBus.ts\n/**\n * This is a base class that classes can extend to inherit event bus capabilities.\n * This allows other classes to listen for events with the `on` function.\n * The inheriting class can fire those events with the `dispatch` function.\n */\nclass EventBus {\n    constructor() {\n        this.listeners = {};\n    }\n    /**\n     * Subscribe to an event\n     *\n     * @param event The event(s) to subscribe to, space separated\n     * @param callback The callback to invoke\n     * @param scope Optional. The scope to apply the function against\n     * @returns The callbacks registered to the event(s)\n     */\n    on(event, callback, scope) {\n        var _a, _b;\n        var _c;\n        const events = event.split(' ');\n        const ret = [];\n        scope = scope !== null && scope !== void 0 ? scope : (typeof window === 'undefined' ? {} : window);\n        for (const event of events) {\n            const events = (_a = (_c = this.listeners)[event]) !== null && _a !== void 0 ? _a : (_c[event] = []);\n            if (callback !== undefined)\n                events.push({ event: event, scope: scope, callback: callback });\n            ret.push(...((_b = this.listeners[event]) !== null && _b !== void 0 ? _b : []));\n        }\n        return ret;\n    }\n    /**\n     * Dispatch an event to any subscribers\n     *\n     * @param event The event to dispatch\n     * @param eventArguments The event arguments to pass to listeners\n     * @returns A promise that can be await'd or ignored\n     */\n    async dispatch(event, ...eventArguments) {\n        var _a;\n        if (this.listeners[event] === undefined)\n            return;\n        for (const l of (_a = this.listeners[event]) !== null && _a !== void 0 ? _a : []) {\n            const res = l.callback.apply(l.scope, eventArguments);\n            await Promise.resolve(res);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x00.ts\n\nconst LineEvent0x00_fields = {\n    type: 2,\n    speaker: 3,\n};\n// Chat event\nclass LineEvent0x00 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b;\n        super(repo, line, parts);\n        this.type = (_a = parts[LineEvent0x00_fields.type]) !== null && _a !== void 0 ? _a : '';\n        this.speaker = (_b = parts[LineEvent0x00_fields.speaker]) !== null && _b !== void 0 ? _b : '';\n        this.message = parts.slice(4, -1).join('|');\n        // The exact reason for this check isn't clear anymore but may be related to\n        // https://github.com/ravahn/FFXIV_ACT_Plugin/issues/250\n        if (this.message.split('\\u001f\\u001f').length > 1)\n            this.invalid = true;\n        this.convertedLine =\n            this.prefix() + this.type + ':' +\n                // If speaker is blank, it's excluded from the converted line\n                (this.speaker !== '' ? this.speaker + ':' : '') +\n                this.message.trim();\n        this.convertedLine = LineEvent00.replaceChatSymbols(this.convertedLine);\n    }\n    static replaceChatSymbols(line) {\n        for (const rep of LineEvent00.chatSymbolReplacements)\n            line = line.replace(rep.Search, rep.Replace);\n        return line;\n    }\n}\nLineEvent0x00.chatSymbolReplacements = [\n    {\n        Search: /:\\uE06F/g,\n        Replace: ':⇒',\n        Type: 'Symbol',\n    },\n    {\n        Search: / \\uE0BB\\uE05C/g,\n        Replace: ' ',\n        Type: 'Positive Effect',\n    },\n    {\n        Search: / \\uE0BB\\uE05B/g,\n        Replace: ' ',\n        Type: 'Negative Effect',\n    },\n];\nclass LineEvent00 extends LineEvent0x00 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x01.ts\n\n\nconst LineEvent0x01_fields = {\n    zoneId: 2,\n    zoneName: 3,\n};\n// Zone change event\nclass LineEvent0x01 extends LineEvent {\n    constructor(repo, networkLine, parts) {\n        var _a, _b;\n        super(repo, networkLine, parts);\n        this.zoneId = (_a = parts[LineEvent0x01_fields.zoneId]) !== null && _a !== void 0 ? _a : '';\n        this.zoneName = (_b = parts[LineEvent0x01_fields.zoneName]) !== null && _b !== void 0 ? _b : '';\n        this.zoneNameProperCase = EmulatorCommon.properCase(this.zoneName);\n        this.convertedLine = this.prefix() +\n            'Changed Zone to ' + this.zoneName + '.';\n        this.properCaseConvertedLine = this.prefix() +\n            'Changed Zone to ' + this.zoneNameProperCase + '.';\n    }\n}\nclass LineEvent01 extends LineEvent0x01 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x02.ts\n\nconst LineEvent0x02_fields = {\n    id: 2,\n    name: 3,\n};\n// Player change event\nclass LineEvent0x02 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c;\n        super(repo, line, parts);\n        this.id = (_b = (_a = parts[LineEvent0x02_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x02_fields.name]) !== null && _c !== void 0 ? _c : '';\n        this.convertedLine = this.prefix() + 'Changed primary player to ' + this.name + '.';\n    }\n}\nclass LineEvent02 extends LineEvent0x02 {\n}\n\n;// CONCATENATED MODULE: ./resources/util.ts\n// TODO: it'd be nice to not repeat job names, but at least Record enforces that all are set.\nconst nameToJobEnum = {\n    NONE: 0,\n    GLA: 1,\n    PGL: 2,\n    MRD: 3,\n    LNC: 4,\n    ARC: 5,\n    CNJ: 6,\n    THM: 7,\n    CRP: 8,\n    BSM: 9,\n    ARM: 10,\n    GSM: 11,\n    LTW: 12,\n    WVR: 13,\n    ALC: 14,\n    CUL: 15,\n    MIN: 16,\n    BTN: 17,\n    FSH: 18,\n    PLD: 19,\n    MNK: 20,\n    WAR: 21,\n    DRG: 22,\n    BRD: 23,\n    WHM: 24,\n    BLM: 25,\n    ACN: 26,\n    SMN: 27,\n    SCH: 28,\n    ROG: 29,\n    NIN: 30,\n    MCH: 31,\n    DRK: 32,\n    AST: 33,\n    SAM: 34,\n    RDM: 35,\n    BLU: 36,\n    GNB: 37,\n    DNC: 38,\n};\nconst allJobs = Object.keys(nameToJobEnum);\nconst allRoles = ['tank', 'healer', 'dps', 'crafter', 'gatherer', 'none'];\nconst tankJobs = ['GLA', 'PLD', 'MRD', 'WAR', 'DRK', 'GNB'];\nconst healerJobs = ['CNJ', 'WHM', 'SCH', 'AST'];\nconst meleeDpsJobs = ['PGL', 'MNK', 'LNC', 'DRG', 'ROG', 'NIN', 'SAM'];\nconst rangedDpsJobs = ['ARC', 'BRD', 'DNC', 'MCH'];\nconst casterDpsJobs = ['BLU', 'RDM', 'BLM', 'SMN', 'ACN', 'THM'];\nconst dpsJobs = [...meleeDpsJobs, ...rangedDpsJobs, ...casterDpsJobs];\nconst craftingJobs = ['CRP', 'BSM', 'ARM', 'GSM', 'LTW', 'WVR', 'ALC', 'CUL'];\nconst gatheringJobs = ['MIN', 'BTN', 'FSH'];\nconst stunJobs = ['BLU', ...tankJobs, ...meleeDpsJobs];\nconst silenceJobs = ['BLU', ...tankJobs, ...rangedDpsJobs];\nconst sleepJobs = ['BLM', 'BLU', ...healerJobs];\nconst feintJobs = [...meleeDpsJobs];\nconst addleJobs = [...casterDpsJobs];\nconst cleanseJobs = ['BLU', 'BRD', ...healerJobs];\nconst jobToRoleMap = (() => {\n    const addToMap = (map, jobs, role) => {\n        jobs.forEach((job) => map.set(job, role));\n    };\n    const map = new Map([['NONE', 'none']]);\n    addToMap(map, tankJobs, 'tank');\n    addToMap(map, healerJobs, 'healer');\n    addToMap(map, dpsJobs, 'dps');\n    addToMap(map, craftingJobs, 'crafter');\n    addToMap(map, gatheringJobs, 'gatherer');\n    return map;\n})();\nconst Util = {\n    jobEnumToJob: (id) => {\n        const job = allJobs.find((job) => nameToJobEnum[job] === id);\n        return job !== null && job !== void 0 ? job : 'NONE';\n    },\n    jobToJobEnum: (job) => nameToJobEnum[job],\n    jobToRole: (job) => {\n        const role = jobToRoleMap.get(job);\n        return role !== null && role !== void 0 ? role : 'none';\n    },\n    getAllRoles: () => allRoles,\n    isTankJob: (job) => tankJobs.includes(job),\n    isHealerJob: (job) => healerJobs.includes(job),\n    isMeleeDpsJob: (job) => meleeDpsJobs.includes(job),\n    isRangedDpsJob: (job) => rangedDpsJobs.includes(job),\n    isCasterDpsJob: (job) => casterDpsJobs.includes(job),\n    isDpsJob: (job) => dpsJobs.includes(job),\n    isCraftingJob: (job) => craftingJobs.includes(job),\n    isGatheringJob: (job) => gatheringJobs.includes(job),\n    isCombatJob: (job) => {\n        return !craftingJobs.includes(job) && !gatheringJobs.includes(job);\n    },\n    canStun: (job) => stunJobs.includes(job),\n    canSilence: (job) => silenceJobs.includes(job),\n    canSleep: (job) => sleepJobs.includes(job),\n    canCleanse: (job) => cleanseJobs.includes(job),\n    canFeint: (job) => feintJobs.includes(job),\n    canAddle: (job) => addleJobs.includes(job),\n};\n/* harmony default export */ const util = (Util);\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x03.ts\n\n\n\nconst LineEvent0x03_fields = {\n    id: 2,\n    name: 3,\n    jobIdHex: 4,\n    levelString: 5,\n    ownerId: 6,\n    worldId: 7,\n    worldName: 8,\n    npcNameId: 9,\n    npcBaseId: 10,\n    currentHp: 11,\n    maxHpString: 14,\n    currentMp: 13,\n    maxMpString: 14,\n    currentTp: 15,\n    maxTp: 16,\n    xString: 17,\n    yString: 18,\n    zString: 19,\n    heading: 20,\n};\n// Added combatant event\nclass LineEvent0x03 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;\n        super(repo, line, parts);\n        this.isSource = true;\n        this.isJobLevel = true;\n        this.id = (_b = (_a = parts[LineEvent0x03_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x03_fields.name]) !== null && _c !== void 0 ? _c : '';\n        this.jobIdHex = (_e = (_d = parts[LineEvent0x03_fields.jobIdHex]) === null || _d === void 0 ? void 0 : _d.toUpperCase()) !== null && _e !== void 0 ? _e : '';\n        this.jobId = parseInt(this.jobIdHex, 16);\n        this.job = util.jobEnumToJob(this.jobId);\n        this.levelString = (_f = parts[LineEvent0x03_fields.levelString]) !== null && _f !== void 0 ? _f : '';\n        this.level = parseFloat(this.levelString);\n        this.ownerId = (_h = (_g = parts[LineEvent0x03_fields.ownerId]) === null || _g === void 0 ? void 0 : _g.toUpperCase()) !== null && _h !== void 0 ? _h : '';\n        this.worldId = (_j = parts[LineEvent0x03_fields.worldId]) !== null && _j !== void 0 ? _j : '';\n        this.worldName = (_k = parts[LineEvent0x03_fields.worldName]) !== null && _k !== void 0 ? _k : '';\n        this.npcNameId = (_l = parts[LineEvent0x03_fields.npcNameId]) !== null && _l !== void 0 ? _l : '';\n        this.npcBaseId = (_m = parts[LineEvent0x03_fields.npcBaseId]) !== null && _m !== void 0 ? _m : '';\n        this.hp = parseFloat((_o = parts[LineEvent0x03_fields.currentHp]) !== null && _o !== void 0 ? _o : '');\n        this.maxHpString = (_p = parts[LineEvent0x03_fields.maxHpString]) !== null && _p !== void 0 ? _p : '';\n        this.maxHp = parseFloat(this.maxHpString);\n        this.mp = parseFloat((_q = parts[LineEvent0x03_fields.currentMp]) !== null && _q !== void 0 ? _q : '');\n        this.maxMpString = (_r = parts[LineEvent0x03_fields.maxMpString]) !== null && _r !== void 0 ? _r : '';\n        this.maxMp = parseFloat(this.maxMpString);\n        this.tp = parseFloat((_s = parts[LineEvent0x03_fields.currentTp]) !== null && _s !== void 0 ? _s : '');\n        this.maxTp = parseFloat((_t = parts[LineEvent0x03_fields.maxTp]) !== null && _t !== void 0 ? _t : '');\n        this.xString = (_u = parts[LineEvent0x03_fields.xString]) !== null && _u !== void 0 ? _u : '';\n        this.x = parseFloat(this.xString);\n        this.yString = (_v = parts[LineEvent0x03_fields.yString]) !== null && _v !== void 0 ? _v : '';\n        this.y = parseFloat(this.yString);\n        this.zString = (_w = parts[LineEvent0x03_fields.zString]) !== null && _w !== void 0 ? _w : '';\n        this.z = parseFloat(this.zString);\n        this.heading = parseFloat((_x = parts[LineEvent0x03_fields.heading]) !== null && _x !== void 0 ? _x : '');\n        repo.updateCombatant(this.id, {\n            name: this.name,\n            spawn: this.timestamp,\n            despawn: this.timestamp,\n            job: this.jobIdHex,\n        });\n        let combatantName = this.name;\n        if (this.worldName !== '')\n            combatantName = combatantName + '(' + this.worldName + ')';\n        this.convertedLine = this.prefix() + this.id.toUpperCase() +\n            ':Added new combatant ' + combatantName +\n            '.  Job: ' + this.job +\n            ' Level: ' + this.levelString +\n            ' Max HP: ' + this.maxHpString +\n            ' Max MP: ' + this.maxMpString +\n            ' Pos: (' + this.xString + ',' + this.yString + ',' + this.zString + ')';\n        // This last part is guesswork for the area between 9 and 10.\n        const unknownValue = this.npcNameId +\n            EmulatorCommon.zeroPad(this.npcBaseId, 8 + Math.max(0, 6 - this.npcNameId.length));\n        if (unknownValue !== '00000000000000')\n            this.convertedLine += ' (' + unknownValue + ')';\n        this.convertedLine += '.';\n    }\n}\nclass LineEvent03 extends LineEvent0x03 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x04.ts\n\n// Removed combatant event\n// Extend the add combatant event to reduce duplicate code since they're\n// the same from a data perspective\nclass LineEvent0x04 extends LineEvent0x03 {\n    constructor(repo, line, parts) {\n        super(repo, line, parts);\n        this.convertedLine = this.prefix() + this.id.toUpperCase() +\n            ':Removing combatant ' + this.name +\n            '. Max MP: ' + this.maxMpString +\n            '. Pos: (' + this.xString + ',' + this.yString + ',' + this.zString + ')';\n    }\n}\nclass LineEvent04 extends LineEvent0x04 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x0C.ts\n\nconst LineEvent0x0C_fields = {\n    class: 2,\n    strength: 3,\n    dexterity: 4,\n    vitality: 5,\n    intelligence: 6,\n    mind: 7,\n    piety: 8,\n    attackPower: 9,\n    directHit: 10,\n    criticalHit: 11,\n    attackMagicPotency: 12,\n    healMagicPotency: 13,\n    determination: 14,\n    skillSpeed: 15,\n    spellSpeed: 16,\n    tenacity: 18,\n};\n// Player stats event\nclass LineEvent0x0C extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n        super(repo, line, parts);\n        this.class = (_a = parts[LineEvent0x0C_fields.class]) !== null && _a !== void 0 ? _a : '';\n        this.strength = (_b = parts[LineEvent0x0C_fields.strength]) !== null && _b !== void 0 ? _b : '';\n        this.dexterity = (_c = parts[LineEvent0x0C_fields.dexterity]) !== null && _c !== void 0 ? _c : '';\n        this.vitality = (_d = parts[LineEvent0x0C_fields.vitality]) !== null && _d !== void 0 ? _d : '';\n        this.intelligence = (_e = parts[LineEvent0x0C_fields.intelligence]) !== null && _e !== void 0 ? _e : '';\n        this.mind = (_f = parts[LineEvent0x0C_fields.mind]) !== null && _f !== void 0 ? _f : '';\n        this.piety = (_g = parts[LineEvent0x0C_fields.piety]) !== null && _g !== void 0 ? _g : '';\n        this.attackPower = (_h = parts[LineEvent0x0C_fields.attackPower]) !== null && _h !== void 0 ? _h : '';\n        this.directHit = (_j = parts[LineEvent0x0C_fields.directHit]) !== null && _j !== void 0 ? _j : '';\n        this.criticalHit = (_k = parts[LineEvent0x0C_fields.criticalHit]) !== null && _k !== void 0 ? _k : '';\n        this.attackMagicPotency = (_l = parts[LineEvent0x0C_fields.attackMagicPotency]) !== null && _l !== void 0 ? _l : '';\n        this.healMagicPotency = (_m = parts[LineEvent0x0C_fields.healMagicPotency]) !== null && _m !== void 0 ? _m : '';\n        this.determination = (_o = parts[LineEvent0x0C_fields.determination]) !== null && _o !== void 0 ? _o : '';\n        this.skillSpeed = (_p = parts[LineEvent0x0C_fields.skillSpeed]) !== null && _p !== void 0 ? _p : '';\n        this.spellSpeed = (_q = parts[LineEvent0x0C_fields.spellSpeed]) !== null && _q !== void 0 ? _q : '';\n        this.tenacity = (_r = parts[LineEvent0x0C_fields.tenacity]) !== null && _r !== void 0 ? _r : '';\n        this.convertedLine = this.prefix() +\n            'Player Stats: ' + parts.slice(2, parts.length - 1).join(':').replace(/\\|/g, ':');\n    }\n}\nclass LineEvent12 extends LineEvent0x0C {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x14.ts\n\n\nconst LineEvent0x14_fields = {\n    id: 2,\n    name: 3,\n    abilityId: 4,\n    abilityName: 5,\n    targetId: 6,\n    targetName: 7,\n    duration: 8,\n};\n// Ability use event\nclass LineEvent0x14 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        super(repo, line, parts);\n        this.isSource = true;\n        this.isTarget = true;\n        this.isAbility = true;\n        this.id = (_b = (_a = parts[LineEvent0x14_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x14_fields.name]) !== null && _c !== void 0 ? _c : '';\n        this.abilityIdHex = (_e = (_d = parts[LineEvent0x14_fields.abilityId]) === null || _d === void 0 ? void 0 : _d.toUpperCase()) !== null && _e !== void 0 ? _e : '';\n        this.abilityId = parseInt(this.abilityIdHex);\n        this.abilityName = (_f = parts[LineEvent0x14_fields.abilityName]) !== null && _f !== void 0 ? _f : '';\n        this.targetId = (_h = (_g = parts[LineEvent0x14_fields.targetId]) === null || _g === void 0 ? void 0 : _g.toUpperCase()) !== null && _h !== void 0 ? _h : '';\n        this.targetName = (_j = parts[LineEvent0x14_fields.targetName]) !== null && _j !== void 0 ? _j : '';\n        this.duration = (_k = parts[LineEvent0x14_fields.duration]) !== null && _k !== void 0 ? _k : '';\n        repo.updateCombatant(this.id, {\n            job: undefined,\n            name: this.name,\n            spawn: this.timestamp,\n            despawn: this.timestamp,\n        });\n        repo.updateCombatant(this.targetId, {\n            job: undefined,\n            name: this.targetName,\n            spawn: this.timestamp,\n            despawn: this.timestamp,\n        });\n        const target = this.targetName.length === 0 ? 'Unknown' : this.targetName;\n        this.convertedLine = this.prefix() + this.abilityIdHex +\n            ':' + this.name +\n            ' starts using ' + this.abilityName +\n            ' on ' + target + '.';\n        this.properCaseConvertedLine = this.prefix() + this.abilityIdHex +\n            ':' + EmulatorCommon.properCase(this.name) +\n            ' starts using ' + this.abilityName +\n            ' on ' + EmulatorCommon.properCase(target) + '.';\n    }\n}\nclass LineEvent20 extends LineEvent0x14 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x15.ts\n\nconst LineEvent0x15_fields = {\n    id: 2,\n    name: 3,\n    flags: 8,\n    damage: 9,\n    abilityId: 4,\n    abilityName: 5,\n    targetId: 6,\n    targetName: 7,\n    targetHp: 24,\n    targetMaxHp: 25,\n    targetMp: 26,\n    targetMaxMp: 27,\n    targetX: 30,\n    targetY: 31,\n    targetZ: 32,\n    targetHeading: 33,\n    sourceHp: 34,\n    sourceMaxHp: 35,\n    sourceMp: 36,\n    sourceMaxMp: 37,\n    x: 40,\n    y: 41,\n    z: 42,\n    heading: 43,\n};\n// Ability hit single target event\nclass LineEvent0x15 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;\n        super(repo, line, parts);\n        this.isSource = true;\n        this.isTarget = true;\n        this.isAbility = true;\n        this.id = (_b = (_a = parts[LineEvent0x15_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x15_fields.name]) !== null && _c !== void 0 ? _c : '';\n        this.flags = (_d = parts[LineEvent0x15_fields.flags]) !== null && _d !== void 0 ? _d : '';\n        const fieldOffset = this.flags === '3F' ? 2 : 0;\n        this.damage = LineEvent.calculateDamage((_e = parts[LineEvent0x15_fields.damage + fieldOffset]) !== null && _e !== void 0 ? _e : '');\n        this.abilityId = parseInt((_g = (_f = parts[LineEvent0x15_fields.abilityId]) === null || _f === void 0 ? void 0 : _f.toUpperCase()) !== null && _g !== void 0 ? _g : '');\n        this.abilityName = (_h = parts[LineEvent0x15_fields.abilityName]) !== null && _h !== void 0 ? _h : '';\n        this.targetId = (_k = (_j = parts[LineEvent0x15_fields.targetId]) === null || _j === void 0 ? void 0 : _j.toUpperCase()) !== null && _k !== void 0 ? _k : '';\n        this.targetName = (_l = parts[LineEvent0x15_fields.targetName]) !== null && _l !== void 0 ? _l : '';\n        this.targetHp = parseInt((_m = parts[LineEvent0x15_fields.targetHp + fieldOffset]) !== null && _m !== void 0 ? _m : '');\n        this.targetMaxHp = parseInt((_o = parts[LineEvent0x15_fields.targetMaxHp + fieldOffset]) !== null && _o !== void 0 ? _o : '');\n        this.targetMp = parseInt((_p = parts[LineEvent0x15_fields.targetMp + fieldOffset]) !== null && _p !== void 0 ? _p : '');\n        this.targetMaxMp = parseInt((_q = parts[LineEvent0x15_fields.targetMaxMp + fieldOffset]) !== null && _q !== void 0 ? _q : '');\n        this.targetX = parseFloat((_r = parts[LineEvent0x15_fields.targetX + fieldOffset]) !== null && _r !== void 0 ? _r : '');\n        this.targetY = parseFloat((_s = parts[LineEvent0x15_fields.targetY + fieldOffset]) !== null && _s !== void 0 ? _s : '');\n        this.targetZ = parseFloat((_t = parts[LineEvent0x15_fields.targetZ + fieldOffset]) !== null && _t !== void 0 ? _t : '');\n        this.targetHeading = parseFloat((_u = parts[LineEvent0x15_fields.targetHeading + fieldOffset]) !== null && _u !== void 0 ? _u : '');\n        this.hp = parseInt((_v = parts[LineEvent0x15_fields.sourceHp + fieldOffset]) !== null && _v !== void 0 ? _v : '');\n        this.maxHp = parseInt((_w = parts[LineEvent0x15_fields.sourceMaxHp + fieldOffset]) !== null && _w !== void 0 ? _w : '');\n        this.mp = parseInt((_x = parts[LineEvent0x15_fields.sourceMp + fieldOffset]) !== null && _x !== void 0 ? _x : '');\n        this.maxMp = parseInt((_y = parts[LineEvent0x15_fields.sourceMaxMp + fieldOffset]) !== null && _y !== void 0 ? _y : '');\n        this.x = parseFloat((_z = parts[LineEvent0x15_fields.x + fieldOffset]) !== null && _z !== void 0 ? _z : '');\n        this.y = parseFloat((_0 = parts[LineEvent0x15_fields.y + fieldOffset]) !== null && _0 !== void 0 ? _0 : '');\n        this.z = parseFloat((_1 = parts[LineEvent0x15_fields.z + fieldOffset]) !== null && _1 !== void 0 ? _1 : '');\n        this.heading = parseFloat((_2 = parts[LineEvent0x15_fields.heading + fieldOffset]) !== null && _2 !== void 0 ? _2 : '');\n        repo.updateCombatant(this.id, {\n            job: undefined,\n            name: this.name,\n            spawn: this.timestamp,\n            despawn: this.timestamp,\n        });\n        repo.updateCombatant(this.targetId, {\n            job: undefined,\n            name: this.targetName,\n            spawn: this.timestamp,\n            despawn: this.timestamp,\n        });\n    }\n}\nclass LineEvent21 extends LineEvent0x15 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x16.ts\n\n// Ability hit multiple/no target event\n// Duplicate of 0x15 as far as data\nclass LineEvent0x16 extends LineEvent0x15 {\n    constructor(repo, line, parts) {\n        super(repo, line, parts);\n    }\n}\nclass LineEvent22 extends LineEvent0x16 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x17.ts\n\nconst LineEvent0x17_fields = {\n    id: 2,\n    name: 3,\n    abilityId: 4,\n    abilityName: 5,\n    reason: 6,\n};\n// Cancel ability event\nclass LineEvent0x17 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        super(repo, line, parts);\n        this.isSource = true;\n        this.isAbility = true;\n        this.id = (_b = (_a = parts[LineEvent0x17_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x17_fields.name]) !== null && _c !== void 0 ? _c : '';\n        this.abilityId = parseInt((_e = (_d = parts[LineEvent0x17_fields.abilityId]) === null || _d === void 0 ? void 0 : _d.toUpperCase()) !== null && _e !== void 0 ? _e : '');\n        this.abilityName = (_f = parts[LineEvent0x17_fields.abilityName]) !== null && _f !== void 0 ? _f : '';\n        this.reason = (_g = parts[LineEvent0x17_fields.reason]) !== null && _g !== void 0 ? _g : '';\n    }\n}\nclass LineEvent23 extends LineEvent0x17 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x18.ts\n\n\nconst LineEvent0x18_fields = {\n    id: 2,\n    name: 3,\n    type: 4,\n    effectId: 5,\n    damage: 6,\n    currentHp: 7,\n    maxHp: 8,\n    currentMp: 9,\n    maxMp: 10,\n    currentTp: 11,\n    maxTp: 12,\n    x: 13,\n    y: 14,\n    z: 15,\n    heading: 16,\n};\n// DoT/HoT event\nclass LineEvent0x18 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n        super(repo, line, parts);\n        this.isSource = true;\n        this.id = (_b = (_a = parts[LineEvent0x18_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x18_fields.name]) !== null && _c !== void 0 ? _c : '';\n        this.type = (_d = parts[LineEvent0x18_fields.type]) !== null && _d !== void 0 ? _d : '';\n        this.effectId = (_f = (_e = parts[LineEvent0x18_fields.effectId]) === null || _e === void 0 ? void 0 : _e.toUpperCase()) !== null && _f !== void 0 ? _f : '';\n        this.damage = parseInt((_g = parts[LineEvent0x18_fields.damage]) !== null && _g !== void 0 ? _g : '', 16);\n        this.hp = parseInt((_h = parts[LineEvent0x18_fields.currentHp]) !== null && _h !== void 0 ? _h : '');\n        this.maxHp = parseInt((_j = parts[LineEvent0x18_fields.maxHp]) !== null && _j !== void 0 ? _j : '');\n        this.mp = parseInt((_k = parts[LineEvent0x18_fields.currentMp]) !== null && _k !== void 0 ? _k : '');\n        this.maxMp = parseInt((_l = parts[LineEvent0x18_fields.maxMp]) !== null && _l !== void 0 ? _l : '');\n        this.tp = parseInt((_m = parts[LineEvent0x18_fields.currentTp]) !== null && _m !== void 0 ? _m : '');\n        this.maxTp = parseInt((_o = parts[LineEvent0x18_fields.maxTp]) !== null && _o !== void 0 ? _o : '');\n        this.x = parseFloat((_p = parts[LineEvent0x18_fields.x]) !== null && _p !== void 0 ? _p : '');\n        this.y = parseFloat((_q = parts[LineEvent0x18_fields.y]) !== null && _q !== void 0 ? _q : '');\n        this.z = parseFloat((_r = parts[LineEvent0x18_fields.z]) !== null && _r !== void 0 ? _r : '');\n        this.heading = parseFloat((_s = parts[LineEvent0x18_fields.heading]) !== null && _s !== void 0 ? _s : '');\n        repo.updateCombatant(this.id, {\n            job: undefined,\n            name: this.name,\n            spawn: this.timestamp,\n            despawn: this.timestamp,\n        });\n        let effectName = '';\n        const resolvedName = repo.resolveName(this.id, this.name);\n        if (this.effectId in LineEvent0x18.showEffectNamesFor)\n            effectName = (_t = LineEvent0x18.showEffectNamesFor[this.effectId]) !== null && _t !== void 0 ? _t : '';\n        let effectPart = '';\n        if (effectName)\n            effectPart = effectName + ' ';\n        this.convertedLine = this.prefix() + effectPart + this.type +\n            ' Tick on ' + resolvedName +\n            ' for ' + this.damage.toString() + ' damage.';\n        this.properCaseConvertedLine = this.prefix() + effectPart + this.type +\n            ' Tick on ' + EmulatorCommon.properCase(resolvedName) +\n            ' for ' + this.damage.toString() + ' damage.';\n    }\n}\nLineEvent0x18.showEffectNamesFor = {\n    '4C4': 'Excognition',\n    '35D': 'Wildfire',\n    '1F5': 'Doton',\n    '2ED': 'Salted Earth',\n    '4B5': 'Flamethrower',\n    '2E3': 'Asylum',\n    '777': 'Asylum',\n    '798': 'Sacred Soil',\n    '4C7': 'Fey Union',\n    '742': 'Nascent Glint',\n};\nclass LineEvent24 extends LineEvent0x18 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x19.ts\n\n\nconst LineEvent0x19_fields = {\n    id: 2,\n    name: 3,\n    targetId: 4,\n    targetName: 5,\n};\n// Combatant defeated event\nclass LineEvent0x19 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f;\n        super(repo, line, parts);\n        this.id = (_b = (_a = parts[LineEvent0x19_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x19_fields.name]) !== null && _c !== void 0 ? _c : '';\n        this.targetId = (_e = (_d = parts[LineEvent0x19_fields.targetId]) === null || _d === void 0 ? void 0 : _d.toUpperCase()) !== null && _e !== void 0 ? _e : '';\n        this.targetName = (_f = parts[LineEvent0x19_fields.targetName]) !== null && _f !== void 0 ? _f : '';\n        repo.updateCombatant(this.id, {\n            job: undefined,\n            name: this.name,\n            spawn: this.timestamp,\n            despawn: this.timestamp,\n        });\n        repo.updateCombatant(this.targetId, {\n            job: undefined,\n            name: this.targetName,\n            spawn: this.timestamp,\n            despawn: this.timestamp,\n        });\n        let resolvedName = undefined;\n        let resolvedTargetName = undefined;\n        if (this.id !== '00')\n            resolvedName = repo.resolveName(this.id, this.name);\n        if (this.targetId !== '00')\n            resolvedTargetName = repo.resolveName(this.targetId, this.targetName);\n        const defeatedName = (resolvedName !== null && resolvedName !== void 0 ? resolvedName : this.name);\n        const killerName = (resolvedTargetName !== null && resolvedTargetName !== void 0 ? resolvedTargetName : this.targetName);\n        this.convertedLine = this.prefix() + defeatedName +\n            ' was defeated by ' + killerName + '.';\n        this.properCaseConvertedLine = this.prefix() + EmulatorCommon.properCase(defeatedName) +\n            ' was defeated by ' + EmulatorCommon.properCase(killerName) + '.';\n    }\n}\nclass LineEvent25 extends LineEvent0x19 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1A.ts\n\n\nconst LineEvent0x1A_fields = {\n    abilityId: 2,\n    abilityName: 3,\n    durationString: 4,\n    id: 5,\n    name: 6,\n    targetId: 7,\n    targetName: 8,\n    stacks: 9,\n    targetHp: 10,\n    sourceHp: 11,\n};\n// Gain status effect event\n// Deliberately don't flag this as LineEventSource or LineEventTarget\n// because 0x1A line values aren't accurate\nclass LineEvent0x1A extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n        super(repo, line, parts);\n        this.isAbility = true;\n        this.abilityId = parseInt((_b = (_a = parts[LineEvent0x1A_fields.abilityId]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '');\n        this.abilityName = (_c = parts[LineEvent0x1A_fields.abilityName]) !== null && _c !== void 0 ? _c : '';\n        this.durationString = (_d = parts[LineEvent0x1A_fields.durationString]) !== null && _d !== void 0 ? _d : '';\n        this.durationFloat = parseFloat(this.durationString);\n        this.id = (_f = (_e = parts[LineEvent0x1A_fields.id]) === null || _e === void 0 ? void 0 : _e.toUpperCase()) !== null && _f !== void 0 ? _f : '';\n        this.name = (_g = parts[LineEvent0x1A_fields.name]) !== null && _g !== void 0 ? _g : '';\n        this.targetId = (_j = (_h = parts[LineEvent0x1A_fields.targetId]) === null || _h === void 0 ? void 0 : _h.toUpperCase()) !== null && _j !== void 0 ? _j : '';\n        this.targetName = (_k = parts[LineEvent0x1A_fields.targetName]) !== null && _k !== void 0 ? _k : '';\n        this.stacks = parseInt((_l = parts[LineEvent0x1A_fields.stacks]) !== null && _l !== void 0 ? _l : '0');\n        this.targetHp = parseInt((_m = parts[LineEvent0x1A_fields.targetHp]) !== null && _m !== void 0 ? _m : '');\n        this.hp = parseInt((_o = parts[LineEvent0x1A_fields.sourceHp]) !== null && _o !== void 0 ? _o : '');\n        repo.updateCombatant(this.id, {\n            name: this.name,\n            spawn: this.timestamp,\n            despawn: this.timestamp,\n            job: undefined,\n        });\n        repo.updateCombatant(this.targetId, {\n            name: this.targetName,\n            spawn: this.timestamp,\n            despawn: this.timestamp,\n            job: undefined,\n        });\n        this.resolvedName = repo.resolveName(this.id, this.name);\n        this.resolvedTargetName = repo.resolveName(this.targetId, this.targetName);\n        this.fallbackResolvedTargetName =\n            repo.resolveName(this.id, this.name, this.targetId, this.targetName);\n        let stackCountText = '';\n        if (this.stacks > 0 && this.stacks < 20 &&\n            LineEvent0x1A.showStackCountFor.includes(this.abilityId))\n            stackCountText = ' (' + this.stacks.toString() + ')';\n        this.convertedLine = this.prefix() + this.targetId +\n            ':' + this.targetName +\n            ' gains the effect of ' + this.abilityName +\n            ' from ' + this.fallbackResolvedTargetName +\n            ' for ' + this.durationString + ' Seconds.' + stackCountText;\n        this.properCaseConvertedLine = this.prefix() + this.targetId +\n            ':' + EmulatorCommon.properCase(this.targetName) +\n            ' gains the effect of ' + this.abilityName +\n            ' from ' + EmulatorCommon.properCase(this.fallbackResolvedTargetName) +\n            ' for ' + this.durationString + ' Seconds.' + stackCountText;\n    }\n}\nLineEvent0x1A.showStackCountFor = [\n    304,\n    406,\n    350,\n    714,\n    505,\n    1239,\n    1297,\n];\nclass LineEvent26 extends LineEvent0x1A {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1B.ts\n\nconst LineEvent0x1B_fields = {\n    targetId: 2,\n    targetName: 3,\n    headmarkerId: 6,\n};\n// Head marker event\nclass LineEvent0x1B extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d;\n        super(repo, line, parts);\n        this.isSource = true;\n        this.id = (_b = (_a = parts[LineEvent0x1B_fields.targetId]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x1B_fields.targetName]) !== null && _c !== void 0 ? _c : '';\n        this.headmarkerId = (_d = parts[LineEvent0x1B_fields.headmarkerId]) !== null && _d !== void 0 ? _d : '';\n    }\n}\nclass LineEvent27 extends LineEvent0x1B {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1C.ts\n\nconst LineEvent0x1C_fields = {\n    operation: 2,\n    waymark: 3,\n    id: 4,\n    name: 5,\n    x: 6,\n    y: 7,\n    z: 8,\n};\n// Floor waymarker event\nclass LineEvent0x1C extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        super(repo, line, parts);\n        this.operation = (_a = parts[LineEvent0x1C_fields.operation]) !== null && _a !== void 0 ? _a : '';\n        this.waymark = (_b = parts[LineEvent0x1C_fields.waymark]) !== null && _b !== void 0 ? _b : '';\n        this.id = (_d = (_c = parts[LineEvent0x1C_fields.id]) === null || _c === void 0 ? void 0 : _c.toUpperCase()) !== null && _d !== void 0 ? _d : '';\n        this.name = (_e = parts[LineEvent0x1C_fields.name]) !== null && _e !== void 0 ? _e : '';\n        this.x = (_f = parts[LineEvent0x1C_fields.x]) !== null && _f !== void 0 ? _f : '';\n        this.y = (_g = parts[LineEvent0x1C_fields.y]) !== null && _g !== void 0 ? _g : '';\n        this.z = (_h = parts[LineEvent0x1C_fields.z]) !== null && _h !== void 0 ? _h : '';\n    }\n}\nclass LineEvent28 extends LineEvent0x1C {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1D.ts\n\nconst LineEvent0x1D_fields = {\n    operation: 2,\n    waymark: 3,\n    id: 4,\n    name: 5,\n    targetId: 6,\n    targetName: 7,\n};\n// Waymarker\nclass LineEvent0x1D extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        super(repo, line, parts);\n        this.operation = (_a = parts[LineEvent0x1D_fields.operation]) !== null && _a !== void 0 ? _a : '';\n        this.waymark = (_b = parts[LineEvent0x1D_fields.waymark]) !== null && _b !== void 0 ? _b : '';\n        this.id = (_d = (_c = parts[LineEvent0x1D_fields.id]) === null || _c === void 0 ? void 0 : _c.toUpperCase()) !== null && _d !== void 0 ? _d : '';\n        this.name = (_e = parts[LineEvent0x1D_fields.name]) !== null && _e !== void 0 ? _e : '';\n        this.targetId = (_g = (_f = parts[LineEvent0x1D_fields.targetId]) === null || _f === void 0 ? void 0 : _f.toUpperCase()) !== null && _g !== void 0 ? _g : '';\n        this.targetName = (_h = parts[LineEvent0x1D_fields.targetName]) !== null && _h !== void 0 ? _h : '';\n    }\n}\nclass LineEvent29 extends LineEvent0x1D {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1E.ts\n\n\n// Lose status effect event\n// Extend the gain status event to reduce duplicate code since they're\n// the same from a data perspective\nclass LineEvent0x1E extends LineEvent0x1A {\n    constructor(repo, line, parts) {\n        super(repo, line, parts);\n        let stackCountText = '';\n        if (this.stacks > 0 && this.stacks < 20 &&\n            LineEvent0x1A.showStackCountFor.includes(this.abilityId))\n            stackCountText = ' (' + this.stacks.toString() + ')';\n        this.convertedLine = this.prefix() + this.targetId +\n            ':' + this.targetName +\n            ' loses the effect of ' + this.abilityName +\n            ' from ' + this.fallbackResolvedTargetName +\n            ' for ' + this.durationString + ' Seconds.' + stackCountText;\n        this.properCaseConvertedLine = this.prefix() + this.targetId +\n            ':' + EmulatorCommon.properCase(this.targetName) +\n            ' loses the effect of ' + this.abilityName +\n            ' from ' + EmulatorCommon.properCase(this.fallbackResolvedTargetName) +\n            ' for ' + this.durationString + ' Seconds.' + stackCountText;\n    }\n}\nclass LineEvent30 extends LineEvent0x1E {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x1F.ts\n\n\nconst splitFunc = (s) => [\n    s.substr(6, 2),\n    s.substr(4, 2),\n    s.substr(2, 2),\n    s.substr(0, 2),\n];\nconst LineEvent0x1F_fields = {\n    id: 2,\n    dataBytes1: 3,\n    dataBytes2: 4,\n    dataBytes3: 5,\n    dataBytes4: 6,\n};\n// Job gauge event\nclass LineEvent0x1F extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        super(repo, line, parts);\n        this.id = (_b = (_a = parts[LineEvent0x1F_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.dataBytes1 = EmulatorCommon.zeroPad((_c = parts[LineEvent0x1F_fields.dataBytes1]) !== null && _c !== void 0 ? _c : '');\n        this.dataBytes2 = EmulatorCommon.zeroPad((_d = parts[LineEvent0x1F_fields.dataBytes2]) !== null && _d !== void 0 ? _d : '');\n        this.dataBytes3 = EmulatorCommon.zeroPad((_e = parts[LineEvent0x1F_fields.dataBytes3]) !== null && _e !== void 0 ? _e : '');\n        this.dataBytes4 = EmulatorCommon.zeroPad((_f = parts[LineEvent0x1F_fields.dataBytes4]) !== null && _f !== void 0 ? _f : '');\n        this.jobGaugeBytes = [\n            ...splitFunc(this.dataBytes1),\n            ...splitFunc(this.dataBytes2),\n            ...splitFunc(this.dataBytes3),\n            ...splitFunc(this.dataBytes4),\n        ];\n        this.name = ((_g = repo.Combatants[this.id]) === null || _g === void 0 ? void 0 : _g.name) || '';\n        repo.updateCombatant(this.id, {\n            name: (_h = repo.Combatants[this.id]) === null || _h === void 0 ? void 0 : _h.name,\n            spawn: this.timestamp,\n            despawn: this.timestamp,\n            job: (_j = this.jobGaugeBytes[0]) === null || _j === void 0 ? void 0 : _j.toUpperCase(),\n        });\n        this.convertedLine = this.prefix() +\n            this.id + ':' + this.name +\n            ':' + this.dataBytes1 +\n            ':' + this.dataBytes2 +\n            ':' + this.dataBytes3 +\n            ':' + this.dataBytes4;\n        this.properCaseConvertedLine = this.prefix() +\n            this.id + ':' + (EmulatorCommon.properCase(this.name)) +\n            ':' + this.dataBytes1 +\n            ':' + this.dataBytes2 +\n            ':' + this.dataBytes3 +\n            ':' + this.dataBytes4;\n    }\n}\nclass LineEvent31 extends LineEvent0x1F {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x22.ts\n\nconst LineEvent0x22_fields = {\n    id: 2,\n    name: 3,\n    targetId: 4,\n    targetName: 5,\n    targetable: 6,\n};\n// Nameplate toggle\nclass LineEvent0x22 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        super(repo, line, parts);\n        this.isSource = true;\n        this.id = (_b = (_a = parts[LineEvent0x22_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x22_fields.name]) !== null && _c !== void 0 ? _c : '';\n        this.targetId = (_e = (_d = parts[LineEvent0x22_fields.targetId]) === null || _d === void 0 ? void 0 : _d.toUpperCase()) !== null && _e !== void 0 ? _e : '';\n        this.targetName = (_f = parts[LineEvent0x22_fields.targetName]) !== null && _f !== void 0 ? _f : '';\n        this.targetable = !!parseInt((_g = parts[LineEvent0x22_fields.targetable]) !== null && _g !== void 0 ? _g : '', 16);\n    }\n}\nclass LineEvent34 extends LineEvent0x22 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x23.ts\n\nconst LineEvent0x23_fields = {\n    id: 2,\n    name: 3,\n    targetId: 4,\n    targetName: 5,\n    tetherId: 8,\n};\n// Tether event\nclass LineEvent0x23 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        super(repo, line, parts);\n        this.id = (_b = (_a = parts[LineEvent0x23_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x23_fields.name]) !== null && _c !== void 0 ? _c : '';\n        this.targetId = (_e = (_d = parts[LineEvent0x23_fields.targetId]) === null || _d === void 0 ? void 0 : _d.toUpperCase()) !== null && _e !== void 0 ? _e : '';\n        this.targetName = (_f = parts[LineEvent0x23_fields.targetName]) !== null && _f !== void 0 ? _f : '';\n        this.tetherId = (_g = parts[LineEvent0x23_fields.tetherId]) !== null && _g !== void 0 ? _g : '';\n    }\n}\nclass LineEvent35 extends LineEvent0x23 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x24.ts\n\nconst LineEvent0x24_fields = {\n    valueHex: 2,\n    bars: 3,\n};\n// Limit gauge event\nclass LineEvent0x24 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b;\n        super(repo, line, parts);\n        this.valueHex = (_a = parts[LineEvent0x24_fields.valueHex]) !== null && _a !== void 0 ? _a : '';\n        this.valueDec = parseInt(this.valueHex, 16);\n        this.bars = (_b = parts[LineEvent0x24_fields.bars]) !== null && _b !== void 0 ? _b : '';\n        this.convertedLine = this.prefix() + 'Limit Break: ' + this.valueHex;\n    }\n}\nclass LineEvent36 extends LineEvent0x24 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x25.ts\n\nconst LineEvent0x25_fields = {\n    id: 2,\n    name: 3,\n    sequenceId: 4,\n    currentHp: 5,\n    maxHp: 6,\n    currentMp: 7,\n    maxMp: 8,\n    currentTp: 9,\n    maxTp: 10,\n    x: 11,\n    y: 12,\n    z: 13,\n    heading: 14,\n};\n// Action sync event\nclass LineEvent0x25 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n        super(repo, line, parts);\n        this.isSource = true;\n        this.id = (_b = (_a = parts[LineEvent0x25_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x25_fields.name]) !== null && _c !== void 0 ? _c : '';\n        this.sequenceId = (_d = parts[LineEvent0x25_fields.sequenceId]) !== null && _d !== void 0 ? _d : '';\n        this.hp = parseInt((_e = parts[LineEvent0x25_fields.currentHp]) !== null && _e !== void 0 ? _e : '');\n        this.maxHp = parseInt((_f = parts[LineEvent0x25_fields.maxHp]) !== null && _f !== void 0 ? _f : '');\n        this.mp = parseInt((_g = parts[LineEvent0x25_fields.currentMp]) !== null && _g !== void 0 ? _g : '');\n        this.maxMp = parseInt((_h = parts[LineEvent0x25_fields.maxMp]) !== null && _h !== void 0 ? _h : '');\n        this.tp = parseInt((_j = parts[LineEvent0x25_fields.currentTp]) !== null && _j !== void 0 ? _j : '');\n        this.maxTp = parseInt((_k = parts[LineEvent0x25_fields.maxTp]) !== null && _k !== void 0 ? _k : '');\n        this.x = parseFloat((_l = parts[LineEvent0x25_fields.x]) !== null && _l !== void 0 ? _l : '');\n        this.y = parseFloat((_m = parts[LineEvent0x25_fields.y]) !== null && _m !== void 0 ? _m : '');\n        this.z = parseFloat((_o = parts[LineEvent0x25_fields.z]) !== null && _o !== void 0 ? _o : '');\n        this.heading = parseFloat((_p = parts[LineEvent0x25_fields.heading]) !== null && _p !== void 0 ? _p : '');\n    }\n}\nclass LineEvent37 extends LineEvent0x25 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x26.ts\n\n\n\nconst LineEvent0x26_fields = {\n    id: 2,\n    name: 3,\n    jobLevelData: 4,\n    currentHp: 5,\n    maxHp: 6,\n    currentMp: 7,\n    maxMp: 8,\n    currentTp: 9,\n    maxTp: 10,\n    x: 11,\n    y: 12,\n    z: 13,\n    heading: 14,\n};\n// Network status effect event\nclass LineEvent0x26 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n        super(repo, line, parts);\n        this.isSource = true;\n        this.isJobLevel = true;\n        this.id = (_b = (_a = parts[LineEvent0x26_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x26_fields.name]) !== null && _c !== void 0 ? _c : '';\n        this.jobLevelData = (_d = parts[LineEvent0x26_fields.jobLevelData]) !== null && _d !== void 0 ? _d : '';\n        this.hp = parseInt((_e = parts[LineEvent0x26_fields.currentHp]) !== null && _e !== void 0 ? _e : '');\n        this.maxHp = parseInt((_f = parts[LineEvent0x26_fields.maxHp]) !== null && _f !== void 0 ? _f : '');\n        this.mp = parseInt((_g = parts[LineEvent0x26_fields.currentMp]) !== null && _g !== void 0 ? _g : '');\n        this.maxMp = parseInt((_h = parts[LineEvent0x26_fields.maxMp]) !== null && _h !== void 0 ? _h : '');\n        this.tp = parseInt((_j = parts[LineEvent0x26_fields.currentTp]) !== null && _j !== void 0 ? _j : '');\n        this.maxTp = parseInt((_k = parts[LineEvent0x26_fields.maxTp]) !== null && _k !== void 0 ? _k : '');\n        this.x = parseFloat((_l = parts[LineEvent0x26_fields.x]) !== null && _l !== void 0 ? _l : '');\n        this.y = parseFloat((_m = parts[LineEvent0x26_fields.y]) !== null && _m !== void 0 ? _m : '');\n        this.z = parseFloat((_o = parts[LineEvent0x26_fields.z]) !== null && _o !== void 0 ? _o : '');\n        this.heading = parseFloat((_p = parts[LineEvent0x26_fields.heading]) !== null && _p !== void 0 ? _p : '');\n        const padded = EmulatorCommon.zeroPad(this.jobLevelData, 8);\n        this.jobIdHex = padded.substr(6, 2).toUpperCase();\n        this.jobId = parseInt(this.jobIdHex, 16);\n        this.job = util.jobEnumToJob(this.jobId);\n        this.level = parseInt(padded.substr(4, 2), 16);\n    }\n}\nclass LineEvent38 extends LineEvent0x26 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/LineEvent0x27.ts\n\nconst LineEvent0x27_fields = {\n    id: 2,\n    name: 3,\n    currentHp: 4,\n    maxHp: 5,\n    currentMp: 6,\n    maxMp: 7,\n    currentTp: 8,\n    maxTp: 9,\n    x: 10,\n    y: 11,\n    z: 12,\n    heading: 13,\n};\n// Network update hp event\nclass LineEvent0x27 extends LineEvent {\n    constructor(repo, line, parts) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n        super(repo, line, parts);\n        this.isSource = true;\n        this.id = (_b = (_a = parts[LineEvent0x27_fields.id]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '';\n        this.name = (_c = parts[LineEvent0x27_fields.name]) !== null && _c !== void 0 ? _c : '';\n        this.hp = parseInt((_d = parts[LineEvent0x27_fields.currentHp]) !== null && _d !== void 0 ? _d : '');\n        this.maxHp = parseInt((_e = parts[LineEvent0x27_fields.maxHp]) !== null && _e !== void 0 ? _e : '');\n        this.mp = parseInt((_f = parts[LineEvent0x27_fields.currentMp]) !== null && _f !== void 0 ? _f : '');\n        this.maxMp = parseInt((_g = parts[LineEvent0x27_fields.maxMp]) !== null && _g !== void 0 ? _g : '');\n        this.tp = parseInt((_h = parts[LineEvent0x27_fields.currentTp]) !== null && _h !== void 0 ? _h : '');\n        this.maxTp = parseInt((_j = parts[LineEvent0x27_fields.maxTp]) !== null && _j !== void 0 ? _j : '');\n        this.x = parseFloat((_k = parts[LineEvent0x27_fields.x]) !== null && _k !== void 0 ? _k : '');\n        this.y = parseFloat((_l = parts[LineEvent0x27_fields.y]) !== null && _l !== void 0 ? _l : '');\n        this.z = parseFloat((_m = parts[LineEvent0x27_fields.z]) !== null && _m !== void 0 ? _m : '');\n        this.heading = parseFloat((_o = parts[LineEvent0x27_fields.heading]) !== null && _o !== void 0 ? _o : '');\n    }\n}\nclass LineEvent39 extends LineEvent0x27 {\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/network_log_converter/ParseLine.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass ParseLine {\n    static parse(repo, line) {\n        let ret;\n        const parts = line.split('|');\n        const event = parts[0];\n        // Don't parse raw network packet lines\n        if (!event || event === '252')\n            return;\n        // This is ugly, but Webpack prefers being explicit\n        switch ('LineEvent' + event) {\n            case 'LineEvent00':\n                ret = new LineEvent00(repo, line, parts);\n                break;\n            case 'LineEvent01':\n                ret = new LineEvent01(repo, line, parts);\n                break;\n            case 'LineEvent02':\n                ret = new LineEvent02(repo, line, parts);\n                break;\n            case 'LineEvent03':\n                ret = new LineEvent03(repo, line, parts);\n                break;\n            case 'LineEvent04':\n                ret = new LineEvent04(repo, line, parts);\n                break;\n            case 'LineEvent12':\n                ret = new LineEvent12(repo, line, parts);\n                break;\n            case 'LineEvent20':\n                ret = new LineEvent20(repo, line, parts);\n                break;\n            case 'LineEvent21':\n                ret = new LineEvent21(repo, line, parts);\n                break;\n            case 'LineEvent22':\n                ret = new LineEvent22(repo, line, parts);\n                break;\n            case 'LineEvent23':\n                ret = new LineEvent23(repo, line, parts);\n                break;\n            case 'LineEvent24':\n                ret = new LineEvent24(repo, line, parts);\n                break;\n            case 'LineEvent25':\n                ret = new LineEvent25(repo, line, parts);\n                break;\n            case 'LineEvent26':\n                ret = new LineEvent26(repo, line, parts);\n                break;\n            case 'LineEvent27':\n                ret = new LineEvent27(repo, line, parts);\n                break;\n            case 'LineEvent28':\n                ret = new LineEvent28(repo, line, parts);\n                break;\n            case 'LineEvent29':\n                ret = new LineEvent29(repo, line, parts);\n                break;\n            case 'LineEvent30':\n                ret = new LineEvent30(repo, line, parts);\n                break;\n            case 'LineEvent31':\n                ret = new LineEvent31(repo, line, parts);\n                break;\n            case 'LineEvent34':\n                ret = new LineEvent34(repo, line, parts);\n                break;\n            case 'LineEvent35':\n                ret = new LineEvent35(repo, line, parts);\n                break;\n            case 'LineEvent36':\n                ret = new LineEvent36(repo, line, parts);\n                break;\n            case 'LineEvent37':\n                ret = new LineEvent37(repo, line, parts);\n                break;\n            case 'LineEvent38':\n                ret = new LineEvent38(repo, line, parts);\n                break;\n            case 'LineEvent39':\n                ret = new LineEvent39(repo, line, parts);\n                break;\n            default:\n                ret = new LineEvent(repo, line, parts);\n        }\n        // Also don't parse lines with a non-sane date. This is 2000-01-01 00:00:00\n        if (ret && ret.timestamp < 946684800)\n            return;\n        // Finally, if the object marks itself as invalid, skip it\n        if (ret && ret.invalid)\n            return;\n        return ret;\n    }\n}\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/NetworkLogConverter.ts\n\n\n\nconst isLineEvent = (line) => {\n    return !!line;\n};\nclass NetworkLogConverter extends EventBus {\n    convertFile(data) {\n        const repo = new LogRepository();\n        return this.convertLines(\n        // Split data into an array of separate lines, removing any blank lines.\n        data.split(NetworkLogConverter.lineSplitRegex).filter((l) => l !== ''), repo);\n    }\n    convertLines(lines, repo) {\n        let lineEvents = lines.map((l) => ParseLine.parse(repo, l)).filter(isLineEvent);\n        // Call `convert` to convert the network line to non-network format and update indexing values\n        lineEvents = lineEvents.map((l, i) => {\n            l.index = i;\n            return l;\n        });\n        // Sort the lines based on `${timestamp}_${index}` to handle out-of-order lines properly\n        // @TODO: Remove this once underlying CombatantTracker update issues are resolved\n        return lineEvents.sort((l, r) => (`${l.timestamp}_${l.index}`).localeCompare(`${r.timestamp}_${r.index}`));\n    }\n}\nNetworkLogConverter.lineSplitRegex = /\\r?\\n/gm;\n\n;// CONCATENATED MODULE: ./resources/languages.ts\nconst languages = ['en', 'de', 'fr', 'ja', 'cn', 'ko'];\nconst isLang = (lang) => {\n    const langStrs = languages;\n    if (!lang)\n        return false;\n    return langStrs.includes(lang);\n};\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/Encounter.ts\n\n\n\n\n\n\n\n\nconst isPetName = (name, language) => {\n    if (language)\n        return pet_names[language].includes(name);\n    for (const lang in pet_names) {\n        if (!isLang(lang))\n            throw new UnreachableCode();\n        if (pet_names[lang].includes(name))\n            return true;\n    }\n    return false;\n};\nconst isValidTimestamp = (timestamp) => {\n    return timestamp > 0 && timestamp < Number.MAX_SAFE_INTEGER;\n};\nclass Encounter {\n    constructor(encounterDay, encounterZoneId, encounterZoneName, logLines) {\n        this.encounterDay = encounterDay;\n        this.encounterZoneId = encounterZoneId;\n        this.encounterZoneName = encounterZoneName;\n        this.logLines = logLines;\n        this.initialOffset = Number.MAX_SAFE_INTEGER;\n        this.endStatus = 'Unknown';\n        this.startStatus = 'Unknown';\n        this.engageAt = Number.MAX_SAFE_INTEGER;\n        this.firstPlayerAbility = Number.MAX_SAFE_INTEGER;\n        this.firstEnemyAbility = Number.MAX_SAFE_INTEGER;\n        this.firstLineIndex = 0;\n        this.startTimestamp = 0;\n        this.endTimestamp = 0;\n        this.duration = 0;\n        this.playbackOffset = 0;\n        this.language = 'en';\n        this.version = Encounter.encounterVersion;\n    }\n    initialize() {\n        const startStatuses = new Set();\n        this.logLines.forEach((line, i) => {\n            var _a, _b, _c, _d;\n            if (!line)\n                throw new UnreachableCode();\n            let res = EmulatorCommon.matchStart(line.networkLine);\n            if (res) {\n                this.firstLineIndex = i;\n                if ((_a = res.groups) === null || _a === void 0 ? void 0 : _a.StartType)\n                    startStatuses.add(res.groups.StartType);\n                if ((_b = res.groups) === null || _b === void 0 ? void 0 : _b.StartIn) {\n                    const startIn = parseInt(res.groups.StartIn);\n                    if (startIn >= 0)\n                        this.engageAt = Math.min(line.timestamp + startIn, this.engageAt);\n                }\n            }\n            else {\n                res = EmulatorCommon.matchEnd(line.networkLine);\n                if (res) {\n                    if ((_c = res.groups) === null || _c === void 0 ? void 0 : _c.EndType)\n                        this.endStatus = res.groups.EndType;\n                }\n                else if (isLineEventSource(line) && isLineEventTarget(line)) {\n                    if (line.id.startsWith('1') ||\n                        (line.id.startsWith('4') && isPetName(line.name, this.language))) {\n                        // Player or pet ability\n                        if (line.targetId.startsWith('4') && !isPetName(line.targetName, this.language)) {\n                            // Targetting non player or pet\n                            this.firstPlayerAbility = Math.min(this.firstPlayerAbility, line.timestamp);\n                        }\n                    }\n                    else if (line.id.startsWith('4') && !isPetName(line.name, this.language)) {\n                        // Non-player ability\n                        if (line.targetId.startsWith('1') || isPetName(line.targetName, this.language)) {\n                            // Targetting player or pet\n                            this.firstEnemyAbility = Math.min(this.firstEnemyAbility, line.timestamp);\n                        }\n                    }\n                }\n            }\n            const matchedLang = (_d = res === null || res === void 0 ? void 0 : res.groups) === null || _d === void 0 ? void 0 : _d.language;\n            if (isLang(matchedLang))\n                this.language = matchedLang;\n        });\n        this.combatantTracker = new CombatantTracker(this.logLines, this.language);\n        this.startTimestamp = this.combatantTracker.firstTimestamp;\n        this.endTimestamp = this.combatantTracker.lastTimestamp;\n        this.duration = this.endTimestamp - this.startTimestamp;\n        if (this.initialOffset === Number.MAX_SAFE_INTEGER) {\n            if (this.engageAt < Number.MAX_SAFE_INTEGER)\n                this.initialOffset = this.engageAt - this.startTimestamp;\n            else if (this.firstPlayerAbility < Number.MAX_SAFE_INTEGER)\n                this.initialOffset = this.firstPlayerAbility - this.startTimestamp;\n            else if (this.firstEnemyAbility < Number.MAX_SAFE_INTEGER)\n                this.initialOffset = this.firstEnemyAbility - this.startTimestamp;\n            else\n                this.initialOffset = 0;\n        }\n        const firstLine = this.logLines[this.firstLineIndex];\n        if (firstLine && firstLine.offset)\n            this.playbackOffset = firstLine.offset;\n        this.startStatus = [...startStatuses].sort().join(', ');\n    }\n    get initialTimestamp() {\n        return this.startTimestamp + this.initialOffset;\n    }\n    shouldPersistFight() {\n        return isValidTimestamp(this.firstPlayerAbility) && isValidTimestamp(this.firstEnemyAbility);\n    }\n    upgrade(version) {\n        if (Encounter.encounterVersion <= version)\n            return false;\n        const repo = new LogRepository();\n        const converter = new NetworkLogConverter();\n        this.logLines = converter.convertLines(this.logLines.map((l) => l.networkLine), repo);\n        this.version = Encounter.encounterVersion;\n        this.initialize();\n        return true;\n    }\n}\nEncounter.encounterVersion = 1;\n\n;// CONCATENATED MODULE: ./ui/raidboss/emulator/data/LogEventHandler.ts\n\n\n\nclass LogEventHandler extends EventBus {\n    constructor() {\n        super(...arguments);\n        this.currentFight = [];\n        this.currentZoneName = 'Unknown';\n        this.currentZoneId = '-1';\n    }\n    parseLogs(logs) {\n        for (const lineObj of logs) {\n            this.currentFight.push(lineObj);\n            lineObj.offset = lineObj.timestamp - this.currentFightStart;\n            const res = EmulatorCommon.matchEnd(lineObj.networkLine);\n            if (res) {\n                this.endFight();\n            }\n            else if (lineObj instanceof LineEvent0x01) {\n                this.currentZoneId = lineObj.zoneId;\n                this.currentZoneName = lineObj.zoneName;\n                this.endFight();\n            }\n        }\n    }\n    get currentFightStart() {\n        var _a, _b;\n        return (_b = (_a = this.currentFight[0]) === null || _a === void 0 ? void 0 : _a.timestamp) !== null && _b !== void 0 ? _b : 0;\n    }\n    get currentFightEnd() {\n        var _a, _b;\n        return (_b = (_a = this.currentFight.slice(-1)[0]) === null || _a === void 0 ? void 0 : _a.timestamp) !== null && _b !== void 0 ? _b : 0;\n    }\n    endFight() {\n        if (this.currentFight.length < 2)\n            return;\n        const start = new Date(this.currentFightStart).toISOString();\n        const end = new Date(this.currentFightEnd).toISOString();\n        console.debug(`Dispatching new fight\r\nStart: ${start}\r\nEnd: ${end}\r\nZone: ${this.currentZoneName}\r\nLine Count: ${this.currentFight.length}\r\n`);\n        void this.dispatch('fight', start.substr(0, 10), this.currentZoneId, this.currentZoneName, this.currentFight);\n        this.currentFight = [];\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[1].use!./ui/raidboss/emulator/data/NetworkLogConverterWorker.js\n\n\n\n\n\n\nonmessage = async msg => {\n  const logConverter = new NetworkLogConverter();\n  const localLogHandler = new LogEventHandler();\n  const repo = new LogRepository(); // Listen for LogEventHandler to dispatch fights and persist them\n\n  localLogHandler.on('fight', async (day, zoneId, zoneName, lines) => {\n    const enc = new Encounter(day, zoneId, zoneName, lines);\n    enc.initialize();\n\n    if (enc.shouldPersistFight()) {\n      postMessage({\n        type: 'encounter',\n        encounter: enc,\n        name: enc.combatantTracker.getMainCombatantName()\n      });\n    }\n  }); // Convert the message manually due to memory issues with extremely large files\n\n  const decoder = new TextDecoder('UTF-8');\n  let buf = new Uint8Array(msg.data);\n  let nextOffset = 0;\n  let lines = [];\n  let lineCount = 0;\n\n  for (let currentOffset = nextOffset; nextOffset < buf.length && nextOffset !== -1; currentOffset = nextOffset) {\n    nextOffset = buf.indexOf(0x0A, nextOffset + 1);\n    const line = decoder.decode(buf.slice(currentOffset, nextOffset)).trim();\n\n    if (line.length) {\n      ++lineCount;\n      lines.push(line);\n    }\n\n    if (lines.length >= 1000) {\n      lines = logConverter.convertLines(lines, repo);\n      localLogHandler.parseLogs(lines);\n      postMessage({\n        type: 'progress',\n        lines: lineCount,\n        bytes: nextOffset,\n        totalBytes: buf.length\n      });\n      lines = [];\n    }\n  }\n\n  if (lines.length > 0) {\n    lines = logConverter.convertLines(lines, repo);\n    localLogHandler.parseLogs(lines);\n    lines = [];\n  }\n\n  postMessage({\n    type: 'progress',\n    lines: lineCount,\n    bytes: buf.length,\n    totalBytes: buf.length\n  });\n  buf = null;\n  localLogHandler.endFight();\n  postMessage({\n    type: 'done'\n  });\n};\n/******/ })()\n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,", "Worker", {"type":"classic","name":"NetworkLogConverterWorker"}, __webpack_require__.p + "NetworkLogConverterWorker.bundle.worker.js");
}

;// CONCATENATED MODULE: ./ui/raidboss/raidemulator.js


















 // eslint can't detect the custom loader for the worker
// eslint-disable-next-line import/default






(() => {
  let emulator;
  let progressBar;
  let timelineController;
  let popupText;
  let persistor;
  let encounterTab;
  let emulatedPartyInfo;
  let emulatedMap;
  let emulatedWebSocket;
  let timelineUI;
  let logConverterWorker;
  document.addEventListener('DOMContentLoaded', () => {
    emulator = new RaidEmulator(raidboss_options);
    progressBar = new ProgressBar(emulator);
    persistor = new Persistor();
    encounterTab = new EncounterTab(persistor);
    emulatedPartyInfo = new EmulatedPartyInfo(emulator);
    emulatedMap = new EmulatedMap(emulator);
    emulatedWebSocket = new RaidEmulatorOverlayApiHook(emulator);
    logConverterWorker = new Worker_fn(); // Listen for the user to click a player in the party list on the right
    // and persist that over to the emulator

    emulatedPartyInfo.on('selectPerspective', id => {
      emulator.selectPerspective(id);
    });
    emulator.on('currentEncounterChanged', enc => {
      // Store our current loaded encounter to auto-load next time
      window.localStorage.setItem('currentEncounter', enc.encounter.id); // Once we've loaded the encounter, seek to the start of the encounter

      if (!isNaN(enc.encounter.initialOffset)) emulator.seek(enc.encounter.initialOffset);
    }); // Listen for the user to attempt to load an encounter from the encounters pane

    encounterTab.on('load', id => {
      // Attempt to set the current emulated encounter
      if (!emulator.setCurrentByID(id)) {
        // If that encounter isn't loaded, load it
        persistor.loadEncounter(id).then(enc => {
          emulator.addEncounter(enc);
          emulator.setCurrentByID(id);
        });
      }
    }); // Listen for the user to select re-parse on the encounters tab, then refresh it in the DB

    encounterTab.on('parse', id => {
      persistor.loadEncounter(id).then(async enc => {
        enc.initialize();
        await persistor.persistEncounter(enc);
        encounterTab.refresh();
      });
    }); // Listen for the user to select prune on the encounters tab

    encounterTab.on('prune', id => {
      persistor.loadEncounter(id).then(async enc => {
        // Trim log lines
        enc.logLines = enc.logLines.slice(enc.firstLineIndex - 1); // Update precalculated offsets

        const firstTimestamp = enc.logLines[0].timestamp;

        for (let i = 0; i < enc.logLines.length; ++i) enc.logLines[i].offset = enc.logLines[i].timestamp - firstTimestamp;

        enc.firstLineIndex = 0;
        enc.initialize();
        await persistor.persistEncounter(enc);
        encounterTab.refresh();
      });
    }); // Listen for the user to select delete on the encounters tab, then do it.

    encounterTab.on('delete', id => {
      persistor.deleteEncounter(id).then(() => {
        encounterTab.refresh();
      });
    }); // Listen for the emulator to event log lines, then dispatch them to the timeline controller
    // @TODO: Probably a better place to listen for this?

    emulator.on('emitLogs', logs => {
      timelineController.OnLogEvent({
        type: 'onLogEvent',
        detail: logs
      });
    }); // Wait for the DB to be ready before doing anything that might invoke the DB

    persistor.on('ready', () => {
      user_config/* default.getUserConfigLocation */.Z.getUserConfigLocation('raidboss', raidboss_options, e => {
        document.querySelector('.websocketConnected').classList.remove('d-none');
        document.querySelector('.websocketDisconnected').classList.add('d-none'); // Initialize the Raidboss components, bind them to the emulator for event listeners

        timelineUI = new RaidEmulatorTimelineUI(raidboss_options);
        timelineUI.bindTo(emulator);
        timelineController = new RaidEmulatorTimelineController(raidboss_options, timelineUI, raidboss_manifest/* default */.Z);
        timelineController.bindTo(emulator);
        popupText = new RaidEmulatorPopupText(raidboss_options, new TimelineLoader(timelineController), raidboss_manifest/* default */.Z);
        popupText.bindTo(emulator);
        timelineController.SetPopupTextInterface(new PopupTextGenerator(popupText));
        emulator.setPopupText(popupText); // Load the encounter metadata from the DB

        encounterTab.refresh(); // If we don't have any encounters stored, show the intro modal

        persistor.listEncounters().then(encounters => {
          if (encounters.length === 0) {
            showModal('.introModal');
          } else {
            let lastEncounter = window.localStorage.getItem('currentEncounter');

            if (lastEncounter !== undefined) {
              lastEncounter = parseInt(lastEncounter);
              const matchedEncounters = encounters.filter(e => e.id === lastEncounter);
              if (matchedEncounters.length) encounterTab.dispatch('load', lastEncounter);
            }
          }
        });

        const checkFile = async file => {
          if (file.type === 'application/json') {
            // Import a DB file by passing it to Persistor
            // DB files are just json representations of the DB
            file.text().then(txt => {
              const DB = JSON.parse(txt);
              persistor.importDB(DB).then(() => {
                encounterTab.refresh();
              });
            });
          } else {
            // Assume it's a log file?
            const importModal = showModal('.importProgressModal');
            const bar = importModal.querySelector('.progress-bar');
            bar.style.width = '0px';
            const label = importModal.querySelector('.label');
            label.innerText = '';
            const encLabel = importModal.querySelector('.encounterLabel');
            encLabel.innerText = 'N/A';
            const doneButton = importModal.querySelector('.btn');
            doneButton.disabled = true;
            const doneButtonTimeout = doneButton.querySelector('.doneBtnTimeout');
            const promises = [];

            logConverterWorker.onmessage = msg => {
              switch (msg.data.type) {
                case 'progress':
                  {
                    const percent = (msg.data.bytes / msg.data.totalBytes * 100).toFixed(2);
                    bar.style.width = percent + '%';
                    label.innerText = `${msg.data.bytes}/${msg.data.totalBytes} bytes, ${msg.data.lines} lines (${percent}%)`;
                  }
                  break;

                case 'encounter':
                  {
                    const enc = msg.data.encounter;
                    encLabel.innerText = `
                  Zone: ${enc.encounterZoneName}
                  Encounter: ${msg.data.name}
                  Start: ${new Date(enc.startTimestamp)}
                  End: ${new Date(enc.endTimestamp)}
                  Duration: ${EmulatorCommon_EmulatorCommon.msToDuration(enc.endTimestamp - enc.startTimestamp)}
                  Pull Duration: ${EmulatorCommon_EmulatorCommon.msToDuration(enc.endTimestamp - enc.initialTimestamp)}
                  Started By: ${enc.startStatus}
                  End Status: ${enc.endStatus}
                  Line Count: ${enc.logLines.length}
                  `; // Objects sent via message are raw objects, not typed.
                    // Need to get the name another way and override for Persistor.

                    enc.combatantTracker.getMainCombatantName = () => msg.data.name;

                    promises.push(persistor.persistEncounter(enc));
                  }
                  break;

                case 'done':
                  Promise.all(promises).then(() => {
                    encounterTab.refresh();
                    doneButton.disabled = false;
                    let seconds = 5;
                    doneButtonTimeout.innerText = ` (${seconds})`;
                    const interval = window.setInterval(() => {
                      --seconds;
                      doneButtonTimeout.innerText = ` (${seconds})`;

                      if (seconds === 0) {
                        window.clearInterval(interval);
                        hideModal('.importProgressModal');
                      }
                    }, 1000);
                  });
                  break;
              }
            };

            file.arrayBuffer().then(b => {
              logConverterWorker.postMessage(b, [b]);
            });
          }
        };

        const ignoreEvent = e => {
          e.preventDefault();
          e.stopPropagation();
        }; // Handle drag+drop of files. Have to ignore dragenter/dragover for compatibility reasons.


        document.body.addEventListener('dragenter', ignoreEvent);
        document.body.addEventListener('dragover', ignoreEvent);
        document.body.addEventListener('drop', async e => {
          e.preventDefault();
          e.stopPropagation();
          const dt = e.dataTransfer;
          const files = dt.files;

          for (let i = 0; i < files.length; ++i) {
            const file = files[i];
            await checkFile(file);
          }
        });
        const $exportButton = document.querySelector('.exportDBButton');
        new Tooltip($exportButton, 'bottom', 'Export DB is very slow and shows a 0 byte download, but it does work eventually.'); // Auto initialize all collapse elements on the page

        document.querySelectorAll('[data-toggle="collapse"]').forEach(n => {
          const target = document.querySelector(n.getAttribute('data-target'));
          n.addEventListener('click', () => {
            if (n.getAttribute('aria-expanded') === 'false') {
              n.setAttribute('aria-expanded', 'true');
              target.classList.add('show');
            } else {
              n.setAttribute('aria-expanded', 'false');
              target.classList.remove('show');
            }
          });
        }); // Handle DB export

        $exportButton.addEventListener('click', e => {
          persistor.exportDB().then(obj => {
            // Convert encounter DB to json, then base64 encode it
            // Encounters can have unicode, can't use btoa for base64 encode
            const blob = new Blob([JSON.stringify(obj)], {
              type: 'application/json'
            });
            obj = null; // Offer download to user

            const a = document.createElement('a');
            a.href = URL.createObjectURL(blob);
            a.setAttribute('download', 'RaidEmulator_DBExport_' + +new Date() + '.json');
            a.click(); // After a second (so after user accepts/declines)
            // remove the object URL to avoid memory issues

            window.setTimeout(() => {
              URL.revokeObjectURL(a.href);
            }, 1000);
          });
        });
        const $fileInput = document.querySelector('.loadFileInput'); // Handle the `Load Network Log` button when user selects files

        $fileInput.addEventListener('change', async e => {
          for (let i = 0; i < e.target.files.length; ++i) {
            const file = e.target.files[i];
            checkFile(file);
          }
        }); // Prompt user to select files if they click the `Load Network Log` or `Import DB` buttons.
        // These buttons really do the same thing.

        document.querySelectorAll('.importDBButton, .loadNetworkLogButton').forEach(n => {
          n.addEventListener('click', e => {
            $fileInput.click();
          });
        }); // Handle all modal close buttons

        document.querySelectorAll('.modal button.close, [data-dismiss="modal"]').forEach(n => {
          n.addEventListener('click', e => {
            // Find the parent modal from the close button and close it
            let target = e.currentTarget;

            while (!target.classList.contains('modal') && target !== document.body) target = target.parentElement;

            if (target !== document.body) hideModal('.' + [...target.classList].join('.'));
          });
        }); // Handle closing all modals if the user clicks outside the modal

        document.querySelectorAll('.modal').forEach(n => {
          n.addEventListener('click', e => {
            // Only close the modal if the user actually clicked outside it, not child clicks
            if (e.target === n) hideModal();
          });
        }); // Ask the user if they're really sure they want to clear the DB

        document.querySelector('.clearDBButton').addEventListener('click', e => {
          showModal('.deleteDBModal');
        }); // Handle user saying they're really sure they want to clear the DB by wiping it then
        // refreshing the encounter tab

        document.querySelector('.deleteDBModal .btn-primary').addEventListener('click', e => {
          persistor.clearDB().then(() => {
            encounterTab.refresh();
            hideModal('.deleteDBModal');
          });
        }); // Make the emulator state available for debugging

        window.raidEmulator = {
          emulator: emulator,
          progressBar: progressBar,
          timelineController: timelineController,
          popupText: popupText,
          persistor: persistor,
          encounterTab: encounterTab,
          emulatedPartyInfo: emulatedPartyInfo,
          emulatedMap: emulatedMap,
          emulatedWebSocket: emulatedWebSocket,
          timelineUI: timelineUI
        };
      });
    });
  });
})();

function showModal(selector) {
  const modal = document.querySelector(selector);
  const body = document.body;
  const backdrop = document.querySelector('.modal-backdrop');
  body.classList.add('modal-open');
  backdrop.classList.add('show');
  backdrop.classList.remove('hide');
  modal.classList.add('show');
  modal.style.display = 'block';
  return modal;
}

function hideModal(selector = '.modal.show') {
  const modal = document.querySelector(selector);
  const body = document.body;
  const backdrop = document.querySelector('.modal-backdrop');
  body.classList.remove('modal-open');
  backdrop.classList.remove('show');
  backdrop.classList.add('hide');
  modal.classList.remove('show');
  modal.style.display = '';
  return modal;
}

/***/ }),

/***/ 760:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// For consistency with Responses, Conditions
// are also functions.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    targetIsYou() {
        return (data, matches) => data.me === (matches === null || matches === void 0 ? void 0 : matches.target);
    },
    targetIsNotYou() {
        return (data, matches) => data.me !== (matches === null || matches === void 0 ? void 0 : matches.target);
    },
    caresAboutAOE() {
        return (data) => data.role === 'tank' || data.role === 'healer' || data.CanAddle() || data.job === 'BLU';
    },
    caresAboutMagical() {
        return (data) => data.role === 'tank' || data.role === 'healer' || data.CanAddle() || data.job === 'BLU';
    },
    caresAboutPhysical() {
        return (data) => data.role === 'tank' || data.role === 'healer' || data.CanFeint() || data.job === 'BLU';
    },
});


/***/ }),

/***/ 873:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
    'BeastTribeQuests': 13,
    'Companions': 12,
    'CustomDeliveries': 25,
    'DeepDungeons': 21,
    'DisciplesOfTheHand': 17,
    'DisciplesOfTheLand': 16,
    'Dungeons': 2,
    'DutyRoulette': 1,
    'Eureka': 26,
    'Fates': 8,
    'GoldSaucer': 19,
    'GrandCompany': 11,
    'Guildhests': 3,
    'Levequests': 10,
    'OverallCompletion': 14,
    'PlayerCommendation': 15,
    'Pvp': 6,
    'QuestBattles': 7,
    'Raids': 5,
    'RetainerVentures': 18,
    'TreasureHunt': 9,
    'Trials': 4,
    'UltimateRaids': 28,
    'WondrousTails': 24,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);


/***/ }),

/***/ 641:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ NetRegexes)
/* harmony export */ });
/* harmony import */ var _regexes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(911);

// Differences from Regexes:
// * may have more fields
// * AddedCombatant npc id is broken up into npcNameId and npcBaseId
// * gameLog always splits name into its own field (but previously wouldn't)
const separator = '\\|';
const matchDefault = '[^|]*';
const startsUsingParams = (/* unused pure expression or super */ null && (['timestamp', 'sourceId', 'source', 'id', 'ability', 'targetId', 'target', 'castTime']));
const abilityParams = (/* unused pure expression or super */ null && (['sourceId', 'source', 'id', 'ability', 'targetId', 'target']));
const abilityFullParams = (/* unused pure expression or super */ null && (['sourceId', 'source', 'id', 'ability', 'targetId', 'target', 'flags', 'damage', 'targetCurrentHp', 'targetMaxHp', 'x', 'y', 'z', 'heading']));
const headMarkerParams = (/* unused pure expression or super */ null && (['targetId', 'target', 'id']));
const addedCombatantParams = (/* unused pure expression or super */ null && (['id', 'name']));
const addedCombatantFullParams = (/* unused pure expression or super */ null && (['id', 'name', 'job', 'level', 'ownerId', 'world', 'npcNameId', 'npcBaseId', 'currentHp', 'hp', 'x', 'y', 'z', 'heading']));
const removingCombatantParams = (/* unused pure expression or super */ null && (['id', 'name', 'hp']));
const gainsEffectParams = (/* unused pure expression or super */ null && (['effectId', 'effect', 'duration', 'sourceId', 'source', 'targetId', 'target', 'count']));
const statusEffectExplicitParams = (/* unused pure expression or super */ null && (['targetId', 'target', 'hp', 'maxHp', 'x', 'y', 'z', 'heading', 'data0', 'data1', 'data2', 'data3', 'data4']));
const losesEffectParams = (/* unused pure expression or super */ null && (['effectId', 'effect', 'sourceId', 'source', 'targetId', 'target', 'count']));
const tetherParams = (/* unused pure expression or super */ null && (['sourceId', 'source', 'targetId', 'target', 'id']));
const wasDefeatedParams = (/* unused pure expression or super */ null && (['targetId', 'target', 'sourceId', 'source']));
const echoParams = (/* unused pure expression or super */ null && (['code', 'name', 'line']));
const dialogParams = (/* unused pure expression or super */ null && (['code', 'name', 'line']));
const messageParams = (/* unused pure expression or super */ null && (['code', 'name', 'line']));
const gameLogParams = (/* unused pure expression or super */ null && (['code', 'name', 'line']));
const gameNameLogParams = (/* unused pure expression or super */ null && (['code', 'name', 'line']));
const statChangeParams = (/* unused pure expression or super */ null && (['job', 'strength', 'dexterity', 'vitality', 'intelligence', 'mind', 'piety', 'attackPower', 'directHit', 'criticalHit', 'attackMagicPotency', 'healMagicPotency', 'determination', 'skillSpeed', 'spellSpeed', 'tenacity']));
const changeZoneParams = (/* unused pure expression or super */ null && (['id', 'name']));
const network6dParams = (/* unused pure expression or super */ null && (['instance', 'command', 'data0', 'data1', 'data2', 'data3']));
const nameToggleParams = (/* unused pure expression or super */ null && (['id', 'name', 'toggle']));
// If NetRegexes.setFlagTranslationsNeeded is set to true, then any
// regex created that requires a translation will begin with this string
// and match the magicStringRegex.  This is maybe a bit goofy, but is
// a pretty straightforward way to mark regexes for translations.
// If issue #1306 is ever resolved, we can remove this.
const magicTranslationString = `^^`;
const magicStringRegex = /^\^\^/;
const keysThatRequireTranslation = [
    'ability',
    'name',
    'source',
    'target',
    'line',
];
const parseHelper = (params, funcName, fields) => {
    var _a, _b, _c, _d, _e, _f;
    params = params !== null && params !== void 0 ? params : {};
    const validFields = [];
    for (const value of Object.values(fields)) {
        if (typeof value !== 'object')
            continue;
        validFields.push(value.field);
    }
    _regexes__WEBPACK_IMPORTED_MODULE_0__/* .default.validateParams */ .Z.validateParams(params, funcName, ['capture', ...validFields]);
    // Find the last key we care about, so we can shorten the regex if needed.
    const capture = _regexes__WEBPACK_IMPORTED_MODULE_0__/* .default.trueIfUndefined */ .Z.trueIfUndefined(params.capture);
    const fieldKeys = Object.keys(fields);
    let maxKey;
    if (capture) {
        maxKey = fieldKeys[fieldKeys.length - 1];
    }
    else {
        maxKey = 0;
        for (const key of fieldKeys) {
            const value = (_a = fields[key]) !== null && _a !== void 0 ? _a : {};
            if (typeof value !== 'object')
                continue;
            const fieldName = (_b = fields[key]) === null || _b === void 0 ? void 0 : _b.field;
            if (fieldName && fieldName in params)
                maxKey = key;
        }
    }
    // For testing, it's useful to know if this is a regex that requires
    // translation.  We test this by seeing if there are any specified
    // fields, and if so, inserting a magic string that we can detect.
    // This lets us differentiate between "regex that should be translated"
    // e.g. a regex with `target` specified, and "regex that shouldn't"
    // e.g. a gains effect with just effectId specified.
    const transParams = Object.keys(params).filter((k) => keysThatRequireTranslation.includes(k));
    const needsTranslations = NetRegexes.flagTranslationsNeeded && transParams.length > 0;
    // Build the regex from the fields.
    let str = needsTranslations ? magicTranslationString : '^';
    let lastKey = -1;
    for (const _key in fields) {
        const key = parseInt(_key);
        // Fill in blanks.
        const missingFields = key - lastKey - 1;
        if (missingFields === 1)
            str += '\\y{NetField}';
        else if (missingFields > 1)
            str += `\\y{NetField}{${missingFields}}`;
        lastKey = key;
        const value = fields[key];
        if (typeof value !== 'object')
            throw new Error(`${funcName}: invalid value: ${JSON.stringify(value)}`);
        const fieldName = (_c = fields[key]) === null || _c === void 0 ? void 0 : _c.field;
        const fieldValue = (_f = (_e = (_d = fields[key]) === null || _d === void 0 ? void 0 : _d.value) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : matchDefault;
        if (fieldName) {
            str += _regexes__WEBPACK_IMPORTED_MODULE_0__/* .default.maybeCapture */ .Z.maybeCapture(
            // more accurate type instead of `as` cast
            // maybe this function needs a refactoring
            capture, fieldName, params[fieldName], fieldValue) +
                separator;
        }
        else {
            str += fieldValue + separator;
        }
        // Stop if we're not capturing and don't care about future fields.
        if (key >= (maxKey !== null && maxKey !== void 0 ? maxKey : 0))
            break;
    }
    return _regexes__WEBPACK_IMPORTED_MODULE_0__/* .default.parse */ .Z.parse(str);
};
class NetRegexes {
    static setFlagTranslationsNeeded(value) {
        NetRegexes.flagTranslationsNeeded = value;
    }
    static doesNetRegexNeedTranslation(regex) {
        // Need to `setFlagTranslationsNeeded` before calling this function.
        console.assert(NetRegexes.flagTranslationsNeeded);
        const str = typeof regex === 'string' ? regex : regex.source;
        return !!magicStringRegex.exec(str);
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#14-networkstartscasting
     */
    static startsUsing(params) {
        return parseHelper(params, 'startsUsing', {
            0: { field: 'type', value: '20' },
            1: { field: 'timestamp' },
            2: { field: 'sourceId' },
            3: { field: 'source' },
            4: { field: 'id' },
            5: { field: 'ability' },
            6: { field: 'targetId' },
            7: { field: 'target' },
            8: { field: 'castTime' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#15-networkability
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#16-networkaoeability
     */
    static ability(params) {
        return parseHelper(params, 'ability', {
            0: { field: 'type', value: '2[12]' },
            1: { field: 'timestamp' },
            2: { field: 'sourceId' },
            3: { field: 'source' },
            4: { field: 'id' },
            5: { field: 'ability' },
            6: { field: 'targetId' },
            7: { field: 'target' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#15-networkability
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#16-networkaoeability
     */
    static abilityFull(params) {
        return parseHelper(params, 'abilityFull', {
            0: { field: 'type', value: '2[12]' },
            1: { field: 'timestamp' },
            2: { field: 'sourceId' },
            3: { field: 'source' },
            4: { field: 'id' },
            5: { field: 'ability' },
            6: { field: 'targetId' },
            7: { field: 'target' },
            8: { field: 'flags' },
            9: { field: 'damage' },
            24: { field: 'targetCurrentHp' },
            25: { field: 'targetMaxHp' },
            40: { field: 'x' },
            41: { field: 'y' },
            42: { field: 'z' },
            43: { field: 'heading' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1b-networktargeticon-head-markers
     */
    static headMarker(params) {
        return parseHelper(params, 'headMarker', {
            0: { field: 'type', value: '27' },
            1: { field: 'timestamp' },
            2: { field: 'targetId' },
            3: { field: 'target' },
            6: { field: 'id' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#03-addcombatant
     */
    static addedCombatant(params) {
        return parseHelper(params, 'addedCombatant', {
            0: { field: 'type', value: '03' },
            1: { field: 'timestamp' },
            2: { field: 'id' },
            3: { field: 'name' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#03-addcombatant
     */
    static addedCombatantFull(params) {
        return parseHelper(params, 'addedCombatantFull', {
            0: { field: 'type', value: '03' },
            1: { field: 'timestamp' },
            2: { field: 'id' },
            3: { field: 'name' },
            4: { field: 'job' },
            5: { field: 'level' },
            6: { field: 'ownerId' },
            8: { field: 'world' },
            9: { field: 'npcNameId' },
            10: { field: 'npcBaseId' },
            11: { field: 'currentHp' },
            12: { field: 'hp' },
            17: { field: 'x' },
            18: { field: 'y' },
            19: { field: 'z' },
            20: { field: 'heading' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#04-removecombatant
     */
    static removingCombatant(params) {
        return parseHelper(params, 'removingCombatant', {
            0: { field: 'type', value: '04' },
            1: { field: 'timestamp' },
            2: { field: 'id' },
            3: { field: 'name' },
            12: { field: 'hp' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1a-networkbuff
     */
    static gainsEffect(params) {
        return parseHelper(params, 'gainsEffect', {
            0: { field: 'type', value: '26' },
            1: { field: 'timestamp' },
            2: { field: 'effectId' },
            3: { field: 'effect' },
            4: { field: 'duration' },
            5: { field: 'sourceId' },
            6: { field: 'source' },
            7: { field: 'targetId' },
            8: { field: 'target' },
            9: { field: 'count' },
        });
    }
    /**
     * Prefer gainsEffect over this function unless you really need extra data.
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#26-networkstatuseffects
     */
    static statusEffectExplicit(params) {
        return parseHelper(params, 'statusEffectExplicit', {
            0: { field: 'type', value: '38' },
            1: { field: 'timestamp' },
            2: { field: 'targetId' },
            3: { field: 'target' },
            5: { field: 'hp' },
            6: { field: 'maxHp' },
            11: { field: 'x' },
            12: { field: 'y' },
            13: { field: 'z' },
            14: { field: 'heading' },
            15: { field: 'data0' },
            16: { field: 'data1' },
            17: { field: 'data2' },
            18: { field: 'data3' },
            19: { field: 'data4' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1e-networkbuffremove
     */
    static losesEffect(params) {
        return parseHelper(params, 'losesEffect', {
            0: { field: 'type', value: '30' },
            1: { field: 'timestamp' },
            2: { field: 'effectId' },
            3: { field: 'effect' },
            5: { field: 'sourceId' },
            6: { field: 'source' },
            7: { field: 'targetId' },
            8: { field: 'target' },
            9: { field: 'count' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#23-networktether
     */
    static tether(params) {
        return parseHelper(params, 'tether', {
            0: { field: 'type', value: '35' },
            1: { field: 'timestamp' },
            2: { field: 'sourceId' },
            3: { field: 'source' },
            4: { field: 'targetId' },
            5: { field: 'target' },
            8: { field: 'id' },
        });
    }
    /**
     * 'target' was defeated by 'source'
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#19-networkdeath
     */
    static wasDefeated(params) {
        return parseHelper(params, 'wasDefeated', {
            0: { field: 'type', value: '25' },
            1: { field: 'timestamp' },
            2: { field: 'targetId' },
            3: { field: 'target' },
            4: { field: 'sourceId' },
            5: { field: 'source' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
     */
    static echo(params) {
        if (typeof params === 'undefined')
            params = {};
        _regexes__WEBPACK_IMPORTED_MODULE_0__/* .default.validateParams */ .Z.validateParams(params, 'echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
        params.code = '0038';
        return NetRegexes.gameLog(params);
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
     */
    static dialog(params) {
        if (typeof params === 'undefined')
            params = {};
        _regexes__WEBPACK_IMPORTED_MODULE_0__/* .default.validateParams */ .Z.validateParams(params, 'dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
        params.code = '0044';
        return NetRegexes.gameLog(params);
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
     */
    static message(params) {
        if (typeof params === 'undefined')
            params = {};
        _regexes__WEBPACK_IMPORTED_MODULE_0__/* .default.validateParams */ .Z.validateParams(params, 'message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
        params.code = '0839';
        return NetRegexes.gameLog(params);
    }
    /**
     * fields: code, name, line, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
     */
    static gameLog(params) {
        return parseHelper(params, 'gameLog', {
            0: { field: 'type', value: '00' },
            1: { field: 'timestamp' },
            2: { field: 'code' },
            3: { field: 'name' },
            4: { field: 'line' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
     */
    static gameNameLog(params) {
        // for compat with Regexes.
        return NetRegexes.gameLog(params);
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#0c-playerstats
     */
    static statChange(params) {
        return parseHelper(params, 'statChange', {
            0: { field: 'type', value: '12' },
            1: { field: 'timestamp' },
            2: { field: 'job' },
            3: { field: 'strength' },
            4: { field: 'dexterity' },
            5: { field: 'vitality' },
            6: { field: 'intelligence' },
            7: { field: 'mind' },
            8: { field: 'piety' },
            9: { field: 'attackPower' },
            10: { field: 'directHit' },
            11: { field: 'criticalHit' },
            12: { field: 'attackMagicPotency' },
            13: { field: 'healMagicPotency' },
            14: { field: 'determination' },
            15: { field: 'skillSpeed' },
            16: { field: 'spellSpeed' },
            18: { field: 'tenacity' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#01-changezone
     */
    static changeZone(params) {
        return parseHelper(params, 'changeZone', {
            0: { field: 'type', value: '01' },
            1: { field: 'timestamp' },
            2: { field: 'id' },
            3: { field: 'name' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#21-network6d-actor-control-lines
     */
    static network6d(params) {
        return parseHelper(params, 'network6d', {
            0: { field: 'type', value: '33' },
            1: { field: 'timestamp' },
            2: { field: 'instance' },
            3: { field: 'command' },
            4: { field: 'data0' },
            5: { field: 'data1' },
            6: { field: 'data2' },
            7: { field: 'data3' },
        });
    }
    /**
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#22-networknametoggle
     */
    static nameToggle(params) {
        return parseHelper(params, 'nameToggle', {
            0: { field: 'type', value: '34' },
            1: { field: 'timestamp' },
            2: { field: 'id' },
            3: { field: 'name' },
            6: { field: 'toggle' },
        });
    }
}
NetRegexes.flagTranslationsNeeded = false;


/***/ }),

/***/ 509:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ UnreachableCode)
/* harmony export */ });
// Helper Error for TypeScript situations where the programmer thinks they
// know better than TypeScript that some situation will never occur.
// The intention here is that the programmer does not expect a particular
// bit of code to happen, and so has not written careful error handling.
// If it does occur, at least there will be an error and we can figure out why.
// This is preferable to casting or disabling TypeScript altogether in order to
// avoid syntax errors.
// One common example is a regex, where if the regex matches then all of the
// (non-optional) regex groups will also be valid, but TypeScript doesn't know.
class UnreachableCode extends Error {
    constructor() {
        super('This code shouldn\'t be reached');
    }
}


/***/ }),

/***/ 970:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Output strings for now require a field for every language, so this is a
// helper function to generate one for literal numbers.
const numberToOutputString = function (n) {
    const str = n.toString();
    return {
        en: str,
        de: str,
        fr: str,
        ja: str,
        cn: str,
        ko: str,
    };
};
// General guidelines:
// * property names should closely match English text
// * use OnPlayer suffix for things with `${player}`
// * use OnTarget suffix for things with `${name}`
// * any other parameters (of which there are none, currently) should use consistent suffixes.
// * the value of each property should be a single object with localized keys
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    aoe: {
        en: 'aoe',
        de: 'AoE',
        fr: 'AoE',
        ja: 'AoE',
        cn: 'AoE',
        ko: '전체 공격',
    },
    bigAoe: {
        en: 'big aoe!',
        de: 'Große AoE!',
        fr: 'Grosse AoE !',
        ja: '大ダメージAoE',
        cn: '大AoE伤害！',
        ko: '강한 전체 공격!',
    },
    tankBuster: {
        en: 'Tank Buster',
        de: 'Tank buster',
        fr: 'Tank buster',
        ja: 'タンクバスター',
        cn: '坦克死刑',
        ko: '탱버',
    },
    miniBuster: {
        en: 'Mini Buster',
        de: 'Kleiner Tankbuster',
        fr: 'Mini Buster',
        ja: 'ミニバスター',
        cn: '小死刑',
        ko: '약한 탱버',
    },
    tankBusterOnPlayer: {
        en: 'Tank Buster on ${player}',
        de: 'Tank buster auf ${player}',
        fr: 'Tank buster sur ${player}',
        ja: '${player}にタンクバスター',
        cn: '死刑 点 ${player}',
        ko: '"${player}" 탱버',
    },
    tankBusterOnYou: {
        en: 'Tank Buster on YOU',
        de: 'Tank buster auf DIR',
        fr: 'Tank buster sur VOUS',
        ja: '自分にタンクバスター',
        cn: '死刑点名',
        ko: '탱버 대상자',
    },
    // when there are multiple tankbusters going out
    tankBusters: {
        en: 'Tank Busters',
        de: 'Tank buster',
        fr: 'Tank busters',
        ja: 'タンクバスター',
        cn: '坦克死刑',
        ko: '탱버',
    },
    tankCleave: {
        en: 'Tank cleave',
        de: 'Tank Cleave',
        fr: 'Tank cleave',
        ja: '前方範囲攻撃',
        cn: '顺劈',
        ko: '광역 탱버',
    },
    avoidTankCleave: {
        en: 'Avoid tank cleave',
        de: 'Tank Cleave ausweichen',
        fr: 'Évitez le tank cleave',
        ja: '前方範囲攻撃を避ける',
        cn: '远离顺劈',
        ko: '광역 탱버 피하기',
    },
    tankCleaveOnYou: {
        en: 'Tank cleave on YOU',
        de: 'Tank Cleave aud DIR',
        fr: 'Tank cleave sur VOUS',
        ja: '自分に前方範囲攻撃',
        cn: '顺劈点名',
        ko: '나에게 광역 탱버',
    },
    tankSwap: {
        en: 'Tank Swap!',
        de: 'Tankwechsel!',
        fr: 'Tank swap !',
        ja: 'タンクスイッチ!',
        cn: '换T！',
        ko: '탱 교대',
    },
    spread: {
        en: 'Spread',
        de: 'Verteilen',
        fr: 'Dispersez-vous',
        ja: '散開',
        cn: '分散',
        ko: '산개',
    },
    stackMarker: {
        // for stack marker situations
        en: 'Stack',
        de: 'Sammeln',
        fr: 'Packez-vous',
        ja: '頭割り',
        cn: '分摊',
        ko: '쉐어뎀',
    },
    getTogether: {
        // for getting together without stack marker
        en: 'Stack',
        de: 'Sammeln',
        fr: 'Packez-vous',
        ja: '集合',
        cn: '集合',
        ko: '쉐어뎀',
    },
    stackOnYou: {
        en: 'Stack on YOU',
        de: 'Auf DIR sammeln',
        fr: 'Package sur VOUS',
        ja: '自分に集合',
        cn: '集合点名',
        ko: '쉐어징 대상자',
    },
    stackOnPlayer: {
        en: 'Stack on ${player}',
        de: 'Auf ${player} sammeln',
        fr: 'Packez-vous sur ${player}',
        ja: '${player}に集合',
        cn: '靠近 ${player}集合',
        ko: '"${player}" 쉐어징',
    },
    stackMiddle: {
        en: 'Stack in middle',
        de: 'In der Mitte sammeln',
        fr: 'Packez-vous au milieu',
        ja: '中央で集合',
        cn: '中间集合',
        ko: '중앙에서 모이기',
    },
    doritoStack: {
        en: 'Dorito Stack',
        de: 'Mit Marker sammeln',
        fr: 'Packez les marquages',
        ja: 'マーカー付けた人と集合',
        cn: '点名集合',
        ko: '징끼리 모이기',
    },
    spreadThenStack: {
        en: 'Spread => Stack',
        de: 'Verteilen => Sammeln',
        fr: 'Dispersion => Package',
        ja: '散開 => 集合',
        cn: '分散 => 集合',
        ko: '산개 => 집합',
    },
    stackThenSpread: {
        en: 'Stack => Spread',
        de: 'Sammeln => Verteilen',
        fr: 'Package => Dispersion',
        ja: 'スタック => 散開',
        cn: '集合 => 分散',
        ko: '집합 => 산개',
    },
    knockback: {
        en: 'Knockback',
        de: 'Rückstoß',
        fr: 'Poussée',
        ja: 'ノックバック',
        cn: '击退',
        ko: '넉백',
    },
    knockbackOnYou: {
        en: 'Knockback on YOU',
        de: 'Rückstoß auf DIR',
        fr: 'Poussée sur VOUS',
        ja: '自分にノックバック',
        cn: '击退点名',
        ko: '넉백징 대상자',
    },
    knockbackOnPlayer: {
        en: 'Knockback on ${player}',
        de: 'Rückstoß auf ${player}',
        fr: 'Poussée sur ${player}',
        ja: '${player}にノックバック',
        cn: '击退点名${player}',
        ko: '"${player}" 넉백징',
    },
    lookTowardsBoss: {
        en: 'Look Towards Boss',
        de: 'Anschauen Boss',
        fr: 'Regardez le boss',
        ja: 'ボスを見る',
        cn: '面向Boss',
        ko: '쳐다보기',
    },
    lookAway: {
        en: 'Look Away',
        de: 'Wegschauen',
        fr: 'Regardez ailleurs',
        ja: 'ボスを見ない',
        cn: '背对Boss',
        ko: '뒤돌기',
    },
    lookAwayFromPlayer: {
        en: 'Look Away from ${player}',
        de: 'Schau weg von ${player}',
        fr: 'Ne regardez pas ${player}',
        ja: '${player}を見ない',
        cn: '背对${player}',
        ko: '${player}에게서 뒤돌기',
    },
    lookAwayFromTarget: {
        en: 'Look Away from ${name}',
        de: 'Schau weg von ${name}',
        fr: 'Ne regardez pas ${name}',
        ja: '${name}を見ない',
        cn: '背对${name}',
        ko: '${name}에게서 뒤돌기',
    },
    getBehind: {
        en: 'Get Behind',
        de: 'Hinter ihn',
        fr: 'Passez derrière',
        ja: '背面へ',
        cn: '去背后',
        ko: '보스 뒤로',
    },
    goFrontOrSides: {
        en: 'Go Front / Sides',
        de: 'Gehe nach Vorne/ zu den Seiten',
        fr: 'Allez Devant / Côtés',
        ja: '前／横へ',
        cn: '去前侧方',
        ko: '보스 후방 피하기',
    },
    goFront: {
        en: 'Go Front',
        de: 'Geh nach vorn',
        fr: 'Allez Devant',
        ja: '前へ',
        cn: '去前面',
        ko: '앞으로',
    },
    // getUnder is used when you have to get into the bosses hitbox
    getUnder: {
        en: 'Get Under',
        de: 'Unter ihn',
        fr: 'En dessous',
        ja: 'ボスに貼り付く',
        cn: '去脚下',
        ko: '보스 아래로',
    },
    // in is more like "get close but maybe even melee range is fine"
    in: {
        en: 'In',
        de: 'Rein',
        fr: 'Intérieur',
        ja: '中へ',
        cn: '靠近',
        ko: '안으로',
    },
    // out means get far away
    out: {
        en: 'Out',
        de: 'Raus',
        fr: 'Exterieur',
        ja: '外へ',
        cn: '远离',
        ko: '밖으로',
    },
    outOfMelee: {
        en: 'Out of melee',
        de: 'Raus aus Nahkampf',
        fr: 'Sortez de la mêlée',
        ja: '近接最大レンジ',
        cn: '近战最远距离回避',
        ko: '근접범위 밖으로',
    },
    inThenOut: {
        en: 'In, then out',
        de: 'Rein, dann raus',
        fr: 'Intérieur, puis extérieur',
        ja: '中 => 外',
        cn: '先靠近，再远离',
        ko: '안으로 => 밖으로',
    },
    outThenIn: {
        en: 'Out, then in',
        de: 'Raus, dann rein',
        fr: 'Extérieur, puis intérieur',
        ja: '外 => 中',
        cn: '先远离，再靠近',
        ko: '밖으로 => 안으로',
    },
    backThenFront: {
        en: 'Back Then Front',
        de: 'Nach Hinten, danach nach Vorne',
        fr: 'Derrière puis devant',
        ja: '後ろ => 前',
        cn: '后 => 前',
        ko: '뒤로 => 앞으로',
    },
    frontThenBack: {
        en: 'Front Then Back',
        de: 'Nach Vorne, danach nach Hinten',
        fr: 'Devant puis derrière',
        ja: '前 => 後ろ',
        cn: '前 => 后',
        ko: '앞으로 => 뒤로',
    },
    goIntoMiddle: {
        en: 'go into middle',
        de: 'in die Mitte gehen',
        fr: 'Allez au milieu',
        ja: '中へ',
        cn: '去中间',
        ko: '중앙으로',
    },
    right: {
        en: 'Right',
        de: 'Rechts',
        fr: 'À droite',
        ja: '右へ',
        cn: '右',
        ko: '오른쪽',
    },
    left: {
        en: 'Left',
        de: 'Links',
        fr: 'À gauche',
        ja: '左へ',
        cn: '左',
        ko: '왼쪽',
    },
    getLeftAndWest: {
        en: '<= Get Left/West',
        de: '<= Nach Links/Westen',
        fr: '<= Allez à Gauche/Ouest',
        ja: '<= 左/西へ',
        cn: '<= 去左/西边',
        ko: '<= 왼쪽으로',
    },
    getRightAndEast: {
        en: 'Get Right/East =>',
        de: 'Nach Rechts/Osten =>',
        fr: 'Allez à Droite/Est =>',
        ja: '右/東へ =>',
        cn: '去右/东边 =>',
        ko: '오른쪽으로 =>',
    },
    goFrontBack: {
        en: 'Go Front/Back',
        de: 'Geh nach Vorne/Hinten',
        fr: 'Allez Devant/Derrière',
        ja: '縦へ',
        cn: '去前后',
        ko: '앞/뒤로',
    },
    sides: {
        en: 'Sides',
        de: 'Seiten',
        fr: 'Côtés',
        ja: '横へ',
        cn: '去侧面',
        ko: '양옆으로',
    },
    middle: {
        en: 'Middle',
        de: 'Mitte',
        fr: 'Milieu',
        ja: '中へ',
        cn: '中间',
        ko: '중앙',
    },
    // killAdds is used for adds that will always be available
    killAdds: {
        en: 'Kill adds',
        de: 'Adds besiegen',
        fr: 'Tuez les adds',
        ja: '雑魚を処理',
        cn: '击杀小怪',
        ko: '쫄 잡기',
    },
    // killExtraAdd is used for adds that appear if a mechanic was not played correctly
    killExtraAdd: {
        en: 'Kill Extra Add',
        de: 'Add besiegen',
        fr: 'Tuez l\'add',
        ja: '雑魚を倒す',
        cn: '击杀小怪',
        ko: '쫄 잡기',
    },
    awayFromFront: {
        en: 'Away From Front',
        de: 'Weg von Vorne',
        fr: 'Éloignez-vous du devant',
        ja: '前方から離れる',
        cn: '远离正面',
        ko: '보스 전방 피하기',
    },
    sleepTarget: {
        en: 'Sleep ${name}',
        de: 'Schlaf auf ${name}',
        fr: 'Sommeil sur ${name}',
        ja: '${name} にスリプル',
        cn: '催眠 ${name}',
        ko: '${name} 슬리플',
    },
    stunTarget: {
        en: 'Stun ${name}',
        de: 'Betäubung auf ${name}',
        fr: 'Étourdissez ${name}',
        ja: '${name} にスタン',
        cn: '眩晕 ${name}',
        ko: '${name}기절',
    },
    interruptTarget: {
        en: 'interrupt ${name}',
        de: 'unterbreche ${name}',
        fr: 'Interrompez ${name}',
        ja: '${name} に沈黙',
        cn: '打断${name}',
        ko: '${name}기술 시전 끊기',
    },
    preyOnYou: {
        en: 'Prey on YOU',
        de: 'Marker auf DIR',
        fr: 'Marquage sur VOUS',
        ja: '自分に捕食',
        cn: '掠食点名',
        ko: '홍옥징 대상자',
    },
    preyOnPlayer: {
        en: 'Prey on ${player}',
        de: 'Marker auf ${player}',
        fr: 'Marquage sur ${player}',
        ja: '${player}に捕食',
        cn: '掠食点名${player}',
        ko: '"${player}" 홍옥징',
    },
    awayFromGroup: {
        en: 'Away from Group',
        de: 'Weg von der Gruppe',
        fr: 'Éloignez-vous du groupe',
        ja: '外へ',
        cn: '远离人群',
        ko: '다른 사람들이랑 떨어지기',
    },
    awayFromPlayer: {
        en: 'Away from ${player}',
        de: 'Weg von ${player}',
        fr: 'Éloignez-vous de ${player}',
        ja: '${player}から離れる',
        cn: '远离${player}',
        ko: '"${player}"에서 멀어지기',
    },
    meteorOnYou: {
        en: 'Meteor on YOU',
        de: 'Meteor auf DIR',
        fr: 'Météore sur VOUS',
        ja: '自分にメテオ',
        cn: '陨石点名',
        ko: '나에게 메테오징',
    },
    stopMoving: {
        en: 'Stop Moving!',
        de: 'Bewegung stoppen!',
        fr: 'Ne bougez pas !',
        ja: '移動禁止！',
        cn: '停止移动！',
        ko: '이동 멈추기!',
    },
    stopEverything: {
        en: 'Stop Everything!',
        de: 'Stoppe Alles!',
        fr: 'Arrêtez TOUT !',
        ja: '行動禁止！',
        cn: '停止行动！',
        ko: '행동 멈추기!',
    },
    moveAway: {
        // move away to dodge aoes
        en: 'Move!',
        de: 'Bewegen!',
        fr: 'Bougez !',
        ja: '避けて！',
        cn: '快躲开！',
        ko: '이동하기!',
    },
    moveAround: {
        // move around (e.g. jumping) to avoid being frozen
        en: 'Move!',
        de: 'Bewegen!',
        fr: 'Bougez !',
        ja: '動く！',
        cn: '快动！',
        ko: '움직이기!',
    },
    breakChains: {
        en: 'Break chains',
        de: 'Kette zerbrechen',
        fr: 'Brisez les chaines',
        ja: '線を切る',
        cn: '切断连线',
        ko: '선 끊기',
    },
    moveChainsTogether: {
        en: 'Move chains together',
        de: 'Ketten zusammen bewegen',
        fr: 'Bougez les chaines ensemble',
        ja: '線同士一緒に移動',
        cn: '连线一起移动',
        ko: '선 붙어서 같이 움직이기',
    },
    earthshakerOnYou: {
        en: 'Earth Shaker on YOU',
        de: 'Erdstoß auf DIR',
        fr: 'Marque de terre sur VOUS',
        ja: '自分にアースシェイカー',
        cn: '大地摇动点名',
        ko: '어스징 대상자',
    },
    wakeUp: {
        en: 'WAKE UP',
        de: 'AUFWACHEN',
        fr: 'RÉVEILLES-TOI',
        ja: '目を覚まして！',
        cn: '醒醒！动一动！！',
        ko: '강제 퇴장 7분 전',
    },
    closeTethersWithPlayer: {
        en: 'Close Tethers (${player})',
        de: 'Nahe Verbindungen (${player})',
        fr: 'Liens proches avec (${player})',
        ja: '(${player})に近づく',
        cn: '靠近连线 (${player})',
        ko: '상대와 가까이 붙기 (${player})',
    },
    farTethersWithPlayer: {
        en: 'Far Tethers (${player})',
        de: 'Entfernte Verbindungen (${player})',
        fr: 'Liens éloignés avec (${player})',
        ja: ' (${player})から離れる',
        cn: '远离连线 (${player})',
        ko: '상대와 떨어지기 (${player})',
    },
    unknown: {
        en: '???',
        de: '???',
        fr: '???',
        ja: '???',
        cn: '???',
        ko: '???',
    },
    north: {
        en: 'North',
        de: 'Norden',
        fr: 'Nord',
        ja: '北',
        cn: '上(北)',
        ko: '북쪽',
    },
    south: {
        en: 'South',
        de: 'Süden',
        fr: 'Sud',
        ja: '南',
        cn: '下(南)',
        ko: '남쪽',
    },
    east: {
        en: 'East',
        de: 'Osten',
        fr: 'Est',
        ja: '東',
        cn: '右(东)',
        ko: '동쪽',
    },
    west: {
        en: 'West',
        de: 'Westen',
        fr: 'Ouest',
        ja: '西',
        cn: '左(西)',
        ko: '서쪽',
    },
    northwest: {
        en: 'Northwest',
        de: 'Nordwesten',
        fr: 'nord-ouest',
        ja: '北西',
        cn: '左上(西北)',
        ko: '북서',
    },
    northeast: {
        en: 'Northeast',
        de: 'Nordosten',
        fr: 'nord-est',
        ja: '北東',
        cn: '右上(东北)',
        ko: '북동',
    },
    southwest: {
        en: 'Southwest',
        de: 'Südwesten',
        fr: 'sud-ouest',
        ja: '南西',
        cn: '左下(西南)',
        ko: '남서',
    },
    southeast: {
        en: 'Southeast',
        de: 'Südosten',
        fr: 'sud-est',
        ja: '南東',
        cn: '右下(东南)',
        ko: '남동',
    },
    dirN: {
        en: 'N',
        de: 'N',
        fr: 'N',
        ja: '北',
        cn: '上(北)',
        ko: '북쪽',
    },
    dirS: {
        en: 'S',
        de: 'S',
        fr: 'S',
        ja: '南',
        cn: '下(南)',
        ko: '남쪽',
    },
    dirE: {
        en: 'E',
        de: 'O',
        fr: 'E',
        ja: '東',
        cn: '右(东)',
        ko: '동쪽',
    },
    dirW: {
        en: 'W',
        de: 'W',
        fr: 'O',
        ja: '西',
        cn: '左(西)',
        ko: '서쪽',
    },
    dirNW: {
        en: 'NW',
        de: 'NW',
        fr: 'NO',
        ja: '北西',
        cn: '左上(西北)',
        ko: '북서',
    },
    dirNE: {
        en: 'NE',
        de: 'NO',
        fr: 'NE',
        ja: '北東',
        cn: '右上(东北)',
        ko: '북동',
    },
    dirSW: {
        en: 'SW',
        de: 'SW',
        fr: 'SO',
        ja: '南西',
        cn: '左下(西南)',
        ko: '남서',
    },
    dirSE: {
        en: 'SE',
        de: 'SO',
        fr: 'SE',
        ja: '南東',
        cn: '右下(东南)',
        ko: '남동',
    },
    // Literal numbers.
    num0: numberToOutputString(0),
    num1: numberToOutputString(1),
    num2: numberToOutputString(2),
    num3: numberToOutputString(3),
    num4: numberToOutputString(4),
    num5: numberToOutputString(5),
    num6: numberToOutputString(6),
    num7: numberToOutputString(7),
    num8: numberToOutputString(8),
    num9: numberToOutputString(9),
});


/***/ }),

/***/ 511:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PS": () => (/* binding */ addOverlayListener),
/* harmony export */   "ae": () => (/* binding */ callOverlayHandler),
/* harmony export */   "GL": () => (/* binding */ setCallOverlayHandlerOverride)
/* harmony export */ });
/* unused harmony exports dispatchOverlayEvent, removeOverlayListener, init */
// OverlayPlugin API setup
let inited = false;
let wsUrl = null;
let ws = null;
let queue = [];
let rseqCounter = 0;
const responsePromises = {};
const subscribers = {};
const sendMessage = (msg, cb) => {
    if (ws) {
        if (queue)
            queue.push(msg);
        else
            ws.send(JSON.stringify(msg));
    }
    else {
        if (queue)
            queue.push([msg, cb]);
        else
            window.OverlayPluginApi.callHandler(JSON.stringify(msg), cb);
    }
};
const processEvent = (msg) => {
    init();
    const subs = subscribers[msg.type];
    subs === null || subs === void 0 ? void 0 : subs.forEach((sub) => sub(msg));
};
const dispatchOverlayEvent = processEvent;
const addOverlayListener = (event, cb) => {
    var _a;
    init();
    if (!subscribers[event]) {
        subscribers[event] = [];
        if (!queue) {
            sendMessage({
                call: 'subscribe',
                events: [event],
            });
        }
    }
    (_a = subscribers[event]) === null || _a === void 0 ? void 0 : _a.push(cb);
};
const removeOverlayListener = (event, cb) => {
    init();
    if (subscribers[event]) {
        const list = subscribers[event];
        const pos = list === null || list === void 0 ? void 0 : list.indexOf(cb);
        if (pos && pos > -1)
            list === null || list === void 0 ? void 0 : list.splice(pos, 1);
    }
};
const callOverlayHandlerInternal = (_msg) => {
    init();
    const msg = {
        ..._msg,
        rseq: 0,
    };
    let p;
    if (ws) {
        msg.rseq = rseqCounter++;
        p = new Promise((resolve) => {
            responsePromises[msg.rseq] = resolve;
        });
        sendMessage(msg);
    }
    else {
        p = new Promise((resolve) => {
            sendMessage(msg, (data) => {
                resolve(data === null ? null : JSON.parse(data));
            });
        });
    }
    return p;
};
let callOverlayHandlerOverride;
const callOverlayHandler = (_msg) => {
    init();
    if (callOverlayHandlerOverride) {
        return callOverlayHandlerOverride(_msg);
    }
    return callOverlayHandlerInternal(_msg);
};
const setCallOverlayHandlerOverride = (override) => {
    callOverlayHandlerOverride = override;
    return callOverlayHandlerInternal;
};
const init = () => {
    if (inited)
        return;
    if (typeof window !== 'undefined') {
        wsUrl = /[\?&]OVERLAY_WS=([^&]+)/.exec(window.location.href);
        if (wsUrl) {
            const connectWs = function () {
                ws = new WebSocket(wsUrl === null || wsUrl === void 0 ? void 0 : wsUrl[1]);
                ws.addEventListener('error', (e) => {
                    console.error(e);
                });
                ws.addEventListener('open', () => {
                    console.log('Connected!');
                    const q = queue !== null && queue !== void 0 ? queue : [];
                    queue = null;
                    sendMessage({
                        call: 'subscribe',
                        events: Object.keys(subscribers),
                    });
                    for (const msg of q) {
                        if (!Array.isArray(msg))
                            sendMessage(msg);
                    }
                });
                ws.addEventListener('message', (_msg) => {
                    var _a;
                    try {
                        const msg = JSON.parse(_msg.data);
                        if (msg.rseq !== undefined && responsePromises[msg.rseq]) {
                            (_a = responsePromises[msg.rseq]) === null || _a === void 0 ? void 0 : _a.call(responsePromises, msg);
                            delete responsePromises[msg.rseq];
                        }
                        else {
                            processEvent(msg);
                        }
                    }
                    catch (e) {
                        console.error('Invalid message received: ', _msg);
                        return;
                    }
                });
                ws.addEventListener('close', () => {
                    queue = null;
                    console.log('Trying to reconnect...');
                    // Don't spam the server with retries.
                    setTimeout(() => {
                        connectWs();
                    }, 300);
                });
            };
            connectWs();
        }
        else {
            const waitForApi = function () {
                if (!window.OverlayPluginApi || !window.OverlayPluginApi.ready) {
                    setTimeout(waitForApi, 300);
                    return;
                }
                const q = queue !== null && queue !== void 0 ? queue : [];
                queue = null;
                window.__OverlayCallback = processEvent;
                sendMessage({
                    call: 'subscribe',
                    events: Object.keys(subscribers),
                });
                for (const item of q) {
                    if (Array.isArray(item))
                        sendMessage(item[0], item[1]);
                }
            };
            waitForApi();
        }
        // Here the OverlayPlugin API is registered to the window object,
        // but this is mainly for backwards compatibility.For cactbot's built-in files,
        // it is recommended to use the various functions exported in resources/overlay_plugin_api.ts.
        window.addOverlayListener = addOverlayListener;
        window.removeOverlayListener = removeOverlayListener;
        window.callOverlayHandler = callOverlayHandler;
        window.dispatchOverlayEvent = dispatchOverlayEvent;
    }
    inited = true;
};


/***/ }),

/***/ 911:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ Regexes)
/* harmony export */ });
const startsUsingParams = ['timestamp', 'source', 'id', 'ability', 'target', 'capture'];
const abilityParams = ['timestamp', 'source', 'sourceId', 'id', 'ability', 'targetId', 'target', 'capture'];
const abilityFullParams = [
    'timestamp',
    'sourceId',
    'source',
    'id',
    'ability',
    'targetId',
    'target',
    'flags',
    'flag0',
    'flag1',
    'flag2',
    'flag3',
    'flag4',
    'flag5',
    'flag6',
    'flag7',
    'flag8',
    'flag9',
    'flag10',
    'flag11',
    'flag12',
    'flag13',
    'flag14',
    'targetHp',
    'targetMaxHp',
    'targetMp',
    'targetMaxMp',
    'targetX',
    'targetY',
    'targetZ',
    'targetHeading',
    'hp',
    'maxHp',
    'mp',
    'maxMp',
    'x',
    'y',
    'z',
    'heading',
    'capture',
];
const headMarkerParams = ['timestamp', 'targetId', 'target', 'id', 'capture'];
const addedCombatantParams = ['timestamp', 'name', 'capture'];
const addedCombatantFullParams = [
    'timestamp',
    'id',
    'name',
    'job',
    'level',
    'hp',
    'x',
    'y',
    'z',
    'npcId',
    'capture',
];
const removingCombatantParams = [
    'timestamp',
    'id',
    'name',
    'hp',
    'x',
    'y',
    'z',
    'capture',
];
const gainsEffectParams = ['timestamp', 'targetId', 'target', 'effect', 'source', 'duration', 'capture'];
const statusEffectExplicitParams = [
    'timestamp',
    'targetId',
    'target',
    'job',
    'hp',
    'maxHp',
    'mp',
    'maxMp',
    'x',
    'y',
    'z',
    'heading',
    'data0',
    'data1',
    'data2',
    'data3',
    'data4',
    'capture',
];
const losesEffectParams = ['timestamp', 'targetId', 'target', 'effect', 'source', 'capture'];
const statChangeParams = [
    'timestamp',
    'job',
    'strength',
    'dexterity',
    'vitality',
    'intelligence',
    'mind',
    'piety',
    'attackPower',
    'directHit',
    'criticalHit',
    'attackMagicPotency',
    'healMagicPotency',
    'determination',
    'skillSpeed',
    'spellSpeed',
    'tenacity',
    'capture',
];
const tetherParams = ['timestamp', 'source', 'sourceId', 'target', 'targetId', 'id', 'capture'];
const wasDefeatedParams = ['timestamp', 'target', 'source', 'capture'];
const hasHPParams = ['timestamp', 'name', 'hp', 'capture'];
const echoParams = ['timestamp', 'code', 'line', 'capture'];
const dialogParams = ['timestamp', 'code', 'line', 'name', 'capture'];
const messageParams = ['timestamp', 'code', 'line', 'capture'];
const gameLogParams = ['timestamp', 'code', 'line', 'capture'];
const gameNameLogParams = ['timestamp', 'code', 'name', 'line', 'capture'];
const changeZoneParams = ['timestamp', 'name', 'capture'];
const network6dParams = ['timestamp', 'instance', 'command', 'data0', 'data1', 'data2', 'data3', 'capture'];
class Regexes {
    /**
     * fields: source, id, ability, target, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#14-networkstartscasting
     */
    static startsUsing(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'startsUsing', startsUsingParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        let str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 14:' +
            Regexes.maybeCapture(capture, 'id', f.id, '\\y{AbilityCode}') + ':';
        if (f.source || f.id || f.target || capture)
            str += Regexes.maybeCapture(capture, 'source', f.source, '.*?') + ' starts using ';
        if (f.ability || f.target || capture)
            str += Regexes.maybeCapture(capture, 'ability', f.ability, '.*?') + ' on ';
        if (f.target || capture)
            str += Regexes.maybeCapture(capture, 'target', f.target, '.*?') + '\\.';
        return Regexes.parse(str);
    }
    /**
     * fields: sourceId, source, id, ability, targetId, target, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#15-networkability
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#16-networkaoeability
     */
    static ability(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'ability', abilityParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        let str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 1[56]:' + Regexes.maybeCapture(capture, 'sourceId', '\\y{ObjectId}') + ':' +
            Regexes.maybeCapture(capture, 'source', f.source, '[^:]*?') + ':';
        if (f.id || f.ability || f.target || f.targetId || capture)
            str += Regexes.maybeCapture(capture, 'id', f.id, '\\y{AbilityCode}') + ':';
        if (f.ability || f.target || f.targetId || capture)
            str += Regexes.maybeCapture(capture, 'ability', f.ability, '[^:]*?') + ':';
        if (f.target || f.targetId || capture)
            str += Regexes.maybeCapture(capture, 'targetId', '\\y{ObjectId}') + ':';
        if (f.target || capture)
            str += Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':';
        return Regexes.parse(str);
    }
    /**
     * fields: sourceId, source, id, ability, targetId, target, flags, x, y, z, heading, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#15-networkability
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#16-networkaoeability
     */
    static abilityFull(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'abilityFull', abilityFullParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 1[56]:' +
            Regexes.maybeCapture(capture, 'sourceId', f.sourceId, '\\y{ObjectId}') + ':' +
            Regexes.maybeCapture(capture, 'source', f.source, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'id', f.id, '\\y{AbilityCode}') + ':' +
            Regexes.maybeCapture(capture, 'ability', f.ability, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\y{ObjectId}') + ':' +
            Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flags', f.flags, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag0', f.flag0, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag1', f.flag1, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag2', f.flag2, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag3', f.flag3, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag4', f.flag4, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag5', f.flag5, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag6', f.flag6, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag7', f.flag7, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag8', f.flag8, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag9', f.flag9, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag10', f.flag10, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag11', f.flag11, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag12', f.flag12, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag13', f.flag13, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'flag14', f.flag13, '[^:]*?') + ':' +
            Regexes.optional(Regexes.maybeCapture(capture, 'targetHp', f.targetHp, '\\y{Float}')) + ':' +
            Regexes.optional(Regexes.maybeCapture(capture, 'targetMaxHp', f.targetMaxHp, '\\y{Float}')) + ':' +
            Regexes.optional(Regexes.maybeCapture(capture, 'targetMp', f.targetMp, '\\y{Float}')) + ':' +
            Regexes.optional(Regexes.maybeCapture(capture, 'targetMaxMp', f.targetMaxMp, '\\y{Float}')) + ':' +
            Regexes.optional('\\y{Float}') + ':' + // Target TP
            Regexes.optional('\\y{Float}') + ':' + // Target Max TP
            Regexes.optional(Regexes.maybeCapture(capture, 'targetX', f.targetX, '\\y{Float}')) + ':' +
            Regexes.optional(Regexes.maybeCapture(capture, 'targetY', f.targetY, '\\y{Float}')) + ':' +
            Regexes.optional(Regexes.maybeCapture(capture, 'targetZ', f.targetZ, '\\y{Float}')) + ':' +
            Regexes.optional(Regexes.maybeCapture(capture, 'targetHeading', f.targetHeading, '\\y{Float}')) + ':' +
            Regexes.maybeCapture(capture, 'hp', f.hp, '\\y{Float}') + ':' +
            Regexes.maybeCapture(capture, 'maxHp', f.maxHp, '\\y{Float}') + ':' +
            Regexes.maybeCapture(capture, 'mp', f.mp, '\\y{Float}') + ':' +
            Regexes.maybeCapture(capture, 'maxMp', f.maxMp, '\\y{Float}') + ':' +
            '\\y{Float}:' + // Source TP
            '\\y{Float}:' + // Source Max TP
            Regexes.maybeCapture(capture, 'x', f.x, '\\y{Float}') + ':' +
            Regexes.maybeCapture(capture, 'y', f.y, '\\y{Float}') + ':' +
            Regexes.maybeCapture(capture, 'z', f.z, '\\y{Float}') + ':' +
            Regexes.maybeCapture(capture, 'heading', f.heading, '\\y{Float}') + ':' +
            '.*?$'; // Unknown last field
        return Regexes.parse(str);
    }
    /**
     * fields: targetId, target, id, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1b-networktargeticon-head-markers
     */
    static headMarker(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'headMarker', headMarkerParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 1B:' +
            Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\y{ObjectId}') + ':' +
            Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':....:....:' +
            Regexes.maybeCapture(capture, 'id', f.id, '....') + ':';
        return Regexes.parse(str);
    }
    // fields: name, capture
    // matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#03-addcombatant
    static addedCombatant(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'addedCombatant', addedCombatantParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 03:\\y{ObjectId}:Added new combatant ' +
            Regexes.maybeCapture(capture, 'name', f.name, '.*?') + '\\.';
        return Regexes.parse(str);
    }
    /**
     * fields: id, name, hp, x, y, z, npcId, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#03-addcombatant
     */
    static addedCombatantFull(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'addedCombatantFull', addedCombatantFullParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 03:' + Regexes.maybeCapture(capture, 'id', f.id, '\\y{ObjectId}') +
            ':Added new combatant ' + Regexes.maybeCapture(capture, 'name', f.name, '[^:]*?') +
            '\\. {2}Job: ' + Regexes.maybeCapture(capture, 'job', f.job, '[^:]*?') +
            ' Level: ' + Regexes.maybeCapture(capture, 'level', f.level, '[^:]*?') +
            ' Max HP: ' + Regexes.maybeCapture(capture, 'hp', f.hp, '[0-9]+') + '\.' +
            '.*?Pos: \\(' +
            Regexes.maybeCapture(capture, 'x', f.x, '\\y{Float}') + ',' +
            Regexes.maybeCapture(capture, 'y', f.y, '\\y{Float}') + ',' +
            Regexes.maybeCapture(capture, 'z', f.z, '\\y{Float}') + '\\)' +
            '(?: \\(' + Regexes.maybeCapture(capture, 'npcId', f.npcId, '.*?') + '\\))?\\.';
        return Regexes.parse(str);
    }
    /**
     * fields: id, name, hp, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#04-removecombatant
     */
    static removingCombatant(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'removingCombatant', removingCombatantParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 04:' + Regexes.maybeCapture(capture, 'id', '\\y{ObjectId}') +
            ':Removing combatant ' +
            Regexes.maybeCapture(capture, 'name', f.name, '.*?') + '\\.' +
            '.*?Max HP: ' + Regexes.maybeCapture(capture, 'hp', f.hp, '[0-9]+') + '\.' +
            Regexes.optional('.*?Pos: \\(' +
                Regexes.maybeCapture(capture, 'x', f.x, '\\y{Float}') + ',' +
                Regexes.maybeCapture(capture, 'y', f.y, '\\y{Float}') + ',' +
                Regexes.maybeCapture(capture, 'z', f.z, '\\y{Float}') + '\\)');
        return Regexes.parse(str);
    }
    // fields: targetId, target, effect, source, duration, capture
    // matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1a-networkbuff
    static gainsEffect(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'gainsEffect', gainsEffectParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 1A:' +
            Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\y{ObjectId}') + ':' +
            Regexes.maybeCapture(capture, 'target', f.target, '.*?') +
            ' gains the effect of ' +
            Regexes.maybeCapture(capture, 'effect', f.effect, '.*?') +
            ' from ' +
            Regexes.maybeCapture(capture, 'source', f.source, '.*?') +
            ' for ' +
            Regexes.maybeCapture(capture, 'duration', f.duration, '\\y{Float}') +
            ' Seconds\\.';
        return Regexes.parse(str);
    }
    /**
     * Prefer gainsEffect over this function unless you really need extra data.
     * fields: targetId, target, job, hp, maxHp, mp, maxMp, x, y, z, heading,
     *         data0, data1, data2, data3, data4
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#26-networkstatuseffects
     */
    static statusEffectExplicit(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'statusEffectExplicit', statusEffectExplicitParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const kField = '.*?:';
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 26:' +
            Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\y{ObjectId}') + ':' +
            Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') + ':' +
            '[0-9A-F]{0,6}' + Regexes.maybeCapture(capture, 'job', f.job, '[0-9A-F]{0,2}') + ':' +
            Regexes.maybeCapture(capture, 'hp', f.hp, '\\y{Float}') + ':' +
            Regexes.maybeCapture(capture, 'maxHp', f.maxHp, '\\y{Float}') + ':' +
            Regexes.maybeCapture(capture, 'mp', f.mp, '\\y{Float}') + ':' +
            Regexes.maybeCapture(capture, 'maxMp', f.maxMp, '\\y{Float}') + ':' +
            kField + // tp lol
            kField + // max tp extra lol
            // x, y, z heading may be blank
            Regexes.optional(Regexes.maybeCapture(capture, 'x', f.x, '\\y{Float}')) + ':' +
            Regexes.optional(Regexes.maybeCapture(capture, 'y', f.y, '\\y{Float}')) + ':' +
            Regexes.optional(Regexes.maybeCapture(capture, 'z', f.z, '\\y{Float}')) + ':' +
            Regexes.optional(Regexes.maybeCapture(capture, 'heading', f.heading, '\\y{Float}')) + ':' +
            Regexes.maybeCapture(capture, 'data0', f.data0, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'data1', f.data1, '[^:]*?') + ':' +
            // data2, 3, 4 may not exist and the line may terminate.
            Regexes.optional(Regexes.maybeCapture(capture, 'data2', f.data2, '[^:]*?') + ':') +
            Regexes.optional(Regexes.maybeCapture(capture, 'data3', f.data3, '[^:]*?') + ':') +
            Regexes.optional(Regexes.maybeCapture(capture, 'data4', f.data4, '[^:]*?') + ':');
        return Regexes.parse(str);
    }
    /**
     * fields: targetId, target, effect, source, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#1e-networkbuffremove
     */
    static losesEffect(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'losesEffect', losesEffectParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 1E:' +
            Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\y{ObjectId}') + ':' +
            Regexes.maybeCapture(capture, 'target', f.target, '.*?') +
            ' loses the effect of ' +
            Regexes.maybeCapture(capture, 'effect', f.effect, '.*?') +
            ' from ' +
            Regexes.maybeCapture(capture, 'source', f.source, '.*?') + '\\.';
        return Regexes.parse(str);
    }
    /**
     * fields: source, sourceId, target, targetId, id, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#23-networktether
     */
    static tether(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'tether', tetherParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 23:' +
            Regexes.maybeCapture(capture, 'sourceId', f.sourceId, '\\y{ObjectId}') + ':' +
            Regexes.maybeCapture(capture, 'source', f.source, '[^:]*?') + ':' +
            Regexes.maybeCapture(capture, 'targetId', f.targetId, '\\y{ObjectId}') + ':' +
            Regexes.maybeCapture(capture, 'target', f.target, '[^:]*?') +
            ':....:....:' +
            Regexes.maybeCapture(capture, 'id', f.id, '....') + ':';
        return Regexes.parse(str);
    }
    /**
     * 'target' was defeated by 'source'
     * fields: target, source, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#19-networkdeath
     */
    static wasDefeated(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'wasDefeated', wasDefeatedParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 19:' +
            Regexes.maybeCapture(capture, 'target', f.target, '.*?') +
            ' was defeated by ' +
            Regexes.maybeCapture(capture, 'source', f.source, '.*?') + '\\.';
        return Regexes.parse(str);
    }
    /**
     * fields: name, hp, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#0d-combatanthp
     */
    static hasHP(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'hasHP', hasHPParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 0D:' +
            Regexes.maybeCapture(capture, 'name', f.name, '.*?') +
            ' HP at ' +
            Regexes.maybeCapture(capture, 'hp', f.hp, '\\d+') + '%';
        return Regexes.parse(str);
    }
    /**
     * fields: code, line, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
     */
    static echo(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'echo', echoParams);
        return Regexes.gameLog({
            line: f.line,
            capture: f.capture,
            code: '0038',
        });
    }
    /**
     * fields: code, line, name, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
     */
    static dialog(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'dialog', dialogParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 00:' +
            Regexes.maybeCapture(capture, 'code', '0044') + ':' +
            Regexes.maybeCapture(capture, 'name', f.name, '.*?') + ':' +
            Regexes.maybeCapture(capture, 'line', f.line, '.*') + '$';
        return Regexes.parse(str);
    }
    /**
     * fields: code, line, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
     */
    static message(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'message', messageParams);
        return Regexes.gameLog({
            line: f.line,
            capture: f.capture,
            code: '0839',
        });
    }
    /**
     * fields: code, line, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
     */
    static gameLog(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'gameLog', gameLogParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 00:' +
            Regexes.maybeCapture(capture, 'code', f.code, '....') + ':' +
            Regexes.maybeCapture(capture, 'line', f.line, '.*') + '$';
        return Regexes.parse(str);
    }
    /**
     * fields: code, name, line, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#00-logline
     * Some game log lines have names in them, but not all.  All network log lines for these
     * have empty fields, but these get dropped by the ACT FFXV plugin.
     */
    static gameNameLog(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'gameNameLog', gameNameLogParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 00:' +
            Regexes.maybeCapture(capture, 'code', f.code, '....') + ':' +
            Regexes.maybeCapture(capture, 'name', f.name, '[^:]*') + ':' +
            Regexes.maybeCapture(capture, 'line', f.line, '.*') + '$';
        return Regexes.parse(str);
    }
    /**
     * fields: job, strength, dexterity, vitality, intelligence, mind, piety, attackPower,
     *         directHit, criticalHit, attackMagicPotency, healMagicPotency, determination,
     *         skillSpeed, spellSpeed, tenacity, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#0c-playerstats
     */
    static statChange(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'statChange', statChangeParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 0C:Player Stats: ' +
            Regexes.maybeCapture(capture, 'job', f.job, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'strength', f.strength, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'dexterity', f.dexterity, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'vitality', f.vitality, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'intelligence', f.intelligence, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'mind', f.mind, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'piety', f.piety, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'attackPower', f.attackPower, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'directHit', f.directHit, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'criticalHit', f.criticalHit, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'attackMagicPotency', f.attackMagicPotency, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'healMagicPotency', f.healMagicPotency, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'determination', f.determination, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'skillSpeed', f.skillSpeed, '\\d+') + ':' +
            Regexes.maybeCapture(capture, 'spellSpeed', f.spellSpeed, '\\d+') +
            ':0:' +
            Regexes.maybeCapture(capture, 'tenacity', f.tenacity, '\\d+');
        return Regexes.parse(str);
    }
    /**
     * fields: name, capture
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#01-changezone
     */
    static changeZone(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'changeZone', changeZoneParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 01:Changed Zone to ' +
            Regexes.maybeCapture(capture, 'name', f.name, '.*?') + '\\.';
        return Regexes.parse(str);
    }
    /**
     * fields: instance, command, data0, data1, data2, data3
     * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#21-network6d-actor-control-lines
     */
    static network6d(f) {
        if (typeof f === 'undefined')
            f = {};
        Regexes.validateParams(f, 'network6d', network6dParams);
        const capture = Regexes.trueIfUndefined(f.capture);
        const str = Regexes.maybeCapture(capture, 'timestamp', '\\y{Timestamp}') +
            ' 21:' +
            Regexes.maybeCapture(capture, 'instance', f.instance, '.*?') + ':' +
            Regexes.maybeCapture(capture, 'command', f.command, '.*?') + ':' +
            Regexes.maybeCapture(capture, 'data0', f.data0, '.*?') + ':' +
            Regexes.maybeCapture(capture, 'data1', f.data1, '.*?') + ':' +
            Regexes.maybeCapture(capture, 'data2', f.data2, '.*?') + ':' +
            Regexes.maybeCapture(capture, 'data3', f.data3, '.*?') + '$';
        return Regexes.parse(str);
    }
    /**
     * Helper function for building named capture group
     */
    static maybeCapture(capture, name, value, defaultValue) {
        if (!value)
            value = defaultValue;
        value = Regexes.anyOf(value);
        return capture ? Regexes.namedCapture(name, value) : value;
    }
    static optional(str) {
        return `(?:${str})?`;
    }
    // Creates a named regex capture group named |name| for the match |value|.
    static namedCapture(name, value) {
        if (name.includes('>'))
            console.error('"' + name + '" contains ">".');
        if (name.includes('<'))
            console.error('"' + name + '" contains ">".');
        return '(?<' + name + '>' + value + ')';
    }
    /**
     * Convenience for turning multiple args into a unioned regular expression.
     * anyOf(x, y, z) or anyOf([x, y, z]) do the same thing, and return (?:x|y|z).
     * anyOf(x) or anyOf(x) on its own simplifies to just x.
     * args may be strings or RegExp, although any additional markers to RegExp
     * like /insensitive/i are dropped.
     */
    static anyOf(...args) {
        const anyOfArray = (array) => {
            return `(?:${array.map((elem) => elem instanceof RegExp ? elem.source : elem).join('|')})`;
        };
        let array = [];
        if (args.length === 1) {
            if (Array.isArray(args[0]))
                array = args[0];
            else if (args[0])
                array = [args[0]];
            else
                array = [];
        }
        else {
            // TODO: more accurate type instead of `as` cast
            array = args;
        }
        return anyOfArray(array);
    }
    static parse(regexpString) {
        const kCactbotCategories = {
            Timestamp: '^.{14}',
            NetTimestamp: '.{33}',
            NetField: '(?:[^|]*\\|)',
            LogType: '[0-9A-Fa-f]{2}',
            AbilityCode: '[0-9A-Fa-f]{1,8}',
            ObjectId: '[0-9A-F]{8}',
            // Matches any character name (including empty strings which the FFXIV
            // ACT plugin can generate when unknown).
            Name: '(?:[^\\s:|]+(?: [^\\s:|]+)?|)',
            // Floats can have comma as separator in FFXIV plugin output: https://github.com/ravahn/FFXIV_ACT_Plugin/issues/137
            Float: '-?[0-9]+(?:[.,][0-9]+)?(?:E-?[0-9]+)?',
        };
        // All regexes in cactbot are case insensitive.
        // This avoids headaches as things like `Vice and Vanity` turns into
        // `Vice And Vanity`, especially for French and German.  It appears to
        // have a ~20% regex parsing overhead, but at least they work.
        let modifiers = 'i';
        if (regexpString instanceof RegExp) {
            modifiers += (regexpString.global ? 'g' : '') +
                (regexpString.multiline ? 'm' : '');
            regexpString = regexpString.source;
        }
        regexpString = regexpString.replace(/\\y\{(.*?)\}/g, (match, group) => {
            return kCactbotCategories[group] || match;
        });
        return new RegExp(regexpString, modifiers);
    }
    // Like Regex.Regexes.parse, but force global flag.
    static parseGlobal(regexpString) {
        const regex = Regexes.parse(regexpString);
        let modifiers = 'gi';
        if (regexpString instanceof RegExp)
            modifiers += (regexpString.multiline ? 'm' : '');
        return new RegExp(regex.source, modifiers);
    }
    static trueIfUndefined(value) {
        if (typeof (value) === 'undefined')
            return true;
        return !!value;
    }
    static validateParams(f, funcName, params) {
        if (f === null)
            return;
        if (typeof f !== 'object')
            return;
        const keys = Object.keys(f);
        for (let k = 0; k < keys.length; ++k) {
            const key = keys[k];
            if (key && !params.includes(key)) {
                throw new Error(`${funcName}: invalid parameter '${key}'.  ` +
                    `Valid params: ${JSON.stringify(params)}`);
            }
        }
    }
}


/***/ }),

/***/ 667:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ug": () => (/* binding */ triggerOutputFunctions),
/* harmony export */   "n3": () => (/* binding */ Responses)
/* harmony export */ });
/* unused harmony exports builtInResponseStr, triggerFunctions, triggerTextOutputFunctions, severityMap */
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(970);
// This is meant to be used in a trigger as such:
// {
//   id: 'Some tankbuster',
//   regex: Regexes.startsUsing({source: 'Ye Olde Bosse', id: '666'}),
//   condition: Conditions.caresAboutMagical(data),
//   response: Responses.tankbuster(),
// },
//
// Note: Breaking out the condition like this lets people override it if they
// always (or never) want to know about it, rather than hiding the logic inside
// the tankbuster callback with a "is healer" check.
//
// If data.role is used, it should be only to differentiate between alert levels,
// and not whether a message is sent at all.
//
// Although this is not true of `response: ` fields on triggers in general,
// all responses in this file should either return an object or a single
// function that sets outputStrings and returns an object without doing
// anything with data or matches.  See `responses_test.js`.

const builtInResponseStr = 'cactbot-builtin-response';
// All valid trigger fields.
const triggerFunctions = (/* unused pure expression or super */ null && ([
    'alarmText',
    'alertText',
    'condition',
    'delaySeconds',
    'disabled',
    'durationSeconds',
    'id',
    'infoText',
    'preRun',
    'promise',
    'response',
    'run',
    'sound',
    'soundVolume',
    'suppressSeconds',
    'tts',
    'outputStrings',
]));
// Trigger fields that can produce text output.
const triggerTextOutputFunctions = [
    'alarmText',
    'alertText',
    'infoText',
    'response',
    'tts',
];
// If a trigger has any of these, then it has a visible/audio effect.
const triggerOutputFunctions = [
    ...triggerTextOutputFunctions,
    'sound',
];
const severityMap = {
    'info': 'infoText',
    'alert': 'alertText',
    'alarm': 'alarmText',
};
const getText = (sev) => {
    if (!(sev in severityMap))
        throw new Error(`Invalid severity: ${sev}.`);
    return severityMap[sev];
};
const defaultInfoText = (sev) => {
    if (!sev)
        return 'infoText';
    return getText(sev);
};
const defaultAlertText = (sev) => {
    if (!sev)
        return 'alertText';
    return getText(sev);
};
const defaultAlarmText = (sev) => {
    if (!sev)
        return 'alarmText';
    return getText(sev);
};
const getTarget = (matches) => {
    // Often tankbusters can be casted by the boss on the boss.
    // Consider this as "not having a target".
    if (!matches || matches.target === matches.source)
        return;
    return matches.target;
};
const getSource = (matches) => {
    return matches === null || matches === void 0 ? void 0 : matches.source;
};
// FIXME: make this work for any number of pairs of params
const combineFuncs = function (text1, func1, text2, func2) {
    const obj = {};
    if (text1 !== text2) {
        obj[text1] = func1;
        obj[text2] = func2;
    }
    else {
        obj[text1] = (data, matches, output) => {
            return func1(data, matches, output) || func2(data, matches, output);
        };
    }
    return obj;
};
const isPlayerId = (id) => {
    return id && id[0] !== '4';
};
// For responses that unconditionally return static text.
const staticResponse = (field, text) => {
    return (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            text: text,
        };
        return {
            [field]: (_data, _matches, output) => { var _a; return (_a = output.text) === null || _a === void 0 ? void 0 : _a.call(output); },
        };
    };
};
const Responses = {
    tankBuster: (targetSev, otherSev) => {
        const outputStrings = {
            noTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.tankBuster */ .Z.tankBuster,
            busterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.tankBusterOnYou */ .Z.tankBusterOnYou,
            busterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.tankBusterOnPlayer */ .Z.tankBusterOnPlayer,
        };
        const targetFunc = (data, matches, output) => {
            var _a, _b;
            const target = getTarget(matches);
            if (!target) {
                if (data.role !== 'tank' && data.role !== 'healer')
                    return;
                return (_a = output.noTarget) === null || _a === void 0 ? void 0 : _a.call(output);
            }
            if (target === data.me)
                return (_b = output.busterOnYou) === null || _b === void 0 ? void 0 : _b.call(output);
        };
        const otherFunc = (data, matches, output) => {
            var _a, _b;
            const target = getTarget(matches);
            if (!target) {
                if (data.role === 'tank' || data.role === 'healer')
                    return;
                return (_a = output.noTarget) === null || _a === void 0 ? void 0 : _a.call(output);
            }
            if (target === data.me)
                return;
            return (_b = output.busterOnTarget) === null || _b === void 0 ? void 0 : _b.call(output, { player: data.ShortName(target) });
        };
        const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
        return (_data, _matches, output) => {
            // cactbot-builtin-response
            output.responseOutputStrings = outputStrings;
            return combined;
        };
    },
    tankBusterSwap: (busterSev, swapSev) => {
        const outputStrings = {
            tankSwap: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.tankSwap */ .Z.tankSwap,
            busterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.tankBusterOnYou */ .Z.tankBusterOnYou,
            busterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.tankBusterOnPlayer */ .Z.tankBusterOnPlayer,
        };
        // Note: busterSev and swapSev can be the same priority.
        const tankSwapFunc = (data, matches, output) => {
            var _a;
            const target = getTarget(matches);
            if (data.role === 'tank' && target !== data.me)
                return (_a = output.tankSwap) === null || _a === void 0 ? void 0 : _a.call(output);
        };
        const busterFunc = (data, matches, output) => {
            var _a, _b;
            const target = getTarget(matches);
            if (data.role === 'tank' && target !== data.me)
                return;
            if (target === data.me)
                return (_a = output.busterOnYou) === null || _a === void 0 ? void 0 : _a.call(output);
            return (_b = output.busterOnTarget) === null || _b === void 0 ? void 0 : _b.call(output, { player: data.ShortName(target) });
        };
        const combined = combineFuncs(defaultAlarmText(swapSev), tankSwapFunc, defaultAlertText(busterSev), busterFunc);
        return (_data, _matches, output) => {
            // cactbot-builtin-response
            output.responseOutputStrings = outputStrings;
            return combined;
        };
    },
    tankCleave: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            cleaveOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.tankCleaveOnYou */ .Z.tankCleaveOnYou,
            cleaveNoTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.tankCleave */ .Z.tankCleave,
            avoidCleave: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.avoidTankCleave */ .Z.avoidTankCleave,
        };
        return {
            [defaultInfoText(sev)]: (data, matches, output) => {
                var _a, _b, _c;
                const target = getTarget(matches);
                if (target === data.me)
                    return (_a = output.cleaveOnYou) === null || _a === void 0 ? void 0 : _a.call(output);
                if (data.role === 'tank' || data.job === 'BLU') {
                    // targetless tank cleave
                    // BLU players should always get this generic cleave message.
                    // We have no robust way to determine whether they have tank Mimicry on,
                    // and it's really annoying for a BLU tank to be told to avoid cleaves when they can't.
                    return (_b = output.cleaveNoTarget) === null || _b === void 0 ? void 0 : _b.call(output);
                }
                return (_c = output.avoidCleave) === null || _c === void 0 ? void 0 : _c.call(output);
            },
        };
    },
    miniBuster: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.miniBuster */ .Z.miniBuster),
    aoe: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.aoe */ .Z.aoe),
    bigAoe: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.bigAoe */ .Z.bigAoe),
    spread: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.spread */ .Z.spread),
    // for stack marker situations.
    stackMarker: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.stackMarker */ .Z.stackMarker),
    // for getting together without stack marker
    getTogether: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.getTogether */ .Z.getTogether),
    stackMarkerOn: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            stackOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.stackOnYou */ .Z.stackOnYou,
            stackOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.stackOnPlayer */ .Z.stackOnPlayer,
        };
        return {
            [defaultAlertText(sev)]: (data, matches, output) => {
                var _a, _b;
                const target = getTarget(matches);
                if (target === data.me)
                    return (_a = output.stackOnYou) === null || _a === void 0 ? void 0 : _a.call(output);
                return (_b = output.stackOnTarget) === null || _b === void 0 ? void 0 : _b.call(output, { player: data.ShortName(target) });
            },
        };
    },
    stackMiddle: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.stackMiddle */ .Z.stackMiddle),
    doritoStack: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.doritoStack */ .Z.doritoStack),
    spreadThenStack: (sev) => {
        return staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.spreadThenStack */ .Z.spreadThenStack);
    },
    stackThenSpread: (sev) => {
        return staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.stackThenSpread */ .Z.stackThenSpread);
    },
    knockback: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.knockback */ .Z.knockback),
    knockbackOn: (targetSev, otherSev) => {
        const outputStrings = {
            knockbackOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.knockbackOnYou */ .Z.knockbackOnYou,
            knockbackOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.knockbackOnPlayer */ .Z.knockbackOnPlayer,
        };
        const targetFunc = (data, matches, output) => {
            var _a;
            const target = getTarget(matches);
            if (target === data.me)
                return (_a = output.knockbackOnYou) === null || _a === void 0 ? void 0 : _a.call(output);
        };
        const otherFunc = (data, matches, output) => {
            var _a;
            const target = getTarget(matches);
            if (target !== data.me)
                return (_a = output.knockbackOnTarget) === null || _a === void 0 ? void 0 : _a.call(output, { player: data.ShortName(target) });
        };
        const combined = combineFuncs(defaultInfoText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
        return (_data, _matches, output) => {
            // cactbot-builtin-response
            output.responseOutputStrings = outputStrings;
            return combined;
        };
    },
    lookTowards: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.lookTowardsBoss */ .Z.lookTowardsBoss),
    lookAway: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.lookAway */ .Z.lookAway),
    lookAwayFromTarget: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            lookAwayFrom: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.lookAwayFromTarget */ .Z.lookAwayFromTarget,
        };
        return {
            [defaultAlertText(sev)]: (data, matches, output) => {
                var _a;
                const target = getTarget(matches);
                if (target === data.me)
                    return;
                const name = isPlayerId(matches === null || matches === void 0 ? void 0 : matches.targetId) ? data.ShortName(target) : target;
                return (_a = output.lookAwayFrom) === null || _a === void 0 ? void 0 : _a.call(output, { name: name });
            },
        };
    },
    lookAwayFromSource: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            lookAwayFrom: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.lookAwayFromTarget */ .Z.lookAwayFromTarget,
        };
        return {
            [defaultAlertText(sev)]: (data, matches, output) => {
                var _a;
                const source = getSource(matches);
                if (source === data.me)
                    return;
                const name = isPlayerId(matches === null || matches === void 0 ? void 0 : matches.sourceId) ? data.ShortName(source) : source;
                return (_a = output.lookAwayFrom) === null || _a === void 0 ? void 0 : _a.call(output, { name: name });
            },
        };
    },
    getBehind: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.getBehind */ .Z.getBehind),
    goFrontOrSides: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.goFrontOrSides */ .Z.goFrontOrSides),
    // .getUnder() is used when you have to get into the bosses hitbox
    getUnder: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.getUnder */ .Z.getUnder),
    // .getIn() is more like "get close but maybe even melee range is fine"
    getIn: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.in */ .Z.in),
    // .getOut() means get far away
    getOut: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.out */ .Z.out),
    outOfMelee: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.outOfMelee */ .Z.outOfMelee),
    getInThenOut: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.inThenOut */ .Z.inThenOut),
    getOutThenIn: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.outThenIn */ .Z.outThenIn),
    getBackThenFront: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.backThenFront */ .Z.backThenFront),
    getFrontThenBack: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.frontThenBack */ .Z.frontThenBack),
    goMiddle: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.goIntoMiddle */ .Z.goIntoMiddle),
    goRight: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.right */ .Z.right),
    goLeft: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.left */ .Z.left),
    goWest: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.getLeftAndWest */ .Z.getLeftAndWest),
    goEast: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.getRightAndEast */ .Z.getRightAndEast),
    goFrontBack: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.goFrontBack */ .Z.goFrontBack),
    goSides: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.sides */ .Z.sides),
    // .killAdds() is used for adds that will always be available
    killAdds: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.killAdds */ .Z.killAdds),
    // .killExtraAdd() is used for adds that appear if a mechanic was not played correctly
    killExtraAdd: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.killExtraAdd */ .Z.killExtraAdd),
    awayFromFront: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.awayFromFront */ .Z.awayFromFront),
    sleep: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            sleep: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.sleepTarget */ .Z.sleepTarget,
        };
        return {
            [defaultAlertText(sev)]: (_data, matches, output) => {
                var _a;
                const source = getSource(matches);
                return (_a = output.sleep) === null || _a === void 0 ? void 0 : _a.call(output, { name: source });
            },
        };
    },
    stun: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.stunTarget */ .Z.stunTarget,
        };
        return {
            [defaultAlertText(sev)]: (_data, matches, output) => {
                var _a;
                const source = getSource(matches);
                return (_a = output.stun) === null || _a === void 0 ? void 0 : _a.call(output, { name: source });
            },
        };
    },
    interrupt: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.interruptTarget */ .Z.interruptTarget,
        };
        return {
            [defaultAlertText(sev)]: (_data, matches, output) => {
                var _a;
                const source = getSource(matches);
                return (_a = output.interrupt) === null || _a === void 0 ? void 0 : _a.call(output, { name: source });
            },
        };
    },
    preyOn: (targetSev, otherSev) => {
        const outputStrings = {
            preyOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.preyOnYou */ .Z.preyOnYou,
            preyOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.preyOnPlayer */ .Z.preyOnPlayer,
        };
        const targetFunc = (data, matches, output) => {
            var _a;
            const target = getTarget(matches);
            if (data.me === target)
                return (_a = output.preyOnYou) === null || _a === void 0 ? void 0 : _a.call(output);
        };
        const otherFunc = (data, matches, output) => {
            var _a;
            const target = getTarget(matches);
            if (target !== data.me)
                return (_a = output.preyOnTarget) === null || _a === void 0 ? void 0 : _a.call(output, { player: data.ShortName(target) });
        };
        const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
        return (_data, _matches, output) => {
            // cactbot-builtin-response
            output.responseOutputStrings = outputStrings;
            return combined;
        };
    },
    awayFrom: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            awayFromGroup: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.awayFromGroup */ .Z.awayFromGroup,
            awayFromTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.awayFromPlayer */ .Z.awayFromPlayer,
        };
        return {
            [defaultAlertText(sev)]: (data, matches, output) => {
                var _a, _b;
                const target = getTarget(matches);
                if (data.me === target)
                    return (_a = output.awayFromGroup) === null || _a === void 0 ? void 0 : _a.call(output);
                return (_b = output.awayFromTarget) === null || _b === void 0 ? void 0 : _b.call(output, { player: data.ShortName(target) });
            },
        };
    },
    meteorOnYou: (sev) => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.meteorOnYou */ .Z.meteorOnYou),
    stopMoving: (sev) => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.stopMoving */ .Z.stopMoving),
    stopEverything: (sev) => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.stopEverything */ .Z.stopEverything),
    // move away to dodge aoes
    moveAway: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.moveAway */ .Z.moveAway),
    // move around (e.g. jumping) to avoid being frozen
    moveAround: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.moveAround */ .Z.moveAround),
    breakChains: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.breakChains */ .Z.breakChains),
    moveChainsTogether: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.moveChainsTogether */ .Z.moveChainsTogether),
    earthshaker: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            earthshaker: _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.earthshakerOnYou */ .Z.earthshakerOnYou,
        };
        return {
            [defaultAlertText(sev)]: (data, matches, output) => {
                var _a;
                const target = getTarget(matches);
                if (target !== data.me)
                    return;
                return (_a = output.earthshaker) === null || _a === void 0 ? void 0 : _a.call(output);
            },
        };
    },
    wakeUp: (sev) => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* .default.wakeUp */ .Z.wakeUp),
};
// Don't give `Responses` a type in its declaration so that it can be treated as more strict
// than `ResponsesMap`, but do assert that its type is correct.  This allows callers to know
// which properties are defined in Responses without having to conditionally check for undefined.
const responseMapTypeAssertion = Responses;
// Suppress unused variable warning.
console.assert(responseMapTypeAssertion);


/***/ }),

/***/ 633:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _overlay_plugin_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(511);
/* harmony import */ var _not_reached__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(509);
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(760);
/* harmony import */ var _content_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(873);
/* harmony import */ var _netregexes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(641);
/* harmony import */ var _regexes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(911);
/* harmony import */ var _responses__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(667);
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(970);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(556);
/* harmony import */ var _zone_id__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(248);
/* harmony import */ var _zone_info__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(524);


// TODO:
// The convention of "import X as _X; const X = _X;" is currently
// being used as a method to workaround for downstream code
// that is running via eval(). Because importing statements do not
// create a variable of the same name, the eval()'d code does not know
// about the import, and thus throws ReferenceErrors.
// Used by downstream eval

const Conditions = _conditions__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z;

const ContentType = _content_type__WEBPACK_IMPORTED_MODULE_3__/* .default */ .Z;

const NetRegexes = _netregexes__WEBPACK_IMPORTED_MODULE_4__/* .default */ .Z;

const Regexes = _regexes__WEBPACK_IMPORTED_MODULE_5__/* .default */ .Z;

const Responses = _responses__WEBPACK_IMPORTED_MODULE_6__/* .Responses */ .n3;

const Outputs = _outputs__WEBPACK_IMPORTED_MODULE_7__/* .default */ .Z;

const Util = _util__WEBPACK_IMPORTED_MODULE_8__/* .default */ .Z;

const ZoneId = _zone_id__WEBPACK_IMPORTED_MODULE_9__/* .default */ .Z;

const ZoneInfo = _zone_info__WEBPACK_IMPORTED_MODULE_10__/* .default */ .Z;
// Convince TypeScript and eslint that these are used.  TypeScript doesn't have a great way
// to disable individual rules, so this is safer than disabling all rules.
console.assert(Conditions && ContentType && NetRegexes && Regexes &&
    Responses && Outputs && Util && ZoneId && ZoneInfo);
class UserConfig {
    constructor() {
        this.optionTemplates = {};
        this.savedConfig = {};
        this.userFileCallbacks = {};
    }
    getDefaultBaseOptions() {
        return {
            ParserLanguage: 'en',
            ShortLocale: 'en',
            DisplayLanguage: 'en',
            TextAlertsEnabled: true,
            SoundAlertsEnabled: true,
            SpokenAlertsEnabled: false,
            GroupSpokenAlertsEnabled: false,
        };
    }
    evalUserFile(content, options) {
        const Options = options;
        console.assert(Options); // Used by eval.
        // This is the one eval cactbot should ever need, which is for handling user files.
        // Because user files can be located anywhere on disk and there's backwards compat
        // issues, it's unlikely that these will be able to be anything but eval forever.
        //
        /* eslint-disable no-eval */
        eval(content);
        /* eslint-enable no-eval */
    }
    registerOptions(overlayName, optionTemplate, userFileCallback) {
        this.optionTemplates[overlayName] = optionTemplate;
        if (userFileCallback)
            this.userFileCallbacks[overlayName] = userFileCallback;
    }
    sortUserFiles(keys) {
        // Helper data structure for subdirectories.
        const splitKeyMap = {};
        for (const key of keys)
            splitKeyMap[key] = key.toUpperCase().split(/[/\\]/);
        // Sort paths as a depth-first case-insensitive alphabetical subdirectory walk, followed by
        // all files sorted case-insensitive alphabetically once a subdir has been processed, e.g.
        //  * a/some.js
        //  * b/subdir1/z/z/z/nested_file.js
        //  * b/subdir1/file.js
        //  * b/subdir2/first.js
        //  * b/subdir2/second.js
        //  * b/some_file.js
        //  * root_file1.js
        //  * root_file2.js
        return keys.sort((keyA, keyB) => {
            const listA = splitKeyMap[keyA];
            const listB = splitKeyMap[keyB];
            if (listA === undefined || listB === undefined)
                throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .$();
            const maxLen = Math.max(listA.length, listB.length);
            for (let idx = 0; idx < maxLen; ++idx) {
                const entryA = listA[idx];
                const entryB = listB[idx];
                // In practice, there's always at least one entry.
                if (entryA === undefined || entryB === undefined)
                    throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .$();
                // If both subdirectories or both files, then compare names.
                const isLastA = listA.length - 1 === idx;
                const isLastB = listB.length - 1 === idx;
                if (isLastA && isLastB) {
                    // If both last, then this is a filename comparison.
                    // First, compare filename without extension.
                    const fileA = entryA.replace(/\.[^\.]*$/, '');
                    const fileB = entryB.replace(/\.[^\.]*$/, '');
                    const filenameOnlyDiff = fileA.localeCompare(fileB);
                    if (filenameOnlyDiff)
                        return filenameOnlyDiff;
                    // Second, compare including the extension.
                    // Always return something here, see note below.
                    return entryA.localeCompare(entryB);
                }
                else if (!isLastA && !isLastB) {
                    // If both not last, this is a subdirectory comparison.
                    const diff = entryA.localeCompare(entryB);
                    if (diff)
                        return diff;
                }
                // At this point, if idx is the final for each, we would have returned above.
                // So, check if either a or b is at the final entry in splitKeyMap.
                // If so, then there's a mismatch in number of directories, and we know one
                // the one with a filename should be sorted last.
                if (listA.length - 1 <= idx) {
                    // a has fewer subdirectories, so should be sorted last.
                    return 1;
                }
                if (listB.length - 1 <= idx) {
                    // a has more subdirectories, so should be sorted first.
                    return -1;
                }
            }
            return 0;
        });
    }
    // Given a set of paths, an overlayName, and an extension, return all paths with
    // that extension that have `overlayName` either as their entire filename (no subdir)
    // or are inside a root-level subdirectory named `overlayName`/  The extension should
    // include the period separator, e.g. ".js".  All comparisons are case insensitive.
    filterUserFiles(paths, origOverlayName, origExtension) {
        const extension = origExtension.toLowerCase();
        const overlayName = origOverlayName.toLowerCase();
        return paths.filter((origPath) => {
            const path = origPath.toLowerCase();
            if (!path.endsWith(extension))
                return false;
            if (path === `${overlayName}${extension}`)
                return true;
            if (path.startsWith(`${overlayName}/`) || path.startsWith(`${overlayName}\\`))
                return true;
            return false;
        });
    }
    getUserConfigLocation(overlayName, options, callback) {
        let currentlyReloading = false;
        const reloadOnce = () => {
            if (currentlyReloading)
                return;
            currentlyReloading = true;
            window.location.reload();
        };
        (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_0__/* .addOverlayListener */ .PS)('onUserFileChanged', () => {
            reloadOnce();
        });
        (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_0__/* .addOverlayListener */ .PS)('onForceReload', () => {
            reloadOnce();
        });
        this.loadUserFiles(overlayName, options, callback);
    }
    loadUserFiles(overlayName, options, callback) {
        const readOptions = (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_0__/* .callOverlayHandler */ .ae)({
            call: 'cactbotLoadData',
            overlay: 'options',
        });
        const loadUser = async (e) => {
            var _a, _b, _c, _d, _e, _f, _g;
            // The basePath isn't using for anything other than cosmetic printing of full paths,
            // so replace any slashes here for uniformity.  In case anybody is using cactbot on
            // Linux (?!?), support any style of slashes elsewhere.
            const basePath = e.detail.userLocation.replace(/[/\\]*$/, '') + '\\';
            const localFiles = e.detail.localUserFiles;
            // The plugin auto-detects the language, so set this first.
            // If options files want to override it, they can for testing.
            // Backward compatibility (language is now separated to three types.)
            if (e.detail.language) {
                options.ParserLanguage = e.detail.language;
                options.ShortLocale = e.detail.language;
                options.DisplayLanguage = e.detail.language;
            }
            // Parser Language
            if (e.detail.parserLanguage) {
                options.ParserLanguage = e.detail.parserLanguage;
                // Backward compatibility, everything "Language" should be changed to "ParserLanguage"
                options.Language = e.detail.parserLanguage;
            }
            const supportedLanguage = ['en', 'de', 'fr', 'ja', 'cn', 'ko'];
            // System Language
            if (e.detail.systemLocale) {
                options.SystemLocale = e.detail.systemLocale;
                options.ShortLocale = e.detail.systemLocale.substring(0, 2);
                if (options.ShortLocale === 'zh')
                    options.ShortLocale = 'cn';
                if (!supportedLanguage.includes(options.ShortLocale))
                    options.ShortLocale = options.ParserLanguage;
            }
            // User's setting Language
            options.DisplayLanguage = e.detail.displayLanguage;
            if (!supportedLanguage.includes(options.DisplayLanguage))
                options.DisplayLanguage = options.ParserLanguage || 'en';
            document.body.classList.add(`lang-${options.DisplayLanguage}`);
            this.addUnlockText(options.DisplayLanguage);
            // Handle processOptions after default language selection above,
            // but before css below which may load skin files.
            // processOptions needs to be called whether or not there are
            // any userOptions saved, as it sets up the defaults.
            this.savedConfig = (_b = (_a = (await readOptions)) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : {};
            this.processOptions(options, (_c = this.savedConfig[overlayName]) !== null && _c !== void 0 ? _c : {}, this.optionTemplates[overlayName]);
            // If the overlay has a "Debug" setting, set to true via the config tool,
            // then also print out user files that have been loaded.
            const printUserFile = options.Debug ? (x) => console.log(x) : () => { };
            // With user files being arbitrary javascript, and having multiple files
            // in user folders, it's possible for later files to accidentally remove
            // things that previous files have added.  Warn about this, since most
            // users are not programmers.
            const warnOnVariableResetMap = {
                raidboss: [
                    'Triggers',
                ],
            };
            warnOnVariableResetMap[overlayName] = warnOnVariableResetMap[overlayName] || [];
            // The values of each `warnOnVariableResetMap` field are initially set
            // after the first file, so that if there is only one file, there are
            // not any warnings.
            // The fields that a user file sets in Options can be anything (pun not intended)
            // and so we use `any` here.  The only operation done on this field is a !==
            // for change detection to see if the the user file has modified it.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const variableTracker = {};
            if (localFiles) {
                // localFiles may be null if there is no valid user directory.
                const sortedFiles = this.sortUserFiles(Object.keys(localFiles));
                const jsFiles = this.filterUserFiles(sortedFiles, overlayName, '.js');
                const cssFiles = this.filterUserFiles(sortedFiles, overlayName, '.css');
                for (const jsFile of jsFiles) {
                    try {
                        printUserFile(`local user file: ${basePath}${jsFile}`);
                        this.evalUserFile((_d = localFiles[jsFile]) !== null && _d !== void 0 ? _d : '', options);
                        for (const field of (_e = warnOnVariableResetMap[overlayName]) !== null && _e !== void 0 ? _e : []) {
                            if (variableTracker[field] && variableTracker[field] !== options[field]) {
                                // Ideally users should do something like `Options.Triggers.push([etc]);`
                                // instead of `Options.Triggers = [etc];`
                                console.log(`*** WARNING: ${basePath}${jsFile} overwrites Options.${field} from previous files.`);
                            }
                            variableTracker[field] = options[field];
                        }
                        (_g = (_f = this.userFileCallbacks)[overlayName]) === null || _g === void 0 ? void 0 : _g.call(_f, jsFile, localFiles, options, basePath);
                    }
                    catch (e) {
                        // Be very visible for users.
                        console.log('*** ERROR IN USER FILE ***');
                        console.log(e);
                    }
                }
                // This is a bit awkward to handle skin settings here, but
                // doing it after user config files and before user css files
                // allows user css to override skin-specific css as well.
                if (options.Skin)
                    this.handleSkin(options.Skin);
                for (const cssFile of cssFiles) {
                    printUserFile(`local user file: ${basePath}${cssFile}`);
                    const userCssText = document.createElement('style');
                    const contents = localFiles[cssFile];
                    if (contents)
                        userCssText.innerText = contents;
                    const head = document.getElementsByTagName('head')[0];
                    if (head)
                        head.appendChild(userCssText);
                }
            }
            // Post this callback so that the js and css can be executed first.
            if (callback)
                callback();
            void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_0__/* .callOverlayHandler */ .ae)({ call: 'cactbotRequestState' });
        };
        void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_0__/* .callOverlayHandler */ .ae)({
            call: 'cactbotLoadUser',
            source: location.href,
            overlayName: overlayName,
        }).then((e) => {
            // Wait for DOMContentLoaded if needed.
            if (document.readyState !== 'loading') {
                void loadUser(e);
                return;
            }
            document.addEventListener('DOMContentLoaded', () => {
                void loadUser(e);
            });
        });
    }
    handleSkin(skinName) {
        if (!skinName || skinName === 'default')
            return;
        let basePath = document.location.toString();
        const slashIdx = basePath.lastIndexOf('/');
        if (slashIdx !== -1)
            basePath = basePath.substr(0, slashIdx);
        if (basePath.slice(-1) !== '/')
            basePath += '/';
        const skinHref = basePath + 'skins/' + skinName + '/' + skinName + '.css';
        this.appendCSSLink(skinHref);
    }
    appendJSLink(src) {
        const userJS = document.createElement('script');
        userJS.setAttribute('type', 'text/javascript');
        userJS.setAttribute('src', src);
        userJS.setAttribute('async', 'false');
        const head = document.getElementsByTagName('head')[0];
        if (head)
            head.appendChild(userJS);
    }
    appendCSSLink(href) {
        const userCSS = document.createElement('link');
        userCSS.setAttribute('rel', 'stylesheet');
        userCSS.setAttribute('type', 'text/css');
        userCSS.setAttribute('href', href);
        const head = document.getElementsByTagName('head')[0];
        if (head)
            head.appendChild(userCSS);
    }
    processOptions(options, savedConfig, template) {
        // Take options from the template, find them in savedConfig,
        // and apply them to options. This also handles setting
        // defaults for anything in the template, even if it does not
        // exist in savedConfig.
        if (Array.isArray(template)) {
            for (let i = 0; i < template.length; ++i)
                this.processOptions(options, savedConfig, template[i]);
            return;
        }
        // Not all overlays have option templates.
        if (!template)
            return;
        const templateOptions = template.options || [];
        for (const opt of templateOptions) {
            // Grab the saved value or the default to set in options.
            let value = opt.default;
            if (typeof savedConfig === 'object' && !Array.isArray(savedConfig)) {
                if (opt.id in savedConfig) {
                    const newValue = savedConfig[opt.id];
                    if (newValue !== undefined)
                        value = newValue;
                }
            }
            // Options can provide custom logic to turn a value into options settings.
            // If this doesn't exist, just set the value directly.
            // Option template ids are identical to field names on Options.
            if (opt.setterFunc) {
                opt.setterFunc(options, value);
            }
            else if (opt.type === 'integer') {
                if (typeof value === 'number')
                    options[opt.id] = Math.floor(value);
                else if (typeof value === 'string')
                    options[opt.id] = parseInt(value);
            }
            else if (opt.type === 'float') {
                if (typeof value === 'number')
                    options[opt.id] = value;
                else if (typeof value === 'string')
                    options[opt.id] = parseFloat(value);
            }
            else {
                options[opt.id] = value;
            }
        }
        // For things like raidboss that build extra UI, also give them a chance
        // to handle anything that has been set on that UI.
        if (template.processExtraOptions)
            template.processExtraOptions(options, savedConfig);
    }
    addUnlockText(lang) {
        const unlockText = {
            en: '🔓 Unlocked (lock overlay before using)',
            de: '🔓 Entsperrt (Sperre das Overlay vor der Nutzung)',
            fr: '🔓 Débloqué (Bloquez l\'overlay avant utilisation)',
            ja: '🔓 ロック解除 (オーバーレイを使用する前にロックしてください)',
            cn: '🔓 已解除锁定 (你需要将此悬浮窗锁定后方可使用)',
            ko: '🔓 위치 잠금 해제됨 (사용하기 전에 위치 잠금을 설정하세요)',
        };
        const id = 'cactbot-unlocked-text';
        let textElem = document.getElementById(id);
        if (!textElem) {
            textElem = document.createElement('div');
            textElem.id = id;
            textElem.classList.add('text');
            // Set element display to none in case the page has not included defaults.css.
            textElem.style.display = 'none';
            document.body.append(textElem);
        }
        textElem.innerHTML = unlockText[lang] || unlockText['en'];
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new UserConfig());
if (typeof document !== 'undefined') {
    // This event comes early and is not cached, so set up event listener immediately.
    document.addEventListener('onOverlayStateUpdate', (e) => {
        const docClassList = document.documentElement.classList;
        if (e.detail.isLocked)
            docClassList.remove('resizeHandle', 'unlocked');
        else
            docClassList.add('resizeHandle', 'unlocked');
    });
}


/***/ }),

/***/ 556:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// TODO: it'd be nice to not repeat job names, but at least Record enforces that all are set.
const nameToJobEnum = {
    NONE: 0,
    GLA: 1,
    PGL: 2,
    MRD: 3,
    LNC: 4,
    ARC: 5,
    CNJ: 6,
    THM: 7,
    CRP: 8,
    BSM: 9,
    ARM: 10,
    GSM: 11,
    LTW: 12,
    WVR: 13,
    ALC: 14,
    CUL: 15,
    MIN: 16,
    BTN: 17,
    FSH: 18,
    PLD: 19,
    MNK: 20,
    WAR: 21,
    DRG: 22,
    BRD: 23,
    WHM: 24,
    BLM: 25,
    ACN: 26,
    SMN: 27,
    SCH: 28,
    ROG: 29,
    NIN: 30,
    MCH: 31,
    DRK: 32,
    AST: 33,
    SAM: 34,
    RDM: 35,
    BLU: 36,
    GNB: 37,
    DNC: 38,
};
const allJobs = Object.keys(nameToJobEnum);
const allRoles = ['tank', 'healer', 'dps', 'crafter', 'gatherer', 'none'];
const tankJobs = ['GLA', 'PLD', 'MRD', 'WAR', 'DRK', 'GNB'];
const healerJobs = ['CNJ', 'WHM', 'SCH', 'AST'];
const meleeDpsJobs = ['PGL', 'MNK', 'LNC', 'DRG', 'ROG', 'NIN', 'SAM'];
const rangedDpsJobs = ['ARC', 'BRD', 'DNC', 'MCH'];
const casterDpsJobs = ['BLU', 'RDM', 'BLM', 'SMN', 'ACN', 'THM'];
const dpsJobs = [...meleeDpsJobs, ...rangedDpsJobs, ...casterDpsJobs];
const craftingJobs = ['CRP', 'BSM', 'ARM', 'GSM', 'LTW', 'WVR', 'ALC', 'CUL'];
const gatheringJobs = ['MIN', 'BTN', 'FSH'];
const stunJobs = ['BLU', ...tankJobs, ...meleeDpsJobs];
const silenceJobs = ['BLU', ...tankJobs, ...rangedDpsJobs];
const sleepJobs = ['BLM', 'BLU', ...healerJobs];
const feintJobs = [...meleeDpsJobs];
const addleJobs = [...casterDpsJobs];
const cleanseJobs = ['BLU', 'BRD', ...healerJobs];
const jobToRoleMap = (() => {
    const addToMap = (map, jobs, role) => {
        jobs.forEach((job) => map.set(job, role));
    };
    const map = new Map([['NONE', 'none']]);
    addToMap(map, tankJobs, 'tank');
    addToMap(map, healerJobs, 'healer');
    addToMap(map, dpsJobs, 'dps');
    addToMap(map, craftingJobs, 'crafter');
    addToMap(map, gatheringJobs, 'gatherer');
    return map;
})();
const Util = {
    jobEnumToJob: (id) => {
        const job = allJobs.find((job) => nameToJobEnum[job] === id);
        return job !== null && job !== void 0 ? job : 'NONE';
    },
    jobToJobEnum: (job) => nameToJobEnum[job],
    jobToRole: (job) => {
        const role = jobToRoleMap.get(job);
        return role !== null && role !== void 0 ? role : 'none';
    },
    getAllRoles: () => allRoles,
    isTankJob: (job) => tankJobs.includes(job),
    isHealerJob: (job) => healerJobs.includes(job),
    isMeleeDpsJob: (job) => meleeDpsJobs.includes(job),
    isRangedDpsJob: (job) => rangedDpsJobs.includes(job),
    isCasterDpsJob: (job) => casterDpsJobs.includes(job),
    isDpsJob: (job) => dpsJobs.includes(job),
    isCraftingJob: (job) => craftingJobs.includes(job),
    isGatheringJob: (job) => gatheringJobs.includes(job),
    isCombatJob: (job) => {
        return !craftingJobs.includes(job) && !gatheringJobs.includes(job);
    },
    canStun: (job) => stunJobs.includes(job),
    canSilence: (job) => silenceJobs.includes(job),
    canSleep: (job) => sleepJobs.includes(job),
    canCleanse: (job) => cleanseJobs.includes(job),
    canFeint: (job) => feintJobs.includes(job),
    canAddle: (job) => addleJobs.includes(job),
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Util);


/***/ }),

/***/ 248:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
    'ABloodyReunion': 560,
    'ARelicRebornTheChimera': 368,
    'ARelicRebornTheHydra': 369,
    'ARequiemForHeroes': 830,
    'ASleepDisturbed': 914,
    'ASpectacleForTheAges': 533,
    'AccrueEnmityFromMultipleTargets': 540,
    'AirForceOne': 832,
    'AkadaemiaAnyder': 841,
    'AlaMhigo': 689,
    'AlexanderTheArmOfTheFather': 444,
    'AlexanderTheArmOfTheFatherSavage': 451,
    'AlexanderTheArmOfTheSon': 522,
    'AlexanderTheArmOfTheSonSavage': 531,
    'AlexanderTheBreathOfTheCreator': 581,
    'AlexanderTheBreathOfTheCreatorSavage': 585,
    'AlexanderTheBurdenOfTheFather': 445,
    'AlexanderTheBurdenOfTheFatherSavage': 452,
    'AlexanderTheBurdenOfTheSon': 523,
    'AlexanderTheBurdenOfTheSonSavage': 532,
    'AlexanderTheCuffOfTheFather': 443,
    'AlexanderTheCuffOfTheFatherSavage': 450,
    'AlexanderTheCuffOfTheSon': 521,
    'AlexanderTheCuffOfTheSonSavage': 530,
    'AlexanderTheEyesOfTheCreator': 580,
    'AlexanderTheEyesOfTheCreatorSavage': 584,
    'AlexanderTheFistOfTheFather': 442,
    'AlexanderTheFistOfTheFatherSavage': 449,
    'AlexanderTheFistOfTheSon': 520,
    'AlexanderTheFistOfTheSonSavage': 529,
    'AlexanderTheHeartOfTheCreator': 582,
    'AlexanderTheHeartOfTheCreatorSavage': 586,
    'AlexanderTheSoulOfTheCreator': 583,
    'AlexanderTheSoulOfTheCreatorSavage': 587,
    'AllsWellThatEndsInTheWell': 220,
    'AllsWellThatStartsWell': 796,
    'AlphascapeV10': 798,
    'AlphascapeV10Savage': 802,
    'AlphascapeV20': 799,
    'AlphascapeV20Savage': 803,
    'AlphascapeV30': 800,
    'AlphascapeV30Savage': 804,
    'AlphascapeV40': 801,
    'AlphascapeV40Savage': 805,
    'Amaurot': 838,
    'AmdaporKeep': 167,
    'AmdaporKeepHard': 189,
    'AmhAraeng': 815,
    'AnamnesisAnyder': 898,
    'AnnoyTheVoid': 222,
    'AsTheHeartBids': 894,
    'AssistAlliesInDefeatingATarget': 544,
    'Astragalos': 729,
    'AvoidAreaOfEffectAttacks': 537,
    'AzysLla': 402,
    'BaelsarsWall': 615,
    'BardamsMettle': 623,
    'BasicTrainingEnemyParties': 214,
    'BasicTrainingEnemyStrongholds': 215,
    'BattleInTheBigKeep': 396,
    'BattleOnTheBigBridge': 366,
    'BloodOnTheDeck': 708,
    'BrayfloxsLongstop': 158,
    'BrayfloxsLongstopHard': 362,
    'CapeWestwind': 332,
    'CastrumAbania': 661,
    'CastrumFluminis': 778,
    'CastrumMarinum': 934,
    'CastrumMarinumDrydocks': 967,
    'CastrumMarinumExtreme': 935,
    'CastrumMeridianum': 217,
    'CentralShroud': 148,
    'CentralThanalan': 141,
    'ChocoboRaceCostaDelSol': 389,
    'ChocoboRaceSagoliiRoad': 390,
    'ChocoboRaceTranquilPaths': 391,
    'ChocoboRaceTutorial': 417,
    'CinderDrift': 897,
    'CinderDriftExtreme': 912,
    'CoerthasCentralHighlands': 155,
    'CoerthasWesternHighlands': 397,
    'ComingClean': 860,
    'ContainmentBayP1T6': 576,
    'ContainmentBayP1T6Extreme': 577,
    'ContainmentBayS1T7': 517,
    'ContainmentBayS1T7Extreme': 524,
    'ContainmentBayZ1T9': 637,
    'ContainmentBayZ1T9Extreme': 638,
    'CopperbellMines': 161,
    'CopperbellMinesHard': 349,
    'CuriousGorgeMeetsHisMatch': 717,
    'CuttersCry': 170,
    'DarkAsTheNightSky': 713,
    'DeathUntoDawn': 977,
    'DefeatAnOccupiedTarget': 545,
    'DeltascapeV10': 691,
    'DeltascapeV10Savage': 695,
    'DeltascapeV20': 692,
    'DeltascapeV20Savage': 696,
    'DeltascapeV30': 693,
    'DeltascapeV30Savage': 697,
    'DeltascapeV40': 694,
    'DeltascapeV40Savage': 698,
    'DelubrumReginae': 936,
    'DelubrumReginaeSavage': 937,
    'DohnMheg': 821,
    'DomaCastle': 660,
    'DragonSound': 714,
    'DunScaith': 627,
    'DzemaelDarkhold': 171,
    'EastShroud': 152,
    'EasternLaNoscea': 137,
    'EasternThanalan': 145,
    'EdensGateDescent': 850,
    'EdensGateDescentSavage': 854,
    'EdensGateInundation': 851,
    'EdensGateInundationSavage': 855,
    'EdensGateResurrection': 849,
    'EdensGateResurrectionSavage': 853,
    'EdensGateSepulture': 852,
    'EdensGateSepultureSavage': 856,
    'EdensPromiseAnamorphosis': 944,
    'EdensPromiseAnamorphosisSavage': 948,
    'EdensPromiseEternity': 945,
    'EdensPromiseEternitySavage': 949,
    'EdensPromiseLitany': 943,
    'EdensPromiseLitanySavage': 947,
    'EdensPromiseUmbra': 942,
    'EdensPromiseUmbraSavage': 946,
    'EdensVerseFulmination': 902,
    'EdensVerseFulminationSavage': 906,
    'EdensVerseFuror': 903,
    'EdensVerseFurorSavage': 907,
    'EdensVerseIconoclasm': 904,
    'EdensVerseIconoclasmSavage': 908,
    'EdensVerseRefulgence': 905,
    'EdensVerseRefulgenceSavage': 909,
    'Emanation': 719,
    'EmanationExtreme': 720,
    'EmissaryOfTheDawn': 769,
    'EngageMultipleTargets': 541,
    'Eulmore': 820,
    'ExecuteAComboInBattle': 539,
    'ExecuteAComboToIncreaseEnmity': 538,
    'ExecuteARangedAttackToIncreaseEnmity': 542,
    'FadedMemories': 932,
    'FinalExercise': 552,
    'FitForAQueen': 955,
    'FlickingSticksAndTakingNames': 219,
    'Foundation': 418,
    'FourPlayerMahjongQuickMatchKuitanDisabled': 831,
    'Halatali': 162,
    'HalataliHard': 360,
    'HaukkeManor': 166,
    'HaukkeManorHard': 350,
    'HealAnAlly': 549,
    'HealMultipleAllies': 550,
    'HeavenOnHighFloors11_20': 771,
    'HeavenOnHighFloors1_10': 770,
    'HeavenOnHighFloors21_30': 772,
    'HeavenOnHighFloors31_40': 782,
    'HeavenOnHighFloors41_50': 773,
    'HeavenOnHighFloors51_60': 783,
    'HeavenOnHighFloors61_70': 774,
    'HeavenOnHighFloors71_80': 784,
    'HeavenOnHighFloors81_90': 775,
    'HeavenOnHighFloors91_100': 785,
    'HellsKier': 810,
    'HellsKierExtreme': 811,
    'HellsLid': 742,
    'HeroOnTheHalfShell': 216,
    'HiddenGorge': 791,
    'HolminsterSwitch': 837,
    'HullbreakerIsle': 361,
    'HullbreakerIsleHard': 557,
    'Idyllshire': 478,
    'IlMheg': 816,
    'InThalsName': 705,
    'InteractWithTheBattlefield': 548,
    'InterdimensionalRift': 690,
    'ItsProbablyATrap': 665,
    'Kholusia': 814,
    'Kugane': 628,
    'KuganeCastle': 662,
    'KuganeOhashi': 806,
    'Lakeland': 813,
    'LegendOfTheNotSoHiddenTemple': 859,
    'LimsaLominsaLowerDecks': 129,
    'LimsaLominsaUpperDecks': 128,
    'LongLiveTheQueen': 298,
    'LovmMasterTournament': 506,
    'LovmPlayerBattleNonRp': 591,
    'LovmPlayerBattleRp': 589,
    'LovmTournament': 590,
    'LowerLaNoscea': 135,
    'MalikahsWell': 836,
    'MatchAll': null,
    'MatoyasRelict': 933,
    'MatsubaMayhem': 710,
    'MemoriaMiseraExtreme': 913,
    'MessengerOfTheWinds': 834,
    'MiddleLaNoscea': 134,
    'Mist': 136,
    'MorDhona': 156,
    'MoreThanAFeeler': 221,
    'MtGulg': 822,
    'Naadam': 688,
    'Neverreap': 420,
    'NewGridania': 132,
    'NorthShroud': 154,
    'NorthernThanalan': 147,
    'NyelbertsLament': 876,
    'OceanFishing': 900,
    'OldGridania': 133,
    'OneLifeForOneWorld': 592,
    'OnsalHakairDanshigNaadam': 888,
    'OurCompromise': 716,
    'OurUnsungHeroes': 722,
    'OuterLaNoscea': 180,
    'Paglthan': 938,
    'PharosSirius': 160,
    'PharosSiriusHard': 510,
    'PullingPoisonPosies': 191,
    'RaisingTheSword': 706,
    'ReturnOfTheBull': 403,
    'RhalgrsReach': 635,
    'SaintMociannesArboretum': 511,
    'SaintMociannesArboretumHard': 788,
    'Sastasha': 157,
    'SastashaHard': 387,
    'SealRockSeize': 431,
    'ShadowAndClaw': 223,
    'ShisuiOfTheVioletTides': 616,
    'SigmascapeV10': 748,
    'SigmascapeV10Savage': 752,
    'SigmascapeV20': 749,
    'SigmascapeV20Savage': 753,
    'SigmascapeV30': 750,
    'SigmascapeV30Savage': 754,
    'SigmascapeV40': 751,
    'SigmascapeV40Savage': 755,
    'Snowcloak': 371,
    'SohmAl': 441,
    'SohmAlHard': 617,
    'SohrKhai': 555,
    'SolemnTrinity': 300,
    'SouthShroud': 153,
    'SouthernThanalan': 146,
    'SpecialEventI': 353,
    'SpecialEventIi': 354,
    'SpecialEventIii': 509,
    'StingingBack': 192,
    'SyrcusTower': 372,
    'TheAery': 435,
    'TheAetherochemicalResearchFacility': 438,
    'TheAkhAfahAmphitheatreExtreme': 378,
    'TheAkhAfahAmphitheatreHard': 377,
    'TheAkhAfahAmphitheatreUnreal': 930,
    'TheAntitower': 516,
    'TheAquapolis': 558,
    'TheAurumVale': 172,
    'TheAzimSteppe': 622,
    'TheBattleOnBekko': 711,
    'TheBindingCoilOfBahamutTurn1': 241,
    'TheBindingCoilOfBahamutTurn2': 242,
    'TheBindingCoilOfBahamutTurn3': 243,
    'TheBindingCoilOfBahamutTurn4': 244,
    'TheBindingCoilOfBahamutTurn5': 245,
    'TheBorderlandRuinsSecure': 376,
    'TheBowlOfEmbers': 202,
    'TheBowlOfEmbersExtreme': 295,
    'TheBowlOfEmbersHard': 292,
    'TheBozjaIncident': 911,
    'TheBozjanSouthernFront': 920,
    'TheBurn': 789,
    'TheCalamityRetold': 790,
    'TheCarteneauFlatsHeliodrome': 633,
    'TheChrysalis': 426,
    'TheChurningMists': 400,
    'TheCloudDeck': 950,
    'TheCloudDeckExtreme': 951,
    'TheCopiedFactory': 882,
    'TheCrownOfTheImmaculate': 846,
    'TheCrownOfTheImmaculateExtreme': 848,
    'TheCrystarium': 819,
    'TheDancingPlague': 845,
    'TheDancingPlagueExtreme': 858,
    'TheDiadem': 929,
    'TheDiademEasy': 512,
    'TheDiademHard': 515,
    'TheDiademHuntingGrounds': 625,
    'TheDiademHuntingGroundsEasy': 624,
    'TheDiademTrialsOfTheFury': 630,
    'TheDiademTrialsOfTheMatron': 656,
    'TheDomanEnclave': 759,
    'TheDragonsNeck': 142,
    'TheDravanianForelands': 398,
    'TheDravanianHinterlands': 399,
    'TheDrownedCityOfSkalla': 731,
    'TheDungeonsOfLyheGhiah': 879,
    'TheDuskVigil': 434,
    'TheDyingGasp': 847,
    'TheEpicOfAlexanderUltimate': 887,
    'TheFaceOfTrueEvil': 709,
    'TheFeastCustomMatchCrystalTower': 767,
    'TheFeastCustomMatchFeastingGrounds': 619,
    'TheFeastCustomMatchLichenweed': 646,
    'TheFeastRanked': 765,
    'TheFeastTeamRanked': 745,
    'TheFeastTraining': 766,
    'TheFieldsOfGloryShatter': 554,
    'TheFinalCoilOfBahamutTurn1': 193,
    'TheFinalCoilOfBahamutTurn2': 194,
    'TheFinalCoilOfBahamutTurn3': 195,
    'TheFinalCoilOfBahamutTurn4': 196,
    'TheFinalStepsOfFaith': 559,
    'TheForbiddenLandEurekaAnemos': 732,
    'TheForbiddenLandEurekaHydatos': 827,
    'TheForbiddenLandEurekaPagos': 763,
    'TheForbiddenLandEurekaPyros': 795,
    'TheFractalContinuum': 430,
    'TheFractalContinuumHard': 743,
    'TheFringes': 612,
    'TheGhimlytDark': 793,
    'TheGrandCosmos': 884,
    'TheGreatGubalLibrary': 416,
    'TheGreatGubalLibraryHard': 578,
    'TheGreatHunt': 761,
    'TheGreatHuntExtreme': 762,
    'TheGreatShipVylbrand': 954,
    'TheHardenedHeart': 873,
    'TheHauntedManor': 571,
    'TheHeartOfTheProblem': 718,
    'TheHeroesGauntlet': 916,
    'TheHiddenCanalsOfUznair': 725,
    'TheHowlingEye': 208,
    'TheHowlingEyeExtreme': 297,
    'TheHowlingEyeHard': 294,
    'TheHuntersLegacy': 875,
    'TheJadeStoa': 746,
    'TheJadeStoaExtreme': 758,
    'TheKeeperOfTheLake': 150,
    'TheLabyrinthOfTheAncients': 174,
    'TheLimitlessBlueExtreme': 447,
    'TheLimitlessBlueHard': 436,
    'TheLochs': 621,
    'TheLostAndTheFound': 874,
    'TheLostCanalsOfUznair': 712,
    'TheLostCityOfAmdapor': 363,
    'TheLostCityOfAmdaporHard': 519,
    'TheMinstrelsBalladHadessElegy': 885,
    'TheMinstrelsBalladNidhoggsRage': 566,
    'TheMinstrelsBalladShinryusDomain': 730,
    'TheMinstrelsBalladThordansReign': 448,
    'TheMinstrelsBalladTsukuyomisPain': 779,
    'TheMinstrelsBalladUltimasBane': 348,
    'TheNavel': 206,
    'TheNavelExtreme': 296,
    'TheNavelHard': 293,
    'TheNavelUnreal': 953,
    'TheOrbonneMonastery': 826,
    'TheOrphansAndTheBrokenBlade': 715,
    'ThePalaceOfTheDeadFloors101_110': 598,
    'ThePalaceOfTheDeadFloors111_120': 599,
    'ThePalaceOfTheDeadFloors11_20': 562,
    'ThePalaceOfTheDeadFloors121_130': 600,
    'ThePalaceOfTheDeadFloors131_140': 601,
    'ThePalaceOfTheDeadFloors141_150': 602,
    'ThePalaceOfTheDeadFloors151_160': 603,
    'ThePalaceOfTheDeadFloors161_170': 604,
    'ThePalaceOfTheDeadFloors171_180': 605,
    'ThePalaceOfTheDeadFloors181_190': 606,
    'ThePalaceOfTheDeadFloors191_200': 607,
    'ThePalaceOfTheDeadFloors1_10': 561,
    'ThePalaceOfTheDeadFloors21_30': 563,
    'ThePalaceOfTheDeadFloors31_40': 564,
    'ThePalaceOfTheDeadFloors41_50': 565,
    'ThePalaceOfTheDeadFloors51_60': 593,
    'ThePalaceOfTheDeadFloors61_70': 594,
    'ThePalaceOfTheDeadFloors71_80': 595,
    'ThePalaceOfTheDeadFloors81_90': 596,
    'ThePalaceOfTheDeadFloors91_100': 597,
    'ThePeaks': 620,
    'ThePillars': 419,
    'ThePoolOfTribute': 674,
    'ThePoolOfTributeExtreme': 677,
    'ThePraetorium': 224,
    'ThePuppetsBunker': 917,
    'TheQitanaRavel': 823,
    'TheRaktikaGreatwood': 817,
    'TheResonant': 684,
    'TheRidoranaLighthouse': 776,
    'TheRoyalCityOfRabanastre': 734,
    'TheRoyalMenagerie': 679,
    'TheRubySea': 613,
    'TheSeaOfClouds': 401,
    'TheSeatOfSacrifice': 922,
    'TheSeatOfSacrificeExtreme': 923,
    'TheSecondCoilOfBahamutSavageTurn1': 380,
    'TheSecondCoilOfBahamutSavageTurn2': 381,
    'TheSecondCoilOfBahamutSavageTurn3': 382,
    'TheSecondCoilOfBahamutSavageTurn4': 383,
    'TheSecondCoilOfBahamutTurn1': 355,
    'TheSecondCoilOfBahamutTurn2': 356,
    'TheSecondCoilOfBahamutTurn3': 357,
    'TheSecondCoilOfBahamutTurn4': 358,
    'TheShiftingAltarsOfUznair': 794,
    'TheShiftingOubliettesOfLyheGhiah': 924,
    'TheSingularityReactor': 437,
    'TheSirensongSea': 626,
    'TheStepsOfFaith': 143,
    'TheStoneVigil': 168,
    'TheStoneVigilHard': 365,
    'TheStrikingTreeExtreme': 375,
    'TheStrikingTreeHard': 374,
    'TheSunkenTempleOfQarn': 163,
    'TheSunkenTempleOfQarnHard': 367,
    'TheSwallowsCompass': 768,
    'TheTamTaraDeepcroft': 164,
    'TheTamTaraDeepcroftHard': 373,
    'TheTempest': 818,
    'TheTempleOfTheFist': 663,
    'TheThousandMawsOfTotoRak': 169,
    'TheTowerAtParadigmsBreach': 966,
    'TheTripleTriadBattlehall': 579,
    'TheTwinning': 840,
    'TheUnendingCoilOfBahamutUltimate': 733,
    'TheValentionesCeremony': 741,
    'TheVault': 421,
    'TheVoidArk': 508,
    'TheWanderersPalace': 159,
    'TheWanderersPalaceHard': 188,
    'TheWeaponsRefrainUltimate': 777,
    'TheWeepingCityOfMhach': 556,
    'TheWhorleaterExtreme': 359,
    'TheWhorleaterHard': 281,
    'TheWhorleaterUnreal': 972,
    'TheWillOfTheMoon': 797,
    'TheWorldOfDarkness': 151,
    'TheWreathOfSnakes': 824,
    'TheWreathOfSnakesExtreme': 825,
    'ThokAstThokExtreme': 446,
    'ThokAstThokHard': 432,
    'ThornmarchExtreme': 364,
    'ThornmarchHard': 207,
    'TripleTriadInvitationalParlor': 941,
    'TripleTriadOpenTournament': 940,
    'UldahStepsOfNald': 130,
    'UldahStepsOfThal': 131,
    'UnderTheArmor': 190,
    'UpperLaNoscea': 139,
    'UrthsFount': 394,
    'VowsOfVirtueDeedsOfCruelty': 893,
    'WardUp': 299,
    'WesternLaNoscea': 138,
    'WesternThanalan': 140,
    'WhenClansCollide': 723,
    'WithHeartAndSteel': 707,
    'WolvesDenPier': 250,
    'Xelphatol': 572,
    'Yanxia': 614,
    'Zadnor': 975,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);


/***/ }),

/***/ 524:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
    128: {
        'exVersion': 0,
        'name': {
            'cn': '利姆萨·罗敏萨上层甲板',
            'de': 'Obere Decks',
            'en': 'Limsa Lominsa Upper Decks',
            'fr': 'Limsa Lominsa - Le Tillac',
            'ja': 'リムサ・ロミンサ：上甲板層',
            'ko': '림사 로민사 상층 갑판',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 14,
    },
    129: {
        'exVersion': 0,
        'name': {
            'cn': '利姆萨·罗敏萨下层甲板',
            'de': 'Untere Decks',
            'en': 'Limsa Lominsa Lower Decks',
            'fr': 'Limsa Lominsa - L\'Entrepont',
            'ja': 'リムサ・ロミンサ：下甲板層',
            'ko': '림사 로민사 하층 갑판',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 15,
    },
    130: {
        'exVersion': 0,
        'name': {
            'cn': '乌尔达哈现世回廊',
            'de': 'Nald-Kreuzgang',
            'en': 'Ul\'dah - Steps of Nald',
            'fr': 'Ul\'dah - Faubourg de Nald',
            'ja': 'ウルダハ：ナル回廊',
            'ko': '울다하 날 회랑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 7,
    },
    131: {
        'exVersion': 0,
        'name': {
            'cn': '乌尔达哈来生回廊',
            'de': 'Thal-Kreuzgang',
            'en': 'Ul\'dah - Steps of Thal',
            'fr': 'Ul\'dah - Faubourg de Thal',
            'ja': 'ウルダハ：ザル回廊',
            'ko': '울다하 달 회랑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 8,
    },
    132: {
        'exVersion': 0,
        'name': {
            'cn': '格里达尼亚新街',
            'de': 'Neu-Gridania',
            'en': 'New Gridania',
            'fr': 'Nouvelle Gridania',
            'ja': 'グリダニア：新市街',
            'ko': '그리다니아 신시가지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 1,
    },
    133: {
        'exVersion': 0,
        'name': {
            'cn': '格里达尼亚旧街',
            'de': 'Alt-Gridania',
            'en': 'Old Gridania',
            'fr': 'Vieille Gridania',
            'ja': 'グリダニア：旧市街',
            'ko': '그리다니아 구시가지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 2,
    },
    134: {
        'exVersion': 0,
        'name': {
            'cn': '中拉诺西亚',
            'de': 'Zentrales La Noscea',
            'en': 'Middle La Noscea',
            'fr': 'Noscea centrale',
            'ja': '中央ラノシア',
            'ko': '중부 라노시아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 16,
    },
    135: {
        'exVersion': 0,
        'name': {
            'cn': '拉诺西亚低地',
            'de': 'Unteres La Noscea',
            'en': 'Lower La Noscea',
            'fr': 'Basse-Noscea',
            'ja': '低地ラノシア',
            'ko': '저지 라노시아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 17,
    },
    136: {
        'exVersion': 0,
        'name': {
            'cn': '海雾村',
            'de': 'Dorf des Nebels',
            'en': 'Mist',
            'fr': 'Brumée',
            'ja': 'ミスト・ヴィレッジ',
            'ko': '안갯빛 마을',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 14,
    },
    137: {
        'exVersion': 0,
        'name': {
            'cn': '东拉诺西亚',
            'de': 'Östliches La Noscea',
            'en': 'Eastern La Noscea',
            'fr': 'Noscea orientale',
            'ja': '東ラノシア',
            'ko': '동부 라노시아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 18,
    },
    138: {
        'exVersion': 0,
        'name': {
            'cn': '西拉诺西亚',
            'de': 'Westliches La Noscea',
            'en': 'Western La Noscea',
            'fr': 'Noscea occidentale',
            'ja': '西ラノシア',
            'ko': '서부 라노시아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 19,
    },
    139: {
        'exVersion': 0,
        'name': {
            'cn': '拉诺西亚高地',
            'de': 'Oberes La Noscea',
            'en': 'Upper La Noscea',
            'fr': 'Haute-Noscea',
            'ja': '高地ラノシア',
            'ko': '고지 라노시아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 20,
    },
    140: {
        'exVersion': 0,
        'name': {
            'cn': '西萨纳兰',
            'de': 'Westliches Thanalan',
            'en': 'Western Thanalan',
            'fr': 'Thanalan occidental',
            'ja': '西ザナラーン',
            'ko': '서부 다날란',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 9,
    },
    141: {
        'exVersion': 0,
        'name': {
            'cn': '中萨纳兰',
            'de': 'Zentrales Thanalan',
            'en': 'Central Thanalan',
            'fr': 'Thanalan central',
            'ja': '中央ザナラーン',
            'ko': '중부 다날란',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 10,
    },
    142: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '艾玛吉娜杯斗技大会决赛',
            'de': 'Das Drachenhals-Kolosseum',
            'en': 'The Dragon\'s Neck',
            'fr': 'Le Col du dragon',
            'ja': 'アマジナ杯闘技会決勝戦',
            'ko': '아마지나배 투기대회 결승전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    143: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '皇都伊修加德保卫战',
            'de': 'Der Schicksalsweg',
            'en': 'The Steps of Faith',
            'fr': 'Le Siège de la sainte Cité d\'Ishgard',
            'ja': '皇都イシュガルド防衛戦',
            'ko': '성도 이슈가르드 방어전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    145: {
        'exVersion': 0,
        'name': {
            'cn': '东萨纳兰',
            'de': 'Östliches Thanalan',
            'en': 'Eastern Thanalan',
            'fr': 'Thanalan oriental',
            'ja': '東ザナラーン',
            'ko': '동부 다날란',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 11,
    },
    146: {
        'exVersion': 0,
        'name': {
            'cn': '南萨纳兰',
            'de': 'Südliches Thanalan',
            'en': 'Southern Thanalan',
            'fr': 'Thanalan méridional',
            'ja': '南ザナラーン',
            'ko': '남부 다날란',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 12,
    },
    147: {
        'exVersion': 0,
        'name': {
            'cn': '北萨纳兰',
            'de': 'Nördliches Thanalan',
            'en': 'Northern Thanalan',
            'fr': 'Thanalan septentrional',
            'ja': '北ザナラーン',
            'ko': '북부 다날란',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 13,
    },
    148: {
        'exVersion': 0,
        'name': {
            'cn': '黑衣森林中央林区',
            'de': 'Tiefer Wald',
            'en': 'Central Shroud',
            'fr': 'Forêt centrale',
            'ja': '黒衣森：中央森林',
            'ko': '검은장막 숲 중부삼림',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 3,
    },
    150: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '幻龙残骸密约之塔',
            'de': 'Hüter des Sees',
            'en': 'The Keeper of the Lake',
            'fr': 'Le Gardien du lac',
            'ja': '幻龍残骸 黙約の塔',
            'ko': '묵약의 탑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 74,
    },
    151: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '水晶塔 暗之世界',
            'de': 'Die Welt der Dunkelheit',
            'en': 'The World of Darkness',
            'fr': 'La Tour de Cristal - Monde des Ténèbres',
            'ja': 'クリスタルタワー：闇の世界',
            'ko': '크리스탈 타워: 어둠의 세계',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    152: {
        'exVersion': 0,
        'name': {
            'cn': '黑衣森林东部林区',
            'de': 'Ostwald',
            'en': 'East Shroud',
            'fr': 'Forêt de l\'est',
            'ja': '黒衣森：東部森林',
            'ko': '검은장막 숲 동부삼림',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 4,
    },
    153: {
        'exVersion': 0,
        'name': {
            'cn': '黑衣森林南部林区',
            'de': 'Südwald',
            'en': 'South Shroud',
            'fr': 'Forêt du sud',
            'ja': '黒衣森：南部森林',
            'ko': '검은장막 숲 남부삼림',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 5,
    },
    154: {
        'exVersion': 0,
        'name': {
            'cn': '黑衣森林北部林区',
            'de': 'Nordwald',
            'en': 'North Shroud',
            'fr': 'Forêt du nord',
            'ja': '黒衣森：北部森林',
            'ko': '검은장막 숲 북부삼림',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 6,
    },
    155: {
        'exVersion': 0,
        'name': {
            'cn': '库尔札斯中央高地',
            'de': 'Zentrales Hochland von Coerthas',
            'en': 'Coerthas Central Highlands',
            'fr': 'Hautes terres du Coerthas central',
            'ja': 'クルザス中央高地',
            'ko': '커르다스 중앙고지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 21,
    },
    156: {
        'exVersion': 0,
        'name': {
            'cn': '摩杜纳',
            'de': 'Mor Dhona',
            'en': 'Mor Dhona',
            'fr': 'Mor Dhona',
            'ja': 'モードゥナ',
            'ko': '모르도나',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 22,
    },
    157: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '天然要害沙斯塔夏溶洞',
            'de': 'Sastasha',
            'en': 'Sastasha',
            'fr': 'Sastasha',
            'ja': '天然要害 サスタシャ浸食洞',
            'ko': '사스타샤 침식 동굴',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    158: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '休养胜地布雷福洛克斯野营地',
            'de': 'Brüllvolx\' Langrast',
            'en': 'Brayflox\'s Longstop',
            'fr': 'Le Bivouac de Brayflox',
            'ja': '奪還支援 ブレイフロクスの野営地',
            'ko': '브레이플록스의 야영지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    159: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '神灵圣域放浪神古神殿',
            'de': 'Palast des Wanderers',
            'en': 'The Wanderer\'s Palace',
            'fr': 'Le Palais du Vagabond',
            'ja': '旅神聖域 ワンダラーパレス',
            'ko': '방랑자의 궁전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    160: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '领航明灯天狼星灯塔',
            'de': 'Pharos Sirius',
            'en': 'Pharos Sirius',
            'fr': 'Le Phare de Sirius',
            'ja': '怪鳥巨塔 シリウス大灯台',
            'ko': '시리우스 대등대',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    161: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '封锁坑道铜铃铜山',
            'de': 'Kupferglocken-Mine',
            'en': 'Copperbell Mines',
            'fr': 'Les Mines de Clochecuivre',
            'ja': '封鎖坑道 カッパーベル銅山',
            'ko': '구리종 광산',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    162: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '魔兽领域日影地修炼所',
            'de': 'Halatali',
            'en': 'Halatali',
            'fr': 'Halatali',
            'ja': '魔獣領域 ハラタリ修練所',
            'ko': '할라탈리 수련장',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    163: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '古代遗迹喀恩埋没圣堂',
            'de': 'Versunkener Tempel von Qarn',
            'en': 'The Sunken Temple of Qarn',
            'fr': 'Le Temple enseveli de Qarn',
            'ja': '遺跡探索 カルン埋没寺院',
            'ko': '카른의 무너진 사원',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    164: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '地下灵殿塔姆·塔拉墓园',
            'de': 'Totenacker Tam-Tara',
            'en': 'The Tam–Tara Deepcroft',
            'fr': 'L\'Hypogée de Tam-Tara',
            'ja': '地下霊殿 タムタラの墓所',
            'ko': '탐타라 묘소',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 300,
        'weatherRate': 0,
    },
    166: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '名门府邸静语庄园',
            'de': 'Haukke-Herrenhaus',
            'en': 'Haukke Manor',
            'fr': 'Le Manoir des Haukke',
            'ja': '名門屋敷 ハウケタ御用邸',
            'ko': '하우케타 별궁',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    167: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '邪教驻地无限城古堡',
            'de': 'Die Ruinen von Amdapor',
            'en': 'Amdapor Keep',
            'fr': 'Le Château d\'Amdapor',
            'ja': '邪教排撃 古城アムダプール',
            'ko': '옛 암다포르 성',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    168: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '对龙城塞石卫塔',
            'de': 'Steinerne Wacht',
            'en': 'The Stone Vigil',
            'fr': 'Le Vigile de Pierre',
            'ja': '城塞攻略 ストーンヴィジル',
            'ko': '돌방패 경계초소',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 27,
    },
    169: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '监狱废墟托托·拉克千狱',
            'de': 'Tausend Löcher von Toto-Rak',
            'en': 'The Thousand Maws of Toto–Rak',
            'fr': 'Les Mille Gueules de Toto-Rak',
            'ja': '監獄廃墟 トトラクの千獄',
            'ko': '토토라크 감옥',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    170: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '流沙迷宫樵鸣洞',
            'de': 'Sägerschrei',
            'en': 'Cutter\'s Cry',
            'fr': 'Le Gouffre hurlant',
            'ja': '流砂迷宮 カッターズクライ',
            'ko': '나무꾼의 비명',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    171: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '山中战线泽梅尔要塞',
            'de': 'Die Feste Dzemael',
            'en': 'Dzemael Darkhold',
            'fr': 'La Forteresse de Dzemael',
            'ja': '掃討作戦 ゼーメル要塞',
            'ko': '제멜 요새',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    172: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '毒雾洞窟黄金谷',
            'de': 'Goldklamm',
            'en': 'The Aurum Vale',
            'fr': 'Le Val d\'Aurum',
            'ja': '霧中行軍 オーラムヴェイル',
            'ko': '금빛 골짜기',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    174: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '水晶塔 古代人迷宫',
            'de': 'Kristallturm - Das Labyrinth der Alten',
            'en': 'The Labyrinth of the Ancients',
            'fr': 'La Tour de Cristal - Dédale antique',
            'ja': 'クリスタルタワー：古代の民の迷宮',
            'ko': '크리스탈 타워: 고대인의 미궁',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    180: {
        'exVersion': 0,
        'name': {
            'cn': '拉诺西亚外地',
            'de': 'Äußeres La Noscea',
            'en': 'Outer La Noscea',
            'fr': 'Noscea extérieure',
            'ja': '外地ラノシア',
            'ko': '외지 라노시아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 24,
    },
    188: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '武装圣域放浪神古神殿',
            'de': 'Palast des Wanderers (schwer)',
            'en': 'The Wanderer\'s Palace (Hard)',
            'fr': 'Le Palais du Vagabond (brutal)',
            'ja': '武装聖域 ワンダラーパレス (Hard)',
            'ko': '방랑자의 궁전(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 40,
    },
    189: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '邪念妖地无限城古堡',
            'de': 'Die Ruinen von Amdapor (schwer)',
            'en': 'Amdapor Keep (Hard)',
            'fr': 'Le Château d\'Amdapor (brutal)',
            'ja': '邪念排撃 古城アムダプール (Hard)',
            'ko': '옛 암다포르 성(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 40,
    },
    190: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '讨伐彷徨死灵！',
            'de': 'Bockmanns Gefolge',
            'en': 'Under the Armor',
            'fr': 'Chasse au fantôme fantoche',
            'ja': '彷徨う死霊を討て！',
            'ko': '방황하는 사령을 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 3,
    },
    191: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '驱除剧毒妖花！',
            'de': 'Unkraut jäten',
            'en': 'Pulling Poison Posies',
            'fr': 'Opération fleurs du mal',
            'ja': '有毒妖花を駆除せよ！',
            'ko': '독성 요괴꽃을 제거하라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 4,
    },
    192: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '消灭恶徒团伙寄生蜂团！',
            'de': 'Ins Wespennest stechen',
            'en': 'Stinging Back',
            'fr': 'Expédition punitive contre les Ventrerouge',
            'ja': '無法者「似我蜂団」を撃滅せよ！',
            'ko': '무법자 집단 \'나나니단\'을 섬멸하라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 5,
    },
    193: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 真源之章1',
            'de': 'Verschlungene Schatten 3 - 1',
            'en': 'The Final Coil of Bahamut - Turn 1',
            'fr': 'L\'Abîme de Bahamut I',
            'ja': '大迷宮バハムート：真成編1',
            'ko': '대미궁 바하무트: 진성편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    194: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 真源之章2',
            'de': 'Verschlungene Schatten 3 - 2',
            'en': 'The Final Coil of Bahamut - Turn 2',
            'fr': 'L\'Abîme de Bahamut II',
            'ja': '大迷宮バハムート：真成編2',
            'ko': '대미궁 바하무트: 진성편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    195: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 真源之章3',
            'de': 'Verschlungene Schatten 3 - 3',
            'en': 'The Final Coil of Bahamut - Turn 3',
            'fr': 'L\'Abîme de Bahamut III',
            'ja': '大迷宮バハムート：真成編3',
            'ko': '대미궁 바하무트: 진성편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    196: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 真源之章4',
            'de': 'Verschlungene Schatten 3 - 4',
            'en': 'The Final Coil of Bahamut - Turn 4',
            'fr': 'L\'Abîme de Bahamut IV',
            'ja': '大迷宮バハムート：真成編4',
            'ko': '대미궁 바하무트: 진성편 4',
        },
        'offsetX': -448,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 44,
    },
    202: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '伊弗利特讨伐战',
            'de': 'Das Grab der Lohe',
            'en': 'The Bowl of Embers',
            'fr': 'Le Cratère des tisons',
            'ja': 'イフリート討伐戦',
            'ko': '이프리트 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 25,
    },
    206: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '泰坦讨伐战',
            'de': 'Der Nabel',
            'en': 'The Navel',
            'fr': 'Le Nombril',
            'ja': 'タイタン討伐戦',
            'ko': '타이탄 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    207: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '莫古力贤王歼灭战',
            'de': 'Königliche Konfrontation (schwer)',
            'en': 'Thornmarch (Hard)',
            'fr': 'La Lisière de ronces (brutal)',
            'ja': '善王モグル・モグXII世討滅戦',
            'ko': '선왕 모그루 모그 XII세 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 30,
    },
    208: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '迦楼罗讨伐战',
            'de': 'Das Tosende Auge',
            'en': 'The Howling Eye',
            'fr': 'Hurlœil',
            'ja': 'ガルーダ討伐戦',
            'ko': '가루다 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 26,
    },
    214: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '完成集团战训练！',
            'de': 'Einer für alle, alle für einen',
            'en': 'Basic Training: Enemy Parties',
            'fr': 'Entraînement<Indent/>: groupes d\'ennemis',
            'ja': '集団戦訓練をくぐり抜けろ！',
            'ko': '집단전 훈련을 완수하라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 16,
    },
    215: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '突破所有关门，讨伐最深处的敌人！',
            'de': 'Sturmkommando',
            'en': 'Basic Training: Enemy Strongholds',
            'fr': 'Entraînement<Indent/>: in<SoftHyphen/>fil<SoftHyphen/>tra<SoftHyphen/>tion en base ennemie',
            'ja': '全関門を突破し、最深部の敵を討て！',
            'ko': '관문을 돌파하고 최심부의 적을 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 9,
    },
    216: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '捕获金币龟！',
            'de': 'Gil oder Leben',
            'en': 'Hero on the Half Shell',
            'fr': 'Reconquête d\'une carapace escamotée',
            'ja': 'ギルガメを捕獲せよ！',
            'ko': '길거북을 사로잡아라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 10,
    },
    217: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '帝国南方堡外围激战',
            'de': 'Castrum Meridianum - Außenbereich',
            'en': 'Castrum Meridianum',
            'fr': 'Castrum Meridianum',
            'ja': '外郭攻略 カストルム・メリディアヌム',
            'ko': '카스트룸 메리디아눔',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    219: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '击溃哥布林炸弹军团！',
            'de': 'Bombige Goblins',
            'en': 'Flicking Sticks and Taking Names',
            'fr': 'Les Gobelins bombardiers',
            'ja': '爆弾魔ゴブリン軍団を撃滅せよ！',
            'ko': '폭탄광 고블린 군단을 섬멸하라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 3,
    },
    220: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '讨伐梦幻之布拉奇希奥！',
            'de': 'Briaxio ausschalten',
            'en': 'All\'s Well that Ends in the Well',
            'fr': 'Briaxio à bras raccourcis',
            'ja': '夢幻のブラキシオを討て！',
            'ko': '몽환의 브라크시오를 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 5,
    },
    221: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '讨伐污染源头魔界花！',
            'de': 'Tödliches Rankenspiel',
            'en': 'More than a Feeler',
            'fr': 'Sus au morbol pollueur',
            'ja': '汚染源モルボルを討て！',
            'ko': '오염원 몰볼을 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 20,
    },
    222: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '讨伐坑道中出现的妖异！',
            'de': 'Gefahr aus dem Nichts',
            'en': 'Annoy the Void',
            'fr': 'Buso l\'immolateur',
            'ja': '坑道に現れた妖異ブソを討て！',
            'ko': '갱도에 나타난 요마 부소를 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 17,
    },
    223: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '注意无敌的眷属，讨伐大型妖异！',
            'de': 'Kampf gegen Schatten',
            'en': 'Shadow and Claw',
            'fr': 'Ombres et griffes',
            'ja': '無敵の眷属を従えし、大型妖異を討て！',
            'ko': '무적의 부하를 조종하는 요마를 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 21,
    },
    224: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '天幕魔导城最终决战',
            'de': 'Castrum Meridianum - Praetorium',
            'en': 'The Praetorium',
            'fr': 'Le Praetorium',
            'ja': '最終決戦 魔導城プラエトリウム',
            'ko': '마도성 프라이토리움',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    241: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 邂逅之章1',
            'de': 'Verschlungene Schatten 1',
            'en': 'The Binding Coil of Bahamut - Turn 1',
            'fr': 'Le Labyrinthe de Bahamut I',
            'ja': '大迷宮バハムート：邂逅編1',
            'ko': '대미궁 바하무트: 해후편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    242: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 邂逅之章2',
            'de': 'Verschlungene Schatten 2',
            'en': 'The Binding Coil of Bahamut - Turn 2',
            'fr': 'Le Labyrinthe de Bahamut II',
            'ja': '大迷宮バハムート：邂逅編2',
            'ko': '대미궁 바하무트: 해후편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    243: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 邂逅之章3',
            'de': 'Verschlungene Schatten 3',
            'en': 'The Binding Coil of Bahamut - Turn 3',
            'fr': 'Le Labyrinthe de Bahamut III',
            'ja': '大迷宮バハムート：邂逅編3',
            'ko': '대미궁 바하무트: 해후편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    244: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 邂逅之章4',
            'de': 'Verschlungene Schatten 4',
            'en': 'The Binding Coil of Bahamut - Turn 4',
            'fr': 'Le Labyrinthe de Bahamut IV',
            'ja': '大迷宮バハムート：邂逅編4',
            'ko': '대미궁 바하무트: 해후편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    245: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 邂逅之章5',
            'de': 'Verschlungene Schatten 5',
            'en': 'The Binding Coil of Bahamut - Turn 5',
            'fr': 'Le Labyrinthe de Bahamut V',
            'ja': '大迷宮バハムート：邂逅編5',
            'ko': '대미궁 바하무트: 해후편 5',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    250: {
        'exVersion': 0,
        'name': {
            'cn': '狼狱停船场',
            'de': 'Wolfshöhlen-Pier',
            'en': 'Wolves\' Den Pier',
            'fr': 'Jetée de l\'Antre des loups',
            'ja': 'ウルヴズジェイル係船場',
            'ko': '늑대우리 부두',
        },
        'offsetX': -77,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 29,
    },
    281: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '利维亚桑歼灭战',
            'de': 'Götterdämmerung - Leviathan',
            'en': 'The <Emphasis>Whorleater</Emphasis> (Hard)',
            'fr': 'Le Briseur de marées (brutal)',
            'ja': '真リヴァイアサン討滅戦',
            'ko': '진 리바이어선 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 38,
    },
    292: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '伊弗利特歼灭战',
            'de': 'Götterdämmerung - Ifrit',
            'en': 'The Bowl of Embers (Hard)',
            'fr': 'Le Cratère des tisons (brutal)',
            'ja': '真イフリート討滅戦',
            'ko': '진 이프리트 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 25,
    },
    293: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '泰坦歼灭战',
            'de': 'Götterdämmerung - Titan',
            'en': 'The Navel (Hard)',
            'fr': 'Le Nombril (brutal)',
            'ja': '真タイタン討滅戦',
            'ko': '진 타이탄 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    294: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '迦楼罗歼灭战',
            'de': 'Götterdämmerung - Garuda',
            'en': 'The Howling Eye (Hard)',
            'fr': 'Hurlœil (brutal)',
            'ja': '真ガルーダ討滅戦',
            'ko': '진 가루다 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 26,
    },
    295: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '伊弗利特歼殛战',
            'de': 'Zenit der Götter - Ifrit',
            'en': 'The Bowl of Embers (Extreme)',
            'fr': 'Le Cratère des tisons (extrême)',
            'ja': '極イフリート討滅戦',
            'ko': '극 이프리트 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 25,
    },
    296: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '泰坦歼殛战',
            'de': 'Zenit der Götter - Titan',
            'en': 'The Navel (Extreme)',
            'fr': 'Le Nombril (extrême)',
            'ja': '極タイタン討滅戦',
            'ko': '극 타이탄 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    297: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '迦楼罗歼殛战',
            'de': 'Zenit der Götter - Garuda',
            'en': 'The Howling Eye (Extreme)',
            'fr': 'Hurlœil (extrême)',
            'ja': '極ガルーダ討滅戦',
            'ko': '극 가루다 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 26,
    },
    298: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '讨伐爆弹怪的女王！',
            'de': 'Miss Bombastic',
            'en': 'Long Live the Queen',
            'fr': 'Longue vie à la Reine',
            'ja': 'ボムを率いる「ボムクイーン」を討て！',
            'ko': '봄을 거느린 \'봄 여왕\'을 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 21,
    },
    299: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '歼灭特殊阵型的妖异！',
            'de': 'Unzertrennlich',
            'en': 'Ward Up',
            'fr': 'Quintettes infernaux',
            'ja': '不気味な陣形を組む妖異をせん滅せよ！',
            'ko': '불길한 진형을 짜는 요마를 섬멸하라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 22,
    },
    300: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '制止三方混战的巨人族，守住遗物！',
            'de': 'Wuchtige Dreifaltigkeit',
            'en': 'Solemn Trinity',
            'fr': 'Trinité sinistre',
            'ja': '三つ巴の巨人族を制し、遺物を守れ！',
            'ko': '세 거인족을 제압하여 유물을 지켜내라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 22,
    },
    332: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '里塔提恩强攻战',
            'de': 'Kap Westwind',
            'en': 'Cape Westwind',
            'fr': 'Le Cap Vendouest',
            'ja': 'リットアティン強襲戦',
            'ko': '리트아틴 강습전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 9,
    },
    348: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '究极神兵破坏作战',
            'de': 'Heldenlied von Ultima',
            'en': 'The Minstrel\'s Ballad: Ultima\'s Bane',
            'fr': 'Le fléau d\'Ultima',
            'ja': '究極幻想 アルテマウェポン破壊作戦',
            'ko': '알테마 웨폰 파괴작전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 31,
    },
    349: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '骚乱坑道铜铃铜山',
            'de': 'Kupferglocken-Mine (schwer)',
            'en': 'Copperbell Mines (Hard)',
            'fr': 'Les Mines de Clochecuivre (brutal)',
            'ja': '騒乱坑道 カッパーベル銅山 (Hard)',
            'ko': '구리종 광산(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    350: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '恶灵府邸静语庄园',
            'de': 'Haukke-Herrenhaus (schwer)',
            'en': 'Haukke Manor (Hard)',
            'fr': 'Le Manoir des Haukke (brutal)',
            'ja': '妖異屋敷 ハウケタ御用邸 (Hard)',
            'ko': '하우케타 별궁(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    353: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '活动挑战2',
            'de': 'Event-Inhalt 1',
            'en': 'Special Event I',
            'fr': 'Défi spécial I',
            'ja': 'イベント用コンテンツ：1',
            'ko': '이벤트용 임무: 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    354: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '活动挑战3',
            'de': 'Event-Inhalt 2',
            'en': 'Special Event II',
            'fr': 'Défi spécial II',
            'ja': 'イベント用コンテンツ：2',
            'ko': '이벤트용 임무: 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 103,
    },
    355: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 入侵之章1',
            'de': 'Verschlungene Schatten 2 - 1',
            'en': 'The Second Coil of Bahamut - Turn 1',
            'fr': 'Les Méandres de Bahamut I',
            'ja': '大迷宮バハムート：侵攻編1',
            'ko': '대미궁 바하무트: 침공편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    356: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 入侵之章2',
            'de': 'Verschlungene Schatten 2 - 2',
            'en': 'The Second Coil of Bahamut - Turn 2',
            'fr': 'Les Méandres de Bahamut II',
            'ja': '大迷宮バハムート：侵攻編2',
            'ko': '대미궁 바하무트: 침공편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    357: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 入侵之章3',
            'de': 'Verschlungene Schatten 2 - 3',
            'en': 'The Second Coil of Bahamut - Turn 3',
            'fr': 'Les Méandres de Bahamut III',
            'ja': '大迷宮バハムート：侵攻編3',
            'ko': '대미궁 바하무트: 침공편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    358: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 入侵之章4',
            'de': 'Verschlungene Schatten 2 - 4',
            'en': 'The Second Coil of Bahamut - Turn 4',
            'fr': 'Les Méandres de Bahamut IV',
            'ja': '大迷宮バハムート：侵攻編4',
            'ko': '대미궁 바하무트: 침공편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    359: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '利维亚桑歼殛战',
            'de': 'Zenit der Götter - Leviathan',
            'en': 'The <Emphasis>Whorleater</Emphasis> (Extreme)',
            'fr': 'Le Briseur de marées (extrême)',
            'ja': '極リヴァイアサン討滅戦',
            'ko': '극 리바이어선 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 38,
    },
    360: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '剑斗领域日影地修炼所',
            'de': 'Halatali (schwer)',
            'en': 'Halatali (Hard)',
            'fr': 'Halatali (brutal)',
            'ja': '剣闘領域 ハラタリ修練所 (Hard)',
            'ko': '할라탈리 수련장(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    361: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '财宝传说破舰岛',
            'de': 'Schiffbrecher-Insel',
            'en': 'Hullbreaker Isle',
            'fr': 'L\'Île de Crèvecarène',
            'ja': '財宝伝説 ハルブレーカー・アイル',
            'ko': '난파선의 섬',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    362: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '纷争要地布雷福洛克斯野营地',
            'de': 'Brüllvolx\' Langrast (schwer)',
            'en': 'Brayflox\'s Longstop (Hard)',
            'fr': 'Le Bivouac de Brayflox (brutal)',
            'ja': '盟友支援 ブレイフロクスの野営地 (Hard)',
            'ko': '브레이플록스의 야영지(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 37,
    },
    363: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '腐坏遗迹无限城市街古迹',
            'de': 'Historisches Amdapor',
            'en': 'The Lost City of Amdapor',
            'fr': 'Les Vestiges de la cité d\'Amdapor',
            'ja': '腐敗遺跡 古アムダプール市街',
            'ko': '옛 암다포르 시가지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 40,
    },
    364: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '莫古力贤王歼殛战',
            'de': 'Königliche Konfrontation (extrem)',
            'en': 'Thornmarch (Extreme)',
            'fr': 'La Lisière de ronces (extrême)',
            'ja': '極王モグル・モグXII世討滅戦',
            'ko': '극왕 모그루 모그 XII세 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 30,
    },
    365: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '激战城塞石卫塔',
            'de': 'Steinerne Wacht (schwer)',
            'en': 'The Stone Vigil (Hard)',
            'fr': 'Le Vigile de Pierre (brutal)',
            'ja': '城塞奪回 ストーンヴィジル (Hard)',
            'ko': '돌방패 경계초소(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 42,
    },
    366: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '大桥上的决斗',
            'de': 'Duell auf der großen Brücke',
            'en': 'Battle on the Big Bridge',
            'fr': 'Affrontement sur le grand pont',
            'ja': 'ギルガメッシュ討伐戦',
            'ko': '길가메시 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    367: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '苏醒遗迹喀恩埋没圣堂',
            'de': 'Versunkener Tempel von Qarn (schwer)',
            'en': 'The Sunken Temple of Qarn (Hard)',
            'fr': 'Le Temple enseveli de Qarn (brutal)',
            'ja': '遺跡救援 カルン埋没寺院 (Hard)',
            'ko': '카른의 무너진 사원(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 41,
    },
    368: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '死化奇美拉讨伐战',
            'de': 'Kampf gegen die Dhorme-Chimära',
            'en': 'A Relic Reborn: the Chimera',
            'fr': 'La chimère dhorme du Coerthas',
            'ja': 'ドルムキマイラ討伐戦',
            'ko': '도름 키마이라 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 21,
    },
    369: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '海德拉讨伐战',
            'de': 'Kampf gegen die Hydra',
            'en': 'A Relic Reborn: the Hydra',
            'fr': 'L\'hydre d\'Halatali',
            'ja': 'ハイドラ討伐戦',
            'ko': '하이드라 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    371: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '凛冽洞天披雪大冰壁',
            'de': 'Das Schneekleid',
            'en': 'Snowcloak',
            'fr': 'Manteneige',
            'ja': '氷結潜窟 スノークローク大氷壁',
            'ko': '얼음외투 대빙벽',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 42,
    },
    372: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '水晶塔 希尔科斯塔',
            'de': 'Kristallturm - Der Syrcus-Turm',
            'en': 'Syrcus Tower',
            'fr': 'La Tour de Cristal - Tour de Syrcus',
            'ja': 'クリスタルタワー：シルクスの塔',
            'ko': '크리스탈 타워: 시르쿠스 탑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    373: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '惨剧灵殿塔姆·塔拉墓园',
            'de': 'Totenacker Tam-Tara (schwer)',
            'en': 'The Tam–Tara Deepcroft (Hard)',
            'fr': 'L\'Hypogée de Tam-Tara (brutal)',
            'ja': '惨劇霊殿 タムタラの墓所 (Hard)',
            'ko': '탐타라 묘소(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 300,
        'weatherRate': 0,
    },
    374: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '拉姆歼灭战',
            'de': 'Götterdämmerung - Ramuh',
            'en': 'The Striking Tree (Hard)',
            'fr': 'L\'Arbre du jugement (brutal)',
            'ja': '真ラムウ討滅戦',
            'ko': '진 라무 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 43,
    },
    375: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '拉姆歼殛战',
            'de': 'Zenit der Götter - Ramuh',
            'en': 'The Striking Tree (Extreme)',
            'fr': 'L\'Arbre du jugement (extrême)',
            'ja': '極ラムウ討滅戦',
            'ko': '극 라무 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 43,
    },
    376: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '周边遗迹群 (阵地战)',
            'de': 'Äußere Ruinen (Sicherung)',
            'en': 'The Borderland Ruins (Secure)',
            'fr': 'Les Ruines frontalières (annexion)',
            'ja': '外縁遺跡群 (制圧戦)',
            'ko': '외곽 유적지대(제압전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    377: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '希瓦歼灭战',
            'de': 'Götterdämmerung - Shiva',
            'en': 'The Akh Afah Amphitheatre (Hard)',
            'fr': 'L\'Amphithéâtre d\'Akh Afah (brutal)',
            'ja': '真シヴァ討滅戦',
            'ko': '진 시바 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 46,
    },
    378: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '希瓦歼殛战',
            'de': 'Zenit der Götter - Shiva',
            'en': 'The Akh Afah Amphitheatre (Extreme)',
            'fr': 'L\'Amphithéâtre d\'Akh Afah (extrême)',
            'ja': '極シヴァ討滅戦',
            'ko': '극 시바 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 46,
    },
    380: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特零式大迷宫 入侵之章1',
            'de': 'Verschlungene Schatten 2 - 1 (episch)',
            'en': 'The Second Coil of Bahamut (Savage) - Turn 1',
            'fr': 'Les Méandres de Bahamut I (sadique)',
            'ja': '大迷宮バハムート零式：侵攻編1',
            'ko': '대미궁 바하무트: 침공편(영웅) 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    381: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特零式大迷宫 入侵之章2',
            'de': 'Verschlungene Schatten 2 - 2 (episch)',
            'en': 'The Second Coil of Bahamut (Savage) - Turn 2',
            'fr': 'Les Méandres de Bahamut II (sadique)',
            'ja': '大迷宮バハムート零式：侵攻編2',
            'ko': '대미궁 바하무트: 침공편(영웅) 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    382: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特零式大迷宫 入侵之章3',
            'de': 'Verschlungene Schatten 2 - 3 (episch)',
            'en': 'The Second Coil of Bahamut (Savage) - Turn 3',
            'fr': 'Les Méandres de Bahamut III (sadique)',
            'ja': '大迷宮バハムート零式：侵攻編3',
            'ko': '대미궁 바하무트: 침공편(영웅) 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    383: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特零式大迷宫 入侵之章4',
            'de': 'Verschlungene Schatten 2 - 4 (episch)',
            'en': 'The Second Coil of Bahamut (Savage) - Turn 4',
            'fr': 'Les Méandres de Bahamut IV (sadique)',
            'ja': '大迷宮バハムート零式：侵攻編4',
            'ko': '대미궁 바하무트: 침공편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    387: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '逆转要害沙斯塔夏溶洞',
            'de': 'Sastasha (schwer)',
            'en': 'Sastasha (Hard)',
            'fr': 'Sastasha (brutal)',
            'ja': '逆襲要害 サスタシャ浸食洞 (Hard)',
            'ko': '사스타샤 침식 동굴(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    389: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '陆行鸟竞赛：太阳海岸',
            'de': 'Chocobo-Rennen: Sonnenküste',
            'en': 'Chocobo Race: Costa del Sol',
            'fr': 'Course de chocobos<Indent/>: Costa del Sol',
            'ja': 'チョコボレース：コスタ・デル・ソル',
            'ko': '초코보 경주: 코스타 델 솔',
        },
        'offsetX': -472,
        'offsetY': -424,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    390: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '陆行鸟竞赛：荒野大道',
            'de': 'Chocobo-Rennen: Sagolii-Straße',
            'en': 'Chocobo Race: Sagolii Road',
            'fr': 'Course de chocobos<Indent/>: Route de Sagolii',
            'ja': 'チョコボレース：サゴリーロード',
            'ko': '초코보 경주: 사골리 사막',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    391: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '陆行鸟竞赛：恬静小路',
            'de': 'Chocobo-Rennen: Pfad der Seelenruhe',
            'en': 'Chocobo Race: Tranquil Paths',
            'fr': 'Course de chocobos<Indent/>: Sentes tranquilles',
            'ja': 'チョコボレース：トランキルパス',
            'ko': '초코보 경주: 고요한 야영지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    394: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '奥丁歼灭战',
            'de': 'Jenseits Urths Quelle',
            'en': 'Urth\'s Fount',
            'fr': 'La Fontaine d\'Urth',
            'ja': '闘神オーディン討滅戦',
            'ko': '투신 오딘 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 45,
    },
    396: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '无限城的死斗',
            'de': 'Revanche in den Ruinen',
            'en': 'Battle in the Big Keep',
            'fr': 'Revanche au vieux château',
            'ja': '真ギルガメッシュ討滅戦',
            'ko': '진 길가메시 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    397: {
        'exVersion': 1,
        'name': {
            'cn': '库尔札斯西部高地',
            'de': 'Westliches Hochland von Coerthas',
            'en': 'Coerthas Western Highlands',
            'fr': 'Hautes terres du Coerthas occidental',
            'ja': 'クルザス西部高地',
            'ko': '커르다스 서부고지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 49,
    },
    398: {
        'exVersion': 1,
        'name': {
            'cn': '龙堡参天高地',
            'de': 'Dravanisches Vorland',
            'en': 'The Dravanian Forelands',
            'fr': 'Avant-pays dravanien',
            'ja': '高地ドラヴァニア',
            'ko': '고지 드라바니아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 50,
    },
    399: {
        'exVersion': 1,
        'name': {
            'cn': '龙堡内陆低地',
            'de': 'Dravanisches Hinterland',
            'en': 'The Dravanian Hinterlands',
            'fr': 'Arrière-pays dravanien',
            'ja': '低地ドラヴァニア',
            'ko': '저지 드라바니아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 51,
    },
    400: {
        'exVersion': 1,
        'name': {
            'cn': '翻云雾海',
            'de': 'Wallende Nebel',
            'en': 'The Churning Mists',
            'fr': 'L\'Écume des cieux de Dravania',
            'ja': 'ドラヴァニア雲海',
            'ko': '드라바니아 구름바다',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 52,
    },
    401: {
        'exVersion': 1,
        'name': {
            'cn': '阿巴拉提亚云海',
            'de': 'Abalathisches Wolkenmeer',
            'en': 'The Sea of Clouds',
            'fr': 'L\'Écume des cieux d\'Abalathia',
            'ja': 'アバラシア雲海',
            'ko': '아발라시아 구름바다',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 53,
    },
    402: {
        'exVersion': 1,
        'name': {
            'cn': '魔大陆阿济兹拉',
            'de': 'Azys Lla',
            'en': 'Azys Lla',
            'fr': 'Azys Lla',
            'ja': 'アジス・ラー',
            'ko': '아지스 라',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 54,
    },
    403: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '英雄归来',
            'de': 'Verrat der Qalyana',
            'en': 'Return of the Bull',
            'fr': 'Retour au bercail',
            'ja': '英雄の帰還',
            'ko': '영웅의 귀환',
        },
        'offsetX': -250,
        'offsetY': 128,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    416: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '学识宝库迦巴勒幻想图书馆',
            'de': 'Große Gubal-Bibliothek',
            'en': 'The Great Gubal Library',
            'fr': 'La Grande bibliothèque de Gubal',
            'ja': '禁書回収 グブラ幻想図書館',
            'ko': '구브라 환상도서관',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    417: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '陆行鸟竞赛：竞赛教学',
            'de': 'Chocobo-Rennen: Übungsbahn',
            'en': 'Chocobo Race: Tutorial',
            'fr': 'Course d\'appentissage',
            'ja': 'チョコボレース：チュートリアル',
            'ko': '초코보 경주: 튜토리얼',
        },
        'offsetX': 0,
        'offsetY': -690,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    418: {
        'exVersion': 1,
        'name': {
            'cn': '伊修加德基础层',
            'de': 'Fundamente',
            'en': 'Foundation',
            'fr': 'Ishgard - L\'Assise',
            'ja': 'イシュガルド：下層',
            'ko': '이슈가르드 하층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 47,
    },
    419: {
        'exVersion': 1,
        'name': {
            'cn': '伊修加德砥柱层',
            'de': 'Strebewerk',
            'en': 'The Pillars',
            'fr': 'Ishgard - Les Contreforts',
            'ja': 'イシュガルド：上層',
            'ko': '이슈가르드 상층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 48,
    },
    420: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '空中神域不获岛',
            'de': 'Nimmerreich',
            'en': 'Neverreap',
            'fr': 'Nalloncques',
            'ja': '神域浮島 ネバーリープ',
            'ko': '거두지 않는 섬',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    421: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '圣教中枢伊修加德教皇厅',
            'de': 'Erzbasilika',
            'en': 'The Vault',
            'fr': 'La Voûte',
            'ja': '強硬突入 イシュガルド教皇庁',
            'ko': '이슈가르드 교황청',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    426: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '那布里亚勒斯讨伐战',
            'de': 'Chrysalis',
            'en': 'The Chrysalis',
            'fr': 'La Chrysalide',
            'ja': 'アシエン・ナプリアレス討伐戦',
            'ko': '아씨엔 나브리알레스 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    430: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '博物战舰无限回廊',
            'de': 'Die Fraktal-Kontinuum',
            'en': 'The Fractal Continuum',
            'fr': 'Le Continuum fractal',
            'ja': '博物戦艦 フラクタル・コンティニアム',
            'ko': '무한연속 박물함',
        },
        'offsetX': 0,
        'offsetY': -213,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    431: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '尘封秘岩 (争夺战)',
            'de': 'Robbenholm (Eroberung)',
            'en': 'Seal Rock (Seize)',
            'fr': 'Le Rocher des tréfonds (invasion)',
            'ja': 'シールロック (争奪戦)',
            'ko': '봉인된 바위섬(쟁탈전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 59,
    },
    432: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '罗波那歼灭战',
            'de': 'Götterdämmerung - Ravana',
            'en': 'Thok ast Thok (Hard)',
            'fr': 'Thok ast Thok (brutal)',
            'ja': '真ラーヴァナ討滅戦',
            'ko': '진 라바나 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 57,
    },
    434: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '冰雪废堡暮卫塔',
            'de': 'Abendrot-Wacht',
            'en': 'The Dusk Vigil',
            'fr': 'Le Vigile du Crépuscule',
            'ja': '廃砦捜索 ダスクヴィジル',
            'ko': '어스름 요새',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 42,
    },
    435: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '邪龙王座龙巢神殿',
            'de': 'Nest des Drachen',
            'en': 'The Aery',
            'fr': 'L\'Aire',
            'ja': '邪竜血戦 ドラゴンズエアリー',
            'ko': '용의 둥지',
        },
        'offsetX': -40,
        'offsetY': 55,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    436: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '俾斯麦歼灭战',
            'de': 'Götterdämmerung - Bismarck',
            'en': 'The Limitless Blue (Hard)',
            'fr': 'L\'Immensité bleue (brutal)',
            'ja': '真ビスマルク討滅戦',
            'ko': '진 비스마르크 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 28,
    },
    437: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '圆桌骑士歼灭战',
            'de': 'Singularitäts-Reaktor',
            'en': 'The Singularity Reactor',
            'fr': 'Le Réacteur de singularité',
            'ja': 'ナイツ・オブ・ラウンド討滅戦',
            'ko': '나이츠 오브 라운드 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 56,
    },
    438: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '血战苍穹魔科学研究所',
            'de': 'Ätherochemisches For<SoftHyphen/>schungs<SoftHyphen/>labor',
            'en': 'The Aetherochemical Research Facility',
            'fr': 'Le Laboratoire de magismologie',
            'ja': '蒼天聖戦 魔科学研究所',
            'ko': '마과학 연구소',
        },
        'offsetX': -18,
        'offsetY': 149,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    441: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '天山绝顶索姆阿尔灵峰',
            'de': 'Sohm Al',
            'en': 'Sohm Al',
            'fr': 'Sohm Al',
            'ja': '霊峰踏破 ソーム・アル',
            'ko': '솜 알',
        },
        'offsetX': 185,
        'offsetY': 51,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    442: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 启动之章1',
            'de': 'Alexander - Faust des Vaters',
            'en': 'Alexander - The Fist of the Father',
            'fr': 'Alexander - Le Poing du Père',
            'ja': '機工城アレキサンダー：起動編1',
            'ko': '기공성 알렉산더: 기동편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    443: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 启动之章2',
            'de': 'Alexander - Elle des Vaters',
            'en': 'Alexander - The Cuff of the Father',
            'fr': 'Alexander - Le Poignet du Père',
            'ja': '機工城アレキサンダー：起動編2',
            'ko': '기공성 알렉산더: 기동편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    444: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 启动之章3',
            'de': 'Alexander - Arm des Vaters',
            'en': 'Alexander - The Arm of the Father',
            'fr': 'Alexander - Le Bras du Père',
            'ja': '機工城アレキサンダー：起動編3',
            'ko': '기공성 알렉산더: 기동편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    445: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 启动之章4',
            'de': 'Alexander - Last des Vaters',
            'en': 'Alexander - The Burden of the Father',
            'fr': 'Alexander - Le Fardeau du Père',
            'ja': '機工城アレキサンダー：起動編4',
            'ko': '기공성 알렉산더: 기동편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    446: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '罗波那歼殛战',
            'de': 'Zenit der Götter - Ravana',
            'en': 'Thok ast Thok (Extreme)',
            'fr': 'Thok ast Thok (extrême)',
            'ja': '極ラーヴァナ討滅戦',
            'ko': '극 라바나 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 57,
    },
    447: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '俾斯麦歼殛战',
            'de': 'Zenit der Götter - Bismarck',
            'en': 'The Limitless Blue (Extreme)',
            'fr': 'L\'Immensité bleue (extrême)',
            'ja': '極ビスマルク討滅戦',
            'ko': '극 비스마르크 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 28,
    },
    448: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '圆桌骑士幻想歼灭战',
            'de': 'Heldenlied von Thordans Fall',
            'en': 'The Minstrel\'s Ballad: Thordan\'s Reign',
            'fr': 'Le règne de Thordan',
            'ja': '蒼天幻想 ナイツ・オブ・ラウンド討滅戦',
            'ko': '극 나이츠 오브 라운드 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 56,
    },
    449: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 启动之章1',
            'de': 'Alexander - Faust des Vaters (episch)',
            'en': 'Alexander - The Fist of the Father (Savage)',
            'fr': 'Alexander - Le Poing du Père (sadique)',
            'ja': '機工城アレキサンダー零式：起動編1',
            'ko': '기공성 알렉산더: 기동편(영웅) 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    450: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 启动之章2',
            'de': 'Alexander - Elle des Vaters (episch)',
            'en': 'Alexander - The Cuff of the Father (Savage)',
            'fr': 'Alexander - Le Poignet du Père (sadique)',
            'ja': '機工城アレキサンダー零式：起動編2',
            'ko': '기공성 알렉산더: 기동편(영웅) 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    451: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 启动之章3',
            'de': 'Alexander - Arm des Vaters (episch)',
            'en': 'Alexander - The Arm of the Father (Savage)',
            'fr': 'Alexander - Le Bras du Père (sadique)',
            'ja': '機工城アレキサンダー零式：起動編3',
            'ko': '기공성 알렉산더: 기동편(영웅) 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    452: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 启动之章4',
            'de': 'Alexander - Last des Vaters (episch)',
            'en': 'Alexander - The Burden of the Father (Savage)',
            'fr': 'Alexander - Le Fardeau du Père (sadique)',
            'ja': '機工城アレキサンダー零式：起動編4',
            'ko': '기공성 알렉산더: 기동편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    478: {
        'exVersion': 1,
        'name': {
            'cn': '田园郡',
            'de': 'Frohehalde',
            'en': 'Idyllshire',
            'fr': 'Idyllée',
            'ja': 'イディルシャイア',
            'ko': '이딜샤이어',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 55,
    },
    506: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '萌宠之王：大赛对战（人机对战）',
            'de': 'Kampf der Trabanten: Turnier (gegen Arenameister)',
            'en': 'LoVM: Master Tournament',
            'fr': 'Bataille de tournoi contre l\'ordinateur',
            'ja': 'LoVM：大会対戦 (CPU対戦)',
            'ko': '꼬마 친구 공방전: 대회 대결(인공 지능 대결)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    508: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '魔航船虚无方舟',
            'de': 'Die Nichts-Arche',
            'en': 'The Void Ark',
            'fr': 'L\'Arche du néant',
            'ja': '魔航船ヴォイドアーク',
            'ko': '보이드의 방주',
        },
        'offsetX': 289,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 37,
    },
    509: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '活动挑战1',
            'de': 'Event-Inhalt 3',
            'en': 'Special Event III',
            'fr': 'Défi spécial III',
            'ja': 'イベント用コンテンツ：3',
            'ko': '이벤트용 임무: 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    510: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '地脉灵灯天狼星灯塔',
            'de': 'Pharos Sirius (schwer)',
            'en': 'Pharos Sirius (Hard)',
            'fr': 'Le Phare de Sirius (brutal)',
            'ja': '制圧巨塔 シリウス大灯台 (Hard)',
            'ko': '시리우스 대등대(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    511: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '草木庭园圣茉夏娜植物园',
            'de': 'Sankt Mocianne-Arboretum',
            'en': 'Saint Mocianne\'s Arboretum',
            'fr': 'L\'Arboretum Sainte-Mocianne',
            'ja': '草木庭園 聖モシャーヌ植物園',
            'ko': '성 모샨 식물원',
        },
        'offsetX': 40,
        'offsetY': 6,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    512: {
        'contentType': 23,
        'exVersion': 1,
        'name': {
            'cn': '云冠群岛白昼探索',
            'de': 'Das Diadem (leicht)',
            'en': 'The Diadem (Easy)',
            'fr': 'Le Diadème (facile)',
            'ja': '雲海探索 ディアデム諸島 (Easy)',
            'ko': '디아뎀 제도(쉬움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 60,
    },
    515: {
        'contentType': 23,
        'exVersion': 1,
        'name': {
            'cn': '云冠群岛夜晚探索',
            'de': 'Das Diadem (schwer)',
            'en': 'The Diadem (Hard)',
            'fr': 'Le Diadème (brutal)',
            'ja': '雲海探索 ディアデム諸島 (Hard)',
            'ko': '디아뎀 제도(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 62,
    },
    516: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '星海空间颠倒塔',
            'de': 'Antiturm',
            'en': 'The Antitower',
            'fr': 'L\'Antitour',
            'ja': '星海観測 逆さの塔 ',
            'ko': '거꾸로 선 탑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    517: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '萨菲洛特歼灭战',
            'de': 'Götterdämmerung - Sephirot',
            'en': 'Containment Bay S1T7',
            'fr': 'Unité de contention S1P7',
            'ja': '魔神セフィロト討滅戦',
            'ko': '마신 세피로트 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 66,
    },
    519: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '神圣遗迹无限城市街古迹',
            'de': 'Historisches Amdapor (schwer)',
            'en': 'The Lost City of Amdapor (Hard)',
            'fr': 'Les Vestiges de la cité d\'Amdapor (brutal)',
            'ja': '神聖遺跡 古アムダプール市街 (Hard)',
            'ko': '옛 암다포르 시가지(어려움)',
        },
        'offsetX': 64,
        'offsetY': 315,
        'sizeFactor': 200,
        'weatherRate': 63,
    },
    520: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 律动之章1',
            'de': 'Alexander - Faust des Sohnes',
            'en': 'Alexander - The Fist of the Son',
            'fr': 'Alexander - Le Poing du Fils',
            'ja': '機工城アレキサンダー：律動編1',
            'ko': '기공성 알렉산더: 율동편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    521: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 律动之章2',
            'de': 'Alexander - Elle des Sohnes',
            'en': 'Alexander - The Cuff of the Son',
            'fr': 'Alexander - Le Poignet du Fils',
            'ja': '機工城アレキサンダー：律動編2',
            'ko': '기공성 알렉산더: 율동편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    522: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 律动之章3',
            'de': 'Alexander - Arm des Sohnes',
            'en': 'Alexander - The Arm of the Son',
            'fr': 'Alexander - Le Bras du Fils',
            'ja': '機工城アレキサンダー：律動編3',
            'ko': '기공성 알렉산더: 율동편 3',
        },
        'offsetX': -110,
        'offsetY': -170,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    523: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 律动之章4',
            'de': 'Alexander - Last des Sohnes',
            'en': 'Alexander - The Burden of the Son',
            'fr': 'Alexander - Le Fardeau du Fils',
            'ja': '機工城アレキサンダー：律動編4',
            'ko': '기공성 알렉산더: 율동편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    524: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '萨菲洛特歼殛战',
            'de': 'Zenit der Götter - Sephirot',
            'en': 'Containment Bay S1T7 (Extreme)',
            'fr': 'Unité de contention S1P7 (extrême)',
            'ja': '極魔神セフィロト討滅戦',
            'ko': '극 마신 세피로트 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 66,
    },
    525: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '群狼盛宴 (4对4 / 练习赛)',
            'de': 'The Feast (4 gegen 4, Übungskampf)',
            'en': 'The Feast (4 on 4 - Training)',
            'fr': 'The Feast (4x4/en<SoftHyphen/>traî<SoftHyphen/>ne<SoftHyphen/>ment)',
            'ja': 'ザ・フィースト (4対4 / カジュアルマッチ)',
            'ko': '더 피스트 (4 대 4 / 일반전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 65,
    },
    527: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '群狼盛宴 (4对4 / 段位赛)',
            'de': 'The Feast (4 gegen 4, gewertet)',
            'en': 'The Feast (4 on 4 - Ranked)',
            'fr': 'The Feast (4x4/classé)',
            'ja': 'ザ・フィースト (4対4 / ランクマッチ)',
            'ko': '더 피스트 (4 대 4 / 등급전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 65,
    },
    529: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 律动之章1',
            'de': 'Alexander - Faust des Sohnes (episch)',
            'en': 'Alexander - The Fist of the Son (Savage)',
            'fr': 'Alexander - Le Poing du Fils (sadique)',
            'ja': '機工城アレキサンダー零式：律動編1',
            'ko': '기공성 알렉산더: 율동편(영웅) 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    530: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 律动之章2',
            'de': 'Alexander - Elle des Sohnes (episch)',
            'en': 'Alexander - The Cuff of the Son (Savage)',
            'fr': 'Alexander - Le Poignet du Fils (sadique)',
            'ja': '機工城アレキサンダー零式：律動編2',
            'ko': '기공성 알렉산더: 율동편(영웅) 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    531: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 律动之章3',
            'de': 'Alexander - Arm des Sohnes (episch)',
            'en': 'Alexander - The Arm of the Son (Savage)',
            'fr': 'Alexander - Le Bras du Fils (sadique)',
            'ja': '機工城アレキサンダー零式：律動編3',
            'ko': '기공성 알렉산더: 율동편(영웅) 3',
        },
        'offsetX': -110,
        'offsetY': -170,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    532: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 律动之章4',
            'de': 'Alexander - Last des Sohnes (episch)',
            'en': 'Alexander - The Burden of the Son (Savage)',
            'fr': 'Alexander - Le Fardeau du Fils (sadique)',
            'ja': '機工城アレキサンダー零式：律動編4',
            'ko': '기공성 알렉산더: 율동편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    533: {
        'contentType': 7,
        'exVersion': 1,
        'name': {
            'cn': '四国联合军演',
            'de': 'Truppenübung der Eorzäischen Allianz',
            'en': 'A Spectacle for the Ages',
            'fr': 'La grande manœuvre éorzéenne',
            'ja': '四国合同演習',
            'ko': '4개국 합동 훈련',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    537: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '躲避范围攻击',
            'de': 'Flächenangriffen ausweichen',
            'en': 'Avoid Area of Effect Attacks',
            'fr': 'Éviter les attaques à aire d\'effet',
            'ja': '範囲攻撃を避けよう！',
            'ko': '범위 공격을 피하자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    538: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '掌握仇恨连击',
            'de': 'Mit Kombos Feindseligkeit auf sich ziehen',
            'en': 'Execute a Combo to Increase Enmity',
            'fr': 'Générer de l\'inimitié avec un combo',
            'ja': 'コンボで敵視を集めよう！',
            'ko': '콤보를 이어 적개심을 끌자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    539: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '控制敌人的仇恨',
            'de': 'Kombos im Kampf einsetzen',
            'en': 'Execute a Combo in Battle',
            'fr': 'Effectuer le combo en combat',
            'ja': '実戦でコンボに挑戦しよう！',
            'ko': '실전에서 콤보를 사용해보자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    540: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '控制多个敌人的仇恨',
            'de': 'Feindseligkeit mehrerer Gegner auf sich ziehen',
            'en': 'Accrue Enmity from Multiple Targets',
            'fr': 'Attirer l\'inimitié de plusieurs ennemis sur soi',
            'ja': '複数の敵から敵視を集めよう！',
            'ko': '다수의 적에게서 적개심을 끌자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    541: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '实战控制多个敌人的仇恨',
            'de': 'Gegen mehrere Gegner auf einmal kämpfen',
            'en': 'Engage Multiple Targets',
            'fr': 'Affronter plusieurs ennemis',
            'ja': '実戦で複数の敵と戦ってみよう！',
            'ko': '실전에서 다수의 적과 싸워보자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    542: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '控制远处敌人的仇恨',
            'de': 'Aus der Ferne Feindseligkeit auf sich ziehen',
            'en': 'Execute a Ranged Attack to Increase Enmity',
            'fr': 'Générer de l\'inimitié à distance',
            'ja': '遠距離から敵視を集めよう！',
            'ko': '멀리서 적개심을 끌자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    543: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '留心增援的敌人',
            'de': 'Feindliche Verstärkung aufhalten',
            'en': 'Engage Enemy Reinforcements',
            'fr': 'Faire face à des renforts ennemis',
            'ja': '敵の増援に対応しよう！',
            'ko': '적 지원군에 대처하자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    544: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '配合防护职业打倒单个敌人',
            'de': 'Gegner gemeinsam besiegen',
            'en': 'Assist Allies in Defeating a Target',
            'fr': 'Vaincre un ennemi en assistant des alliés',
            'ja': '味方と協力して敵を倒そう！',
            'ko': '파티원과 협력하여 적을 물리치자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    545: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '配合防护职业打倒多个敌人',
            'de': 'Den Gegner eines Verbündeten besiegen',
            'en': 'Defeat an Occupied Target',
            'fr': 'Vaincre un ennemi occupé par un allié',
            'ja': '味方が引きつけている敵を倒そう！',
            'ko': '파티원과 같은 적을 공격하자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    546: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '躲避范围攻击的同时进行战斗',
            'de': 'Angriffen ausweichen',
            'en': 'Avoid Engaged Targets',
            'fr': 'Combattre en évitant les attaques ennemies',
            'ja': '敵の攻撃を避けながら戦おう！',
            'ko': '적의 공격을 피하면서 싸우자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    548: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '灵活运用场地机关',
            'de': 'Mit dem Gelände interagieren',
            'en': 'Interact with the Battlefield',
            'fr': 'Interagir avec le décor en combat',
            'ja': 'ギミックを活用して戦おう！',
            'ko': '특수 장치를 활용하며 싸우자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    549: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '治疗防护职业',
            'de': 'Verbündete heilen',
            'en': 'Heal an Ally',
            'fr': 'Soigner un allié',
            'ja': '味方を回復しよう！',
            'ko': '파티원을 회복시키자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    550: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '治疗小队队员',
            'de': 'Mehrere Verbündete heilen',
            'en': 'Heal Multiple Allies',
            'fr': 'Soigner plusieurs alliés',
            'ja': '複数の味方を回復しよう！',
            'ko': '다수의 파티원을 회복시키자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    552: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '最终训练',
            'de': 'Letzte Übung',
            'en': 'Final Exercise',
            'fr': 'Exercice final',
            'ja': '最終訓練！',
            'ko': '마지막 훈련!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    554: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '荣誉野 (碎冰战)',
            'de': 'Feld der Ehre (Zersplitterung)',
            'en': 'The Fields of Glory (Shatter)',
            'fr': 'Les Champs de la Gloire (brise-glace)',
            'ja': 'フィールド・オブ・グローリー (砕氷戦)',
            'ko': '영광의 평원(쇄빙전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 67,
    },
    555: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '天龙宫殿忆罪宫',
            'de': 'Sohr Khai',
            'en': 'Sohr Khai',
            'fr': 'Sohr Khai',
            'ja': '天竜宮殿 ソール・カイ',
            'ko': '소르 카이',
        },
        'offsetX': 370,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    556: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '禁忌城邦玛哈',
            'de': 'Die Stadt der Tränen',
            'en': 'The Weeping City of Mhach',
            'fr': 'La Cité défendue de Mhach',
            'ja': '禁忌都市マハ',
            'ko': '금기도시 마하',
        },
        'offsetX': -40,
        'offsetY': -40,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    557: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '黑涡传说破舰岛',
            'de': 'Schiffbrecher-Insel (schwer)',
            'en': 'Hullbreaker Isle (Hard)',
            'fr': 'L\'Île de Crèvecarène (brutal)',
            'ja': '黒渦伝説 ハルブレーカー・アイル (Hard)',
            'ko': '난파선의 섬(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 68,
    },
    558: {
        'contentType': 9,
        'exVersion': 0,
        'name': {
            'cn': '水城宝物库',
            'de': 'Aquapolis',
            'en': 'The Aquapolis',
            'fr': 'L\'Aquapole',
            'ja': '宝物庫 アクアポリス',
            'ko': '보물고 아쿠아폴리스',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    559: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '尼德霍格征龙战',
            'de': 'Der letzte Schicksalsweg',
            'en': 'The Final Steps of Faith',
            'fr': 'La Dernière avancée de la Foi',
            'ja': 'ニーズヘッグ征竜戦',
            'ko': '니드호그 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 28,
    },
    560: {
        'contentType': 7,
        'exVersion': 1,
        'name': {
            'cn': '雷古拉·范·休著斯追击战',
            'de': 'Blutiges Wieder<SoftHyphen/>sehen',
            'en': 'A Bloody Reunion',
            'fr': 'Course-poursuite dans le laboratoire',
            'ja': 'レグラ・ヴァン・ヒュドルス追撃戦',
            'ko': '레굴라 반 히드루스 추격전',
        },
        'offsetX': -18,
        'offsetY': 149,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    561: {
        'contentType': 21,
        'exVersion': 0,
        'name': {
            'cn': '死者宫殿 地下1～10层',
            'de': 'Palast der Toten (Ebenen 1-10)',
            'en': 'The Palace of the Dead (Floors 1-10)',
            'fr': 'Le Palais des morts (sous-sols 1-10)',
            'ja': '死者の宮殿 B1～B10',
            'ko': '망자의 궁전 B1~B10',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    562: {
        'contentType': 21,
        'exVersion': 0,
        'name': {
            'cn': '死者宫殿 地下11～20层',
            'de': 'Palast der Toten (Ebenen 11-20)',
            'en': 'The Palace of the Dead (Floors 11-20)',
            'fr': 'Le Palais des morts (sous-sols 11-20)',
            'ja': '死者の宮殿 B11～B20',
            'ko': '망자의 궁전 B11~B20',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    563: {
        'contentType': 21,
        'exVersion': 0,
        'name': {
            'cn': '死者宫殿 地下21～30层',
            'de': 'Palast der Toten (Ebenen 21-30)',
            'en': 'The Palace of the Dead (Floors 21-30)',
            'fr': 'Le Palais des morts (sous-sols 21-30)',
            'ja': '死者の宮殿 B21～B30',
            'ko': '망자의 궁전 B21~B30',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    564: {
        'contentType': 21,
        'exVersion': 0,
        'name': {
            'cn': '死者宫殿 地下31～40层',
            'de': 'Palast der Toten (Ebenen 31-40)',
            'en': 'The Palace of the Dead (Floors 31-40)',
            'fr': 'Le Palais des morts (sous-sols 31-40)',
            'ja': '死者の宮殿 B31～B40',
            'ko': '망자의 궁전 B31~B40',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    565: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下41～50层',
            'de': 'Palast der Toten (Ebenen 41-50)',
            'en': 'The Palace of the Dead (Floors 41-50)',
            'fr': 'Le Palais des morts (sous-sols 41-50)',
            'ja': '死者の宮殿 B41～B50',
            'ko': '망자의 궁전 B41~B50',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    566: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '尼德霍格传奇征龙战',
            'de': 'Das Lied von Nidhoggs letztem Ruf',
            'en': 'The Minstrel\'s Ballad: Nidhogg\'s Rage',
            'fr': 'L\'ire de Nidhogg',
            'ja': '極ニーズヘッグ征竜戦',
            'ko': '극 니드호그 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 28,
    },
    571: {
        'contentType': 22,
        'exVersion': 0,
        'name': {
            'cn': '亡灵府邸闹鬼庄园',
            'de': 'Das Geisterschloss',
            'en': 'The Haunted Manor',
            'fr': 'Le Manoir hanté',
            'ja': '亡霊屋敷 ホーンテッドマナー',
            'ko': '유령의 집',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    572: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '险峻峡谷塞尔法特尔溪谷',
            'de': 'Xelphatol',
            'en': 'Xelphatol',
            'fr': 'Xelphatol',
            'ja': '峻厳渓谷 ゼルファトル',
            'ko': '젤파톨',
        },
        'offsetX': -148,
        'offsetY': 35,
        'sizeFactor': 200,
        'weatherRate': 40,
    },
    576: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '索菲娅歼灭战',
            'de': 'Götterdämmerung - Sophia',
            'en': 'Containment Bay P1T6',
            'fr': 'Unité de contention P1P6',
            'ja': '女神ソフィア討滅戦',
            'ko': '여신 소피아 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 69,
    },
    577: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '索菲娅歼殛战',
            'de': 'Zenit der Götter - Sophia',
            'en': 'Containment Bay P1T6 (Extreme)',
            'fr': 'Unité de contention P1P6 (extrême)',
            'ja': '極女神ソフィア討滅戦',
            'ko': '극 여신 소피아 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 69,
    },
    578: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '秘本宝库迦巴勒幻想图书馆',
            'de': 'Große Gubal-Bibliothek (schwer)',
            'en': 'The Great Gubal Library (Hard)',
            'fr': 'La Grande bibliothèque de Gubal (brutal)',
            'ja': '稀書回収 グブラ幻想図書館 (Hard)',
            'ko': '구브라 환상도서관(어려움)',
        },
        'offsetX': 116,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    579: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '九宫幻卡：幻卡对局室',
            'de': 'Triple Triad: Weltensalon',
            'en': 'The Triple Triad Battlehall',
            'fr': 'Arène Triple Triade',
            'ja': 'トリプルトライアド：カードバトルルーム',
            'ko': '트리플 트라이어드: 카드 대결장',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 800,
        'weatherRate': 0,
    },
    580: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 天动之章1',
            'de': 'Alexander - Augen des Schöpfers',
            'en': 'Alexander - The Eyes of the Creator',
            'fr': 'Alexander - Les Yeux du Créateur',
            'ja': '機工城アレキサンダー：天動編1',
            'ko': '기공성 알렉산더: 천동편 1',
        },
        'offsetX': 75,
        'offsetY': 14,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    581: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 天动之章2',
            'de': 'Alexander - Atem des Schöpfers',
            'en': 'Alexander - The Breath of the Creator',
            'fr': 'Alexander - Le Souffle du Créateur',
            'ja': '機工城アレキサンダー：天動編2',
            'ko': '기공성 알렉산더: 천동편 2',
        },
        'offsetX': 0,
        'offsetY': -80,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    582: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 天动之章3',
            'de': 'Alexander - Herz des Schöpfers',
            'en': 'Alexander - The Heart of the Creator',
            'fr': 'Alexander - Le Cœur du Créateur',
            'ja': '機工城アレキサンダー：天動編3',
            'ko': '기공성 알렉산더: 천동편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    583: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 天动之章4',
            'de': 'Alexander - Seele des Schöpfers',
            'en': 'Alexander - The Soul of the Creator',
            'fr': 'Alexander - L\'Âme du Créateur',
            'ja': '機工城アレキサンダー：天動編4',
            'ko': '기공성 알렉산더: 천동편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    584: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 天动之章1',
            'de': 'Alexander - Augen des Schöpfers (episch)',
            'en': 'Alexander - The Eyes of the Creator (Savage)',
            'fr': 'Alexander - Les Yeux du Créateur (sadique)',
            'ja': '機工城アレキサンダー零式：天動編1',
            'ko': '기공성 알렉산더: 천동편(영웅) 1',
        },
        'offsetX': 75,
        'offsetY': 14,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    585: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 天动之章2',
            'de': 'Alexander - Atem des Schöpfers (episch)',
            'en': 'Alexander - The Breath of the Creator (Savage)',
            'fr': 'Alexander - Le Souffle du Créateur (sadique)',
            'ja': '機工城アレキサンダー零式：天動編2',
            'ko': '기공성 알렉산더: 천동편(영웅) 2',
        },
        'offsetX': 0,
        'offsetY': -80,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    586: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 天动之章3',
            'de': 'Alexander - Herz des Schöpfers (episch)',
            'en': 'Alexander - The Heart of the Creator (Savage)',
            'fr': 'Alexander - Le Cœur du Créateur (sadique)',
            'ja': '機工城アレキサンダー零式：天動編3',
            'ko': '기공성 알렉산더: 천동편(영웅) 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    587: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 天动之章4',
            'de': 'Alexander - Seele des Schöpfers (episch)',
            'en': 'Alexander - The Soul of the Creator (Savage)',
            'fr': 'Alexander - L\'Âme du Créateur (sadique)',
            'ja': '機工城アレキサンダー零式：天動編4',
            'ko': '기공성 알렉산더: 천동편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    589: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '萌宠之王：玩家对战（绩点赛）',
            'de': 'Kampf der Trabanten: Gegen Spieler (um RP)',
            'en': 'LoVM: Player Battle (RP)',
            'fr': 'Bataille simple contre un joueur (avec PR)',
            'ja': 'LoVM：プレイヤー対戦 (RP変動あり)',
            'ko': '꼬마 친구 공방전: 플레이어 대결(RP 변동 있음)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    590: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '萌宠之王：大赛对战（玩家对战）',
            'de': 'Kampf der Trabanten: Turnier (gegen Spieler)',
            'en': 'LoVM: Tournament',
            'fr': 'Bataille de tournoi contre des joueurs',
            'ja': 'LoVM：大会対戦 (プレイヤー対戦）',
            'ko': '꼬마 친구 공방전: 대회 대결(플레이어 대결)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    591: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '萌宠之王：玩家对战（无绩点赛）',
            'de': 'Kampf der Trabanten: Gegen Spieler (ohne RP)',
            'en': 'LoVM: Player Battle (Non-RP)',
            'fr': 'Bataille simple contre un joueur (sans PR)',
            'ja': 'LoVM：プレイヤー対戦 (RP変動なし)',
            'ko': '꼬마 친구 공방전: 플레이어 대결(RP 변동 없음)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    592: {
        'contentType': 7,
        'exVersion': 1,
        'name': {
            'cn': '纠缠不清的宿命',
            'de': 'Weltenübergreifendes Schicksal',
            'en': 'One Life for One World',
            'fr': 'Destins entrecroisés',
            'ja': '絡み合う宿命',
            'ko': '뒤얽히는 숙명',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 28,
    },
    593: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下51～60层',
            'de': 'Palast der Toten (Ebenen 51 - 60)',
            'en': 'The Palace of the Dead (Floors 51-60)',
            'fr': 'Le Palais des morts (sous-sols 51-60)',
            'ja': '死者の宮殿 B51～B60',
            'ko': '망자의 궁전 B51~B60',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    594: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下61～70层',
            'de': 'Palast der Toten (Ebenen 61 - 70)',
            'en': 'The Palace of the Dead (Floors 61-70)',
            'fr': 'Le Palais des morts (sous-sols 61-70)',
            'ja': '死者の宮殿 B61～B70',
            'ko': '망자의 궁전 B61~B70',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    595: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下71～80层',
            'de': 'Palast der Toten (Ebenen 71 - 80)',
            'en': 'The Palace of the Dead (Floors 71-80)',
            'fr': 'Le Palais des morts (sous-sols 71-80)',
            'ja': '死者の宮殿 B71～B80',
            'ko': '망자의 궁전 B71~B80',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    596: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下81～90层',
            'de': 'Palast der Toten (Ebenen 81 - 90)',
            'en': 'The Palace of the Dead (Floors 81-90)',
            'fr': 'Le Palais des morts (sous-sols 81-90)',
            'ja': '死者の宮殿 B81～B90',
            'ko': '망자의 궁전 B81~B90',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    597: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下91～100层',
            'de': 'Palast der Toten (Ebenen 91 - 100)',
            'en': 'The Palace of the Dead (Floors 91-100)',
            'fr': 'Le Palais des morts (sous-sols 91-100)',
            'ja': '死者の宮殿 B91～B100',
            'ko': '망자의 궁전 B91~B100',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    598: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下101～110层',
            'de': 'Palast der Toten (Ebenen 101 - 110)',
            'en': 'The Palace of the Dead (Floors 101-110)',
            'fr': 'Le Palais des morts (sous-sols 101-110)',
            'ja': '死者の宮殿 B101～B110',
            'ko': '망자의 궁전 B101~B110',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    599: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下111～120层',
            'de': 'Palast der Toten (Ebenen 111 - 120)',
            'en': 'The Palace of the Dead (Floors 111-120)',
            'fr': 'Le Palais des morts (sous-sols 111-120)',
            'ja': '死者の宮殿 B111～B120',
            'ko': '망자의 궁전 B111~B120',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    600: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下121～130层',
            'de': 'Palast der Toten (Ebenen 121 - 130)',
            'en': 'The Palace of the Dead (Floors 121-130)',
            'fr': 'Le Palais des morts (sous-sols 121-130)',
            'ja': '死者の宮殿 B121～B130',
            'ko': '망자의 궁전 B121~B130',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    601: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下131～140层',
            'de': 'Palast der Toten (Ebenen 131 - 140)',
            'en': 'The Palace of the Dead (Floors 131-140)',
            'fr': 'Le Palais des morts (sous-sols 131-140)',
            'ja': '死者の宮殿 B131～B140',
            'ko': '망자의 궁전 B131~B140',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    602: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下141～150层',
            'de': 'Palast der Toten (Ebenen 141 - 150)',
            'en': 'The Palace of the Dead (Floors 141-150)',
            'fr': 'Le Palais des morts (sous-sols 141-150)',
            'ja': '死者の宮殿 B141～B150',
            'ko': '망자의 궁전 B141~B150',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    603: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下151～160层',
            'de': 'Palast der Toten (Ebenen 151 - 160)',
            'en': 'The Palace of the Dead (Floors 151-160)',
            'fr': 'Le Palais des morts (sous-sols 151-160)',
            'ja': '死者の宮殿 B151～B160',
            'ko': '망자의 궁전 B151~B160',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    604: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下161～170层',
            'de': 'Palast der Toten (Ebenen 161 - 170)',
            'en': 'The Palace of the Dead (Floors 161-170)',
            'fr': 'Le Palais des morts (sous-sols 161-170)',
            'ja': '死者の宮殿 B161～B170',
            'ko': '망자의 궁전 B161~B170',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    605: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下171～180层',
            'de': 'Palast der Toten (Ebenen 171 - 180)',
            'en': 'The Palace of the Dead (Floors 171-180)',
            'fr': 'Le Palais des morts (sous-sols 171-180)',
            'ja': '死者の宮殿 B171～B180',
            'ko': '망자의 궁전 B171~B180',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    606: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下181～190层',
            'de': 'Palast der Toten (Ebenen 181 - 190)',
            'en': 'The Palace of the Dead (Floors 181-190)',
            'fr': 'Le Palais des morts (sous-sols 181-190)',
            'ja': '死者の宮殿 B181～B190',
            'ko': '망자의 궁전 B181~B190',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    607: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下191～200层',
            'de': 'Palast der Toten (Ebenen 191 - 200)',
            'en': 'The Palace of the Dead (Floors 191-200)',
            'fr': 'Le Palais des morts (sous-sols 191-200)',
            'ja': '死者の宮殿 B191～B200',
            'ko': '망자의 궁전 B191~B200',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    612: {
        'exVersion': 2,
        'name': {
            'cn': '基拉巴尼亚边区',
            'de': 'Abanisches Grenzland',
            'en': 'The Fringes',
            'fr': 'Les Marges',
            'ja': 'ギラバニア辺境地帯',
            'ko': '기라바니아 변방지대',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 79,
    },
    613: {
        'exVersion': 2,
        'name': {
            'cn': '红玉海',
            'de': 'Rubinsee',
            'en': 'The Ruby Sea',
            'fr': 'Mer de Rubis',
            'ja': '紅玉海',
            'ko': '홍옥해',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 83,
    },
    614: {
        'exVersion': 2,
        'name': {
            'cn': '延夏',
            'de': 'Yanxia',
            'en': 'Yanxia',
            'fr': 'Yanxia',
            'ja': 'ヤンサ',
            'ko': '얀샤',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 84,
    },
    615: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '坚牢铁壁巴埃萨长城',
            'de': 'Baelsar-Wall',
            'en': 'Baelsar\'s Wall',
            'fr': 'La Muraille de Baelsar',
            'ja': '巨大防壁 バエサルの長城',
            'ko': '바일사르 장성',
        },
        'offsetX': 182,
        'offsetY': 32,
        'sizeFactor': 200,
        'weatherRate': 40,
    },
    616: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '海底宫殿紫水宫',
            'de': 'Shisui',
            'en': 'Shisui of the Violet Tides',
            'fr': 'Le Palais aux Marées violettes',
            'ja': '海底宮殿 紫水宮',
            'ko': '시스이 궁',
        },
        'offsetX': 0,
        'offsetY': 35,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    617: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '天山深境索姆阿尔灵峰',
            'de': 'Sohm Al (schwer)',
            'en': 'Sohm Al (Hard)',
            'fr': 'Sohm Al (brutal)',
            'ja': '霊峰浄化 ソーム・アル (Hard)',
            'ko': '솜 알(어려움)',
        },
        'offsetX': 128,
        'offsetY': -32,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    619: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '群狼盛宴 (狼狱演习场：自定赛)',
            'de': 'The Feast (Wolfshöhle: Schaukampf)',
            'en': 'The Feast (Custom Match - Feasting Grounds)',
            'fr': 'The Feast (personnalisé/Festin des loups)',
            'ja': 'ザ・フィースト (ウルヴズジェイル演習場：カスタムマッチ）',
            'ko': '더 피스트 (늑대우리 훈련장: 친선 경기)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 65,
    },
    620: {
        'exVersion': 2,
        'name': {
            'cn': '基拉巴尼亚山区',
            'de': 'Die Zinnen',
            'en': 'The Peaks',
            'fr': 'Les Pics',
            'ja': 'ギラバニア山岳地帯',
            'ko': '기라바니아 산악지대',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 80,
    },
    621: {
        'exVersion': 2,
        'name': {
            'cn': '基拉巴尼亚湖区',
            'de': 'Das Fenn',
            'en': 'The Lochs',
            'fr': 'Les Lacs',
            'ja': 'ギラバニア湖畔地帯',
            'ko': '기라바니아 호반지대',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 81,
    },
    622: {
        'exVersion': 2,
        'name': {
            'cn': '太阳神草原',
            'de': 'Azim-Steppe',
            'en': 'The Azim Steppe',
            'fr': 'Steppe d\'Azim',
            'ja': 'アジムステップ',
            'ko': '아짐 대초원',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 85,
    },
    623: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '试炼行路巴儿达木霸道',
            'de': 'Bardams Probe',
            'en': 'Bardam\'s Mettle',
            'fr': 'La Force de Bardam',
            'ja': '伝統試練 バルダム覇道',
            'ko': '바르담 패도',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    624: {
        'contentType': 23,
        'exVersion': 1,
        'name': {
            'cn': '云冠群岛白昼探索（狩猎专用）',
            'de': 'Das Diadem - Jagdgründe (leicht)',
            'en': 'The Diadem Hunting Grounds (Easy)',
            'fr': 'Le Diadème<Indent/>: terrains de chasse (facile)',
            'ja': '雲海探索 ディアデム諸島：狩猟限定 (Easy)',
            'ko': '디아뎀 제도: 전투 한정(쉬움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 60,
    },
    625: {
        'contentType': 23,
        'exVersion': 1,
        'name': {
            'cn': '云冠群岛黄昏探索（狩猎专用）',
            'de': 'Das Diadem - Jagdgründe',
            'en': 'The Diadem Hunting Grounds',
            'fr': 'Le Diadème<Indent/>: terrains de chasse',
            'ja': '雲海探索 ディアデム諸島：狩猟限定',
            'ko': '디아뎀 제도: 전투 한정',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 61,
    },
    626: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '漂流海域妖歌海',
            'de': 'Sirenen-See',
            'en': 'The Sirensong Sea',
            'fr': 'La Mer du Chant des sirènes',
            'ja': '漂流海域 セイレーン海',
            'ko': '세이렌 해',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 36,
    },
    627: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '影之国',
            'de': 'Dun Scaith',
            'en': 'Dun Scaith',
            'fr': 'Dun Scaith',
            'ja': '影の国ダン・スカー',
            'ko': '둔 스카',
        },
        'offsetX': -350,
        'offsetY': -400,
        'sizeFactor': 200,
        'weatherRate': 58,
    },
    628: {
        'exVersion': 2,
        'name': {
            'cn': '黄金港',
            'de': 'Kugane',
            'en': 'Kugane',
            'fr': 'Kugane',
            'ja': 'クガネ',
            'ko': '쿠가네',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 82,
    },
    630: {
        'contentType': 23,
        'exVersion': 1,
        'name': {
            'cn': '云冠群岛战争神猎场',
            'de': 'Das Diadem - Halones Prüfung',
            'en': 'The Diadem - Trials of the Fury',
            'fr': 'Le Diadème - Épreuves de Halone',
            'ja': '雲海探索 ディアデム諸島 (狩猟)',
            'ko': '디아뎀 제도: 전투',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 71,
    },
    633: {
        'contentType': 7,
        'exVersion': 1,
        'name': {
            'cn': '加尔提诺平原遭遇战',
            'de': 'Heliodrom',
            'en': 'The Carteneau Flats: Heliodrome',
            'fr': 'Rixe à l\'Héliodrome',
            'ja': 'カルテノー平原遭遇戦',
            'ko': '카르테노 평원 조우전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    635: {
        'exVersion': 2,
        'name': {
            'cn': '神拳痕',
            'de': 'Rhalgrs Wacht',
            'en': 'Rhalgr\'s Reach',
            'fr': 'L\'Étendue de Rhalgr',
            'ja': 'ラールガーズリーチ',
            'ko': '랄거의 손길',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 78,
    },
    637: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '祖尔宛歼灭战',
            'de': 'Götterdämmerung - Zurvan',
            'en': 'Containment Bay Z1T9',
            'fr': 'Unité de contention Z1P9',
            'ja': '鬼神ズルワーン討滅戦',
            'ko': '귀신 주르반 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 75,
    },
    638: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '祖尔宛歼殛战',
            'de': 'Zenit der Götter - Zurvan',
            'en': 'Containment Bay Z1T9 (Extreme)',
            'fr': 'Unité de contention Z1P9 (extrême)',
            'ja': '極鬼神ズルワーン討滅戦',
            'ko': '극 귀신 주르반 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 75,
    },
    646: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '群狼盛宴 (地衣宫演习场：自定赛)',
            'de': 'The Feast (Flechtenhain: Schaukampf)',
            'en': 'The Feast (Custom Match - Lichenweed)',
            'fr': 'The Feast (personnalisé/Pré-de-lichen)',
            'ja': 'ザ・フィースト (ライケンウィード演習場：カスタムマッチ）',
            'ko': '더 피스트 (잡초 훈련장: 친선 경기)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 73,
    },
    656: {
        'contentType': 23,
        'exVersion': 1,
        'name': {
            'cn': '云冠群岛丰饶神福地',
            'de': 'Das Diadem - Nophicas Prüfung',
            'en': 'The Diadem - Trials of the Matron',
            'fr': 'Le Diadème - Épreuves de Nophica',
            'ja': '雲海探索 ディアデム諸島 (採集)',
            'ko': '디아뎀 제도: 채집',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 71,
    },
    660: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '解放决战多玛王城',
            'de': 'Burg Doma',
            'en': 'Doma Castle',
            'fr': 'Le Château de Doma',
            'ja': '解放決戦 ドマ城',
            'ko': '도마 성',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    661: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '巨炮要塞帝国白山堡',
            'de': 'Castrum Abania',
            'en': 'Castrum Abania',
            'fr': 'Castrum Abania',
            'ja': '巨砲要塞 カストルム・アバニア',
            'ko': '카스트룸 아바니아',
        },
        'offsetX': 72,
        'offsetY': -186,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    662: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '恶党孤城黄金阁',
            'de': 'Schloss Kugane',
            'en': 'Kugane Castle',
            'fr': 'Le Château de Kugane',
            'ja': '悪党成敗 クガネ城',
            'ko': '쿠가네 성',
        },
        'offsetX': 70,
        'offsetY': 33,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    663: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '修行古刹星导寺',
            'de': 'Tempel der Faust',
            'en': 'The Temple of the Fist',
            'fr': 'Le Temple du Poing',
            'ja': '壊神修行 星導山寺院',
            'ko': '성도산 사원',
        },
        'offsetX': -427,
        'offsetY': -314,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    665: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '鱼道现身！',
            'de': 'Ein zweifelhaftes Angebot',
            'en': 'It\'s Probably a Trap',
            'fr': 'Un drôle de Namazu',
            'ja': 'ギョドウ現る！',
            'ko': '교도 등장!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    674: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '须佐之男歼灭战',
            'de': 'Götterdämmerung - Susano',
            'en': 'The Pool of Tribute',
            'fr': 'La Crique aux tributs',
            'ja': 'スサノオ討滅戦',
            'ko': '스사노오 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 77,
    },
    677: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '须佐之男歼殛战',
            'de': 'Zenit der Götter - Susano',
            'en': 'The Pool of Tribute (Extreme)',
            'fr': 'La Crique aux tributs (extrême)',
            'ja': '極スサノオ討滅戦',
            'ko': '극 스사노오 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 77,
    },
    679: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '神龙歼灭战',
            'de': 'Königliche Menagerie',
            'en': 'The Royal Menagerie',
            'fr': 'La Ménagerie royale',
            'ja': '神龍討滅戦',
            'ko': '신룡 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 76,
    },
    684: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '于里昂热的秘策',
            'de': 'Wege zur Transzendenz',
            'en': 'The Resonant',
            'fr': 'La ruse d\'Urianger',
            'ja': 'ウリエンジェの秘策',
            'ko': '위리앙제의 비책',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    688: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '那达慕',
            'de': 'Naadam',
            'en': 'Naadam',
            'fr': 'La grande bataille du Naadam',
            'ja': '終節の合戦',
            'ko': '계절끝 합전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    689: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '鏖战红莲阿拉米格',
            'de': 'Ala Mhigo',
            'en': 'Ala Mhigo',
            'fr': 'Ala Mhigo',
            'ja': '紅蓮決戦 アラミゴ',
            'ko': '알라미고',
        },
        'offsetX': 292,
        'offsetY': -163,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    690: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '时空狭缝外缘',
            'de': 'Interdimensionaler Riss',
            'en': 'Interdimensional Rift',
            'fr': 'Fissure interdimensionnelle',
            'ja': '次元の狭間：外縁',
            'ko': '차원의 틈: 외곽',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 88,
    },
    691: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 德尔塔幻境1',
            'de': 'Deltametrie 1.0',
            'en': 'Deltascape V1.0',
            'fr': 'Deltastice v1.0',
            'ja': '次元の狭間オメガ：デルタ編1',
            'ko': '차원의 틈 오메가: 델타편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    692: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 德尔塔幻境2',
            'de': 'Deltametrie 2.0',
            'en': 'Deltascape V2.0',
            'fr': 'Deltastice v2.0',
            'ja': '次元の狭間オメガ：デルタ編2',
            'ko': '차원의 틈 오메가: 델타편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    693: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 德尔塔幻境3',
            'de': 'Deltametrie 3.0',
            'en': 'Deltascape V3.0',
            'fr': 'Deltastice v3.0',
            'ja': '次元の狭間オメガ：デルタ編3',
            'ko': '차원의 틈 오메가: 델타편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    694: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 德尔塔幻境4',
            'de': 'Deltametrie 4.0',
            'en': 'Deltascape V4.0',
            'fr': 'Deltastice v4.0',
            'ja': '次元の狭間オメガ：デルタ編4',
            'ko': '차원의 틈 오메가: 델타편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    695: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 德尔塔幻境1',
            'de': 'Deltametrie 1.0 (episch)',
            'en': 'Deltascape V1.0 (Savage)',
            'fr': 'Deltastice v1.0 (sadique)',
            'ja': '次元の狭間オメガ零式：デルタ編1',
            'ko': '차원의 틈 오메가: 델타편(영웅) 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    696: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 德尔塔幻境2',
            'de': 'Deltametrie 2.0 (episch)',
            'en': 'Deltascape V2.0 (Savage)',
            'fr': 'Deltastice v2.0 (sadique)',
            'ja': '次元の狭間オメガ零式：デルタ編2',
            'ko': '차원의 틈 오메가: 델타편(영웅) 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    697: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 德尔塔幻境3',
            'de': 'Deltametrie 3.0 (episch)',
            'en': 'Deltascape V3.0 (Savage)',
            'fr': 'Deltastice v3.0 (sadique)',
            'ja': '次元の狭間オメガ零式：デルタ編3',
            'ko': '차원의 틈 오메가: 델타편(영웅) 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    698: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 德尔塔幻境4',
            'de': 'Deltametrie 4.0 (episch)',
            'en': 'Deltascape V4.0 (Savage)',
            'fr': 'Deltastice v4.0 (sadique)',
            'ja': '次元の狭間オメガ零式：デルタ編4',
            'ko': '차원의 틈 오메가: 델타편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    705: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '大会开始',
            'de': 'Thal zu Ehren',
            'en': 'In Thal\'s Name',
            'fr': 'Le tournoi commémoratif du sultanat',
            'ja': 'ウル王杯闘技会の始まり',
            'ko': '울다하 왕실배 투기대회',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 8,
    },
    706: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '为了更强',
            'de': 'Die hohe Kunst des Schwertkampfs',
            'en': 'Raising the Sword',
            'fr': 'La finale des champions',
            'ja': 'さらなる剣術の高みへ',
            'ko': '더 높은 검술의 경지로',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 8,
    },
    707: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '抗争之力',
            'de': 'Die Kraft des Widerstands',
            'en': 'With Heart and Steel',
            'fr': 'Transmigration démoniaque',
            'ja': '抗う力',
            'ko': '맞서는 힘',
        },
        'offsetX': 298,
        'offsetY': 350,
        'sizeFactor': 200,
        'weatherRate': 37,
    },
    708: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '海都路人身首异',
            'de': 'Mord ist sein Hobby',
            'en': 'Blood on the Deck',
            'fr': 'La légende de Musosai<Indent/>: l\'assassin de Limsa Lominsa',
            'ja': '海都を震わす人斬りの宴！',
            'ko': '해양도시를 흔드는 살인자의 연회!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    709: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '极恶之人木枯',
            'de': 'Der Inbegriff des Bösen',
            'en': 'The Face of True Evil',
            'fr': 'L\'abominable Kogarashi',
            'ja': '極悪人コガラシ',
            'ko': '극악무도한 코가라시',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 49,
    },
    710: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '松叶门外之变',
            'de': 'Vorfall auf dem Matsuba-Platz',
            'en': 'Matsuba Mayhem',
            'fr': 'Règlement de compte au square Matsuba',
            'ja': '松葉門外の変',
            'ko': '마츠바 사변',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 82,
    },
    711: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '决战龟甲岛',
            'de': 'Ent<SoftHyphen/>schei<SoftHyphen/>dungs<SoftHyphen/>schlacht auf Bekko',
            'en': 'The Battle on Bekko',
            'fr': 'L\'af<SoftHyphen/>fron<SoftHyphen/>te<SoftHyphen/>ment de deux justices',
            'ja': 'ベッコウ島の決闘',
            'ko': '베코우 섬의 결투',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 83,
    },
    712: {
        'contentType': 9,
        'exVersion': 2,
        'name': {
            'cn': '运河宝物库',
            'de': 'Kanäle von Uznair',
            'en': 'The Lost Canals of Uznair',
            'fr': 'Les Canaux perdus d\'Uznair',
            'ja': '宝物庫 ウズネアカナル',
            'ko': '보물고 우즈네어 운하',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    713: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '漆黑的巨龙',
            'de': 'Der tobende Drache',
            'en': 'Dark as the Night Sky',
            'fr': 'Aussi sombre que la nuit',
            'ja': '漆黒の巨竜',
            'ko': '칠흑의 거룡',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 85,
    },
    714: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '红血之龙骑士',
            'de': 'Der Rubin-Drachenreiter',
            'en': 'Dragon Sound',
            'fr': 'Le Dragon écarlate',
            'ja': '紅の竜騎士',
            'ko': '붉은 용기사',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    715: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '遥远的憧憬',
            'de': 'Probe des Meisters',
            'en': 'The Orphans and the Broken Blade',
            'fr': 'L\'aspiration refoulée',
            'ja': 'あと三度、遥かな憧憬',
            'ko': '앞으로 세 번, 아득한 동경',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 86,
    },
    716: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '再次相见',
            'de': 'Aus der Tiefe des Herzens',
            'en': 'Our Compromise',
            'fr': 'La dernière séparation',
            'ja': 'あと一度、君に会えたら',
            'ko': '앞으로 한 번, 너와 만날 수 있다면',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 28,
    },
    717: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '原初的战士',
            'de': 'Die Urkraft in ihr',
            'en': 'Curious Gorge Meets His Match',
            'fr': 'L\'épreuve de force',
            'ja': '原初的な彼女',
            'ko': '원초적 그녀',
        },
        'offsetX': -77,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    718: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '燃烧吧高吉',
            'de': 'Kriegerische Leidenschaft',
            'en': 'The Heart of the Problem',
            'fr': 'Passion guerrière',
            'ja': '燃えよゴージ！',
            'ko': '불타올라라, 산골짜기!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 85,
    },
    719: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '吉祥天女歼灭战',
            'de': 'Götterdämmerung - Lakshmi',
            'en': 'Emanation',
            'fr': 'Émanation',
            'ja': 'ラクシュミ討滅戦',
            'ko': '락슈미 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 87,
    },
    720: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '吉祥天女歼殛战',
            'de': 'Zenit der Götter - Lakshmi',
            'en': 'Emanation (Extreme)',
            'fr': 'Émanation (extrême)',
            'ja': '極ラクシュミ討滅戦',
            'ko': '극 락슈미 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 87,
    },
    722: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '穿越时空的夙愿',
            'de': 'Ein Wunsch aus alten Zeiten',
            'en': 'Our Unsung Heroes',
            'fr': 'L\'espoir en héritage',
            'ja': '時をかける願い',
            'ko': '시간을 뛰어넘은 염원',
        },
        'offsetX': -175,
        'offsetY': -297,
        'sizeFactor': 200,
        'weatherRate': 63,
    },
    723: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '影隐忍法贴',
            'de': 'Aus dem Verborgenen',
            'en': 'When Clans Collide',
            'fr': 'La bataille des clans',
            'ja': '影隠忍法帖',
            'ko': '그림자 인법첩',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 85,
    },
    725: {
        'contentType': 9,
        'exVersion': 2,
        'name': {
            'cn': '运河宝物库深层',
            'de': 'Vergessene Kanäle von Uznair',
            'en': 'The Hidden Canals of Uznair',
            'fr': 'Les Canaux cachés d\'Uznair',
            'ja': '宝物庫 ウズネアカナル深層',
            'ko': '보물고 우즈네어 운하 심층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    729: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '距骨研究所 (机动战)',
            'de': 'Astragalos',
            'en': 'Astragalos',
            'fr': 'Astragalos (machinerie)',
            'ja': 'アストラガロス (機工戦)',
            'ko': '아스트라갈로스(기공전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    730: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '神龙梦幻歼灭战',
            'de': 'Heldenlied von Shinryu',
            'en': 'The Minstrel\'s Ballad: Shinryu\'s Domain',
            'fr': 'Le domaine de Shinryu',
            'ja': '極神龍討滅戦',
            'ko': '극 신룡 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 76,
    },
    731: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '沉没神殿斯卡拉遗迹',
            'de': 'Die versunkene Stadt Skalla',
            'en': 'The Drowned City of Skalla',
            'fr': 'La Cité engloutie de Skalla',
            'ja': '水没遺構 スカラ',
            'ko': '스칼라 유적',
        },
        'offsetX': 185,
        'offsetY': 5,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    732: {
        'contentType': 26,
        'exVersion': 2,
        'name': {
            'cn': '禁地优雷卡 常风之地',
            'de': 'Eureka Anemos',
            'en': 'The Forbidden Land, Eureka Anemos',
            'fr': 'Eurêka Anemos',
            'ja': '禁断の地 エウレカ：アネモス編',
            'ko': '금단의 땅 에우레카: 아네모스편',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 91,
    },
    733: {
        'contentType': 28,
        'exVersion': 2,
        'name': {
            'cn': '巴哈姆特绝境战',
            'de': 'Endlose Schatten von Bahamut (fatal)',
            'en': 'The Unending Coil of Bahamut (Ultimate)',
            'fr': 'L\'Abîme infini de Bahamut (fatal)',
            'ja': '絶バハムート討滅戦',
            'ko': '절 바하무트 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    734: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '失落之都拉巴纳斯塔',
            'de': 'Rabanastre',
            'en': 'The Royal City of Rabanastre',
            'fr': 'La Cité royale de Rabanastre',
            'ja': '失われた都 ラバナスタ',
            'ko': '왕도 라바나스터',
        },
        'offsetX': 300,
        'offsetY': -100,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    741: {
        'contentType': 22,
        'exVersion': 0,
        'name': {
            'cn': '良缘仪式',
            'de': 'Valentionzeremonie',
            'en': 'The Valentione\'s Ceremony',
            'fr': 'La Cérémonie de la Valention',
            'ja': 'ヴァレンティオンセレモニー',
            'ko': '발렌티온 예식장',
        },
        'offsetX': 0,
        'offsetY': 125,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    742: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '红玉火山狱之盖',
            'de': 'Höllenspund',
            'en': 'Hells\' Lid',
            'fr': 'Le Couvercle des enfers',
            'ja': '紅玉火山 獄之蓋',
            'ko': '지옥뚜껑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    743: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '疯狂战舰无限回廊',
            'de': 'Die Fraktal-Kontinuum (schwer)',
            'en': 'The Fractal Continuum (Hard)',
            'fr': 'Le Continuum fractal (brutal)',
            'ja': '暴走戦艦 フラクタル・コンティニアム (Hard)',
            'ko': '무한연속 박물함(어려움)',
        },
        'offsetX': 0,
        'offsetY': 350,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    745: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '群狼盛宴 (战队段位赛)',
            'de': 'The Feast (Team, gewertet)',
            'en': 'The Feast (Team Ranked)',
            'fr': 'The Feast (classé/équipe JcJ)',
            'ja': 'ザ・フィースト (チーム用ランクマッチ)',
            'ko': '더 피스트 (팀 등급전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 90,
    },
    746: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '白虎镇魂战',
            'de': 'Seelentanz - Byakko',
            'en': 'The Jade Stoa',
            'fr': 'La Clairière de Jade',
            'ja': '白虎征魂戦',
            'ko': '백호 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 93,
    },
    748: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 西格玛幻境1',
            'de': 'Sigmametrie 1.0',
            'en': 'Sigmascape V1.0',
            'fr': 'Sigmastice v1.0',
            'ja': '次元の狭間オメガ：シグマ編1',
            'ko': '차원의 틈 오메가: 시그마편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    749: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 西格玛幻境2',
            'de': 'Sigmametrie 2.0',
            'en': 'Sigmascape V2.0',
            'fr': 'Sigmastice v2.0',
            'ja': '次元の狭間オメガ：シグマ編2',
            'ko': '차원의 틈 오메가: 시그마편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    750: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 西格玛幻境3',
            'de': 'Sigmametrie 3.0',
            'en': 'Sigmascape V3.0',
            'fr': 'Sigmastice v3.0',
            'ja': '次元の狭間オメガ：シグマ編3',
            'ko': '차원의 틈 오메가: 시그마편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    751: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 西格玛幻境4',
            'de': 'Sigmametrie 4.0',
            'en': 'Sigmascape V4.0',
            'fr': 'Sigmastice v4.0',
            'ja': '次元の狭間オメガ：シグマ編4',
            'ko': '차원의 틈 오메가: 시그마편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    752: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 西格玛幻境1',
            'de': 'Sigmametrie 1.0 (episch)',
            'en': 'Sigmascape V1.0 (Savage)',
            'fr': 'Sigmastice v1.0 (sadique)',
            'ja': '次元の狭間オメガ零式：シグマ編1',
            'ko': '차원의 틈 오메가: 시그마편(영웅) 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    753: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 西格玛幻境2',
            'de': 'Sigmametrie 2.0 (episch)',
            'en': 'Sigmascape V2.0 (Savage)',
            'fr': 'Sigmastice v2.0 (sadique)',
            'ja': '次元の狭間オメガ零式：シグマ編2',
            'ko': '차원의 틈 오메가: 시그마편(영웅) 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    754: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 西格玛幻境3',
            'de': 'Sigmametrie 3.0 (episch)',
            'en': 'Sigmascape V3.0 (Savage)',
            'fr': 'Sigmastice v3.0 (sadique)',
            'ja': '次元の狭間オメガ零式：シグマ編3',
            'ko': '차원의 틈 오메가: 시그마편(영웅) 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    755: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 西格玛幻境4',
            'de': 'Sigmametrie 4.0 (episch)',
            'en': 'Sigmascape V4.0 (Savage)',
            'fr': 'Sigmastice v4.0 (sadique)',
            'ja': '次元の狭間オメガ零式：シグマ編4',
            'ko': '차원의 틈 오메가: 시그마편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    758: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '白虎诗魂战',
            'de': 'Seelensturm - Byakko',
            'en': 'The Jade Stoa (Extreme)',
            'fr': 'La Clairière de Jade (extrême)',
            'ja': '極白虎征魂戦',
            'ko': '극 백호 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 93,
    },
    759: {
        'exVersion': 2,
        'name': {
            'cn': '多玛飞地',
            'de': 'Domanische Enklave',
            'en': 'The Doman Enclave',
            'fr': 'Quartier enclavé de Doma',
            'ja': 'ドマ町人地',
            'ko': '도마 도읍지',
        },
        'offsetX': 23,
        'offsetY': 34,
        'sizeFactor': 400,
        'weatherRate': 84,
    },
    761: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '火龙狩猎战',
            'de': 'Jagd auf Rathalos',
            'en': 'The Great Hunt',
            'fr': 'Chasse au Rathalos',
            'ja': 'リオレウス狩猟戦',
            'ko': '리오레우스 수렵전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    762: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '火龙上位狩猎战',
            'de': 'Jagd auf Rathalos (schwer)',
            'en': 'The Great Hunt (Extreme)',
            'fr': 'Chasse au Rathalos (extrême)',
            'ja': '極リオレウス狩猟戦',
            'ko': '극 리오레우스 수렵전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    763: {
        'contentType': 26,
        'exVersion': 2,
        'name': {
            'cn': '禁地优雷卡 恒冰之地',
            'de': 'Eureka Pagos',
            'en': 'The Forbidden Land, Eureka Pagos',
            'fr': 'Eurêka Pagos',
            'ja': '禁断の地 エウレカ：パゴス編',
            'ko': '금단의 땅 에우레카: 파고스편',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 94,
    },
    765: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '群狼盛宴 (段位赛)',
            'de': 'The Feast (gewertet)',
            'en': 'The Feast (Ranked)',
            'fr': 'The Feast (classé)',
            'ja': 'ザ・フィースト (ランクマッチ)',
            'ko': '더 피스트 (등급전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 90,
    },
    766: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '群狼盛宴 (练习赛)',
            'de': 'The Feast (Übungskampf)',
            'en': 'The Feast (Training)',
            'fr': 'The Feast (en<SoftHyphen/>traî<SoftHyphen/>ne<SoftHyphen/>ment)',
            'ja': 'ザ・フィースト (カジュアルマッチ)',
            'ko': '더 피스트 (일반전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 90,
    },
    767: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '群狼盛宴 (水晶塔演习场：自定赛)',
            'de': 'The Feast (Kristallturm-Arena: Schaukampf)',
            'en': 'The Feast (Custom Match - Crystal Tower)',
            'fr': 'The Feast (personnalisé/Tour de Cristal)',
            'ja': 'ザ・フィースト (クリスタルタワー演習場：カスタムマッチ）',
            'ko': '더 피스트 (크리스탈 타워 훈련장: 친선 경기)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 90,
    },
    768: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '风水灵庙岩燕庙',
            'de': 'Kompass der Schwalbe',
            'en': 'The Swallow\'s Compass',
            'fr': 'Le Compas de l\'Hirondelle',
            'ja': '風水霊殿 ガンエン廟',
            'ko': '강엔 종묘',
        },
        'offsetX': 240,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    769: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '拂晓的少年',
            'de': 'Der Knabe der Morgenröte',
            'en': 'Emissary of the Dawn',
            'fr': 'Voyage en terre hostile',
            'ja': '「暁」の少年',
            'ko': '\'새벽\'의 소년',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    770: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 1～10层',
            'de': 'Himmelssäule (Ebenen 1-10)',
            'en': 'Heaven-on-High  (Floors 1-10)',
            'fr': 'Le Pilier des Cieux (étages 1-10)',
            'ja': 'アメノミハシラ 1～10層',
            'ko': '천궁탑 1~10층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    771: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 11～20层',
            'de': 'Himmelssäule (Ebenen 11-20)',
            'en': 'Heaven-on-High  (Floors 11-20)',
            'fr': 'Le Pilier des Cieux (étages 11-20)',
            'ja': 'アメノミハシラ 11～20層',
            'ko': '천궁탑 11~20층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    772: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 21～30层',
            'de': 'Himmelssäule (Ebenen 21-30)',
            'en': 'Heaven-on-High  (Floors 21-30)',
            'fr': 'Le Pilier des Cieux (étages 21-30)',
            'ja': 'アメノミハシラ 21～30層',
            'ko': '천궁탑 21~30층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    773: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 41～50层',
            'de': 'Himmelssäule (Ebenen 41-50)',
            'en': 'Heaven-on-High  (Floors 41-50)',
            'fr': 'Le Pilier des Cieux (étages 41-50)',
            'ja': 'アメノミハシラ 41～50層',
            'ko': '천궁탑 41~50층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    774: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 61～70层',
            'de': 'Himmelssäule (Ebenen 61-70)',
            'en': 'Heaven-on-High  (Floors 61-70)',
            'fr': 'Le Pilier des Cieux (étages 61-70)',
            'ja': 'アメノミハシラ 61～70層',
            'ko': '천궁탑 61~70층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    775: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 81～90层',
            'de': 'Himmelssäule (Ebenen 81-90)',
            'en': 'Heaven-on-High  (Floors 81-90)',
            'fr': 'Le Pilier des Cieux (étages 81-90)',
            'ja': 'アメノミハシラ 81～90層',
            'ko': '천궁탑 81~90층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    776: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '封闭圣塔黎铎拉纳大灯塔',
            'de': 'Richtfeuer von Ridorana',
            'en': 'The Ridorana Lighthouse',
            'fr': 'Le Phare de Ridorana',
            'ja': '封じられた聖塔 リドルアナ',
            'ko': '대등대 리도르아나',
        },
        'offsetX': 202,
        'offsetY': -92,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    777: {
        'contentType': 28,
        'exVersion': 2,
        'name': {
            'cn': '究极神兵绝境战',
            'de': 'Heldenlied von Ultima (fatal)',
            'en': 'The Weapon\'s Refrain (Ultimate)',
            'fr': 'La Fantasmagorie d\'Ultima (fatal)',
            'ja': '絶アルテマウェポン破壊作戦',
            'ko': '절 알테마 웨폰 파괴작전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 26,
    },
    778: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '月读歼灭战',
            'de': 'Götterdämmerung - Tsukuyomi',
            'en': 'Castrum Fluminis',
            'fr': 'Castrum Fluminis',
            'ja': 'ツクヨミ討滅戦',
            'ko': '츠쿠요미 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    779: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '月读幽夜歼灭战',
            'de': 'Zenit der Götter - Tsukuyomi',
            'en': 'The Minstrel\'s Ballad: Tsukuyomi\'s Pain',
            'fr': 'Castrum Fluminis (extrême)',
            'ja': '極ツクヨミ討滅戦',
            'ko': '극 츠쿠요미 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    782: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 31～40层',
            'de': 'Himmelssäule (Ebenen 31-40)',
            'en': 'Heaven-on-High  (Floors 31-40)',
            'fr': 'Le Pilier des Cieux (étages 31-40)',
            'ja': 'アメノミハシラ 31～40層',
            'ko': '천궁탑 31~40층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    783: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 51～60层',
            'de': 'Himmelssäule (Ebenen 51-60)',
            'en': 'Heaven-on-High  (Floors 51-60)',
            'fr': 'Le Pilier des Cieux (étages 51-60)',
            'ja': 'アメノミハシラ 51～60層',
            'ko': '천궁탑 51~60층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    784: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 71～80层',
            'de': 'Himmelssäule (Ebenen 71-80)',
            'en': 'Heaven-on-High  (Floors 71-80)',
            'fr': 'Le Pilier des Cieux (étages 71-80)',
            'ja': 'アメノミハシラ 71～80層',
            'ko': '천궁탑 71~80층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    785: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 91～100层',
            'de': 'Himmelssäule (Ebenen 91-100)',
            'en': 'Heaven-on-High  (Floors 91-100)',
            'fr': 'Le Pilier des Cieux (étages 91-100)',
            'ja': 'アメノミハシラ 91～100層',
            'ko': '천궁탑 91~100층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    788: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '污染庭园圣茉夏娜植物园',
            'de': 'Sankt Mocianne-Arboretum (schwer)',
            'en': 'Saint Mocianne\'s Arboretum (Hard)',
            'fr': 'L\'Arboretum Sainte-Mocianne (brutal)',
            'ja': '草木汚染 聖モシャーヌ植物園 (Hard)',
            'ko': '성 모샨 식물원(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    789: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '死亡大地终末焦土',
            'de': 'Das Kargland',
            'en': 'The Burn',
            'fr': 'L\'Escarre',
            'ja': '永久焦土 ザ・バーン',
            'ko': '영구 초토지대',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 97,
    },
    790: {
        'contentType': 22,
        'exVersion': 0,
        'name': {
            'cn': '灾厄重现军事演习',
            'de': 'Gedenkschlacht der Eorzäischen Allianz',
            'en': 'The Calamity Retold',
            'fr': 'Les grandes manœuvres commémoratives',
            'ja': '新生祭軍事演習',
            'ko': '신생제 군사훈련',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 95,
    },
    791: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '隐塞 (机动战)',
            'de': 'Verborgene Schlucht',
            'en': 'Hidden Gorge',
            'fr': 'Gorge dérobée (machinerie)',
            'ja': 'ヒドゥンゴージ (機工戦)',
            'ko': '숨겨진 보루(기공전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    792: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '虚景跳跳乐大挑战',
            'de': 'Kaktor-Kletterwand',
            'en': 'Leap of Faith',
            'fr': 'Haute voltige',
            'ja': '挑戦！ ジャンピングアスレチック',
            'ko': '뛰어라! 점핑 운동회',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    793: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '国境战线基姆利特暗区',
            'de': 'Die Ghimlyt-Finsternis',
            'en': 'The Ghimlyt Dark',
            'fr': 'Les Ténèbres de Ghimlyt',
            'ja': '境界戦線 ギムリトダーク',
            'ko': '김리트 황야',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    794: {
        'contentType': 9,
        'exVersion': 2,
        'name': {
            'cn': '运河宝物库神殿',
            'de': 'Glücksaltäre von Uznair',
            'en': 'The Shifting Altars of Uznair',
            'fr': 'Le Temple sacré d\'Uznair',
            'ja': '宝物庫 ウズネアカナル祭殿',
            'ko': '보물고 우즈네어 운하 제전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    795: {
        'contentType': 26,
        'exVersion': 2,
        'name': {
            'cn': '禁地优雷卡 涌火之地',
            'de': 'Eureka Pyros',
            'en': 'The Forbidden Land, Eureka Pyros',
            'fr': 'Eurêka Pyros',
            'ja': '禁断の地 エウレカ：ピューロス編',
            'ko': '금단의 땅 에우레카: 피로스편',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 96,
    },
    796: {
        'contentType': 27,
        'exVersion': 0,
        'name': {
            'cn': '出道战',
            'de': 'Debüt in der Himmlischen Arena',
            'en': 'All\'s Well That Starts Well',
            'fr': 'Début du spectacle',
            'ja': 'デビューマッチ',
            'ko': '데뷔전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    797: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '楔石洞',
            'de': 'Der Wille der Mondgöttin',
            'en': 'The Will of the Moon',
            'fr': 'Ralliement dans la steppe',
            'ja': '楔石の虚',
            'ko': '쐐기돌 동굴',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    798: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 阿尔法幻境1',
            'de': 'Alphametrie 1.0',
            'en': 'Alphascape V1.0',
            'fr': 'Alphastice v1.0',
            'ja': '次元の狭間オメガ：アルファ編1',
            'ko': '차원의 틈 오메가: 알파편 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    799: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 阿尔法幻境2',
            'de': 'Alphametrie 2.0',
            'en': 'Alphascape V2.0',
            'fr': 'Alphastice v2.0',
            'ja': '次元の狭間オメガ：アルファ編2',
            'ko': '차원의 틈 오메가: 알파편 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    800: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 阿尔法幻境3',
            'de': 'Alphametrie 3.0',
            'en': 'Alphascape V3.0',
            'fr': 'Alphastice v3.0',
            'ja': '次元の狭間オメガ：アルファ編3',
            'ko': '차원의 틈 오메가: 알파편 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    801: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 阿尔法幻境4',
            'de': 'Alphametrie 4.0',
            'en': 'Alphascape V4.0',
            'fr': 'Alphastice v4.0',
            'ja': '次元の狭間オメガ：アルファ編4',
            'ko': '차원의 틈 오메가: 알파편 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    802: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 阿尔法幻境1',
            'de': 'Alphametrie 1.0 (episch)',
            'en': 'Alphascape V1.0 (Savage)',
            'fr': 'Alphastice v1.0 (sadique)',
            'ja': '次元の狭間オメガ零式：アルファ編1',
            'ko': '차원의 틈 오메가: 알파편(영웅) 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    803: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 阿尔法幻境2',
            'de': 'Alphametrie 2.0 (episch)',
            'en': 'Alphascape V2.0 (Savage)',
            'fr': 'Alphastice v2.0 (sadique)',
            'ja': '次元の狭間オメガ零式：アルファ編2',
            'ko': '차원의 틈 오메가: 알파편(영웅) 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    804: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 阿尔法幻境3',
            'de': 'Alphametrie 3.0 (episch)',
            'en': 'Alphascape V3.0 (Savage)',
            'fr': 'Alphastice v3.0 (sadique)',
            'ja': '次元の狭間オメガ零式：アルファ編3',
            'ko': '차원의 틈 오메가: 알파편(영웅) 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    805: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 阿尔法幻境4',
            'de': 'Alphametrie 4.0 (episch)',
            'en': 'Alphascape V4.0 (Savage)',
            'fr': 'Alphastice v4.0 (sadique)',
            'ja': '次元の狭間オメガ零式：アルファ編4',
            'ko': '차원의 틈 오메가: 알파편(영웅) 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    806: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '保镖歼灭战',
            'de': 'Duell auf der Kugane-Brücke',
            'en': 'Kugane Ohashi',
            'fr': 'Le Pont Ohashi',
            'ja': '真ヨウジンボウ討滅戦',
            'ko': '진 요우진보 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    810: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '朱雀镇魂战',
            'de': 'Seelentanz - Suzaku',
            'en': 'Hells\' Kier',
            'fr': 'Le Nid des Lamentations',
            'ja': '朱雀征魂戦',
            'ko': '주작 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 98,
    },
    811: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '朱雀诗魂战',
            'de': 'Seelensturm - Suzaku',
            'en': 'Hells\' Kier (Extreme)',
            'fr': 'Le Nid des Lamentations (extrême)',
            'ja': '極朱雀征魂戦',
            'ko': '극 주작 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 98,
    },
    813: {
        'exVersion': 3,
        'name': {
            'cn': '雷克兰德',
            'de': 'Seenland',
            'en': 'Lakeland',
            'fr': 'Grand-Lac',
            'ja': 'レイクランド',
            'ko': '레이크랜드',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 106,
    },
    814: {
        'exVersion': 3,
        'name': {
            'cn': '珂露西亚岛',
            'de': 'Kholusia',
            'en': 'Kholusia',
            'fr': 'Kholusia',
            'ja': 'コルシア島',
            'ko': '콜루시아 섬',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 107,
    },
    815: {
        'exVersion': 3,
        'name': {
            'cn': '安穆·艾兰',
            'de': 'Amh Araeng',
            'en': 'Amh Araeng',
            'fr': 'Amh Araeng',
            'ja': 'アム・アレーン',
            'ko': '아므 아랭',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 108,
    },
    816: {
        'exVersion': 3,
        'name': {
            'cn': '伊尔美格',
            'de': 'Il Mheg',
            'en': 'Il Mheg',
            'fr': 'Il Mheg',
            'ja': 'イル・メグ',
            'ko': '일 메그',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 109,
    },
    817: {
        'exVersion': 3,
        'name': {
            'cn': '拉凯提卡大森林',
            'de': 'Der Große Wald Rak\'tika',
            'en': 'The Rak\'tika Greatwood',
            'fr': 'Rak\'tika',
            'ja': 'ラケティカ大森林',
            'ko': '라케티카 대삼림',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 110,
    },
    818: {
        'exVersion': 3,
        'name': {
            'cn': '黑风海',
            'de': 'Tempest',
            'en': 'The Tempest',
            'fr': 'La Tempête',
            'ja': 'テンペスト',
            'ko': '템페스트',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 111,
    },
    819: {
        'exVersion': 3,
        'name': {
            'cn': '水晶都',
            'de': 'Crystarium',
            'en': 'The Crystarium',
            'fr': 'Cristarium',
            'ja': 'クリスタリウム',
            'ko': '크리스타리움',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 112,
    },
    820: {
        'exVersion': 3,
        'name': {
            'cn': '游末邦',
            'de': 'Eulmore',
            'en': 'Eulmore',
            'fr': 'Eulmore',
            'ja': 'ユールモア',
            'ko': '율모어',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 113,
    },
    821: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '水妖幻园多恩美格禁园',
            'de': 'Dohn Mheg',
            'en': 'Dohn Mheg',
            'fr': 'Dohn Mheg',
            'ja': '水妖幻園 ドォーヌ・メグ',
            'ko': '도느 메그',
        },
        'offsetX': 0,
        'offsetY': 200,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    822: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '伪造天界格鲁格火山',
            'de': 'Der Gulg',
            'en': 'Mt. Gulg',
            'fr': 'Mont Gulg',
            'ja': '偽造天界 グルグ火山',
            'ko': '굴그 화산',
        },
        'offsetX': -188,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 102,
    },
    823: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '文明古迹奇坦那神影洞',
            'de': 'Irrungen der Qitari',
            'en': 'The Qitana Ravel',
            'fr': 'L\'Enchevêtrement des Qitari',
            'ja': '古跡探索 キタンナ神影洞',
            'ko': '키타나 신굴',
        },
        'offsetX': 0,
        'offsetY': -274,
        'sizeFactor': 200,
        'weatherRate': 102,
    },
    824: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '青龙镇魂战',
            'de': 'Seelentanz - Seiryu',
            'en': 'The Wreath of Snakes',
            'fr': 'L\'Îlot des Amertumes',
            'ja': '青龍征魂戦',
            'ko': '청룡 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 99,
    },
    825: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '青龙诗魂战',
            'de': 'Seelensturm - Seiryu',
            'en': 'The Wreath of Snakes (Extreme)',
            'fr': 'L\'Îlot des Amertumes (extrême)',
            'ja': '極青龍征魂戦',
            'ko': '극 청룡 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 99,
    },
    826: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '乐欲之所瓯博讷修道院',
            'de': 'Kloster von Orbonne',
            'en': 'The Orbonne Monastery',
            'fr': 'Le Monastère d\'Orbonne',
            'ja': '楽欲の僧院 オーボンヌ',
            'ko': '오본느 수도원',
        },
        'offsetX': -545,
        'offsetY': -663,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    827: {
        'contentType': 26,
        'exVersion': 2,
        'name': {
            'cn': '禁地优雷卡 丰水之地',
            'de': 'Eureka Hydatos',
            'en': 'The Forbidden Land, Eureka Hydatos',
            'fr': 'Eurêka Hydatos',
            'ja': '禁断の地 エウレカ：ヒュダトス編',
            'ko': '금단의 땅 에우레카: 히다토스편',
        },
        'offsetX': 0,
        'offsetY': 475,
        'sizeFactor': 100,
        'weatherRate': 100,
    },
    830: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '英雄挽歌',
            'de': 'Requiem der Helden',
            'en': 'A Requiem for Heroes',
            'fr': 'Un requiem pour les héros',
            'ja': '英雄への鎮魂歌',
            'ko': '영웅을 위한 진혼가',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    831: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '多玛方城战：东风战4人亲友桌（不带食断）',
            'de': '4-Spieler-Mahjong (schnelle Partie, Kuitan deaktiviert)',
            'en': 'Four-player Mahjong (Quick Match, Kuitan Disabled)',
            'fr': 'Mahjong domien<Indent/>: 4 joueurs (partie rapide sans kuitan)',
            'ja': 'ドマ式麻雀：東風戦4人セット卓（クイタン無し）',
            'ko': '작패유희: 동풍전 4인용 탁자(부르기 단요구 없음)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    832: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '空军装甲驾驶员',
            'de': 'Luftwaffe, Feuer frei!',
            'en': 'Air Force One',
            'fr': 'As de l\'air',
            'ja': '出撃！ エアフォースパイロット',
            'ko': '출격! 에어포스 조종사',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    834: {
        'contentType': 7,
        'exVersion': 0,
        'name': {
            'cn': '风之使者',
            'de': 'Durch den Sturm und zurück',
            'en': 'Messenger of the Winds',
            'fr': 'La Messagère du vent',
            'ja': '来訪せし風の御使',
            'ko': '바람의 어사',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 101,
    },
    836: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '避暑离宫马利卡大井',
            'de': 'Malikahs Brunnen',
            'en': 'Malikah\'s Well',
            'fr': 'Le Puits de Malikah',
            'ja': '爽涼離宮 マリカの大井戸',
            'ko': '말리카 큰우물',
        },
        'offsetX': -65,
        'offsetY': -30,
        'sizeFactor': 200,
        'weatherRate': 102,
    },
    837: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '遇袭集落水滩村',
            'de': 'Holminster',
            'en': 'Holminster Switch',
            'fr': 'Holminster',
            'ja': '殺戮郷村 ホルミンスター',
            'ko': '홀민스터',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 102,
    },
    838: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '末日暗影亚马乌罗提',
            'de': 'Amaurot',
            'en': 'Amaurot',
            'fr': 'Amaurote',
            'ja': '終末幻想 アーモロート',
            'ko': '아모로트',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 105,
    },
    840: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '异界遗构希尔科斯孪晶塔',
            'de': 'Der Kristallzwilling',
            'en': 'The Twinning',
            'fr': 'La Macle de Syrcus',
            'ja': '異界遺構 シルクス・ツイニング',
            'ko': '쌍둥이 시르쿠스',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    841: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '创造机构阿尼德罗学院',
            'de': 'Akadaemia Anyder',
            'en': 'Akadaemia Anyder',
            'fr': 'Akadaemia Anydre',
            'ja': '創造機関 アナイダアカデミア',
            'ko': '애나이더 아카데미아',
        },
        'offsetX': 0,
        'offsetY': 30,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    845: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '缇坦妮雅歼灭战',
            'de': 'Offenbarung - Titania',
            'en': 'The Dancing Plague',
            'fr': 'La Valse du Monarque',
            'ja': 'ティターニア討滅戦',
            'ko': '티타니아 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 103,
    },
    846: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '无瑕灵君歼灭战',
            'de': 'Offenbarung - Innozenz',
            'en': 'The Crown of the Immaculate',
            'fr': 'La Couronne de l\'Immaculé',
            'ja': 'イノセンス討滅戦',
            'ko': '이노센스 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 104,
    },
    847: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '哈迪斯歼灭战',
            'de': 'Offenbarung - Hades',
            'en': 'The Dying Gasp',
            'fr': 'Le Râle de l\'Agonie',
            'ja': 'ハーデス討滅戦',
            'ko': '하데스 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 105,
    },
    848: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '无瑕灵君歼殛战',
            'de': 'Letzte Läuterung - Innozenz',
            'en': 'The Crown of the Immaculate (Extreme)',
            'fr': 'La Couronne de l\'Immaculé (extrême)',
            'ja': '極イノセンス討滅戦',
            'ko': '극 이노센스 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 104,
    },
    849: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 觉醒之章1',
            'de': 'Edens Erwachen - Auferstehung',
            'en': 'Eden\'s Gate: Resurrection',
            'fr': 'L\'Éveil d\'Éden - Résurrection',
            'ja': '希望の園エデン：覚醒編1',
            'ko': '희망의 낙원 에덴: 각성편 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    850: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 觉醒之章2',
            'de': 'Edens Erwachen - Niederkunft',
            'en': 'Eden\'s Gate: Descent',
            'fr': 'L\'Éveil d\'Éden - Descente',
            'ja': '希望の園エデン：覚醒編2',
            'ko': '희망의 낙원 에덴: 각성편 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    851: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 觉醒之章3',
            'de': 'Edens Erwachen - Überflutung',
            'en': 'Eden\'s Gate: Inundation',
            'fr': 'L\'Éveil d\'Éden - Déluge',
            'ja': '希望の園エデン：覚醒編3',
            'ko': '희망의 낙원 에덴: 각성편 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 38,
    },
    852: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 觉醒之章4',
            'de': 'Edens Erwachen - Beerdigung',
            'en': 'Eden\'s Gate: Sepulture',
            'fr': 'L\'Éveil d\'Éden - Inhumation',
            'ja': '希望の園エデン：覚醒編4',
            'ko': '희망의 낙원 에덴: 각성편 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    853: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 觉醒之章1',
            'de': 'Edens Erwachen - Auferstehung (episch)',
            'en': 'Eden\'s Gate: Resurrection (Savage)',
            'fr': 'L\'Éveil d\'Éden - Résurrection (sadique)',
            'ja': '希望の園エデン零式：覚醒編1',
            'ko': '희망의 낙원 에덴: 각성편(영웅) 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    854: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 觉醒之章2',
            'de': 'Edens Erwachen - Niederkunft (episch)',
            'en': 'Eden\'s Gate: Descent (Savage)',
            'fr': 'L\'Éveil d\'Éden - Descente (sadique)',
            'ja': '希望の園エデン零式：覚醒編2',
            'ko': '희망의 낙원 에덴: 각성편(영웅) 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    855: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 觉醒之章3',
            'de': 'Edens Erwachen - Überflutung (episch)',
            'en': 'Eden\'s Gate: Inundation (Savage)',
            'fr': 'L\'Éveil d\'Éden - Déluge (sadique)',
            'ja': '希望の園エデン零式：覚醒編3',
            'ko': '희망의 낙원 에덴: 각성편(영웅) 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 38,
    },
    856: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 觉醒之章4',
            'de': 'Edens Erwachen - Beerdigung (episch)',
            'en': 'Eden\'s Gate: Sepulture (Savage)',
            'fr': 'L\'Éveil d\'Éden - Inhumation (sadique)',
            'ja': '希望の園エデン零式：覚醒編4',
            'ko': '희망의 낙원 에덴: 각성편(영웅) 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    858: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '缇坦妮雅歼殛战',
            'de': 'Letzte Läuterung - Titania',
            'en': 'The Dancing Plague (Extreme)',
            'fr': 'La Valse du Monarque (extrême)',
            'ja': '極ティターニア討滅戦',
            'ko': '극 티타니아 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 103,
    },
    859: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '机关、诅咒、剧毒与……',
            'de': 'Der Beichtstuhl von Toupasa dem Älteren',
            'en': 'Legend of the Not-so-hidden Temple',
            'fr': 'Le Confessionnal de Toupasa l\'ancien',
            'ja': '仕掛けと呪いと毒と',
            'ko': '함정과 저주와 독',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 102,
    },
    860: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '废都拿巴示艾兰',
            'de': 'Vater und Bruder',
            'en': 'Coming Clean',
            'fr': 'Sur les rails de Nabaath Areng',
            'ja': '廃都ナバスアレン',
            'ko': '나바스아렝 폐허',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 102,
    },
    873: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '摇摆的天平',
            'de': 'Ob Mitleid oder Hass',
            'en': 'The Hardened Heart',
            'fr': 'Naissance d\'un bourreau',
            'ja': '揺れる天秤',
            'ko': '흔들리는 천칭',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    874: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '古代大再生魔法',
            'de': 'Alter Zauber',
            'en': 'The Lost and the Found',
            'fr': 'Magie ancestrale',
            'ja': '古の大再生魔法',
            'ko': '고대의 대재생 마법',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 110,
    },
    875: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '勇敢的猎人',
            'de': 'Der Legende auf der Spur',
            'en': 'The Hunter\'s Legacy',
            'fr': 'La chasseuse de légende',
            'ja': '勇気の狩人',
            'ko': '용기 있는 사냥꾼',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 63,
    },
    876: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '奈贝尔特的后悔',
            'de': 'Ein großes Opfer',
            'en': 'Nyelbert\'s Lament',
            'fr': 'Une cupidité bien généreuse',
            'ja': 'ナイルベルトの後悔',
            'ko': '나일베르트의 후회',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    879: {
        'contentType': 9,
        'exVersion': 3,
        'name': {
            'cn': '梦羽宝境',
            'de': 'Verliese von Lyhe Ghiah',
            'en': 'The Dungeons of Lyhe Ghiah',
            'fr': 'Le Donjon hypogéen du Lyhe Ghiah',
            'ja': '宝物庫 リェー・ギア・ダンジョン',
            'ko': '보물고 리예 기아 지하미궁',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    882: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '复制工厂废墟',
            'de': 'Die kopierte Fabrik',
            'en': 'The Copied Factory',
            'fr': 'La réplique de l\'usine désaffectée',
            'ja': '複製サレタ工場廃墟',
            'ko': '복제된 공장 폐허',
        },
        'offsetX': 610,
        'offsetY': 70,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    884: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '魔法宫殿宇宙宫',
            'de': 'Chateau Cosmea',
            'en': 'The Grand Cosmos',
            'fr': 'Le Cosmos coruscant',
            'ja': '魔法宮殿 グラン・コスモス',
            'ko': '그랑 코스모스',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    885: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '哈迪斯孤念歼灭战',
            'de': 'Letzte Läuterung - Hades',
            'en': 'The Minstrel\'s Ballad: Hades\'s Elegy',
            'fr': 'Le Râle de l\'Agonie (extrême)',
            'ja': '極ハーデス討滅戦',
            'ko': '극 하데스 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 105,
    },
    887: {
        'contentType': 28,
        'exVersion': 3,
        'name': {
            'cn': '亚历山大绝境战',
            'de': 'Alexander (fatal)',
            'en': 'The Epic of Alexander (Ultimate)',
            'fr': 'L\'Odyssée d\'Alexander (fatal)',
            'ja': '絶アレキサンダー討滅戦',
            'ko': '절 알렉산더 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    888: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '昂萨哈凯尔（竞争战）',
            'de': 'Onsal Hakair (Danshig Naadam)',
            'en': 'Onsal Hakair (Danshig Naadam)',
            'fr': 'Onsal Hakair (Danshig Naadam)',
            'ja': 'オンサル・ハカイル (終節戦)',
            'ko': '온살 하카이르(계절끝 합전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 117,
    },
    893: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '纯白誓约、漆黑密约',
            'de': 'Der Wolf und der Drachenreiter',
            'en': 'Vows of Virtue, Deeds of Cruelty',
            'fr': 'Vœux de vertu, actes de cruauté',
            'ja': '白き誓約、黒き密約',
            'ko': '하얀 서약, 검은 밀약',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    894: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '我心依旧',
            'de': 'Trubel im Traumland',
            'en': 'As the Heart Bids',
            'fr': 'À l\'écoute de soi',
            'ja': 'この心が望むがままに',
            'ko': '이 마음이 원하는 대로',
        },
        'offsetX': -12,
        'offsetY': 50,
        'sizeFactor': 400,
        'weatherRate': 40,
    },
    897: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '红宝石神兵破坏作战',
            'de': 'Rubinfeuer - Entfesselung',
            'en': 'Cinder Drift',
            'fr': 'Les Nuées de Brandons',
            'ja': 'ルビーウェポン破壊作戦',
            'ko': '루비 웨폰 파괴작전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 28,
    },
    898: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '黑风海底阿尼德罗追忆馆',
            'de': 'Anamnesis Anyder',
            'en': 'Anamnesis Anyder',
            'fr': 'Anamnesis Anydre',
            'ja': '黒風海底 アニドラス・アナムネーシス',
            'ko': '애니드라스 아남네시스',
        },
        'offsetX': 100,
        'offsetY': -390,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    900: {
        'contentType': 16,
        'exVersion': 0,
        'name': {
            'cn': '出海垂钓',
            'de': 'Auf großer Fahrt',
            'en': 'Ocean Fishing',
            'fr': 'Pêche en mer',
            'ja': 'オーシャンフィッシング',
            'ko': '먼바다 낚시',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 14,
    },
    902: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 共鸣之章1',
            'de': 'Edens Resonanz - Entladung',
            'en': 'Eden\'s Verse: Fulmination',
            'fr': 'Les Accords d\'Éden - Fulmination',
            'ja': '希望の園エデン：共鳴編1',
            'ko': '희망의 낙원 에덴: 공명편 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    903: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 共鸣之章2',
            'de': 'Edens Resonanz - Raserei',
            'en': 'Eden\'s Verse: Furor',
            'fr': 'Les Accords d\'Éden - Fureur',
            'ja': '希望の園エデン：共鳴編2',
            'ko': '희망의 낙원 에덴: 공명편 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    904: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 共鸣之章3',
            'de': 'Edens Resonanz - Bildersturm',
            'en': 'Eden\'s Verse: Iconoclasm',
            'fr': 'Les Accords d\'Éden - Iconoclasme',
            'ja': '希望の園エデン：共鳴編3',
            'ko': '희망의 낙원 에덴: 공명편 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    905: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 共鸣之章4',
            'de': 'Edens Resonanz - Erstarrung',
            'en': 'Eden\'s Verse: Refulgence',
            'fr': 'Les Accords d\'Éden - Éclat',
            'ja': '希望の園エデン：共鳴編4',
            'ko': '희망의 낙원 에덴: 공명편 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 46,
    },
    906: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 共鸣之章1',
            'de': 'Edens Resonanz - Entladung (episch)',
            'en': 'Eden\'s Verse: Fulmination (Savage)',
            'fr': 'Les Accords d\'Éden - Fulmination (sadique)',
            'ja': '希望の園エデン零式：共鳴編1',
            'ko': '희망의 낙원 에덴: 공명편(영웅) 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    907: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 共鸣之章2',
            'de': 'Edens Resonanz - Raserei (episch)',
            'en': 'Eden\'s Verse: Furor (Savage)',
            'fr': 'Les Accords d\'Éden - Fureur (sadique)',
            'ja': '希望の園エデン零式：共鳴編2',
            'ko': '희망의 낙원 에덴: 공명편(영웅) 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    908: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 共鸣之章3',
            'de': 'Edens Resonanz - Bildersturm (episch)',
            'en': 'Eden\'s Verse: Iconoclasm (Savage)',
            'fr': 'Les Accords d\'Éden - Iconoclasme (sadique)',
            'ja': '希望の園エデン零式：共鳴編3',
            'ko': '희망의 낙원 에덴: 공명편(영웅) 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    909: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 共鸣之章4',
            'de': 'Edens Resonanz - Erstarrung (episch)',
            'en': 'Eden\'s Verse: Refulgence (Savage)',
            'fr': 'Les Accords d\'Éden - Éclat (sadique)',
            'ja': '希望の園エデン零式：共鳴編4',
            'ko': '희망의 낙원 에덴: 공명편(영웅) 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 46,
    },
    911: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '博兹雅堡垒蒸发事件',
            'de': 'Der Bozja-Vorfall',
            'en': 'The Bozja Incident',
            'fr': 'Prélude à la catastrophe',
            'ja': 'シタデル・ボズヤ蒸発事変',
            'ko': '보즈야 사건',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 123,
    },
    912: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '红宝石神兵狂想作战',
            'de': 'Rubinfeuer - Trauma',
            'en': 'Cinder Drift (Extreme)',
            'fr': 'Les Nuées de Brandons (extrême)',
            'ja': '極ルビーウェポン破壊作戦',
            'ko': '극 루비 웨폰 파괴작전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 28,
    },
    913: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '博兹雅堡垒追忆战',
            'de': 'Memoria Misera (extrem)',
            'en': 'Memoria Misera (Extreme)',
            'fr': 'Memoria Misera (extrême)',
            'ja': '極シタデル・ボズヤ追憶戦',
            'ko': '극 보즈야 추억전',
        },
        'offsetX': -35,
        'offsetY': 683,
        'sizeFactor': 400,
        'weatherRate': 123,
    },
    914: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '英雄无法安息',
            'de': 'Von schlafenden Helden',
            'en': 'A Sleep Disturbed',
            'fr': 'L\'épreuve ronka',
            'ja': '汝、英雄の眠り妨げるは',
            'ko': '그대, 영웅의 잠을 방해하는가',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    916: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '暗影决战诺弗兰特',
            'de': 'Schlacht um Norvrandt',
            'en': 'The Heroes\' Gauntlet',
            'fr': 'La Traversée de Norvrandt',
            'ja': '漆黒決戦 ノルヴラント',
            'ko': '노르브란트',
        },
        'offsetX': 626,
        'offsetY': -611,
        'sizeFactor': 200,
        'weatherRate': 125,
    },
    917: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '人偶军事基地',
            'de': 'Die Puppenfestung',
            'en': 'The Puppets\' Bunker',
            'fr': 'La base militaire des Pantins',
            'ja': '人形タチノ軍事基地',
            'ko': '인형들의 군사 기지',
        },
        'offsetX': 290,
        'offsetY': -190,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    920: {
        'contentType': 29,
        'exVersion': 3,
        'name': {
            'cn': '南方博兹雅战线',
            'de': 'Bozja-Südfront',
            'en': 'The Bozjan Southern Front',
            'fr': 'Front sud de Bozja',
            'ja': '南方ボズヤ戦線',
            'ko': '남부 보즈야 전선',
        },
        'offsetX': -127,
        'offsetY': -424,
        'sizeFactor': 100,
        'weatherRate': 124,
    },
    922: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '光之战士歼灭战',
            'de': 'Krieger des Lichts',
            'en': 'The Seat of Sacrifice',
            'fr': 'Le Trône du Sacrifice',
            'ja': 'ウォーリア・オブ・ライト討滅戦',
            'ko': '빛의 전사 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 125,
    },
    923: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '光之战士幻耀歼灭战',
            'de': 'Krieger des Lichts (extrem)',
            'en': 'The Seat of Sacrifice (Extreme)',
            'fr': 'Le Trône du Sacrifice (extrême)',
            'ja': '極ウォーリア・オブ・ライト討滅戦',
            'ko': '극 빛의 전사 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 126,
    },
    924: {
        'contentType': 9,
        'exVersion': 3,
        'name': {
            'cn': '梦羽宝殿',
            'de': 'Das Karussell von Lyhe Ghiah',
            'en': 'The Shifting Oubliettes of Lyhe Ghiah',
            'fr': 'Le Jardin secret du Lyhe Ghiah',
            'ja': '宝物庫 リェー・ギア・ダンジョン祭殿',
            'ko': '보물고 리예 기아 지하미궁 제전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    925: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '飞翔吧，前往维尔利特！',
            'de': 'Luftangriff auf Werlyt',
            'en': 'Sleep Now in Sapphire',
            'fr': 'Sur la mer de saphir',
            'ja': '飛べ！ ウェルリトへ ',
            'ko': '날아라! 웰리트를 향하여',
        },
        'offsetX': 15,
        'offsetY': -610,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    929: {
        'contentType': 16,
        'exVersion': 1,
        'name': {
            'cn': '天上福地云冠群岛',
            'de': 'Das Diadem - Erschließung',
            'en': 'The Diadem',
            'fr': 'Le Diadème',
            'ja': '雲海採集 ディアデム諸島',
            'ko': '디아뎀 제도',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 68,
    },
    930: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '希瓦幻巧战',
            'de': 'Traumprüfung - Shiva',
            'en': 'The Akh Afah Amphitheatre (Unreal)',
            'fr': 'L\'Amphithéâtre d\'Akh Afah (irréel)',
            'ja': '幻シヴァ討滅戦',
            'ko': '환 시바 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 46,
    },
    932: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '褪色的记忆',
            'de': 'Verblasste Erinnerungen',
            'en': 'Faded Memories',
            'fr': 'Souvenir périssable',
            'ja': '色あせた記憶',
            'ko': '빛바랜 기억',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 114,
    },
    933: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '魔术工房玛托雅工作室',
            'de': 'Matoyas Atelier',
            'en': 'Matoya\'s Relict',
            'fr': 'L\'Atelier abandonné de Matoya',
            'ja': '魔術工房 マトーヤのアトリエ',
            'ko': '마토야의 공방',
        },
        'offsetX': 0,
        'offsetY': -75,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    934: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '绿宝石神兵破坏作战',
            'de': 'Smaragdsturm - Entfesselung',
            'en': 'Castrum Marinum',
            'fr': 'Castrum Marinum',
            'ja': 'エメラルドウェポン破壊作戦',
            'ko': '에메랄드 웨폰 파괴작전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    935: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '绿宝石神兵狂想作战',
            'de': 'Smaragdsturm - Trauma',
            'en': 'Castrum Marinum (Extreme)',
            'fr': 'Castrum Marinum (extrême)',
            'ja': '極エメラルドウェポン破壊作戦',
            'ko': '극 에메랄드 웨폰 파괴작전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    936: {
        'contentType': 29,
        'exVersion': 3,
        'name': {
            'cn': '女王古殿',
            'de': 'Delubrum Reginae',
            'en': 'Delubrum Reginae',
            'fr': 'Delubrum Reginae',
            'ja': 'グンヒルド・ディルーブラム',
        },
        'offsetX': 0,
        'offsetY': -378,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    937: {
        'contentType': 29,
        'exVersion': 3,
        'name': {
            'cn': '零式女王古殿',
            'de': 'Delubrum Reginae (episch)',
            'en': 'Delubrum Reginae (Savage)',
            'fr': 'Delubrum Reginae (sadique)',
            'ja': 'グンヒルド・ディルーブラム零式',
        },
        'offsetX': 0,
        'offsetY': -378,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    938: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'de': 'Die Goldene Ebene von Paglth\'an',
            'en': 'Paglth\'an',
            'fr': 'La grande prairie de Paglth\'an',
            'ja': '黄金平原 パガルザン',
        },
        'offsetX': 415,
        'offsetY': -110,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    940: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '九宫幻卡：官方锦标赛',
            'de': 'Triple Triad: Manderville-Turnier',
            'en': 'Triple Triad Open Tournament',
            'fr': 'Tournoi officiel de Triple Triade',
            'ja': 'トリプルトライアド：オフィシャルトーナメント',
            'ko': '트리플 트라이어드: 공식 토너먼트',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 800,
        'weatherRate': 0,
    },
    941: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '九宫幻卡：锦标赛对局室',
            'de': 'Triple Triad: Privatturnier',
            'en': 'Triple Triad Invitational Parlor',
            'fr': 'Salle de tournoi libre de Triple Triade',
            'ja': 'トリプルトライアド：カスタムトーナメントルーム',
            'ko': '트리플 트라이어드: 친선 토너먼트',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 800,
        'weatherRate': 0,
    },
    942: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 再生之章1',
            'de': 'Edens Verheißung - Umbra',
            'en': 'Eden\'s Promise: Umbra',
            'fr': 'La Promesse d\'Éden - Nuée',
            'ja': '希望の園エデン：再生編1',
            'ko': '희망의 낙원 에덴: 재생편 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    943: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 再生之章2',
            'de': 'Edens Verheißung - Litanei',
            'en': 'Eden\'s Promise: Litany',
            'fr': 'La Promesse d\'Éden - Litanie',
            'ja': '希望の園エデン：再生編2',
            'ko': '희망의 낙원 에덴: 재생편 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    944: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 再生之章3',
            'de': 'Edens Verheißung - Anamorphose',
            'en': 'Eden\'s Promise: Anamorphosis',
            'fr': 'La Promesse d\'Éden - Anamorphose',
            'ja': '希望の園エデン：再生編3',
            'ko': '희망의 낙원 에덴: 재생편 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    945: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 再生之章4',
            'de': 'Edens Verheißung - Ewigkeit',
            'en': 'Eden\'s Promise: Eternity',
            'fr': 'La Promesse d\'Éden - Éternité',
            'ja': '希望の園エデン：再生編4',
            'ko': '희망의 낙원 에덴: 재생편 4',
        },
        'offsetX': -71,
        'offsetY': 23,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    946: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 再生之章1',
            'de': 'Edens Verheißung - Umbra (episch)',
            'en': 'Eden\'s Promise: Umbra (Savage)',
            'fr': 'La Promesse d\'Éden - Nuée (sadique)',
            'ja': '希望の園エデン零式：再生編1',
            'ko': '희망의 낙원 에덴: 재생편(영웅) 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    947: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 再生之章2',
            'de': 'Edens Verheißung - Litanei (episch)',
            'en': 'Eden\'s Promise: Litany (Savage)',
            'fr': 'La Promesse d\'Éden - Litanie (sadique)',
            'ja': '希望の園エデン零式：再生編2',
            'ko': '희망의 낙원 에덴: 재생편(영웅) 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    948: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 再生之章3',
            'de': 'Edens Verheißung - Anamorphose (episch)',
            'en': 'Eden\'s Promise: Anamorphosis (Savage)',
            'fr': 'La Promesse d\'Éden - Anamorphose (sadique)',
            'ja': '希望の園エデン零式：再生編3',
            'ko': '희망의 낙원 에덴: 재생편(영웅) 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    949: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 再生之章4',
            'de': 'Edens Verheißung - Ewigkeit (episch)',
            'en': 'Eden\'s Promise: Eternity (Savage)',
            'fr': 'La Promesse d\'Éden - Éternité (sadique)',
            'ja': '希望の園エデン零式：再生編4',
            'ko': '희망의 낙원 에덴: 재생편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 75,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    950: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'de': 'Diamantblitz - Entfesselung',
            'en': 'The Cloud Deck',
            'fr': 'Le Tillac des Cirrus',
            'ja': 'ダイヤウェポン捕獲作戦',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    951: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'de': 'Diamantblitz - Trauma',
            'en': 'The Cloud Deck (Extreme)',
            'fr': 'Le Tillac des Cirrus (extrême)',
            'ja': '極ダイヤウェポン捕獲作戦',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    953: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '泰坦幻巧战',
            'de': 'Traumprüfung - Titan',
            'en': 'The Navel (Unreal)',
            'fr': 'Le Nombril (irréel)',
            'ja': '幻タイタン討滅戦',
            'ko': '환 타이탄 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    954: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '威尔布兰德扬帆起航',
            'de': 'Gute Winde für Vylbrand',
            'en': 'The Great Ship Vylbrand',
            'fr': 'Un navire nommé Vylbrand',
            'ja': 'バイルブランドの船出',
            'ko': '바일브랜드 출항',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    955: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '神佑女王',
            'de': 'Hinab in die Ruinen',
            'en': 'Fit for a Queen',
            'fr': 'Que les Dieux gardent la Reine',
            'ja': 'ゴッド・セイブ・ザ・クイーン',
        },
        'offsetX': 0,
        'offsetY': -750,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    966: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'de': 'Der Turm, Paradigmenbrecher',
            'en': 'The Tower at Paradigm\'s Breach',
            'fr': 'La tour de la Contingence',
            'ja': '希望ノ砲台：「塔」',
        },
        'offsetX': 808,
        'offsetY': -772,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    967: {
        'exVersion': 3,
        'name': {
            'cn': '帝国海上基地干船坞',
            'de': 'Trockendock von Castrum Marinum',
            'en': 'Castrum Marinum Drydocks',
            'fr': 'Cale sèche de Castrum Marinum',
            'ja': 'カステッルム・マリヌム・ドライドック',
            'ko': '카스트룸 마리눔 건선거',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    972: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'de': 'Traumprüfung - Leviathan',
            'en': 'The <Emphasis>Whorleater</Emphasis> (Unreal)',
            'fr': 'Le Briseur de marées (irréel)',
            'ja': '幻リヴァイアサン討滅戦',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 38,
    },
    975: {
        'contentType': 29,
        'exVersion': 3,
        'name': {
            'de': 'Zadnor-Hochebene',
            'en': 'Zadnor',
            'fr': 'Hauts plateaux de Zadnor',
            'ja': 'ザトゥノル高原',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 130,
    },
    977: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'de': 'Kampf im Morgengrauen',
            'en': 'Death Unto Dawn',
            'fr': 'Aube meurtrière',
            'ja': '黎明の死闘',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 114,
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);


/***/ }),

/***/ 477:
/***/ ((module) => {



/* eslint-env browser */

/* eslint-disable no-undef, no-use-before-define, new-cap */
module.exports = function (content, workerConstructor, workerOptions, url) {
  var globalScope = self || window;

  try {
    try {
      var blob;

      try {
        // New API
        blob = new globalScope.Blob([content]);
      } catch (e) {
        // BlobBuilder = Deprecated, but widely implemented
        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;
        blob = new BlobBuilder();
        blob.append(content);
        blob = blob.getBlob();
      }

      var URL = globalScope.URL || globalScope.webkitURL;
      var objectURL = URL.createObjectURL(blob);
      var worker = new globalScope[workerConstructor](objectURL, workerOptions);
      URL.revokeObjectURL(objectURL);
      return worker;
    } catch (e) {
      return new globalScope[workerConstructor]("data:application/javascript,".concat(encodeURIComponent(content)), workerOptions);
    }
  } catch (e) {
    if (!url) {
      throw Error("Inline worker is not supported");
    }

    return new globalScope[workerConstructor](url, workerOptions);
  }
};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					result = fn();
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl + "../../";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			247: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) var result = runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkcactbot"] = self["webpackChunkcactbot"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, [890], () => (__webpack_require__(63)))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL3BhcnR5LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9yYWlkYm9zc19vcHRpb25zLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9yYWlkYm9zc19jb25maWcuanMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2VtdWxhdG9yL3VpL0VtdWxhdGVkTWFwLmpzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvdHJhbnNsYXRpb25zLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9FbXVsYXRvckNvbW1vbi50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvZW11bGF0b3IvRXZlbnRCdXMudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2VtdWxhdG9yL3VpL1Rvb2x0aXAudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2VtdWxhdG9yL3VpL0VtdWxhdGVkUGFydHlJbmZvLmpzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL0NvbWJhdGFudC50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9Db21iYXRhbnRKb2JTZWFyY2gudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvQ29tYmF0YW50U3RhdGUudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy9wZXRfbmFtZXMudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvbmV0d29ya19sb2dfY29udmVydGVyL0xpbmVFdmVudC50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9Db21iYXRhbnRUcmFja2VyLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9Mb2dSZXBvc2l0b3J5LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDAwLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDAxLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDAyLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDAzLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDA0LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDBDLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDE0LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDE1LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDE2LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDE3LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDE4LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDE5LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDFBLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDFCLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDFDLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDFELnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDFFLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDFGLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDIyLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDIzLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDI0LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDI1LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDI2LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDI3LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9QYXJzZUxpbmUudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvTmV0d29ya0xvZ0NvbnZlcnRlci50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL2xhbmd1YWdlcy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9FbmNvdW50ZXIudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2VtdWxhdG9yL3VpL0VuY291bnRlclRhYi5qcyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9Mb2dFdmVudEhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvUGVyc2lzdG9yRW5jb3VudGVyLmpzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL1BlcnNpc3Rvci5qcyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvYXV0b3BsYXlfaGVscGVyLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9icm93c2VyX3R0c19lbmdpbmUudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy9wbGF5ZXJfb3ZlcnJpZGUudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL3BvcHVwLXRleHQudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2VtdWxhdG9yL3VpL1Byb2dyZXNzQmFyLmpzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9jb21tb25fcmVwbGFjZW1lbnQudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL3RpbWVsaW5lLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9vdmVycmlkZXMvUmFpZEVtdWxhdG9yVGltZWxpbmUudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2VtdWxhdG9yL292ZXJyaWRlcy9SYWlkRW11bGF0b3JUaW1lbGluZUNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2VtdWxhdG9yL292ZXJyaWRlcy9TdHViYmVkUG9wdXBUZXh0LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL1BvcHVwVGV4dEFuYWx5c2lzLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9lbXVsYXRvci9vdmVycmlkZXMvUmFpZEVtdWxhdG9yVGltZWxpbmVVSS50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvZW11bGF0b3Ivb3ZlcnJpZGVzL1JhaWRFbXVsYXRvckFuYWx5c2lzVGltZWxpbmVVSS50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9BbmFseXplZEVuY291bnRlci5qcyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9SYWlkRW11bGF0b3IuanMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2VtdWxhdG9yL292ZXJyaWRlcy9SYWlkRW11bGF0b3JPdmVybGF5QXBpSG9vay5qcyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvZW11bGF0b3Ivb3ZlcnJpZGVzL1JhaWRFbXVsYXRvclBvcHVwVGV4dC5qcyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9OZXR3b3JrTG9nQ29udmVydGVyV29ya2VyLmpzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9yYWlkZW11bGF0b3IuanMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy9jb25kaXRpb25zLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvY29udGVudF90eXBlLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvbmV0cmVnZXhlcy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL25vdF9yZWFjaGVkLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvb3V0cHV0cy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL292ZXJsYXlfcGx1Z2luX2FwaS50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL3JlZ2V4ZXMudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy9yZXNwb25zZXMudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy91c2VyX2NvbmZpZy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL3V0aWwudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy96b25lX2lkLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvem9uZV9pbmZvLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5saW5lLmpzIiwid2VicGFjazovL2NhY3Rib3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2FjdGJvdC93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL2NhY3Rib3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2NhY3Rib3Qvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9jYWN0Ym90L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2FjdGJvdC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9jYWN0Ym90L3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL2NhY3Rib3Qvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbImtPcHRpb25LZXlzIiwib3V0cHV0IiwiZHVyYXRpb24iLCJiZWZvcmVTZWNvbmRzIiwib3V0cHV0U3RyaW5ncyIsImtUcmlnZ2VyT3B0aW9ucyIsImRlZmF1bHQiLCJsYWJlbCIsImVuIiwiZGUiLCJmciIsImphIiwiY24iLCJrbyIsInRleHRBbmRTb3VuZCIsInR0c0FuZFRleHQiLCJ0dHNPbmx5IiwidGV4dE9ubHkiLCJkaXNhYmxlZCIsImtEZXRhaWxLZXlzIiwiY2xzIiwiZGVidWdPbmx5IiwiZ2VuZXJhdGVkTWFudWFsbHkiLCJrTWlzY1RyYW5zbGF0aW9ucyIsInZhbHVlRGVmYXVsdCIsInZhbHVlSXNGdW5jdGlvbiIsIndhcm5pbmciLCJtaXNzaW5nSWQiLCJvdmVycmlkZGVuQnlGaWxlIiwidmlld1RyaWdnZXJTb3VyY2UiLCJ2YWxpZER1cmF0aW9uT3JVbmRlZmluZWQiLCJ2YWwiLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJ1bmRlZmluZWQiLCJjYW5CZUNvbmZpZ3VyZWQiLCJ0cmlnIiwiaXNNaXNzaW5nSWQiLCJhZGRUcmlnZ2VyRGV0YWlsIiwiY29udGFpbmVyIiwibGFiZWxUZXh0IiwiZGV0YWlsVGV4dCIsImRldGFpbENscyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVyVGV4dCIsImNsYXNzTGlzdCIsImFkZCIsImFwcGVuZENoaWxkIiwiZGV0YWlsIiwic2V0T3B0aW9uc0Zyb21PdXRwdXRWYWx1ZSIsIm9wdGlvbnMiLCJ2YWx1ZSIsIlRleHRBbGVydHNFbmFibGVkIiwiU291bmRBbGVydHNFbmFibGVkIiwiU3Bva2VuQWxlcnRzRW5hYmxlZCIsImNvbnNvbGUiLCJlcnJvciIsIkRvTm90aGluZ0Z1bmNQcm94eSIsImNvbnN0cnVjdG9yIiwib3V0cHV0U3RyaW5nc0NhbGxiYWNrIiwiUHJveHkiLCJzZXQiLCJ0YXJnZXQiLCJwcm9wZXJ0eSIsImdldCIsIm5hbWUiLCJSYWlkYm9zc0NvbmZpZ3VyYXRvciIsImNhY3Rib3RDb25maWd1cmF0b3IiLCJiYXNlIiwiYWxlcnRzTGFuZyIsImdldE9wdGlvbiIsImxhbmciLCJ0aW1lbGluZUxhbmciLCJidWlsZFVJIiwicmFpZGJvc3NGaWxlcyIsInVzZXJPcHRpb25zIiwiZmlsZU1hcCIsInByb2Nlc3NSYWlkYm9zc0ZpbGVzIiwiZXhwYW5zaW9uRGl2cyIsImtleSIsImluZm8iLCJleHBhbnNpb24iLCJzZWN0aW9uIiwiT2JqZWN0Iiwia2V5cyIsInRyaWdnZXJzIiwibGVuZ3RoIiwiZXhwYW5zaW9uQ29udGFpbmVyIiwiZXhwYW5zaW9uSGVhZGVyIiwib25jbGljayIsInRvZ2dsZSIsInRyaWdnZXJDb250YWluZXIiLCJoZWFkZXJEaXYiLCJwYXJ0cyIsInRpdGxlIiwidHlwZSIsInByZWZpeCIsImkiLCJwYXJ0RGl2IiwidHJpZ2dlck9wdGlvbnMiLCJpZCIsImhhc091dHB1dEZ1bmMiLCJmdW5jIiwidHJpZ2dlck91dHB1dEZ1bmN0aW9ucyIsImRldmVsb3Blck9wdGlvbnMiLCJ0cmlnZ2VyRGl2IiwiaW5uZXJIVE1MIiwidHJpZ2dlckRldGFpbHMiLCJidWlsZFRyaWdnZXJPcHRpb25zIiwidHJhbnNsYXRlIiwiYmFzZVRleHQiLCJyZXBsYWNlIiwiZGV0YWlsS2V5IiwicHVzaCIsImlzVGltZWxpbmVUcmlnZ2VyIiwib3B0aW9uS2V5IiwiZGl2IiwiaW5wdXQiLCJzdGVwIiwiZGVmYXVsdFZhbHVlIiwicGxhY2Vob2xkZXIiLCJzZXRGdW5jIiwic2V0T3B0aW9uIiwib25jaGFuZ2UiLCJvbmlucHV0IiwidGVtcGxhdGUiLCJiYXNlVXJsIiwicGF0aCIsInNwbGl0IiwidXJsRmlsZXBhdGgiLCJzbGljZSIsImpvaW4iLCJlc2NhcGVkVHJpZ2dlcklkIiwidXJpQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidXJsU3RyaW5nIiwidmFsdWVPckZ1bmN0aW9uIiwiZiIsImRhdGEiLCJtYXRjaGVzIiwicmVzdWx0IiwicHJvY2Vzc1RyaWdnZXIiLCJhc3NpZ24iLCJrQmFzZUZha2VEYXRhIiwicGFydHkiLCJQYXJ0eVRyYWNrZXIiLCJjdXJyZW50SFAiLCJjb25maWdPcHRpb25zIiwiU2hvcnROYW1lIiwieCIsIlN0b3BDb21iYXQiLCJQYXJzZUxvY2FsZUZsb2F0IiwiQ2FuU3R1biIsIlV0aWwiLCJqb2IiLCJDYW5TaWxlbmNlIiwiQ2FuU2xlZXAiLCJDYW5DbGVhbnNlIiwiQ2FuRmVpbnQiLCJDYW5BZGRsZSIsImtGYWtlRGF0YSIsIm1lIiwicm9sZSIsImtGYWtlTWF0Y2hlcyIsInNvdXJjZUlkIiwic291cmNlIiwiYWJpbGl0eSIsInRhcmdldElkIiwiZmxhZ3MiLCJ5IiwieiIsImhlYWRpbmciLCJucGNJZCIsImVmZmVjdCIsImNvZGUiLCJsaW5lIiwiY2FwdHVyZSIsImV2YWxUcmlnZ2VyIiwiaWR4IiwiaW5jbHVkZXMiLCJlIiwicmVzcG9uc2UiLCJyIiwiZCIsImdldFJlZ2V4IiwiYmFzZUZpZWxkIiwic2hvcnRMYW5ndWFnZSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwibGFuZ1NwZWNpZmljUmVnZXgiLCJiYXNlUmVnZXgiLCJSZWdleGVzIiwidGltZWxpbmVSZWdleCIsInRyaWdnZXJSZWdleCIsInRyaWdnZXJOZXRSZWdleCIsImZpbGVzIiwibWFwIiwicHJvY2Vzc0ZpbGVzIiwiVHJpZ2dlcnMiLCJ0cmlnZ2VySWR4IiwicHJldmlvdXNUcmlnZ2VyV2l0aElkIiwiaXRlbSIsInZhbHVlcyIsInJhd1RyaWdnZXJzIiwidHJpZ2dlciIsInRpbWVsaW5lIiwidHJpZ2dlclNldCIsInRpbWVsaW5lVHJpZ2dlcnMiLCJwcmV2aW91cyIsImZpbGVuYW1lIiwibGFiZWxEaXYiLCJ1cGRhdGVMYWJlbCIsInJlbW92ZSIsInNlbGVjdFZhbHVlIiwiZWxlbSIsInNlbGVjdGVkIiwidXNlckZpbGVIYW5kbGVyIiwiYmFzZVBhdGgiLCJpc1VzZXJUcmlnZ2VyU2V0IiwidGltZWxpbmVGaWxlIiwibGFzdEluZGV4IiwiTWF0aCIsIm1heCIsImxhc3RJbmRleE9mIiwiZGlyIiwic3Vic3RyaW5nIiwibG9nIiwidGVtcGxhdGVPcHRpb25zIiwiYnVpbGRFeHRyYVVJIiwiYnVpbGRlciIsInJhaWRib3NzT3B0aW9ucyIsIlVzZXJDb25maWciLCJyYWlkYm9zc0ZpbGVEYXRhIiwicHJvY2Vzc0V4dHJhT3B0aW9ucyIsInNhdmVkQ29uZmlnIiwib3B0aW9uTmFtZSIsInBlclRyaWdnZXIiLCJvdXRwdXRPYmpzIiwiYXV0b0NvbmZpZyIsInNldHRlckZ1bmMiLCJkZWJ1ZyIsIkVtdWxhdGVkTWFwIiwiZW11bGF0b3IiLCJFbXVsYXRlZFBhcnR5SW5mbyIsIkV2ZW50QnVzIiwidG9vbHRpcHMiLCIkcGFydHlJbmZvIiwicXVlcnlTZWxlY3RvciIsIiR0cmlnZ2VySW5mbyIsIiR0cmlnZ2VySGlkZVNraXBwZWRDaGVja2JveCIsIiR0cmlnZ2VySGlkZUNvbGxlY3RDaGVja2JveCIsIiR0cmlnZ2VyQmFyIiwidHJpZ2dlckJhcnMiLCJsYXRlc3REaXNwbGF5ZWRTdGF0ZSIsImRpc3BsYXllZFBhcnR5IiwiY3VycmVudFBlcnNwZWN0aXZlIiwib24iLCJjdXJyZW50TG9nVGltZSIsImxhc3RMb2dMaW5lVGltZSIsInVwZGF0ZVBhcnR5SW5mbyIsImVuY291bnRlciIsInJlc2V0UGFydHlJbmZvIiwidGltZSIsInVwZGF0ZVRyaWdnZXJTdGF0ZSIsImNoZWNrZWQiLCJoaWRlTm9uRXhlY3V0ZWRUcmlnZ2VycyIsInNob3dOb25FeGVjdXRlZFRyaWdnZXJzIiwiaGlkZUNvbGxlY3RvclRyaWdnZXJzIiwic2hvd0NvbGxlY3RvclRyaWdnZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIiR0cmlnZ2VySXRlbVRlbXBsYXRlIiwiY29udGVudCIsImZpcnN0RWxlbWVudENoaWxkIiwiJHBsYXllckluZm9Sb3dUZW1wbGF0ZSIsIiRwbGF5ZXJUcmlnZ2VySW5mb1RlbXBsYXRlIiwiJGpzb25WaWV3ZXJUZW1wbGF0ZSIsIiR0cmlnZ2VyTGFiZWxUZW1wbGF0ZSIsIiR3cmFwQ29sbGFwc2VUZW1wbGF0ZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwibiIsInRpbWVzdGFtcCIsInVwZGF0ZUNvbWJhdGFudEluZm8iLCJjdXJyZW50RW5jb3VudGVyIiwidHQiLCJ0b29sdGlwIiwibWVtYmVyc1RvRGlzcGxheSIsImNvbWJhdGFudFRyYWNrZXIiLCJwYXJ0eU1lbWJlcnMiLCJzb3J0IiwibCIsImEiLCJjb21iYXRhbnRzIiwiYiIsImpvYk9yZGVyIiwiaW5kZXhPZiIsIm9iaiIsImdldFBhcnR5SW5mb09iamVjdEZvciIsImFwcGVuZCIsIiRyb290RWxlbSIsIiR0cmlnZ2VyRWxlbSIsInRyaWdnZXJJbmRleCIsInBlcnNwZWN0aXZlcyIsInN0YXR1cyIsImV4ZWN1dGVkIiwicmVzb2x2ZWRPZmZzZXQiLCIkZSIsImNsb25lTm9kZSIsInN0eWxlIiwibGVmdCIsIlRvb2x0aXAiLCJ0cmlnZ2VySGVscGVyIiwic2VsZWN0UGVyc3BlY3RpdmUiLCJkaXNwYXRjaCIsInN0YXRlSUQiLCJjb21iYXRhbnQiLCJnZXRTdGF0ZSIsIlN0YXRlIiwiaHBQcm9nIiwiaHAiLCJtYXhIcCIsImhwTGFiZWwiLCJFbXVsYXRvckNvbW1vbiIsInRvU3RyaW5nIiwiJGhwUHJvZ0VsZW0iLCJhcmlhVmFsdWVOb3ciLCJhcmlhVmFsdWVNYXgiLCJ3aWR0aCIsIiRocExhYmVsRWxlbSIsInRleHRDb250ZW50IiwibXBQcm9nIiwibXAiLCJtYXhNcCIsIm1wTGFiZWwiLCIkbXBQcm9nRWxlbSIsIiRtcExhYmVsRWxlbSIsIiRocCIsIiRtcCIsIiRuYW1lIiwicmV0IiwiJGljb25FbGVtIiwiJGhwRWxlbSIsIiRtcEVsZW0iLCIkbmFtZUVsZW0iLCJnZXRUcmlnZ2VySW5mb09iamVjdEZvciIsInNldEF0dHJpYnV0ZSIsIiRyZXQiLCIkY29udGFpbmVyIiwicGVyIiwiJGluaXREYXRhVmlld2VyIiwiSlNPTiIsInN0cmluZ2lmeSIsImluaXRpYWxEYXRhIiwiX3dyYXBDb2xsYXBzZSIsImNsYXNzZXMiLCIkb2JqIiwiJHRyaWdnZXJDb250YWluZXIiLCIkdHJpZ2dlckRhdGFWaWV3ZXIiLCJ0cmlnZ2VyVGV4dCIsImdldFRyaWdnZXJMYWJlbFRleHQiLCIkdHJpZ2dlciIsImdldFRyaWdnZXJSZXNvbHZlZExhYmVsVGltZSIsImljb24iLCJnZXRUcmlnZ2VyTGFiZWxJY29uIiwidGV4dCIsInJlc3BvbnNlVHlwZSIsIiRmaW5hbERhdGFWaWV3ZXIiLCJmaW5hbERhdGEiLCJpbml0aWFsT2Zmc2V0IiwicmVzcG9uc2VMYWJlbCIsImdldFRyaWdnZXJGaXJlZExhYmVsVGltZSIsIlRyaWdnZXIiLCJsb2dMaW5lIiwib2Zmc2V0IiwicGFyYW1zIiwiJGJ1dHRvbiIsIiR0aW1lIiwiJGljb24iLCIkdGV4dCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIkFycmF5IiwiaXNBcnJheSIsImMiLCIkd3JhcHBlciIsImNvbnRhaW5zIiwiRW5jb3VudGVyVGFiIiwicGVyc2lzdG9yIiwiJHpvbmVDb2x1bW4iLCIkZGF0ZUNvbHVtbiIsIiRlbmNvdW50ZXJDb2x1bW4iLCIkaW5mb0NvbHVtbiIsIiRlbmNvdW50ZXJUYWJSb3dUZW1wbGF0ZSIsIiRlbmNvdW50ZXJUYWJFbmNvdW50ZXJSb3dUZW1wbGF0ZSIsIiRlbmNvdW50ZXJJbmZvVGVtcGxhdGUiLCJyZWZyZXNoIiwiZW5jb3VudGVycyIsImxpc3RFbmNvdW50ZXJzIiwidGhlbiIsImVuYyIsInpvbmUiLCJ6b25lTmFtZSIsImVuY0RhdGUiLCJzdGFydCIsImVuY1RpbWUiLCJlbmNEdXJhdGlvbiIsInJlZnJlc2hVSSIsInJlZnJlc2hab25lcyIsInJlZnJlc2hEYXRlcyIsInJlZnJlc2hFbmNvdW50ZXJzIiwicmVmcmVzaEluZm8iLCJjbGVhciIsInpvbmVzIiwiU2V0IiwiJHJvdyIsImN1cnJlbnRab25lIiwiZXYiLCJ0IiwiY3VycmVudFRhcmdldCIsInBhcmVudEVsZW1lbnQiLCJkYXRlcyIsImRhdGUiLCJjdXJyZW50RGF0ZSIsInNvcnRlZEVuY291bnRlcnMiLCJsb2NhbGVDb21wYXJlIiwiZ2V0QXR0cmlidXRlIiwicHVsbEF0IiwiJGluZm8iLCJzdGFydFN0YXR1cyIsImVuZFN0YXR1cyIsIlBlcnNpc3RvckVuY291bnRlciIsImdldE1haW5Db21iYXRhbnROYW1lIiwic3RhcnRUaW1lc3RhbXAiLCJ6b25lSWQiLCJlbmNvdW50ZXJab25lSWQiLCJlbmNvdW50ZXJab25lTmFtZSIsImVuZFRpbWVzdGFtcCIsIlBlcnNpc3RvciIsIkRCIiwiaW5pdGlhbGl6ZURCIiwicmVxdWVzdCIsIndpbmRvdyIsImluZGV4ZWREQiIsIm9wZW4iLCJkYlZlcnNpb24iLCJwcm9taXNlcyIsImVuY291bnRlcnNTdG9yYWdlIiwiZW5jb3VudGVyU3VtbWFyaWVzU3RvcmFnZSIsIm9sZFZlcnNpb24iLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJhdXRvSW5jcmVtZW50IiwiY3JlYXRlSW5kZXgiLCJQcm9taXNlIiwicmVzIiwidHJhbnNhY3Rpb24iLCJ0ZXYiLCJjb21wbGV0ZWQiLCJwZXJzaXN0RW5jb3VudGVyIiwiYmFzZUVuY291bnRlciIsInJlc29sdmVyIiwicmVxIiwicHV0Iiwic3VtbWFyeSIsInJlcTIiLCJsb2FkRW5jb3VudGVyIiwiRW5jb3VudGVyIiwiZW5jb3VudGVyRGF5IiwibG9nTGluZXMiLCJ1cGdyYWRlIiwidmVyc2lvbiIsImluaXRpYWxpemUiLCJkZWxldGVFbmNvdW50ZXIiLCJkZWxldGUiLCJrZXlSYW5nZSIsImluZGV4IiwiSURCS2V5UmFuZ2UiLCJib3VuZCIsImxvd2VyQm91bmQiLCJvbmx5IiwiZ2V0QWxsIiwiY2xlYXJEQiIsInAxUmVzIiwicDEiLCJwMlJlcyIsInAyIiwiZXhwb3J0REIiLCJzdW1tYXJpZXMiLCJTdGFydCIsIlpvbmVOYW1lIiwiWm9uZUlkIiwiZW5jb3VudGVyTGluZXMiLCJpbXBvcnREQiIsIm9iamVjdFN0b3JlIiwiUHJvZ3Jlc3NCYXIiLCIkcHJvZ3Jlc3NCYXJUb29sdGlwIiwiJHByb2dyZXNzQmFyQ3VycmVudCIsIiRwcm9ncmVzc0JhckR1cmF0aW9uIiwiJHByb2dyZXNzIiwiJHByb2dyZXNzQmFyIiwiJGVuZ2FnZUluZGljYXRvciIsInBlcmNlbnQiLCJvZmZzZXRYIiwib2Zmc2V0V2lkdGgiLCJmbG9vciIsInNldFRleHQiLCJzaG93Iiwic2VlayIsImluaXRpYWxQZXJjZW50IiwiY3VycmVudE9mZnNldCIsInByb2dQZXJjZW50IiwicHJvZ1ZhbHVlIiwiaW5pdGlhbFRpbWVzdGFtcCIsIiRwbGF5IiwiJHBhdXNlIiwicGxheSIsInBhdXNlIiwiQW5hbHl6ZWRFbmNvdW50ZXIiLCJwb3B1cFRleHQiLCJJRCIsInBhcnR5TWVtYmVyIiwicGFydHlUcmFja2VyIiwib25QYXJ0eUNoYW5nZWQiLCJpblBhcnR5IiwiT25QbGF5ZXJDaGFuZ2UiLCJIUCIsIk9uQ2hhbmdlWm9uZSIsInpvbmVJRCIsInBhcnNlSW50IiwiYW5hbHl6ZSIsImFuYWx5emVGb3IiLCJjdXJyZW50TG9nSW5kZXgiLCJ0aW1lbGluZVVJIiwiUmFpZEVtdWxhdG9yQW5hbHlzaXNUaW1lbGluZVVJIiwidGltZWxpbmVDb250cm9sbGVyIiwiUmFpZEVtdWxhdG9yVGltZWxpbmVDb250cm9sbGVyIiwiYmluZFRvIiwiUG9wdXBUZXh0QW5hbHlzaXMiLCJUaW1lbGluZUxvYWRlciIsIlNldFBvcHVwVGV4dEludGVyZmFjZSIsIlBvcHVwVGV4dEdlbmVyYXRvciIsImFjdGl2ZVRpbWVsaW5lIiwiU2V0VHJpZ2dlciIsImRlbGF5UHJvbWlzZSIsImRlbGF5UmVzb2x2ZXIiLCJwcm9taXNlUHJvbWlzZSIsInByb21pc2VSZXNvbHZlciIsInJ1blByb21pc2UiLCJydW5SZXNvbHZlciIsImN1cnJlbnRMaW5lIiwiT25UcmlnZ2VyIiwiY2FsbGJhY2siLCJjdXJyZW50VHJpZ2dlclN0YXR1cyIsImRlbGF5IiwidHJpZ2dlclJlc29sdmVycyIsImhhc1N0YXRlIiwiZXZlbnQiLCJsb2dzIiwiT25Mb2ciLCJPbk5ldExvZyIsIk9uTG9nRXZlbnQiLCJzdG9wIiwiUmFpZEVtdWxhdG9yIiwicGxheWluZ0ludGVydmFsIiwiY3VycmVudExvZ0xpbmVJbmRleCIsImxhc3RUaWNrVGltZSIsImFkZEVuY291bnRlciIsInNldEN1cnJlbnQiLCJsYW5ndWFnZSIsIlBhcnNlckxhbmd1YWdlIiwic2V0Q3VycmVudEJ5SUQiLCJmaW5kSW5kZXgiLCJ2Iiwic2Vla1RvIiwiZmlyc3RJbmRleCIsImZpcnN0TGluZUluZGV4IiwiRGF0ZSIsIm5vdyIsInNldEludGVydmFsIiwidGljayIsImJpbmQiLCJwbGF5YmFja1NwZWVkIiwiY2xlYXJJbnRlcnZhbCIsInRpbWVPZmZzZXQiLCJzZWVrVGltZXN0YW1wIiwicGxheWluZyIsInBvcCIsInRpbWVEaWZmIiwibGFzdFRpbWVzdGFtcCIsInNldFBvcHVwVGV4dCIsIlJhaWRFbXVsYXRvck92ZXJsYXlBcGlIb29rIiwib3JpZ2luYWxDYWxsIiwic2V0Q2FsbE92ZXJsYXlIYW5kbGVyT3ZlcnJpZGUiLCJjYWxsIiwibXNnIiwidHJhY2tlciIsImhhc0lkcyIsImlkcyIsImhhc05hbWVzIiwibmFtZXMiLCJlbnRyaWVzIiwiY29tYmF0YW50U3RhdGUiLCJOYW1lIiwiTGV2ZWwiLCJsZXZlbCIsIkpvYiIsIm5leHRTaWduaWZpY2FudFN0YXRlIiwidG9QbHVnaW5TdGF0ZSIsImxpbmVzIiwiZmlsdGVyIiwiZGVjRXZlbnQiLCJPd25lcklEIiwib3duZXJJZCIsIkJOcGNOYW1lSUQiLCJucGNOYW1lSWQiLCJCTnBjSUQiLCJucGNCYXNlSWQiLCJSYWlkRW11bGF0b3JQb3B1cFRleHQiLCJTdHViYmVkUG9wdXBUZXh0IiwidGltZWxpbmVMb2FkZXIiLCIkcG9wdXBUZXh0Q29udGFpbmVyV3JhcHBlciIsImVtdWxhdGVkT2Zmc2V0IiwiZGlzcGxheWVkVGV4dCIsInNjaGVkdWxlZFRyaWdnZXJzIiwic2Vla2luZyIsIiR0ZXh0RWxlbWVudFRlbXBsYXRlIiwiYXVkaW9EZWJ1Z1RleHREdXJhdGlvbiIsImRvVXBkYXRlIiwicmVtYWluaW5nIiwiZXhwaXJlcyIsInByb21pc2UiLCJlbGVtZW50IiwidG9GaXhlZCIsInByb3BlckNhc2VDb252ZXJ0ZWRMaW5lIiwiY29udmVydGVkTGluZSIsImN1cnJlbnRUaW1lIiwiU2V0SW5Db21iYXQiLCJtYXRjaCIsImxvY2FsUmVnZXgiLCJuZXR3b3JrTGluZSIsIm5ldFRyaWdnZXJzIiwibG9jYWxOZXRSZWdleCIsIl9lbXVsYXRvclJlc2V0Iiwic2V0VGltZW91dCIsInJlamVjdGVyIiwidHJpZ2dlclN1cHByZXNzIiwiX2NyZWF0ZVRleHRGb3IiLCJ0ZXh0VHlwZSIsImxvd2VyVGV4dEtleSIsInRleHRFbGVtZW50Q2xhc3MiLCJfbWFrZVRleHRFbGVtZW50IiwiYWRkRGlzcGxheVRleHQiLCJfb25UcmlnZ2VySW50ZXJuYWxEZWxheVNlY29uZHMiLCJkZWxheVNlY29uZHMiLCJyZWoiLCJfcGxheUF1ZGlvRmlsZSIsInVybCIsInZvbHVtZSIsIkluZm9Tb3VuZCIsIkFsZXJ0U291bmQiLCJBbGFybVNvdW5kIiwidHRzU2F5IiwidHRzVGV4dCIsImNsYXNzTmFtZSIsInByb2dyZXNzQmFyIiwiZW5jb3VudGVyVGFiIiwiZW11bGF0ZWRQYXJ0eUluZm8iLCJlbXVsYXRlZE1hcCIsImVtdWxhdGVkV2ViU29ja2V0IiwibG9nQ29udmVydGVyV29ya2VyIiwiT3B0aW9ucyIsIk5ldHdvcmtMb2dDb252ZXJ0ZXJXb3JrZXIiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZmlyc3RUaW1lc3RhbXAiLCJSYWlkRW11bGF0b3JUaW1lbGluZVVJIiwic2hvd01vZGFsIiwibGFzdEVuY291bnRlciIsImdldEl0ZW0iLCJtYXRjaGVkRW5jb3VudGVycyIsImNoZWNrRmlsZSIsImZpbGUiLCJ0eHQiLCJwYXJzZSIsImltcG9ydE1vZGFsIiwiYmFyIiwiZW5jTGFiZWwiLCJkb25lQnV0dG9uIiwiZG9uZUJ1dHRvblRpbWVvdXQiLCJvbm1lc3NhZ2UiLCJieXRlcyIsInRvdGFsQnl0ZXMiLCJhbGwiLCJzZWNvbmRzIiwiaW50ZXJ2YWwiLCJoaWRlTW9kYWwiLCJhcnJheUJ1ZmZlciIsInBvc3RNZXNzYWdlIiwiaWdub3JlRXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImJvZHkiLCJkdCIsImRhdGFUcmFuc2ZlciIsIiRleHBvcnRCdXR0b24iLCJibG9iIiwiQmxvYiIsImhyZWYiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJjbGljayIsInJldm9rZU9iamVjdFVSTCIsIiRmaWxlSW5wdXQiLCJyYWlkRW11bGF0b3IiLCJzZWxlY3RvciIsIm1vZGFsIiwiYmFja2Ryb3AiLCJkaXNwbGF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUUwQjtBQUUxQixNQUFNLHFCQUFxQixHQUFHLEdBQUcsRUFBRTtJQUNqQyxPQUFPO1FBQ0wsSUFBSSxFQUFFLEVBQUU7UUFDUixNQUFNLEVBQUUsRUFBRTtRQUNWLEdBQUcsRUFBRSxFQUFFO1FBQ1AsT0FB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QyxRQUFFLEVBQUUsT0FEQztBQUVMQyxRQUFFLEVBQUUsT0FGQztBQUdMQyxRQUFFLEVBQUUsUUFIQztBQUlMQyxRQUFFLEVBQUUsSUFKQztBQUtMQyxRQUFFLEVBQUUsTUFMQztBQU1MQyxRQUFFLEVBQUU7QUFOQyxLQURJO0FBU1hPLE9BQUcsRUFBRTtBQVRNLEdBcEZLO0FBK0ZsQixlQUFhO0FBQ1hiLFNBQUssRUFBRTtBQUNMQyxRQUFFLEVBQUUsT0FEQztBQUVMQyxRQUFFLEVBQUUsT0FGQztBQUdMQyxRQUFFLEVBQUUsUUFIQztBQUlMQyxRQUFFLEVBQUUsSUFKQztBQUtMQyxRQUFFLEVBQUUsTUFMQztBQU1MQyxRQUFFLEVBQUU7QUFOQyxLQURJO0FBU1hPLE9BQUcsRUFBRTtBQVRNLEdBL0ZLO0FBMEdsQixjQUFZO0FBQ1ZiLFNBQUssRUFBRTtBQUNMQyxRQUFFLEVBQUUsTUFEQztBQUVMQyxRQUFFLEVBQUUsTUFGQztBQUdMQyxRQUFFLEVBQUUsTUFIQztBQUlMQyxRQUFFLEVBQUUsSUFKQztBQUtMQyxRQUFFLEVBQUUsTUFMQztBQU1MQyxRQUFFLEVBQUU7QUFOQyxLQURHO0FBU1ZPLE9BQUcsRUFBRTtBQVRLLEdBMUdNO0FBcUhsQixTQUFPO0FBQ0xiLFNBQUssRUFBRTtBQUNMQyxRQUFFLEVBQUUsS0FEQztBQUVMQyxRQUFFLEVBQUUsS0FGQztBQUdMQyxRQUFFLEVBQUUsS0FIQztBQUlMQyxRQUFFLEVBQUUsS0FKQztBQUtMQyxRQUFFLEVBQUUsS0FMQztBQU1MQyxRQUFFLEVBQUU7QUFOQyxLQURGO0FBU0xPLE9BQUcsRUFBRTtBQVRBLEdBckhXO0FBZ0lsQixXQUFTO0FBQ1BiLFNBQUssRUFBRTtBQUNMQyxRQUFFLEVBQUUsT0FEQztBQUVMQyxRQUFFLEVBQUUsT0FGQztBQUdMQyxRQUFFLEVBQUUsS0FIQztBQUlMQyxRQUFFLEVBQUUsSUFKQztBQUtMQyxRQUFFLEVBQUUsS0FMQztBQU1MQyxRQUFFLEVBQUU7QUFOQyxLQURBO0FBU1BPLE9BQUcsRUFBRTtBQVRFLEdBaElTO0FB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QUFLLEVBQUUsS0FBSztRQUNsRixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7UUFDbEYsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUNuRixFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztRQUNyRixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtRQUNyRixJQUFJO0tBQ0w7SUFDRCxHQUFHLEVBQUU7UUFDSCxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO1FBQ3JGLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQ3BGLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtLQUN2RTtJQUNELEdBQUcsRUFBRTtRQUNILEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDdEYsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO1FBQ3hGLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJO1FBQ3ZGLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7S0FDM0Q7SUFDRCxHQUFHLEVBQUU7UUFDSCxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7UUFDbEYsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ2xGLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztRQUNsRixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7UUFDbEYsS0FBSztLQUNOO0lBQ0QsR0FBRyxFQUFFO1FBQ0gsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUs7UUFDdEYsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztRQUN4RixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ25GLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUc7S0FDOUU7SUFDRCxHQUFHLEVBQUU7UUFDSCxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ3pGLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7UUFDckYsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ3ZGLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSTtRQUN6RixJQUFJLEVBQUUsSUFBSTtLQUNYO0lBQ0QsR0FBRyxFQUFFO1FBQ0gsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztRQUN6RixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtRQUN6RixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDeEYsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7UUFDeEYsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDdEYsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO0tBQ2pCO0lBQ0QsR0FBRyxFQUFFO1FBQ0gsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztRQUN6RixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ3pGLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUMxRixFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtLQUMvRTtJQUNELEdBQUcsRUFBRTtRQUNILEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLO1FBQ3pGLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO1FBQ3BGLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUU7S0FDbkY7SUFDRCxHQUFHLEVBQUU7UUFDSCxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ3pGLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDcEYsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUs7UUFDbkYsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDdkYsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtLQUN2QjtJQUNELEdBQUcsRUFBRTtRQUNILEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7UUFDekYsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDckYsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO1FBQ3hGLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7S0FDN0U7SUFDRCxHQUFHLEVBQUU7UUFDSCxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztRQUN4RixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztRQUMxRixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtRQUNyRixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRztLQUM1QjtJQUNELEdBQUcsRUFBRTtRQUNILEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7UUFDekYsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDdkYsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztRQUNyRixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtLQUNuRjtJQUNELEdBQUcsRUFBRTtRQUNILEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztRQUNsRixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7UUFDbEYsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ2xGLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztRQUNsRixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7UUFDbEYsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7S0FDbEM7SUFDRCxHQUFHLEVBQUU7UUFDSCxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztRQUN0RixLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ25GLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO1FBQ3RGLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7S0FDdkQ7SUFDRCxHQUFHLEVBQUU7UUFDSCxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7UUFDbEYsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ2xGLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO1FBQ3RGLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDdEYsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztRQUNwRixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJO0tBQzNEO0lBQ0QsR0FBRyxFQUFFO1FBQ0gsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ2xGLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDbkYsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDbEYsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7UUFDbEYsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtLQUN2QjtJQUNELEdBQUcsRUFBRTtRQUNILEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxF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QUMsT0FBTyxTQUFHLEtBQUssQ0FBQyxvQkFBTSxDQUFDLE9BQU8sQ0FBQyxtQ0FBSSxFQUFFLENBQUM7UUFDM0MsSUFBSSxDQUFDLFNBQVMsU0FBRyxLQUFLLENBQUMsb0JBQU0sQ0FBQyxTQUFTLENBQUMsbUNBQUksRUFBRSxDQUFDO1FBQy9DLElBQUksQ0FBQyxTQUFTLFNBQUcsS0FBSyxDQUFDLG9CQUFNLENBQUMsU0FBUyxDQUFDLG1DQUFJLEVBQUUsQ0FBQztRQUMvQyxJQUFJLENBQUMsU0FBUyxTQUFHLEtBQUssQ0FBQyxvQkFBTSxDQUFDLFNBQVMsQ0FBQyxtQ0FBSSxFQUFFLENBQUM7UUFDL0MsSUFBSSxDQUFDLEVBQUUsR0FBRyxVQUFVLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsU0FBUyxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxXQUFXLFNBQUcsS0FBSyxDQUFDLG9CQUFNLENBQUMsV0FBVyxDQUFDLG1DQUFJLEVBQUUsQ0FBQztRQUNuRCxJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxVQUFVLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsU0FBUyxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxXQUFXLFNBQUcsS0FBSyxDQUFDLG9CQUFNLENBQUMsV0FBVyxDQUFDLG1DQUFJLEVBQUUsQ0FBQztRQUNuRCxJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxVQUFVLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsU0FBUyxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxPQUFDLEtBQUssQ0FBQyxvQkFBTSxDQUFDLEtBQUssQ0FBQyxtQ0FBSSxFQUFFLENBQUMsQ0FBQztR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LEtBQUssQ0FBQyxvQkFBTSxDQUFDLElBQUksQ0FBQyxtQ0FBSSxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLFFBQVEsZUFBRyxLQUFLLENBQUMsb0JBQU0sQ0FBQyxRQUFRLENBQUMsMENBQUUsV0FBVyxxQ0FBTSxFQUFFLENBQUM7UUFDNUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsTUFBTSxDQUFDLG1DQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV2RCxJQUFJLENBQUMsRUFBRSxHQUFHLFFBQVEsT0FBQyxLQUFLLENBQUMsb0JBQU0sQ0FBQyxTQUFTLENBQUMsbUNBQUksRUFBRSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsS0FBSyxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxFQUFFLEdBQUcsUUFBUSxPQUFDLEtBQUssQ0FBQyxvQkFBTSxDQUFDLFNBQVMsQ0FBQyxtQ0FBSSxFQUFFLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsT0FBQyxLQUFLLENBQUMsb0JBQU0sQ0FBQyxLQUFLLENBQUMsbUNBQUksRUFBRSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsU0FBUyxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxPQUFDLEtBQUssQ0FBQyxvQkFBTSxDQUFDLEtBQUssQ0FBQyxtQ0FBSSxFQUFFLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVUsT0FBQyxLQUFLLENBQUMsb0JBQU0sQ0FBQyxDQUFDLENBQUMsbUNBQUksRUFBRSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENB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QUUsQ0FBQztRQUNyQyxJQUFJLENBQUMsVUFBVSxTQUFHLEtBQUssQ0FBQyxvQkFBTSxDQUFDLFVBQVUsQ0FBQyxtQ0FBSSxFQUFFLENBQUM7UUFDakQsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsU0FBUyxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxPQUFDLEtBQUssQ0FBQyxvQkFBTSxDQUFDLEtBQUssQ0FBQyxtQ0FBSSxFQUFFLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsRUFBRSxHQUFHLFFBQVEsT0FBQyxLQUFLLENBQUMsb0JBQU0sQ0FBQyxTQUFTLENBQUMsbUNBQUksRUFBRSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsS0FBSyxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxFQUFFLEdBQUcsUUFBUSxPQUFDLEtBQUssQ0FBQyxvQkFBTSxDQUFDLFNBQVMsQ0FBQyxtQ0FBSSxFQUFFLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsT0FBQyxLQUFLLENBQUMsb0JBQU0sQ0FBQyxLQUFLLENBQUMsbUNBQUksRUFBRSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsQ0FBQyxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxDQUFDLEdBQUcsVUFBVSxPQUFDLEtBQUssQ0FBQyxvQkFBTSxDQUFDLENBQUMsQ0FBQyxtQ0FBSSxFQUFFLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVUsT0FBQyxLQUFLLENBQUMsb0JBQU0sQ0FBQyxDQUFDLENBQUMsbUNBQUksRUFBRSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxV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LElBQUksQ0FBQyxtQ0FBSSxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsU0FBUyxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxPQUFDLEtBQUssQ0FBQyxvQkFBTSxDQUFDLEtBQUssQ0FBQyxtQ0FBSSxFQUFFLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsRUFBRSxHQUFHLFFBQVEsT0FBQyxLQUFLLENBQUMsb0JBQU0sQ0FBQyxTQUFTLENBQUMsbUNBQUksRUFBRSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsS0FBSyxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxFQUFFLEdBQUcsUUFBUSxPQUFDLEtBQUssQ0FBQyxvQkFBTSxDQUFDLFNBQVMsQ0FBQyxtQ0FBSSxFQUFFLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsT0FBQyxLQUFLLENBQUMsb0JBQU0sQ0FBQyxLQUFLLENBQUMsbUNBQUksRUFBRSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsQ0FBQyxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxDQUFDLEdBQUcsVUFBVSxPQUFDLEtBQUssQ0FBQyxvQkFBTSxDQUFDLENBQUMsQ0FBQyxtQ0FBSSxFQUFFLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVUsT0FBQyxLQUFLLENBQUMsb0JBQU0sQ0FBQyxDQUFDLENBQUMsbUNBQUksRUFBRSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLE9BQUMsS0FBSyxDQUFDLG9CQUFNLENBQUMsT0FBTyxDQUFDLG1DQUFJLEVBQUUsQ0FB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O1lBQ1AsRUFBRSxFQUFFLEdBQUc7WUFDUCxFQUFFLEVBQUUsR0FBRztZQUNQLEVBQUUsRUFBRSxHQUFHO1NBQ1I7UUFDRCxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNaLEVBQUUsRUFBRSxHQUFHO1lBQ1AsRUFBRSxFQUFFLEdBQUc7WUFDUCxFQUFFLEVBQUUsR0FBRztZQUNQLEVBQUUsRUFBRSxHQUFHO1lBQ1AsRUFBRSxFQUFFLEdBQUc7U0FDUjtRQUNELENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2IsRUFBRSxFQUFFLElBQUk7WUFDUixFQUFFLEVBQUUsSUFBSTtZQUNSLEVBQUUsRUFBRSxJQUFJO1lBQ1IsRUFBRSxFQUFFLElBQUk7WUFDUixFQUFFLEVBQUUsSUFBSTtTQUNUO1FBQ0QsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDYixFQUFFLEVBQUUsSUFBSTtZQUNSLEVBQUUsRUFBRSxJQUFJO1lBQ1IsRUFBRSxFQUFFLElBQUk7WUFDUixFQUFFLEVBQUUsSUFBSTtZQUNSLEVBQUUsRUFBRSxJQUFJO1NBQ1Q7UUFDRCxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNiLEVBQUUsRUFBRSxJQUFJO1lBQ1IsRUFBRSxFQUFFLElBQUk7WUFDUixFQUFFLEVBQUUsSUFBSTtZQUNSLEVBQUUsRUFBRSxJQUFJO1lBQ1IsRUFBRSxFQUFFLElBQUk7U0FDVDtRQUNELENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2IsRUFBRSxFQUFFLElBQUk7WUFDUixFQUFFLEVBQUUsSUFBSTtZQUNSLEVBQUUsRUFBRSxJQUFJO1lBQ1IsRUFBRSxFQUFFLElBQUk7WUFDUixFQUFFLEVBQUUsSUFBSTtTQUNUO1FBQ0QsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDZixFQUFFLEVBQUUsTUFBTTtZQUNWLEVBQUUsRUFBRSxNQUFNO1lBQ1YsRUFBRSxFQUFFLEtBQUs7WUFDVCxFQUFFLEVBQUUsSUFBSTtZQUNSLEVBQUUsRUFBRSxJQUFJ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SUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxRQUFRO1lBQzNFLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxRQUFRO1lBQ3ZFLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLEtBQUssSUFBSSxRQUFRO1lBQzVGLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3BELElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLEdBQUcsSUFBSSxRQUFRO1lBQ2xGLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTyxZQUFZO1FBQ2xCLElB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QUcsR0FBRztZQUMvRCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxHQUFHO1lBQy9ELE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLEdBQUc7WUFDL0QsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsR0FBRztZQUMvRCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxHQUFHO1lBQy9ELE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLEdBQUc7WUFDL0QsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsR0FBRztZQUMvRCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxHQUFHO1lBQy9ELE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLEdBQUc7WUFDL0QsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsR0FBRztZQUMvRCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsR0FBRyxHQUFHO1lBQ2pFLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxHQUFHLEdBQUc7WUFDakUsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLEdBQUcsR0FBRztZQUNqRSxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsR0FBRyxHQUFHO1lBQ2pFLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxHQUFHLEdBQUc7WUFDakUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHLEdBQUc7WUFDM0YsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHLEdBQUc7WUFDakcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHLEdBQUc7WUFDM0YsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHLEdBQUc7WUFDakcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxHQUFHLEdBQUcsWUFBWTtZQUNuRCxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxnQkFBZ0I7WUFDdkQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHLEdBQUc7WUFDekYsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHLEdBQUc7WUFDekYsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHLEdBQUc7WUFDekYsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHLEdBQUc7WUFDckcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLEdBQUcsR0FBRztZQUM3RCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsR0FBRyxHQUFHO1lBQ25FLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxHQUFHLEdBQUc7WUFDN0QsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLEdBQUcsR0FBRztZQUNuRSxhQUFhLEdBQUcsWUFBWTtZQUM1QixhQUFhLEdBQUcsZ0JBQWdCO1lBQ2hDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxHQUFHLEdBQUc7WUFDM0QsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLEdBQUcsR0FBRztZQUMzRCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsR0FBRyxHQUFHO1lBQzNELE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxHQUFHLEdBQUc7WUFDdkUsTUFBTSxDQUFDLENBQUMscUJBQXFCO1FBQy9CLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBR0Q7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUE0QjtRQUM1QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFdBQVc7WUFDMUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNULE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzFELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQztZQUN0RSxNQUFNO1lBQ04sT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLEdBQUcsR0FBRztZQUM1RSxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsR0FBRyxhQUFhO1lBQzNFLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUMxRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELHdCQUF3QjtJQUN4QiwyRkFBMkY7SUFDM0YsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFnQztRQUNwRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLFdBQVc7WUFDMUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNULE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDbEUsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixDQUFDO1lBQ3RFLHdDQUF3QztZQUN4QyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDL0QsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsa0JBQWtCLENBQ3JCLENBQW9DO1FBRXRDLElBQUksT0FBTyxDQUFDLEtBQUssV0FBVztZQUMxQixDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1QsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsb0JBQW9CLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztRQUMxRSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLENBQUM7WUFDdEUsTUFBTSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLGVBQWUsQ0FBQztZQUNuRSx1QkFBdUIsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUM7WUFDakYsY0FBYyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztZQUN0RSxVQUFVLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDO1lBQ3RFLFdBQVcsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsR0FBRyxJQUFJO1lBQ3hFLGFBQWE7WUFDYixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsR0FBRyxHQUFHO1lBQzNELE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxHQUFHLEdBQUc7WUFDM0QsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLEdBQUcsS0FBSztZQUM3RCxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsVUFBVSxDQUFDO1FBQ2xGLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQW1DO1FBQzFELElBQUksT0FBTyxDQUFDLEtBQUssV0FBVztZQUMxQixDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1QsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsbUJBQW1CLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUN4RSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLENBQUM7WUFDdEUsTUFBTSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxlQUFlLENBQUM7WUFDN0Qsc0JBQXNCO1lBQ3RCLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLEtBQUs7WUFDNUQsYUFBYSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxHQUFHLElBQUk7WUFDMUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxhQUFhO2dCQUM5QixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsR0FBRyxHQUFHO2dCQUMzRCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsR0FBRyxHQUFHO2dCQUMzRCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUNqRSxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUdELDhEQUE4RDtJQUM5RCwwRkFBMEY7SUFDMUYsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUE2QjtRQUM5QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFdBQVc7WUFDMUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNULE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzVELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQztZQUN0RSxNQUFNO1lBQ04sT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLEdBQUcsR0FBRztZQUM1RSxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUM7WUFDeEQsdUJBQXVCO1lBQ3ZCLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQztZQUN4RCxRQUFRO1lBQ1IsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO1lBQ3hELE9BQU87WUFDUCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUM7WUFDbkUsYUFBYSxDQUFDO1FBQ2hCLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsb0JBQW9CLENBQ3ZCLENBQXNDO1FBRXhDLElBQUksT0FBTyxDQUFDLEtBQUssV0FBVztZQUMxQixDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1QsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsc0JBQXNCLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztRQUM5RSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVuRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFFdEIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixDQUFDO1lBQ3RFLE1BQU07WUFDTixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsR0FBRyxHQUFHO1lBQzVFLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxHQUFHLEdBQUc7WUFDakUsZUFBZSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxHQUFHLEdBQUc7WUFDcEYsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLEdBQUcsR0FBRztZQUM3RCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsR0FBRyxHQUFHO1lBQ25FLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxHQUFHLEdBQUc7WUFDN0QsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLEdBQUcsR0FBRztZQUNuRSxNQUFNLEdBQUcsU0FBUztZQUNsQixNQUFNLEdBQUcsbUJBQW1CO1lBQzVCLCtCQUErQjtZQUMvQixPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLEdBQUcsR0FBRztZQUM3RSxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLEdBQUcsR0FBRztZQUM3RSxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLEdBQUcsR0FBRztZQUM3RSxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDLEdBQUcsR0FBRztZQUN6RixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxHQUFHO1lBQy9ELE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLEdBQUc7WUFDL0Qsd0RBQXdEO1lBQ3hELE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2pGLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2pGLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDcEYsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFHRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQTZCO1FBQzlDLElBQUksT0FBTyxDQUFDLEtBQUssV0FBVztZQUMxQixDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1QsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDNUQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixDQUFDO1lBQ3RFLE1BQU07WUFDTixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsR0FBRyxHQUFHO1lBQzVFLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQztZQUN4RCx1QkFBdUI7WUFDdkIsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO1lBQ3hELFFBQVE7WUFDUixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDbkUsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFHRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQXdCO1FBQ3BDLElBQUksT0FBTyxDQUFDLEtBQUssV0FBVztZQUMxQixDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1QsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2xELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQztZQUN0RSxNQUFNO1lBQ04sT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLEdBQUcsR0FBRztZQUM1RSxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsR0FBRyxHQUFHO1lBQ2pFLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxHQUFHLEdBQUc7WUFDNUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDO1lBQzNELGFBQWE7WUFDYixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDMUQsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFHRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUE2QjtRQUM5QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFdBQVc7WUFDMUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNULE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzVELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQztZQUN0RSxNQUFNO1lBQ04sT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO1lBQ3hELG1CQUFtQjtZQUNuQixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDbkUsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFHRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQXVCO1FBQ2xDLElBQUksT0FBTyxDQUFDLEtBQUssV0FBVztZQUMxQixDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1QsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQztZQUN0RSxNQUFNO1lBQ04sT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO1lBQ3BELFNBQVM7WUFDVCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDMUQsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFHRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLEtBQUssV0FBVztZQUMxQixDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1QsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUNyQixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUk7WUFDWixPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU87WUFDbEIsSUFBSSxFQUFFLE1BQU07U0FDYixDQUFDLENBQUM7SUFDTCxDQUFDO0lBR0Q7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUF3QjtRQUNwQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFdBQVc7WUFDMUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNULE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNsRCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLENBQUM7WUFDdEUsTUFBTTtZQUNOLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHO1lBQ25ELE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUc7WUFDMUQsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzVELE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBR0Q7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUF5QjtRQUN0QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFdBQVc7WUFDMUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNULE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNwRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDckIsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJO1lBQ1osT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPO1lBQ2xCLElBQUksRUFBRSxNQUFNO1NBQ2IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBeUI7UUFDdEMsSUFBSSxPQUFPLENBQUMsS0FBSyxXQUFXO1lBQzFCLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDVCxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDcEQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixDQUFDO1lBQ3RFLE1BQU07WUFDTixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHO1lBQzNELE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM1RCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUdEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUE2QjtRQUM5QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFdBQVc7WUFDMUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNULE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzVELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQztZQUN0RSxNQUFNO1lBQ04sT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQUcsR0FBRztZQUMzRCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxHQUFHO1lBQzVELE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM1RCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUE0QjtRQUM1QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFdBQVc7WUFDMUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNULE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzFELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25ELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQztZQUN0RSxvQkFBb0I7WUFDcEIsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsR0FBRztZQUN6RCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHO1lBQ25FLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEdBQUc7WUFDckUsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEdBQUcsR0FBRztZQUNuRSxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHO1lBQzNFLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxHQUFHLEdBQUc7WUFDM0QsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsR0FBRztZQUM3RCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHO1lBQ3pFLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEdBQUc7WUFDckUsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLEdBQUcsR0FBRztZQUN6RSxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLEdBQUcsR0FBRztZQUN2RixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLEdBQUcsR0FBRztZQUNuRixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHO1lBQzdFLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxHQUFHLEdBQUc7WUFDdkUsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDO1lBQ2pFLEtBQUs7WUFDTCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNoRSxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUdEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBNEI7UUFDNUMsSUFBSSxPQUFPLENBQUMsS0FBSyxXQUFXO1lBQzFCLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDVCxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUMxRCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLENBQUM7WUFDdEUsc0JBQXNCO1lBQ3RCLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUMvRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUdEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBMkI7UUFDMUMsSUFBSSxPQUFPLENBQUMsS0FBSyxXQUFXO1lBQzFCLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDVCxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDeEQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixDQUFDO1lBQ3RFLE1BQU07WUFDTixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHO1lBQ2xFLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUc7WUFDaEUsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRztZQUM1RCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHO1lBQzVELE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUc7WUFDNUQsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQy9ELE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsWUFBWSxDQUNmLE9BQWdCLEVBQ2hCLElBQVksRUFDWixLQUFvQyxFQUNwQyxZQUFxQjtRQUV2QixJQUFJLENBQUMsS0FBSztZQUNSLEtBQUssR0FBRyxZQUFZLENBQUM7UUFDdkIsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBMkIsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzdELENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQVc7UUFDekIsT0FBTyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCwwRUFBMEU7SUFDMUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFZLEVBQUUsS0FBYTtRQUM3QyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLGlCQUFpQixDQUFDLENBQUM7UUFFaEQsT0FBTyxLQUFLLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBZ0M7UUFDOUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUF3QixFQUFVLEVBQUU7WUFDdEQsT0FBTyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQzdGLENBQUMsQ0FBQztRQUNGLElBQUksS0FBSyxHQUFzQixFQUFFLENBQUM7UUFDbEMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNyQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNiLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDZCxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Z0JBRWxCLEtBQUssR0FBRyxFQUFFLENBQUM7U0FDZDthQUFNO1lBQ0wsZ0RBQWdEO1lBQ2hELEtBQUssR0FBRyxJQUFnQixDQUFDO1NBQzFCO1FBQ0QsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBNkI7UUFDeEMsTUFBTSxrQkFBa0IsR0FBRztZQUN6QixTQUFTLEVBQUUsUUFBUTtZQUNuQixZQUFZLEVBQUUsT0FBTztZQUNyQixRQUFRLEVBQUUsY0FBYztZQUN4QixPQUFPLEVBQUUsZ0JBQWdCO1lBQ3pCLFdBQVcsRUFBRSxrQkFBa0I7WUFDL0IsUUFBUSxFQUFFLGFBQWE7WUFDdkIsc0VBQXNFO1lBQ3RFLHlDQUF5QztZQUN6QyxJQUFJLEVBQUUsK0JBQStCO1lBQ3JDLG1IQUFtSDtZQUNuSCxLQUFLLEVBQUUsdUNBQXVDO1NBQy9DLENBQUM7UUFFRiwrQ0FBK0M7UUFDL0Msb0VBQW9FO1FBQ3BFLHNFQUFzRTtRQUN0RSw4REFBOEQ7UUFDOUQsSUFBSSxTQUFTLEdBQUcsR0FBRyxDQUFDO1FBQ3BCLElBQUksWUFBWSxZQUFZLE1BQU0sRUFBRTtZQUNsQyxTQUFTLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDL0IsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2xELFlBQVksR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1NBQ3BDO1FBQ0QsWUFBWSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3BFLE9BQU8sa0JBQWtCLENBQUMsS0FBd0MsQ0FBQyxJQUFJLEtBQUssQ0FBQztRQUMvRSxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxtREFBbUQ7SUFDbkQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxZQUE2QjtRQUM5QyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLFlBQVksWUFBWSxNQUFNO1lBQ2hDLFNBQVMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkQsT0FBTyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQWU7UUFDcEMsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVztZQUNoQyxPQUFPLElBQUksQ0FBQztRQUNkLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsTUFBTSxDQUFDLGNBQWMsQ0FDakIsQ0FBcUMsRUFDckMsUUFBZ0IsRUFDaEIsTUFBMEI7UUFFNUIsSUFBSSxDQUFDLEtBQUssSUFBSTtZQUNaLE9BQU87UUFDVCxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVE7WUFDdkIsT0FBTztRQUNULE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLFFBQVEsd0JBQXdCLEdBQUcsTUFBTTtvQkFDeEQsaUJBQWlCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2hEO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7Ozs7Ozs7Ozs7Ozs7O0FDenZCRCxpREFBaUQ7QUFDakQsSUFBSTtBQUNKLDJCQUEyQjtBQUMzQixzRUFBc0U7QUFDdEUsbURBQW1EO0FBQ25ELHNDQUFzQztBQUN0QyxLQUFLO0FBQ0wsRUFBRTtBQUNGLDZFQUE2RTtBQUM3RSwrRUFBK0U7QUFDL0Usb0RBQW9EO0FBQ3BELEVBQUU7QUFDRixpRkFBaUY7QUFDakYsNENBQTRDO0FBQzVDLEVBQUU7QUFDRiwyRUFBMkU7QUFDM0Usd0VBQXdFO0FBQ3hFLHVFQUF1RTtBQUN2RSwyREFBMkQ7QUFLM0I7QUFVekIsTUFBTSxrQkFBa0IsR0FBRywwQkFBMEIsQ0FBQztBQUU3RCw0QkFBNEI7QUFDckIsTUFBTSxnQkFBZ0IsR0FBRztJQUM5QixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxjQUFjO0lBQ2QsVUFBVTtJQUNWLGlCQUFpQjtJQUNqQixJQUFJO0lBQ0osVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLEtBQUs7SUFDTCxPQUFPO0lBQ1AsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixLQUFLO0lBQ0wsZUFBZTtDQUNoQixHQUFDO0FBRUYsK0NBQStDO0FBQ3hDLE1BQU0sMEJBQTBCLEdBQUc7SUFDeEMsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLEtBQUs7Q0FDTixDQUFDO0FBRUYscUVBQXFFO0FBQzlELE1BQU0sc0JBQXNCLEdBQUc7SUFDcEMsR0FBRywwQkFBMEI7SUFDN0IsT0FBTztDQUNSLENBQUM7QUFFSyxNQUFNLFdBQVcsR0FBbUM7SUFDekQsTUFBTSxFQUFFLFVBQVU7SUFDbEIsT0FBTyxFQUFFLFdBQVc7SUFDcEIsT0FBTyxFQUFFLFdBQVc7Q0FDckIsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBYSxFQUFXLEVBQUU7SUFDekMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLFdBQVcsQ0FBQztRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLE9BQU8sV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUVGLE1BQU0sZUFBZSxHQUFHLENBQUMsR0FBYyxFQUFXLEVBQUU7SUFDbEQsSUFBSSxDQUFDLEdBQUc7UUFDTixPQUFPLFVBQVUsQ0FBQztJQUNwQixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QixDQUFDLENBQUM7QUFFRixNQUFNLGdCQUFnQixHQUFHLENBQUMsR0FBYyxFQUFXLEVBQUU7SUFDbkQsSUFBSSxDQUFDLEdBQUc7UUFDTixPQUFPLFdBQVcsQ0FBQztJQUNyQixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QixDQUFDLENBQUM7QUFFRixNQUFNLGdCQUFnQixHQUFHLENBQUMsR0FBYyxFQUFXLEVBQUU7SUFDbkQsSUFBSSxDQUFDLEdBQUc7UUFDTixPQUFPLFdBQVcsQ0FBQztJQUNyQixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QixDQUFDLENBQUM7QUFFRixNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQXdCLEVBQUUsRUFBRTtJQUM3QywyREFBMkQ7SUFDM0QsMENBQTBDO0lBQzFDLElBQUksQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxPQUFPLENBQUMsTUFBTTtRQUMvQyxPQUFPO0lBQ1QsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQ3hCLENBQUMsQ0FBQztBQUVGLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBd0IsRUFBRSxFQUFFO0lBQzdDLE9BQU8sT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLE1BQU0sQ0FBQztBQUN6QixDQUFDLENBQUM7QUFFRiwwREFBMEQ7QUFDMUQsTUFBTSxZQUFZLEdBQUcsVUFBUyxLQUFjLEVBQUUsS0FBbUIsRUFDN0QsS0FBYyxFQUFFLEtBQW1CO0lBQ3JDLE1BQU0sR0FBRyxHQUEyQixFQUFFLENBQUM7SUFFdkMsSUFBSSxLQUFLLEtBQUssS0FBSyxFQUFFO1FBQ25CLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDbkIsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztLQUNwQjtTQUFNO1FBQ0wsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBVSxFQUFFLE9BQXdCLEVBQUUsTUFBYyxFQUFFLEVBQUU7WUFDcEUsT0FBTyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUM7S0FDSDtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxVQUFVLEdBQUcsQ0FBQyxFQUFXLEVBQUUsRUFBRTtJQUNqQyxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDO0FBQzdCLENBQUMsQ0FBQztBQUVGLHlEQUF5RDtBQUN6RCxNQUFNLGNBQWMsR0FBRyxDQUFDLEtBQWMsRUFBRSxJQUFnQixFQUFzQixFQUFFO0lBQzlFLE9BQU8sQ0FBQyxLQUFjLEVBQUUsUUFBaUIsRUFBRSxNQUFjLEVBQUUsRUFBRTtRQUMzRCwyQkFBMkI7UUFDM0IsTUFBTSxDQUFDLHFCQUFxQixHQUFHO1lBQzdCLElBQUksRUFBRSxJQUFJO1NBQ1gsQ0FBQztRQUNGLE9BQU87WUFDTCxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBYyxFQUFFLFFBQWlCLEVBQUUsTUFBYyxFQUFFLEVBQUUsd0JBQUMsTUFBTSxDQUFDLElBQUksK0NBQVgsTUFBTSxJQUFTO1NBQ2hGLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFRSyxNQUFNLFNBQVMsR0FBRztJQUN2QixVQUFVLEVBQUUsQ0FBQyxTQUFvQixFQUFFLFFBQW1CLEVBQUUsRUFBRTtRQUN4RCxNQUFNLGFBQWEsR0FBRztZQUNwQixRQUFRLEVBQUUsNEVBQWtCO1lBQzVCLFdBQVcsRUFBRSxzRkFBdUI7WUFDcEMsY0FBYyxFQUFFLDRGQUEwQjtTQUMzQyxDQUFDO1FBRUYsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFVLEVBQUUsT0FBd0IsRUFBRSxNQUFjLEVBQUUsRUFBRTs7WUFDMUUsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1gsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVE7b0JBQ2hELE9BQU87Z0JBQ1QsYUFBTyxNQUFNLENBQUMsUUFBUSwrQ0FBZixNQUFNLEVBQWM7YUFDNUI7WUFFRCxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsRUFBRTtnQkFDcEIsYUFBTyxNQUFNLENBQUMsV0FBVywrQ0FBbEIsTUFBTSxFQUFpQjtRQUNsQyxDQUFDLENBQUM7UUFFRixNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVUsRUFBRSxPQUF3QixFQUFFLE1BQWMsRUFBRSxFQUFFOztZQUN6RSxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDWCxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUTtvQkFDaEQsT0FBTztnQkFDVCxhQUFPLE1BQU0sQ0FBQyxRQUFRLCtDQUFmLE1BQU0sRUFBYzthQUM1QjtZQUNELElBQUksTUFBTSxLQUFLLElBQUksQ0FBQyxFQUFFO2dCQUNwQixPQUFPO1lBRVQsYUFBTyxNQUFNLENBQUMsY0FBYywrQ0FBckIsTUFBTSxFQUFrQixFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7UUFDckUsQ0FBQyxDQUFDO1FBRUYsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUFFLFVBQVUsRUFDakUsZUFBZSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sQ0FBQyxLQUFjLEVBQUUsUUFBaUIsRUFBRSxNQUFjLEVBQTBCLEVBQUU7WUFDbkYsMkJBQTJCO1lBQzNCLE1BQU0sQ0FBQyxxQkFBcUIsR0FBRyxhQUFhLENBQUM7WUFDN0MsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELGNBQWMsRUFBRSxDQUFDLFNBQW9CLEVBQUUsT0FBa0IsRUFBRSxFQUFFO1FBQzNELE1BQU0sYUFBYSxHQUFHO1lBQ3BCLFFBQVEsRUFBRSx3RUFBZ0I7WUFDMUIsV0FBVyxFQUFFLHNGQUF1QjtZQUNwQyxjQUFjLEVBQUUsNEZBQTBCO1NBQzNDLENBQUM7UUFFRix3REFBd0Q7UUFDeEQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxJQUFVLEVBQUUsT0FBd0IsRUFBRSxNQUFjLEVBQUUsRUFBRTs7WUFDNUUsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xDLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLElBQUksTUFBTSxLQUFLLElBQUksQ0FBQyxFQUFFO2dCQUM1QyxhQUFPLE1BQU0sQ0FBQyxRQUFRLCtDQUFmLE1BQU0sRUFBYztRQUMvQixDQUFDLENBQUM7UUFDRixNQUFNLFVBQVUsR0FBRyxDQUFDLElBQVUsRUFBRSxPQUF3QixFQUFFLE1BQWMsRUFBRSxFQUFFOztZQUMxRSxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFbEMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxNQUFNLEtBQUssSUFBSSxDQUFDLEVBQUU7Z0JBQzVDLE9BQU87WUFFVCxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsRUFBRTtnQkFDcEIsYUFBTyxNQUFNLENBQUMsV0FBVywrQ0FBbEIsTUFBTSxFQUFpQjtZQUNoQyxhQUFPLE1BQU0sQ0FBQyxjQUFjLCtDQUFyQixNQUFNLEVBQWtCLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtRQUNyRSxDQUFDLENBQUM7UUFFRixNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEVBQUUsWUFBWSxFQUNqRSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM3QyxPQUFPLENBQUMsS0FBVyxFQUFFLFFBQWlCLEVBQUUsTUFBYyxFQUFFLEVBQUU7WUFDeEQsMkJBQTJCO1lBQzNCLE1BQU0sQ0FBQyxxQkFBcUIsR0FBRyxhQUFhLENBQUM7WUFDN0MsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELFVBQVUsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFXLEVBQUUsUUFBaUIsRUFBRSxNQUFjLEVBQUUsRUFBRTtRQUNqRiwyQkFBMkI7UUFDM0IsTUFBTSxDQUFDLHFCQUFxQixHQUFHO1lBQzdCLFdBQVcsRUFBRSxzRkFBdUI7WUFDcEMsY0FBYyxFQUFFLDRFQUFrQjtZQUNsQyxXQUFXLEVBQUUsc0ZBQXVCO1NBQ3JDLENBQUM7UUFDRixPQUFPO1lBQ0wsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQVUsRUFBRSxPQUF3QixFQUFFLE1BQWMsRUFBRSxFQUFFOztnQkFDL0UsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNsQyxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsRUFBRTtvQkFDcEIsYUFBTyxNQUFNLENBQUMsV0FBVywrQ0FBbEIsTUFBTSxFQUFpQjtnQkFDaEMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLEtBQUssRUFBRTtvQkFDOUMseUJBQXlCO29CQUN6Qiw2REFBNkQ7b0JBQzdELHdFQUF3RTtvQkFDeEUsdUZBQXVGO29CQUN2RixhQUFPLE1BQU0sQ0FBQyxjQUFjLCtDQUFyQixNQUFNLEVBQW9CO2lCQUNsQztnQkFDRCxhQUFPLE1BQU0sQ0FBQyxXQUFXLCtDQUFsQixNQUFNLEVBQWlCO1lBQ2hDLENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUNELFVBQVUsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSw0RUFBa0IsQ0FBQztJQUN4RixHQUFHLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUUsOERBQVcsQ0FBQztJQUMxRSxNQUFNLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUUsb0VBQWMsQ0FBQztJQUNoRixNQUFNLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUUsb0VBQWMsQ0FBQztJQUNoRiwrQkFBK0I7SUFDL0IsV0FBVyxFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsOEVBQW1CLENBQUM7SUFDM0YsNENBQTRDO0lBQzVDLFdBQVcsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLDhFQUFtQixDQUFDO0lBQzNGLGFBQWEsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFXLEVBQUUsUUFBaUIsRUFBRSxNQUFjLEVBQUUsRUFBRTtRQUNwRiwyQkFBMkI7UUFDM0IsTUFBTSxDQUFDLHFCQUFxQixHQUFHO1lBQzdCLFVBQVUsRUFBRSw0RUFBa0I7WUFDOUIsYUFBYSxFQUFFLGtGQUFxQjtTQUNyQyxDQUFDO1FBQ0YsT0FBTztZQUNMLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQVUsRUFBRSxPQUF3QixFQUFFLE1BQWMsRUFBRSxFQUFFOztnQkFDaEYsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNsQyxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsRUFBRTtvQkFDcEIsYUFBTyxNQUFNLENBQUMsVUFBVSwrQ0FBakIsTUFBTSxFQUFnQjtnQkFDL0IsYUFBTyxNQUFNLENBQUMsYUFBYSwrQ0FBcEIsTUFBTSxFQUFpQixFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDcEUsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBQ0QsV0FBVyxFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFLDhFQUFtQixDQUFDO0lBQzFGLFdBQVcsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLDhFQUFtQixDQUFDO0lBQzNGLGVBQWUsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFO1FBQ2xDLE9BQU8sY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLHNGQUF1QixDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUNELGVBQWUsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFO1FBQ2xDLE9BQU8sY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLHNGQUF1QixDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUNELFNBQVMsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLDBFQUFpQixDQUFDO0lBQ3ZGLFdBQVcsRUFBRSxDQUFDLFNBQW9CLEVBQUUsUUFBbUIsRUFBRSxFQUFFO1FBQ3pELE1BQU0sYUFBYSxHQUFHO1lBQ3BCLGNBQWMsRUFBRSxvRkFBc0I7WUFDdEMsaUJBQWlCLEVBQUUsMEZBQXlCO1NBQzdDLENBQUM7UUFFRixNQUFNLFVBQVUsR0FBRyxDQUFDLElBQVUsRUFBRSxPQUF3QixFQUFFLE1BQWMsRUFBRSxFQUFFOztZQUMxRSxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEMsSUFBSSxNQUFNLEtBQUssSUFBSSxDQUFDLEVBQUU7Z0JBQ3BCLGFBQU8sTUFBTSxDQUFDLGNBQWMsK0NBQXJCLE1BQU0sRUFBb0I7UUFDckMsQ0FBQyxDQUFDO1FBRUYsTUFBTSxTQUFTLEdBQUcsQ0FBQyxJQUFVLEVBQUUsT0FBd0IsRUFBRSxNQUFjLEVBQUUsRUFBRTs7WUFDekUsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xDLElBQUksTUFBTSxLQUFLLElBQUksQ0FBQyxFQUFFO2dCQUNwQixhQUFPLE1BQU0sQ0FBQyxpQkFBaUIsK0NBQXhCLE1BQU0sRUFBcUIsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO1FBQzFFLENBQUMsQ0FBQztRQUNGLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLEVBQUUsVUFBVSxFQUNoRSxlQUFlLENBQUMsUUFBUSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDMUMsT0FBTyxDQUFDLEtBQVcsRUFBRSxRQUFpQixFQUFFLE1BQWMsRUFBRSxFQUFFO1lBQ3hELDJCQUEyQjtZQUMzQixNQUFNLENBQUMscUJBQXFCLEdBQUcsYUFBYSxDQUFDO1lBQzdDLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsQ0FBQztJQUNKLENBQUM7SUFDRCxXQUFXLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUUsc0ZBQXVCLENBQUM7SUFDOUYsUUFBUSxFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFLHdFQUFnQixDQUFDO0lBQ3BGLGtCQUFrQixFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQVcsRUFBRSxRQUFpQixFQUFFLE1BQWMsRUFBRSxFQUFFO1FBQ3pGLDJCQUEyQjtRQUMzQixNQUFNLENBQUMscUJBQXFCLEdBQUc7WUFDN0IsWUFBWSxFQUFFLDRGQUEwQjtTQUN6QyxDQUFDO1FBQ0YsT0FBTztZQUNMLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQVUsRUFBRSxPQUF3QixFQUFFLE1BQWMsRUFBRSxFQUFFOztnQkFDaEYsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNsQyxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsRUFBRTtvQkFDcEIsT0FBTztnQkFDVCxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7Z0JBQzdFLGFBQU8sTUFBTSxDQUFDLFlBQVksK0NBQW5CLE1BQU0sRUFBZ0IsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDL0MsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBQ0Qsa0JBQWtCLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBVyxFQUFFLFFBQWlCLEVBQUUsTUFBYyxFQUFFLEVBQUU7UUFDekYsMkJBQTJCO1FBQzNCLE1BQU0sQ0FBQyxxQkFBcUIsR0FBRztZQUM3QixZQUFZLEVBQUUsNEZBQTBCO1NBQ3pDLENBQUM7UUFDRixPQUFPO1lBQ0wsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBVSxFQUFFLE9BQXdCLEVBQUUsTUFBYyxFQUFFLEVBQUU7O2dCQUNoRixNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ2xDLElBQUksTUFBTSxLQUFLLElBQUksQ0FBQyxFQUFFO29CQUNwQixPQUFPO2dCQUNULE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztnQkFDN0UsYUFBTyxNQUFNLENBQUMsWUFBWSwrQ0FBbkIsTUFBTSxFQUFnQixFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUMvQyxDQUFDO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFDRCxTQUFTLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSwwRUFBaUIsQ0FBQztJQUN2RixjQUFjLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxvRkFBc0IsQ0FBQztJQUNqRyxrRUFBa0U7SUFDbEUsUUFBUSxFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFLHdFQUFnQixDQUFDO0lBQ3BGLHVFQUF1RTtJQUN2RSxLQUFLLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSw0REFBVSxDQUFDO0lBQzVFLCtCQUErQjtJQUMvQixNQUFNLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSw4REFBVyxDQUFDO0lBQzlFLFVBQVUsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSw0RUFBa0IsQ0FBQztJQUN4RixZQUFZLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUUsMEVBQWlCLENBQUM7SUFDekYsWUFBWSxFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFLDBFQUFpQixDQUFDO0lBQ3pGLGdCQUFnQixFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFLGtGQUFxQixDQUFDO0lBQ2pHLGdCQUFnQixFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFLGtGQUFxQixDQUFDO0lBQ2pHLFFBQVEsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLGdGQUFvQixDQUFDO0lBQ3pGLE9BQU8sRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLGtFQUFhLENBQUM7SUFDakYsTUFBTSxFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsZ0VBQVksQ0FBQztJQUMvRSxNQUFNLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxvRkFBc0IsQ0FBQztJQUN6RixNQUFNLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxzRkFBdUIsQ0FBQztJQUMxRixXQUFXLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSw4RUFBbUIsQ0FBQztJQUMzRixPQUFPLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxrRUFBYSxDQUFDO0lBQ2pGLDZEQUE2RDtJQUM3RCxRQUFRLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUUsd0VBQWdCLENBQUM7SUFDcEYsc0ZBQXNGO0lBQ3RGLFlBQVksRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSxnRkFBb0IsQ0FBQztJQUM1RixhQUFhLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxrRkFBcUIsQ0FBQztJQUMvRixLQUFLLEVBQUUsQ0FBQyxHQUFjLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBVyxFQUFFLFFBQWlCLEVBQUUsTUFBYyxFQUFFLEVBQUU7UUFDNUUsMkJBQTJCO1FBQzNCLE1BQU0sQ0FBQyxxQkFBcUIsR0FBRztZQUM3QixLQUFLLEVBQUUsOEVBQW1CO1NBQzNCLENBQUM7UUFDRixPQUFPO1lBQ0wsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBVyxFQUFFLE9BQXdCLEVBQUUsTUFBYyxFQUFFLEVBQUU7O2dCQUNqRixNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ2xDLGFBQU8sTUFBTSxDQUFDLEtBQUssK0NBQVosTUFBTSxFQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzFDLENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUNELElBQUksRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFXLEVBQUUsUUFBaUIsRUFBRSxNQUFjLEVBQUUsRUFBRTtRQUMzRSwyQkFBMkI7UUFDM0IsTUFBTSxDQUFDLHFCQUFxQixHQUFHO1lBQzdCLElBQUksRUFBRSw0RUFBa0I7U0FDekIsQ0FBQztRQUNGLE9BQU87WUFDTCxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFXLEVBQUUsT0FBd0IsRUFBRSxNQUFjLEVBQUUsRUFBRTs7Z0JBQ2pGLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDbEMsYUFBTyxNQUFNLENBQUMsSUFBSSwrQ0FBWCxNQUFNLEVBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDekMsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBQ0QsU0FBUyxFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQVcsRUFBRSxRQUFpQixFQUFFLE1BQWMsRUFBRSxFQUFFO1FBQ2hGLDJCQUEyQjtRQUMzQixNQUFNLENBQUMscUJBQXFCLEdBQUc7WUFDN0IsU0FBUyxFQUFFLHNGQUF1QjtTQUNuQyxDQUFDO1FBQ0YsT0FBTztZQUNMLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQVcsRUFBRSxPQUF3QixFQUFFLE1BQWMsRUFBRSxFQUFFOztnQkFDakYsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNsQyxhQUFPLE1BQU0sQ0FBQyxTQUFTLCtDQUFoQixNQUFNLEVBQWEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDOUMsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBQ0QsTUFBTSxFQUFFLENBQUMsU0FBb0IsRUFBRSxRQUFtQixFQUFFLEVBQUU7UUFDcEQsTUFBTSxhQUFhLEdBQUc7WUFDcEIsU0FBUyxFQUFFLDBFQUFpQjtZQUM1QixZQUFZLEVBQUUsZ0ZBQW9CO1NBQ25DLENBQUM7UUFFRixNQUFNLFVBQVUsR0FBRyxDQUFDLElBQVUsRUFBRSxPQUF3QixFQUFFLE1BQWMsRUFBRSxFQUFFOztZQUMxRSxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLE1BQU07Z0JBQ3BCLGFBQU8sTUFBTSxDQUFDLFNBQVMsK0NBQWhCLE1BQU0sRUFBZTtRQUNoQyxDQUFDLENBQUM7UUFFRixNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVUsRUFBRSxPQUF3QixFQUFFLE1BQWMsRUFBRSxFQUFFOztZQUN6RSxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEMsSUFBSSxNQUFNLEtBQUssSUFBSSxDQUFDLEVBQUU7Z0JBQ3BCLGFBQU8sTUFBTSxDQUFDLFlBQVksK0NBQW5CLE1BQU0sRUFBZ0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO1FBQ3JFLENBQUMsQ0FBQztRQUVGLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsRUFBRSxVQUFVLEVBQ2pFLGVBQWUsQ0FBQyxRQUFRLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMxQyxPQUFPLENBQUMsS0FBVyxFQUFFLFFBQWlCLEVBQUUsTUFBYyxFQUFFLEVBQUU7WUFDeEQsMkJBQTJCO1lBQzNCLE1BQU0sQ0FBQyxxQkFBcUIsR0FBRyxhQUFhLENBQUM7WUFDN0MsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELFFBQVEsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFXLEVBQUUsUUFBaUIsRUFBRSxNQUFjLEVBQUUsRUFBRTtRQUMvRSwyQkFBMkI7UUFDM0IsTUFBTSxDQUFDLHFCQUFxQixHQUFHO1lBQzdCLGFBQWEsRUFBRSxrRkFBcUI7WUFDcEMsY0FBYyxFQUFFLG9GQUFzQjtTQUN2QyxDQUFDO1FBQ0YsT0FBTztZQUNMLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQVUsRUFBRSxPQUF3QixFQUFFLE1BQWMsRUFBRSxFQUFFOztnQkFDaEYsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNsQyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssTUFBTTtvQkFDcEIsYUFBTyxNQUFNLENBQUMsYUFBYSwrQ0FBcEIsTUFBTSxFQUFtQjtnQkFDbEMsYUFBTyxNQUFNLENBQUMsY0FBYywrQ0FBckIsTUFBTSxFQUFrQixFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDckUsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBQ0QsV0FBVyxFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsOEVBQW1CLENBQUM7SUFDM0YsVUFBVSxFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsNEVBQWtCLENBQUM7SUFDekYsY0FBYyxFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsb0ZBQXNCLENBQUM7SUFDakcsMEJBQTBCO0lBQzFCLFFBQVEsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSx3RUFBZ0IsQ0FBQztJQUNwRixtREFBbUQ7SUFDbkQsVUFBVSxFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFLDRFQUFrQixDQUFDO0lBQ3hGLFdBQVcsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSw4RUFBbUIsQ0FBQztJQUMxRixrQkFBa0IsRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFDdkUsNEZBQTBCLENBQUM7SUFDL0IsV0FBVyxFQUFFLENBQUMsR0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQVcsRUFBRSxRQUFpQixFQUFFLE1BQWMsRUFBRSxFQUFFO1FBQ2xGLDJCQUEyQjtRQUMzQixNQUFNLENBQUMscUJBQXFCLEdBQUc7WUFDN0IsV0FBVyxFQUFFLHdGQUF3QjtTQUN0QyxDQUFDO1FBQ0YsT0FBTztZQUNMLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQVUsRUFBRSxPQUF3QixFQUFFLE1BQWMsRUFBRSxFQUFFOztnQkFDaEYsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNsQyxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsRUFBRTtvQkFDcEIsT0FBTztnQkFDVCxhQUFPLE1BQU0sQ0FBQyxXQUFXLCtDQUFsQixNQUFNLEVBQWlCO1lBQ2hDLENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUNELE1BQU0sRUFBRSxDQUFDLEdBQWMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLG9FQUFjLENBQUM7Q0FDekUsQ0FBQztBQUVYLDRGQUE0RjtBQUM1Riw0RkFBNEY7QUFDNUYsaUdBQWlHO0FBQ2pHLE1BQU0sd0JBQXdCLEdBQWlCLFNBQVMsQ0FBQztBQUN6RCxvQ0FBb0M7QUFDcEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbmRxQztBQUM5QjtBQUVoRCxRQUFRO0FBQ1IsaUVBQWlFO0FBQ2pFLDJEQUEyRDtBQUMzRCxrRUFBa0U7QUFDbEUsc0VBQXNFO0FBQ3RFLHFEQUFxRDtBQUNyRCwwQkFBMEI7QUFDYTtBQUN2QyxNQUFNLFVBQVUsR0FBRyx5REFBVyxDQUFDO0FBQ1c7QUFDMUMsTUFBTSxXQUFXLEdBQUcsMkRBQVksQ0FBQztBQUNNO0FBQ3ZDLE1BQU0sVUFBVSxHQUFHLHlEQUFXLENBQUM7QUFDRTtBQUNqQyxNQUFNLE9BQU8sR0FBRyxzREFBUSxDQUFDO0FBQzZCO0FBQ3RELE1BQU0sU0FBUyxHQUFHLDJEQUFVLENBQUM7QUFDSTtBQUNqQyxNQUFNLE9BQU8sR0FBRyxzREFBUSxDQUFDO0FBQ0U7QUFDM0IsTUFBTSxJQUFJLEdBQUcsbURBQUssQ0FBQztBQUNhO0FBQ2hDLE1BQU0sTUFBTSxHQUFHLHNEQUFPLENBQUM7QUFDYTtBQUNwQyxNQUFNLFFBQVEsR0FBRyx5REFBUyxDQUFDO0FBRTNCLDJGQUEyRjtBQUMzRiwwRUFBMEU7QUFDMUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksV0FBVyxJQUFJLFVBQVUsSUFBSSxPQUFPO0lBQzdELFNBQVMsSUFBSSxPQUFPLElBQUksSUFBSSxJQUFJLE1BQU0sSUFBSSxRQUFRLENBQUMsQ0FBQztBQStCeEQsTUFBTSxVQUFVO0lBQWhCO1FBQ1Usb0JBQWUsR0FBK0MsRUFBRSxDQUFDO1FBQ2pFLGdCQUFXLEdBQWdCLEVBQUUsQ0FBQztRQUM5QixzQkFBaUIsR0FBZ0QsRUFBRSxDQUFDO0lBaVo5RSxDQUFDO0lBL1lDLHFCQUFxQjtRQUNuQixPQUFPO1lBQ0wsY0FBYyxFQUFFLElBQUk7WUFDcEIsV0FBVyxFQUFFLElBQUk7WUFDakIsZUFBZSxFQUFFLElBQUk7WUFDckIsaUJBQWlCLEVBQUUsSUFBSTtZQUN2QixrQkFBa0IsRUFBRSxJQUFJO1lBQ3hCLG1CQUFtQixFQUFFLEtBQUs7WUFDMUIsd0JBQXdCLEVBQUUsS0FBSztTQUNoQyxDQUFDO0lBQ0osQ0FBQztJQUVELFlBQVksQ0FBQyxPQUFlLEVBQUUsT0FBb0I7UUFDaEQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0I7UUFFekMsbUZBQW1GO1FBQ25GLGtGQUFrRjtRQUNsRixpRkFBaUY7UUFDakYsRUFBRTtRQUNGLDRCQUE0QjtRQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZCwyQkFBMkI7SUFDN0IsQ0FBQztJQUVELGVBQWUsQ0FBQyxXQUFtQixFQUFFLGNBQStCLEVBQ2hFLGdCQUFtQztRQUNyQyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxHQUFHLGNBQWMsQ0FBQztRQUNuRCxJQUFJLGdCQUFnQjtZQUNsQixJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLEdBQUcsZ0JBQWdCLENBQUM7SUFDM0QsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFjO1FBQzFCLDRDQUE0QztRQUM1QyxNQUFNLFdBQVcsR0FBOEIsRUFBRSxDQUFDO1FBQ2xELEtBQUssTUFBTSxHQUFHLElBQUksSUFBSTtZQUNwQixXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0RCwyRkFBMkY7UUFDM0YsMEZBQTBGO1FBQzFGLGVBQWU7UUFDZixvQ0FBb0M7UUFDcEMsdUJBQXVCO1FBQ3ZCLHdCQUF3QjtRQUN4Qix5QkFBeUI7UUFDekIsb0JBQW9CO1FBQ3BCLG1CQUFtQjtRQUNuQixtQkFBbUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO1lBQzlCLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQyxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEMsSUFBSSxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxTQUFTO2dCQUM1QyxNQUFNLElBQUksa0VBQWUsRUFBRSxDQUFDO1lBRTlCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEQsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDckMsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUMxQixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzFCLGtEQUFrRDtnQkFDbEQsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLE1BQU0sS0FBSyxTQUFTO29CQUM5QyxNQUFNLElBQUksa0VBQWUsRUFBRSxDQUFDO2dCQUU5Qiw0REFBNEQ7Z0JBQzVELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQztnQkFDekMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDO2dCQUV6QyxJQUFJLE9BQU8sSUFBSSxPQUFPLEVBQUU7b0JBQ3RCLG9EQUFvRDtvQkFFcEQsNkNBQTZDO29CQUM3QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFDOUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQzlDLE1BQU0sZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDcEQsSUFBSSxnQkFBZ0I7d0JBQ2xCLE9BQU8sZ0JBQWdCLENBQUM7b0JBRTFCLDJDQUEyQztvQkFDM0MsZ0RBQWdEO29CQUNoRCxPQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ3JDO3FCQUFNLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUU7b0JBQy9CLHVEQUF1RDtvQkFDdkQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDMUMsSUFBSSxJQUFJO3dCQUNOLE9BQU8sSUFBSSxDQUFDO2lCQUNmO2dCQUVELDZFQUE2RTtnQkFDN0UsbUVBQW1FO2dCQUNuRSwyRUFBMkU7Z0JBQzNFLGlEQUFpRDtnQkFFakQsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUU7b0JBQzNCLHdEQUF3RDtvQkFDeEQsT0FBTyxDQUFDLENBQUM7aUJBQ1Y7Z0JBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUU7b0JBQzNCLHdEQUF3RDtvQkFDeEQsT0FBTyxDQUFDLENBQUMsQ0FBQztpQkFDWDthQUNGO1lBQ0QsT0FBTyxDQUFDLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxnRkFBZ0Y7SUFDaEYscUZBQXFGO0lBQ3JGLHFGQUFxRjtJQUNyRixtRkFBbUY7SUFDbkYsZUFBZSxDQUFDLEtBQWUsRUFBRSxlQUF1QixFQUFFLGFBQXFCO1FBQzdFLE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM5QyxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEQsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztnQkFDM0IsT0FBTyxLQUFLLENBQUM7WUFDZixJQUFJLElBQUksS0FBSyxHQUFHLFdBQVcsR0FBRyxTQUFTLEVBQUU7Z0JBQ3ZDLE9BQU8sSUFBSSxDQUFDO1lBQ2QsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsV0FBVyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsV0FBVyxJQUFJLENBQUM7Z0JBQzNFLE9BQU8sSUFBSSxDQUFDO1lBQ2QsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxxQkFBcUIsQ0FBQyxXQUFtQixFQUFFLE9BQW9CLEVBQUUsUUFBb0I7UUFDbkYsSUFBSSxrQkFBa0IsR0FBRyxLQUFLLENBQUM7UUFDL0IsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFO1lBQ3RCLElBQUksa0JBQWtCO2dCQUNwQixPQUFPO1lBQ1Qsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDM0IsQ0FBQyxDQUFDO1FBRUYsaUZBQWtCLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1lBQzNDLFVBQVUsRUFBRSxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUM7UUFDSCxpRkFBa0IsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO1lBQ3ZDLFVBQVUsRUFBRSxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELGFBQWEsQ0FBQyxXQUFtQixFQUFFLE9BQW9CLEVBQUUsUUFBb0I7UUFDM0UsTUFBTSxXQUFXLEdBQUcsaUZBQWtCLENBQUM7WUFDckMsSUFBSSxFQUFFLGlCQUFpQjtZQUN2QixPQUFPLEVBQUUsU0FBUztTQUNuQixDQUFDLENBQUM7UUFFSCxNQUFNLFFBQVEsR0FBRyxLQUFLLEVBQUUsQ0FBaUMsRUFBRSxFQUFFOztZQUMzRCxvRkFBb0Y7WUFDcEYsbUZBQW1GO1lBQ25GLHVEQUF1RDtZQUN2RCxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUNyRSxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztZQUUzQywyREFBMkQ7WUFDM0QsOERBQThEO1lBRTlELHFFQUFxRTtZQUNyRSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUNyQixPQUFPLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO2dCQUMzQyxPQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO2dCQUN4QyxPQUFPLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO2FBQzdDO1lBQ0Qsa0JBQWtCO1lBQ2xCLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUU7Z0JBQzNCLE9BQU8sQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7Z0JBQ2pELHNGQUFzRjtnQkFDdEYsT0FBTyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQzthQUM1QztZQUNELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQy9ELGtCQUFrQjtZQUNsQixJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO2dCQUN6QixPQUFPLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO2dCQUM3QyxPQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzVELElBQUksT0FBTyxDQUFDLFdBQVcsS0FBSyxJQUFJO29CQUM5QixPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztnQkFDN0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO29CQUNsRCxPQUFPLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUM7YUFDaEQ7WUFDRCwwQkFBMEI7WUFDMUIsT0FBTyxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQztZQUNuRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUM7Z0JBQ3RELE9BQU8sQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUM7WUFFM0QsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7WUFDL0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7WUFFNUMsZ0VBQWdFO1lBQ2hFLGtEQUFrRDtZQUNsRCw2REFBNkQ7WUFDN0QscURBQXFEO1lBQ3JELElBQUksQ0FBQyxXQUFXLGVBQUcsQ0FBQyxNQUFNLFdBQVcsQ0FBQywwQ0FBRSxJQUFJLG1DQUFJLEVBQUUsQ0FBQztZQUNuRCxJQUFJLENBQUMsY0FBYyxDQUNmLE9BQU8sUUFDUCxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxtQ0FBSSxFQUFFLEVBQ25DLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQ3BDLENBQUM7WUFFRix5RUFBeUU7WUFDekUsd0RBQXdEO1lBQ3hELE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBWSxDQUFDLENBQUM7WUFFekYsd0VBQXdFO1lBQ3hFLHdFQUF3RTtZQUN4RSxzRUFBc0U7WUFDdEUsNkJBQTZCO1lBQzdCLE1BQU0sc0JBQXNCLEdBQXdDO2dCQUNsRSxRQUFRLEVBQUU7b0JBQ1IsVUFBVTtpQkFDWDthQUNGLENBQUM7WUFDRixzQkFBc0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFaEYsc0VBQXNFO1lBQ3RFLHFFQUFxRTtZQUNyRSxvQkFBb0I7WUFFcEIsaUZBQWlGO1lBQ2pGLDRFQUE0RTtZQUM1RSxvRUFBb0U7WUFDcEUsOERBQThEO1lBQzlELE1BQU0sZUFBZSxHQUFpQyxFQUFFLENBQUM7WUFFekQsSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsOERBQThEO2dCQUM5RCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDaEUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUN0RSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBRXhFLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO29CQUM1QixJQUFJO3dCQUNGLGFBQWEsQ0FBQyxvQkFBb0IsUUFBUSxHQUFHLE1BQU0sRUFBRSxDQUFDLENBQUM7d0JBQ3ZELElBQUksQ0FBQyxZQUFZLE9BQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxtQ0FBSSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7d0JBRXJELEtBQUssTUFBTSxLQUFLLFVBQUksc0JBQXNCLENBQUMsV0FBVyxDQUFDLG1DQUFJLEVBQUUsRUFBRTs0QkFDN0QsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxLQUFLLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQ0FDdkUseUVBQXlFO2dDQUN6RSx5Q0FBeUM7Z0NBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLFFBQVEsR0FBRyxNQUFNLHVCQUF1QixLQUFLLHVCQUF1QixDQUFDLENBQUM7NkJBQ25HOzRCQUNELGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7eUJBQ3pDO3dCQUVELGdCQUFJLENBQUMsaUJBQWlCLEVBQUMsV0FBVyxDQUFDLG1EQUFHLE1BQU0sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtxQkFDOUU7b0JBQUMsT0FBTyxDQUFDLEVBQUU7d0JBQ1YsNkJBQTZCO3dCQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUM7d0JBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ2hCO2lCQUNGO2dCQUVELDBEQUEwRDtnQkFDMUQsNkRBQTZEO2dCQUM3RCx5REFBeUQ7Z0JBQ3pELElBQUksT0FBTyxDQUFDLElBQUk7b0JBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRWhDLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFO29CQUM5QixhQUFhLENBQUMsb0JBQW9CLFFBQVEsR0FBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDO29CQUN4RCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUNwRCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3JDLElBQUksUUFBUTt3QkFDVixXQUFXLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztvQkFDbkMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN0RCxJQUFJLElBQUk7d0JBQ04sSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDakM7YUFDRjtZQUVELG1FQUFtRTtZQUNuRSxJQUFJLFFBQVE7Z0JBQ1YsUUFBUSxFQUFFLENBQUM7WUFFYixLQUFLLGlGQUFrQixDQUFDLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUM7UUFFRixLQUFLLGlGQUFrQixDQUFDO1lBQ3RCLElBQUksRUFBRSxpQkFBaUI7WUFDdkIsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJO1lBQ3JCLFdBQVcsRUFBRSxXQUFXO1NBQ3pCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFpQyxFQUFFLEVBQUU7WUFDNUMsdUNBQXVDO1lBQ3ZDLElBQUksUUFBUSxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUU7Z0JBQ3JDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixPQUFPO2FBQ1I7WUFDRCxRQUFRLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO2dCQUNqRCxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFVBQVUsQ0FBQyxRQUFnQjtRQUN6QixJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsS0FBSyxTQUFTO1lBQ3JDLE9BQU87UUFFVCxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzVDLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0MsSUFBSSxRQUFRLEtBQUssQ0FBQyxDQUFDO1lBQ2pCLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMxQyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHO1lBQzVCLFFBQVEsSUFBSSxHQUFHLENBQUM7UUFDbEIsTUFBTSxRQUFRLEdBQUcsUUFBUSxHQUFHLFFBQVEsR0FBRyxRQUFRLEdBQUcsR0FBRyxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDMUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBQ0QsWUFBWSxDQUFDLEdBQVc7UUFDdEIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoRCxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLElBQUk7WUFDTixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFDRCxhQUFhLENBQUMsSUFBWTtRQUN4QixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25DLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLElBQUk7WUFDTixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFDRCxjQUFjLENBQUMsT0FBb0IsRUFBRSxXQUE2QixFQUFFLFFBQTBCO1FBQzVGLDREQUE0RDtRQUM1RCx1REFBdUQ7UUFDdkQsNkRBQTZEO1FBQzdELHdCQUF3QjtRQUN4QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO2dCQUN0QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekQsT0FBTztTQUNSO1FBRUQsMENBQTBDO1FBQzFDLElBQUksQ0FBQyxRQUFRO1lBQ1gsT0FBTztRQUVULE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQy9DLEtBQUssTUFBTSxHQUFHLElBQUksZUFBZSxFQUFFO1lBQ2pDLHlEQUF5RDtZQUV6RCxJQUFJLEtBQUssR0FBcUIsR0FBRyxDQUFDLE9BQU8sQ0FBQztZQUMxQyxJQUFJLE9BQU8sV0FBVyxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQ2xFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxXQUFXLEVBQUU7b0JBQ3pCLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ3JDLElBQUksUUFBUSxLQUFLLFNBQVM7d0JBQ3hCLEtBQUssR0FBRyxRQUFRLENBQUM7aUJBQ3BCO2FBQ0Y7WUFFRCwwRUFBMEU7WUFDMUUsc0RBQXNEO1lBQ3RELCtEQUErRDtZQUMvRCxJQUFJLEdBQUcsQ0FBQyxVQUFVLEVBQUU7Z0JBQ2xCLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ2hDO2lCQUFNLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7Z0JBQ2pDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUTtvQkFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO3FCQUNqQyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVE7b0JBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3JDO2lCQUFNLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7Z0JBQy9CLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUTtvQkFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7cUJBQ3JCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUTtvQkFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdkM7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDekI7U0FDRjtRQUVELHdFQUF3RTtRQUN4RSxtREFBbUQ7UUFDbkQsSUFBSSxRQUFRLENBQUMsbUJBQW1CO1lBQzlCLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUNELGFBQWEsQ0FBQyxJQUFVO1FBQ3RCLE1BQU0sVUFBVSxHQUFHO1lBQ2pCLEVBQUUsRUFBRSx5Q0FBeUM7WUFDN0MsRUFBRSxFQUFFLG1EQUFtRDtZQUN2RCxFQUFFLEVBQUUsb0RBQW9EO1lBQ3hELEVBQUUsRUFBRSxtQ0FBbUM7WUFDdkMsRUFBRSxFQUFFLDRCQUE0QjtZQUNoQyxFQUFFLEVBQUUscUNBQXFDO1NBQzFDLENBQUM7UUFFRixNQUFNLEVBQUUsR0FBRyx1QkFBdUIsQ0FBQztRQUNuQyxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QyxRQUFRLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUNqQixRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMvQiw4RUFBOEU7WUFDOUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1lBQ2hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsUUFBUSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVELENBQUM7Q0FDRjtBQUVELGlFQUFlLElBQUksVUFBVSxFQUFFLEVBQUM7QUFHaEMsSUFBSSxPQUFPLFFBQVEsS0FBSyxXQUFXLEVBQUU7SUFDbkMsa0ZBQWtGO0lBQ2xGLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQ3RELE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDO1FBQ3hELElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRO1lBQ25CLFlBQVksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDOztZQUVoRCxZQUFZLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztDQUNKOzs7Ozs7Ozs7OztBQ25lRCw2RkFBNkY7QUFDN0YsTUFBTSxhQUFhLEdBQXdCO0lBQ3pDLElBQUksRUFBRSxDQUFDO0lBQ1AsR0FBRyxFQUFFLENBQUM7SUFDTixHQUFHLEVBQUUsQ0FBQztJQUNOLEdBQUcsRUFBRSxDQUFDO0lBQ04sR0FBRyxFQUFFLENBQUM7SUFDTixHQUFHLEVBQUUsQ0FBQztJQUNOLEdBQUcsRUFBRSxDQUFDO0lBQ04sR0FBRyxFQUFFLENBQUM7SUFDTixHQUFHLEVBQUUsQ0FBQztJQUNOLEdBQUcsRUFBRSxDQUFDO0lBQ04sR0FBRyxFQUFFLEVBQUU7SUFDUCxHQUFHLEVBQUUsRUFBRTtJQUNQLEdBQUcsRUFBRSxFQUFFO0lBQ1AsR0FBRyxFQUFFLEVBQUU7SUFDUCxHQUFHLEVBQUUsRUFBRTtJQUNQLEdBQUcsRUFBRSxFQUFFO0lBQ1AsR0FBRyxFQUFFLEVBQUU7SUFDUCxHQUFHLEVBQUUsRUFBRTtJQUNQLEdBQUcsRUFBRSxFQUFFO0lBQ1AsR0FBRyxFQUFFLEVBQUU7SUFDUCxHQUFHLEVBQUUsRUFBRTtJQUNQLEdBQUcsRUFBRSxFQUFFO0lBQ1AsR0FBRyxFQUFFLEVBQUU7SUFDUCxHQUFHLEVBQUUsRUFBRTtJQUNQLEdBQUcsRUFBRSxFQUFFO0lBQ1AsR0FBRyxFQUFFLEVBQUU7SUFDUCxHQUFHLEVBQUUsRUFBRTtJQUNQLEdBQUcsRUFBRSxFQUFFO0lBQ1AsR0FBRyxFQUFFLEVBQUU7SUFDUCxHQUFHLEVBQUUsRUFBRTtJQUNQLEdBQUcsRUFBRSxFQUFFO0lBQ1AsR0FBRyxFQUFFLEVBQUU7SUFDUCxHQUFHLEVBQUUsRUFBRTtJQUNQLEdBQUcsRUFBRSxFQUFFO0lBQ1AsR0FBRyxFQUFFLEVBQUU7SUFDUCxHQUFHLEVBQUUsRUFBRTtJQUNQLEdBQUcsRUFBRSxFQUFFO0lBQ1AsR0FBRyxFQUFFLEVBQUU7SUFDUCxHQUFHLEVBQUUsRUFBRTtDQUNSLENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBVSxDQUFDO0FBQ3BELE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQVcsQ0FBQztBQUVwRixNQUFNLFFBQVEsR0FBVSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbkUsTUFBTSxVQUFVLEdBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN2RCxNQUFNLFlBQVksR0FBVSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzlFLE1BQU0sYUFBYSxHQUFVLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDMUQsTUFBTSxhQUFhLEdBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3hFLE1BQU0sT0FBTyxHQUFVLENBQUMsR0FBRyxZQUFZLEVBQUUsR0FBRyxhQUFhLEVBQUUsR0FBRyxhQUFhLENBQUMsQ0FBQztBQUM3RSxNQUFNLFlBQVksR0FBVSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNyRixNQUFNLGFBQWEsR0FBVSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFbkQsTUFBTSxRQUFRLEdBQVUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxRQUFRLEVBQUUsR0FBRyxZQUFZLENBQUMsQ0FBQztBQUM5RCxNQUFNLFdBQVcsR0FBVSxDQUFDLEtBQUssRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLGFBQWEsQ0FBQyxDQUFDO0FBQ2xFLE1BQU0sU0FBUyxHQUFVLENB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NEc7Ozs7O1VDOUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0EiLCJmaWxlIjoidWkvcmFpZGJvc3MvcmFpZGVtdWxhdG9yLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhcnR5IH0gZnJvbSAnLi4vdHlwZXMvZXZlbnQnO1xyXG5pbXBvcnQgeyBKb2IsIFJvbGUgfSBmcm9tICcuLi90eXBlcy9qb2InO1xyXG5pbXBvcnQgVXRpbCBmcm9tICcuL3V0aWwnO1xyXG5cclxuY29uc3QgZW1wdHlSb2xlVG9QYXJ0eU5hbWVzID0gKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB0YW5rOiBbXSxcclxuICAgIGhlYWxlcjogW10sXHJcbiAgICBkcHM6IFtdLFxyXG4gICAgY3JhZnRlcjogW10sXHJcbiAgICBnYXRoZXJlcjogW10sXHJcbiAgICBub25lOiBbXSxcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFydHlUcmFja2VyIHtcclxuICBkZXRhaWxzOiBQYXJ0eVtdID0gW107XHJcbiAgcGFydHlOYW1lc186IHN0cmluZ1tdID0gW107XHJcbiAgcGFydHlJZHNfOiBzdHJpbmdbXSA9IFtdO1xyXG4gIGFsbGlhbmNlTmFtZXNfOiBzdHJpbmdbXSA9IFtdO1xyXG4gIGFsbGlhbmNlSWRzXzogc3RyaW5nW10gPSBbXTtcclxuICBuYW1lVG9Sb2xlXzogeyBbbmFtZTogc3RyaW5nXTogUm9sZSB9ID0ge307XHJcbiAgaWRUb05hbWVfOiB7IFtpZDogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcclxuICByb2xlVG9QYXJ0eU5hbWVzXzogUmVjb3JkPFJvbGUsIHN0cmluZ1tdPiA9IGVtcHR5Um9sZVRvUGFydHlOYW1lcygpO1xyXG5cclxuICAvLyBCaW5kIHRoaXMgdG8gUGFydHlDaGFuZ2VkIGV2ZW50cy5cclxuICBvblBhcnR5Q2hhbmdlZChlOiB7IHBhcnR5OiBQYXJ0eVtdIH0pOiB2b2lkIHtcclxuICAgIGlmICghZSB8fCAhZS5wYXJ0eSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIHRoaXMucmVzZXQoKTtcclxuICAgIHRoaXMuZGV0YWlscyA9IGUucGFydHk7XHJcblxyXG4gICAgZm9yIChjb25zdCBwIG9mIGUucGFydHkpIHtcclxuICAgICAgdGhpcy5hbGxpYW5jZUlkc18ucHVzaChwLmlkKTtcclxuICAgICAgdGhpcy5hbGxpYW5jZU5hbWVzXy5wdXNoKHAubmFtZSk7XHJcbiAgICAgIGNvbnN0IGpvYk5hbWUgPSBVdGlsLmpvYkVudW1Ub0pvYihwLmpvYik7XHJcbiAgICAgIGNvbnN0IHJvbGUgPSBVdGlsLmpvYlRvUm9sZShqb2JOYW1lKTtcclxuICAgICAgdGhpcy5pZFRvTmFtZV9bcC5pZF0gPSBwLm5hbWU7XHJcbiAgICAgIHRoaXMubmFtZVRvUm9sZV9bcC5uYW1lXSA9IHJvbGU7XHJcbiAgICAgIGlmIChwLmluUGFydHkpIHtcclxuICAgICAgICB0aGlzLnBhcnR5SWRzXy5wdXNoKHAuaWQpO1xyXG4gICAgICAgIHRoaXMucGFydHlOYW1lc18ucHVzaChwLm5hbWUpO1xyXG4gICAgICAgIHRoaXMucm9sZVRvUGFydHlOYW1lc19bcm9sZV0ucHVzaChwLm5hbWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXNldCgpOiB2b2lkIHtcclxuICAgIC8vIG9yaWdpbmFsIGV2ZW50IGRhdGFcclxuICAgIHRoaXMuZGV0YWlscyA9IFtdO1xyXG4gICAgdGhpcy5wYXJ0eU5hbWVzXyA9IFtdO1xyXG4gICAgdGhpcy5wYXJ0eUlkc18gPSBbXTtcclxuICAgIHRoaXMuYWxsaWFuY2VOYW1lc18gPSBbXTtcclxuICAgIHRoaXMuYWxsaWFuY2VJZHNfID0gW107XHJcbiAgICB0aGlzLm5hbWVUb1JvbGVfID0ge307XHJcbiAgICB0aGlzLmlkVG9OYW1lXyA9IHt9O1xyXG5cclxuICAgIC8vIHJvbGUgLT4gW25hbWVzXSBidXQgb25seSBmb3IgcGFydHlcclxuICAgIHRoaXMucm9sZVRvUGFydHlOYW1lc18gPSBlbXB0eVJvbGVUb1BhcnR5TmFtZXMoKTtcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIG5hbWVzIG9mIHBsYXllcnMgaW4geW91ciBpbW1lZGlhdGUgcGFydHlcclxuICBnZXQgcGFydHlOYW1lcygpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5wYXJ0eU5hbWVzXztcclxuICB9XHJcblxyXG4gIGdldCBwYXJ0eUlkcygpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5wYXJ0eUlkc187XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBuYW1lcyBvZiBwbGF5ZXJzIGluIHlvdXIgYWxsaWFuY2VcclxuICBnZXQgYWxsaWFuY2VOYW1lcygpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5hbGxpYW5jZU5hbWVzXztcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIG5hbWVzIG9mIHRhbmtzIGluIHlvdXIgaW1tZWRpYXRlIHBhcnR5XHJcbiAgZ2V0IHRhbmtOYW1lcygpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5yb2xlVG9QYXJ0eU5hbWVzX1sndGFuayddO1xyXG4gIH1cclxuXHJcbiAgLy8gcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgbmFtZXMgb2YgaGVhbGVycyBpbiB5b3VyIGltbWVkaWF0ZSBwYXJ0eVxyXG4gIGdldCBoZWFsZXJOYW1lcygpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5yb2xlVG9QYXJ0eU5hbWVzX1snaGVhbGVyJ107XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBuYW1lcyBvZiBkcHMgcGxheWVycyBpbiB5b3VyIGltbWVkaWF0ZSBwYXJ0eVxyXG4gIGdldCBkcHNOYW1lcygpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5yb2xlVG9QYXJ0eU5hbWVzX1snZHBzJ107XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIHRydWUgaWYgdGhlIG5hbWVkIHBsYXllciBpbiB5b3VyIGFsbGlhbmNlIGlzIGEgcGFydGljdWxhciByb2xlXHJcbiAgaXNSb2xlKG5hbWU6IHN0cmluZywgcm9sZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5uYW1lVG9Sb2xlX1tuYW1lXSA9PT0gcm9sZTtcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgbmFtZWQgcGxheWVyIGluIHlvdXIgYWxsaWFuY2UgaXMgYSB0YW5rXHJcbiAgaXNUYW5rKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNSb2xlKG5hbWUsICd0YW5rJyk7XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIHRydWUgaWYgdGhlIG5hbWVkIHBsYXllciBpbiB5b3VyIGFsbGlhbmNlIGlzIGEgaGVhbGVyXHJcbiAgaXNIZWFsZXIobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5pc1JvbGUobmFtZSwgJ2hlYWxlcicpO1xyXG4gIH1cclxuXHJcbiAgLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBuYW1lZCBwbGF5ZXIgaW4geW91ciBhbGxpYW5jZSBpcyBhIGRwc1xyXG4gIGlzRFBTKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNSb2xlKG5hbWUsICdkcHMnKTtcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgbmFtZWQgcGxheWVyIGlzIGluIHlvdXIgaW1tZWRpYXRlIHBhcnR5XHJcbiAgaW5QYXJ0eShuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnBhcnR5TmFtZXMuaW5jbHVkZXMobmFtZSk7XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIHRydWUgaWYgdGhlIG5hbWVkIHBsYXllciBpcyBpbiB5b3VyIGFsbGlhbmNlXHJcbiAgaW5BbGxpYW5jZShuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmFsbGlhbmNlTmFtZXMuaW5jbHVkZXMobmFtZSk7XHJcbiAgfVxyXG5cclxuICAvLyBmb3IgYSBuYW1lZCBwbGF5ZXIsIHJldHVybnMgdGhlIG90aGVyIHRhbmsgaW4geW91ciBpbW1lZGlhdGUgcGFydHlcclxuICAvLyBpZiBuYW1lZCBwbGF5ZXIgaXMgbm90IGEgdGFuaywgb3IgdGhlcmUncyBub3QgZXhhY3RseSB0d28gdGFua3NcclxuICAvLyBpbiB5b3VyIGltbWVkaWF0ZSBwYXJ0eSwgcmV0dXJucyBudWxsLlxyXG4gIG90aGVyVGFuayhuYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3QgbmFtZXMgPSB0aGlzLnRhbmtOYW1lcztcclxuICAgIGlmIChuYW1lcy5sZW5ndGggIT09IDIpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGlmIChuYW1lc1swXSA9PT0gbmFtZSlcclxuICAgICAgcmV0dXJuIG5hbWVzWzFdO1xyXG4gICAgaWYgKG5hbWVzWzFdID09PSBuYW1lKVxyXG4gICAgICByZXR1cm4gbmFtZXNbMF07XHJcbiAgfVxyXG5cclxuICAvLyBzZWU6IG90aGVyVGFuaywgYnV0IGZvciBoZWFsZXJzLlxyXG4gIG90aGVySGVhbGVyKG5hbWU6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCBuYW1lcyA9IHRoaXMucm9sZVRvUGFydHlOYW1lc19bJ2hlYWxlciddO1xyXG4gICAgaWYgKG5hbWVzLmxlbmd0aCAhPT0gMilcclxuICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKG5hbWVzWzBdID09PSBuYW1lKVxyXG4gICAgICByZXR1cm4gbmFtZXNbMV07XHJcbiAgICBpZiAobmFtZXNbMV0gPT09IG5hbWUpXHJcbiAgICAgIHJldHVybiBuYW1lc1swXTtcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgdGhlIGpvYiBuYW1lIG9mIHRoZSBzcGVjaWZpZWQgcGFydHkgbWVtYmVyXHJcbiAgam9iTmFtZShuYW1lOiBzdHJpbmcpOiBKb2IgfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3QgcGFydHlJbmRleCA9IHRoaXMucGFydHlOYW1lcy5pbmRleE9mKG5hbWUpO1xyXG4gICAgaWYgKHBhcnR5SW5kZXggPj0gMClcclxuICAgICAgcmV0dXJuIFV0aWwuam9iRW51bVRvSm9iKHRoaXMuZGV0YWlsc1twYXJ0eUluZGV4XT8uam9iIGFzIG51bWJlcik7XHJcbiAgfVxyXG5cclxuICBuYW1lRnJvbUlkKGlkOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuaWRUb05hbWVfW2lkXTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZU9wdGlvbnMsIFJhaWRib3NzRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVzL2RhdGEnO1xyXG5pbXBvcnQgVXNlckNvbmZpZyBmcm9tICcuLi8uLi9yZXNvdXJjZXMvdXNlcl9jb25maWcnO1xyXG5pbXBvcnQgeyBMYW5nIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL2xhbmd1YWdlcyc7XHJcbmltcG9ydCB7IExvb3NlVHJpZ2dlciwgTWF0Y2hlc0FueSwgVHJpZ2dlckF1dG9Db25maWcsIFRyaWdnZXJGaWVsZCwgVHJpZ2dlck91dHB1dCB9IGZyb20gJy4uLy4uL3R5cGVzL3RyaWdnZXInO1xyXG5cclxuLy8gVGhpcyBmaWxlIGRlZmluZXMgdGhlIGJhc2Ugb3B0aW9ucyB0aGF0IHJhaWRib3NzIGV4cGVjdHMgdG8gc2VlLlxyXG5cclxuLy8gQmFja3dhcmRzIGNvbXBhdCBmb3IgdGhpcyBvbGQgc3R5bGUgb2Ygb3ZlcnJpZGluZyB0cmlnZ2Vycy5cclxuLy8gVE9ETzogd2Ugc2hvdWxkIHByb2JhYmx5IGRlcHJlY2F0ZSBhbmQgcmVtb3ZlIHRoaXMuXHJcbmV4cG9ydCB0eXBlIFBlclRyaWdnZXJPcHRpb24gPSBQYXJ0aWFsPHtcclxuICBUZXh0QWxlcnQ6IGJvb2xlYW47XHJcbiAgU291bmRBbGVydDogYm9vbGVhbjtcclxuICBTcGVlY2hBbGVydDogYm9vbGVhbjtcclxuICBHcm91cFNwZWVjaEFsZXJ0OiBib29sZWFuOyAvLyBUT0RPOiB3ZSBzaG91bGQgcmVtb3ZlIHRoaXNcclxuICBTb3VuZE92ZXJyaWRlOiBzdHJpbmc7XHJcbiAgVm9sdW1lT3ZlcnJpZGU6IG51bWJlcjtcclxuICBDb25kaXRpb246IFRyaWdnZXJGaWVsZDxSYWlkYm9zc0RhdGEsIGJvb2xlYW4+O1xyXG4gIEluZm9UZXh0OiBUcmlnZ2VyT3V0cHV0PFJhaWRib3NzRGF0YSwgTWF0Y2hlc0FueT47XHJcbiAgQWxlcnRUZXh0OiBUcmlnZ2VyT3V0cHV0PFJhaWRib3NzRGF0YSwgTWF0Y2hlc0FueT47XHJcbiAgQWxhcm1UZXh0OiBUcmlnZ2VyT3V0cHV0PFJhaWRib3NzRGF0YSwgTWF0Y2hlc0FueT47XHJcbiAgVFRTVGV4dDogVHJpZ2dlck91dHB1dDxSYWlkYm9zc0RhdGEsIE1hdGNoZXNBbnk+O1xyXG59PjtcclxuXHJcbmV4cG9ydCB0eXBlIFBlclRyaWdnZXJBdXRvQ29uZmlnID0geyBbdHJpZ2dlcklkOiBzdHJpbmddOiBUcmlnZ2VyQXV0b0NvbmZpZyB9O1xyXG5leHBvcnQgdHlwZSBQZXJUcmlnZ2VyT3B0aW9ucyA9IHsgW3RyaWdnZXJJZDogc3RyaW5nXTogUGVyVHJpZ2dlck9wdGlvbiB9O1xyXG5leHBvcnQgdHlwZSBEaXNhYmxlZFRyaWdnZXJzID0geyBbdHJpZ2dlcklkOiBzdHJpbmddOiBib29sZWFuIH07XHJcblxyXG50eXBlIFJhaWRib3NzTm9uQ29uZmlnT3B0aW9ucyA9IHtcclxuICBQbGF5ZXJOaWNrczogeyBbZ2FtZU5hbWU6IHN0cmluZ106IHN0cmluZyB9O1xyXG4gIEluZm9Tb3VuZDogc3RyaW5nO1xyXG4gIEFsZXJ0U291bmQ6IHN0cmluZztcclxuICBBbGFybVNvdW5kOiBzdHJpbmc7XHJcbiAgTG9uZ1NvdW5kOiBzdHJpbmc7XHJcbiAgUHVsbFNvdW5kOiBzdHJpbmc7XHJcbiAgQXVkaW9BbGxvd2VkOiBib29sZWFuO1xyXG4gIERpc2FibGVkVHJpZ2dlcnM6IERpc2FibGVkVHJpZ2dlcnM7XHJcbiAgUGVyVHJpZ2dlckF1dG9Db25maWc6IFBlclRyaWdnZXJBdXRvQ29uZmlnO1xyXG4gIFBlclRyaWdnZXJPcHRpb25zOiBQZXJUcmlnZ2VyT3B0aW9ucztcclxuICBUcmlnZ2VyczogTG9vc2VUcmlnZ2VyW107XHJcbiAgUGxheWVyTmFtZU92ZXJyaWRlPzogc3RyaW5nO1xyXG4gIElzUmVtb3RlUmFpZGJvc3M6IGJvb2xlYW47XHJcbiAgLy8gVHJhbnNmb3JtcyB0ZXh0IGJlZm9yZSBwYXNzaW5nIGl0IHRvIFRUUy5cclxuICBUcmFuc2Zvcm1UdHM6ICh0ZXh0OiBzdHJpbmcpID0+IHN0cmluZztcclxufTtcclxuXHJcbi8vIFRoZXNlIG9wdGlvbnMgYXJlIG9uZXMgdGhhdCBhcmUgbm90IGF1dG8tZGVmaW5lZCBieSByYWlkYm9zc19jb25maWcuanMuXHJcbmNvbnN0IGRlZmF1bHRSYWlkYm9zc05vbkNvbmZpZ09wdGlvbnM6IFJhaWRib3NzTm9uQ29uZmlnT3B0aW9ucyA9IHtcclxuICBQbGF5ZXJOaWNrczoge30sXHJcblxyXG4gIEluZm9Tb3VuZDogJy4uLy4uL3Jlc291cmNlcy9zb3VuZHMvZnJlZXNvdW5kL3BlcmN1c3Npb25faGl0Lm9nZycsXHJcbiAgQWxlcnRTb3VuZDogJy4uLy4uL3Jlc291cmNlcy9zb3VuZHMvQmlnV2lncy9BbGVydC5vZ2cnLFxyXG4gIEFsYXJtU291bmQ6ICcuLi8uLi9yZXNvdXJjZXMvc291bmRzL0JpZ1dpZ3MvQWxhcm0ub2dnJyxcclxuICBMb25nU291bmQ6ICcuLi8uLi9yZXNvdXJjZXMvc291bmRzL0JpZ1dpZ3MvTG9uZy5vZ2cnLFxyXG4gIFB1bGxTb3VuZDogJy4uLy4uL3Jlc291cmNlcy9zb3VuZHMvZnJlZXNvdW5kL3NvbmFyLm9nZycsXHJcblxyXG4gIEF1ZGlvQWxsb3dlZDogdHJ1ZSxcclxuXHJcbiAgRGlzYWJsZWRUcmlnZ2Vyczoge30sXHJcblxyXG4gIFBlclRyaWdnZXJBdXRvQ29uZmlnOiB7fSxcclxuICBQZXJUcmlnZ2VyT3B0aW9uczoge30sXHJcblxyXG4gIFRyaWdnZXJzOiBbXSxcclxuXHJcbiAgSXNSZW1vdGVSYWlkYm9zczogZmFsc2UsXHJcblxyXG4gIFRyYW5zZm9ybVR0czogKHQpID0+IHQsXHJcbn07XHJcblxyXG4vLyBUT0RPOiBmaWd1cmUgb3V0IGhvdyB0byBnZXQgdGhpcyB0eXBlIGZyb20gcmFpZGJvc3NfY29uZmlnPz9cclxuLy8gVGhlc2UgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbiBhbmQgYXJlIGp1c3QgaGVyZSBmb3IgdHlwaW5nLlxyXG5jb25zdCBkZWZhdWx0UmFpZGJvc3NDb25maWdPcHRpb25zID0ge1xyXG4gIERlYnVnOiBmYWxzZSxcclxuICBEZWZhdWx0QWxlcnRPdXRwdXQ6ICd0ZXh0QW5kU291bmQnLFxyXG4gIEFsZXJ0c0xhbmd1YWdlOiB1bmRlZmluZWQgYXMgKExhbmcgfCB1bmRlZmluZWQpLFxyXG4gIFRpbWVsaW5lTGFuZ3VhZ2U6IHVuZGVmaW5lZCBhcyAoTGFuZyB8IHVuZGVmaW5lZCksXHJcbiAgVGltZWxpbmVFbmFibGVkOiB0cnVlLFxyXG4gIEFsZXJ0c0VuYWJsZWQ6IHRydWUsXHJcbiAgU2hvd1RpbWVyQmFyc0F0U2Vjb25kczogMzAsXHJcbiAgS2VlcEV4cGlyZWRUaW1lckJhcnNGb3JTZWNvbmRzOiAwLjcsXHJcbiAgQmFyRXhwaXJlc1Nvb25TZWNvbmRzOiA2LFxyXG4gIE1heE51bWJlck9mVGltZXJCYXJzOiA2LFxyXG4gIERpc3BsYXlBbGFybVRleHRGb3JTZWNvbmRzOiAzLFxyXG4gIERpc3BsYXlBbGVydFRleHRGb3JTZWNvbmRzOiAzLFxyXG4gIERpc3BsYXlJbmZvVGV4dEZvclNlY29uZHM6IDMsXHJcbiAgQWxhcm1Tb3VuZFZvbHVtZTogMSxcclxuICBBbGVydFNvdW5kVm9sdW1lOiAxLFxyXG4gIEluZm9Tb3VuZFZvbHVtZTogMSxcclxuICBMb25nU291bmRWb2x1bWU6IDEsXHJcbiAgUHVsbFNvdW5kVm9sdW1lOiAxLFxyXG4gIGNhY3Rib3RXb3JtaG9sZVN0cmF0OiBmYWxzZSxcclxuICBjYWN0Ym90ZThzVXB0aW1lS25vY2tiYWNrU3RyYXQ6IGZhbHNlLFxyXG59O1xyXG50eXBlIFJhaWRib3NzQ29uZmlnT3B0aW9ucyA9IHR5cGVvZiBkZWZhdWx0UmFpZGJvc3NDb25maWdPcHRpb25zO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSYWlkYm9zc09wdGlvbnNcclxuICBleHRlbmRzIEJhc2VPcHRpb25zLCBSYWlkYm9zc05vbkNvbmZpZ09wdGlvbnMsIFJhaWRib3NzQ29uZmlnT3B0aW9ucyB7fVxyXG5cclxuLy8gU2VlIHVzZXIvcmFpZGJvc3MtZXhhbXBsZS5qcyBmb3IgZG9jdW1lbnRhdGlvbi5cclxuY29uc3QgT3B0aW9uczogUmFpZGJvc3NPcHRpb25zID0ge1xyXG4gIC4uLlVzZXJDb25maWcuZ2V0RGVmYXVsdEJhc2VPcHRpb25zKCksXHJcbiAgLi4uZGVmYXVsdFJhaWRib3NzTm9uQ29uZmlnT3B0aW9ucyxcclxuICAuLi5kZWZhdWx0UmFpZGJvc3NDb25maWdPcHRpb25zLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgT3B0aW9ucztcclxuIiwiaW1wb3J0IFBhcnR5VHJhY2tlciBmcm9tICcuLi8uLi9yZXNvdXJjZXMvcGFydHknO1xyXG5pbXBvcnQgUmVnZXhlcyBmcm9tICcuLi8uLi9yZXNvdXJjZXMvcmVnZXhlcyc7XHJcbmltcG9ydCB7IHRyaWdnZXJPdXRwdXRGdW5jdGlvbnMgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvcmVzcG9uc2VzJztcclxuaW1wb3J0IFVzZXJDb25maWcgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3VzZXJfY29uZmlnJztcclxuaW1wb3J0IFV0aWwgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3V0aWwnO1xyXG5pbXBvcnQgcmFpZGJvc3NGaWxlRGF0YSBmcm9tICcuL2RhdGEvcmFpZGJvc3NfbWFuaWZlc3QudHh0JztcclxuaW1wb3J0IHJhaWRib3NzT3B0aW9ucyBmcm9tICcuL3JhaWRib3NzX29wdGlvbnMnO1xyXG5cclxuY29uc3Qga09wdGlvbktleXMgPSB7XHJcbiAgb3V0cHV0OiAnT3V0cHV0JyxcclxuICBkdXJhdGlvbjogJ0R1cmF0aW9uJyxcclxuICBiZWZvcmVTZWNvbmRzOiAnQmVmb3JlU2Vjb25kcycsXHJcbiAgb3V0cHV0U3RyaW5nczogJ091dHB1dFN0cmluZ3MnLFxyXG59O1xyXG5cclxuLy8gTm8gc291bmQgb25seSBvcHRpb24sIGJlY2F1c2UgdGhhdCdzIHNpbGx5LlxyXG5jb25zdCBrVHJpZ2dlck9wdGlvbnMgPSB7XHJcbiAgZGVmYXVsdDoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICfinJQgRGVmYXVsdHMnLFxyXG4gICAgICBkZTogJ+KclCBTdGFuZGFyZHMnLFxyXG4gICAgICBmcjogJ+KclCBEw6lmYXV0cycsXHJcbiAgICAgIGphOiAn4pyUIOWIneacn+ioreWumicsXHJcbiAgICAgIGNuOiAn4pyUIOm7mOiupOiuvue9ricsXHJcbiAgICAgIGtvOiAn4pyUIOq4sOuzuCcsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgdGV4dEFuZFNvdW5kOiB7XHJcbiAgICBsYWJlbDoge1xyXG4gICAgICBlbjogJ/Cfhpnwn5SKIFRleHQgYW5kIFNvdW5kJyxcclxuICAgICAgZGU6ICfwn4aZ8J+UiiBUZXh0IHVuZCBUb24nLFxyXG4gICAgICBmcjogJ/Cfhpnwn5SKIFRleHRlIGV0IHNvbicsXHJcbiAgICAgIGphOiAn8J+GmfCflIog44OG44Kt44K544OI44Go6Z+z5aOwJyxcclxuICAgICAgY246ICfwn4aZ8J+UiiDmloflrZfmmL7npLrkuI7mj5DnpLrpn7MnLFxyXG4gICAgICBrbzogJ/Cfhpnwn5SKIO2FjeyKpO2KuOyZgCDshozrpqwnLFxyXG4gICAgfSxcclxuICB9LFxyXG4gIHR0c0FuZFRleHQ6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAn8J+GmfCfkqwgVGV4dCBhbmQgVFRTJyxcclxuICAgICAgZGU6ICfwn4aZ8J+SrCBUZXh0IHVuZCBUVFMnLFxyXG4gICAgICBmcjogJ/Cfhpnwn5KsIFRleHRlIGV0IFRUUycsXHJcbiAgICAgIGphOiAn8J+GmfCfkqwg44OG44Kt44K544OI44GoVFRTJyxcclxuICAgICAgY246ICfwn4aZ8J+SrCDmloflrZfmmL7npLrkuI5UVFMnLFxyXG4gICAgICBrbzogJ/Cfhpnwn5KsIO2FjeyKpO2KuOyZgCBUVFMnLFxyXG4gICAgfSxcclxuICB9LFxyXG4gIHR0c09ubHk6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAn8J+SrCBUVFMgT25seScsXHJcbiAgICAgIGRlOiAn8J+SrCBOdXIgVFRTJyxcclxuICAgICAgZnI6ICfwn5KsIFRUUyBTZXVsZW1lbnQnLFxyXG4gICAgICBqYTogJ/CfkqwgVFRT44Gu44G/JyxcclxuICAgICAgY246ICfwn5KsIOWPquS9v+eUqFRUUycsXHJcbiAgICAgIGtvOiAn8J+SrCBUVFPrp4wnLFxyXG4gICAgfSxcclxuICB9LFxyXG4gIHRleHRPbmx5OiB7XHJcbiAgICBsYWJlbDoge1xyXG4gICAgICBlbjogJ/CfhpkgVGV4dCBPbmx5JyxcclxuICAgICAgZGU6ICfwn4aZIE51ciBUZXh0JyxcclxuICAgICAgZnI6ICfwn4aZIFRleHRlIHNldWxlbWVudCcsXHJcbiAgICAgIGphOiAn8J+GmSDjg4bjgq3jgrnjg4jjga7jgb8nLFxyXG4gICAgICBjbjogJ/Cfhpkg5Y+q5L2/55So5paH5a2X5pi+56S6JyxcclxuICAgICAga286ICfwn4aZIO2FjeyKpO2KuOunjCcsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgZGlzYWJsZWQ6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAn4p2MIERpc2FibGVkJyxcclxuICAgICAgZGU6ICfinYwgRGVha3RpdmllcnQnLFxyXG4gICAgICBmcjogJ+KdjCBEw6lzYWN0aXbDqScsXHJcbiAgICAgIGphOiAn4p2MIOeEoeWKuScsXHJcbiAgICAgIGNuOiAn4p2MIOemgeeUqCcsXHJcbiAgICAgIGtvOiAn4p2MIOu5hO2ZnOyEse2ZlCcsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn07XHJcblxyXG5jb25zdCBrRGV0YWlsS2V5cyA9IHtcclxuICAndHJpZ2dlclJlZ2V4Jzoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICdyZWdleCcsXHJcbiAgICAgIGRlOiAncmVnZXgnLFxyXG4gICAgICBmcjogJ3JlZ2V4JyxcclxuICAgICAgamE6ICfmraPopo/ooajnj74nLFxyXG4gICAgICBjbjogJ+ato+WImeihqOi+vuW8jycsXHJcbiAgICAgIGtvOiAn7KCV6rec7IudJyxcclxuICAgIH0sXHJcbiAgICBjbHM6ICdyZWdleC10ZXh0JyxcclxuICAgIGRlYnVnT25seTogdHJ1ZSxcclxuICB9LFxyXG4gICd0cmlnZ2VyTmV0UmVnZXgnOiB7XHJcbiAgICBsYWJlbDoge1xyXG4gICAgICBlbjogJ25ldHJlZ2V4JyxcclxuICAgICAgZGU6ICduZXRyZWdleCcsXHJcbiAgICAgIGZyOiAnbmV0cmVnZXgnLFxyXG4gICAgICBqYTogJ+ODjeODg+ODiOato+imj+ihqOePvicsXHJcbiAgICAgIGNuOiAn572R57uc5pel5b+X5q2j5YiZ6KGo6L6+5byPJyxcclxuICAgIH0sXHJcbiAgICBjbHM6ICdyZWdleC10ZXh0JyxcclxuICAgIGRlYnVnT25seTogdHJ1ZSxcclxuICB9LFxyXG4gICd0aW1lbGluZVJlZ2V4Jzoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICd0aW1lbGluZScsXHJcbiAgICAgIGRlOiAndGltZWxpbmUnLFxyXG4gICAgICBmcjogJ3RpbWVsaW5lJyxcclxuICAgICAgamE6ICfjgr/jgqTjg6Djg6njgqTjg7MnLFxyXG4gICAgICBjbjogJ+aXtumXtOi9tCcsXHJcbiAgICAgIGtvOiAn7YOA7J6E65287J24JyxcclxuICAgIH0sXHJcbiAgICBjbHM6ICdyZWdleC10ZXh0JyxcclxuICAgIGRlYnVnT25seTogdHJ1ZSxcclxuICB9LFxyXG4gICdiZWZvcmVTZWNvbmRzJzoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICdiZWZvcmUgKHNlYyknLFxyXG4gICAgICBkZTogJ1ZvcmhlciAoU2VrdW5kZW4pJyxcclxuICAgICAgZnI6ICdhdmFudCAoc2Vjb25kZSknLFxyXG4gICAgICBqYTogJ+OBneOBruWJjeOBqyAo56eSKScsXHJcbiAgICAgIGNuOiAn5o+Q5YmNICjnp5IpJyxcclxuICAgICAga286ICfslZ7ri7nquYAgKOy0iCknLFxyXG4gICAgfSxcclxuICAgIGNsczogJ2JlZm9yZS1zZWNvbmRzLXRleHQnLFxyXG4gICAgZ2VuZXJhdGVkTWFudWFsbHk6IHRydWUsXHJcbiAgfSxcclxuICAnY29uZGl0aW9uJzoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICdjb25kaXRpb24nLFxyXG4gICAgICBkZTogJ2NvbmRpdGlvbicsXHJcbiAgICAgIGZyOiAnY29uZGl0aW9uJyxcclxuICAgICAgamE6ICfmnaHku7YnLFxyXG4gICAgICBjbjogJ+adoeS7ticsXHJcbiAgICAgIGtvOiAn7KGw6rG0JyxcclxuICAgIH0sXHJcbiAgICBjbHM6ICdjb25kaXRpb24tdGV4dCcsXHJcbiAgICBkZWJ1Z09ubHk6IHRydWUsXHJcbiAgfSxcclxuICAnZHVyYXRpb24nOiB7XHJcbiAgICBsYWJlbDoge1xyXG4gICAgICBlbjogJ2R1cmF0aW9uIChzZWMpJyxcclxuICAgICAgZGU6ICdEYXVlciAoU2VrdW5kZW4pJyxcclxuICAgICAgZnI6ICdEdXLDqWUgKHNlY29uZGVzKScsXHJcbiAgICAgIGphOiAn5a2Y57aa5pmC6ZaTICjnp5IpJyxcclxuICAgICAgY246ICfmjIHnu63ml7bpl7QgKOenkiknLFxyXG4gICAgICBrbzogJ+yngOyGjSDsi5zqsIQgKOy0iCknLFxyXG4gICAgfSxcclxuICAgIGNsczogJ2R1cmF0aW9uLXRleHQnLFxyXG4gICAgZ2VuZXJhdGVkTWFudWFsbHk6IHRydWUsXHJcbiAgfSxcclxuICAncHJlUnVuJzoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICdwcmVSdW4nLFxyXG4gICAgICBkZTogJ3ByZVJ1bicsXHJcbiAgICAgIGZyOiAncHJlUnVuJyxcclxuICAgICAgamE6ICfjg5fjg6zlrp/ooYwnLFxyXG4gICAgICBjbjogJ+mihOi/kOihjCcsXHJcbiAgICAgIGtvOiAn7IKs7KCEIOyLpO2WiScsXHJcbiAgICB9LFxyXG4gICAgY2xzOiAncHJlcnVuLXRleHQnLFxyXG4gICAgZGVidWdPbmx5OiB0cnVlLFxyXG4gIH0sXHJcbiAgJ2FsYXJtVGV4dCc6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAnYWxhcm0nLFxyXG4gICAgICBkZTogJ2FsYXJtJyxcclxuICAgICAgZnI6ICdhbGFybWUnLFxyXG4gICAgICBqYTogJ+itpuWgsScsXHJcbiAgICAgIGNuOiAn6K2m5oql5paH5pysJyxcclxuICAgICAga286ICfqsr3qs6AnLFxyXG4gICAgfSxcclxuICAgIGNsczogJ2FsYXJtLXRleHQnLFxyXG4gIH0sXHJcbiAgJ2FsZXJ0VGV4dCc6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAnYWxlcnQnLFxyXG4gICAgICBkZTogJ2FsZXJ0JyxcclxuICAgICAgZnI6ICdhbGVydGUnLFxyXG4gICAgICBqYTogJ+itpuWRiicsXHJcbiAgICAgIGNuOiAn6K2m5ZGK5paH5pysJyxcclxuICAgICAga286ICfso7zsnZgnLFxyXG4gICAgfSxcclxuICAgIGNsczogJ2FsZXJ0LXRleHQnLFxyXG4gIH0sXHJcbiAgJ2luZm9UZXh0Jzoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICdpbmZvJyxcclxuICAgICAgZGU6ICdpbmZvJyxcclxuICAgICAgZnI6ICdpbmZvJyxcclxuICAgICAgamE6ICfmg4XloLEnLFxyXG4gICAgICBjbjogJ+S/oeaBr+aWh+acrCcsXHJcbiAgICAgIGtvOiAn7JWI64K0JyxcclxuICAgIH0sXHJcbiAgICBjbHM6ICdpbmZvLXRleHQnLFxyXG4gIH0sXHJcbiAgJ3R0cyc6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAndHRzJyxcclxuICAgICAgZGU6ICd0dHMnLFxyXG4gICAgICBmcjogJ3R0cycsXHJcbiAgICAgIGphOiAnVFRTJyxcclxuICAgICAgY246ICdUVFMnLFxyXG4gICAgICBrbzogJ1RUUycsXHJcbiAgICB9LFxyXG4gICAgY2xzOiAndHRzLXRleHQnLFxyXG4gIH0sXHJcbiAgJ3NvdW5kJzoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICdzb3VuZCcsXHJcbiAgICAgIGRlOiAnc291bmQnLFxyXG4gICAgICBmcjogJ3NvbicsXHJcbiAgICAgIGphOiAn6Z+z5aOwJyxcclxuICAgICAgY246ICfmj5DnpLrpn7MnLFxyXG4gICAgICBrbzogJ+yGjOumrCcsXHJcbiAgICB9LFxyXG4gICAgY2xzOiAnc291bmQtdGV4dCcsXHJcbiAgfSxcclxuICAncnVuJzoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICdydW4nLFxyXG4gICAgICBkZTogJ3J1bicsXHJcbiAgICAgIGZyOiAncnVuJyxcclxuICAgICAgamE6ICflrp/ooYwnLFxyXG4gICAgICBjbjogJ+i/kOihjCcsXHJcbiAgICAgIGtvOiAn7Iuk7ZaJJyxcclxuICAgIH0sXHJcbiAgICBjbHM6ICdydW4tdGV4dCcsXHJcbiAgICBkZWJ1Z09ubHk6IHRydWUsXHJcbiAgfSxcclxufTtcclxuXHJcbmNvbnN0IGtNaXNjVHJhbnNsYXRpb25zID0ge1xyXG4gIC8vIFNob3dzIHVwIGZvciB1bi1zZXQgdmFsdWVzLlxyXG4gIHZhbHVlRGVmYXVsdDoge1xyXG4gICAgZW46ICcoZGVmYXVsdCknLFxyXG4gICAgZGU6ICcoU3RhbmRhcmQpJyxcclxuICAgIGZyOiAnKETDqWZhdXQpJyxcclxuICAgIGphOiAnKOWIneacn+WApCknLFxyXG4gICAgY246ICco6buY6K6k5YC8KScsXHJcbiAgICBrbzogJyjquLDrs7jqsJIpJyxcclxuICB9LFxyXG4gIC8vIFNob3duIHdoZW4gdGhlIFVJIGNhbid0IGRlY2lwaGVyIHRoZSBvdXRwdXQgb2YgYSBmdW5jdGlvbi5cclxuICB2YWx1ZUlzRnVuY3Rpb246IHtcclxuICAgIGVuOiAnKGZ1bmN0aW9uKScsXHJcbiAgICBkZTogJyhGdW5rdGlvbiknLFxyXG4gICAgZnI6ICcoRm9uY3Rpb24pJyxcclxuICAgIGphOiAnKOmWouaVsCknLFxyXG4gICAgY246ICco5Ye95pWwKScsXHJcbiAgICBrbzogJyjtlajsiJgpJyxcclxuICB9LFxyXG4gIC8vIFdhcm5pbmcgbGFiZWwgZm9yIHRyaWdnZXJzIHdpdGhvdXQgaWRzIG9yIG92ZXJyaWRkZW4gdHJpZ2dlcnMuXHJcbiAgd2FybmluZzoge1xyXG4gICAgZW46ICfimqDvuI8gd2FybmluZycsXHJcbiAgICBkZTogJ+KaoO+4jyBXYXJudW5nJyxcclxuICAgIGZyOiAn4pqg77iPIEF0dGVudGlvbicsXHJcbiAgICBqYTogJ+KaoO+4jyDorablkYonLFxyXG4gICAgY246ICfimqDvuI8g6K2m5ZGKJyxcclxuICAgIGtvOiAn4pqg77iPIOyjvOydmCcsXHJcbiAgfSxcclxuICAvLyBTaG93cyB1cCBmb3IgdHJpZ2dlcnMgd2l0aG91dCBpZHMuXHJcbiAgbWlzc2luZ0lkOiB7XHJcbiAgICBlbjogJ21pc3NpbmcgaWQgZmllbGQnLFxyXG4gICAgZGU6ICdGZWhsZW5kZXMgSUQgRmVsZCcsXHJcbiAgICBmcjogJ0NoYW1wIElEIG1hbnF1YW50JyxcclxuICAgIGphOiAnaWTjgYzjgYLjgorjgb7jgZvjgpMnLFxyXG4gICAgY246ICfnvLrlsJFpZOWxnuaApycsXHJcbiAgICBrbzogJ0lEIO2VhOuTnOqwkiDsl4bsnYwnLFxyXG4gIH0sXHJcbiAgLy8gU2hvd3MgdXAgZm9yIHRyaWdnZXJzIHRoYXQgYXJlIG92ZXJyaWRkZW4gYnkgb3RoZXIgdHJpZ2dlcnMuXHJcbiAgb3ZlcnJpZGRlbkJ5RmlsZToge1xyXG4gICAgZW46ICdvdmVycmlkZGVuIGJ5IFwiJHtmaWxlfVwiJyxcclxuICAgIGRlOiAnw5xiZXJzY2hyaWViZW4gZHVyY2ggXCIke2ZpbGV9XCInLFxyXG4gICAgZnI6ICfDiWNyYXPDqShlKSBwYXIgXCIke2ZpbGV9XCInLFxyXG4gICAgamE6ICdcIiR7ZmlsZX1cIuOBq+S4iuabuOOBjeOBvuOBl+OBnycsXHJcbiAgICBjbjogJ+iiq1wiJHtmaWxlfVwi5paH5Lu26KaG55uWJyxcclxuICAgIGtvOiAnXCIke2ZpbGV9XCIg7YyM7J287JeQ7IScIOuNruyWtOyUjOybgCcsXHJcbiAgfSxcclxuICAvLyBPcGVucyB0cmlnZ2VyIGZpbGUgb24gR2l0aHViLlxyXG4gIHZpZXdUcmlnZ2VyU291cmNlOiB7XHJcbiAgICBlbjogJ1ZpZXcgVHJpZ2dlciBTb3VyY2UnLFxyXG4gICAgZGU6ICdaZWlnZSBUcmlnZ2VyIFF1ZWxsZScsXHJcbiAgICBqYTogJ+ODiOODquOCrOODvOOBruOCs+ODvOODieOCkuihqOekuicsXHJcbiAgICBjbjogJ+aYvuekuuinpuWPkeWZqOa6kOeggScsXHJcbiAgICBrbzogJ+2KuOumrOqxsCDstpzsspgg7Je06riwJyxcclxuICB9LFxyXG59O1xyXG5cclxuY29uc3QgdmFsaWREdXJhdGlvbk9yVW5kZWZpbmVkID0gKHZhbCkgPT4ge1xyXG4gIHZhbCA9IHBhcnNlRmxvYXQodmFsKTtcclxuICBpZiAoIWlzTmFOKHZhbCkgJiYgdmFsID49IDApXHJcbiAgICByZXR1cm4gdmFsO1xyXG4gIHJldHVybiB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5jb25zdCBjYW5CZUNvbmZpZ3VyZWQgPSAodHJpZykgPT4gIXRyaWcuaXNNaXNzaW5nSWQgJiYgIXRyaWcub3ZlcnJpZGRlbkJ5RmlsZTtcclxuXHJcbmNvbnN0IGFkZFRyaWdnZXJEZXRhaWwgPSAoY29udGFpbmVyLCBsYWJlbFRleHQsIGRldGFpbFRleHQsIGRldGFpbENscykgPT4ge1xyXG4gIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgbGFiZWwuaW5uZXJUZXh0ID0gbGFiZWxUZXh0O1xyXG4gIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItbGFiZWwnKTtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG5cclxuICBjb25zdCBkZXRhaWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBkZXRhaWwuY2xhc3NMaXN0LmFkZCgndHJpZ2dlci1kZXRhaWwnKTtcclxuICBkZXRhaWwuaW5uZXJUZXh0ID0gZGV0YWlsVGV4dDtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGV0YWlsKTtcclxuXHJcbiAgaWYgKGRldGFpbENscylcclxuICAgIGRldGFpbC5jbGFzc0xpc3QuYWRkKGRldGFpbENscyk7XHJcbn07XHJcblxyXG4vLyBUaGlzIGlzIHVzZWQgYm90aCBmb3IgdG9wIGxldmVsIE9wdGlvbnMgYW5kIGZvciBQZXJUcmlnZ2VyQXV0b0NvbmZpZyBzZXR0aW5ncy5cclxuLy8gVW5mb3J0dW5hdGVseSBkdWUgdG8gcG9vciBkZWNpc2lvbnMgaW4gdGhlIHBhc3QsIFBlclRyaWdnZXJPcHRpb25zIGhhcyBkaWZmZXJlbnRcclxuLy8gZmllbGRzIGhlcmUuICBUaGlzIHNob3VsZCBiZSBmaXhlZC5cclxuZnVuY3Rpb24gc2V0T3B0aW9uc0Zyb21PdXRwdXRWYWx1ZShvcHRpb25zLCB2YWx1ZSkge1xyXG4gIGlmICh2YWx1ZSA9PT0gJ2RlZmF1bHQnKSB7XHJcbiAgICAvLyBOb3RoaW5nLlxyXG4gIH0gZWxzZSBpZiAodmFsdWUgPT09ICd0ZXh0QW5kU291bmQnKSB7XHJcbiAgICBvcHRpb25zLlRleHRBbGVydHNFbmFibGVkID0gdHJ1ZTtcclxuICAgIG9wdGlvbnMuU291bmRBbGVydHNFbmFibGVkID0gdHJ1ZTtcclxuICAgIG9wdGlvbnMuU3Bva2VuQWxlcnRzRW5hYmxlZCA9IGZhbHNlO1xyXG4gIH0gZWxzZSBpZiAodmFsdWUgPT09ICd0dHNBbmRUZXh0Jykge1xyXG4gICAgb3B0aW9ucy5UZXh0QWxlcnRzRW5hYmxlZCA9IHRydWU7XHJcbiAgICBvcHRpb25zLlNvdW5kQWxlcnRzRW5hYmxlZCA9IHRydWU7XHJcbiAgICBvcHRpb25zLlNwb2tlbkFsZXJ0c0VuYWJsZWQgPSB0cnVlO1xyXG4gIH0gZWxzZSBpZiAodmFsdWUgPT09ICd0dHNPbmx5Jykge1xyXG4gICAgb3B0aW9ucy5UZXh0QWxlcnRzRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgb3B0aW9ucy5Tb3VuZEFsZXJ0c0VuYWJsZWQgPSB0cnVlO1xyXG4gICAgb3B0aW9ucy5TcG9rZW5BbGVydHNFbmFibGVkID0gdHJ1ZTtcclxuICB9IGVsc2UgaWYgKHZhbHVlID09PSAndGV4dE9ubHknKSB7XHJcbiAgICBvcHRpb25zLlRleHRBbGVydHNFbmFibGVkID0gdHJ1ZTtcclxuICAgIG9wdGlvbnMuU291bmRBbGVydHNFbmFibGVkID0gZmFsc2U7XHJcbiAgICBvcHRpb25zLlNwb2tlbkFsZXJ0c0VuYWJsZWQgPSBmYWxzZTtcclxuICB9IGVsc2UgaWYgKHZhbHVlID09PSAnZGlzYWJsZWQnKSB7XHJcbiAgICBvcHRpb25zLlRleHRBbGVydHNFbmFibGVkID0gZmFsc2U7XHJcbiAgICBvcHRpb25zLlNvdW5kQWxlcnRzRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgb3B0aW9ucy5TcG9rZW5BbGVydHNFbmFibGVkID0gZmFsc2U7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ3Vua25vd24gb3V0cHV0IHR5cGU6ICcgKyB2YWx1ZSk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBIZWxwZXIgZm9yIGRvaW5nIG5vdGhpbmcgZHVyaW5nIHRyaWdnZXIgZXZhbCwgYnV0IHN0aWxsIHJlY29yZGluZyBhbnlcclxuLy8gY2FsbHMgdG8gYG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB4O2AgdmlhIGNhbGxiYWNrLlxyXG5jbGFzcyBEb05vdGhpbmdGdW5jUHJveHkge1xyXG4gIGNvbnN0cnVjdG9yKG91dHB1dFN0cmluZ3NDYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XHJcbiAgICAgIHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xyXG4gICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gJ3Jlc3BvbnNlT3V0cHV0U3RyaW5ncycpIHtcclxuICAgICAgICAgIG91dHB1dFN0cmluZ3NDYWxsYmFjayh2YWx1ZSk7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElnbm9yZSBvdGhlciBwcm9wZXJ0eSBzZXR0aW5nIGhlcmUuXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBnZXQodGFyZ2V0LCBuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHt9O1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBSYWlkYm9zc0NvbmZpZ3VyYXRvciB7XHJcbiAgY29uc3RydWN0b3IoY2FjdGJvdENvbmZpZ3VyYXRvcikge1xyXG4gICAgdGhpcy5iYXNlID0gY2FjdGJvdENvbmZpZ3VyYXRvcjtcclxuXHJcbiAgICAvLyBUT0RPOiBpcyBpdCB3b3J0aCBhZGRpbmcgdGhlIGNvbXBsZXhpdHkgdG8gcmVmbGVjdCB0aGlzIGNoYW5nZSBpbiB0cmlnZ2VycyB0aGF0IHVzZSBpdD9cclxuICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgd2hlcmUgdXNpbmcgc29tZXRoaW5nIGxpa2UgdnVlIG9yIHJlYWN0IHdvdWxkIGJlIGVhc2llci5cclxuICAgIC8vIEZvciB0aGUgbW9tZW50LCBmb2xrcyBjYW4ganVzdCByZWxvYWQsIGZvciByZWFsLlxyXG4gICAgdGhpcy5hbGVydHNMYW5nID0gdGhpcy5iYXNlLmdldE9wdGlvbigncmFpZGJvc3MnLCAnQWxlcnRzTGFuZ3VhZ2UnLCB0aGlzLmJhc2UubGFuZyk7XHJcbiAgICB0aGlzLnRpbWVsaW5lTGFuZyA9IHRoaXMuYmFzZS5nZXRPcHRpb24oJ3JhaWRib3NzJywgJ1RpbWVsaW5lTGFuZ3VhZ2UnLCB0aGlzLmJhc2UubGFuZyk7XHJcbiAgfVxyXG5cclxuICBidWlsZFVJKGNvbnRhaW5lciwgcmFpZGJvc3NGaWxlcywgdXNlck9wdGlvbnMpIHtcclxuICAgIGNvbnN0IGZpbGVNYXAgPSB0aGlzLnByb2Nlc3NSYWlkYm9zc0ZpbGVzKHJhaWRib3NzRmlsZXMsIHVzZXJPcHRpb25zKTtcclxuXHJcbiAgICBjb25zdCBleHBhbnNpb25EaXZzID0ge307XHJcblxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gZmlsZU1hcCkge1xyXG4gICAgICBjb25zdCBpbmZvID0gZmlsZU1hcFtrZXldO1xyXG4gICAgICAvLyBcImV4cGFuc2lvblwiIGhlcmUgaXMgdGVjaG5pY2FsbHkgc2VjdGlvbiwgd2hpY2ggaW5jbHVkZXMgXCJnZW5lcmFsIHRyaWdnZXJzXCJcclxuICAgICAgLy8gYW5kIG9uZSBzZWN0aW9uIHBlciB1c2VyIGZpbGUuXHJcbiAgICAgIGNvbnN0IGV4cGFuc2lvbiA9IGluZm8uc2VjdGlvbjtcclxuXHJcbiAgICAgIGlmIChPYmplY3Qua2V5cyhpbmZvLnRyaWdnZXJzKS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICBpZiAoIWV4cGFuc2lvbkRpdnNbZXhwYW5zaW9uXSkge1xyXG4gICAgICAgIGNvbnN0IGV4cGFuc2lvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGV4cGFuc2lvbkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWV4cGFuc2lvbi1jb250YWluZXInLCAnY29sbGFwc2VkJyk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGV4cGFuc2lvbkNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIGNvbnN0IGV4cGFuc2lvbkhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGV4cGFuc2lvbkhlYWRlci5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWV4cGFuc2lvbi1oZWFkZXInKTtcclxuICAgICAgICBleHBhbnNpb25IZWFkZXIub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgIGV4cGFuc2lvbkNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKCdjb2xsYXBzZWQnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGV4cGFuc2lvbkhlYWRlci5pbm5lclRleHQgPSBleHBhbnNpb247XHJcbiAgICAgICAgZXhwYW5zaW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGV4cGFuc2lvbkhlYWRlcik7XHJcblxyXG4gICAgICAgIGV4cGFuc2lvbkRpdnNbZXhwYW5zaW9uXSA9IGV4cGFuc2lvbkNvbnRhaW5lcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdHJpZ2dlckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0cmlnZ2VyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItZmlsZS1jb250YWluZXInLCAnY29sbGFwc2VkJyk7XHJcbiAgICAgIGV4cGFuc2lvbkRpdnNbZXhwYW5zaW9uXS5hcHBlbmRDaGlsZCh0cmlnZ2VyQ29udGFpbmVyKTtcclxuXHJcbiAgICAgIGNvbnN0IGhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBoZWFkZXJEaXYuY2xhc3NMaXN0LmFkZCgndHJpZ2dlci1maWxlLWhlYWRlcicpO1xyXG4gICAgICBoZWFkZXJEaXYub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICB0cmlnZ2VyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2NvbGxhcHNlZCcpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgcGFydHMgPSBbaW5mby50aXRsZSwgaW5mby50eXBlLCBpbmZvLnByZWZpeF07XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBpZiAoIXBhcnRzW2ldKVxyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgY29uc3QgcGFydERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHBhcnREaXYuY2xhc3NMaXN0LmFkZCgndHJpZ2dlci1maWxlLWhlYWRlci1wYXJ0Jyk7XHJcbiAgICAgICAgcGFydERpdi5pbm5lclRleHQgPSBwYXJ0c1tpXTtcclxuICAgICAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQocGFydERpdik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRyaWdnZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoaGVhZGVyRGl2KTtcclxuXHJcbiAgICAgIGNvbnN0IHRyaWdnZXJPcHRpb25zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRyaWdnZXJPcHRpb25zLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItZmlsZS1vcHRpb25zJyk7XHJcbiAgICAgIHRyaWdnZXJDb250YWluZXIuYXBwZW5kQ2hpbGQodHJpZ2dlck9wdGlvbnMpO1xyXG5cclxuICAgICAgZm9yIChjb25zdCBpZCBpbiBpbmZvLnRyaWdnZXJzKSB7XHJcbiAgICAgICAgY29uc3QgdHJpZyA9IGluZm8udHJpZ2dlcnNbaWRdO1xyXG5cclxuICAgICAgICAvLyBEb24ndCBjb25zdHJ1Y3QgdHJpZ2dlcnMgdGhhdCB3b24ndCBzaG93IGFueXRoaW5nLlxyXG4gICAgICAgIGxldCBoYXNPdXRwdXRGdW5jID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChjb25zdCBmdW5jIG9mIHRyaWdnZXJPdXRwdXRGdW5jdGlvbnMpIHtcclxuICAgICAgICAgIGlmICh0cmlnW2Z1bmNdKSB7XHJcbiAgICAgICAgICAgIGhhc091dHB1dEZ1bmMgPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFoYXNPdXRwdXRGdW5jICYmICF0aGlzLmJhc2UuZGV2ZWxvcGVyT3B0aW9ucylcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAvLyBCdWlsZCB0aGUgdHJpZ2dlciBsYWJlbC5cclxuICAgICAgICBjb25zdCB0cmlnZ2VyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdHJpZ2dlckRpdi5pbm5lckhUTUwgPSB0cmlnLmlzTWlzc2luZ0lkID8gJyg/Pz8pJyA6IHRyaWcuaWQ7XHJcblxyXG4gICAgICAgIHRyaWdnZXJEaXYuY2xhc3NMaXN0LmFkZCgndHJpZ2dlcicpO1xyXG4gICAgICAgIHRyaWdnZXJPcHRpb25zLmFwcGVuZENoaWxkKHRyaWdnZXJEaXYpO1xyXG5cclxuICAgICAgICAvLyBDb250YWluZXIgZm9yIHRoZSByaWdodCBzaWRlIHVpIChzZWxlY3QgYm94ZXMsIGFsbCBvZiB0aGUgaW5mbykuXHJcbiAgICAgICAgY29uc3QgdHJpZ2dlckRldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0cmlnZ2VyRGV0YWlscy5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWRldGFpbHMnKTtcclxuICAgICAgICB0cmlnZ2VyT3B0aW9ucy5hcHBlbmRDaGlsZCh0cmlnZ2VyRGV0YWlscyk7XHJcblxyXG4gICAgICAgIGlmIChjYW5CZUNvbmZpZ3VyZWQodHJpZykpXHJcbiAgICAgICAgICB0cmlnZ2VyRGV0YWlscy5hcHBlbmRDaGlsZCh0aGlzLmJ1aWxkVHJpZ2dlck9wdGlvbnModHJpZywgdHJpZ2dlckRpdikpO1xyXG5cclxuICAgICAgICBpZiAodHJpZy5pc01pc3NpbmdJZCkge1xyXG4gICAgICAgICAgYWRkVHJpZ2dlckRldGFpbCh0cmlnZ2VyRGV0YWlscyxcclxuICAgICAgICAgICAgICB0aGlzLmJhc2UudHJhbnNsYXRlKGtNaXNjVHJhbnNsYXRpb25zLndhcm5pbmcpLFxyXG4gICAgICAgICAgICAgIHRoaXMuYmFzZS50cmFuc2xhdGUoa01pc2NUcmFuc2xhdGlvbnMubWlzc2luZ0lkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0cmlnLm92ZXJyaWRkZW5CeUZpbGUpIHtcclxuICAgICAgICAgIGNvbnN0IGJhc2VUZXh0ID0gdGhpcy5iYXNlLnRyYW5zbGF0ZShrTWlzY1RyYW5zbGF0aW9ucy5vdmVycmlkZGVuQnlGaWxlKTtcclxuICAgICAgICAgIGNvbnN0IGRldGFpbFRleHQgPSBiYXNlVGV4dC5yZXBsYWNlKCcke2ZpbGV9JywgdHJpZy5vdmVycmlkZGVuQnlGaWxlKTtcclxuICAgICAgICAgIGFkZFRyaWdnZXJEZXRhaWwodHJpZ2dlckRldGFpbHMsXHJcbiAgICAgICAgICAgICAgdGhpcy5iYXNlLnRyYW5zbGF0ZShrTWlzY1RyYW5zbGF0aW9ucy53YXJuaW5nKSxcclxuICAgICAgICAgICAgICBkZXRhaWxUZXh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFwcGVuZCBzb21lIGRldGFpbHMgYWJvdXQgdGhlIHRyaWdnZXIgc28gaXQncyBtb3JlIG9idmlvdXMgd2hhdCBpdCBpcy5cclxuICAgICAgICBmb3IgKGNvbnN0IGRldGFpbEtleSBpbiBrRGV0YWlsS2V5cykge1xyXG4gICAgICAgICAgaWYgKGtEZXRhaWxLZXlzW2RldGFpbEtleV0uZ2VuZXJhdGVkTWFudWFsbHkpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgaWYgKCF0aGlzLmJhc2UuZGV2ZWxvcGVyT3B0aW9ucyAmJiBrRGV0YWlsS2V5c1tkZXRhaWxLZXldLmRlYnVnT25seSlcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICBpZiAoIXRyaWdbZGV0YWlsS2V5XSAmJiAhdHJpZy5vdXRwdXRbZGV0YWlsS2V5XSlcclxuICAgICAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICAgICAgY29uc3QgZGV0YWlsQ2xzID0gW2tEZXRhaWxLZXlzW2RldGFpbEtleV0uY2xzXTtcclxuICAgICAgICAgIGxldCBkZXRhaWxUZXh0O1xyXG4gICAgICAgICAgaWYgKHRyaWcub3V0cHV0W2RldGFpbEtleV0pIHtcclxuICAgICAgICAgICAgZGV0YWlsVGV4dCA9IHRyaWcub3V0cHV0W2RldGFpbEtleV07XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0cmlnW2RldGFpbEtleV0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgZGV0YWlsVGV4dCA9IHRoaXMuYmFzZS50cmFuc2xhdGUoa01pc2NUcmFuc2xhdGlvbnMudmFsdWVJc0Z1bmN0aW9uKTtcclxuICAgICAgICAgICAgZGV0YWlsQ2xzLnB1c2goJ2Z1bmN0aW9uLXRleHQnKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRldGFpbFRleHQgPSB0cmlnW2RldGFpbEtleV07XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgYWRkVHJpZ2dlckRldGFpbCh0cmlnZ2VyRGV0YWlscyxcclxuICAgICAgICAgICAgICB0aGlzLmJhc2UudHJhbnNsYXRlKGtEZXRhaWxLZXlzW2RldGFpbEtleV0ubGFiZWwpLFxyXG4gICAgICAgICAgICAgIGRldGFpbFRleHQsXHJcbiAgICAgICAgICAgICAgZGV0YWlsQ2xzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghY2FuQmVDb25maWd1cmVkKHRyaWcpKVxyXG4gICAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICAgIC8vIEFkZCBiZWZvcmVTZWNvbmRzIG1hbnVhbGx5IGZvciB0aW1lbGluZSB0cmlnZ2Vycy5cclxuICAgICAgICBpZiAodHJpZy5pc1RpbWVsaW5lVHJpZ2dlcikge1xyXG4gICAgICAgICAgY29uc3QgZGV0YWlsS2V5ID0gJ2JlZm9yZVNlY29uZHMnO1xyXG4gICAgICAgICAgY29uc3Qgb3B0aW9uS2V5ID0ga09wdGlvbktleXMuYmVmb3JlU2Vjb25kcztcclxuXHJcbiAgICAgICAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gdGhpcy5iYXNlLnRyYW5zbGF0ZShrRGV0YWlsS2V5c1tkZXRhaWxLZXldLmxhYmVsKTtcclxuICAgICAgICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItbGFiZWwnKTtcclxuICAgICAgICAgIHRyaWdnZXJEZXRhaWxzLmFwcGVuZENoaWxkKGxhYmVsKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdvcHRpb24taW5wdXQtY29udGFpbmVyJywgJ3RyaWdnZXItYmVmb3JlLXNlY29uZHMnKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG4gICAgICAgICAgaW5wdXQudHlwZSA9ICd0ZXh0JztcclxuICAgICAgICAgIGlucHV0LnN0ZXAgPSAnYW55JztcclxuXHJcbiAgICAgICAgICAvLyBTYXkgXCIoZGVmYXVsdClcIiBmb3IgbW9yZSBjb21wbGljYXRlZCB0aGluZ3MgbGlrZSBmdW5jdGlvbnMuXHJcbiAgICAgICAgICBsZXQgZGVmYXVsdFZhbHVlID0ga01pc2NUcmFuc2xhdGlvbnMudmFsdWVEZWZhdWx0O1xyXG4gICAgICAgICAgaWYgKHRyaWcuYmVmb3JlU2Vjb25kcyA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSAwO1xyXG4gICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHRyaWcuYmVmb3JlU2Vjb25kcyA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHRyaWcuYmVmb3JlU2Vjb25kcztcclxuXHJcbiAgICAgICAgICBpbnB1dC5wbGFjZWhvbGRlciA9IHRoaXMuYmFzZS50cmFuc2xhdGUoZGVmYXVsdFZhbHVlKTtcclxuICAgICAgICAgIGlucHV0LnZhbHVlID0gdGhpcy5iYXNlLmdldE9wdGlvbigncmFpZGJvc3MnLCAndHJpZ2dlcnMnLCB0cmlnLmlkLCBvcHRpb25LZXksICcnKTtcclxuICAgICAgICAgIGNvbnN0IHNldEZ1bmMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHZhbGlkRHVyYXRpb25PclVuZGVmaW5lZChpbnB1dC52YWx1ZSkgfHwgJyc7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZS5zZXRPcHRpb24oJ3JhaWRib3NzJywgJ3RyaWdnZXJzJywgdHJpZy5pZCwgb3B0aW9uS2V5LCB2YWwpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGlucHV0Lm9uY2hhbmdlID0gc2V0RnVuYztcclxuICAgICAgICAgIGlucHV0Lm9uaW5wdXQgPSBzZXRGdW5jO1xyXG5cclxuICAgICAgICAgIHRyaWdnZXJEZXRhaWxzLmFwcGVuZENoaWxkKGRpdik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBZGQgZHVyYXRpb24gbWFudWFsbHkgd2l0aCBhbiBpbnB1dCB0byBvdmVycmlkZS5cclxuICAgICAgICBpZiAoaGFzT3V0cHV0RnVuYykge1xyXG4gICAgICAgICAgY29uc3QgZGV0YWlsS2V5ID0gJ2R1cmF0aW9uJztcclxuICAgICAgICAgIGNvbnN0IG9wdGlvbktleSA9IGtPcHRpb25LZXlzLmR1cmF0aW9uO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICBsYWJlbC5pbm5lclRleHQgPSB0aGlzLmJhc2UudHJhbnNsYXRlKGtEZXRhaWxLZXlzW2RldGFpbEtleV0ubGFiZWwpO1xyXG4gICAgICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgndHJpZ2dlci1sYWJlbCcpO1xyXG4gICAgICAgICAgdHJpZ2dlckRldGFpbHMuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoJ29wdGlvbi1pbnB1dC1jb250YWluZXInLCAndHJpZ2dlci1kdXJhdGlvbicpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChpbnB1dCk7XHJcbiAgICAgICAgICBpbnB1dC50eXBlID0gJ3RleHQnO1xyXG4gICAgICAgICAgaW5wdXQuc3RlcCA9ICdhbnknO1xyXG4gICAgICAgICAgaW5wdXQucGxhY2Vob2xkZXIgPSB0aGlzLmJhc2UudHJhbnNsYXRlKGtNaXNjVHJhbnNsYXRpb25zLnZhbHVlRGVmYXVsdCk7XHJcbiAgICAgICAgICBpbnB1dC52YWx1ZSA9IHRoaXMuYmFzZS5nZXRPcHRpb24oJ3JhaWRib3NzJywgJ3RyaWdnZXJzJywgdHJpZy5pZCwgb3B0aW9uS2V5LCAnJyk7XHJcbiAgICAgICAgICBjb25zdCBzZXRGdW5jID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB2YWwgPSB2YWxpZER1cmF0aW9uT3JVbmRlZmluZWQoaW5wdXQudmFsdWUpIHx8ICcnO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Uuc2V0T3B0aW9uKCdyYWlkYm9zcycsICd0cmlnZ2VycycsIHRyaWcuaWQsIG9wdGlvbktleSwgdmFsKTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBpbnB1dC5vbmNoYW5nZSA9IHNldEZ1bmM7XHJcbiAgICAgICAgICBpbnB1dC5vbmlucHV0ID0gc2V0RnVuYztcclxuXHJcbiAgICAgICAgICB0cmlnZ2VyRGV0YWlscy5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQWRkIG91dHB1dCBzdHJpbmdzIG1hbnVhbGx5XHJcbiAgICAgICAgY29uc3Qgb3V0cHV0U3RyaW5ncyA9IHRyaWcub3V0cHV0U3RyaW5ncyB8fCB7fTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb3V0cHV0U3RyaW5ncykge1xyXG4gICAgICAgICAgY29uc3Qgb3B0aW9uS2V5ID0ga09wdGlvbktleXMub3V0cHV0U3RyaW5ncztcclxuICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5iYXNlLnRyYW5zbGF0ZShvdXRwdXRTdHJpbmdzW2tleV0pO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICBsYWJlbC5pbm5lclRleHQgPSBrZXk7XHJcbiAgICAgICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLW91dHB1dHN0cmluZy1sYWJlbCcpO1xyXG4gICAgICAgICAgdHJpZ2dlckRldGFpbHMuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoJ29wdGlvbi1pbnB1dC1jb250YWluZXInLCAndHJpZ2dlci1vdXRwdXRzdHJpbmcnKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG4gICAgICAgICAgaW5wdXQudHlwZSA9ICd0ZXh0JztcclxuICAgICAgICAgIGlucHV0LnBsYWNlaG9sZGVyID0gdGVtcGxhdGU7XHJcbiAgICAgICAgICBpbnB1dC52YWx1ZSA9IHRoaXMuYmFzZS5nZXRPcHRpb24oJ3JhaWRib3NzJywgJ3RyaWdnZXJzJywgdHJpZy5pZCwgb3B0aW9uS2V5LCBrZXksICcnKTtcclxuICAgICAgICAgIGNvbnN0IHNldEZ1bmMgPSAoKSA9PiB0aGlzLmJhc2Uuc2V0T3B0aW9uKCdyYWlkYm9zcycsICd0cmlnZ2VycycsIHRyaWcuaWQsIG9wdGlvbktleSwga2V5LCBpbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgICBpbnB1dC5vbmNoYW5nZSA9IHNldEZ1bmM7XHJcbiAgICAgICAgICBpbnB1dC5vbmlucHV0ID0gc2V0RnVuYztcclxuXHJcbiAgICAgICAgICB0cmlnZ2VyRGV0YWlscy5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0cmlnZ2VyRGV0YWlscy5hcHBlbmRDaGlsZChsYWJlbCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdvcHRpb24taW5wdXQtY29udGFpbmVyJywgJ3RyaWdnZXItc291cmNlJyk7XHJcbiAgICAgICAgY29uc3QgYmFzZVVybCA9ICdodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi90cmlnZ2Vycyc7XHJcbiAgICAgICAgY29uc3QgcGF0aCA9IGtleS5zcGxpdCgnLScpO1xyXG4gICAgICAgIGxldCB1cmxGaWxlcGF0aDtcclxuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDMpIHtcclxuICAgICAgICAgIC8vIDAwLW1pc2MvZ2VuZXJhbC5qc1xyXG4gICAgICAgICAgdXJsRmlsZXBhdGggPSBgJHtwYXRoWzBdfS0ke3BhdGhbMV19LyR7Wy4uLnBhdGhdLnNsaWNlKDIpLmpvaW4oJy0nKX1gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyAwMi1hcnIvcmFpZHMvdDEuanNcclxuICAgICAgICAgIHVybEZpbGVwYXRoID0gYCR7cGF0aFswXX0tJHtwYXRoWzFdfS8ke3BhdGhbMl19LyR7Wy4uLnBhdGhdLnNsaWNlKDMpLmpvaW4oJy0nKX1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBlc2NhcGVkVHJpZ2dlcklkID0gdHJpZy5pZC5yZXBsYWNlKC8nL2csICdcXFxcXFwnJyk7XHJcbiAgICAgICAgY29uc3QgdXJpQ29tcG9uZW50ID0gZW5jb2RlVVJJQ29tcG9uZW50KGBpZDogJyR7ZXNjYXBlZFRyaWdnZXJJZH0nYCkucmVwbGFjZSgvJy9nLCAnJTI3Jyk7XHJcbiAgICAgICAgY29uc3QgdXJsU3RyaW5nID0gYCR7YmFzZVVybH0vJHt1cmxGaWxlcGF0aH0uanMjOn46dGV4dD0ke3VyaUNvbXBvbmVudH1gO1xyXG4gICAgICAgIGRpdi5pbm5lckhUTUwgPSBgPGEgaHJlZj1cIiR7dXJsU3RyaW5nfVwiIHRhcmdldD1cIl9ibGFua1wiPigke3RoaXMuYmFzZS50cmFuc2xhdGUoa01pc2NUcmFuc2xhdGlvbnMudmlld1RyaWdnZXJTb3VyY2UpfSk8L2E+YDtcclxuXHJcbiAgICAgICAgdHJpZ2dlckRldGFpbHMuYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gVGhpcyBkdXBsaWNhdGVzIHRoZSByYWlkYm9zcyBmdW5jdGlvbiBvZiB0aGUgc2FtZSBuYW1lLlxyXG4gIHZhbHVlT3JGdW5jdGlvbihmLCBkYXRhLCBtYXRjaGVzLCBvdXRwdXQpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9ICh0eXBlb2YgZiA9PT0gJ2Z1bmN0aW9uJykgPyBmKGRhdGEsIG1hdGNoZXMsIG91dHB1dCkgOiBmO1xyXG4gICAgaWYgKHJlc3VsdCAhPT0gT2JqZWN0KHJlc3VsdCkpXHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICBpZiAocmVzdWx0W3RoaXMuYWxlcnRzTGFuZ10pXHJcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlT3JGdW5jdGlvbihyZXN1bHRbdGhpcy5hbGVydHNMYW5nXSk7XHJcbiAgICBpZiAocmVzdWx0W3RoaXMudGltZWxpbmVMYW5nXSlcclxuICAgICAgcmV0dXJuIHRoaXMudmFsdWVPckZ1bmN0aW9uKHJlc3VsdFt0aGlzLnRpbWVsaW5lTGFuZ10pO1xyXG4gICAgLy8gRm9yIHBhcnRpYWxseSBsb2NhbGl6ZWQgcmVzdWx0cyB3aGVyZSB0aGlzIGxvY2FsaXphdGlvbiBkb2Vzbid0XHJcbiAgICAvLyBleGlzdCwgcHJlZmVyIEVuZ2xpc2ggb3ZlciBub3RoaW5nLlxyXG4gICAgcmV0dXJuIHRoaXMudmFsdWVPckZ1bmN0aW9uKHJlc3VsdFsnZW4nXSk7XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzVHJpZ2dlcih0cmlnKSB7XHJcbiAgICAvLyBUT0RPOiB3aXRoIHNvbWUgaGFja2luZXNzIChlLmcuIHJlZ2V4ZXM/KSB3ZSBjb3VsZCBmaWd1cmUgb3V0IHdoaWNoXHJcbiAgICAvLyBvdXRwdXQgc3RyaW5nIGNhbWUgZnJvbSB3aGljaCBhbGVydCB0eXBlIChhbGFybSwgYWxlcnQsIGluZm8sIHR0cykuXHJcbiAgICB0cmlnLm91dHB1dCA9IG5ldyBEb05vdGhpbmdGdW5jUHJveHkoKG91dHB1dFN0cmluZ3MpID0+IHtcclxuICAgICAgdHJpZy5vdXRwdXRTdHJpbmdzID0gdHJpZy5vdXRwdXRTdHJpbmdzIHx8IHt9O1xyXG4gICAgICBPYmplY3QuYXNzaWduKHRyaWcub3V0cHV0U3RyaW5ncywgb3V0cHV0U3RyaW5ncyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBrQmFzZUZha2VEYXRhID0ge1xyXG4gICAgICBwYXJ0eTogbmV3IFBhcnR5VHJhY2tlcigpLFxyXG4gICAgICBsYW5nOiB0aGlzLmJhc2UubGFuZyxcclxuICAgICAgY3VycmVudEhQOiAxMDAwLFxyXG4gICAgICBvcHRpb25zOiB0aGlzLmJhc2UuY29uZmlnT3B0aW9ucyxcclxuICAgICAgU2hvcnROYW1lOiAoeCkgPT4geCxcclxuICAgICAgU3RvcENvbWJhdDogKCkgPT4ge30sXHJcbiAgICAgIFBhcnNlTG9jYWxlRmxvYXQ6IHBhcnNlRmxvYXQsXHJcbiAgICAgIENhblN0dW46ICgpID0+IFV0aWwuY2FuU3R1bih0aGlzLmpvYiksXHJcbiAgICAgIENhblNpbGVuY2U6ICgpID0+IFV0aWwuY2FuU2lsZW5jZSh0aGlzLmpvYiksXHJcbiAgICAgIENhblNsZWVwOiAoKSA9PiBVdGlsLmNhblNsZWVwKHRoaXMuam9iKSxcclxuICAgICAgQ2FuQ2xlYW5zZTogKCkgPT4gVXRpbC5jYW5DbGVhbnNlKHRoaXMuam9iKSxcclxuICAgICAgQ2FuRmVpbnQ6ICgpID0+IFV0aWwuY2FuRmVpbnQodGhpcy5qb2IpLFxyXG4gICAgICBDYW5BZGRsZTogKCkgPT4gVXRpbC5jYW5BZGRsZSh0aGlzLmpvYiksXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGtGYWtlRGF0YSA9IFtcclxuICAgICAge1xyXG4gICAgICAgIG1lOiAnVGluaSBQb3V0aW5pJyxcclxuICAgICAgICBqb2I6ICdHTkInLFxyXG4gICAgICAgIHJvbGU6ICd0YW5rJyxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIG1lOiAnUG90YXRvIENoaXBweScsXHJcbiAgICAgICAgam9iOiAnV0hNJyxcclxuICAgICAgICByb2xlOiAnaGVhbGVyJyxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIG1lOiAnVGF0ZXIgVG90JyxcclxuICAgICAgICBqb2I6ICdCTE0nLFxyXG4gICAgICAgIHJvbGU6ICdkcHMnLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbWU6ICdIYXNoIEJyb3duJyxcclxuICAgICAgICBqb2I6ICdEUkcnLFxyXG4gICAgICAgIHJvbGU6ICdkcHMnLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbWU6ICdBbG9vIEdvYmknLFxyXG4gICAgICAgIGpvYjogJ0JMVScsXHJcbiAgICAgICAgcm9sZTogJ2RwcycsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga0Zha2VEYXRhLmxlbmd0aDsgKytpKVxyXG4gICAgICBrRmFrZURhdGFbaV0gPSBPYmplY3QuYXNzaWduKHt9LCBrRmFrZURhdGFbaV0sIGtCYXNlRmFrZURhdGEpO1xyXG5cclxuXHJcbiAgICBjb25zdCBrRmFrZU1hdGNoZXMgPSB7XHJcbiAgICAgIC8vIFRPRE86IHJlYWxseSBzaG91bGQgY29udmVydCBhbGwgdHJpZ2dlcnMgdG8gdXNlIHJlZ2V4ZXMuanMuXHJcbiAgICAgIC8vIE1vb29vb3N0IHRyaWdnZXJzIHVzZSBtYXRjaGVzWzFdIHRvIGJlIGEgbmFtZS5cclxuICAgICAgMToga0Zha2VEYXRhWzBdLm1lLFxyXG5cclxuICAgICAgc291cmNlSWQ6ICc0MTIzNDU2NycsXHJcbiAgICAgIHNvdXJjZTogJ0VuZW15JyxcclxuICAgICAgaWQ6ICcxMjM0JyxcclxuICAgICAgYWJpbGl0eTogJ0FiaWxpdHknLFxyXG4gICAgICB0YXJnZXRJZDogJzEyMzQ1NjcnLFxyXG4gICAgICB0YXJnZXQ6IGtGYWtlRGF0YVswXS5tZSxcclxuICAgICAgZmxhZ3M6ICcnLFxyXG4gICAgICB4OiAxMDAsXHJcbiAgICAgIHk6IDEwMCxcclxuICAgICAgejogMCxcclxuICAgICAgaGVhZGluZzogMCxcclxuICAgICAgbnBjSWQ6IHVuZGVmaW5lZCxcclxuICAgICAgZWZmZWN0OiAnRWZmZWN0JyxcclxuICAgICAgZHVyYXRpb246IDMwLFxyXG4gICAgICBjb2RlOiAnMDAnLFxyXG4gICAgICBsaW5lOiAnJyxcclxuICAgICAgbmFtZTogJ05hbWUnLFxyXG4gICAgICBjYXB0dXJlOiB0cnVlLFxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgY29uc3Qgb3V0cHV0ID0ge307XHJcbiAgICBjb25zdCBrZXlzID0gWydhbGFybVRleHQnLCAnYWxlcnRUZXh0JywgJ2luZm9UZXh0JywgJ3R0cycsICdzb3VuZCddO1xyXG5cclxuICAgIC8vIFRyeSB0byBkZXRlcm1pbmUgc29tZSBzYW1wbGUgb3V0cHV0P1xyXG4gICAgLy8gVGhpcyBjb3VsZCBnZXQgbXVjaCBtb3JlIGNvbXBsaWNhdGVkIGlmIHdlIHdhbnRlZCBpdCB0by5cclxuICAgIGNvbnN0IGV2YWxUcmlnZ2VyID0gKHRyaWcsIGtleSwgaWR4KSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy52YWx1ZU9yRnVuY3Rpb24odHJpZ1trZXldLCBrRmFrZURhdGFbaWR4XSwga0Zha2VNYXRjaGVzLCB0cmlnLm91dHB1dCk7XHJcbiAgICAgICAgaWYgKCFyZXN1bHQpXHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIFN1cGVyIGhhY2s6XHJcbiAgICAgICAgaWYgKHJlc3VsdC5pbmNsdWRlcygndW5kZWZpbmVkJykgfHwgcmVzdWx0LmluY2x1ZGVzKCdOYU4nKSlcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgb3V0cHV0W2tleV0gPSByZXN1bHQ7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAvLyBUaGlzIGlzIGFsbCB0b3RhbGx5IGJvZ3VzLiAgTWFueSB0cmlnZ2VycyBhc3N1bWUgZmllbGRzIG9uIGRhdGFcclxuICAgICAgICAvLyBhcmUgcHJvcGVybHkgZGVmaW5lZCB3aGVuIHRoZXNlIGNhbGxzIGhhcHBlbiwgc28gd2lsbCB0aHJvdyBlcnJvcnMuXHJcbiAgICAgICAgLy8gU28ganVzdCBzaWxlbnRseSBpZ25vcmUuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEhhbmRsZSAncmVzcG9uc2UnIGZpcnN0LlxyXG4gICAgaWYgKHRyaWcucmVzcG9uc2UpIHtcclxuICAgICAgY29uc3QgciA9IHRyaWcucmVzcG9uc2U7XHJcbiAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwga0Zha2VEYXRhLmxlbmd0aDsgKytkKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIC8vIENhbid0IHVzZSBWYWx1ZU9yRnVuY3Rpb24gaGVyZSBhcyByIHJldHVybnMgYSBub24tbG9jYWxpemFibGUgb2JqZWN0LlxyXG4gICAgICAgICAgLy8gRklYTUU6IHRoaXMgaGFja2lseSByZXBsaWNhdGVzIHNvbWUgcmFpZGJvc3MgbG9naWMgdG9vLlxyXG4gICAgICAgICAgbGV0IHJlc3BvbnNlID0gcjtcclxuICAgICAgICAgIHdoaWxlICh0eXBlb2YgcmVzcG9uc2UgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgLy8gVE9ETzogY2hlY2sgaWYgdGhpcyBoYXMgYnVpbHRJblJlc3BvbnNlU3RyIGZpcnN0LlxyXG4gICAgICAgICAgICByZXNwb25zZSA9IHJlc3BvbnNlKGtGYWtlRGF0YVtkXSwga0Zha2VNYXRjaGVzLCB0cmlnLm91dHB1dCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoIXJlc3BvbnNlKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICBpZiAoIXRyaWcub3V0cHV0U3RyaW5ncykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKVxyXG4gICAgICAgICAgICAgIGV2YWxUcmlnZ2VyKHJlc3BvbnNlLCBrZXksIGQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gT25seSBldmFsdWF0ZSBmaWVsZHMgaWYgdGhlcmUgYXJlIG5vdCBvdXRwdXRTdHJpbmdzLlxyXG4gICAgLy8gb3V0cHV0U3RyaW5ncyB3aWxsIGluZGljYXRlIG1vcmUgY2xlYXJseSB3aGF0IHRoZSB0cmlnZ2VyIHNheXMuXHJcbiAgICBpZiAoIXRyaWcub3V0cHV0U3RyaW5ncykge1xyXG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgICAgaWYgKCF0cmlnW2tleV0pXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBmb3IgKGxldCBkID0gMDsgZCA8IGtGYWtlRGF0YS5sZW5ndGg7ICsrZCkge1xyXG4gICAgICAgICAgaWYgKGV2YWxUcmlnZ2VyKHRyaWcsIGtleSwgZCkpXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRyaWcub3V0cHV0ID0gb3V0cHV0O1xyXG5cclxuICAgIGNvbnN0IGxhbmcgPSB0aGlzLmJhc2UubGFuZztcclxuXHJcbiAgICBjb25zdCBnZXRSZWdleCA9IChiYXNlRmllbGQpID0+IHtcclxuICAgICAgY29uc3Qgc2hvcnRMYW5ndWFnZSA9IGxhbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBsYW5nLnNsaWNlKDEpO1xyXG4gICAgICBjb25zdCBsYW5nU3BlY2lmaWNSZWdleCA9IHRyaWdbYmFzZUZpZWxkICsgc2hvcnRMYW5ndWFnZV0gfHwgdHJpZ1tiYXNlRmllbGRdO1xyXG4gICAgICBpZiAoIWxhbmdTcGVjaWZpY1JlZ2V4KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgY29uc3QgYmFzZVJlZ2V4ID0gUmVnZXhlcy5wYXJzZShsYW5nU3BlY2lmaWNSZWdleCk7XHJcbiAgICAgIGlmICghYmFzZVJlZ2V4KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2UoYmFzZVJlZ2V4KTtcclxuICAgIH07XHJcblxyXG4gICAgaWYgKHRyaWcuaXNUaW1lbGluZVRyaWdnZXIpIHtcclxuICAgICAgdHJpZy50aW1lbGluZVJlZ2V4ID0gZ2V0UmVnZXgoJ3JlZ2V4Jyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0cmlnLnRyaWdnZXJSZWdleCA9IGdldFJlZ2V4KCdyZWdleCcpO1xyXG4gICAgICB0cmlnLnRyaWdnZXJOZXRSZWdleCA9IGdldFJlZ2V4KCduZXRSZWdleCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cmlnO1xyXG4gIH1cclxuXHJcbiAgcHJvY2Vzc1JhaWRib3NzRmlsZXMoZmlsZXMsIHVzZXJPcHRpb25zKSB7XHJcbiAgICAvLyBgZmlsZXNgIGlzIG1hcCBvZiBmaWxlbmFtZSA9PiB0cmlnZ2VyU2V0IChmb3IgdHJpZ2dlciBmaWxlcylcclxuICAgIC8vIGBtYXBgIGlzIGEgc29ydGVkIG1hcCBvZiBzaG9ydGVuZWQgem9uZSBrZXkgPT4geyB2YXJpb3VzIGZpZWxkcywgdHJpZ2dlclNldCB9XHJcbiAgICBjb25zdCBtYXAgPSB0aGlzLmJhc2UucHJvY2Vzc0ZpbGVzKGZpbGVzLCB1c2VyT3B0aW9ucy5UcmlnZ2Vycyk7XHJcbiAgICBsZXQgdHJpZ2dlcklkeCA9IDA7XHJcblxyXG4gICAgLy8gV2hpbGUgd2Fsa2luZyB0aHJvdWdoIHRyaWdnZXJzLCByZWNvcmQgYW55IHByZXZpb3VzIHRyaWdnZXJzIHdpdGggdGhlIHNhbWVcclxuICAgIC8vIGlkIHNvIHRoYXQgdGhlIHVpIGNhbiBkaXNhYmxlIG92ZXJyaWRpbmcgaW5mb3JtYXRpb24uXHJcbiAgICBjb25zdCBwcmV2aW91c1RyaWdnZXJXaXRoSWQgPSB7fTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgT2JqZWN0LnZhbHVlcyhtYXApKSB7XHJcbiAgICAgIC8vIFRPRE86IG1heWJlIGVhY2ggdHJpZ2dlciBzZXQgbmVlZHMgYSB6b25lIG5hbWUsIGFuZCB3ZSBzaG91bGRcclxuICAgICAgLy8gdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgZmlsZW5hbWU/Pz9cclxuICAgICAgY29uc3QgcmF3VHJpZ2dlcnMgPSB7XHJcbiAgICAgICAgdHJpZ2dlcjogW10sXHJcbiAgICAgICAgdGltZWxpbmU6IFtdLFxyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCB0cmlnZ2VyU2V0ID0gaXRlbS50cmlnZ2VyU2V0O1xyXG4gICAgICBpZiAodHJpZ2dlclNldC50cmlnZ2VycylcclxuICAgICAgICByYXdUcmlnZ2Vycy50cmlnZ2VyLnB1c2goLi4udHJpZ2dlclNldC50cmlnZ2Vycyk7XHJcbiAgICAgIGlmICh0cmlnZ2VyU2V0LnRpbWVsaW5lVHJpZ2dlcnMpXHJcbiAgICAgICAgcmF3VHJpZ2dlcnMudGltZWxpbmUucHVzaCguLi50cmlnZ2VyU2V0LnRpbWVsaW5lVHJpZ2dlcnMpO1xyXG5cclxuICAgICAgaXRlbS50cmlnZ2VycyA9IHt9O1xyXG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdUcmlnZ2Vycykge1xyXG4gICAgICAgIGZvciAoY29uc3QgdHJpZyBvZiByYXdUcmlnZ2Vyc1trZXldKSB7XHJcbiAgICAgICAgICB0cmlnZ2VySWR4Kys7XHJcbiAgICAgICAgICBpZiAoIXRyaWcuaWQpIHtcclxuICAgICAgICAgICAgLy8gR2l2ZSB0cmlnZ2VycyB3aXRoIG5vIGlkIHNvbWUgXCJ1bmlxdWVcIiBzdHJpbmcgc28gdGhhdCB0aGV5IGNhblxyXG4gICAgICAgICAgICAvLyBzdGlsbCBiZSBhZGRlZCB0byB0aGUgc2V0IGFuZCBzaG93IHVwIGluIHRoZSB1aS5cclxuICAgICAgICAgICAgdHJpZy5pZCA9IGAhIU5vSWRUcmlnZ2VyJHt0cmlnZ2VySWR4fWA7XHJcbiAgICAgICAgICAgIHRyaWcuaXNNaXNzaW5nSWQgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFRyYWNrIGlmIHRoaXMgdHJpZ2dlciBvdmVycmlkZXMgYW55IHByZXZpb3VzIHRyaWdnZXIuXHJcbiAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IHByZXZpb3VzVHJpZ2dlcldpdGhJZFt0cmlnLmlkXTtcclxuICAgICAgICAgIGlmIChwcmV2aW91cylcclxuICAgICAgICAgICAgcHJldmlvdXMub3ZlcnJpZGRlbkJ5RmlsZSA9IHRyaWdnZXJTZXQuZmlsZW5hbWU7XHJcbiAgICAgICAgICBwcmV2aW91c1RyaWdnZXJXaXRoSWRbdHJpZy5pZF0gPSB0cmlnO1xyXG5cclxuICAgICAgICAgIHRyaWcuaXNUaW1lbGluZVRyaWdnZXIgPSBrZXkgPT09ICd0aW1lbGluZSc7XHJcbiAgICAgICAgICAvLyBBbHNvLCBpZiBhIHVzZXIgaGFzIHR3byBvZiB0aGUgc2FtZSBpZCBpbiB0aGUgc2FtZSB0cmlnZ2VyU2V0ICg/ISlcclxuICAgICAgICAgIC8vIHRoZW4gb25seSB0aGUgc2Vjb25kIHRyaWdnZXIgd2lsbCBzaG93IHVwLlxyXG4gICAgICAgICAgaXRlbS50cmlnZ2Vyc1t0cmlnLmlkXSA9IHRoaXMucHJvY2Vzc1RyaWdnZXIodHJpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWFwO1xyXG4gIH1cclxuXHJcbiAgYnVpbGRUcmlnZ2VyT3B0aW9ucyh0cmlnLCBsYWJlbERpdikge1xyXG4gICAgY29uc3Qgb3B0aW9uS2V5ID0ga09wdGlvbktleXMub3V0cHV0O1xyXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBkaXYuY2xhc3NMaXN0LmFkZCgndHJpZ2dlci1vcHRpb25zJyk7XHJcblxyXG4gICAgY29uc3QgdXBkYXRlTGFiZWwgPSAoaW5wdXQpID0+IHtcclxuICAgICAgaWYgKGlucHV0LnZhbHVlID09PSAnaGlkZGVuJyB8fCBpbnB1dC52YWx1ZSA9PT0gJ2Rpc2FibGVkJylcclxuICAgICAgICBsYWJlbERpdi5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgbGFiZWxEaXYuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcclxuICAgIGRpdi5hcHBlbmRDaGlsZChpbnB1dCk7XHJcblxyXG4gICAgY29uc3Qgc2VsZWN0VmFsdWUgPSB0aGlzLmJhc2UuZ2V0T3B0aW9uKCdyYWlkYm9zcycsICd0cmlnZ2VycycsIHRyaWcuaWQsIG9wdGlvbktleSwgJ2RlZmF1bHQnKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBrVHJpZ2dlck9wdGlvbnMpIHtcclxuICAgICAgLy8gSGlkZSBkZWJ1ZyBvbmx5IG9wdGlvbnMgdW5sZXNzIHRoZXkgYXJlIHNlbGVjdGVkLlxyXG4gICAgICAvLyBPdGhlcndpc2UsIGl0IHdpbGwgbG9vayB3ZWlyZCB0byBwaWNrIHNvbWV0aGluZyBsaWtlICdEaXNhYmxlZCcsXHJcbiAgICAgIC8vIGJ1dCB0aGVuIG5vdCBzaG93IGl0IHdoZW4gZGV2ZWxvcGVyIG9wdGlvbnMgYXJlIHR1cm5lZCBvZmYuXHJcbiAgICAgIGlmICghdGhpcy5iYXNlLmRldmVsb3Blck9wdGlvbnMgJiYga1RyaWdnZXJPcHRpb25zW2tleV0uZGVidWdPbmx5ICYmIGtleSAhPT0gc2VsZWN0VmFsdWUpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgZWxlbS5pbm5lckhUTUwgPSB0aGlzLmJhc2UudHJhbnNsYXRlKGtUcmlnZ2VyT3B0aW9uc1trZXldLmxhYmVsKTtcclxuICAgICAgZWxlbS52YWx1ZSA9IGtleTtcclxuICAgICAgZWxlbS5zZWxlY3RlZCA9IGtleSA9PT0gc2VsZWN0VmFsdWU7XHJcbiAgICAgIGlucHV0LmFwcGVuZENoaWxkKGVsZW0pO1xyXG5cclxuICAgICAgdXBkYXRlTGFiZWwoaW5wdXQpO1xyXG5cclxuICAgICAgaW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgdXBkYXRlTGFiZWwoaW5wdXQpO1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IGlucHV0LnZhbHVlO1xyXG4gICAgICAgIGlmICh2YWx1ZS5pbmNsdWRlcygnZGVmYXVsdCcpKVxyXG4gICAgICAgICAgdmFsdWUgPSAnZGVmYXVsdCc7XHJcbiAgICAgICAgdGhpcy5iYXNlLnNldE9wdGlvbigncmFpZGJvc3MnLCAndHJpZ2dlcnMnLCB0cmlnLmlkLCBvcHRpb25LZXksIGlucHV0LnZhbHVlKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGl2O1xyXG4gIH1cclxufVxyXG5cclxuLy8gUmFpZGJvc3MgbmVlZHMgdG8gZG8gc29tZSBleHRyYSBwcm9jZXNzaW5nIG9mIHVzZXIgZmlsZXMuXHJcbmNvbnN0IHVzZXJGaWxlSGFuZGxlciA9IChuYW1lLCBmaWxlcywgb3B0aW9ucywgYmFzZVBhdGgpID0+IHtcclxuICBpZiAoIW9wdGlvbnMuVHJpZ2dlcnMpXHJcbiAgICByZXR1cm47XHJcblxyXG4gIGZvciAoY29uc3Qgc2V0IG9mIG9wdGlvbnMuVHJpZ2dlcnMpIHtcclxuICAgIC8vIEFubm90YXRlIHRyaWdnZXJzIHdpdGggd2hlcmUgdGhleSBjYW1lIGZyb20uICBOb3RlLCBvcHRpb25zIGlzIHBhc3NlZCBpbiByZXBlYXRlZGx5XHJcbiAgICAvLyBhcyBtdWx0aXBsZSBzZXRzIG9mIHVzZXIgZmlsZXMgYWRkIHRyaWdnZXJzLCBzbyBvbmx5IHByb2Nlc3MgZWFjaCBmaWxlIG9uY2UuXHJcbiAgICBpZiAoc2V0LmlzVXNlclRyaWdnZXJTZXQpXHJcbiAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgIC8vIGBmaWxlbmFtZWAgaGVyZSBpcyBqdXN0IGNvc21ldGljIGZvciBiZXR0ZXIgZGVidWcgcHJpbnRpbmcgdG8gbWFrZSBpdCBtb3JlIGNsZWFyXHJcbiAgICAvLyB3aGVyZSBhIHRyaWdnZXIgb3IgYW4gb3ZlcnJpZGUgaXMgY29taW5nIGZyb20uXHJcbiAgICBzZXQuZmlsZW5hbWUgPSBgJHtiYXNlUGF0aH0ke25hbWV9YDtcclxuICAgIHNldC5pc1VzZXJUcmlnZ2VyU2V0ID0gdHJ1ZTtcclxuXHJcbiAgICAvLyBDb252ZXJ0IHNldC50aW1lbGluZUZpbGUgdG8gc2V0LnRpbWVsaW5lLlxyXG4gICAgaWYgKHNldC50aW1lbGluZUZpbGUpIHtcclxuICAgICAgY29uc3QgbGFzdEluZGV4ID0gTWF0aC5tYXgobmFtZS5sYXN0SW5kZXhPZignLycpLCBuYW1lLmxhc3RJbmRleE9mKCdcXFxcJykpO1xyXG4gICAgICAvLyBJZiBsYXN0SW5kZXggPT09IC0xLCB0cnVuY2F0ZSBuYW1lIHRvIHRoZSBlbXB0eSBzdHJpbmcuXHJcbiAgICAgIC8vIGlmIGxhc3RJbmRleCA+IC0xLCB0cnVuY2F0ZSBuYW1lIGFmdGVyIHRoZSBmaW5hbCBzbGFzaC5cclxuICAgICAgY29uc3QgZGlyID0gbmFtZS5zdWJzdHJpbmcoMCwgbGFzdEluZGV4ICsgMSk7XHJcblxyXG4gICAgICBjb25zdCB0aW1lbGluZUZpbGUgPSBgJHtkaXJ9JHtzZXQudGltZWxpbmVGaWxlfWA7XHJcbiAgICAgIGRlbGV0ZSBzZXQudGltZWxpbmVGaWxlO1xyXG5cclxuICAgICAgaWYgKCEodGltZWxpbmVGaWxlIGluIGZpbGVzKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBFUlJPUjogJyR7bmFtZX0nIHNwZWNpZmllcyBub24tZXhpc3RlbnQgdGltZWxpbmUgZmlsZSAnJHt0aW1lbGluZUZpbGV9Jy5gKTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gc2V0LnRpbWVsaW5lIGlzIHByb2Nlc3NlZCByZWN1cnNpdmVseS5cclxuICAgICAgc2V0LnRpbWVsaW5lID0gW3NldC50aW1lbGluZSwgZmlsZXNbdGltZWxpbmVGaWxlXV07XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgdGVtcGxhdGVPcHRpb25zID0ge1xyXG4gIGJ1aWxkRXh0cmFVSTogKGJhc2UsIGNvbnRhaW5lcikgPT4ge1xyXG4gICAgY29uc3QgYnVpbGRlciA9IG5ldyBSYWlkYm9zc0NvbmZpZ3VyYXRvcihiYXNlKTtcclxuICAgIGNvbnN0IHVzZXJPcHRpb25zID0geyAuLi5yYWlkYm9zc09wdGlvbnMgfTtcclxuICAgIFVzZXJDb25maWcubG9hZFVzZXJGaWxlcygncmFpZGJvc3MnLCB1c2VyT3B0aW9ucywgKCkgPT4ge1xyXG4gICAgICBidWlsZGVyLmJ1aWxkVUkoY29udGFpbmVyLCByYWlkYm9zc0ZpbGVEYXRhLCB1c2VyT3B0aW9ucyk7XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIHByb2Nlc3NFeHRyYU9wdGlvbnM6IChvcHRpb25zLCBzYXZlZENvbmZpZykgPT4ge1xyXG4gICAgLy8gcmFpZGJvc3Mgd2lsbCBsb29rIHVwIHRoaXMub3B0aW9ucy5QZXJUcmlnZ2VyQXV0b0NvbmZpZyB0byBmaW5kIHRoZXNlIHZhbHVlcy5cclxuICAgIGNvbnN0IG9wdGlvbk5hbWUgPSAnUGVyVHJpZ2dlckF1dG9Db25maWcnO1xyXG5cclxuICAgIG9wdGlvbnNbb3B0aW9uTmFtZV0gPSBvcHRpb25zW29wdGlvbk5hbWVdIHx8IHt9O1xyXG4gICAgY29uc3QgdHJpZ2dlcnMgPSBzYXZlZENvbmZpZy50cmlnZ2VycztcclxuICAgIGlmICghdHJpZ2dlcnMpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBwZXJUcmlnZ2VyID0gb3B0aW9uc1tvcHRpb25OYW1lXTtcclxuXHJcbiAgICBjb25zdCBvdXRwdXRPYmpzID0ge307XHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoa1RyaWdnZXJPcHRpb25zKTtcclxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcclxuICAgICAgb3V0cHV0T2Jqc1trZXldID0ge307XHJcbiAgICAgIHNldE9wdGlvbnNGcm9tT3V0cHV0VmFsdWUob3V0cHV0T2Jqc1trZXldLCBrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgaWQgaW4gdHJpZ2dlcnMpIHtcclxuICAgICAgY29uc3QgYXV0b0NvbmZpZyA9IHt9O1xyXG5cclxuICAgICAgY29uc3Qgb3V0cHV0ID0gdHJpZ2dlcnNbaWRdW2tPcHRpb25LZXlzLm91dHB1dF07XHJcbiAgICAgIGlmIChvdXRwdXQpXHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihhdXRvQ29uZmlnLCBvdXRwdXRPYmpzW291dHB1dF0pO1xyXG5cclxuICAgICAgY29uc3QgZHVyYXRpb24gPSB2YWxpZER1cmF0aW9uT3JVbmRlZmluZWQodHJpZ2dlcnNbaWRdW2tPcHRpb25LZXlzLmR1cmF0aW9uXSk7XHJcbiAgICAgIGlmIChkdXJhdGlvbilcclxuICAgICAgICBhdXRvQ29uZmlnW2tPcHRpb25LZXlzLmR1cmF0aW9uXSA9IGR1cmF0aW9uO1xyXG5cclxuICAgICAgY29uc3QgYmVmb3JlU2Vjb25kcyA9IHZhbGlkRHVyYXRpb25PclVuZGVmaW5lZCh0cmlnZ2Vyc1tpZF1ba09wdGlvbktleXMuYmVmb3JlU2Vjb25kc10pO1xyXG4gICAgICBpZiAoYmVmb3JlU2Vjb25kcylcclxuICAgICAgICBhdXRvQ29uZmlnW2tPcHRpb25LZXlzLmJlZm9yZVNlY29uZHNdID0gYmVmb3JlU2Vjb25kcztcclxuXHJcbiAgICAgIGNvbnN0IG91dHB1dFN0cmluZ3MgPSB0cmlnZ2Vyc1tpZF1ba09wdGlvbktleXMub3V0cHV0U3RyaW5nc107XHJcbiAgICAgIGlmIChvdXRwdXRTdHJpbmdzKVxyXG4gICAgICAgIGF1dG9Db25maWdba09wdGlvbktleXMub3V0cHV0U3RyaW5nc10gPSBvdXRwdXRTdHJpbmdzO1xyXG5cclxuICAgICAgaWYgKG91dHB1dCB8fCBkdXJhdGlvbiB8fCBvdXRwdXRTdHJpbmdzKVxyXG4gICAgICAgIHBlclRyaWdnZXJbaWRdID0gYXV0b0NvbmZpZztcclxuICAgIH1cclxuICB9LFxyXG4gIG9wdGlvbnM6IFtcclxuICAgIHtcclxuICAgICAgaWQ6ICdEZWJ1ZycsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ0VuYWJsZSBkZWJ1ZyBtb2RlJyxcclxuICAgICAgICBkZTogJ0FrdGl2aWVyZSBEZWJ1Z21vZHVzJyxcclxuICAgICAgICBmcjogJ0FjdGl2ZXIgbGUgbW9kZSBkZWJ1ZycsXHJcbiAgICAgICAgamE6ICfjg4fjg5Djg4PjgrDjg6Ljg7zjg4njgpLmnInlirnjgavjgZnjgosnLFxyXG4gICAgICAgIGNuOiAn5ZCv55So6LCD6K+V5qih5byPJyxcclxuICAgICAgICBrbzogJ+uUlOuyhOq3uCDrqqjrk5wg7Zmc7ISx7ZmUJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2NoZWNrYm94JyxcclxuICAgICAgZGVidWdPbmx5OiB0cnVlLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdEZWZhdWx0QWxlcnRPdXRwdXQnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdEZWZhdWx0IGFsZXJ0IG91dHB1dCcsXHJcbiAgICAgICAgZGU6ICdTdGFuZGFyZCBBbGVydCBBdXNnYWJlJyxcclxuICAgICAgICBmcjogJ0FsZXJ0ZSBwYXIgZMOpZmF1dCcsXHJcbiAgICAgICAgamE6ICforablkYrmg4XloLHlh7rlipvml6LlrprlgKQnLFxyXG4gICAgICAgIGNuOiAn6buY6K6k6K2m5oql5o+Q56S65L+h5oGv6L6T5Ye65pa55byPJyxcclxuICAgICAgICBrbzogJ+q4sOuzuCDslYzrnowg7Lac66ClIOuwqeyLnScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdzZWxlY3QnLFxyXG4gICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgZW46IHtcclxuICAgICAgICAgICfwn4aZ8J+UiiBUZXh0IGFuZCBTb3VuZCc6ICd0ZXh0QW5kU291bmQnLFxyXG4gICAgICAgICAgJ/Cfhpnwn5KsIFRleHQgYW5kIFRUUyc6ICd0dHNBbmRUZXh0JyxcclxuICAgICAgICAgICfwn5KsIFRUUyBPbmx5JzogJ3R0c09ubHknLFxyXG4gICAgICAgICAgJ/CfhpkgVGV4dCBPbmx5JzogJ3RleHRPbmx5JyxcclxuICAgICAgICAgICfinYwgRGlzYWJsZWQnOiAnZGlzYWJsZWQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGU6IHtcclxuICAgICAgICAgICfwn4aZ8J+UiiBUZXh0IHVuZCBUb24nOiAndGV4dEFuZFNvdW5kJyxcclxuICAgICAgICAgICfwn4aZ8J+SrCBUZXh0IHVuZCBUVFMnOiAndHRzQW5kVGV4dCcsXHJcbiAgICAgICAgICAn8J+SrCBOdXIgVFRTJzogJ3R0c09ubHknLFxyXG4gICAgICAgICAgJ/CfhpkgTnVyIFRleHQnOiAndGV4dE9ubHknLFxyXG4gICAgICAgICAgJ+KdjCBEZWFrdGl2aWVydCc6ICdkaXNhYmxlZCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmcjoge1xyXG4gICAgICAgICAgJ/Cfhpnwn5SKIFRleHRlIGV0IHNvbic6ICd0ZXh0QW5kU291bmQnLFxyXG4gICAgICAgICAgJ/Cfhpnwn5KsIFRleHRlIGV0IFRUUyc6ICd0dHNBbmRUZXh0JyxcclxuICAgICAgICAgICfwn5KsIFRUUyBzZXVsZW1lbnQnOiAndHRzT25seScsXHJcbiAgICAgICAgICAn8J+GmSBUZXh0ZSBzZXVsZW1lbnQnOiAndGV4dE9ubHknLFxyXG4gICAgICAgICAgJ+KdjCBEw6lzYWN0aXbDqSc6ICdkaXNhYmxlZCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBqYToge1xyXG4gICAgICAgICAgJ/Cfhpnwn5SKIOODhuOCreOCueODiOOBqOmfs+WjsCc6ICd0ZXh0QW5kU291bmQnLFxyXG4gICAgICAgICAgJ/Cfhpnwn5KsIOODhuOCreOCueODiOOBqFRUUyc6ICd0dHNBbmRUZXh0JyxcclxuICAgICAgICAgICfwn5KsIFRUU+OBruOBvyc6ICd0dHNPbmx5JyxcclxuICAgICAgICAgICfwn4aZIOODhuOCreOCueODiOOBruOBvyc6ICd0ZXh0T25seScsXHJcbiAgICAgICAgICAn4p2MIOeEoeWKuSc6ICdkaXNhYmxlZCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbjoge1xyXG4gICAgICAgICAgJ/Cfhpnwn5SKIOaWh+Wtl+aYvuekuuS4juaPkOekuumfsyc6ICd0ZXh0QW5kU291bmQnLFxyXG4gICAgICAgICAgJ/Cfhpnwn5KsIOaWh+Wtl+aYvuekuuS4jlRUUyc6ICd0dHNBbmRUZXh0JyxcclxuICAgICAgICAgICfwn5KsIOWPquS9v+eUqFRUUyc6ICd0dHNPbmx5JyxcclxuICAgICAgICAgICfwn4aZIOWPquS9v+eUqOaWh+Wtl+aYvuekuic6ICd0ZXh0T25seScsXHJcbiAgICAgICAgICAn4p2MIOemgeeUqCc6ICdkaXNhYmxlZCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBrbzoge1xyXG4gICAgICAgICAgJ/Cfhpnwn5SKIO2FjeyKpO2KuOyZgCDshozrpqwnOiAndGV4dEFuZFNvdW5kJyxcclxuICAgICAgICAgICfwn4aZ8J+SrCDthY3siqTtirjsmYAgVFRTJzogJ3R0c0FuZFRleHQnLFxyXG4gICAgICAgICAgJ/CfkqwgVFRT66eMJzogJ3R0c09ubHknLFxyXG4gICAgICAgICAgJ/Cfhpkg7YWN7Iqk7Yq466eMJzogJ3RleHRPbmx5JyxcclxuICAgICAgICAgICfinYwg67mE7Zmc7ISx7ZmUJzogJ2Rpc2FibGVkJyxcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgICBkZWZhdWx0OiAndGV4dEFuZFNvdW5kJyxcclxuICAgICAgc2V0dGVyRnVuYzogc2V0T3B0aW9uc0Zyb21PdXRwdXRWYWx1ZSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnQWxlcnRzTGFuZ3VhZ2UnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdBbGVydHMgbGFuZ3VhZ2UnLFxyXG4gICAgICAgIGRlOiAnQWxlcnQgU3ByYWNoZScsXHJcbiAgICAgICAgZnI6ICdMYW5ndWUgZGVzIGFsZXJ0ZXMnLFxyXG4gICAgICAgIGphOiAn6K2m5ZGK5oOF5aCx44Gu6KiA6KqeJyxcclxuICAgICAgICBjbjogJ+itpuaKpeaPkOekuuaWh+Wtl+eahOivreiogCcsXHJcbiAgICAgICAga286ICfslYzrnowg7Ja47Ja0JyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ3NlbGVjdCcsXHJcbiAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICBlbjoge1xyXG4gICAgICAgICAgJ1VzZSBEaXNwbGF5IExhbmd1YWdlJzogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgJ0VuZ2xpc2ggKGVuKSc6ICdlbicsXHJcbiAgICAgICAgICAnQ2hpbmVzZSAoY24pJzogJ2NuJyxcclxuICAgICAgICAgICdHZXJtYW4gKGRlKSc6ICdkZScsXHJcbiAgICAgICAgICAnRnJlbmNoIChmciknOiAnZnInLFxyXG4gICAgICAgICAgJ0phcGFuZXNlIChqYSknOiAnamEnLFxyXG4gICAgICAgICAgJ0tvcmVhbiAoa28pJzogJ2tvJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZyOiB7XHJcbiAgICAgICAgICAnVXRpbGlzZXIgbGEgbGFuZ3VlIGRcXCdhZmZpY2hhZ2UnOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAnQW5nbGFpcyAoZW4pJzogJ2VuJyxcclxuICAgICAgICAgICdDaGlub2lzIChjbiknOiAnY24nLFxyXG4gICAgICAgICAgJ0FsbGVtYW5kIChkZSknOiAnZGUnLFxyXG4gICAgICAgICAgJ0ZyYW7Dp2FpcyAoZnIpJzogJ2ZyJyxcclxuICAgICAgICAgICdKYXBvbmFpcyAoamEpJzogJ2phJyxcclxuICAgICAgICAgICdDb3LDqWVuIChrbyknOiAna28nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgamE6IHtcclxuICAgICAgICAgICfooajnpLroqIDoqp7ml6LlrprlgKQnOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAn6Iux6KqeIChlbiknOiAnZW4nLFxyXG4gICAgICAgICAgJ+S4reWbveiqniAoY24pJzogJ2NuJyxcclxuICAgICAgICAgICfjg4njgqTjg4Toqp4gKGRlKSc6ICdkZScsXHJcbiAgICAgICAgICAn44OV44Op44Oz44K56KqeIChmciknOiAnZnInLFxyXG4gICAgICAgICAgJ+aXpeacrOiqniAoamEpJzogJ2phJyxcclxuICAgICAgICAgICfpn5Plm73oqp4gKGtvKSc6ICdrbycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbjoge1xyXG4gICAgICAgICAgJ+S9v+eUqOaYvuekuuivreiogCc6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICfoi7Hor60gKGVuKSc6ICdlbicsXHJcbiAgICAgICAgICAn5rGJ6K+tIChjbiknOiAnY24nLFxyXG4gICAgICAgICAgJ+W+t+ivrSAoZGUpJzogJ2RlJyxcclxuICAgICAgICAgICfms5Xor60gKGZyKSc6ICdmcicsXHJcbiAgICAgICAgICAn5pel6K+tIChqYSknOiAnamEnLFxyXG4gICAgICAgICAgJ+mfqeivrSAoa28pJzogJ2tvJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGtvOiB7XHJcbiAgICAgICAgICAn7KO8IOyCrOyaqSDslrjslrQg7IKs7JqpJzogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgJ+yYgeyWtCAoZW4pJzogJ2VuJyxcclxuICAgICAgICAgICfspJHqta3slrQgKGNuKSc6ICdjbicsXHJcbiAgICAgICAgICAn64+F7J287Ja0IChkZSknOiAnZGUnLFxyXG4gICAgICAgICAgJ+2UhOuekeyKpOyWtCAoZnIpJzogJ2ZyJyxcclxuICAgICAgICAgICfsnbzrs7jslrQgKGphKSc6ICdqYScsXHJcbiAgICAgICAgICAn7ZWc6rWt7Ja0IChrbyknOiAna28nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIGRlZmF1bHQ6ICdkZWZhdWx0JyxcclxuICAgICAgZGVidWc6IHRydWUsXHJcbiAgICAgIHNldHRlckZ1bmM6IChvcHRpb25zLCB2YWx1ZSkgPT4ge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJ2RlZmF1bHQnKVxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIG9wdGlvbnNbJ0FsZXJ0c0xhbmd1YWdlJ10gPSB2YWx1ZTtcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnVGltZWxpbmVMYW5ndWFnZScsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ1RpbWVsaW5lIGxhbmd1YWdlJyxcclxuICAgICAgICBkZTogJ1RpbWVsaW5lIFNwcmFjaGUnLFxyXG4gICAgICAgIGZyOiAnTGFuZ3VlIGRlIGxhIHRpbWVsaW5lJyxcclxuICAgICAgICBqYTogJ+OCv+OCpOODoOODqeOCpOODs+OBruiogOiqnicsXHJcbiAgICAgICAgY246ICfml7bpl7TovbTmlofmnKznmoTor63oqIAnLFxyXG4gICAgICAgIGtvOiAn7YOA7J6E65287J24IOyWuOyWtCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdzZWxlY3QnLFxyXG4gICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgZW46IHtcclxuICAgICAgICAgICdVc2UgRkZYSVYgUGx1Z2luIExhbmd1YWdlJzogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgJ0VuZ2xpc2ggKGVuKSc6ICdlbicsXHJcbiAgICAgICAgICAnQ2hpbmVzZSAoY24pJzogJ2NuJyxcclxuICAgICAgICAgICdHZXJtYW4gKGRlKSc6ICdkZScsXHJcbiAgICAgICAgICAnRnJlbmNoIChmciknOiAnZnInLFxyXG4gICAgICAgICAgJ0phcGFuZXNlIChqYSknOiAnamEnLFxyXG4gICAgICAgICAgJ0tvcmVhbiAoa28pJzogJ2tvJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlOiB7XHJcbiAgICAgICAgICAnQmVudXR6ZSBGRlhJViBQbHVnaW4gU3ByYWNoZSc6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICdFbmdsaXNjaCAoZW4pJzogJ2VuJyxcclxuICAgICAgICAgICdDaGluZXNpc2NoIChjbiknOiAnY24nLFxyXG4gICAgICAgICAgJ0RldXRzY2ggKGRlKSc6ICdkZScsXHJcbiAgICAgICAgICAnRnJhbnrDtnNpc2NoIChmciknOiAnZnInLFxyXG4gICAgICAgICAgJ0phcGFuaXNjaCAoamEpJzogJ2phJyxcclxuICAgICAgICAgICdLb3JlYW5pc2NoIChrbyknOiAna28nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZnI6IHtcclxuICAgICAgICAgICdVdGlsaXNlciBsYSBsYW5ndWUgZHUgUGx1Z2luIEZGWElWJzogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgJ0FuZ2xhaXMgKGVuKSc6ICdlbicsXHJcbiAgICAgICAgICAnQ2hpbm9pcyAoY24pJzogJ2NuJyxcclxuICAgICAgICAgICdBbGxlbWFuZCAoZGUpJzogJ2RlJyxcclxuICAgICAgICAgICdGcmFuw6dhaXMgKGZyKSc6ICdmcicsXHJcbiAgICAgICAgICAnSmFwb25haXMgKGphKSc6ICdqYScsXHJcbiAgICAgICAgICAnQ29yw6llbiAoa28pJzogJ2tvJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGphOiB7XHJcbiAgICAgICAgICAnRkZYSVYgUGx1Z2lu44Gu6KiA6Kqe6Kit5a6aJzogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgJ+iLseiqniAoZW4pJzogJ2VuJyxcclxuICAgICAgICAgICfkuK3lm73oqp4gKGNuKSc6ICdjbicsXHJcbiAgICAgICAgICAn44OJ44Kk44OE6KqeIChkZSknOiAnZGUnLFxyXG4gICAgICAgICAgJ+ODleODqeODs+OCueiqniAoZnIpJzogJ2ZyJyxcclxuICAgICAgICAgICfml6XmnKzoqp4gKGphKSc6ICdqYScsXHJcbiAgICAgICAgICAn6Z+T5Zu96KqeIChrbyknOiAna28nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY246IHtcclxuICAgICAgICAgICfkvb/nlKjmnIDnu4jlubvmg7NYSVbop6PmnpDmj5Lku7borr7nva7nmoTor63oqIAnOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAn6Iux6K+tIChlbiknOiAnZW4nLFxyXG4gICAgICAgICAgJ+axieivrSAoY24pJzogJ2NuJyxcclxuICAgICAgICAgICflvrfor60gKGRlKSc6ICdkZScsXHJcbiAgICAgICAgICAn5rOV6K+tIChmciknOiAnZnInLFxyXG4gICAgICAgICAgJ+aXpeivrSAoamEpJzogJ2phJyxcclxuICAgICAgICAgICfpn6nor60gKGtvKSc6ICdrbycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBrbzoge1xyXG4gICAgICAgICAgJ0ZGWElWIFBsdWdpbiDslrjslrQg7IKs7JqpJzogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgJ+yYgeyWtCAoZW4pJzogJ2VuJyxcclxuICAgICAgICAgICfspJHqta3slrQgKGNuKSc6ICdjbicsXHJcbiAgICAgICAgICAn64+F7J287Ja0IChkZSknOiAnZGUnLFxyXG4gICAgICAgICAgJ+2UhOuekeyKpOyWtCAoZnIpJzogJ2ZyJyxcclxuICAgICAgICAgICfsnbzrs7jslrQgKGphKSc6ICdqYScsXHJcbiAgICAgICAgICAn7ZWc6rWt7Ja0IChrbyknOiAna28nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIGRlZmF1bHQ6ICdkZWZhdWx0JyxcclxuICAgICAgZGVidWc6IHRydWUsXHJcbiAgICAgIHNldHRlckZ1bmM6IChvcHRpb25zLCB2YWx1ZSkgPT4ge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJ2RlZmF1bHQnKVxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIG9wdGlvbnNbJ1RpbWVsaW5lTGFuZ3VhZ2UnXSA9IHZhbHVlO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdTa2luJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnUmFpZGJvc3MgU2tpbicsXHJcbiAgICAgICAgZGU6ICdSYWlkYm9zcyBTa2luJyxcclxuICAgICAgICBmcjogJ1JhaWRib3NzIFNraW4nLFxyXG4gICAgICAgIGphOiAnUmFpZGJvc3Pjga7jgrnjgq3jg7MnLFxyXG4gICAgICAgIGNuOiAnUmFpZGJvc3Pnmq7ogqQnLFxyXG4gICAgICAgIGtvOiAnUmFpZGJvc3Mg7Iqk7YKoJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ3NlbGVjdCcsXHJcbiAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICBlbjoge1xyXG4gICAgICAgICAgJ0RlZmF1bHQnOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAnbGlwcGUnOiAnbGlwcGUnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGU6IHtcclxuICAgICAgICAgICdEZWZhdWx0JzogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgJ2xpcHBlJzogJ2xpcHBlJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZyOiB7XHJcbiAgICAgICAgICAnRMOpZmF1dCc6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICdsaXBwZSc6ICdsaXBwZScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBqYToge1xyXG4gICAgICAgICAgJ+WIneacn+ioreWumic6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICdsaXBwZSc6ICdsaXBwZScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbjoge1xyXG4gICAgICAgICAgJ+m7mOiupCc6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICdsaXBwZSc6ICdsaXBwZScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBrbzoge1xyXG4gICAgICAgICAgJ+q4sOuzuCc6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICdsaXBwZSc6ICdsaXBwZScsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdUaW1lbGluZUVuYWJsZWQnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdUaW1lbGluZSBlbmFibGVkJyxcclxuICAgICAgICBkZTogJ1RpbWVsaW5lIGFrdGl2aWVydCcsXHJcbiAgICAgICAgZnI6ICdUaW1lbGluZSBhY3RpdsOpZScsXHJcbiAgICAgICAgamE6ICfjgr/jgqTjg6Djg6njgqTjg7PjgpLmnInlirnjgavjgZnjgosnLFxyXG4gICAgICAgIGNuOiAn5ZCv55So5pe26Ze06L20JyxcclxuICAgICAgICBrbzogJ+2DgOyehOudvOyduCDtmZzshLHtmZQnLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICBkZWZhdWx0OiB0cnVlLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdBbGVydHNFbmFibGVkJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnQWxlcnRzIGVuYWJsZWQnLFxyXG4gICAgICAgIGRlOiAnQWxlcnRzIGFrdGl2aWVydCcsXHJcbiAgICAgICAgZnI6ICdBbGVydGVzIGFjdGl2w6llcycsXHJcbiAgICAgICAgamE6ICforablkYrmg4XloLHjgpLmnInlirnjgavjgZnjgosnLFxyXG4gICAgICAgIGNuOiAn5ZCv55So5o+Q56S65paH5pys5pi+56S6JyxcclxuICAgICAgICBrbzogJ+yVjOuejCDtmZzshLHtmZQnLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICBkZWZhdWx0OiB0cnVlLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdTaG93VGltZXJCYXJzQXRTZWNvbmRzJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnVGltZXIgYmFyIHNob3cgd2luZG93IChzZWNvbmRzKScsXHJcbiAgICAgICAgZGU6ICdUaW1lci1CYXIgQW56ZWlnZWRhdWVyIChpbiBTZWt1bmRlbiknLFxyXG4gICAgICAgIGZyOiAnRmVuw6p0cmUgZFxcJ2FmZmljaGFnZSBkZSBsYSBiYXJyZSBkZSB0ZW1wcyAoc2Vjb25kZXMpJyxcclxuICAgICAgICBqYTogJ+OCv+OCpOODoOODkOODvOOBq+aZgumWk+ihqOekuiAo56eSKScsXHJcbiAgICAgICAgY246ICforqHml7bmnaHmmL7npLrml7bplb8gKOenkiknLFxyXG4gICAgICAgIGtvOiAn7YOA7J6E65287J247J2EIO2RnOyLnO2VoCDquLDspIAg7Iuc6rCEICjstIgg7J207ZWYKScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdmbG9hdCcsXHJcbiAgICAgIGRlZmF1bHQ6IDMwLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdLZWVwRXhwaXJlZFRpbWVyQmFyc0ZvclNlY29uZHMnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdLZWVwIGV4cGlyZWQgdGltZXIgYmFyIChzZWNvbmRzKScsXHJcbiAgICAgICAgZGU6ICdCZWhhbHRlIGFiZ2VsYXVmZW5lIFRpbWVyLUJhciAoaW4gU2VrdW5kZW4pJyxcclxuICAgICAgICBmcjogJ0dhcmRlciBsYSBiYXJyZSBkZSB0ZW1wcyBleHBpcsOpZSAoc2Vjb25kZXMpJyxcclxuICAgICAgICBqYTogJ+e1guS6huOBl+OBn+OCv+OCpOODoOODkOODvOOBjOa2iOOBiOOCi+OBvuOBp+OBruW+heOBoeaZgumWkyAo56eSKScsXHJcbiAgICAgICAgY246ICflt7LlpLHmlYjnmoTorqHml7bmnaHnmoTmt6Hlh7rml7bpl7QgKOenkiknLFxyXG4gICAgICAgIGtvOiAn66eM66OM65CcIO2DgOyehOudvOyduOydtCDsgqzrnbzsp4DquLDquYzsp4DsnZgg7Iuc6rCEICjstIgpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogMC43LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdCYXJFeHBpcmVzU29vblNlY29uZHMnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdUaW1lIHRvIHJlY29sb3IgdGltZXIgYXMgZXhwaXJpbmcgc29vbiAoc2Vjb25kcyknLFxyXG4gICAgICAgIGRlOiAnWmVpdCBiaXMgZWluIGJhbGQgYXVzbGF1ZmVuZGVyIFRpbWVyIHVtZ2Vmw6RyYnQgd2lyZCAoaW4gU2VrdW5kZW4pJyxcclxuICAgICAgICBmcjogJ1JlY29sb3Jpc2F0aW9uIGRlIGxhIGJhcnJlIGRlIHRlbXBzIGF2YW50IGV4cGlyYXRpb24gKHNlY29uZGVzKScsXHJcbiAgICAgICAgamE6ICfjgr/jgqTjg6Djg5Djg7zjgYzntYLkuobliY3jgavlho3luqboibLku5jjgZHjga7mrovjgormmYLplpMgKOenkiknLFxyXG4gICAgICAgIGNuOiAn5YCS6K6h5pe25bCP5LqO6K+l5YC85pe25b2T5YmN6K6h5pe25p2h5Y+Y6ImyICjnp5IpJyxcclxuICAgICAgICBrbzogJ+2DgOyehOudvOyduOydmCDsg4nsg4HsnYQg67CU6r+AIOq4sOykgCDsi5zqsIQgKOy0iCDsnbTtlZgpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2ludGVnZXInLFxyXG4gICAgICBkZWZhdWx0OiA2LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdNYXhOdW1iZXJPZlRpbWVyQmFycycsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ01heCBudW1iZXIgb2YgdGltZXIgYmFycycsXHJcbiAgICAgICAgZGU6ICdNYXggQW56YWhsIGFuIFRpbWVyLUJhcnMnLFxyXG4gICAgICAgIGZyOiAnTm9tYnJlIG1heCBkZSBiYXJyZXMgZGUgdGVtcHMnLFxyXG4gICAgICAgIGphOiAn44K/44Kk44Og44OQ44O844Gu5pyA5aSn5pWwJyxcclxuICAgICAgICBjbjogJ+iuoeaXtuadoeacgOWkp+aVsOmHjycsXHJcbiAgICAgICAga286ICftkZzsi5ztlaAg7YOA7J6E65287J247J2YIOy1nOuMgCDqsJzsiJgnLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnaW50ZWdlcicsXHJcbiAgICAgIGRlZmF1bHQ6IDYsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ0Rpc3BsYXlBbGFybVRleHRGb3JTZWNvbmRzJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnQWxhcm0gdGV4dCBkaXNwbGF5IGR1cmF0aW9uIChzZWNvbmRzKScsXHJcbiAgICAgICAgZGU6ICdBbGFybS1UZXh0IEFuemVpZ2VkYXVlciAoaW4gU2VrdW5kZW4pJyxcclxuICAgICAgICBmcjogJ0R1csOpZSBkXFwnYWZmaWNoYWdlIGR1IHRleHRlIGRcXCdhbGFybWUgKHNlY29uZGVzKScsXHJcbiAgICAgICAgamE6ICforabloLHjg4bjgq3jgrnjg4jooajnpLrmmYLplpPjga7plbfjgZUgKOenkiknLFxyXG4gICAgICAgIGNuOiAn6K2m5oql5paH5a2X5pi+56S65oyB57ut5pe26Ze0ICjnp5IpJyxcclxuICAgICAgICBrbzogJ+qyveqzoCDthY3siqTtirjrpbwg7ZGc7Iuc7ZWgIOyLnOqwhCAo7LSIKScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdmbG9hdCcsXHJcbiAgICAgIGRlZmF1bHQ6IDMsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ0Rpc3BsYXlBbGVydFRleHRGb3JTZWNvbmRzJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnQWxlcnQgdGV4dCBkaXNwbGF5IGR1cmF0aW9uIChzZWNvbmRzKScsXHJcbiAgICAgICAgZGU6ICdBbGVydC1UZXh0IEFuemVpZ2VkYXVlciAoaW4gU2VrdW5kZW4pJyxcclxuICAgICAgICBmcjogJ0R1csOpZSBkXFwnYWZmaWNoYWdlIGR1IHRleHRlIGRcXCdhbGVydGUgKHNlY29uZGVzKScsXHJcbiAgICAgICAgamE6ICforablkYrjg4bjgq3jgrnjg4jooajnpLrmmYLplpPjga7plbfjgZUgKOenkiknLFxyXG4gICAgICAgIGNuOiAn6K2m5ZGK5paH5a2X5pi+56S65oyB57ut5pe26Ze0ICjnp5IpJyxcclxuICAgICAgICBrbzogJ+yjvOydmCDthY3siqTtirjrpbwg7ZGc7Iuc7ZWgIOyLnOqwhCAo7LSIKScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdmbG9hdCcsXHJcbiAgICAgIGRlZmF1bHQ6IDMsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ0Rpc3BsYXlJbmZvVGV4dEZvclNlY29uZHMnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdJbmZvIHRleHQgZGlzcGxheSBkdXJhdGlvbiAoc2Vjb25kcyknLFxyXG4gICAgICAgIGRlOiAnSW5mby1UZXh0IEFuemVpZ2VkYXVlciAoaW4gU2VrdW5kZW4pJyxcclxuICAgICAgICBmcjogJ0R1csOpZSBkXFwnYWZmaWNoYWdlIGR1IHRleHRlIGRcXCdpbmZvcm1hdGlvbiAoc2Vjb25kZXMpJyxcclxuICAgICAgICBqYTogJ+aDheWgseODhuOCreOCueODiOihqOekuuaZgumWk+OBrumVt+OBlSAo56eSKScsXHJcbiAgICAgICAgY246ICfkv6Hmga/mloflrZfmmL7npLrmjIHnu63ml7bpl7QgKOenkiknLFxyXG4gICAgICAgIGtvOiAn7JWI64K0IO2FjeyKpO2KuOulvCDtkZzsi5ztlaAg7Iuc6rCEICjstIgpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogMyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnQWxhcm1Tb3VuZFZvbHVtZScsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ0FsYXJtIHNvdW5kIHZvbHVtZSAoMC0xKScsXHJcbiAgICAgICAgZGU6ICdBbGFybSBMYXV0c3TDpHJrZSAoMC0xKScsXHJcbiAgICAgICAgZnI6ICdWb2x1bWUgZGUgbFxcJ2FsYXJtZSAoMC0xKScsXHJcbiAgICAgICAgamE6ICforabloLHpn7Plo7Djga7pn7Pph48gKDAtMSknLFxyXG4gICAgICAgIGNuOiAn6K2m5oql5o+Q56S66Z+z55qE6Z+z6YePICgwLTEpJyxcclxuICAgICAgICBrbzogJ+qyveqzoCDshozrpqwg7YGs6riwICgwLTEpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogMSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnQWxlcnRTb3VuZFZvbHVtZScsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ0FsZXJ0IHNvdW5kIHZvbHVtZSAoMC0xKScsXHJcbiAgICAgICAgZGU6ICdBbGVydCBMYXV0c3TDpHJrZSAoMC0xKScsXHJcbiAgICAgICAgZnI6ICdWb2x1bWUgZGUgbFxcJ2FsZXJ0ZSAoMC0xKScsXHJcbiAgICAgICAgamE6ICforablkYrpn7Plo7Djga7pn7Pph48gKDAtMSknLFxyXG4gICAgICAgIGNuOiAn6K2m5ZGK5o+Q56S66Z+z55qE6Z+z6YePICgwLTEpJyxcclxuICAgICAgICBrbzogJ+yjvOydmCDshozrpqwg7YGs6riwICgwLTEpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogMSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnSW5mb1NvdW5kVm9sdW1lJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnSW5mbyBzb3VuZCB2b2x1bWUgKDAtMSknLFxyXG4gICAgICAgIGRlOiAnSW5mbyBMYXV0c3TDpHJrZSAoMC0xKScsXHJcbiAgICAgICAgZnI6ICdWb2x1bWUgZGUgbFxcJ2luZm8gKDAtMSknLFxyXG4gICAgICAgIGphOiAn5oOF5aCx6Z+z5aOw44Gu6Z+z6YePICgwLTEpJyxcclxuICAgICAgICBjbjogJ+S/oeaBr+aPkOekuumfs+eahOmfs+mHjyAoMC0xKScsXHJcbiAgICAgICAga286ICfslYjrgrQg7IaM66asIO2BrOq4sCAoMC0xKScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdmbG9hdCcsXHJcbiAgICAgIGRlZmF1bHQ6IDEsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ0xvbmdTb3VuZFZvbHVtZScsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ0xvbmcgc291bmQgdm9sdW1lICgwLTEpJyxcclxuICAgICAgICBkZTogJ0xhbmdlciBUb24gTGF1dHN0w6Rya2UgKDAtMSknLFxyXG4gICAgICAgIGZyOiAnVm9sdW1lIGR1IHNvbiBsb25nICgwLTEpJyxcclxuICAgICAgICBqYTogJ+mVt+OBhOmfs+WjsOOBrumfs+mHjyAoMC0xKScsXHJcbiAgICAgICAgY246ICfplb/mj5DnpLrpn7PnmoTpn7Pph48gKDAtMSknLFxyXG4gICAgICAgIGtvOiAn6ri0IOyGjOumrCDtgazquLAgKDAtMSknLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnZmxvYXQnLFxyXG4gICAgICBkZWZhdWx0OiAxLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdQdWxsU291bmRWb2x1bWUnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdQdWxsIHNvdW5kIHZvbHVtZSAoMC0xKScsXHJcbiAgICAgICAgZGU6ICdQdWxsIExhdXRzdMOkcmtlICgwLTEpJyxcclxuICAgICAgICBmcjogJ1ZvbHVtZSBkdSBzb24gZGUgcHVsbCAoMC0xKScsXHJcbiAgICAgICAgamE6ICfjgr/jgrLlj5bjgovlirnmnpzpn7Pjga7pn7Pph48gKDAtMSknLFxyXG4gICAgICAgIGNuOiAn5byA5oCq5o+Q56S66Z+z55qE6Z+z6YePICgwLTEpJyxcclxuICAgICAgICBrbzogJ+2SgOungSDshozrpqwg7YGs6riwICgwLTEpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogMSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnY2FjdGJvdFdvcm1ob2xlU3RyYXQnLFxyXG4gICAgICAvLyBUT0RPOiBtYXliZSBuZWVkIHNvbWUgd2F5IHRvIGdyb3VwIHRoZXNlIGtpbmRzIG9mXHJcbiAgICAgIC8vIG9wdGlvbnMgaWYgd2UgZW5kIHVwIGhhdmluZyBhIGxvdD9cclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnQWxleCBVbHRpbWF0ZTogZW5hYmxlIGNhY3Rib3QgV29ybWhvbGUgc3RyYXQnLFxyXG4gICAgICAgIGRlOiAnQWxleCBVbHRpbWF0ZTogYWt0aXZpZXJlIGNhY3Rib3QgV29ybWhvbGUgU3RyYXRlZ2llJyxcclxuICAgICAgICBmcjogJ0FsZXggZmF0YWwgOiBhY3RpdmVyIGNhY3Rib3QgcG91ciBXb3JtaG9sZSBzdHJhdCcsXHJcbiAgICAgICAgamE6ICfntbbjgqLjg6zjgq3jgrXjg7Pjg4Djg7zoqI7mu4XmiKbvvJpjYWN0Ym9044CM5qyh5YWD5pat57W244Gu44Oe44O844OB44CN44Ku44Of44OD44KvJyxcclxuICAgICAgICBjbjogJ+S6muWOhuWxseWkp+e7neWig+aImO+8mmNhY3Rib3TngbXms4novoXliqnlip/og70nLFxyXG4gICAgICAgIGtvOiAn7KCIIOyVjOugiTogY2FjdGJvdCDsm5ztmYAg6rO1656167Cp7IudIO2ZnOyEse2ZlCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdjaGVja2JveCcsXHJcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdjYWN0Ym90ZThzVXB0aW1lS25vY2tiYWNrU3RyYXQnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdlOHM6IGVuYWJsZSBjYWN0Ym90IFVwdGltZSBLbm9ja2JhY2sgc3RyYXQnLFxyXG4gICAgICAgIGRlOiAnZThzOiBha3RpdmllcmUgY2FjdGJvdCBVcHRpbWUgS25vY2tiYWNrIFN0cmF0ZWdpZScsXHJcbiAgICAgICAgZnI6ICdlOHMgOiBhY3RpdmVyIGNhY3Rib3QgcG91ciBVcHRpbWUgS25vY2tiYWNrIHN0cmF0JyxcclxuICAgICAgICBqYTogJ+OCqOODh+ODs+mbtuW8j+WFsemztOe3qO+8lOWxpO+8mmNhY3Rib3TjgIzjg5jjg7Tjg7Pjg6rjg7zjgrnjg4jjg6njgqTjgq8gKOODjuODg+OCr+ODkOODg+OCrynjgI3jgq7jg5/jg4Pjgq8nLFxyXG4gICAgICAgIGNuOiAnRThTOiDlkK/nlKhjYWN0Ym9055qE5Ye76YCA5o+Q56S65Yqf6IO9JyxcclxuICAgICAgICBrbzogJ+qzteuqhSDsmIHsm4UgNOy4tTogY2FjdGJvdCDsoJXtmZXtlZwg7YOA7J2067CNIOuEieuwseuwqeyngCDqs7XrnrUg7Zmc7ISx7ZmUJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2NoZWNrYm94JyxcclxuICAgICAgZGVmYXVsdDogZmFsc2UsXHJcbiAgICB9LFxyXG4gIF0sXHJcbn07XHJcblxyXG5Vc2VyQ29uZmlnLnJlZ2lzdGVyT3B0aW9ucygncmFpZGJvc3MnLCB0ZW1wbGF0ZU9wdGlvbnMsIHVzZXJGaWxlSGFuZGxlcik7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEVtdWxhdGVkTWFwIHtcclxuICBjb25zdHJ1Y3RvcihlbXVsYXRvcikge1xyXG5cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTGFuZyB9IGZyb20gJy4vbGFuZ3VhZ2VzJztcclxuaW1wb3J0IFJlZ2V4ZXMgZnJvbSAnLi9yZWdleGVzJztcclxuaW1wb3J0IE5ldFJlZ2V4ZXMgZnJvbSAnLi9uZXRyZWdleGVzJztcclxuXHJcbi8vIEZpbGwgaW4gTG9jYWxlUmVnZXggc28gdGhhdCB0aGluZ3MgbGlrZSBMb2NhbGVSZWdleC5jb3VudGRvd25TdGFydC5kZSBpcyBhIHZhbGlkIHJlZ2V4LlxyXG5jb25zdCBsb2NhbGVMaW5lcyA9IHtcclxuICBjb3VudGRvd25TdGFydDoge1xyXG4gICAgZW46ICdCYXR0bGUgY29tbWVuY2luZyBpbiAoPzx0aW1lPlxcXFx5e0Zsb2F0fSkgc2Vjb25kcyEgXFxcXCgoPzxwbGF5ZXI+Lio/KVxcXFwpJyxcclxuICAgIGRlOiAnTm9jaCAoPzx0aW1lPlxcXFx5e0Zsb2F0fSkgU2VrdW5kZW4gYmlzIEthbXBmYmVnaW5uISBcXFxcKCg/PHBsYXllcj4uKj8pXFxcXCknLFxyXG4gICAgZnI6ICdEw6lidXQgZHUgY29tYmF0IGRhbnMgKD88dGltZT5cXFxceXtGbG9hdH0pIHNlY29uZGVzWyBdPyEgXFxcXCgoPzxwbGF5ZXI+Lio/KVxcXFwpJyxcclxuICAgIGphOiAn5oim6ZeY6ZaL5aeL44G+44GnKD88dGltZT5cXFxceXtGbG9hdH0p56eS77yBIFxcXFwoKD88cGxheWVyPi4qPylcXFxcKScsXHJcbiAgICBjbjogJ+i3neemu+aImOaWl+W8gOWni+i/mOaciSg/PHRpbWU+XFxcXHl7RmxvYXR9Keenku+8gSDvvIgoPzxwbGF5ZXI+Lio/Ke+8iScsXHJcbiAgICBrbzogJ+yghO2IrCDsi5zsnpEgKD88dGltZT5cXFxceXtGbG9hdH0p7LSIIOyghCEgXFxcXCgoPzxwbGF5ZXI+Lio/KVxcXFwpJyxcclxuICB9LFxyXG4gIGNvdW50ZG93bkVuZ2FnZToge1xyXG4gICAgZW46ICdFbmdhZ2UhJyxcclxuICAgIGRlOiAnU3RhcnQhJyxcclxuICAgIGZyOiAnw4AgbFxcJ2F0dGFxdWVbIF0/IScsXHJcbiAgICBqYTogJ+aIpumXmOmWi+Wni++8gScsXHJcbiAgICBjbjogJ+aImOaWl+W8gOWni++8gScsXHJcbiAgICBrbzogJ+yghO2IrCDsi5zsnpEhJyxcclxuICB9LFxyXG4gIGNvdW50ZG93bkNhbmNlbDoge1xyXG4gICAgZW46ICdDb3VudGRvd24gY2FuY2VsZWQgYnkgKD88cGxheWVyPlxcXFx5e05hbWV9KScsXHJcbiAgICBkZTogJyg/PHBsYXllcj5cXFxceXtOYW1lfSkgaGF0IGRlbiBDb3VudGRvd24gYWJnZWJyb2NoZW4nLFxyXG4gICAgZnI6ICdMZSBjb21wdGUgw6AgcmVib3VycyBhIMOpdMOpIGludGVycm9tcHUgcGFyICg/PHBsYXllcj5cXFxceXtOYW1lfSlbIF0/XFxcXC4nLFxyXG4gICAgamE6ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p44Gr44KI44KK44CB5oim6ZeY6ZaL5aeL44Kr44Km44Oz44OI44GM44Kt44Oj44Oz44K744Or44GV44KM44G+44GX44Gf44CCJyxcclxuICAgIGNuOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeWPlua2iOS6huaImOaWl+W8gOWni+WAkuiuoeaXtuOAgicsXHJcbiAgICBrbzogJyg/PHBsYXllcj5cXFxceXtOYW1lfSkg64uY7J20IOy0iOydveq4sOulvCDst6jshoztlojsirXri4jri6RcXFxcLicsXHJcbiAgfSxcclxuICBhcmVhU2VhbDoge1xyXG4gICAgZW46ICcoPzxhcmVhPi4qPykgd2lsbCBiZSBzZWFsZWQgb2ZmIGluICg/PHRpbWU+XFxcXHl7RmxvYXR9KSBzZWNvbmRzIScsXHJcbiAgICBkZTogJ05vY2ggKD88dGltZT5cXFxceXtGbG9hdH0pIFNla3VuZGVuLCBiaXMgc2ljaCAoPzxhcmVhPi4qPykgc2NobGllw590JyxcclxuICAgIGZyOiAnRmVybWV0dXJlICg/PGFyZWE+Lio/KSBkYW5zICg/PHRpbWU+XFxcXHl7RmxvYXR9KSBzZWNvbmRlc1sgXT9cXFxcLicsXHJcbiAgICBqYTogJyg/PGFyZWE+Lio/KeOBruWwgemOluOBvuOBp+OBguOBqCg/PHRpbWU+XFxcXHl7RmxvYXR9KeenkicsXHJcbiAgICBjbjogJ+i3nSg/PGFyZWE+Lio/Keiiq+WwgemUgei/mOaciSg/PHRpbWU+XFxcXHl7RmxvYXR9KeenkicsXHJcbiAgICBrbzogJyg/PHRpbWU+XFxcXHl7RmxvYXR9Key0iCDtm4Tsl5AgKD88YXJlYT4uKj8pKOydtHzqsIApIOu0ieyHhOuQqeuLiOuLpFxcXFwuJyxcclxuICB9LFxyXG4gIGFyZWFVbnNlYWw6IHtcclxuICAgIGVuOiAnKD88YXJlYT4uKj8pIGlzIG5vIGxvbmdlciBzZWFsZWQuJyxcclxuICAgIGRlOiAnKD88YXJlYT4uKj8pIMO2ZmZuZXQgc2ljaCBlcm5ldXQuJyxcclxuICAgIGZyOiAnT3V2ZXJ0dXJlICg/PGFyZWE+Lio/KVsgXT8hJyxcclxuICAgIGphOiAnKD88YXJlYT4uKj8p44Gu5bCB6Y6W44GM6Kej44GL44KM44Gf4oCm4oCmJyxcclxuICAgIGNuOiAnKD88YXJlYT4uKj8p55qE5bCB6ZSB6Kej6Zmk5LqGJyxcclxuICAgIGtvOiAnKD88YXJlYT4uKj8p7J2YIOu0ieyHhOqwgCDtlbTsoJzrkJjsl4jsirXri4jri6RcXFxcLicsXHJcbiAgfSxcclxuICAvLyBSZWNpcGUgbmFtZSBhbHdheXMgc3RhcnQgd2l0aCBcXHVlMGJiXHJcbiAgLy8gSFEgaWNvbiBpcyBcXHVlMDNjXHJcbiAgY3JhZnRpbmdTdGFydDoge1xyXG4gICAgZW46ICdZb3UgYmVnaW4gc3ludGhlc2l6aW5nICg/PGNvdW50Pihhbj98XFxcXGQrKSApP1xcdWUwYmIoPzxyZWNpcGU+LiopXFxcXC4nLFxyXG4gICAgZGU6ICdEdSBoYXN0IGJlZ29ubmVuLCBkdXJjaCBTeW50aGVzZSAoPzxjb3VudD4oZWluKGV8ZXN8ZW18ZXIpP3xcXFxcZCspICk/XFx1ZTBiYig/PHJlY2lwZT4uKikgaGVyenVzdGVsbGVuXFxcXC4nLFxyXG4gICAgZnI6ICdWb3VzIGNvbW1lbmNleiDDoCBmYWJyaXF1ZXIgKD88Y291bnQ+KHVuZT98XFxcXGQrKSApP1xcdWUwYmIoPzxyZWNpcGU+LiopXFxcXC4nLFxyXG4gICAgamE6ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p44GvXFx1ZTBiYig/PHJlY2lwZT4uKikow5coPzxjb3VudD5cXFxcZCspKT/jga7oo73kvZzjgpLplovlp4vjgZfjgZ/jgIInLFxyXG4gICAgY246ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p5byA5aeL5Yi25L2c4oCcXFx1ZTBiYig/PHJlY2lwZT4uKinigJ0ow5coPzxjb3VudD5cXFxcZCspKT/jgIInLFxyXG4gICAga286ICdcXHVlMGJiKD88cmVjaXBlPi4qKSjDlyg/PGNvdW50PlxcXFxkKynqsJwpPyDsoJzsnpHsnYQg7Iuc7J6R7ZWp64uI64ukXFxcXC4nLFxyXG4gIH0sXHJcbiAgdHJpYWxDcmFmdGluZ1N0YXJ0OiB7XHJcbiAgICBlbjogJ1lvdSBiZWdpbiB0cmlhbCBzeW50aGVzaXMgb2YgXFx1ZTBiYig/PHJlY2lwZT4uKilcXFxcLicsXHJcbiAgICBkZTogJ0R1IGhhc3QgbWl0IGRlciBUZXN0c3ludGhlc2Ugdm9uIFxcdWUwYmIoPzxyZWNpcGU+LiopIGJlZ29ubmVuXFxcXC4nLFxyXG4gICAgZnI6ICdWb3VzIGNvbW1lbmNleiB1bmUgc3ludGjDqHNlIGRcXCdlc3NhaSBwb3VyIHVuZT8gXFx1ZTBiYig/PHJlY2lwZT4uKilcXFxcLicsXHJcbiAgICBqYTogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnjga9cXHVlMGJiKD88cmVjaXBlPi4qKeOBruijveS9nOe3tOe/kuOCkumWi+Wni+OBl+OBn+OAgicsXHJcbiAgICBjbjogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnlvIDlp4vnu4PkuaDliLbkvZxcXHVlMGJiKD88cmVjaXBlPi4qKeOAgicsXHJcbiAgICBrbzogJ1xcdWUwYmIoPzxyZWNpcGU+LiopIOygnOyekSDsl7DsirXsnYQg7Iuc7J6R7ZWp64uI64ukXFxcXC4nLFxyXG4gIH0sXHJcbiAgY3JhZnRpbmdGaW5pc2g6IHtcclxuICAgIGVuOiAnWW91IHN5bnRoZXNpemUgKD88Y291bnQ+KGFuP3xcXFxcZCspICk/XFx1ZTBiYig/PHJlY2lwZT4uKikoXFx1ZTAzYyk/XFxcXC4nLFxyXG4gICAgZGU6ICdEdSBoYXN0IGVyZm9sZ3JlaWNoICg/PGNvdW50PihlaW4oZXxlc3xlbXxlcik/fFxcXFxkKykgKT8oPzxyZWNpcGU+LiopKFxcdWUwM2MpPyBoZXJnZXN0ZWxsdFxcXFwuJyxcclxuICAgIGZyOiAnVm91cyBmYWJyaXF1ZXogKD88Y291bnQ+KHVuZT98XFxcXGQrKSApP1xcdWUwYmIoPzxyZWNpcGU+LiopKFxcdWUwM2MpP1xcXFwuJyxcclxuICAgIGphOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeOBr1xcdWUwYmIoPzxyZWNpcGU+LiopKFxcdWUwM2MpPyjDlyg/PGNvdW50PlxcXFxkKykpP+OCkuWujOaIkOOBleOBm+OBn++8gScsXHJcbiAgICBjbjogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnliLbkvZzigJxcXHVlMGJiKD88cmVjaXBlPi4qKShcXHVlMDNjKT/igJ0ow5coPzxjb3VudD5cXFxcZCspKT/miJDlip/vvIEnLFxyXG4gICAga286ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0pIOuLmOydtCBcXHVlMGJiKD88cmVjaXBlPi4qKShcXHVlMDNjKT8ow5coPzxjb3VudD5cXFxcZCsp6rCcKT8o7J2EfOulvCkg7JmE7ISx7ZaI7Iq164uI64ukIScsXHJcbiAgfSxcclxuICB0cmlhbENyYWZ0aW5nRmluaXNoOiB7XHJcbiAgICBlbjogJ1lvdXIgdHJpYWwgc3ludGhlc2lzIG9mIFxcdWUwYmIoPzxyZWNpcGU+LiopIHByb3ZlZCBhIHN1Y2Nlc3MhJyxcclxuICAgIGRlOiAnRGllIFRlc3RzeW50aGVzZSB2b24gXFx1ZTBiYig/PHJlY2lwZT4uKikgd2FyIGVyZm9sZ3JlaWNoIScsXHJcbiAgICBmcjogJ1ZvdHJlIHN5bnRow6hzZSBkXFwnZXNzYWkgcG91ciBmYWJyaXF1ZXIgXFx1ZTBiYig/PHJlY2lwZT4uKikgYSDDqXTDqSBjb3Vyb25uw6llIGRlIHN1Y2PDqHMhJyxcclxuICAgIGphOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeOBr1xcdWUwYmIoPzxyZWNpcGU+Liop44Gu6KO95L2c57e057+S44Gr5oiQ5Yqf44GX44Gf77yBJyxcclxuICAgIGNuOiAnKD88cGxheWVyPlxcXFx5e05hbWV9Kee7g+S5oOWItuS9nFxcdWUwYmIoPzxyZWNpcGU+Liop5oiQ5Yqf5LqG77yBJyxcclxuICAgIGtvOiAnXFx1ZTBiYig/PHJlY2lwZT4uKikg7KCc7J6RIOyXsOyKteyXkCDshLHqs7XtlojsirXri4jri6QhJyxcclxuICB9LFxyXG4gIGNyYWZ0aW5nRmFpbDoge1xyXG4gICAgZW46ICdZb3VyIHN5bnRoZXNpcyBmYWlscyEnLFxyXG4gICAgZGU6ICdEZWluZSBTeW50aGVzZSBpc3QgZmVobGdlc2NobGFnZW4hJyxcclxuICAgIGZyOiAnTGEgc3ludGjDqHNlIMOpY2hvdWVcXFxcLnszfScsXHJcbiAgICBqYTogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnjga/oo73kvZzjgavlpLHmlZfjgZfjgZ/igKbigKYnLFxyXG4gICAgY246ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p5Yi25L2c5aSx6LSl5LqG4oCm4oCmJyxcclxuICAgIGtvOiAn7KCc7J6R7JeQIOyLpO2MqO2WiOyKteuLiOuLpOKApuKAplxcXFwuJyxcclxuICB9LFxyXG4gIHRyaWFsQ3JhZnRpbmdGYWlsOiB7XHJcbiAgICBlbjogJ1lvdXIgdHJpYWwgc3ludGhlc2lzIG9mIFxcdWUwYmIoPzxyZWNpcGU+LiopIGZhaWxlZFxcXFwuezN9JyxcclxuICAgIGRlOiAnRGllIFRlc3RzeW50aGVzZSB2b24gXFx1ZTBiYig/PHJlY2lwZT4uKikgaXN0IGZlaGxnZXNjaGxhZ2VuXFxcXC57M30nLFxyXG4gICAgZnI6ICdWb3RyZSBzeW50aMOoc2UgZFxcJ2Vzc2FpIHBvdXIgZmFicmlxdWVyIFxcdWUwYmIoPzxyZWNpcGU+LiopIHNcXCdlc3Qgc29sZMOpZSBwYXIgdW4gw6ljaGVjXFxcXC57M30nLFxyXG4gICAgamE6ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p44GvXFx1ZTBiYig/PHJlY2lwZT4uKinjga7oo73kvZznt7Tnv5LjgavlpLHmlZfjgZfjgZ/igKbigKYnLFxyXG4gICAgY246ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p57uD5Lmg5Yi25L2cXFx1ZTBiYig/PHJlY2lwZT4uKinlpLHotKXkuobigKbigKYnLFxyXG4gICAga286ICdcXHVlMGJiKD88cmVjaXBlPi4qKSDsoJzsnpEg7Jew7Iq17JeQIOyLpO2MqO2WiOyKteuLiOuLpOKApuKAplxcXFwuJyxcclxuICB9LFxyXG4gIGNyYWZ0aW5nQ2FuY2VsOiB7XHJcbiAgICBlbjogJ1lvdSBjYW5jZWwgdGhlIHN5bnRoZXNpc1xcXFwuJyxcclxuICAgIGRlOiAnRHUgaGFzdCBkaWUgU3ludGhlc2UgYWJnZWJyb2NoZW5cXFxcLicsXHJcbiAgICBmcjogJ0xhIHN5bnRow6hzZSBlc3QgYW5udWzDqWVcXFxcLicsXHJcbiAgICBqYTogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnjga/oo73kvZzjgpLkuK3mraLjgZfjgZ/jgIInLFxyXG4gICAgY246ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p5Lit5q2i5LqG5Yi25L2c5L2c5Lia44CCJyxcclxuICAgIGtvOiAn7KCc7J6R7J2EIOykkeyngO2WiOyKteuLiOuLpFxcXFwuJyxcclxuICB9LFxyXG4gIHRyaWFsQ3JhZnRpbmdDYW5jZWw6IHtcclxuICAgIGVuOiAnWW91IGFiYW5kb25lZCB0cmlhbCBzeW50aGVzaXNcXFxcLicsXHJcbiAgICBkZTogJ1Rlc3RzeW50aGVzZSBhYmdlYnJvY2hlblxcXFwuJyxcclxuICAgIGZyOiAnVm91cyBhdmV6IGludGVycm9tcHUgbGEgc3ludGjDqHNlIGRcXCdlc3NhaVxcXFwuJyxcclxuICAgIGphOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeOBr+ijveS9nOe3tOe/kuOCkuS4reatouOBl+OBn+OAgicsXHJcbiAgICBjbjogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnlgZzmraLkuobnu4PkuaDjgIInLFxyXG4gICAga286ICfsoJzsnpEg7Jew7Iq17J2EIOykkeyngO2WiOyKteuLiOuLpFxcXFwuJyxcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG5cclxudHlwZSBMb2NhbGVMaW5lID0geyBlbjogc3RyaW5nIH0gJiBQYXJ0aWFsPFJlY29yZDxFeGNsdWRlPExhbmcsICdlbic+LCBzdHJpbmc+PjtcclxuXHJcbnR5cGUgTG9jYWxlUmVnZXhlc09iaiA9IFJlY29yZDxrZXlvZiB0eXBlb2YgbG9jYWxlTGluZXMsIFJlY29yZDxMYW5nLCBSZWdFeHA+PjtcclxuXHJcbmNsYXNzIFJlZ2V4U2V0IHtcclxuICByZWdleGVzPzogTG9jYWxlUmVnZXhlc09iajtcclxuICBuZXRSZWdleGVzPzogTG9jYWxlUmVnZXhlc09iajtcclxuXHJcbiAgZ2V0IGxvY2FsZVJlZ2V4KCk6IExvY2FsZVJlZ2V4ZXNPYmoge1xyXG4gICAgaWYgKHRoaXMucmVnZXhlcylcclxuICAgICAgcmV0dXJuIHRoaXMucmVnZXhlcztcclxuICAgIHRoaXMucmVnZXhlcyA9IHRoaXMuYnVpbGRMb2NhbGVSZWdleGVzKGxvY2FsZUxpbmVzLCAoczogc3RyaW5nKSA9PiBSZWdleGVzLmdhbWVMb2coeyBsaW5lOiBzICsgJy4qPycgfSkpO1xyXG4gICAgcmV0dXJuIHRoaXMucmVnZXhlcztcclxuICB9XHJcblxyXG4gIGdldCBsb2NhbGVOZXRSZWdleCgpOiBMb2NhbGVSZWdleGVzT2JqIHtcclxuICAgIGlmICh0aGlzLm5ldFJlZ2V4ZXMpXHJcbiAgICAgIHJldHVybiB0aGlzLm5ldFJlZ2V4ZXM7XHJcbiAgICB0aGlzLm5ldFJlZ2V4ZXMgPSB0aGlzLmJ1aWxkTG9jYWxlUmVnZXhlcyhsb2NhbGVMaW5lcywgKHM6IHN0cmluZykgPT4gTmV0UmVnZXhlcy5nYW1lTG9nKHsgbGluZTogcyArICdbXnxdKj8nIH0pKTtcclxuICAgIHJldHVybiB0aGlzLm5ldFJlZ2V4ZXM7XHJcbiAgfVxyXG5cclxuICBidWlsZExvY2FsZVJlZ2V4ZXMoXHJcbiAgICAgIGxvY2FsZXM6IHR5cGVvZiBsb2NhbGVMaW5lcyxcclxuICAgICAgYnVpbGRlcjogKHM6IHN0cmluZykgPT4gUmVnRXhwLFxyXG4gICk6IExvY2FsZVJlZ2V4ZXNPYmoge1xyXG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcclxuICAgICAgICBPYmplY3RcclxuICAgICAgICAgIC5lbnRyaWVzKGxvY2FsZXMpXHJcbiAgICAgICAgICAubWFwKChba2V5LCBsaW5lc10pID0+IFtrZXksIHRoaXMuYnVpbGRMb2NhbGVSZWdleChsaW5lcywgYnVpbGRlcildKSxcclxuICAgICkgYXMgTG9jYWxlUmVnZXhlc09iajtcclxuICB9XHJcblxyXG4gIGJ1aWxkTG9jYWxlUmVnZXgobGluZXM6IExvY2FsZUxpbmUsIGJ1aWxkZXI6IChzOiBzdHJpbmcpID0+IFJlZ0V4cCk6IFJlY29yZDxMYW5nLCBSZWdFeHA+IHtcclxuICAgIGNvbnN0IHJlZ2V4RW4gPSBidWlsZGVyKGxpbmVzLmVuKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGVuOiByZWdleEVuLFxyXG4gICAgICBkZTogbGluZXMuZGUgPyBidWlsZGVyKGxpbmVzLmRlKSA6IHJlZ2V4RW4sXHJcbiAgICAgIGZyOiBsaW5lcy5mciA/IGJ1aWxkZXIobGluZXMuZnIpIDogcmVnZXhFbixcclxuICAgICAgamE6IGxpbmVzLmphID8gYnVpbGRlcihsaW5lcy5qYSkgOiByZWdleEVuLFxyXG4gICAgICBjbjogbGluZXMuY24gPyBidWlsZGVyKGxpbmVzLmNuKSA6IHJlZ2V4RW4sXHJcbiAgICAgIGtvOiBsaW5lcy5rbyA/IGJ1aWxkZXIobGluZXMua28pIDogcmVnZXhFbixcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCByZWdleFNldCA9IG5ldyBSZWdleFNldCgpO1xyXG5cclxuZXhwb3J0IGNvbnN0IExvY2FsZVJlZ2V4ID0gcmVnZXhTZXQubG9jYWxlUmVnZXg7XHJcbmV4cG9ydCBjb25zdCBMb2NhbGVOZXRSZWdleCA9IHJlZ2V4U2V0LmxvY2FsZU5ldFJlZ2V4O1xyXG4iLCJpbXBvcnQgeyBMb2NhbGVOZXRSZWdleCB9IGZyb20gJy4uLy4uLy4uL3Jlc291cmNlcy90cmFuc2xhdGlvbnMnO1xyXG5pbXBvcnQgTmV0UmVnZXhlcyBmcm9tICcuLi8uLi8uLi9yZXNvdXJjZXMvbmV0cmVnZXhlcyc7XHJcbmltcG9ydCB7IExhbmcgfSBmcm9tICcuLi8uLi8uLi9yZXNvdXJjZXMvbGFuZ3VhZ2VzJztcclxuaW1wb3J0IHsgTG9nRXZlbnQgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9ldmVudCc7XHJcbmltcG9ydCBMaW5lRXZlbnQgZnJvbSAnLi9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQnO1xyXG5cclxuLy8gRGlzYWJsZSBuby1leHBsaWNpdC1hbnkgZm9yIGNsb25lRGF0YSBhcyBpdCBuZWVkcyB0byB3b3JrIG9uIHJhdyBvYmplY3RzIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLlxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5leHBvcnQgdHlwZSBEYXRhVHlwZSA9IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCBudWxsO1xyXG5cclxuZXhwb3J0IHR5cGUgRW11bGF0b3JMb2dFdmVudCA9IExvZ0V2ZW50ICYge1xyXG4gIGRldGFpbDoge1xyXG4gICAgbG9nczogTGluZUV2ZW50W107XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW11bGF0b3JDb21tb24ge1xyXG4gIHN0YXRpYyBjbG9uZURhdGEoZGF0YTogRGF0YVR5cGUsIGV4Y2x1ZGUgPSBbJ29wdGlvbnMnLCAncGFydHknXSk6IERhdGFUeXBlIHtcclxuICAgIGNvbnN0IHJldDogRGF0YVR5cGUgPSB7fTtcclxuXHJcbiAgICAvLyBVc2UgZXh0cmEgbG9naWMgZm9yIHRvcC1sZXZlbCBleHRlbmQgZm9yIHByb3BlcnR5IGV4Y2x1c2lvblxyXG4gICAgLy8gVGhpcyBjdXQgdGhlIGV4ZWN1dGlvbiB0aW1lIG9mIHRoaXMgY29kZSBmcm9tIDQxLDAwMG1zIHRvIDUwbXMgd2hlbiBwYXJzaW5nIGEgMTIgbWludXRlIHB1bGxcclxuICAgIGZvciAoY29uc3QgaSBpbiBkYXRhKSB7XHJcbiAgICAgIGlmIChleGNsdWRlLmluY2x1ZGVzKGkpKVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBkYXRhW2ldID09PSAnb2JqZWN0JylcclxuICAgICAgICByZXRbaV0gPSBFbXVsYXRvckNvbW1vbi5fY2xvbmVEYXRhKGRhdGFbaV0pO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgLy8gQXNzaWdubWVudCBvZiBhbnkgdG8gYW55LiBTZWUgRGF0YVR5cGUgZGVmaW5pdGlvbiBhYm92ZSBmb3IgcmVhc29uaW5nLlxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcclxuICAgICAgICByZXRbaV0gPSBkYXRhW2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBfY2xvbmVEYXRhKGRhdGE6IERhdGFUeXBlKTogRGF0YVR5cGUge1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xyXG4gICAgICAgIGNvbnN0IHJldCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSlcclxuICAgICAgICAgIHJldFtpXSA9IEVtdWxhdG9yQ29tbW9uLl9jbG9uZURhdGEoZGF0YVtpXSk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkYXRhID09PSBudWxsKVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBSZWdFeHApXHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoZGF0YSk7XHJcblxyXG4gICAgICBjb25zdCByZXQ6IERhdGFUeXBlID0ge307XHJcbiAgICAgIGZvciAoY29uc3QgaSBpbiBkYXRhKVxyXG4gICAgICAgIHJldFtpXSA9IEVtdWxhdG9yQ29tbW9uLl9jbG9uZURhdGEoZGF0YVtpXSk7XHJcblxyXG4gICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdGltZVRvU3RyaW5nKHRpbWU6IG51bWJlciwgaW5jbHVkZU1pbGxpcyA9IHRydWUpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgbmVnYXRpdmUgPSB0aW1lIDwgMCA/ICctJyA6ICcnO1xyXG4gICAgdGltZSA9IE1hdGguYWJzKHRpbWUpO1xyXG4gICAgY29uc3QgbWlsbGlzTnVtID0gdGltZSAlIDEwMDA7XHJcbiAgICBjb25zdCBzZWNzTnVtID0gKCh0aW1lICUgKDYwICogMTAwMCkpIC0gbWlsbGlzTnVtKSAvIDEwMDA7XHJcbiAgICAvLyBNaWxsaXNlY29uZHNcclxuICAgIGNvbnN0IG1pbGxpcyA9IGAwMCR7bWlsbGlzTnVtfWAuc3Vic3RyKC0zKTtcclxuICAgIGNvbnN0IHNlY3MgPSBgMCR7c2Vjc051bX1gLnN1YnN0cigtMik7XHJcbiAgICBjb25zdCBtaW5zID0gYDAkeygoKCh0aW1lICUgKDYwICogNjAgKiAxMDAwKSkgLSBtaWxsaXNOdW0pIC8gMTAwMCkgLSBzZWNzTnVtKSAvIDYwfWAuc3Vic3RyKC0yKTtcclxuICAgIHJldHVybiBuZWdhdGl2ZSArIG1pbnMgKyAnOicgKyBzZWNzICsgKGluY2x1ZGVNaWxsaXMgPyAnLicgKyBtaWxsaXMgOiAnJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdGltZVRvRGF0ZVN0cmluZyh0aW1lOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuZGF0ZU9iamVjdFRvRGF0ZVN0cmluZyhuZXcgRGF0ZSh0aW1lKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGF0ZU9iamVjdFRvRGF0ZVN0cmluZyhkYXRlOiBEYXRlKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBjb25zdCBtb250aCA9IEVtdWxhdG9yQ29tbW9uLnplcm9QYWQoKGRhdGUuZ2V0TW9udGgoKSArIDEpLnRvU3RyaW5nKCkpO1xyXG4gICAgY29uc3QgZGF5ID0gRW11bGF0b3JDb21tb24uemVyb1BhZChkYXRlLmdldERhdGUoKS50b1N0cmluZygpKTtcclxuICAgIHJldHVybiBgJHt5ZWFyfS0ke21vbnRofS0ke2RheX1gO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHRpbWVUb1RpbWVTdHJpbmcodGltZTogbnVtYmVyLCBpbmNsdWRlTWlsbGlzID0gZmFsc2UpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuZGF0ZU9iamVjdFRvVGltZVN0cmluZyhuZXcgRGF0ZSh0aW1lKSwgaW5jbHVkZU1pbGxpcyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGF0ZU9iamVjdFRvVGltZVN0cmluZyhkYXRlOiBEYXRlLCBpbmNsdWRlTWlsbGlzID0gZmFsc2UpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgaG91ciA9IEVtdWxhdG9yQ29tbW9uLnplcm9QYWQoZGF0ZS5nZXRIb3VycygpLnRvU3RyaW5nKCkpO1xyXG4gICAgY29uc3QgbWludXRlID0gRW11bGF0b3JDb21tb24uemVyb1BhZChkYXRlLmdldE1pbnV0ZXMoKS50b1N0cmluZygpKTtcclxuICAgIGNvbnN0IHNlY29uZCA9IEVtdWxhdG9yQ29tbW9uLnplcm9QYWQoZGF0ZS5nZXRTZWNvbmRzKCkudG9TdHJpbmcoKSk7XHJcbiAgICBsZXQgcmV0ID0gYCR7aG91cn06JHttaW51dGV9OiR7c2Vjb25kfWA7XHJcbiAgICBpZiAoaW5jbHVkZU1pbGxpcylcclxuICAgICAgcmV0ID0gcmV0ICsgYC4ke2RhdGUuZ2V0TWlsbGlzZWNvbmRzKCl9YDtcclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1zVG9EdXJhdGlvbihtczogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHRtcCA9IEVtdWxhdG9yQ29tbW9uLnRpbWVUb1N0cmluZyhtcywgZmFsc2UpO1xyXG4gICAgcmV0dXJuIHRtcC5yZXBsYWNlKCc6JywgJ20nKSArICdzJztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkYXRlVGltZVRvU3RyaW5nKHRpbWU6IG51bWJlciwgaW5jbHVkZU1pbGxpcyA9IGZhbHNlKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lKTtcclxuICAgIHJldHVybiBgJHt0aGlzLmRhdGVPYmplY3RUb0RhdGVTdHJpbmcoZGF0ZSl9ICR7dGhpcy5kYXRlT2JqZWN0VG9UaW1lU3RyaW5nKGRhdGUsIGluY2x1ZGVNaWxsaXMpfWA7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgemVyb1BhZChzdHI6IHN0cmluZywgbGVuID0gMik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gKCcnICsgc3RyKS5wYWRTdGFydChsZW4sICcwJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcHJvcGVyQ2FzZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbXlxcV19dK1teXFxzLV0qKSAqL2csICh0eHQpID0+IHtcclxuICAgICAgcmV0dXJuIHR4dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR4dC5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNwYWNlUGFkTGVmdChzdHI6IHN0cmluZywgbGVuOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHN0ci5wYWRTdGFydChsZW4sICcgJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZG9lc0xpbmVNYXRjaChsaW5lOiBzdHJpbmcsXHJcbiAgICAgIHJlZ2V4ZXM6IFJlY29yZDxMYW5nLCBSZWdFeHA+IHwgUmVnRXhwKTogUmVnRXhwRXhlY0FycmF5IHwgbnVsbCB7XHJcbiAgICBpZiAocmVnZXhlcyBpbnN0YW5jZW9mIFJlZ0V4cClcclxuICAgICAgcmV0dXJuIHJlZ2V4ZXMuZXhlYyhsaW5lKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGxhbmdTdHIgaW4gcmVnZXhlcykge1xyXG4gICAgICBjb25zdCBsYW5nID0gbGFuZ1N0ciBhcyBrZXlvZiB0eXBlb2YgcmVnZXhlcztcclxuICAgICAgY29uc3QgcmVzID0gcmVnZXhlc1tsYW5nXS5leGVjKGxpbmUpO1xyXG4gICAgICBpZiAocmVzKSB7XHJcbiAgICAgICAgaWYgKHJlcy5ncm91cHMpXHJcbiAgICAgICAgICByZXMuZ3JvdXBzLmxhbmd1YWdlID0gbGFuZztcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYXRjaFN0YXJ0KGxpbmU6IHN0cmluZyk6IFJlZ0V4cE1hdGNoQXJyYXkgfCB1bmRlZmluZWQge1xyXG4gICAgbGV0IHJlcztcclxuICAgIC8vIEN1cnJlbnRseSBhbGwgb2YgdGhlc2UgcmVnZXhlcyBoYXZlIGdyb3VwcyBpZiB0aGV5IG1hdGNoIGF0IGFsbCxcclxuICAgIC8vIGJ1dCBiZSByb2J1c3QgdG8gdGhhdCBjaGFuZ2luZyBpbiB0aGUgZnV0dXJlLlxyXG4gICAgcmVzID0gRW11bGF0b3JDb21tb24uZG9lc0xpbmVNYXRjaChsaW5lLCBFbXVsYXRvckNvbW1vbi5jb3VudGRvd25SZWdleGVzKTtcclxuICAgIGlmIChyZXMpIHtcclxuICAgICAgcmVzLmdyb3VwcyA/Pz0ge307XHJcbiAgICAgIHJlcy5ncm91cHMuU3RhcnRJbiA9IChwYXJzZUludChyZXMuZ3JvdXBzLnRpbWUgPz8gJzAnKSAqIDEwMDApLnRvU3RyaW5nKCk7XHJcbiAgICAgIHJlcy5ncm91cHMuU3RhcnRUeXBlID0gJ0NvdW50ZG93bic7XHJcbiAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICByZXMgPSBFbXVsYXRvckNvbW1vbi5kb2VzTGluZU1hdGNoKGxpbmUsIEVtdWxhdG9yQ29tbW9uLnNlYWxSZWdleGVzKTtcclxuICAgIGlmIChyZXMpIHtcclxuICAgICAgcmVzLmdyb3VwcyA/Pz0ge307XHJcbiAgICAgIHJlcy5ncm91cHMuU3RhcnRJbiA9ICcwJztcclxuICAgICAgcmVzLmdyb3Vwcy5TdGFydFR5cGUgPSAnU2VhbCc7XHJcbiAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICByZXMgPSBFbXVsYXRvckNvbW1vbi5kb2VzTGluZU1hdGNoKGxpbmUsIEVtdWxhdG9yQ29tbW9uLmVuZ2FnZVJlZ2V4ZXMpO1xyXG4gICAgaWYgKHJlcykge1xyXG4gICAgICByZXMuZ3JvdXBzID8/PSB7fTtcclxuICAgICAgcmVzLmdyb3Vwcy5TdGFydEluID0gJzAnO1xyXG4gICAgICByZXMuZ3JvdXBzLlN0YXJ0VHlwZSA9ICdFbmdhZ2UnO1xyXG4gICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1hdGNoRW5kKGxpbmU6IHN0cmluZyk6IFJlZ0V4cE1hdGNoQXJyYXkgfCB1bmRlZmluZWQge1xyXG4gICAgbGV0IHJlcztcclxuICAgIC8vIEN1cnJlbnRseSBhbGwgb2YgdGhlc2UgcmVnZXhlcyBoYXZlIGdyb3VwcyBpZiB0aGV5IG1hdGNoIGF0IGFsbCxcclxuICAgIC8vIGJ1dCBiZSByb2J1c3QgdG8gdGhhdCBjaGFuZ2luZyBpbiB0aGUgZnV0dXJlLlxyXG4gICAgcmVzID0gRW11bGF0b3JDb21tb24uZG9lc0xpbmVNYXRjaChsaW5lLCBFbXVsYXRvckNvbW1vbi53aW5SZWdleCk7XHJcbiAgICBpZiAocmVzKSB7XHJcbiAgICAgIHJlcy5ncm91cHMgPz89IHt9O1xyXG4gICAgICByZXMuZ3JvdXBzLkVuZFR5cGUgPSAnV2luJztcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHJlcyA9IEVtdWxhdG9yQ29tbW9uLmRvZXNMaW5lTWF0Y2gobGluZSwgRW11bGF0b3JDb21tb24ud2lwZVJlZ2V4KTtcclxuICAgIGlmIChyZXMpIHtcclxuICAgICAgcmVzLmdyb3VwcyA/Pz0ge307XHJcbiAgICAgIHJlcy5ncm91cHMuRW5kVHlwZSA9ICdXaXBlJztcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHJlcyA9IEVtdWxhdG9yQ29tbW9uLmRvZXNMaW5lTWF0Y2gobGluZSwgRW11bGF0b3JDb21tb24uY2FjdGJvdFdpcGVSZWdleCk7XHJcbiAgICBpZiAocmVzKSB7XHJcbiAgICAgIHJlcy5ncm91cHMgPz89IHt9O1xyXG4gICAgICByZXMuZ3JvdXBzLkVuZFR5cGUgPSAnQ2FjdGJvdCBXaXBlJztcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHJlcyA9IEVtdWxhdG9yQ29tbW9uLmRvZXNMaW5lTWF0Y2gobGluZSwgRW11bGF0b3JDb21tb24udW5zZWFsUmVnZXhlcyk7XHJcbiAgICBpZiAocmVzKSB7XHJcbiAgICAgIHJlcy5ncm91cHMgPz89IHt9O1xyXG4gICAgICByZXMuZ3JvdXBzLkVuZFR5cGUgPSAnVW5zZWFsJztcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZWFsUmVnZXhlcyA9IExvY2FsZU5ldFJlZ2V4LmFyZWFTZWFsO1xyXG4gIHN0YXRpYyBlbmdhZ2VSZWdleGVzID0gTG9jYWxlTmV0UmVnZXguY291bnRkb3duRW5nYWdlO1xyXG4gIHN0YXRpYyBjb3VudGRvd25SZWdleGVzID0gTG9jYWxlTmV0UmVnZXguY291bnRkb3duU3RhcnQ7XHJcbiAgc3RhdGljIHVuc2VhbFJlZ2V4ZXMgPSBMb2NhbGVOZXRSZWdleC5hcmVhVW5zZWFsO1xyXG4gIHN0YXRpYyB3aXBlUmVnZXggPSBOZXRSZWdleGVzLm5ldHdvcms2ZCh7IGNvbW1hbmQ6ICc0MDAwMDAxMCcgfSk7XHJcbiAgc3RhdGljIHdpblJlZ2V4ID0gTmV0UmVnZXhlcy5uZXR3b3JrNmQoeyBjb21tYW5kOiAnNDAwMDAwMDMnIH0pO1xyXG4gIHN0YXRpYyBjYWN0Ym90V2lwZVJlZ2V4ID0gTmV0UmVnZXhlcy5lY2hvKHsgbGluZTogJ2NhY3Rib3Qgd2lwZS4qPycgfSk7XHJcbn1cclxuIiwiLy8gRXZlbnRCdXMgYnkgZGVmaW5pdGlvbiByZXF1aXJlcyBnZW5lcmljIHBhcmFtZXRlcnMuXHJcbi8vIE1hcCBvdXIgc3RhbmQtaW4gZ2VuZXJpY3MgdG8gYWN0dWFsIGdlbmVyaWNzIGhlcmUuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXHJcbnR5cGUgU2NvcGUgPSBvYmplY3Q7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbnR5cGUgUGFyYW0gPSBhbnk7XHJcblxyXG50eXBlIENhbGxiYWNrRnVuY3Rpb24gPSAoLi4uYXJnczogUGFyYW0pID0+IHZvaWQ7XHJcbnR5cGUgRXZlbnRNYXBFbnRyeSA9IHtcclxuICBldmVudDogc3RyaW5nO1xyXG4gIHNjb3BlOiBTY29wZTtcclxuICBjYWxsYmFjazogQ2FsbGJhY2tGdW5jdGlvbjtcclxufTtcclxudHlwZSBFdmVudE1hcCA9IHsgW2V2ZW50OiBzdHJpbmddOiBFdmVudE1hcEVudHJ5W10gfTtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgYmFzZSBjbGFzcyB0aGF0IGNsYXNzZXMgY2FuIGV4dGVuZCB0byBpbmhlcml0IGV2ZW50IGJ1cyBjYXBhYmlsaXRpZXMuXHJcbiAqIFRoaXMgYWxsb3dzIG90aGVyIGNsYXNzZXMgdG8gbGlzdGVuIGZvciBldmVudHMgd2l0aCB0aGUgYG9uYCBmdW5jdGlvbi5cclxuICogVGhlIGluaGVyaXRpbmcgY2xhc3MgY2FuIGZpcmUgdGhvc2UgZXZlbnRzIHdpdGggdGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24uXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudEJ1cyB7XHJcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IEV2ZW50TWFwID0ge307XHJcbiAgLyoqXHJcbiAgICogU3Vic2NyaWJlIHRvIGFuIGV2ZW50XHJcbiAgICpcclxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50KHMpIHRvIHN1YnNjcmliZSB0bywgc3BhY2Ugc2VwYXJhdGVkXHJcbiAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBpbnZva2VcclxuICAgKiBAcGFyYW0gc2NvcGUgT3B0aW9uYWwuIFRoZSBzY29wZSB0byBhcHBseSB0aGUgZnVuY3Rpb24gYWdhaW5zdFxyXG4gICAqIEByZXR1cm5zIFRoZSBjYWxsYmFja3MgcmVnaXN0ZXJlZCB0byB0aGUgZXZlbnQocylcclxuICAgKi9cclxuICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjaz86IENhbGxiYWNrRnVuY3Rpb24sIHNjb3BlPzogU2NvcGUpOiBFdmVudE1hcEVudHJ5W10ge1xyXG4gICAgY29uc3QgZXZlbnRzID0gZXZlbnQuc3BsaXQoJyAnKTtcclxuICAgIGNvbnN0IHJldDogRXZlbnRNYXBFbnRyeVtdID0gW107XHJcbiAgICBzY29wZSA9IHNjb3BlID8/ICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IHt9IDogd2luZG93KTtcclxuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XHJcbiAgICAgIGNvbnN0IGV2ZW50czogRXZlbnRNYXBFbnRyeVtdID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRdID8/PSBbXTtcclxuICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgZXZlbnRzLnB1c2goeyBldmVudDogZXZlbnQsIHNjb3BlOiBzY29wZSwgY2FsbGJhY2s6IGNhbGxiYWNrIH0pO1xyXG4gICAgICByZXQucHVzaCguLi4odGhpcy5saXN0ZW5lcnNbZXZlbnRdID8/IFtdKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGF0Y2ggYW4gZXZlbnQgdG8gYW55IHN1YnNjcmliZXJzXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIGRpc3BhdGNoXHJcbiAgICogQHBhcmFtIGV2ZW50QXJndW1lbnRzIFRoZSBldmVudCBhcmd1bWVudHMgdG8gcGFzcyB0byBsaXN0ZW5lcnNcclxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCBjYW4gYmUgYXdhaXQnZCBvciBpZ25vcmVkXHJcbiAgICovXHJcbiAgYXN5bmMgZGlzcGF0Y2goZXZlbnQ6IHN0cmluZywgLi4uZXZlbnRBcmd1bWVudHM6IFBhcmFtKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBpZiAodGhpcy5saXN0ZW5lcnNbZXZlbnRdID09PSB1bmRlZmluZWQpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGwgb2YgdGhpcy5saXN0ZW5lcnNbZXZlbnRdID8/IFtdKSB7XHJcbiAgICAgIGNvbnN0IHJlcyA9IGwuY2FsbGJhY2suYXBwbHkobC5zY29wZSwgZXZlbnRBcmd1bWVudHMpO1xyXG4gICAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUocmVzKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVW5yZWFjaGFibGVDb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vcmVzb3VyY2VzL25vdF9yZWFjaGVkJztcclxuXHJcbmNvbnN0IGhpZGVFdmVudHMgPSBbXHJcbiAgJ21vdXNlbGVhdmUnLFxyXG4gICdibHVyJyxcclxuXSBhcyBjb25zdDtcclxuXHJcbmNvbnN0IHZhbGlkRGlyZWN0aW9ucyA9IFtcclxuICAndG9wJyxcclxuICAncmlnaHQnLFxyXG4gICdib3R0b20nLFxyXG4gICdsZWZ0JyxcclxuXSBhcyBjb25zdDtcclxudHlwZSBWYWxpZERpcmVjdGlvbiA9IHR5cGVvZiB2YWxpZERpcmVjdGlvbnNbbnVtYmVyXTtcclxuXHJcbmNvbnN0IHNob3dFdmVudHMgPSBbXHJcbiAgJ21vdXNlZW50ZXInLFxyXG4gICdmb2N1cycsXHJcbl0gYXMgY29uc3Q7XHJcblxyXG50eXBlIFRlbXBsYXRlc1R5cGUgPSB7W1Byb3BlcnR5IGluIFZhbGlkRGlyZWN0aW9uXTogSFRNTFRlbXBsYXRlRWxlbWVudH07XHJcblxyXG5jb25zdCB0b1B4ID0gKHB4OiBudW1iZXIpOiBzdHJpbmcgPT4gYCR7cHh9cHhgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbHRpcCB7XHJcbiAgcHJpdmF0ZSBvZmZzZXQgPSB7XHJcbiAgICB4OiAwLFxyXG4gICAgeTogMCxcclxuICB9O1xyXG4gIHByaXZhdGUgdGFyZ2V0OiBIVE1MRWxlbWVudDtcclxuICBwcml2YXRlIGRpcmVjdGlvbjogVmFsaWREaXJlY3Rpb247XHJcbiAgcHJpdmF0ZSB0b29sdGlwOiBIVE1MRWxlbWVudDtcclxuICBwcml2YXRlIGlubmVyOiBIVE1MRWxlbWVudDtcclxuICBwcml2YXRlIGFycm93OiBIVE1MRWxlbWVudDtcclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgdGVtcGxhdGVzOiBUZW1wbGF0ZXNUeXBlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgICAgLy8gQFRPRE86IFJlZmFjdG9yIHRoaXMgdG8gb25seSBhY2NlcHQgSFRNTEVsZW1lbnQgYWZ0ZXIgdXBzdHJlYW0gY2xhc3NlcyBhcmUgY29udmVydGVkXHJcbiAgICAgIHRhcmdldFJlZjogc3RyaW5nIHwgSFRNTEVsZW1lbnQsXHJcbiAgICAgIGRpcmVjdGlvbjogVmFsaWREaXJlY3Rpb24sXHJcbiAgICAgIHRleHQ6IHN0cmluZyxcclxuICAgICAgYXV0b1Nob3cgPSB0cnVlLFxyXG4gICAgICBhdXRvSGlkZSA9IHRydWUpIHtcclxuICAgIFRvb2x0aXAuaW5pdGlhbGl6ZVRlbXBsYXRlcygpO1xyXG5cclxuICAgIGxldCB0YXJnZXQ6IEhUTUxFbGVtZW50IHwgbnVsbDtcclxuXHJcbiAgICBpZiAodHlwZW9mIHRhcmdldFJlZiA9PT0gJ3N0cmluZycpXHJcbiAgICAgIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0UmVmKTtcclxuICAgIGVsc2VcclxuICAgICAgdGFyZ2V0ID0gdGFyZ2V0UmVmO1xyXG5cclxuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkge1xyXG4gICAgICBjb25zdCBtc2cgPSAnSW52YWxpZCBzZWxlY3RvciBvciBlbGVtZW50IHBhc3NlZCB0byBUb29sdGlwJztcclxuICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xyXG4gICAgdGhpcy50b29sdGlwID0gVG9vbHRpcC5jbG9uZVRlbXBsYXRlKGRpcmVjdGlvbik7XHJcbiAgICBjb25zdCBpbm5lckVsZW0gPSB0aGlzLnRvb2x0aXAucXVlcnlTZWxlY3RvcignLnRvb2x0aXAtaW5uZXInKTtcclxuICAgIGlmICghKGlubmVyRWxlbSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSlcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG5cclxuICAgIHRoaXMuaW5uZXIgPSBpbm5lckVsZW07XHJcbiAgICBjb25zdCBhcnJvd0VsZW0gPSB0aGlzLnRvb2x0aXAucXVlcnlTZWxlY3RvcignLmFycm93Jyk7XHJcbiAgICBpZiAoIShhcnJvd0VsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpXHJcbiAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuXHJcbiAgICB0aGlzLmFycm93ID0gYXJyb3dFbGVtO1xyXG4gICAgdGhpcy5zZXRUZXh0KHRleHQpO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmQodGhpcy50b29sdGlwKTtcclxuICAgIGlmIChhdXRvU2hvdykge1xyXG4gICAgICBzaG93RXZlbnRzLmZvckVhY2goKGUpID0+IHtcclxuICAgICAgICB0aGlzLnRhcmdldC5hZGRFdmVudExpc3RlbmVyKGUsICgpID0+IHtcclxuICAgICAgICAgIHRoaXMuc2hvdygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChhdXRvSGlkZSkge1xyXG4gICAgICBoaWRlRXZlbnRzLmZvckVhY2goKGUpID0+IHtcclxuICAgICAgICB0aGlzLnRhcmdldC5hZGRFdmVudExpc3RlbmVyKGUsICgpID0+IHtcclxuICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldFRleHQodGV4dDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLmlubmVyLnRleHRDb250ZW50ID0gdGV4dDtcclxuICB9XHJcblxyXG4gIHNob3coKTogdm9pZCB7XHJcbiAgICBjb25zdCB0YXJnZXRSZWN0ID0gdGhpcy50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICBjb25zdCB0YXJnZXRNaWRkbGUgPSB7XHJcbiAgICAgIHg6IHRhcmdldFJlY3QueCArICh0YXJnZXRSZWN0LndpZHRoIC8gMiksXHJcbiAgICAgIHk6IHRhcmdldFJlY3QueSArICh0YXJnZXRSZWN0LmhlaWdodCAvIDIpLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHRvb2x0aXBSZWN0ID0gdGhpcy50b29sdGlwLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgLy8gTWlkZGxlIG9mIHRvb2x0aXAgLSBoYWxmIG9mIGFycm93IGhlaWdodFxyXG4gICAgY29uc3QgbHJBcnJvd0hlaWdodCA9ICh0b29sdGlwUmVjdC5oZWlnaHQgLyAyKSAtXHJcbiAgICAgICh0aGlzLmFycm93LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAvIDIpO1xyXG4gICAgc3dpdGNoICh0aGlzLmRpcmVjdGlvbikge1xyXG4gICAgY2FzZSAndG9wJzpcclxuICAgICAgdGhpcy50b29sdGlwLnN0eWxlLmxlZnQgPSB0b1B4KCh0YXJnZXRNaWRkbGUueCAtICh0b29sdGlwUmVjdC53aWR0aCAvIDIpKSArIHRoaXMub2Zmc2V0LngpO1xyXG4gICAgICB0aGlzLnRvb2x0aXAuc3R5bGUuYm90dG9tID0gdG9QeCgodGFyZ2V0UmVjdC55IC0gdG9vbHRpcFJlY3QuaGVpZ2h0KSArIHRoaXMub2Zmc2V0LnkpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgdGhpcy50b29sdGlwLnN0eWxlLmxlZnQgPSB0b1B4KHRhcmdldFJlY3QucmlnaHQgKyB0aGlzLm9mZnNldC54KTtcclxuICAgICAgdGhpcy50b29sdGlwLnN0eWxlLnRvcCA9IHRvUHgoKHRhcmdldE1pZGRsZS55IC0gKHRvb2x0aXBSZWN0LmhlaWdodCAvIDIpKSArIHRoaXMub2Zmc2V0LnkpO1xyXG4gICAgICB0aGlzLmFycm93LnN0eWxlLnRvcCA9IHRvUHgobHJBcnJvd0hlaWdodCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnYm90dG9tJzpcclxuICAgICAgdGhpcy50b29sdGlwLnN0eWxlLmxlZnQgPSB0b1B4KCh0YXJnZXRNaWRkbGUueCAtICh0b29sdGlwUmVjdC53aWR0aCAvIDIpKSArIHRoaXMub2Zmc2V0LngpO1xyXG4gICAgICB0aGlzLnRvb2x0aXAuc3R5bGUudG9wID0gdG9QeCh0YXJnZXRSZWN0LmJvdHRvbSArIHRoaXMub2Zmc2V0LnkpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ2xlZnQnOlxyXG4gICAgICB0aGlzLnRvb2x0aXAuc3R5bGUubGVmdCA9IHRvUHgoKHRhcmdldFJlY3QubGVmdCAtIHRvb2x0aXBSZWN0LndpZHRoKSArIHRoaXMub2Zmc2V0LngpO1xyXG4gICAgICB0aGlzLnRvb2x0aXAuc3R5bGUudG9wID0gdG9QeCgodGFyZ2V0TWlkZGxlLnkgLSAodG9vbHRpcFJlY3QuaGVpZ2h0IC8gMikpICsgdGhpcy5vZmZzZXQueSk7XHJcbiAgICAgIHRoaXMuYXJyb3cuc3R5bGUudG9wID0gdG9QeChsckFycm93SGVpZ2h0KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB0aGlzLnRvb2x0aXAuY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xyXG4gICAgdGhpcy50b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1zaG93JywgJycpO1xyXG4gIH1cclxuXHJcbiAgaGlkZSgpOiB2b2lkIHtcclxuICAgIHRoaXMudG9vbHRpcC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XHJcbiAgICB0aGlzLnRvb2x0aXAucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNob3cnKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBpbml0aWFsaXplVGVtcGxhdGVzKCk6IHZvaWQge1xyXG4gICAgaWYgKFRvb2x0aXAudGVtcGxhdGVzKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgVG9vbHRpcC50ZW1wbGF0ZXMgPSB7XHJcbiAgICAgIHRvcDogVG9vbHRpcC5nZXRUZW1wbGF0ZSgndG9wJyksXHJcbiAgICAgIHJpZ2h0OiBUb29sdGlwLmdldFRlbXBsYXRlKCdyaWdodCcpLFxyXG4gICAgICBib3R0b206IFRvb2x0aXAuZ2V0VGVtcGxhdGUoJ2JvdHRvbScpLFxyXG4gICAgICBsZWZ0OiBUb29sdGlwLmdldFRlbXBsYXRlKCdsZWZ0JyksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFRlbXBsYXRlKGRpcjogc3RyaW5nKTogSFRNTFRlbXBsYXRlRWxlbWVudCB7XHJcbiAgICBjb25zdCBlbGVtTmFtZSA9IGAke2Rpcn1Ub29sdGlwVGVtcGxhdGVgO1xyXG4gICAgY29uc3QgcmV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbU5hbWUpO1xyXG4gICAgaWYgKHJldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KVxyXG4gICAgICByZXR1cm4gcmV0IGFzIEhUTUxUZW1wbGF0ZUVsZW1lbnQ7XHJcbiAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2xvbmVUZW1wbGF0ZShkaXJlY3Rpb246IFZhbGlkRGlyZWN0aW9uKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgdGVtcGxhdGUgPSBUb29sdGlwLnRlbXBsYXRlc1tkaXJlY3Rpb25dO1xyXG4gICAgY29uc3Qgbm9kZSA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvcignLnRvb2x0aXAnKT8uY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudClcclxuICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBFbXVsYXRvckNvbW1vbiBmcm9tICcuLi9FbXVsYXRvckNvbW1vbic7XHJcbmltcG9ydCBFdmVudEJ1cyBmcm9tICcuLi9FdmVudEJ1cyc7XHJcbmltcG9ydCBUb29sdGlwIGZyb20gJy4vVG9vbHRpcCc7XHJcbmltcG9ydCBVdGlsIGZyb20gJy4uLy4uLy4uLy4uL3Jlc291cmNlcy91dGlsJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVtdWxhdGVkUGFydHlJbmZvIGV4dGVuZHMgRXZlbnRCdXMge1xyXG4gIGNvbnN0cnVjdG9yKGVtdWxhdG9yKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy50b29sdGlwcyA9IFtdO1xyXG4gICAgdGhpcy5lbXVsYXRvciA9IGVtdWxhdG9yO1xyXG4gICAgdGhpcy4kcGFydHlJbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhcnR5SW5mb0NvbHVtbiAucGFydHknKTtcclxuICAgIHRoaXMuJHRyaWdnZXJJbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRyaWdnZXJJbmZvQ29sdW1uJyk7XHJcbiAgICB0aGlzLiR0cmlnZ2VySGlkZVNraXBwZWRDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50cmlnZ2VySGlkZVNraXBwZWQnKTtcclxuICAgIHRoaXMuJHRyaWdnZXJIaWRlQ29sbGVjdENoZWNrYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRyaWdnZXJIaWRlQ29sbGVjdG9yJyk7XHJcbiAgICB0aGlzLiR0cmlnZ2VyQmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBsYXllclRyaWdnZXJzJyk7XHJcbiAgICB0aGlzLnRyaWdnZXJCYXJzID0gW107XHJcbiAgICB0aGlzLmxhdGVzdERpc3BsYXllZFN0YXRlID0gMDtcclxuICAgIHRoaXMuZGlzcGxheWVkUGFydHkgPSB7fTtcclxuICAgIHRoaXMuY3VycmVudFBlcnNwZWN0aXZlID0gbnVsbDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgKytpKVxyXG4gICAgICB0aGlzLnRyaWdnZXJCYXJzW2ldID0gdGhpcy4kdHJpZ2dlckJhci5xdWVyeVNlbGVjdG9yKCcucGxheWVyJyArIGkpO1xyXG5cclxuICAgIGVtdWxhdG9yLm9uKCd0aWNrJywgKGN1cnJlbnRMb2dUaW1lLCBsYXN0TG9nTGluZVRpbWUpID0+IHtcclxuICAgICAgaWYgKGxhc3RMb2dMaW5lVGltZSkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlUGFydHlJbmZvKGVtdWxhdG9yLCBsYXN0TG9nTGluZVRpbWUpO1xyXG4gICAgICAgIHRoaXMubGF0ZXN0RGlzcGxheWVkU3RhdGUgPSBNYXRoLm1heCh0aGlzLmxhdGVzdERpc3BsYXllZFN0YXRlLCBsYXN0TG9nTGluZVRpbWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGVtdWxhdG9yLm9uKCdjdXJyZW50RW5jb3VudGVyQ2hhbmdlZCcsIChlbmNvdW50ZXIpID0+IHtcclxuICAgICAgdGhpcy5yZXNldFBhcnR5SW5mbyhlbmNvdW50ZXIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZW11bGF0b3Iub24oJ3ByZVNlZWsnLCAodGltZSkgPT4ge1xyXG4gICAgICB0aGlzLmxhdGVzdERpc3BsYXllZFN0YXRlID0gMDtcclxuICAgIH0pO1xyXG4gICAgZW11bGF0b3Iub24oJ3Bvc3RTZWVrJywgKHRpbWUpID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVQYXJ0eUluZm8oZW11bGF0b3IsIHRpbWUpO1xyXG4gICAgICB0aGlzLmxhdGVzdERpc3BsYXllZFN0YXRlID0gTWF0aC5tYXgodGhpcy5sYXRlc3REaXNwbGF5ZWRTdGF0ZSwgdGltZSk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMudXBkYXRlVHJpZ2dlclN0YXRlID0gKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy4kdHJpZ2dlckhpZGVTa2lwcGVkQ2hlY2tib3guY2hlY2tlZClcclxuICAgICAgICB0aGlzLmhpZGVOb25FeGVjdXRlZFRyaWdnZXJzKCk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICB0aGlzLnNob3dOb25FeGVjdXRlZFRyaWdnZXJzKCk7XHJcbiAgICAgIGlmICh0aGlzLiR0cmlnZ2VySGlkZUNvbGxlY3RDaGVja2JveC5jaGVja2VkKVxyXG4gICAgICAgIHRoaXMuaGlkZUNvbGxlY3RvclRyaWdnZXJzKCk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICB0aGlzLnNob3dDb2xsZWN0b3JUcmlnZ2VycygpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuJHRyaWdnZXJIaWRlU2tpcHBlZENoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMudXBkYXRlVHJpZ2dlclN0YXRlKTtcclxuICAgIHRoaXMuJHRyaWdnZXJIaWRlQ29sbGVjdENoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMudXBkYXRlVHJpZ2dlclN0YXRlKTtcclxuXHJcbiAgICB0aGlzLiR0cmlnZ2VySXRlbVRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGVtcGxhdGUudHJpZ2dlckl0ZW0nKS5jb250ZW50LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgdGhpcy4kcGxheWVySW5mb1Jvd1RlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGVtcGxhdGUucGxheWVySW5mb1JvdycpLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICB0aGlzLiRwbGF5ZXJUcmlnZ2VySW5mb1RlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGVtcGxhdGUucGxheWVyVHJpZ2dlckluZm8nKS5jb250ZW50LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgdGhpcy4kanNvblZpZXdlclRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGVtcGxhdGUuanNvblZpZXdlcicpLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICB0aGlzLiR0cmlnZ2VyTGFiZWxUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlLnRyaWdnZXJMYWJlbCcpLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICB0aGlzLiR3cmFwQ29sbGFwc2VUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlLndyYXBDb2xsYXBzZScpLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgfVxyXG5cclxuICBoaWRlTm9uRXhlY3V0ZWRUcmlnZ2VycygpIHtcclxuICAgIHRoaXMuJHRyaWdnZXJJbmZvLnF1ZXJ5U2VsZWN0b3JBbGwoJy50cmlnZ2VyLW5vdC1leGVjdXRlZCcpLmZvckVhY2goKG4pID0+IHtcclxuICAgICAgbi5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2hvd05vbkV4ZWN1dGVkVHJpZ2dlcnMoKSB7XHJcbiAgICB0aGlzLiR0cmlnZ2VySW5mby5xdWVyeVNlbGVjdG9yQWxsKCcudHJpZ2dlci1ub3QtZXhlY3V0ZWQnKS5mb3JFYWNoKChuKSA9PiB7XHJcbiAgICAgIG4uY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGhpZGVDb2xsZWN0b3JUcmlnZ2VycygpIHtcclxuICAgIHRoaXMuJHRyaWdnZXJJbmZvLnF1ZXJ5U2VsZWN0b3JBbGwoJy50cmlnZ2VyLW5vLW91dHB1dCcpLmZvckVhY2goKG4pID0+IHtcclxuICAgICAgbi5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2hvd0NvbGxlY3RvclRyaWdnZXJzKCkge1xyXG4gICAgdGhpcy4kdHJpZ2dlckluZm8ucXVlcnlTZWxlY3RvckFsbCgnLnRyaWdnZXItbm8tb3V0cHV0JykuZm9yRWFjaCgobikgPT4ge1xyXG4gICAgICBuLmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtSYWlkRW11bGF0b3J9IGVtdWxhdG9yXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRpbWVzdGFtcFxyXG4gICAqL1xyXG4gIHVwZGF0ZVBhcnR5SW5mbyhlbXVsYXRvciwgdGltZXN0YW1wKSB7XHJcbiAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuZGlzcGxheWVkUGFydHkpXHJcbiAgICAgIHRoaXMudXBkYXRlQ29tYmF0YW50SW5mbyhlbXVsYXRvci5jdXJyZW50RW5jb3VudGVyLCBpZCwgdGltZXN0YW1wKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7QW5hbHl6ZWRFbmNvdW50ZXJ9IGVuY291bnRlclxyXG4gICAqL1xyXG4gIHJlc2V0UGFydHlJbmZvKGVuY291bnRlcikge1xyXG4gICAgdGhpcy50b29sdGlwcy5tYXAoKHR0KSA9PiB7XHJcbiAgICAgIHR0LnRvb2x0aXAucmVtb3ZlKCk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnRvb2x0aXBzID0gW107XHJcbiAgICB0aGlzLmN1cnJlbnRQZXJzcGVjdGl2ZSA9IG51bGw7XHJcbiAgICB0aGlzLmRpc3BsYXllZFBhcnR5ID0ge307XHJcbiAgICB0aGlzLmxhdGVzdERpc3BsYXllZFN0YXRlID0gMDtcclxuICAgIHRoaXMuJHBhcnR5SW5mby5pbm5lckhUTUwgPSAnJztcclxuICAgIHRoaXMuJHRyaWdnZXJCYXIucXVlcnlTZWxlY3RvckFsbCgnLnRyaWdnZXJJdGVtJykuZm9yRWFjaCgobikgPT4ge1xyXG4gICAgICBuLnJlbW92ZSgpO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBtZW1iZXJzVG9EaXNwbGF5ID0gZW5jb3VudGVyLmVuY291bnRlci5jb21iYXRhbnRUcmFja2VyLnBhcnR5TWVtYmVycy5zb3J0KChsLCByKSA9PiB7XHJcbiAgICAgIGNvbnN0IGEgPSBlbmNvdW50ZXIuZW5jb3VudGVyLmNvbWJhdGFudFRyYWNrZXIuY29tYmF0YW50c1tsXTtcclxuICAgICAgY29uc3QgYiA9IGVuY291bnRlci5lbmNvdW50ZXIuY29tYmF0YW50VHJhY2tlci5jb21iYXRhbnRzW3JdO1xyXG4gICAgICByZXR1cm4gRW11bGF0ZWRQYXJ0eUluZm8uam9iT3JkZXIuaW5kZXhPZihhLmpvYikgLSBFbXVsYXRlZFBhcnR5SW5mby5qb2JPcmRlci5pbmRleE9mKGIuam9iKTtcclxuICAgIH0pLnNsaWNlKDAsIDgpO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBsYXllclRyaWdnZXJJbmZvJykuZm9yRWFjaCgobikgPT4ge1xyXG4gICAgICBuLnJlbW92ZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZW1iZXJzVG9EaXNwbGF5Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IGlkID0gbWVtYmVyc1RvRGlzcGxheVtpXTtcclxuICAgICAgY29uc3Qgb2JqID0gdGhpcy5nZXRQYXJ0eUluZm9PYmplY3RGb3IoZW5jb3VudGVyLCBpZCk7XHJcbiAgICAgIHRoaXMuZGlzcGxheWVkUGFydHlbaWRdID0gb2JqO1xyXG4gICAgICB0aGlzLnVwZGF0ZUNvbWJhdGFudEluZm8oZW5jb3VudGVyLCBpZCk7XHJcbiAgICAgIHRoaXMuJHBhcnR5SW5mby5hcHBlbmQob2JqLiRyb290RWxlbSk7XHJcbiAgICAgIHRoaXMuJHRyaWdnZXJJbmZvLmFwcGVuZChvYmouJHRyaWdnZXJFbGVtKTtcclxuICAgICAgdGhpcy50cmlnZ2VyQmFyc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCd0YW5rJyk7XHJcbiAgICAgIHRoaXMudHJpZ2dlckJhcnNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnaGVhbGVyJyk7XHJcbiAgICAgIHRoaXMudHJpZ2dlckJhcnNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnZHBzJyk7XHJcbiAgICAgIGlmIChlbmNvdW50ZXIuZW5jb3VudGVyLmNvbWJhdGFudFRyYWNrZXIuY29tYmF0YW50c1tpZF0uam9iKSB7XHJcbiAgICAgICAgdGhpcy50cmlnZ2VyQmFyc1tpXS5jbGFzc0xpc3QuYWRkKFxyXG4gICAgICAgICAgICBVdGlsLmpvYlRvUm9sZShlbmNvdW50ZXIuZW5jb3VudGVyLmNvbWJhdGFudFRyYWNrZXIuY29tYmF0YW50c1tpZF0uam9iKSxcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IHRyaWdnZXJJbmRleCBpbiBlbmNvdW50ZXIucGVyc3BlY3RpdmVzW2lkXS50cmlnZ2Vycykge1xyXG4gICAgICAgIGNvbnN0IHRyaWdnZXIgPSBlbmNvdW50ZXIucGVyc3BlY3RpdmVzW2lkXS50cmlnZ2Vyc1t0cmlnZ2VySW5kZXhdO1xyXG4gICAgICAgIGlmICghdHJpZ2dlci5zdGF0dXMuZXhlY3V0ZWQgfHwgdHJpZ2dlci5yZXNvbHZlZE9mZnNldCA+IGVuY291bnRlci5lbmNvdW50ZXIuZHVyYXRpb24pXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgY29uc3QgJGUgPSB0aGlzLiR0cmlnZ2VySXRlbVRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAkZS5zdHlsZS5sZWZ0ID0gKCh0cmlnZ2VyLnJlc29sdmVkT2Zmc2V0IC8gZW5jb3VudGVyLmVuY291bnRlci5kdXJhdGlvbikgKiAxMDApICsgJyUnO1xyXG4gICAgICAgIHRoaXMudG9vbHRpcHMucHVzaChuZXcgVG9vbHRpcCgkZSwgJ2JvdHRvbScsIHRyaWdnZXIudHJpZ2dlckhlbHBlci50cmlnZ2VyLmlkKSk7XHJcbiAgICAgICAgdGhpcy50cmlnZ2VyQmFyc1tpXS5hcHBlbmQoJGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy51cGRhdGVUcmlnZ2VyU3RhdGUoKTtcclxuXHJcbiAgICB0aGlzLnNlbGVjdFBlcnNwZWN0aXZlKG1lbWJlcnNUb0Rpc3BsYXlbMF0pO1xyXG4gIH1cclxuXHJcbiAgc2VsZWN0UGVyc3BlY3RpdmUoaWQpIHtcclxuICAgIGlmIChpZCA9PT0gdGhpcy5jdXJyZW50UGVyc3BlY3RpdmUpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBpZiAoIXRoaXMuZW11bGF0b3IuY3VycmVudEVuY291bnRlci5lbmNvdW50ZXIuY29tYmF0YW50VHJhY2tlci5jb21iYXRhbnRzW2lkXS5qb2IpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICB0aGlzLmN1cnJlbnRQZXJzcGVjdGl2ZSA9IGlkO1xyXG4gICAgdGhpcy4kdHJpZ2dlckluZm8ucXVlcnlTZWxlY3RvckFsbCgnLnBsYXllclRyaWdnZXJJbmZvJykuZm9yRWFjaCgocikgPT4gci5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKSk7XHJcbiAgICB0aGlzLmRpc3BsYXllZFBhcnR5W2lkXS4kdHJpZ2dlckVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcbiAgICB0aGlzLiRwYXJ0eUluZm8ucXVlcnlTZWxlY3RvckFsbCgnLnBsYXllckluZm9Sb3cnKS5mb3JFYWNoKChyKSA9PiB7XHJcbiAgICAgIHIuY2xhc3NMaXN0LnJlbW92ZSgnYm9yZGVyJyk7XHJcbiAgICAgIHIuY2xhc3NMaXN0LnJlbW92ZSgnYm9yZGVyLXN1Y2Nlc3MnKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5kaXNwbGF5ZWRQYXJ0eVtpZF0uJHJvb3RFbGVtLmNsYXNzTGlzdC5hZGQoJ2JvcmRlcicpO1xyXG4gICAgdGhpcy5kaXNwbGF5ZWRQYXJ0eVtpZF0uJHJvb3RFbGVtLmNsYXNzTGlzdC5hZGQoJ2JvcmRlci1zdWNjZXNzJyk7XHJcbiAgICB0aGlzLmRpc3BhdGNoKCdzZWxlY3RQZXJzcGVjdGl2ZScsIGlkKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUNvbWJhdGFudEluZm8oZW5jb3VudGVyLCBpZCwgc3RhdGVJRCA9IG51bGwpIHtcclxuICAgIGlmIChzdGF0ZUlEIDw9IHRoaXMubGF0ZXN0RGlzcGxheWVkU3RhdGUpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBjb21iYXRhbnQgPSBlbmNvdW50ZXIuZW5jb3VudGVyLmNvbWJhdGFudFRyYWNrZXIuY29tYmF0YW50c1tpZF07XHJcbiAgICBpZiAoIWNvbWJhdGFudClcclxuICAgICAgcmV0dXJuO1xyXG4gICAgc3RhdGVJRCA9IHN0YXRlSUQgfHwgY29tYmF0YW50LmdldFN0YXRlKDApO1xyXG5cclxuICAgIGNvbnN0IFN0YXRlID0gY29tYmF0YW50LmdldFN0YXRlKHN0YXRlSUQpO1xyXG4gICAgaWYgKFN0YXRlID09PSB1bmRlZmluZWQpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBocFByb2cgPSAoU3RhdGUuaHAgLyBTdGF0ZS5tYXhIcCkgKiAxMDA7XHJcbiAgICBsZXQgaHBMYWJlbCA9IFN0YXRlLmhwICsgJy8nICsgU3RhdGUubWF4SHA7XHJcbiAgICBocExhYmVsID0gRW11bGF0b3JDb21tb24uc3BhY2VQYWRMZWZ0KGhwTGFiZWwsIChTdGF0ZS5tYXhIcC50b1N0cmluZygpLmxlbmd0aCAqIDIpICsgMSk7XHJcbiAgICB0aGlzLmRpc3BsYXllZFBhcnR5W2lkXS4kaHBQcm9nRWxlbS5hcmlhVmFsdWVOb3cgPSBTdGF0ZS5ocDtcclxuICAgIHRoaXMuZGlzcGxheWVkUGFydHlbaWRdLiRocFByb2dFbGVtLmFyaWFWYWx1ZU1heCA9IFN0YXRlLm1heEhwO1xyXG4gICAgdGhpcy5kaXNwbGF5ZWRQYXJ0eVtpZF0uJGhwUHJvZ0VsZW0uc3R5bGUud2lkdGggPSBocFByb2cgKyAnJSc7XHJcbiAgICB0aGlzLmRpc3BsYXllZFBhcnR5W2lkXS4kaHBMYWJlbEVsZW0udGV4dENvbnRlbnQgPSBocExhYmVsO1xyXG5cclxuICAgIGNvbnN0IG1wUHJvZyA9IChTdGF0ZS5tcCAvIFN0YXRlLm1heE1wKSAqIDEwMDtcclxuICAgIGxldCBtcExhYmVsID0gU3RhdGUubXAgKyAnLycgKyBTdGF0ZS5tYXhNcDtcclxuICAgIG1wTGFiZWwgPSBFbXVsYXRvckNvbW1vbi5zcGFjZVBhZExlZnQobXBMYWJlbCwgKFN0YXRlLm1heE1wLnRvU3RyaW5nKCkubGVuZ3RoICogMikgKyAxKTtcclxuICAgIHRoaXMuZGlzcGxheWVkUGFydHlbaWRdLiRtcFByb2dFbGVtLmFyaWFWYWx1ZU5vdyA9IFN0YXRlLm1wO1xyXG4gICAgdGhpcy5kaXNwbGF5ZWRQYXJ0eVtpZF0uJG1wUHJvZ0VsZW0uYXJpYVZhbHVlTWF4ID0gU3RhdGUubWF4TXA7XHJcbiAgICB0aGlzLmRpc3BsYXllZFBhcnR5W2lkXS4kbXBQcm9nRWxlbS5zdHlsZS53aWR0aCA9IG1wUHJvZyArICclJztcclxuICAgIHRoaXMuZGlzcGxheWVkUGFydHlbaWRdLiRtcExhYmVsRWxlbS50ZXh0Q29udGVudCA9IG1wTGFiZWw7XHJcbiAgfVxyXG5cclxuICBnZXRQYXJ0eUluZm9PYmplY3RGb3IoZW5jb3VudGVyLCBpZCkge1xyXG4gICAgY29uc3QgJGUgPSB0aGlzLiRwbGF5ZXJJbmZvUm93VGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgY29uc3QgJGhwID0gJGUucXVlcnlTZWxlY3RvcignLmhwJyk7XHJcbiAgICBjb25zdCAkbXAgPSAkZS5xdWVyeVNlbGVjdG9yKCcubXAnKTtcclxuICAgIGNvbnN0ICRuYW1lID0gJGUucXVlcnlTZWxlY3RvcignLnBsYXllck5hbWUnKTtcclxuICAgIGNvbnN0IHJldCA9IHtcclxuICAgICAgJHJvb3RFbGVtOiAkZSxcclxuICAgICAgJGljb25FbGVtOiAkZS5xdWVyeVNlbGVjdG9yKCdqb2JpY29uJyksXHJcbiAgICAgICRocEVsZW06ICRocCxcclxuICAgICAgJGhwTGFiZWxFbGVtOiAkaHAucXVlcnlTZWxlY3RvcignLmxhYmVsJyksXHJcbiAgICAgICRocFByb2dFbGVtOiAkaHAucXVlcnlTZWxlY3RvcignLnByb2dyZXNzLWJhcicpLFxyXG4gICAgICAkbXBFbGVtOiAkbXAsXHJcbiAgICAgICRtcExhYmVsRWxlbTogJG1wLnF1ZXJ5U2VsZWN0b3IoJy5sYWJlbCcpLFxyXG4gICAgICAkbXBQcm9nRWxlbTogJG1wLnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmVzcy1iYXInKSxcclxuICAgICAgJG5hbWVFbGVtOiAkbmFtZSxcclxuICAgICAgaWQ6IGlkLFxyXG4gICAgICAkdHJpZ2dlckVsZW06IHRoaXMuZ2V0VHJpZ2dlckluZm9PYmplY3RGb3IoZW5jb3VudGVyLCBpZCksXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNvbWJhdGFudCA9IGVuY291bnRlci5lbmNvdW50ZXIuY29tYmF0YW50VHJhY2tlci5jb21iYXRhbnRzW2lkXTtcclxuICAgIHJldC4kcm9vdEVsZW0uY2xhc3NMaXN0LmFkZCgoY29tYmF0YW50LmpvYiB8fCAnJykudG9VcHBlckNhc2UoKSk7XHJcbiAgICB0aGlzLnRvb2x0aXBzLnB1c2gobmV3IFRvb2x0aXAocmV0LiRyb290RWxlbSwgJ2xlZnQnLCBjb21iYXRhbnQubmFtZSkpO1xyXG4gICAgJG5hbWUuaW5uZXJIVE1MID0gY29tYmF0YW50Lm5hbWU7XHJcbiAgICByZXQuJHJvb3RFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgdGhpcy5zZWxlY3RQZXJzcGVjdGl2ZShpZCk7XHJcbiAgICB9KTtcclxuICAgIHJldC4kdHJpZ2dlckVsZW0uc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgaWQpO1xyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIGdldFRyaWdnZXJJbmZvT2JqZWN0Rm9yKGVuY291bnRlciwgaWQpIHtcclxuICAgIGNvbnN0ICRyZXQgPSB0aGlzLiRwbGF5ZXJUcmlnZ2VySW5mb1RlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcclxuICAgIGNvbnN0ICRjb250YWluZXIgPSAkcmV0LnF1ZXJ5U2VsZWN0b3IoJy5kLWZsZXguZmxleC1jb2x1bW4nKTtcclxuXHJcbiAgICBjb25zdCBwZXIgPSBlbmNvdW50ZXIucGVyc3BlY3RpdmVzW2lkXTtcclxuXHJcbiAgICBjb25zdCAkaW5pdERhdGFWaWV3ZXIgPSB0aGlzLiRqc29uVmlld2VyVGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgJGluaXREYXRhVmlld2VyLnRleHRDb250ZW50ID0gSlNPTi5zdHJpbmdpZnkocGVyLmluaXRpYWxEYXRhLCBudWxsLCAyKTtcclxuXHJcbiAgICAkY29udGFpbmVyLmFwcGVuZCh0aGlzLl93cmFwQ29sbGFwc2Uoe1xyXG4gICAgICB0aW1lOiAnMDA6MDAnLFxyXG4gICAgICBuYW1lOiAnSW5pdGlhbCBEYXRhJyxcclxuICAgICAgY2xhc3NlczogWydkYXRhJ10sXHJcbiAgICAgICRvYmo6ICRpbml0RGF0YVZpZXdlcixcclxuICAgIH0pKTtcclxuXHJcbiAgICBjb25zdCAkdHJpZ2dlckNvbnRhaW5lciA9ICRjb250YWluZXIucXVlcnlTZWxlY3RvcignLmQtZmxleC5mbGV4LWNvbHVtbicpO1xyXG5cclxuICAgIGZvciAoY29uc3QgaSBpbiBwZXIudHJpZ2dlcnMuc29ydCgobCwgcikgPT4gbC5yZXNvbHZlZE9mZnNldCAtIHIucmVzb2x2ZWRPZmZzZXQpKSB7XHJcbiAgICAgIGNvbnN0ICR0cmlnZ2VyRGF0YVZpZXdlciA9IHRoaXMuJGpzb25WaWV3ZXJUZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICR0cmlnZ2VyRGF0YVZpZXdlci50ZXh0Q29udGVudCA9IEpTT04uc3RyaW5naWZ5KHBlci50cmlnZ2Vyc1tpXSwgbnVsbCwgMik7XHJcbiAgICAgIGNvbnN0IHRyaWdnZXJUZXh0ID0gdGhpcy5nZXRUcmlnZ2VyTGFiZWxUZXh0KHBlci50cmlnZ2Vyc1tpXSk7XHJcbiAgICAgIGNvbnN0ICR0cmlnZ2VyID0gdGhpcy5fd3JhcENvbGxhcHNlKHtcclxuICAgICAgICB0aW1lOiB0aGlzLmdldFRyaWdnZXJSZXNvbHZlZExhYmVsVGltZShwZXIudHJpZ2dlcnNbaV0pLFxyXG4gICAgICAgIG5hbWU6IHBlci50cmlnZ2Vyc1tpXS50cmlnZ2VySGVscGVyLnRyaWdnZXIuaWQsXHJcbiAgICAgICAgaWNvbjogdGhpcy5nZXRUcmlnZ2VyTGFiZWxJY29uKHBlci50cmlnZ2Vyc1tpXSksXHJcbiAgICAgICAgdGV4dDogdHJpZ2dlclRleHQsXHJcbiAgICAgICAgY2xhc3NlczogW3Blci50cmlnZ2Vyc1tpXS5zdGF0dXMucmVzcG9uc2VUeXBlXSxcclxuICAgICAgICAkb2JqOiAkdHJpZ2dlckRhdGFWaWV3ZXIsXHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAocGVyLnRyaWdnZXJzW2ldLnN0YXR1cy5leGVjdXRlZClcclxuICAgICAgICAkdHJpZ2dlci5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWV4ZWN1dGVkJyk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICAkdHJpZ2dlci5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLW5vdC1leGVjdXRlZCcpO1xyXG5cclxuICAgICAgaWYgKHRyaWdnZXJUZXh0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgJHRyaWdnZXIuY2xhc3NMaXN0LmFkZCgndHJpZ2dlci1uby1vdXRwdXQnKTtcclxuICAgICAgZWxzZVxyXG4gICAgICAgICR0cmlnZ2VyLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItb3V0cHV0Jyk7XHJcblxyXG4gICAgICAkdHJpZ2dlckNvbnRhaW5lci5hcHBlbmQoJHRyaWdnZXIpO1xyXG4gICAgfVxyXG5cclxuICAgICRjb250YWluZXIuYXBwZW5kKCR0cmlnZ2VyQ29udGFpbmVyKTtcclxuXHJcbiAgICBjb25zdCAkZmluYWxEYXRhVmlld2VyID0gdGhpcy4kanNvblZpZXdlclRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICRmaW5hbERhdGFWaWV3ZXIudGV4dENvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShwZXIuZmluYWxEYXRhLCBudWxsLCAyKTtcclxuXHJcbiAgICAkY29udGFpbmVyLmFwcGVuZCh0aGlzLl93cmFwQ29sbGFwc2Uoe1xyXG4gICAgICB0aW1lOiBFbXVsYXRvckNvbW1vbi50aW1lVG9TdHJpbmcoXHJcbiAgICAgICAgICBlbmNvdW50ZXIuZW5jb3VudGVyLmR1cmF0aW9uIC0gZW5jb3VudGVyLmVuY291bnRlci5pbml0aWFsT2Zmc2V0LFxyXG4gICAgICAgICAgZmFsc2UpLFxyXG4gICAgICBuYW1lOiAnRmluYWwgRGF0YScsXHJcbiAgICAgIGNsYXNzZXM6IFsnZGF0YSddLFxyXG4gICAgICAkb2JqOiAkZmluYWxEYXRhVmlld2VyLFxyXG4gICAgfSkpO1xyXG5cclxuICAgIHJldHVybiAkcmV0O1xyXG4gIH1cclxuXHJcbiAgZ2V0VHJpZ2dlckxhYmVsVGV4dCh0cmlnZ2VyKSB7XHJcbiAgICBsZXQgcmV0ID0gdHJpZ2dlci5zdGF0dXMucmVzcG9uc2VMYWJlbDtcclxuXHJcbiAgICBpZiAodHlwZW9mIChyZXQpID09PSAnb2JqZWN0JylcclxuICAgICAgcmV0ID0gdHJpZ2dlci50cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbihyZXQpO1xyXG5cclxuICAgIGlmICh0eXBlb2YgKHJldCkgPT09ICdib29sZWFuJylcclxuICAgICAgcmV0ID0gdW5kZWZpbmVkO1xyXG4gICAgZWxzZSBpZiAodHlwZW9mIChyZXQpID09PSAndW5kZWZpbmVkJylcclxuICAgICAgcmV0ID0gdW5kZWZpbmVkO1xyXG4gICAgZWxzZSBpZiAodHlwZW9mIChyZXQpICE9PSAnc3RyaW5nJylcclxuICAgICAgcmV0ID0gJ0ludmFsaWQgUmVzdWx0Pyc7XHJcblxyXG4gICAgaWYgKHJldCA9PT0gJycpXHJcbiAgICAgIHJldCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgZ2V0VHJpZ2dlckxhYmVsSWNvbih0cmlnZ2VyKSB7XHJcbiAgICBjb25zdCB0eXBlID0gdHJpZ2dlci5zdGF0dXMucmVzcG9uc2VUeXBlO1xyXG5cclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSAnaW5mbyc6XHJcbiAgICAgIHJldHVybiAnaW5mbyc7XHJcbiAgICBjYXNlICdhbGVydCc6XHJcbiAgICAgIHJldHVybiAnYmVsbCc7XHJcbiAgICBjYXNlICdhbGFybSc6XHJcbiAgICAgIHJldHVybiAnZXhjbGFtYXRpb24nO1xyXG4gICAgY2FzZSAndHRzJzpcclxuICAgICAgcmV0dXJuICdidWxsaG9ybic7XHJcbiAgICBjYXNlICdhdWRpb2ZpbGUnOlxyXG4gICAgICByZXR1cm4gJ3ZvbHVtZS11cCc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIGdldFRyaWdnZXJGaXJlZExhYmVsVGltZShUcmlnZ2VyKSB7XHJcbiAgICByZXR1cm4gRW11bGF0b3JDb21tb24udGltZVRvU3RyaW5nKFxyXG4gICAgICAgIFRyaWdnZXIubG9nTGluZS5vZmZzZXQgLSB0aGlzLmVtdWxhdG9yLmN1cnJlbnRFbmNvdW50ZXIuZW5jb3VudGVyLmluaXRpYWxPZmZzZXQsXHJcbiAgICAgICAgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VHJpZ2dlclJlc29sdmVkTGFiZWxUaW1lKFRyaWdnZXIpIHtcclxuICAgIHJldHVybiBFbXVsYXRvckNvbW1vbi50aW1lVG9TdHJpbmcoXHJcbiAgICAgICAgVHJpZ2dlci5yZXNvbHZlZE9mZnNldCAtIHRoaXMuZW11bGF0b3IuY3VycmVudEVuY291bnRlci5lbmNvdW50ZXIuaW5pdGlhbE9mZnNldCxcclxuICAgICAgICBmYWxzZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIFBhcmFtZXRlcnMgdG8gdXNlIGZvciB0aGUgd3JhcHBlci5cclxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBhcmFtcy4kb2JqIE9iamVjdCB0byB3cmFwIGluIGEgY29sbGFwc2VhYmxlIGJ1dHRvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLnRpbWVdIFRpbWUgdG8gZGlzcGxheVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLm5hbWVdIE5hbWUvbGFiZWwgb2YgdGhlIGJ1dHRvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLmljb25dIEZvbnRBd2Vzb21lIGljb24gdG8gZGlzcGxheVxyXG4gICAqIEBwYXJhbSB7W3N0cmluZ119IFtwYXJhbXMuY2xhc3Nlc10gQXJyYXkgb2YgY2xhc3NlcyB0byBhZGQgdG8gdGhlIGJ1dHRvblxyXG4gICAqIEBwYXJhbSB7Q2FsbGFibGVGdW5jdGlvbn0gW3BhcmFtcy5vbmNsaWNrXSBDYWxsYmFjayB0byB0cmlnZ2VyIHdoZW4gY2xpY2tpbmcgdGhlIGJ1dHRvblxyXG4gICAqL1xyXG4gIF93cmFwQ29sbGFwc2UocGFyYW1zKSB7XHJcbiAgICBjb25zdCAkcmV0ID0gdGhpcy4kd3JhcENvbGxhcHNlVGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgY29uc3QgJGJ1dHRvbiA9ICRyZXQucXVlcnlTZWxlY3RvcignLmJ0bicpO1xyXG4gICAgY29uc3QgJHRpbWUgPSAkcmV0LnF1ZXJ5U2VsZWN0b3IoJy50cmlnZ2VyLWxhYmVsLXRpbWUnKTtcclxuICAgIGNvbnN0ICRuYW1lID0gJHJldC5xdWVyeVNlbGVjdG9yKCcudHJpZ2dlci1sYWJlbC1uYW1lJyk7XHJcbiAgICBjb25zdCAkaWNvbiA9ICRyZXQucXVlcnlTZWxlY3RvcignLnRyaWdnZXItbGFiZWwtaWNvbicpO1xyXG4gICAgY29uc3QgJHRleHQgPSAkcmV0LnF1ZXJ5U2VsZWN0b3IoJy50cmlnZ2VyLWxhYmVsLXRleHQnKTtcclxuXHJcbiAgICBpZiAocGFyYW1zLm5hbWUgPT09IHVuZGVmaW5lZClcclxuICAgICAgJG5hbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCgkbmFtZSk7XHJcbiAgICBlbHNlXHJcbiAgICAgICRuYW1lLnRleHRDb250ZW50ID0gcGFyYW1zLm5hbWU7XHJcblxyXG4gICAgaWYgKHBhcmFtcy50aW1lID09PSB1bmRlZmluZWQpXHJcbiAgICAgICR0aW1lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoJHRpbWUpO1xyXG4gICAgZWxzZVxyXG4gICAgICAkdGltZS50ZXh0Q29udGVudCA9IHBhcmFtcy50aW1lO1xyXG5cclxuICAgIGlmIChwYXJhbXMudGV4dCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAkdGV4dC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCR0ZXh0KTtcclxuICAgIGVsc2VcclxuICAgICAgJHRleHQudGV4dENvbnRlbnQgPSBwYXJhbXMudGV4dDtcclxuXHJcbiAgICBpZiAocGFyYW1zLmljb24gPT09IHVuZGVmaW5lZClcclxuICAgICAgJGljb24ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCgkaWNvbik7XHJcbiAgICBlbHNlXHJcbiAgICAgICRpY29uLmlubmVySFRNTCA9IGA8aSBjbGFzcz1cImZhIGZhLSR7cGFyYW1zLmljb259XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPmA7XHJcblxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1zLmNsYXNzZXMpKVxyXG4gICAgICBwYXJhbXMuY2xhc3Nlcy5mb3JFYWNoKChjKSA9PiAkYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXJ0eXBlLScgKyBjKSk7XHJcblxyXG4gICAgY29uc3QgJHdyYXBwZXIgPSAkcmV0LnF1ZXJ5U2VsZWN0b3IoJy53cmFwLWNvbGxhcHNlLXdyYXBwZXInKTtcclxuICAgICRidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIGlmICgkd3JhcHBlci5jbGFzc0xpc3QuY29udGFpbnMoJ2Qtbm9uZScpKVxyXG4gICAgICAgICR3cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgJHdyYXBwZXIuY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XHJcbiAgICAgIHR5cGVvZiAocGFyYW1zLm9uY2xpY2spID09PSAnZnVuY3Rpb24nICYmIHBhcmFtcy5vbmNsaWNrKCk7XHJcbiAgICB9KTtcclxuICAgICR3cmFwcGVyLmFwcGVuZChwYXJhbXMuJG9iaik7XHJcbiAgICByZXR1cm4gJHJldDtcclxuICB9XHJcbn1cclxuXHJcbkVtdWxhdGVkUGFydHlJbmZvLmpvYk9yZGVyID0gW1xyXG4gICdQTEQnLCAnV0FSJywgJ0RSSycsICdHTkInLFxyXG4gICdXSE0nLCAnU0NIJywgJ0FTVCcsXHJcbiAgJ01OSycsICdEUkcnLCAnTklOJywgJ1NBTScsXHJcbiAgJ0JSRCcsICdNQ0gnLCAnRE5DJyxcclxuICAnQkxNJywgJ1NNTicsICdSRE0nLFxyXG4gICdCTFUnXTtcclxuIiwiaW1wb3J0IHsgVW5yZWFjaGFibGVDb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vcmVzb3VyY2VzL25vdF9yZWFjaGVkJztcclxuaW1wb3J0IHsgSm9iIH0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMvam9iJztcclxuaW1wb3J0IENvbWJhdGFudFN0YXRlIGZyb20gJy4vQ29tYmF0YW50U3RhdGUnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tYmF0YW50IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIG5hbWUgPSAnJztcclxuICBzZXJ2ZXIgPSAnJztcclxuICBzdGF0ZXM6IHsgW3RpbWVzdGFtcDogbnVtYmVyXTogQ29tYmF0YW50U3RhdGUgfSA9IHt9O1xyXG4gIHNpZ25pZmljYW50U3RhdGVzOiBudW1iZXJbXSA9IFtdO1xyXG4gIGxhdGVzdFRpbWVzdGFtcCA9IC0xO1xyXG4gIGpvYj86IEpvYjtcclxuICBqb2JJZD86IG51bWJlcjtcclxuICBsZXZlbD86IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgbmFtZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLnNldE5hbWUobmFtZSk7XHJcbiAgfVxyXG5cclxuICBzZXROYW1lKG5hbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgLy8gU29tZXRpbWVzIG5ldHdvcmsgbGluZXMgYXJyaXZlIGFmdGVyIHRoZSBjb21iYXRhbnQgaGFzIGJlZW4gY2xlYXJlZFxyXG4gICAgLy8gZnJvbSBtZW1vcnkgaW4gdGhlIGNsaWVudCwgc28gdGhlIG5ldHdvcmsgbGluZSB3aWxsIGhhdmUgYSB2YWxpZCBJRFxyXG4gICAgLy8gYnV0IHRoZSBuYW1lIHdpbGwgYmUgYmxhbmsuIFNpbmNlIHdlJ3JlIHRyYWNraW5nIHRoZSBuYW1lIGZvciB0aGVcclxuICAgIC8vIGVudGlyZSBmaWdodCBhbmQgbm90IG9uIGEgc3RhdGUtYnktc3RhdGUgYmFzaXMsIHdlIGRvbid0IHdhbnQgdG9cclxuICAgIC8vIGJsYW5rIG91dCBhIG5hbWUgaW4gdGhpcyBjYXNlLlxyXG4gICAgLy8gSWYgYSBjb21iYXRhbnQgYWN0dWFsbHkgaGFzIGEgYmxhbmsgbmFtZSwgdGhhdCdzIHN0aWxsIGFsbG93ZWQgYnlcclxuICAgIC8vIHRoZSBjb25zdHJ1Y3Rvci5cclxuICAgIGlmIChuYW1lID09PSAnJylcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHBhcnRzID0gbmFtZS5zcGxpdCgnKCcpO1xyXG4gICAgdGhpcy5uYW1lID0gcGFydHNbMF0gPz8gJyc7XHJcbiAgICBpZiAocGFydHMubGVuZ3RoID4gMSlcclxuICAgICAgdGhpcy5zZXJ2ZXIgPSBwYXJ0c1sxXT8ucmVwbGFjZSgvXFwpJC8sICcnKSA/PyAnJztcclxuICB9XHJcblxyXG4gIGhhc1N0YXRlKHRpbWVzdGFtcDogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZXNbdGltZXN0YW1wXSAhPT0gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgcHVzaFN0YXRlKHRpbWVzdGFtcDogbnVtYmVyLCBzdGF0ZTogQ29tYmF0YW50U3RhdGUpOiB2b2lkIHtcclxuICAgIHRoaXMuc3RhdGVzW3RpbWVzdGFtcF0gPSBzdGF0ZTtcclxuICAgIHRoaXMubGF0ZXN0VGltZXN0YW1wID0gdGltZXN0YW1wO1xyXG4gICAgaWYgKCF0aGlzLnNpZ25pZmljYW50U3RhdGVzLmluY2x1ZGVzKHRpbWVzdGFtcCkpXHJcbiAgICAgIHRoaXMuc2lnbmlmaWNhbnRTdGF0ZXMucHVzaCh0aW1lc3RhbXApO1xyXG4gIH1cclxuXHJcbiAgbmV4dFNpZ25pZmljYW50U3RhdGUodGltZXN0YW1wOiBudW1iZXIpOiBDb21iYXRhbnRTdGF0ZSB7XHJcbiAgICAvLyBTaG9ydGN1dCBvdXQgaWYgdGhpcyBpcyBzaWduaWZpY2FudCBvciBpZiB0aGVyZSdzIG5vIGhpZ2hlciBzaWduaWZpY2FudCBzdGF0ZVxyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnNpZ25pZmljYW50U3RhdGVzLmluZGV4T2YodGltZXN0YW1wKTtcclxuICAgIGNvbnN0IGxhc3RTaWduaWZpY2FudFN0YXRlSW5kZXggPSB0aGlzLnNpZ25pZmljYW50U3RhdGVzLmxlbmd0aCAtIDE7XHJcbiAgICAvLyBJZiB0aW1lc3RhbXAgaXMgYSBzaWduaWZpY2FudCBzdGF0ZSBhbHJlYWR5LCBhbmQgaXQncyBub3QgdGhlIGxhc3Qgb25lLCByZXR1cm4gdGhlIG5leHRcclxuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgbGFzdFNpZ25pZmljYW50U3RhdGVJbmRleClcclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGVCeUluZGV4KGluZGV4ICsgMSk7XHJcbiAgICAvLyBJZiB0aW1lc3RhbXAgaXMgdGhlIGxhc3Qgc2lnbmlmaWNhbnQgc3RhdGUgb3IgdGhlIHRpbWVzdGFtcCBpcyBwYXN0IHRoZSBsYXN0IHNpZ25pZmljYW50XHJcbiAgICAvLyBzdGF0ZSwgcmV0dXJuIHRoZSBsYXN0IHNpZ25pZmljYW50IHN0YXRlXHJcbiAgICBlbHNlIGlmIChpbmRleCA9PT0gbGFzdFNpZ25pZmljYW50U3RhdGVJbmRleCB8fFxyXG4gICAgICAgIHRpbWVzdGFtcCA+ICh0aGlzLnNpZ25pZmljYW50U3RhdGVzW2xhc3RTaWduaWZpY2FudFN0YXRlSW5kZXhdID8/IDApKVxyXG4gICAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZUJ5SW5kZXgobGFzdFNpZ25pZmljYW50U3RhdGVJbmRleCk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpZ25pZmljYW50U3RhdGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHN0YXRlSW5kZXggPSB0aGlzLnNpZ25pZmljYW50U3RhdGVzW2ldO1xyXG4gICAgICBpZiAoc3RhdGVJbmRleCAmJiBzdGF0ZUluZGV4ID4gdGltZXN0YW1wKVxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0YXRlQnlJbmRleChpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZUJ5SW5kZXgodGhpcy5zaWduaWZpY2FudFN0YXRlcy5sZW5ndGggLSAxKTtcclxuICB9XHJcblxyXG4gIHB1c2hQYXJ0aWFsU3RhdGUodGltZXN0YW1wOiBudW1iZXIsIHByb3BzOiBQYXJ0aWFsPENvbWJhdGFudFN0YXRlPik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuc3RhdGVzW3RpbWVzdGFtcF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAvLyBDbG9uZSB0aGUgbGFzdCBzdGF0ZSBiZWZvcmUgdGhpcyB0aW1lc3RhbXBcclxuICAgICAgY29uc3Qgc3RhdGVUaW1lc3RhbXAgPSB0aGlzLnNpZ25pZmljYW50U3RhdGVzXHJcbiAgICAgICAgLmZpbHRlcigocykgPT4gcyA8IHRpbWVzdGFtcClcclxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYiAtIGEpWzBdID8/IHRoaXMuc2lnbmlmaWNhbnRTdGF0ZXNbMF07XHJcbiAgICAgIGlmIChzdGF0ZVRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlc1tzdGF0ZVRpbWVzdGFtcF07XHJcbiAgICAgIGlmICghc3RhdGUpXHJcbiAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gICAgICB0aGlzLnN0YXRlc1t0aW1lc3RhbXBdID0gc3RhdGUucGFydGlhbENsb25lKHByb3BzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZXNbdGltZXN0YW1wXTtcclxuICAgICAgaWYgKCFzdGF0ZSlcclxuICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcbiAgICAgIHRoaXMuc3RhdGVzW3RpbWVzdGFtcF0gPSBzdGF0ZS5wYXJ0aWFsQ2xvbmUocHJvcHMpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5sYXRlc3RUaW1lc3RhbXAgPSBNYXRoLm1heCh0aGlzLmxhdGVzdFRpbWVzdGFtcCwgdGltZXN0YW1wKTtcclxuXHJcbiAgICBjb25zdCBsYXN0U2lnbmlmaWNhbnRTdGF0ZVRpbWVzdGFtcCA9XHJcbiAgICAgIHRoaXMuc2lnbmlmaWNhbnRTdGF0ZXNbdGhpcy5zaWduaWZpY2FudFN0YXRlcy5sZW5ndGggLSAxXTtcclxuICAgIGlmICghbGFzdFNpZ25pZmljYW50U3RhdGVUaW1lc3RhbXApXHJcbiAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgIGNvbnN0IG9sZFN0YXRlSlNPTiA9IEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGVzW2xhc3RTaWduaWZpY2FudFN0YXRlVGltZXN0YW1wXSk7XHJcbiAgICBjb25zdCBuZXdTdGF0ZUpTT04gPSBKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlc1t0aW1lc3RhbXBdKTtcclxuXHJcbiAgICBpZiAobGFzdFNpZ25pZmljYW50U3RhdGVUaW1lc3RhbXAgIT09IHRpbWVzdGFtcCAmJiBuZXdTdGF0ZUpTT04gIT09IG9sZFN0YXRlSlNPTilcclxuICAgICAgdGhpcy5zaWduaWZpY2FudFN0YXRlcy5wdXNoKHRpbWVzdGFtcCk7XHJcbiAgfVxyXG5cclxuICBnZXRTdGF0ZSh0aW1lc3RhbXA6IG51bWJlcik6IENvbWJhdGFudFN0YXRlIHtcclxuICAgIGNvbnN0IHN0YXRlQnlUaW1lc3RhbXAgPSB0aGlzLnN0YXRlc1t0aW1lc3RhbXBdO1xyXG4gICAgaWYgKHN0YXRlQnlUaW1lc3RhbXApXHJcbiAgICAgIHJldHVybiBzdGF0ZUJ5VGltZXN0YW1wO1xyXG5cclxuICAgIGNvbnN0IGluaXRpYWxUaW1lc3RhbXAgPSB0aGlzLnNpZ25pZmljYW50U3RhdGVzWzBdO1xyXG4gICAgaWYgKGluaXRpYWxUaW1lc3RhbXAgPT09IHVuZGVmaW5lZClcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gICAgaWYgKHRpbWVzdGFtcCA8IGluaXRpYWxUaW1lc3RhbXApXHJcbiAgICAgIHJldHVybiB0aGlzLmdldFN0YXRlQnlJbmRleCgwKTtcclxuXHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBmb3IgKDsgaSA8IHRoaXMuc2lnbmlmaWNhbnRTdGF0ZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgcHJldlRpbWVzdGFtcCA9IHRoaXMuc2lnbmlmaWNhbnRTdGF0ZXNbaV07XHJcbiAgICAgIGlmIChwcmV2VGltZXN0YW1wID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gICAgICBpZiAocHJldlRpbWVzdGFtcCA+IHRpbWVzdGFtcClcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZUJ5SW5kZXgoaSAtIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmdldFN0YXRlQnlJbmRleChpIC0gMSk7XHJcbiAgfVxyXG5cclxuICAvLyBTaG91bGQgb25seSBiZSBjYWxsZWQgd2hlbiBgaW5kZXhgIGlzIHZhbGlkLlxyXG4gIHByaXZhdGUgZ2V0U3RhdGVCeUluZGV4KGluZGV4OiBudW1iZXIpOiBDb21iYXRhbnRTdGF0ZSB7XHJcbiAgICBjb25zdCBzdGF0ZUluZGV4ID0gdGhpcy5zaWduaWZpY2FudFN0YXRlc1tpbmRleF07XHJcbiAgICBpZiAoc3RhdGVJbmRleCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGVzW3N0YXRlSW5kZXhdO1xyXG4gICAgaWYgKHN0YXRlID09PSB1bmRlZmluZWQpXHJcbiAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSm9iIH0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMvam9iJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbWJhdGFudEpvYlNlYXJjaCB7XHJcbiAgc3RhdGljIGdldEpvYihhYmlsaXR5SWQ6IG51bWJlcik6IEpvYiB8IHVuZGVmaW5lZCB7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDb21iYXRhbnRKb2JTZWFyY2guYWJpbGl0aWVzKSkge1xyXG4gICAgICBpZiAodmFsdWU/LmluY2x1ZGVzKGFiaWxpdHlJZCkpXHJcbiAgICAgICAgcmV0dXJuIGtleSBhcyBrZXlvZiB0eXBlb2YgQ29tYmF0YW50Sm9iU2VhcmNoLmFiaWxpdGllcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyByZWFkb25seSBhYmlsaXR5TWF0Y2hSZWdleCA9IC9bYS1mQS1GMC05XXsxLDR9L2k7XHJcblxyXG4gIHN0YXRpYyByZWFkb25seSBhYmlsaXRpZXM6IHsgW2pvYiBpbiBKb2JdPzogbnVtYmVyW10gfSA9IHtcclxuICAgIFBMRDogW1xyXG4gICAgICAxMjk1OSwgMTI5NjEsIDEyOTY0LCAxMjk2NywgMTI5NjgsIDEyOTY5LCAxMjk3MCwgMTI5NzEsIDEyOTcyLCAxMjk3MywgMTI5NzQsIDEyOTc1LFxyXG4gICAgICAxMjk3NiwgMTI5NzgsIDEyOTgwLCAxMjk4MSwgMTI5ODIsIDEyOTgzLCAxMjk4NCwgMTI5ODUsIDEyOTg2LCAxMjk4NywgMTI5ODgsIDEyOTg5LFxyXG4gICAgICAxMjk5MSwgMTI5OTIsIDEyOTkzLCAxMjk5NCwgMTI5OTYsIDEzMDAwLCAxMzAwMSwgMTMwMDYsIDE0NDgwLCAxNjQ1NywgMTY0NTgsIDE2NDU5LFxyXG4gICAgICAxNjQ2MCwgMTY0NjEsIDE3NjY5LCAxNzY3MSwgMTc2NzIsIDE3NjkxLCAxNzY5MiwgMTc2OTMsIDE3Njk0LCAxNzg2NiwgMTgwNTAsIDI3LCAyOSxcclxuICAgICAgMzAsIDM1MzgsIDM1MzksIDM1NDAsIDM1NDEsIDM1NDIsIDQyODQsIDQyODUsIDQyODYsIDUwMjA3LCA1MDIwOSwgNTAyNDYsIDUwMjYwLCA1MDI2MSxcclxuICAgICAgNTAyNjIsIDUwMjYzLCA1MDI2NCwgNzM4MiwgNzM4MywgNzM4NCwgNzM4NSwgODc0NiwgODc0OSwgODc1MCwgODc1MSwgODc1MiwgODc1NCwgODc1NSxcclxuICAgICAgODc1NixcclxuICAgIF0sXHJcbiAgICBXQVI6IFtcclxuICAgICAgMTY0NjIsIDE2NDYzLCAxNjQ2NCwgMTY0NjUsIDE3Njk1LCAxNzY5NiwgMTc2OTcsIDE3Njk4LCAxNzg4OSwgMzU0OSwgMzU1MCwgMzU1MSwgMzU1MixcclxuICAgICAgNDI4OSwgNDI5MCwgNDI5MSwgNDksIDUwMTU3LCA1MDIxOCwgNTAyNDksIDUwMjY1LCA1MDI2NiwgNTAyNjcsIDUwMjY4LCA1MDI2OSwgNTEsIDUyLFxyXG4gICAgICA3Mzg2LCA3Mzg3LCA3Mzg4LCA3Mzg5LCA4NzU4LCA4NzYxLCA4NzYyLCA4NzYzLCA4NzY0LCA4NzY1LCA4NzY3LCA4NzY4LFxyXG4gICAgXSxcclxuICAgIERSSzogW1xyXG4gICAgICAxNjQ2NiwgMTY0NjcsIDE2NDY4LCAxNjQ2OSwgMTY0NzAsIDE2NDcxLCAxNjQ3MiwgMTc3MDAsIDE3NzAxLCAxNzcwMiwgMzYxNywgMzYyMSwgMzYyMyxcclxuICAgICAgMzYyNCwgMzYyNSwgMzYyOSwgMzYzMiwgMzYzNCwgMzYzNiwgMzYzOCwgMzYzOSwgMzY0MCwgMzY0MSwgMzY0MywgNDMwMywgNDMwNCwgNDMwNSwgNDMwNixcclxuICAgICAgNDMwNywgNDMwOCwgNDMwOSwgNDMxMCwgNDMxMSwgNDMxMiwgNDY4MCwgNTAxNTgsIDUwMTU5LCA1MDI3MSwgNTAyNzIsIDUwMzE5LCA3MzkwLCA3MzkxLFxyXG4gICAgICA3MzkyLCA3MzkzLCA4NzY5LCA4NzcyLCA4NzczLCA4Nzc1LCA4Nzc2LCA4Nzc3LCA4Nzc4LCA4Nzc5LFxyXG4gICAgXSxcclxuICAgIEdOQjogW1xyXG4gICAgICAxNzcwMywgMTc3MDQsIDE3NzA1LCAxNzcwNiwgMTc3MDcsIDE3NzA4LCAxNzcwOSwgMTc3MTAsIDE3NzExLCAxNzcxMiwgMTc3MTMsIDE3NzE0LFxyXG4gICAgICAxNzcxNiwgMTc3MTcsIDE3ODkwLCAxNzg5MSwgMTYxMzcsIDUwMzIwLCAxNjEzOCwgMTYxMzksIDE2MTQwLCAxNjE0MSwgMTYxNDIsIDE2MTQzLFxyXG4gICAgICAxNjE0NCwgMTYxNDUsIDE2MTYyLCA1MDI1NywgMTYxNDgsIDE2MTQ5LCAxNjE1MSwgMTYxNTIsIDUwMjU4LCAxNjE1MywgMTYxNTQsIDE2MTQ2LFxyXG4gICAgICAxNjE0NywgMTYxNTAsIDE2MTU5LCAxNjE2MCwgMTYxNjEsIDE2MTU1LCAxNjE1NiwgMTYxNTcsIDE2MTU4LCAxNjE2MywgMTYxNjQsIDE2MTY1LFxyXG4gICAgICA1MDI1OSxcclxuICAgIF0sXHJcbiAgICBXSE06IFtcclxuICAgICAgMTI5NTgsIDEyOTYyLCAxMjk2NSwgMTI5OTcsIDEzMDAyLCAxMzAwMywgMTMwMDQsIDEzMDA1LCAxMzEsIDEzNiwgMTM3LCAxMzksIDE0MCwgMTQ0ODEsXHJcbiAgICAgIDE1ODQsIDE2NTMxLCAxNjUzMiwgMTY1MzMsIDE2NTM0LCAxNjUzNSwgMTY1MzYsIDE3Njg4LCAxNzY4OSwgMTc2OTAsIDE3Nzg5LCAxNzc5MCwgMTc3OTEsXHJcbiAgICAgIDE3NzkzLCAxNzc5NCwgMTc4MzIsIDM1NjgsIDM1NjksIDM1NzAsIDM1NzEsIDQyOTYsIDQyOTcsIDUwMTgxLCA1MDE4MiwgNTAxOTYsIDUwMzA3LFxyXG4gICAgICA1MDMwOCwgNTAzMDksIDUwMzEwLCA3NDMwLCA3NDMxLCA3NDMyLCA3NDMzLCA4ODk1LCA4ODk2LCA4OTAwLCA5NjIxLCAxMjcsIDEzMyxcclxuICAgIF0sXHJcbiAgICBTQ0g6IFtcclxuICAgICAgMTY1MzcsIDE2NTM4LCAxNjUzOSwgMTY1NDAsIDE2NTQxLCAxNjU0MiwgMTY1NDMsIDE2NTQ0LCAxNjU0NSwgMTY1NDYsIDE2NTQ3LCAxNjU0OCwgMTY1NTAsXHJcbiAgICAgIDE2NTUxLCAxNjYsIDE2NywgMTcyMTUsIDE3MjE2LCAxNzc5NSwgMTc3OTYsIDE3Nzk3LCAxNzc5OCwgMTc4MDIsIDE3ODY0LCAxNzg2NSwgMTc4NjksXHJcbiAgICAgIDE3ODcwLCAxNzk5MCwgMTg1LCAxODYsIDE4OCwgMTg5LCAxOTAsIDM1ODMsIDM1ODQsIDM1ODUsIDM1ODYsIDM1ODcsIDQzMDAsIDUwMTg0LCA1MDIxNCxcclxuICAgICAgNTAzMTEsIDUwMzEyLCA1MDMxMywgNTAzMjQsIDc0MzQsIDc0MzUsIDc0MzYsIDc0MzcsIDc0MzgsIDc4NjksIDgwMiwgODAzLCA4MDUsIDg5MDQsIDg5MDUsXHJcbiAgICAgIDg5MDksIDk2MjIsXHJcbiAgICBdLFxyXG4gICAgQVNUOiBbXHJcbiAgICAgIDEwMDI3LCAxMDAyOCwgMTAwMjksIDE2NTUyLCAxNjU1MywgMTY1NTQsIDE2NTU1LCAxNjU1NiwgMTY1NTcsIDE2NTU4LCAxNjU1OSwgMTcwNTUsIDE3MTUxLFxyXG4gICAgICAxNzE1MiwgMTc4MDQsIDE3ODA1LCAxNzgwNiwgMTc4MDcsIDE3ODA5LCAxNzk5MSwgMzU5MCwgMzU5MywgMzU5NCwgMzU5NSwgMzU5NiwgMzU5OCwgMzU5OSxcclxuICAgICAgMzYwMCwgMzYwMSwgMzYwMywgMzYwNCwgMzYwNSwgMzYwNiwgMzYwOCwgMzYxMCwgMzYxMiwgMzYxMywgMzYxNCwgMzYxNSwgNDMwMSwgNDMwMiwgNDQwMSxcclxuICAgICAgNDQwMiwgNDQwMywgNDQwNCwgNDQwNSwgNDQwNiwgNDY3NywgNDY3OCwgNDY3OSwgNTAxMjIsIDUwMTI0LCA1MDEyNSwgNTAxODYsIDUwMTg3LCA1MDE4OCxcclxuICAgICAgNTAxODksIDUwMzE0LCA1MDMxNSwgNTAzMTYsIDc0MzksIDc0NDAsIDc0NDEsIDc0NDIsIDc0NDMsIDc0NDQsIDc0NDUsIDc0NDgsIDgzMjQsIDg5MTMsXHJcbiAgICAgIDg5MTQsIDg5MTYsIDk2MjksXHJcbiAgICBdLFxyXG4gICAgTU5LOiBbXHJcbiAgICAgIDEyOTYwLCAxMjk2MywgMTI5NjYsIDEyOTc3LCAxMjk3OSwgMTI5OTAsIDEyOTk1LCAxMjk5OCwgMTI5OTksIDE0NDc2LCAxNDQ3OCwgMTY0NzMsIDE2NDc0LFxyXG4gICAgICAxNjQ3NSwgMTY0NzYsIDE3Njc0LCAxNzY3NSwgMTc2NzYsIDE3Njc3LCAxNzcxOSwgMTc3MjAsIDE3NzIxLCAxNzcyMiwgMTc3MjMsIDE3NzI0LCAxNzcyNSxcclxuICAgICAgMTc3MjYsIDM1NDMsIDM1NDUsIDM1NDYsIDM1NDcsIDQyNjIsIDQyODcsIDQyODgsIDUwMTYwLCA1MDE2MSwgNTAyNDUsIDUwMjczLCA1MDI3NCwgNjMsIDcwLFxyXG4gICAgICA3MSwgNzM5NCwgNzM5NSwgNzM5NiwgNzQsIDg3ODAsIDg3ODEsIDg3ODIsIDg3ODMsIDg3ODQsIDg3ODUsIDg3ODcsIDg3ODksIDg5MjUsXHJcbiAgICBdLFxyXG4gICAgRFJHOiBbXHJcbiAgICAgIDE2NDc3LCAxNjQ3OCwgMTY0NzksIDE2NDgwLCAxNzcyOCwgMTc3MjksIDM1NTMsIDM1NTQsIDM1NTUsIDM1NTYsIDM1NTcsIDQyOTIsIDQyOTMsIDUwMTYyLFxyXG4gICAgICA1MDE2MywgNTAyNDcsIDUwMjc1LCA1MDI3NiwgNzM5NywgNzM5OCwgNzM5OSwgNzQwMCwgODYsIDg3OTEsIDg3OTIsIDg3OTMsIDg3OTQsIDg3OTUsXHJcbiAgICAgIDg3OTYsIDg3OTcsIDg3OTgsIDg3OTksIDg4MDIsIDg4MDMsIDg4MDQsIDg4MDUsIDg4MDYsIDkyLCA5NCwgOTUsIDk2LCA5NjQwLCA3NSwgNzgsXHJcbiAgICBdLFxyXG4gICAgTklOOiBbXHJcbiAgICAgIDE2NDg4LCAxNjQ4OSwgMTY0OTEsIDE2NDkyLCAxNjQ5MywgMTc0MTMsIDE3NDE0LCAxNzQxNSwgMTc0MTYsIDE3NDE3LCAxNzQxOCwgMTc0MTksIDE3NDIwLFxyXG4gICAgICAxNzczMiwgMTc3MzMsIDE3NzM0LCAxNzczNSwgMTc3MzYsIDE3NzM3LCAxNzczOCwgMTc3MzksIDIyNDYsIDIyNTksIDIyNjAsIDIyNjEsIDIyNjIsXHJcbiAgICAgIDIyNjMsIDIyNjQsIDIyNjUsIDIyNjYsIDIyNjcsIDIyNjgsIDIyNjksIDIyNzAsIDIyNzEsIDIyNzIsIDM1NjMsIDM1NjYsIDQyOTUsIDUwMTY1LFxyXG4gICAgICA1MDE2NiwgNTAxNjcsIDUwMjUwLCA1MDI3OSwgNTAyODAsIDc0MDEsIDc0MDIsIDc0MDMsIDg4MDcsIDg4MDgsIDg4MDksIDg4MTAsIDg4MTIsIDg4MTQsXHJcbiAgICAgIDg4MTUsIDg4MTYsIDg4MjAsIDk0NjEsXHJcbiAgICBdLFxyXG4gICAgU0FNOiBbXHJcbiAgICAgIDE2NDgxLCAxNjQ4MiwgMTY0ODMsIDE2NDg0LCAxNjQ4NSwgMTY0ODYsIDE2NDg3LCAxNzc0MCwgMTc3NDEsIDE3NzQyLCAxNzc0MywgMTc3NDQsIDUwMjA4LFxyXG4gICAgICA1MDIxNSwgNTAyNzcsIDUwMjc4LCA3NDc3LCA3NDc4LCA3NDc5LCA3NDgwLCA3NDgxLCA3NDgyLCA3NDgzLCA3NDg0LCA3NDg1LCA3NDg2LCA3NDg3LFxyXG4gICAgICA3NDg4LCA3NDg5LCA3NDkwLCA3NDkxLCA3NDkyLCA3NDkzLCA3NDk0LCA3NDk1LCA3NDk2LCA3NDk3LCA3NDk4LCA3NDk5LCA3NTAxLCA3NTAyLCA3ODU1LFxyXG4gICAgICA3ODU3LCA3ODY3LCA4ODIxLCA4ODIyLCA4ODIzLCA4ODI0LCA4ODI1LCA4ODI2LCA4ODI4LCA4ODI5LCA4ODMwLCA4ODMxLCA4ODMzLFxyXG4gICAgXSxcclxuICAgIEJSRDogW1xyXG4gICAgICAxMDAyMywgMTE0LCAxMTYsIDExNywgMTE4LCAxMzAwNywgMTQ0NzksIDE2NDk0LCAxNjQ5NSwgMTY0OTYsIDE3Njc4LCAxNzY3OSwgMTc2ODAsIDE3NjgxLFxyXG4gICAgICAxNzY4MiwgMTc3NDUsIDE3NzQ3LCAzNTU4LCAzNTU5LCAzNTYwLCAzNTYxLCAzNTYyLCA0Mjk0LCA1MDE2OCwgNTAxNjksIDUwMjgyLCA1MDI4MywgNTAyODQsXHJcbiAgICAgIDUwMjg1LCA1MDI4NiwgNTAyODcsIDc0MDQsIDc0MDUsIDc0MDYsIDc0MDcsIDc0MDgsIDc0MDksIDg4MzYsIDg4MzcsIDg4MzgsIDg4MzksIDg4NDEsXHJcbiAgICAgIDg4NDIsIDg4NDMsIDg4NDQsIDk2MjUsIDEwNixcclxuICAgIF0sXHJcbiAgICBNQ0g6IFtcclxuICAgICAgMTY0OTcsIDE2NDk4LCAxNjQ5OSwgMTY1MDAsIDE2NTAxLCAxNjUwMiwgMTY1MDMsIDE2NTA0LCAxNjc2NiwgMTY4ODksIDE3MjA2LCAxNzIwOSwgMTc3NDksXHJcbiAgICAgIDE3NzUwLCAxNzc1MSwgMTc3NTIsIDE3NzUzLCAxNzc1NCwgMjg2NCwgMjg2NiwgMjg2OCwgMjg3MCwgMjg3MiwgMjg3MywgMjg3NCwgMjg3NiwgMjg3OCxcclxuICAgICAgMjg5MCwgNDI3NiwgNDY3NSwgNDY3NiwgNTAxMTcsIDUwMTE5LCA1MDI4OCwgNTAyODksIDUwMjkwLCA1MDI5MSwgNTAyOTIsIDUwMjkzLCA1MDI5NCxcclxuICAgICAgNzQxMCwgNzQxMSwgNzQxMiwgNzQxMywgNzQxNCwgNzQxNSwgNzQxNiwgNzQxOCwgODg0OCwgODg0OSwgODg1MCwgODg1MSwgODg1MywgODg1NSxcclxuICAgIF0sXHJcbiAgICBETkM6IFtcclxuICAgICAgMTc3NTYsIDE3NzU3LCAxNzc1OCwgMTc3NTksIDE3NzYwLCAxNzc2MSwgMTc3NjIsIDE3NzYzLCAxNzc2NCwgMTc3NjUsIDE3NzY2LCAxNzc2NyxcclxuICAgICAgMTc3NjgsIDE3NzY5LCAxNzc3MCwgMTc3NzEsIDE3NzcyLCAxNzc3MywgMTc4MjQsIDE3ODI1LCAxNzgyNiwgMTc4MjcsIDE3ODI4LCAxNzgyOSxcclxuICAgICAgMTgwNzYsIDE1OTg5LCAxNTk5MCwgMTU5OTMsIDE1OTk3LCAxNTk5OSwgMTYwMDAsIDE2MDAxLCAxNjAwMiwgMTYwMDMsIDE2MTkxLCAxNjE5MixcclxuICAgICAgMTU5OTEsIDE1OTk0LCAxNjAwNywgNTAyNTIsIDE1OTk1LCAxNTk5MiwgMTU5OTYsIDE2MDA4LCAxNjAxMCwgNTAyNTEsIDE2MDE1LCAxNjAxMixcclxuICAgICAgMTYwMDYsIDE4MDczLCA1MDI1MywgMTYwMTEsIDE2MDA5LCA1MDI1NCwgMTU5OTgsIDE2MDA0LCAxNjE5MywgMTYxOTQsIDE2MTk1LCAxNjE5NixcclxuICAgICAgMTYwMTMsIDE2MDA1LCA1MDI1NSwgNTAyNTYsIDE2MDE0LFxyXG4gICAgXSxcclxuICAgIEJMTTogW1xyXG4gICAgICAxNDQ3NywgMTUzLCAxNTQsIDE1OCwgMTU5LCAxNjIsIDE2NTA1LCAxNjUwNiwgMTY1MDcsIDE3NjgzLCAxNzY4NCwgMTc2ODUsIDE3Njg2LCAxNzY4NyxcclxuICAgICAgMTc3NzQsIDE3Nzc1LCAzNTczLCAzNTc0LCAzNTc1LCAzNTc2LCAzNTc3LCA0Mjk4LCA1MDE3MSwgNTAxNzIsIDUwMTczLCA1MDE3NCwgNTAyOTUsXHJcbiAgICAgIDUwMjk2LCA1MDI5NywgNTAzMjEsIDUwMzIyLCA3NDE5LCA3NDIwLCA3NDIxLCA3NDIyLCA4ODU4LCA4ODU5LCA4ODYwLCA4ODYxLCA4ODYyLCA4ODYzLFxyXG4gICAgICA4ODY0LCA4ODY1LCA4ODY2LCA4ODY3LCA4ODY5LCA5NjM3LCAxNDksIDE1NSwgMTQxLCAxNTIsXHJcbiAgICBdLFxyXG4gICAgU01OOiBbXHJcbiAgICAgIDE2NTEwLCAxNjUxMSwgMTY1MTMsIDE2NTE0LCAxNjUxNSwgMTY1MTYsIDE2NTE3LCAxNjUxOCwgMTY1MTksIDE2NTIyLCAxNjUyMywgMTY1NDksXHJcbiAgICAgIDE2Nzk1LCAxNjc5NiwgMTY3OTcsIDE2Nzk4LCAxNjc5OSwgMTY4MDAsIDE2ODAxLCAxNjgwMiwgMTY4MDMsIDE3Nzc3LCAxNzc3OCwgMTc3NzksXHJcbiAgICAgIDE3NzgwLCAxNzc4MSwgMTc3ODIsIDE3NzgzLCAxNzc4NCwgMTc3ODUsIDE4MCwgMTg0LCAzNTc4LCAzNTc5LCAzNTgwLCAzNTgxLCAzNTgyLCA0Mjk5LFxyXG4gICAgICA1MDE3NiwgNTAxNzcsIDUwMTc4LCA1MDIxMywgNTAyMTcsIDUwMjk4LCA1MDI5OSwgNTAzMDAsIDUwMzAxLCA1MDMwMiwgNzQyMywgNzQyNCwgNzQyNSxcclxuICAgICAgNzQyNiwgNzQyNywgNzQyOCwgNzQyOSwgNzQ0OSwgNzQ1MCwgNzg3LCA3ODgsIDc5MSwgNzkyLCA3OTQsIDc5NiwgNzk3LCA3OTgsIDgwMCwgODAxLFxyXG4gICAgICA4ODcyLCA4ODczLCA4ODc0LCA4ODc3LCA4ODc4LCA4ODc5LCA4ODgwLCA4ODgxLCA5MDE0LCA5NDMyLFxyXG4gICAgXSxcclxuICAgIFJETTogW1xyXG4gICAgICAxMDAyNSwgMTY1MjQsIDE2NTI1LCAxNjUyNiwgMTY1MjcsIDE2NTI4LCAxNjUyOSwgMTY1MzAsIDE3Nzg2LCAxNzc4NywgMTc3ODgsIDUwMTk1LFxyXG4gICAgICA1MDIwMCwgNTAyMDEsIDUwMjE2LCA1MDMwMywgNTAzMDQsIDUwMzA1LCA1MDMwNiwgNzUwMywgNzUwNCwgNzUwNSwgNzUwNiwgNzUwNywgNzUwOSxcclxuICAgICAgNzUxMCwgNzUxMSwgNzUxMiwgNzUxMywgNzUxNCwgNzUxNSwgNzUxNiwgNzUxNywgNzUxOCwgNzUxOSwgNzUyMCwgNzUyMSwgNzUyMywgNzUyNCxcclxuICAgICAgNzUyNSwgNzUyNiwgNzUyNywgNzUyOCwgNzUyOSwgNzUzMCwgODg4MiwgODg4MywgODg4NCwgODg4NSwgODg4NywgODg4OCwgODg4OSwgODg5MCxcclxuICAgICAgODg5MSwgODg5MiwgOTQzMywgOTQzNCxcclxuICAgIF0sXHJcbiAgICBCTFU6IFtcclxuICAgICAgMTE3MTUsIDExMzgzLCAxMTM4NCwgMTEzODUsIDExMzg2LCAxMTM4NywgMTEzODgsIDExMzg5LCAxMTM5MCwgMTEzOTEsIDExMzkyLCAxMTM5MyxcclxuICAgICAgMTEzOTQsIDExMzk1LCAxMTM5NiwgMTEzOTcsIDExMzk4LCAxMTM5OSwgMTE0MDAsIDExNDAxLCAxMTQwMiwgMTE0MDMsIDExNDA0LCAxMTQwNSxcclxuICAgICAgMTE0MDYsIDExNDA3LCAxMTQwOCwgMTE0MDksIDExNDEwLCAxMTQxMSwgMTE0MTIsIDExNDEzLCAxMTQxNCwgMTE0MTUsIDExNDE2LCAxMTQxNyxcclxuICAgICAgMTE0MTgsIDExNDE5LCAxMTQyMCwgMTE0MjEsIDExNDIyLCAxMTQyMywgMTE0MjQsIDExNDI1LCAxMTQyNiwgMTE0MjcsIDExNDI4LCAxMTQyOSxcclxuICAgICAgMTE0MzAsIDExNDMxLCA1MDIxOSwgNTAyMjAsIDUwMjIxLCA1MDIyMiwgNTAyMjMsIDUwMjI0LFxyXG4gICAgXSxcclxuICB9O1xyXG59XHJcbiIsIi8vIE1lbWJlciBuYW1lcyB0YWtlbiBmcm9tIE92ZXJsYXlQbHVnaW4ncyBNaW5pUGFyc2UuY3NcclxuLy8gVHlwZXMgdGFrZW4gZnJvbSBGRlhJViBwYXJzZXIgcGx1Z2luXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGx1Z2luU3RhdGUge1xyXG4gIEN1cnJlbnRXb3JsZElEPzogbnVtYmVyO1xyXG4gIFdvcmxkSUQ/OiBudW1iZXI7XHJcbiAgV29ybGROYW1lPzogc3RyaW5nO1xyXG4gIEJOcGNJRD86IG51bWJlcjtcclxuICBCTnBjTmFtZUlEPzogbnVtYmVyO1xyXG4gIFBhcnR5VHlwZT86IG51bWJlcjtcclxuICBJRD86IG51bWJlcjtcclxuICBPd25lcklEPzogbnVtYmVyO1xyXG4gIHR5cGU/OiBudW1iZXI7XHJcbiAgSm9iPzogbnVtYmVyO1xyXG4gIExldmVsPzogbnVtYmVyO1xyXG4gIE5hbWU/OiBzdHJpbmc7XHJcbiAgQ3VycmVudEhQOiBudW1iZXI7XHJcbiAgTWF4SFA6IG51bWJlcjtcclxuICBDdXJyZW50TVA6IG51bWJlcjtcclxuICBNYXhNUDogbnVtYmVyO1xyXG4gIFBvc1g6IG51bWJlcjtcclxuICBQb3NZOiBudW1iZXI7XHJcbiAgUG9zWjogbnVtYmVyO1xyXG4gIEhlYWRpbmc6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tYmF0YW50U3RhdGUge1xyXG4gIHBvc1g6IG51bWJlcjtcclxuICBwb3NZOiBudW1iZXI7XHJcbiAgcG9zWjogbnVtYmVyO1xyXG4gIGhlYWRpbmc6IG51bWJlcjtcclxuICB0YXJnZXRhYmxlOiBib29sZWFuO1xyXG4gIGhwOiBudW1iZXI7XHJcbiAgbWF4SHA6IG51bWJlcjtcclxuICBtcDogbnVtYmVyO1xyXG4gIG1heE1wOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBvc1g6IG51bWJlciwgcG9zWTogbnVtYmVyLCBwb3NaOiBudW1iZXIsIGhlYWRpbmc6IG51bWJlcixcclxuICAgICAgdGFyZ2V0YWJsZTogYm9vbGVhbixcclxuICAgICAgaHA6IG51bWJlciwgbWF4SHA6IG51bWJlciwgbXA6IG51bWJlciwgbWF4TXA6IG51bWJlcikge1xyXG4gICAgdGhpcy5wb3NYID0gcG9zWDtcclxuICAgIHRoaXMucG9zWSA9IHBvc1k7XHJcbiAgICB0aGlzLnBvc1ogPSBwb3NaO1xyXG4gICAgdGhpcy5oZWFkaW5nID0gaGVhZGluZztcclxuICAgIHRoaXMudGFyZ2V0YWJsZSA9IHRhcmdldGFibGU7XHJcbiAgICB0aGlzLmhwID0gaHA7XHJcbiAgICB0aGlzLm1heEhwID0gbWF4SHA7XHJcbiAgICB0aGlzLm1wID0gbXA7XHJcbiAgICB0aGlzLm1heE1wID0gbWF4TXA7XHJcbiAgfVxyXG5cclxuICBwYXJ0aWFsQ2xvbmUocHJvcHM6IFBhcnRpYWw8Q29tYmF0YW50U3RhdGU+KTogQ29tYmF0YW50U3RhdGUge1xyXG4gICAgcmV0dXJuIG5ldyBDb21iYXRhbnRTdGF0ZShcclxuICAgICAgICBwcm9wcy5wb3NYID8/IHRoaXMucG9zWCxcclxuICAgICAgICBwcm9wcy5wb3NZID8/IHRoaXMucG9zWSxcclxuICAgICAgICBwcm9wcy5wb3NaID8/IHRoaXMucG9zWixcclxuICAgICAgICBwcm9wcy5oZWFkaW5nID8/IHRoaXMuaGVhZGluZyxcclxuICAgICAgICBwcm9wcy50YXJnZXRhYmxlID8/IHRoaXMudGFyZ2V0YWJsZSxcclxuICAgICAgICBwcm9wcy5ocCA/PyB0aGlzLmhwLFxyXG4gICAgICAgIHByb3BzLm1heEhwID8/IHRoaXMubWF4SHAsXHJcbiAgICAgICAgcHJvcHMubXAgPz8gdGhpcy5tcCxcclxuICAgICAgICBwcm9wcy5tYXhNcCA/PyB0aGlzLm1heE1wKTtcclxuICB9XHJcblxyXG4gIHRvUGx1Z2luU3RhdGUoKTogUGx1Z2luU3RhdGUge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgUG9zWDogdGhpcy5wb3NYLFxyXG4gICAgICBQb3NZOiB0aGlzLnBvc1ksXHJcbiAgICAgIFBvc1o6IHRoaXMucG9zWixcclxuICAgICAgSGVhZGluZzogdGhpcy5oZWFkaW5nLFxyXG4gICAgICBDdXJyZW50SFA6IHRoaXMuaHAsXHJcbiAgICAgIE1heEhQOiB0aGlzLm1heEhwLFxyXG4gICAgICBDdXJyZW50TVA6IHRoaXMubXAsXHJcbiAgICAgIE1heE1QOiB0aGlzLm1heE1wLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIiwiLy8gQXV0by1nZW5lcmF0ZWQgZnJvbSBnZW5fcGV0X25hbWVzLnB5XHJcbi8vIERPIE5PVCBFRElUIFRISVMgRklMRSBESVJFQ1RMWVxyXG5cclxuaW1wb3J0IHsgTGFuZyB9IGZyb20gJy4vbGFuZ3VhZ2VzJztcclxuXHJcbnR5cGUgUGV0RGF0YSA9IHtcclxuICBbbmFtZSBpbiBMYW5nXTogcmVhZG9ubHkgc3RyaW5nW107XHJcbn07XHJcblxyXG5jb25zdCBkYXRhOiBQZXREYXRhID0ge1xyXG4gICdjbic6IFtcclxuICAgICfnu7/lrp3nn7Plhb0nLFxyXG4gICAgJ+m7hOWuneefs+WFvScsXHJcbiAgICAn5LyK5byX5Yip54m55LmL54G1JyxcclxuICAgICfms7DlnabkuYvngbUnLFxyXG4gICAgJ+i/pualvOe9l+S5i+eBtScsXHJcbiAgICAn5pyd5pel5bCP5LuZ5aWzJyxcclxuICAgICflpJXmnIjlsI/ku5nlpbMnLFxyXG4gICAgJ+i9puW8j+a1ruepuueCruWhlCcsXHJcbiAgICAn6LGh5byP5rWu56m654Ku5aGUJyxcclxuICAgICfkuprngbXnpZ7lt7Tlk4jlp4bnibknLFxyXG4gICAgJ+S6mueBteelnuS4jeatu+m4nycsXHJcbiAgICAn54K95aSp5L2/JyxcclxuICAgICfmnIjplb/lrp3nn7Plhb0nLFxyXG4gICAgJ+iLsembhOeahOaOoOW9sScsXHJcbiAgICAn5ZCO5byP6Ieq6LWw5Lq65YG2JyxcclxuICAgICfliIbouqsnLFxyXG4gIF0sXHJcbiAgJ2RlJzogW1xyXG4gICAgJ1NtYXJhZ2QtS2FyZnVua2VsJyxcclxuICAgICdUb3Bhcy1LYXJmdW5rZWwnLFxyXG4gICAgJ0lmcml0LUVnaScsXHJcbiAgICAnVGl0YW4tRWdpJyxcclxuICAgICdHYXJ1ZGEtRWdpJyxcclxuICAgICdFb3MnLFxyXG4gICAgJ1NlbGVuZScsXHJcbiAgICAnU2VsYnN0c2NodXNzLUd5cm9jb3B0ZXIgVFVSTScsXHJcbiAgICAnU2VsYnN0c2NodXNzLUd5cm9jb3B0ZXIgTMOEVUZFUicsXHJcbiAgICAnRGVtaS1CYWhhbXV0JyxcclxuICAgICdEZW1pLVBow7ZuaXgnLFxyXG4gICAgJ1NlcmFwaCcsXHJcbiAgICAnTW9uZHN0ZWluLUthcmZ1bmtlbCcsXHJcbiAgICAnU2NoYXR0ZW5zY2hlbWVuJyxcclxuICAgICdBdXRvbWF0b24gREFNRScsXHJcbiAgICAnR2Vkb3BwZWx0ZXMgSWNoJyxcclxuICBdLFxyXG4gICdlbic6IFtcclxuICAgICdFbWVyYWxkIENhcmJ1bmNsZScsXHJcbiAgICAnVG9wYXogQ2FyYnVuY2xlJyxcclxuICAgICdJZnJpdC1FZ2knLFxyXG4gICAgJ1RpdGFuLUVnaScsXHJcbiAgICAnR2FydWRhLUVnaScsXHJcbiAgICAnRW9zJyxcclxuICAgICdTZWxlbmUnLFxyXG4gICAgJ1Jvb2sgQXV0b3R1cnJldCcsXHJcbiAgICAnQmlzaG9wIEF1dG90dXJyZXQnLFxyXG4gICAgJ0RlbWktQmFoYW11dCcsXHJcbiAgICAnRGVtaS1QaG9lbml4JyxcclxuICAgICdTZXJhcGgnLFxyXG4gICAgJ01vb25zdG9uZSBDYXJidW5jbGUnLFxyXG4gICAgJ0VzdGVlbScsXHJcbiAgICAnQXV0b21hdG9uIFF1ZWVuJyxcclxuICAgICdCdW5zaGluJyxcclxuICBdLFxyXG4gICdmcic6IFtcclxuICAgICdDYXJidW5jbGUgw6ltZXJhdWRlJyxcclxuICAgICdDYXJidW5jbGUgdG9wYXplJyxcclxuICAgICdJZnJpdC1FZ2knLFxyXG4gICAgJ1RpdGFuLUVnaScsXHJcbiAgICAnR2FydWRhLUVnaScsXHJcbiAgICAnRW9zJyxcclxuICAgICdTZWxlbmUnLFxyXG4gICAgJ0F1dG8tdG91cmVsbGUgVG91cicsXHJcbiAgICAnQXV0by10b3VyZWxsZSBGb3UnLFxyXG4gICAgJ0RlbWktQmFoYW11dCcsXHJcbiAgICAnRGVtaS1QaMOpbml4JyxcclxuICAgICdTw6lyYXBoaW4nLFxyXG4gICAgJ0NhcmJ1bmNsZSBow6ljYXRvbGl0ZScsXHJcbiAgICAnRXN0aW1lJyxcclxuICAgICdBdXRvbWF0ZSBSZWluZScsXHJcbiAgICAnT21icmUnLFxyXG4gIF0sXHJcbiAgJ2phJzogW1xyXG4gICAgJ+OCq+ODvOODkOODs+OCr+ODq+ODu+OCqOODoeODqeODq+ODiScsXHJcbiAgICAn44Kr44O844OQ44Oz44Kv44Or44O744OI44OR44O844K6JyxcclxuICAgICfjgqTjg5Xjg6rjg7zjg4jjg7vjgqjjgq4nLFxyXG4gICAgJ+OCv+OCpOOCv+ODs+ODu+OCqOOCricsXHJcbiAgICAn44Ks44Or44O844OA44O744Ko44KuJyxcclxuICAgICfjg5XjgqfjgqLjg6rjg7zjg7vjgqjjgqrjgrknLFxyXG4gICAgJ+ODleOCp+OCouODquODvOODu+OCu+ODrOODjScsXHJcbiAgICAn44Kq44O844OI44K/44Os44OD44OI44O744Or44O844KvJyxcclxuICAgICfjgqrjg7zjg4jjgr/jg6zjg4Pjg4jjg7vjg5Pjgrfjg6fjg4Pjg5cnLFxyXG4gICAgJ+ODh+ODn+ODu+ODkOODj+ODoOODvOODiCcsXHJcbiAgICAn44OH44Of44O744OV44Kn44OL44OD44Kv44K5JyxcclxuICAgICfjgrvjg6njg5XjgqPjg6AnLFxyXG4gICAgJ+OCq+ODvOODkOODs+OCr+ODq+ODu+ODoOODvOODs+OCueODiOODvOODsycsXHJcbiAgICAn6Iux6ZuE44Gu5b2x6LqrJyxcclxuICAgICfjgqrjg7zjg4jjg57jg4jjg7Pjg7vjgq/jgqTjg7zjg7MnLFxyXG4gICAgJ+WIhui6qycsXHJcbiAgXSxcclxuICAna28nOiBbXHJcbiAgICAn7Lm067KZ7YG0IOyXkOuplOuehOuTnCcsXHJcbiAgICAn7Lm067KZ7YG0IO2GoO2MjOymiCcsXHJcbiAgICAn7J207ZSE66as7Yq4IOyXkOq4sCcsXHJcbiAgICAn7YOA7J207YOEIOyXkOq4sCcsXHJcbiAgICAn6rCA66Oo64ukIOyXkOq4sCcsXHJcbiAgICAn7JqU7KCVIOyXkOyYpOyKpCcsXHJcbiAgICAn7JqU7KCVIOyFgOugiOuEpCcsXHJcbiAgICAn7J6Q64+Z7Y+s7YORIOujqScsXHJcbiAgICAn7J6Q64+Z7Y+s7YORIOu5hOyIjScsXHJcbiAgICAn642w66+467CU7ZWY66y07Yq4JyxcclxuICAgICfrjbDrr7jtlLzri4nsiqQnLFxyXG4gICAgJ+yEuOudvO2VjCcsXHJcbiAgICAn7Lm067KZ7YG0IOusuOyKpO2GpCcsXHJcbiAgICAn7JiB7JuF7J2YIO2ZmOyYgScsXHJcbiAgICAn7J6Q64+Z7J247ZiVIO2AuCcsXHJcbiAgICAn67aE7IugJyxcclxuICBdLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGF0YTtcclxuIiwiaW1wb3J0IHsgSm9iIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdHlwZXMvam9iJztcclxuaW1wb3J0IEVtdWxhdG9yQ29tbW9uIGZyb20gJy4uLy4uL0VtdWxhdG9yQ29tbW9uJztcclxuaW1wb3J0IExvZ1JlcG9zaXRvcnkgZnJvbSAnLi9Mb2dSZXBvc2l0b3J5JztcclxuXHJcbmNvbnN0IGZpZWxkcyA9IHtcclxuICBldmVudDogMCxcclxuICB0aW1lc3RhbXA6IDEsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogR2VuZXJpYyBjbGFzcyB0byB0cmFjayBhbiBGRlhJViBsb2cgbGluZVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGluZUV2ZW50IHtcclxuICBwdWJsaWMgb2Zmc2V0ID0gMDtcclxuICBwdWJsaWMgY29udmVydGVkTGluZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBpbnZhbGlkID0gZmFsc2U7XHJcbiAgcHVibGljIGluZGV4ID0gMDtcclxuICBwdWJsaWMgcmVhZG9ubHkgZGVjRXZlbnQ6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaGV4RXZlbnQ6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgdGltZXN0YW1wOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGNoZWNrc3VtOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHByb3BlckNhc2VDb252ZXJ0ZWRMaW5lPzogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZXBvOiBMb2dSZXBvc2l0b3J5LCBwdWJsaWMgbmV0d29ya0xpbmU6IHN0cmluZywgcGFydHM6IHN0cmluZ1tdKSB7XHJcbiAgICB0aGlzLmRlY0V2ZW50ID0gcGFyc2VJbnQocGFydHNbZmllbGRzLmV2ZW50XSA/PyAnMCcpO1xyXG4gICAgdGhpcy5oZXhFdmVudCA9IEVtdWxhdG9yQ29tbW9uLnplcm9QYWQodGhpcy5kZWNFdmVudC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSk7XHJcbiAgICB0aGlzLnRpbWVzdGFtcCA9IG5ldyBEYXRlKHBhcnRzW2ZpZWxkcy50aW1lc3RhbXBdID8/ICcwJykuZ2V0VGltZSgpO1xyXG4gICAgdGhpcy5jaGVja3N1bSA9IHBhcnRzLnNsaWNlKC0xKVswXSA/PyAnJztcclxuICAgIHJlcG8udXBkYXRlVGltZXN0YW1wKHRoaXMudGltZXN0YW1wKTtcclxuICAgIHRoaXMuY29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgKyAocGFydHMuam9pbignOicpKS5yZXBsYWNlKCd8JywgJzonKTtcclxuICB9XHJcblxyXG4gIHByZWZpeCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICdbJyArIEVtdWxhdG9yQ29tbW9uLnRpbWVUb1RpbWVTdHJpbmcodGhpcy50aW1lc3RhbXAsIHRydWUpICsgJ10gJyArIHRoaXMuaGV4RXZlbnQgKyAnOic7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNEYW1hZ2VIYWxsb3dlZChkYW1hZ2U6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChwYXJzZUludChkYW1hZ2UsIDE2KSAmIHBhcnNlSW50KCcxMDAwJywgMTYpKSA+IDA7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNEYW1hZ2VCaWcoZGFtYWdlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAocGFyc2VJbnQoZGFtYWdlLCAxNikgJiBwYXJzZUludCgnNDAwMCcsIDE2KSkgPiAwO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNhbGN1bGF0ZURhbWFnZShkYW1hZ2U6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICBpZiAoTGluZUV2ZW50LmlzRGFtYWdlSGFsbG93ZWQoZGFtYWdlKSlcclxuICAgICAgcmV0dXJuIDA7XHJcblxyXG4gICAgZGFtYWdlID0gRW11bGF0b3JDb21tb24uemVyb1BhZChkYW1hZ2UsIDgpO1xyXG4gICAgY29uc3QgcGFydHMgPSBbXHJcbiAgICAgIGRhbWFnZS5zdWJzdHIoMCwgMiksXHJcbiAgICAgIGRhbWFnZS5zdWJzdHIoMiwgMiksXHJcbiAgICAgIGRhbWFnZS5zdWJzdHIoNCwgMiksXHJcbiAgICAgIGRhbWFnZS5zdWJzdHIoNiwgMiksXHJcbiAgICBdIGFzIGNvbnN0O1xyXG5cclxuICAgIGlmICghTGluZUV2ZW50LmlzRGFtYWdlQmlnKGRhbWFnZSkpXHJcbiAgICAgIHJldHVybiBwYXJzZUludChwYXJ0cy5zbGljZSgwLCAyKS5yZXZlcnNlKCkuam9pbignJyksIDE2KTtcclxuXHJcbiAgICByZXR1cm4gcGFyc2VJbnQoXHJcbiAgICAgICAgKHBhcnRzWzNdICsgcGFydHNbMF0pICtcclxuICAgICAgKHBhcnNlSW50KHBhcnRzWzFdLCAxNikgLSBwYXJzZUludChwYXJ0c1szXSwgMTYpXHJcbiAgICAgICkudG9TdHJpbmcoMTYpLCAxNik7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBUeXBlIGd1YXJkcyBmb3IgdGhlc2UgaW50ZXJmYWNlcyByZXF1aXJlIHRoZWlyIG93biBkZXNjcmlwdG9yIHByb3BlcnR5XHJcbi8vIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCBldmVyeSBsaW5lIGV2ZW50IHdpdGggYW4gaWQvbmFtZVxyXG4vLyB0byB1cGRhdGUgY29tYmF0YW50IHN0YXRlLCBmb3IgZXhhbXBsZVxyXG5leHBvcnQgaW50ZXJmYWNlIExpbmVFdmVudFNvdXJjZSBleHRlbmRzIExpbmVFdmVudCB7XHJcbiAgcmVhZG9ubHkgaXNTb3VyY2U6IHRydWU7XHJcbiAgcmVhZG9ubHkgaWQ6IHN0cmluZztcclxuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcbiAgcmVhZG9ubHkgeD86IG51bWJlcjtcclxuICByZWFkb25seSB5PzogbnVtYmVyO1xyXG4gIHJlYWRvbmx5IHo/OiBudW1iZXI7XHJcbiAgcmVhZG9ubHkgaGVhZGluZz86IG51bWJlcjtcclxuICByZWFkb25seSB0YXJnZXRhYmxlPzogYm9vbGVhbjtcclxuICByZWFkb25seSBocD86IG51bWJlcjtcclxuICByZWFkb25seSBtYXhIcD86IG51bWJlcjtcclxuICByZWFkb25seSBtcD86IG51bWJlcjtcclxuICByZWFkb25seSBtYXhNcD86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGlzTGluZUV2ZW50U291cmNlID0gKGxpbmU6IExpbmVFdmVudCk6IGxpbmUgaXMgTGluZUV2ZW50U291cmNlID0+IHtcclxuICByZXR1cm4gJ2lzU291cmNlJyBpbiBsaW5lO1xyXG59O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMaW5lRXZlbnRUYXJnZXQgZXh0ZW5kcyBMaW5lRXZlbnQge1xyXG4gIHJlYWRvbmx5IGlzVGFyZ2V0OiB0cnVlO1xyXG4gIHJlYWRvbmx5IHRhcmdldElkOiBzdHJpbmc7XHJcbiAgcmVhZG9ubHkgdGFyZ2V0TmFtZTogc3RyaW5nO1xyXG4gIHJlYWRvbmx5IHRhcmdldFg/OiBudW1iZXI7XHJcbiAgcmVhZG9ubHkgdGFyZ2V0WT86IG51bWJlcjtcclxuICByZWFkb25seSB0YXJnZXRaPzogbnVtYmVyO1xyXG4gIHJlYWRvbmx5IHRhcmdldEhlYWRpbmc/OiBudW1iZXI7XHJcbiAgcmVhZG9ubHkgdGFyZ2V0SHA/OiBudW1iZXI7XHJcbiAgcmVhZG9ubHkgdGFyZ2V0TWF4SHA/OiBudW1iZXI7XHJcbiAgcmVhZG9ubHkgdGFyZ2V0TXA/OiBudW1iZXI7XHJcbiAgcmVhZG9ubHkgdGFyZ2V0TWF4TXA/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpc0xpbmVFdmVudFRhcmdldCA9IChsaW5lOiBMaW5lRXZlbnQpOiBsaW5lIGlzIExpbmVFdmVudFRhcmdldCA9PiB7XHJcbiAgcmV0dXJuICdpc1RhcmdldCcgaW4gbGluZTtcclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGluZUV2ZW50Sm9iTGV2ZWwgZXh0ZW5kcyBMaW5lRXZlbnQge1xyXG4gIHJlYWRvbmx5IGlzSm9iTGV2ZWw6IHRydWU7XHJcbiAgcmVhZG9ubHkgam9iOiBKb2I7XHJcbiAgcmVhZG9ubHkgam9iSWQ6IG51bWJlcjtcclxuICByZWFkb25seSBsZXZlbDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaXNMaW5lRXZlbnRKb2JMZXZlbCA9IChsaW5lOiBMaW5lRXZlbnQpOiBsaW5lIGlzIExpbmVFdmVudEpvYkxldmVsID0+IHtcclxuICByZXR1cm4gJ2lzSm9iTGV2ZWwnIGluIGxpbmU7XHJcbn07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExpbmVFdmVudEFiaWxpdHkgZXh0ZW5kcyBMaW5lRXZlbnQge1xyXG4gIHJlYWRvbmx5IGlzQWJpbGl0eTogdHJ1ZTtcclxuICByZWFkb25seSBhYmlsaXR5SWQ6IG51bWJlcjtcclxuICByZWFkb25seSBhYmlsaXR5TmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaXNMaW5lRXZlbnRBYmlsaXR5ID0gKGxpbmU6IExpbmVFdmVudCk6IGxpbmUgaXMgTGluZUV2ZW50QWJpbGl0eSA9PiB7XHJcbiAgcmV0dXJuICdpc0FiaWxpdHknIGluIGxpbmU7XHJcbn07XHJcbiIsImltcG9ydCBDb21iYXRhbnQgZnJvbSAnLi9Db21iYXRhbnQnO1xyXG5pbXBvcnQgQ29tYmF0YW50Sm9iU2VhcmNoIGZyb20gJy4vQ29tYmF0YW50Sm9iU2VhcmNoJztcclxuaW1wb3J0IENvbWJhdGFudFN0YXRlIGZyb20gJy4vQ29tYmF0YW50U3RhdGUnO1xyXG5pbXBvcnQgUGV0TmFtZXNCeUxhbmcgZnJvbSAnLi4vLi4vLi4vLi4vcmVzb3VyY2VzL3BldF9uYW1lcyc7XHJcbmltcG9ydCBMaW5lRXZlbnQsIHsgaXNMaW5lRXZlbnRKb2JMZXZlbCwgaXNMaW5lRXZlbnRBYmlsaXR5LCBpc0xpbmVFdmVudFNvdXJjZSwgaXNMaW5lRXZlbnRUYXJnZXQsIExpbmVFdmVudFNvdXJjZSwgTGluZUV2ZW50VGFyZ2V0IH0gZnJvbSAnLi9uZXR3b3JrX2xvZ19jb252ZXJ0ZXIvTGluZUV2ZW50JztcclxuaW1wb3J0IHsgTGFuZyB9IGZyb20gJy4uLy4uLy4uLy4uL3Jlc291cmNlcy9sYW5ndWFnZXMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tYmF0YW50VHJhY2tlciB7XHJcbiAgbGFuZ3VhZ2U6IExhbmc7XHJcbiAgZmlyc3RUaW1lc3RhbXA6IG51bWJlcjtcclxuICBsYXN0VGltZXN0YW1wOiBudW1iZXI7XHJcbiAgY29tYmF0YW50czogeyBbaWQ6IHN0cmluZ106IENvbWJhdGFudCB9ID0ge307XHJcbiAgcGFydHlNZW1iZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG4gIGVuZW1pZXM6IHN0cmluZ1tdID0gW107XHJcbiAgb3RoZXJzOiBzdHJpbmdbXSA9IFtdO1xyXG4gIHBldHM6IHN0cmluZ1tdID0gW107XHJcbiAgbWFpbkNvbWJhdGFudElEPzogc3RyaW5nO1xyXG4gIGluaXRpYWxTdGF0ZXM6IHsgW2lkOiBzdHJpbmddOiBQYXJ0aWFsPENvbWJhdGFudFN0YXRlPiB9ID0ge307XHJcbiAgY29uc3RydWN0b3IobG9nTGluZXM6IExpbmVFdmVudFtdLCBsYW5ndWFnZTogTGFuZykge1xyXG4gICAgdGhpcy5sYW5ndWFnZSA9IGxhbmd1YWdlO1xyXG4gICAgdGhpcy5maXJzdFRpbWVzdGFtcCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xyXG4gICAgdGhpcy5sYXN0VGltZXN0YW1wID0gMDtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZShsb2dMaW5lcyk7XHJcbiAgICAvLyBDbGVhciBpbml0aWFsU3RhdGVzIGFmdGVyIHdlIGluaXRpYWxpemUsIHdlIGRvbid0IG5lZWQgaXQgYW55bW9yZVxyXG4gICAgdGhpcy5pbml0aWFsU3RhdGVzID0ge307XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplKGxvZ0xpbmVzOiBMaW5lRXZlbnRbXSk6IHZvaWQge1xyXG4gICAgLy8gRmlyc3QgcGFzczogR2V0IGxpc3Qgb2YgY29tYmF0YW50cywgZmlndXJlIG91dCB3aGVyZSB0aGV5XHJcbiAgICAvLyBzdGFydCBhdCBpZiBwb3NzaWJsZVxyXG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxvZ0xpbmVzKSB7XHJcbiAgICAgIHRoaXMuZmlyc3RUaW1lc3RhbXAgPSBNYXRoLm1pbih0aGlzLmZpcnN0VGltZXN0YW1wLCBsaW5lLnRpbWVzdGFtcCk7XHJcbiAgICAgIHRoaXMubGFzdFRpbWVzdGFtcCA9IE1hdGgubWF4KHRoaXMubGFzdFRpbWVzdGFtcCwgbGluZS50aW1lc3RhbXApO1xyXG5cclxuICAgICAgaWYgKGlzTGluZUV2ZW50U291cmNlKGxpbmUpKVxyXG4gICAgICAgIHRoaXMuYWRkQ29tYmF0YW50RnJvbUxpbmUobGluZSk7XHJcblxyXG4gICAgICBpZiAoaXNMaW5lRXZlbnRUYXJnZXQobGluZSkpXHJcbiAgICAgICAgdGhpcy5hZGRDb21iYXRhbnRGcm9tVGFyZ2V0TGluZShsaW5lKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBCZXR3ZWVuIHBhc3NlczogQ3JlYXRlIG91ciBpbml0aWFsIGNvbWJhdGFudCBzdGF0ZXNcclxuICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5pbml0aWFsU3RhdGVzKSB7XHJcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5pbml0aWFsU3RhdGVzW2lkXSA/PyB7fTtcclxuICAgICAgdGhpcy5jb21iYXRhbnRzW2lkXT8ucHVzaFN0YXRlKHRoaXMuZmlyc3RUaW1lc3RhbXAsIG5ldyBDb21iYXRhbnRTdGF0ZShcclxuICAgICAgICAgIE51bWJlcihzdGF0ZS5wb3NYKSxcclxuICAgICAgICAgIE51bWJlcihzdGF0ZS5wb3NZKSxcclxuICAgICAgICAgIE51bWJlcihzdGF0ZS5wb3NaKSxcclxuICAgICAgICAgIE51bWJlcihzdGF0ZS5oZWFkaW5nKSxcclxuICAgICAgICAgIHN0YXRlLnRhcmdldGFibGUgPz8gZmFsc2UsXHJcbiAgICAgICAgICBOdW1iZXIoc3RhdGUuaHApLFxyXG4gICAgICAgICAgTnVtYmVyKHN0YXRlLm1heEhwKSxcclxuICAgICAgICAgIE51bWJlcihzdGF0ZS5tcCksXHJcbiAgICAgICAgICBOdW1iZXIoc3RhdGUubWF4TXApLFxyXG4gICAgICApKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZWNvbmQgcGFzczogQW5hbHl6ZSBjb21iYXRhbnQgaW5mb3JtYXRpb24gZm9yIHRyYWNraW5nXHJcbiAgICBjb25zdCBldmVudFRyYWNrZXI6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gPSB7fTtcclxuICAgIGZvciAoY29uc3QgbGluZSBvZiBsb2dMaW5lcykge1xyXG4gICAgICBpZiAoaXNMaW5lRXZlbnRTb3VyY2UobGluZSkpIHtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZXh0cmFjdFN0YXRlRnJvbUxpbmUobGluZSk7XHJcbiAgICAgICAgaWYgKHN0YXRlKSB7XHJcbiAgICAgICAgICBldmVudFRyYWNrZXJbbGluZS5pZF0gPSBldmVudFRyYWNrZXJbbGluZS5pZF0gPz8gMDtcclxuICAgICAgICAgICsrZXZlbnRUcmFja2VyW2xpbmUuaWRdO1xyXG4gICAgICAgICAgdGhpcy5jb21iYXRhbnRzW2xpbmUuaWRdPy5wdXNoUGFydGlhbFN0YXRlKGxpbmUudGltZXN0YW1wLCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChpc0xpbmVFdmVudFRhcmdldChsaW5lKSkge1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5leHRyYWN0U3RhdGVGcm9tVGFyZ2V0TGluZShsaW5lKTtcclxuICAgICAgICBpZiAoc3RhdGUpIHtcclxuICAgICAgICAgIGV2ZW50VHJhY2tlcltsaW5lLnRhcmdldElkXSA9IGV2ZW50VHJhY2tlcltsaW5lLnRhcmdldElkXSA/PyAwO1xyXG4gICAgICAgICAgKytldmVudFRyYWNrZXJbbGluZS50YXJnZXRJZF07XHJcbiAgICAgICAgICB0aGlzLmNvbWJhdGFudHNbbGluZS50YXJnZXRJZF0/LnB1c2hQYXJ0aWFsU3RhdGUobGluZS50aW1lc3RhbXAsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBGaWd1cmUgb3V0IHBhcnR5L2VuZW15L290aGVyIHN0YXR1c1xyXG4gICAgY29uc3QgcGV0TmFtZXMgPSBQZXROYW1lc0J5TGFuZ1t0aGlzLmxhbmd1YWdlXTtcclxuICAgIHRoaXMub3RoZXJzID0gdGhpcy5vdGhlcnMuZmlsdGVyKChJRCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5jb21iYXRhbnRzW0lEXT8uam9iICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICB0aGlzLmNvbWJhdGFudHNbSURdPy5qb2IgIT09ICdOT05FJyAmJlxyXG4gICAgICAgIElELnN0YXJ0c1dpdGgoJzEnKSkge1xyXG4gICAgICAgIHRoaXMucGFydHlNZW1iZXJzLnB1c2goSUQpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfSBlbHNlIGlmIChwZXROYW1lcy5pbmNsdWRlcyh0aGlzLmNvbWJhdGFudHNbSURdPy5uYW1lID8/ICcnKSkge1xyXG4gICAgICAgIHRoaXMucGV0cy5wdXNoKElEKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH0gZWxzZSBpZiAoKGV2ZW50VHJhY2tlcltJRF0gPz8gMCkgPiAwKSB7XHJcbiAgICAgICAgdGhpcy5lbmVtaWVzLnB1c2goSUQpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIE1haW4gY29tYmF0YW50IGlzIHRoZSBvbmUgdGhhdCB0b29rIHRoZSBtb3N0IGFjdGlvbnNcclxuICAgIHRoaXMubWFpbkNvbWJhdGFudElEID0gdGhpcy5lbmVtaWVzLnNvcnQoKGwsIHIpID0+IHtcclxuICAgICAgcmV0dXJuIChldmVudFRyYWNrZXJbcl0gPz8gMCkgLSAoZXZlbnRUcmFja2VyW2xdID8/IDApO1xyXG4gICAgfSlbMF07XHJcbiAgfVxyXG5cclxuICBhZGRDb21iYXRhbnRGcm9tTGluZShsaW5lOiBMaW5lRXZlbnRTb3VyY2UpOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvbWJhdGFudCA9IHRoaXMuaW5pdENvbWJhdGFudChsaW5lLmlkLCBsaW5lLm5hbWUpO1xyXG4gICAgY29uc3QgaW5pdFN0YXRlID0gdGhpcy5pbml0aWFsU3RhdGVzW2xpbmUuaWRdID8/IHt9O1xyXG5cclxuICAgIGNvbnN0IGV4dHJhY3RlZFN0YXRlID0gdGhpcy5leHRyYWN0U3RhdGVGcm9tTGluZShsaW5lKSA/PyB7fTtcclxuXHJcbiAgICBpbml0U3RhdGUucG9zWCA9IGluaXRTdGF0ZS5wb3NYID8/IGV4dHJhY3RlZFN0YXRlLnBvc1g7XHJcbiAgICBpbml0U3RhdGUucG9zWSA9IGluaXRTdGF0ZS5wb3NZID8/IGV4dHJhY3RlZFN0YXRlLnBvc1k7XHJcbiAgICBpbml0U3RhdGUucG9zWiA9IGluaXRTdGF0ZS5wb3NaID8/IGV4dHJhY3RlZFN0YXRlLnBvc1o7XHJcbiAgICBpbml0U3RhdGUuaGVhZGluZyA9IGluaXRTdGF0ZS5oZWFkaW5nID8/IGV4dHJhY3RlZFN0YXRlLmhlYWRpbmc7XHJcbiAgICBpbml0U3RhdGUudGFyZ2V0YWJsZSA9IGluaXRTdGF0ZS50YXJnZXRhYmxlID8/IGV4dHJhY3RlZFN0YXRlLnRhcmdldGFibGU7XHJcbiAgICBpbml0U3RhdGUuaHAgPSBpbml0U3RhdGUuaHAgPz8gZXh0cmFjdGVkU3RhdGUuaHA7XHJcbiAgICBpbml0U3RhdGUubWF4SHAgPSBpbml0U3RhdGUubWF4SHAgPz8gZXh0cmFjdGVkU3RhdGUubWF4SHA7XHJcbiAgICBpbml0U3RhdGUubXAgPSBpbml0U3RhdGUubXAgPz8gZXh0cmFjdGVkU3RhdGUubXA7XHJcbiAgICBpbml0U3RhdGUubWF4TXAgPSBpbml0U3RhdGUubWF4TXAgPz8gZXh0cmFjdGVkU3RhdGUubWF4TXA7XHJcblxyXG4gICAgaWYgKGlzTGluZUV2ZW50Sm9iTGV2ZWwobGluZSkpIHtcclxuICAgICAgY29tYmF0YW50LmpvYiA9IHRoaXMuY29tYmF0YW50c1tsaW5lLmlkXT8uam9iID8/IGxpbmUuam9iO1xyXG4gICAgICBjb21iYXRhbnQubGV2ZWwgPSB0aGlzLmNvbWJhdGFudHNbbGluZS5pZF0/LmxldmVsID8/IGxpbmUubGV2ZWw7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzTGluZUV2ZW50QWJpbGl0eShsaW5lKSkge1xyXG4gICAgICBpZiAoIWNvbWJhdGFudC5qb2IgJiYgIWxpbmUuaWQuc3RhcnRzV2l0aCgnNCcpICYmIGxpbmUuYWJpbGl0eUlkICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgY29tYmF0YW50LmpvYiA9IENvbWJhdGFudEpvYlNlYXJjaC5nZXRKb2IobGluZS5hYmlsaXR5SWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkQ29tYmF0YW50RnJvbVRhcmdldExpbmUobGluZTogTGluZUV2ZW50VGFyZ2V0KTogdm9pZCB7XHJcbiAgICB0aGlzLmluaXRDb21iYXRhbnQobGluZS50YXJnZXRJZCwgbGluZS50YXJnZXROYW1lKTtcclxuICAgIGNvbnN0IGluaXRTdGF0ZSA9IHRoaXMuaW5pdGlhbFN0YXRlc1tsaW5lLnRhcmdldElkXSA/PyB7fTtcclxuXHJcbiAgICBjb25zdCBleHRyYWN0ZWRTdGF0ZSA9IHRoaXMuZXh0cmFjdFN0YXRlRnJvbVRhcmdldExpbmUobGluZSkgPz8ge307XHJcblxyXG4gICAgaW5pdFN0YXRlLnBvc1ggPSBpbml0U3RhdGUucG9zWCA/PyBleHRyYWN0ZWRTdGF0ZS5wb3NYO1xyXG4gICAgaW5pdFN0YXRlLnBvc1kgPSBpbml0U3RhdGUucG9zWSA/PyBleHRyYWN0ZWRTdGF0ZS5wb3NZO1xyXG4gICAgaW5pdFN0YXRlLnBvc1ogPSBpbml0U3RhdGUucG9zWiA/PyBleHRyYWN0ZWRTdGF0ZS5wb3NaO1xyXG4gICAgaW5pdFN0YXRlLmhlYWRpbmcgPSBpbml0U3RhdGUuaGVhZGluZyA/PyBleHRyYWN0ZWRTdGF0ZS5oZWFkaW5nO1xyXG4gICAgaW5pdFN0YXRlLmhwID0gaW5pdFN0YXRlLmhwID8/IGV4dHJhY3RlZFN0YXRlLmhwO1xyXG4gICAgaW5pdFN0YXRlLm1heEhwID0gaW5pdFN0YXRlLm1heEhwID8/IGV4dHJhY3RlZFN0YXRlLm1heEhwO1xyXG4gICAgaW5pdFN0YXRlLm1wID0gaW5pdFN0YXRlLm1wID8/IGV4dHJhY3RlZFN0YXRlLm1wO1xyXG4gICAgaW5pdFN0YXRlLm1heE1wID0gaW5pdFN0YXRlLm1heE1wID8/IGV4dHJhY3RlZFN0YXRlLm1heE1wO1xyXG4gIH1cclxuXHJcbiAgZXh0cmFjdFN0YXRlRnJvbUxpbmUobGluZTogTGluZUV2ZW50U291cmNlKTogUGFydGlhbDxDb21iYXRhbnRTdGF0ZT4ge1xyXG4gICAgY29uc3Qgc3RhdGU6IFBhcnRpYWw8Q29tYmF0YW50U3RhdGU+ID0ge307XHJcblxyXG4gICAgaWYgKGxpbmUueCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICBzdGF0ZS5wb3NYID0gbGluZS54O1xyXG4gICAgaWYgKGxpbmUueSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICBzdGF0ZS5wb3NZID0gbGluZS55O1xyXG4gICAgaWYgKGxpbmUueiAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICBzdGF0ZS5wb3NaID0gbGluZS56O1xyXG4gICAgaWYgKGxpbmUuaGVhZGluZyAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICBzdGF0ZS5oZWFkaW5nID0gbGluZS5oZWFkaW5nO1xyXG4gICAgaWYgKGxpbmUudGFyZ2V0YWJsZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICBzdGF0ZS50YXJnZXRhYmxlID0gbGluZS50YXJnZXRhYmxlO1xyXG4gICAgaWYgKGxpbmUuaHAgIT09IHVuZGVmaW5lZClcclxuICAgICAgc3RhdGUuaHAgPSBsaW5lLmhwO1xyXG4gICAgaWYgKGxpbmUubWF4SHAgIT09IHVuZGVmaW5lZClcclxuICAgICAgc3RhdGUubWF4SHAgPSBsaW5lLm1heEhwO1xyXG4gICAgaWYgKGxpbmUubXAgIT09IHVuZGVmaW5lZClcclxuICAgICAgc3RhdGUubXAgPSBsaW5lLm1wO1xyXG4gICAgaWYgKGxpbmUubWF4TXAgIT09IHVuZGVmaW5lZClcclxuICAgICAgc3RhdGUubWF4TXAgPSBsaW5lLm1heE1wO1xyXG5cclxuICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcblxyXG4gIGV4dHJhY3RTdGF0ZUZyb21UYXJnZXRMaW5lKGxpbmU6IExpbmVFdmVudFRhcmdldCk6IFBhcnRpYWw8Q29tYmF0YW50U3RhdGU+IHtcclxuICAgIGNvbnN0IHN0YXRlOiBQYXJ0aWFsPENvbWJhdGFudFN0YXRlPiA9IHt9O1xyXG5cclxuICAgIGlmIChsaW5lLnRhcmdldFggIT09IHVuZGVmaW5lZClcclxuICAgICAgc3RhdGUucG9zWCA9IGxpbmUudGFyZ2V0WDtcclxuICAgIGlmIChsaW5lLnRhcmdldFkgIT09IHVuZGVmaW5lZClcclxuICAgICAgc3RhdGUucG9zWSA9IGxpbmUudGFyZ2V0WTtcclxuICAgIGlmIChsaW5lLnRhcmdldFogIT09IHVuZGVmaW5lZClcclxuICAgICAgc3RhdGUucG9zWiA9IGxpbmUudGFyZ2V0WjtcclxuICAgIGlmIChsaW5lLnRhcmdldEhlYWRpbmcgIT09IHVuZGVmaW5lZClcclxuICAgICAgc3RhdGUuaGVhZGluZyA9IGxpbmUudGFyZ2V0SGVhZGluZztcclxuICAgIGlmIChsaW5lLnRhcmdldEhwICE9PSB1bmRlZmluZWQpXHJcbiAgICAgIHN0YXRlLmhwID0gbGluZS50YXJnZXRIcDtcclxuICAgIGlmIChsaW5lLnRhcmdldE1heEhwICE9PSB1bmRlZmluZWQpXHJcbiAgICAgIHN0YXRlLm1heEhwID0gbGluZS50YXJnZXRNYXhIcDtcclxuICAgIGlmIChsaW5lLnRhcmdldE1wICE9PSB1bmRlZmluZWQpXHJcbiAgICAgIHN0YXRlLm1wID0gbGluZS50YXJnZXRNcDtcclxuICAgIGlmIChsaW5lLnRhcmdldE1heE1wICE9PSB1bmRlZmluZWQpXHJcbiAgICAgIHN0YXRlLm1heE1wID0gbGluZS50YXJnZXRNYXhNcDtcclxuXHJcbiAgICByZXR1cm4gc3RhdGU7XHJcbiAgfVxyXG5cclxuICBpbml0Q29tYmF0YW50KGlkOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IENvbWJhdGFudCB7XHJcbiAgICBsZXQgY29tYmF0YW50ID0gdGhpcy5jb21iYXRhbnRzW2lkXTtcclxuICAgIGlmIChjb21iYXRhbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb21iYXRhbnQgPSB0aGlzLmNvbWJhdGFudHNbaWRdID0gbmV3IENvbWJhdGFudChpZCwgbmFtZSk7XHJcbiAgICAgIHRoaXMub3RoZXJzLnB1c2goaWQpO1xyXG4gICAgICB0aGlzLmluaXRpYWxTdGF0ZXNbaWRdID0ge1xyXG4gICAgICAgIHRhcmdldGFibGU6IHRydWUsXHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2UgaWYgKGNvbWJhdGFudC5uYW1lID09PSAnJykge1xyXG4gICAgICBjb21iYXRhbnQuc2V0TmFtZShuYW1lKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21iYXRhbnQ7XHJcbiAgfVxyXG5cclxuICBnZXRNYWluQ29tYmF0YW50TmFtZSgpOiBzdHJpbmcge1xyXG4gICAgaWYgKHRoaXMubWFpbkNvbWJhdGFudElEKVxyXG4gICAgICByZXR1cm4gdGhpcy5jb21iYXRhbnRzW3RoaXMubWFpbkNvbWJhdGFudElEXT8ubmFtZSA/PyAnVW5rbm93bic7XHJcbiAgICByZXR1cm4gJ1Vua25vd24nO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgdHlwZSBDb21iYXRhbnQgPSB7XHJcbiAgbmFtZT86IHN0cmluZztcclxuICBqb2I/OiBzdHJpbmc7XHJcbiAgc3Bhd246IG51bWJlcjtcclxuICBkZXNwYXduOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvZ1JlcG9zaXRvcnkge1xyXG4gIENvbWJhdGFudHM6IHsgW2lkOiBzdHJpbmddOiBDb21iYXRhbnQgfSA9IHt9O1xyXG4gIGZpcnN0VGltZXN0YW1wID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XHJcblxyXG4gIHVwZGF0ZVRpbWVzdGFtcCh0aW1lc3RhbXA6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5maXJzdFRpbWVzdGFtcCA9IE1hdGgubWluKHRoaXMuZmlyc3RUaW1lc3RhbXAsIHRpbWVzdGFtcCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVDb21iYXRhbnQoaWQ6IHN0cmluZywgYzogQ29tYmF0YW50KTogdm9pZCB7XHJcbiAgICBpZCA9IGlkLnRvVXBwZXJDYXNlKCk7XHJcbiAgICBpZiAoaWQgJiYgaWQubGVuZ3RoKSB7XHJcbiAgICAgIGxldCBjb21iYXRhbnQgPSB0aGlzLkNvbWJhdGFudHNbaWRdO1xyXG4gICAgICBpZiAoY29tYmF0YW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjb21iYXRhbnQgPSB7XHJcbiAgICAgICAgICBuYW1lOiBjLm5hbWUsXHJcbiAgICAgICAgICBqb2I6IGMuam9iLFxyXG4gICAgICAgICAgc3Bhd246IGMuc3Bhd24sXHJcbiAgICAgICAgICBkZXNwYXduOiBjLmRlc3Bhd24sXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLkNvbWJhdGFudHNbaWRdID0gY29tYmF0YW50O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbWJhdGFudC5uYW1lID0gYy5uYW1lIHx8IGNvbWJhdGFudC5uYW1lO1xyXG4gICAgICAgIGNvbWJhdGFudC5qb2IgPSBjLmpvYiB8fCBjb21iYXRhbnQuam9iO1xyXG4gICAgICAgIGNvbWJhdGFudC5zcGF3biA9IE1hdGgubWluKGNvbWJhdGFudC5zcGF3biwgYy5zcGF3bik7XHJcbiAgICAgICAgY29tYmF0YW50LmRlc3Bhd24gPSBNYXRoLm1heChjb21iYXRhbnQuZGVzcGF3biwgYy5kZXNwYXduKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzb2x2ZU5hbWUoXHJcbiAgICAgIGlkOiBzdHJpbmcsXHJcbiAgICAgIG5hbWU6IHN0cmluZyxcclxuICAgICAgZmFsbGJhY2tJZDogc3RyaW5nIHwgbnVsbCA9IG51bGwsXHJcbiAgICAgIGZhbGxiYWNrTmFtZTogc3RyaW5nIHwgbnVsbCA9IG51bGwpOiBzdHJpbmcge1xyXG4gICAgbGV0IHJldCA9IG5hbWU7XHJcblxyXG4gICAgaWYgKGZhbGxiYWNrSWQgIT09IG51bGwpIHtcclxuICAgICAgaWYgKGlkID09PSAnRTAwMDAwMDAnICYmIHJldCA9PT0gJycpIHtcclxuICAgICAgICBpZiAoZmFsbGJhY2tJZC5zdGFydHNXaXRoKCc0JykpXHJcbiAgICAgICAgICByZXQgPSBmYWxsYmFja05hbWUgPz8gJyc7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgcmV0ID0gJ1Vua25vd24nO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJldCA9PT0gJycpXHJcbiAgICAgIHJldCA9IHRoaXMuQ29tYmF0YW50c1tpZF0/Lm5hbWUgPz8gJyc7XHJcblxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IExpbmVFdmVudCBmcm9tICcuL0xpbmVFdmVudCc7XHJcbmltcG9ydCBMb2dSZXBvc2l0b3J5IGZyb20gJy4vTG9nUmVwb3NpdG9yeSc7XHJcblxyXG5jb25zdCBmaWVsZHMgPSB7XHJcbiAgdHlwZTogMixcclxuICBzcGVha2VyOiAzLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLy8gQ2hhdCBldmVudFxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MHgwMCBleHRlbmRzIExpbmVFdmVudCB7XHJcbiAgcHVibGljIHJlYWRvbmx5IHR5cGU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgc3BlYWtlcjogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBtZXNzYWdlOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlcG86IExvZ1JlcG9zaXRvcnksIGxpbmU6IHN0cmluZywgcGFydHM6IHN0cmluZ1tdKSB7XHJcbiAgICBzdXBlcihyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcblxyXG4gICAgdGhpcy50eXBlID0gcGFydHNbZmllbGRzLnR5cGVdID8/ICcnO1xyXG4gICAgdGhpcy5zcGVha2VyID0gcGFydHNbZmllbGRzLnNwZWFrZXJdID8/ICcnO1xyXG4gICAgdGhpcy5tZXNzYWdlID0gcGFydHMuc2xpY2UoNCwgLTEpLmpvaW4oJ3wnKTtcclxuXHJcbiAgICAvLyBUaGUgZXhhY3QgcmVhc29uIGZvciB0aGlzIGNoZWNrIGlzbid0IGNsZWFyIGFueW1vcmUgYnV0IG1heSBiZSByZWxhdGVkIHRvXHJcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmF2YWhuL0ZGWElWX0FDVF9QbHVnaW4vaXNzdWVzLzI1MFxyXG4gICAgaWYgKHRoaXMubWVzc2FnZS5zcGxpdCgnXFx1MDAxZlxcdTAwMWYnKS5sZW5ndGggPiAxKVxyXG4gICAgICB0aGlzLmludmFsaWQgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMuY29udmVydGVkTGluZSA9XHJcbiAgICAgIHRoaXMucHJlZml4KCkgKyB0aGlzLnR5cGUgKyAnOicgK1xyXG4gICAgICAgIC8vIElmIHNwZWFrZXIgaXMgYmxhbmssIGl0J3MgZXhjbHVkZWQgZnJvbSB0aGUgY29udmVydGVkIGxpbmVcclxuICAgICAgICAodGhpcy5zcGVha2VyICE9PSAnJyA/IHRoaXMuc3BlYWtlciArICc6JyA6ICcnKSArXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlLnRyaW0oKTtcclxuICAgIHRoaXMuY29udmVydGVkTGluZSA9IExpbmVFdmVudDAwLnJlcGxhY2VDaGF0U3ltYm9scyh0aGlzLmNvbnZlcnRlZExpbmUpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJlcGxhY2VDaGF0U3ltYm9scyhsaW5lOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgZm9yIChjb25zdCByZXAgb2YgTGluZUV2ZW50MDAuY2hhdFN5bWJvbFJlcGxhY2VtZW50cylcclxuICAgICAgbGluZSA9IGxpbmUucmVwbGFjZShyZXAuU2VhcmNoLCByZXAuUmVwbGFjZSk7XHJcblxyXG4gICAgcmV0dXJuIGxpbmU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2hhdFN5bWJvbFJlcGxhY2VtZW50cyA9IFtcclxuICAgIHtcclxuICAgICAgU2VhcmNoOiAvOlxcdUUwNkYvZyxcclxuICAgICAgUmVwbGFjZTogJzrih5InLFxyXG4gICAgICBUeXBlOiAnU3ltYm9sJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFNlYXJjaDogLyBcXHVFMEJCXFx1RTA1Qy9nLFxyXG4gICAgICBSZXBsYWNlOiAnICcsXHJcbiAgICAgIFR5cGU6ICdQb3NpdGl2ZSBFZmZlY3QnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgU2VhcmNoOiAvIFxcdUUwQkJcXHVFMDVCL2csXHJcbiAgICAgIFJlcGxhY2U6ICcgJyxcclxuICAgICAgVHlwZTogJ05lZ2F0aXZlIEVmZmVjdCcsXHJcbiAgICB9LFxyXG4gIF07XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lRXZlbnQwMCBleHRlbmRzIExpbmVFdmVudDB4MDAge31cclxuIiwiaW1wb3J0IExpbmVFdmVudCBmcm9tICcuL0xpbmVFdmVudCc7XHJcbmltcG9ydCBFbXVsYXRvckNvbW1vbiBmcm9tICcuLi8uLi9FbXVsYXRvckNvbW1vbic7XHJcbmltcG9ydCBMb2dSZXBvc2l0b3J5IGZyb20gJy4vTG9nUmVwb3NpdG9yeSc7XHJcblxyXG5jb25zdCBmaWVsZHMgPSB7XHJcbiAgem9uZUlkOiAyLFxyXG4gIHpvbmVOYW1lOiAzLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLy8gWm9uZSBjaGFuZ2UgZXZlbnRcclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDB4MDEgZXh0ZW5kcyBMaW5lRXZlbnQge1xyXG4gIHB1YmxpYyByZWFkb25seSBwcm9wZXJDYXNlQ29udmVydGVkTGluZTogc3RyaW5nO1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgem9uZUlkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHpvbmVOYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHpvbmVOYW1lUHJvcGVyQ2FzZTogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZXBvOiBMb2dSZXBvc2l0b3J5LCBuZXR3b3JrTGluZTogc3RyaW5nLCBwYXJ0czogc3RyaW5nW10pIHtcclxuICAgIHN1cGVyKHJlcG8sIG5ldHdvcmtMaW5lLCBwYXJ0cyk7XHJcblxyXG4gICAgdGhpcy56b25lSWQgPSBwYXJ0c1tmaWVsZHMuem9uZUlkXSA/PyAnJztcclxuICAgIHRoaXMuem9uZU5hbWUgPSBwYXJ0c1tmaWVsZHMuem9uZU5hbWVdID8/ICcnO1xyXG4gICAgdGhpcy56b25lTmFtZVByb3BlckNhc2UgPSBFbXVsYXRvckNvbW1vbi5wcm9wZXJDYXNlKHRoaXMuem9uZU5hbWUpO1xyXG5cclxuICAgIHRoaXMuY29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgK1xyXG4gICAgICAnQ2hhbmdlZCBab25lIHRvICcgKyB0aGlzLnpvbmVOYW1lICsgJy4nO1xyXG4gICAgdGhpcy5wcm9wZXJDYXNlQ29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgK1xyXG4gICAgICAnQ2hhbmdlZCBab25lIHRvICcgKyB0aGlzLnpvbmVOYW1lUHJvcGVyQ2FzZSArICcuJztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lRXZlbnQwMSBleHRlbmRzIExpbmVFdmVudDB4MDEge31cclxuIiwiaW1wb3J0IExpbmVFdmVudCBmcm9tICcuL0xpbmVFdmVudCc7XHJcbmltcG9ydCBMb2dSZXBvc2l0b3J5IGZyb20gJy4vTG9nUmVwb3NpdG9yeSc7XHJcblxyXG5jb25zdCBmaWVsZHMgPSB7XHJcbiAgaWQ6IDIsXHJcbiAgbmFtZTogMyxcclxufSBhcyBjb25zdDtcclxuXHJcbi8vIFBsYXllciBjaGFuZ2UgZXZlbnRcclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDB4MDIgZXh0ZW5kcyBMaW5lRXZlbnQge1xyXG4gIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlcG86IExvZ1JlcG9zaXRvcnksIGxpbmU6IHN0cmluZywgcGFydHM6IHN0cmluZ1tdKSB7XHJcbiAgICBzdXBlcihyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcblxyXG4gICAgdGhpcy5pZCA9IHBhcnRzW2ZpZWxkcy5pZF0/LnRvVXBwZXJDYXNlKCkgPz8gJyc7XHJcbiAgICB0aGlzLm5hbWUgPSBwYXJ0c1tmaWVsZHMubmFtZV0gPz8gJyc7XHJcblxyXG4gICAgdGhpcy5jb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArICdDaGFuZ2VkIHByaW1hcnkgcGxheWVyIHRvICcgKyB0aGlzLm5hbWUgKyAnLic7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MDIgZXh0ZW5kcyBMaW5lRXZlbnQweDAyIHt9XHJcbiIsImltcG9ydCBMaW5lRXZlbnQsIHsgTGluZUV2ZW50Sm9iTGV2ZWwsIExpbmVFdmVudFNvdXJjZSB9IGZyb20gJy4vTGluZUV2ZW50JztcclxuaW1wb3J0IEVtdWxhdG9yQ29tbW9uIGZyb20gJy4uLy4uL0VtdWxhdG9yQ29tbW9uJztcclxuaW1wb3J0IFV0aWwgZnJvbSAnLi4vLi4vLi4vLi4vLi4vcmVzb3VyY2VzL3V0aWwnO1xyXG5pbXBvcnQgTG9nUmVwb3NpdG9yeSBmcm9tICcuL0xvZ1JlcG9zaXRvcnknO1xyXG5pbXBvcnQgeyBKb2IgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi90eXBlcy9qb2InO1xyXG5cclxuY29uc3QgZmllbGRzID0ge1xyXG4gIGlkOiAyLFxyXG4gIG5hbWU6IDMsXHJcbiAgam9iSWRIZXg6IDQsXHJcbiAgbGV2ZWxTdHJpbmc6IDUsXHJcbiAgb3duZXJJZDogNixcclxuICB3b3JsZElkOiA3LFxyXG4gIHdvcmxkTmFtZTogOCxcclxuICBucGNOYW1lSWQ6IDksXHJcbiAgbnBjQmFzZUlkOiAxMCxcclxuICBjdXJyZW50SHA6IDExLFxyXG4gIG1heEhwU3RyaW5nOiAxNCxcclxuICBjdXJyZW50TXA6IDEzLFxyXG4gIG1heE1wU3RyaW5nOiAxNCxcclxuICBjdXJyZW50VHA6IDE1LFxyXG4gIG1heFRwOiAxNixcclxuICB4U3RyaW5nOiAxNyxcclxuICB5U3RyaW5nOiAxOCxcclxuICB6U3RyaW5nOiAxOSxcclxuICBoZWFkaW5nOiAyMCxcclxufSBhcyBjb25zdDtcclxuXHJcbi8vIEFkZGVkIGNvbWJhdGFudCBldmVudFxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MHgwMyBleHRlbmRzIExpbmVFdmVudCBpbXBsZW1lbnRzIExpbmVFdmVudFNvdXJjZSwgTGluZUV2ZW50Sm9iTGV2ZWwge1xyXG4gIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGpvYklkSGV4OiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGpvYklkOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGpvYjogSm9iO1xyXG4gIHB1YmxpYyByZWFkb25seSBsZXZlbFN0cmluZzogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBsZXZlbDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBvd25lcklkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHdvcmxkSWQ6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgd29ybGROYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IG5wY05hbWVJZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBucGNCYXNlSWQ6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgaHA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbWF4SHBTdHJpbmc6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgbWF4SHA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbXA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbWF4TXBTdHJpbmc6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgbWF4TXA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgdHA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbWF4VHA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgeFN0cmluZzogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSB4OiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHlTdHJpbmc6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgeTogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSB6U3RyaW5nOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHo6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaGVhZGluZzogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBpc1NvdXJjZSA9IHRydWU7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlzSm9iTGV2ZWwgPSB0cnVlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZXBvOiBMb2dSZXBvc2l0b3J5LCBsaW5lOiBzdHJpbmcsIHBhcnRzOiBzdHJpbmdbXSkge1xyXG4gICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xyXG5cclxuICAgIHRoaXMuaWQgPSBwYXJ0c1tmaWVsZHMuaWRdPy50b1VwcGVyQ2FzZSgpID8/ICcnO1xyXG4gICAgdGhpcy5uYW1lID0gcGFydHNbZmllbGRzLm5hbWVdID8/ICcnO1xyXG4gICAgdGhpcy5qb2JJZEhleCA9IHBhcnRzW2ZpZWxkcy5qb2JJZEhleF0/LnRvVXBwZXJDYXNlKCkgPz8gJyc7XHJcbiAgICB0aGlzLmpvYklkID0gcGFyc2VJbnQodGhpcy5qb2JJZEhleCwgMTYpO1xyXG4gICAgdGhpcy5qb2IgPSBVdGlsLmpvYkVudW1Ub0pvYih0aGlzLmpvYklkKTtcclxuICAgIHRoaXMubGV2ZWxTdHJpbmcgPSBwYXJ0c1tmaWVsZHMubGV2ZWxTdHJpbmddID8/ICcnO1xyXG4gICAgdGhpcy5sZXZlbCA9IHBhcnNlRmxvYXQodGhpcy5sZXZlbFN0cmluZyk7XHJcbiAgICB0aGlzLm93bmVySWQgPSBwYXJ0c1tmaWVsZHMub3duZXJJZF0/LnRvVXBwZXJDYXNlKCkgPz8gJyc7XHJcbiAgICB0aGlzLndvcmxkSWQgPSBwYXJ0c1tmaWVsZHMud29ybGRJZF0gPz8gJyc7XHJcbiAgICB0aGlzLndvcmxkTmFtZSA9IHBhcnRzW2ZpZWxkcy53b3JsZE5hbWVdID8/ICcnO1xyXG4gICAgdGhpcy5ucGNOYW1lSWQgPSBwYXJ0c1tmaWVsZHMubnBjTmFtZUlkXSA/PyAnJztcclxuICAgIHRoaXMubnBjQmFzZUlkID0gcGFydHNbZmllbGRzLm5wY0Jhc2VJZF0gPz8gJyc7XHJcbiAgICB0aGlzLmhwID0gcGFyc2VGbG9hdChwYXJ0c1tmaWVsZHMuY3VycmVudEhwXSA/PyAnJyk7XHJcbiAgICB0aGlzLm1heEhwU3RyaW5nID0gcGFydHNbZmllbGRzLm1heEhwU3RyaW5nXSA/PyAnJztcclxuICAgIHRoaXMubWF4SHAgPSBwYXJzZUZsb2F0KHRoaXMubWF4SHBTdHJpbmcpO1xyXG4gICAgdGhpcy5tcCA9IHBhcnNlRmxvYXQocGFydHNbZmllbGRzLmN1cnJlbnRNcF0gPz8gJycpO1xyXG4gICAgdGhpcy5tYXhNcFN0cmluZyA9IHBhcnRzW2ZpZWxkcy5tYXhNcFN0cmluZ10gPz8gJyc7XHJcbiAgICB0aGlzLm1heE1wID0gcGFyc2VGbG9hdCh0aGlzLm1heE1wU3RyaW5nKTtcclxuICAgIHRoaXMudHAgPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy5jdXJyZW50VHBdID8/ICcnKTtcclxuICAgIHRoaXMubWF4VHAgPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy5tYXhUcF0gPz8gJycpO1xyXG4gICAgdGhpcy54U3RyaW5nID0gcGFydHNbZmllbGRzLnhTdHJpbmddID8/ICcnO1xyXG4gICAgdGhpcy54ID0gcGFyc2VGbG9hdCh0aGlzLnhTdHJpbmcpO1xyXG4gICAgdGhpcy55U3RyaW5nID0gcGFydHNbZmllbGRzLnlTdHJpbmddID8/ICcnO1xyXG4gICAgdGhpcy55ID0gcGFyc2VGbG9hdCh0aGlzLnlTdHJpbmcpO1xyXG4gICAgdGhpcy56U3RyaW5nID0gcGFydHNbZmllbGRzLnpTdHJpbmddID8/ICcnO1xyXG4gICAgdGhpcy56ID0gcGFyc2VGbG9hdCh0aGlzLnpTdHJpbmcpO1xyXG4gICAgdGhpcy5oZWFkaW5nID0gcGFyc2VGbG9hdChwYXJ0c1tmaWVsZHMuaGVhZGluZ10gPz8gJycpO1xyXG5cclxuICAgIHJlcG8udXBkYXRlQ29tYmF0YW50KHRoaXMuaWQsIHtcclxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICBzcGF3bjogdGhpcy50aW1lc3RhbXAsXHJcbiAgICAgIGRlc3Bhd246IHRoaXMudGltZXN0YW1wLFxyXG4gICAgICBqb2I6IHRoaXMuam9iSWRIZXgsXHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgY29tYmF0YW50TmFtZSA9IHRoaXMubmFtZTtcclxuICAgIGlmICh0aGlzLndvcmxkTmFtZSAhPT0gJycpXHJcbiAgICAgIGNvbWJhdGFudE5hbWUgPSBjb21iYXRhbnROYW1lICsgJygnICsgdGhpcy53b3JsZE5hbWUgKyAnKSc7XHJcblxyXG4gICAgdGhpcy5jb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArIHRoaXMuaWQudG9VcHBlckNhc2UoKSArXHJcbiAgICAgICc6QWRkZWQgbmV3IGNvbWJhdGFudCAnICsgY29tYmF0YW50TmFtZSArXHJcbiAgICAgICcuICBKb2I6ICcgKyB0aGlzLmpvYiArXHJcbiAgICAgICcgTGV2ZWw6ICcgKyB0aGlzLmxldmVsU3RyaW5nICtcclxuICAgICAgJyBNYXggSFA6ICcgKyB0aGlzLm1heEhwU3RyaW5nICtcclxuICAgICAgJyBNYXggTVA6ICcgKyB0aGlzLm1heE1wU3RyaW5nICtcclxuICAgICAgJyBQb3M6ICgnICsgdGhpcy54U3RyaW5nICsgJywnICsgdGhpcy55U3RyaW5nICsgJywnICsgdGhpcy56U3RyaW5nICsgJyknO1xyXG5cclxuICAgIC8vIFRoaXMgbGFzdCBwYXJ0IGlzIGd1ZXNzd29yayBmb3IgdGhlIGFyZWEgYmV0d2VlbiA5IGFuZCAxMC5cclxuICAgIGNvbnN0IHVua25vd25WYWx1ZSA9IHRoaXMubnBjTmFtZUlkICtcclxuICAgICAgRW11bGF0b3JDb21tb24uemVyb1BhZCh0aGlzLm5wY0Jhc2VJZCwgOCArIE1hdGgubWF4KDAsIDYgLSB0aGlzLm5wY05hbWVJZC5sZW5ndGgpKTtcclxuXHJcbiAgICBpZiAodW5rbm93blZhbHVlICE9PSAnMDAwMDAwMDAwMDAwMDAnKVxyXG4gICAgICB0aGlzLmNvbnZlcnRlZExpbmUgKz0gJyAoJyArIHVua25vd25WYWx1ZSArICcpJztcclxuXHJcbiAgICB0aGlzLmNvbnZlcnRlZExpbmUgKz0gJy4nO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDAzIGV4dGVuZHMgTGluZUV2ZW50MHgwMyB7IH1cclxuIiwiaW1wb3J0IHsgTGluZUV2ZW50MHgwMyB9IGZyb20gJy4vTGluZUV2ZW50MHgwMyc7XHJcbmltcG9ydCBMb2dSZXBvc2l0b3J5IGZyb20gJy4vTG9nUmVwb3NpdG9yeSc7XHJcblxyXG4vLyBSZW1vdmVkIGNvbWJhdGFudCBldmVudFxyXG4vLyBFeHRlbmQgdGhlIGFkZCBjb21iYXRhbnQgZXZlbnQgdG8gcmVkdWNlIGR1cGxpY2F0ZSBjb2RlIHNpbmNlIHRoZXkncmVcclxuLy8gdGhlIHNhbWUgZnJvbSBhIGRhdGEgcGVyc3BlY3RpdmVcclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDB4MDQgZXh0ZW5kcyBMaW5lRXZlbnQweDAzIHtcclxuICBjb25zdHJ1Y3RvcihyZXBvOiBMb2dSZXBvc2l0b3J5LCBsaW5lOiBzdHJpbmcsIHBhcnRzOiBzdHJpbmdbXSkge1xyXG4gICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xyXG5cclxuICAgIHRoaXMuY29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgKyB0aGlzLmlkLnRvVXBwZXJDYXNlKCkgK1xyXG4gICAgICAnOlJlbW92aW5nIGNvbWJhdGFudCAnICsgdGhpcy5uYW1lICtcclxuICAgICAgJy4gTWF4IE1QOiAnICsgdGhpcy5tYXhNcFN0cmluZyArXHJcbiAgICAgICcuIFBvczogKCcgKyB0aGlzLnhTdHJpbmcgKyAnLCcgKyB0aGlzLnlTdHJpbmcgKyAnLCcgKyB0aGlzLnpTdHJpbmcgKyAnKSc7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MDQgZXh0ZW5kcyBMaW5lRXZlbnQweDA0IHsgfVxyXG4iLCJpbXBvcnQgTGluZUV2ZW50IGZyb20gJy4vTGluZUV2ZW50JztcclxuaW1wb3J0IExvZ1JlcG9zaXRvcnkgZnJvbSAnLi9Mb2dSZXBvc2l0b3J5JztcclxuXHJcbmNvbnN0IGZpZWxkcyA9IHtcclxuICBjbGFzczogMixcclxuICBzdHJlbmd0aDogMyxcclxuICBkZXh0ZXJpdHk6IDQsXHJcbiAgdml0YWxpdHk6IDUsXHJcbiAgaW50ZWxsaWdlbmNlOiA2LFxyXG4gIG1pbmQ6IDcsXHJcbiAgcGlldHk6IDgsXHJcbiAgYXR0YWNrUG93ZXI6IDksXHJcbiAgZGlyZWN0SGl0OiAxMCxcclxuICBjcml0aWNhbEhpdDogMTEsXHJcbiAgYXR0YWNrTWFnaWNQb3RlbmN5OiAxMixcclxuICBoZWFsTWFnaWNQb3RlbmN5OiAxMyxcclxuICBkZXRlcm1pbmF0aW9uOiAxNCxcclxuICBza2lsbFNwZWVkOiAxNSxcclxuICBzcGVsbFNwZWVkOiAxNixcclxuICB0ZW5hY2l0eTogMTgsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBQbGF5ZXIgc3RhdHMgZXZlbnRcclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDB4MEMgZXh0ZW5kcyBMaW5lRXZlbnQge1xyXG4gIHB1YmxpYyByZWFkb25seSBjbGFzczogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBzdHJlbmd0aDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBkZXh0ZXJpdHk6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgdml0YWxpdHk6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgaW50ZWxsaWdlbmNlOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IG1pbmQ6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgcGlldHk6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgYXR0YWNrUG93ZXI6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgZGlyZWN0SGl0OiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGNyaXRpY2FsSGl0OiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGF0dGFja01hZ2ljUG90ZW5jeTogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBoZWFsTWFnaWNQb3RlbmN5OiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGRldGVybWluYXRpb246IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgc2tpbGxTcGVlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBzcGVsbFNwZWVkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRlbmFjaXR5OiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlcG86IExvZ1JlcG9zaXRvcnksIGxpbmU6IHN0cmluZywgcGFydHM6IHN0cmluZ1tdKSB7XHJcbiAgICBzdXBlcihyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcblxyXG4gICAgdGhpcy5jbGFzcyA9IHBhcnRzW2ZpZWxkcy5jbGFzc10gPz8gJyc7XHJcbiAgICB0aGlzLnN0cmVuZ3RoID0gcGFydHNbZmllbGRzLnN0cmVuZ3RoXSA/PyAnJztcclxuICAgIHRoaXMuZGV4dGVyaXR5ID0gcGFydHNbZmllbGRzLmRleHRlcml0eV0gPz8gJyc7XHJcbiAgICB0aGlzLnZpdGFsaXR5ID0gcGFydHNbZmllbGRzLnZpdGFsaXR5XSA/PyAnJztcclxuICAgIHRoaXMuaW50ZWxsaWdlbmNlID0gcGFydHNbZmllbGRzLmludGVsbGlnZW5jZV0gPz8gJyc7XHJcbiAgICB0aGlzLm1pbmQgPSBwYXJ0c1tmaWVsZHMubWluZF0gPz8gJyc7XHJcbiAgICB0aGlzLnBpZXR5ID0gcGFydHNbZmllbGRzLnBpZXR5XSA/PyAnJztcclxuICAgIHRoaXMuYXR0YWNrUG93ZXIgPSBwYXJ0c1tmaWVsZHMuYXR0YWNrUG93ZXJdID8/ICcnO1xyXG4gICAgdGhpcy5kaXJlY3RIaXQgPSBwYXJ0c1tmaWVsZHMuZGlyZWN0SGl0XSA/PyAnJztcclxuICAgIHRoaXMuY3JpdGljYWxIaXQgPSBwYXJ0c1tmaWVsZHMuY3JpdGljYWxIaXRdID8/ICcnO1xyXG4gICAgdGhpcy5hdHRhY2tNYWdpY1BvdGVuY3kgPSBwYXJ0c1tmaWVsZHMuYXR0YWNrTWFnaWNQb3RlbmN5XSA/PyAnJztcclxuICAgIHRoaXMuaGVhbE1hZ2ljUG90ZW5jeSA9IHBhcnRzW2ZpZWxkcy5oZWFsTWFnaWNQb3RlbmN5XSA/PyAnJztcclxuICAgIHRoaXMuZGV0ZXJtaW5hdGlvbiA9IHBhcnRzW2ZpZWxkcy5kZXRlcm1pbmF0aW9uXSA/PyAnJztcclxuICAgIHRoaXMuc2tpbGxTcGVlZCA9IHBhcnRzW2ZpZWxkcy5za2lsbFNwZWVkXSA/PyAnJztcclxuICAgIHRoaXMuc3BlbGxTcGVlZCA9IHBhcnRzW2ZpZWxkcy5zcGVsbFNwZWVkXSA/PyAnJztcclxuICAgIHRoaXMudGVuYWNpdHkgPSBwYXJ0c1tmaWVsZHMudGVuYWNpdHldID8/ICcnO1xyXG5cclxuICAgIHRoaXMuY29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgK1xyXG4gICAgICAnUGxheWVyIFN0YXRzOiAnICsgcGFydHMuc2xpY2UoMiwgcGFydHMubGVuZ3RoIC0gMSkuam9pbignOicpLnJlcGxhY2UoL1xcfC9nLCAnOicpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDEyIGV4dGVuZHMgTGluZUV2ZW50MHgwQyB7IH1cclxuIiwiaW1wb3J0IExpbmVFdmVudCwgeyBMaW5lRXZlbnRBYmlsaXR5LCBMaW5lRXZlbnRTb3VyY2UsIExpbmVFdmVudFRhcmdldCB9IGZyb20gJy4vTGluZUV2ZW50JztcclxuaW1wb3J0IEVtdWxhdG9yQ29tbW9uIGZyb20gJy4uLy4uL0VtdWxhdG9yQ29tbW9uJztcclxuaW1wb3J0IExvZ1JlcG9zaXRvcnkgZnJvbSAnLi9Mb2dSZXBvc2l0b3J5JztcclxuXHJcbmNvbnN0IGZpZWxkcyA9IHtcclxuICBpZDogMixcclxuICBuYW1lOiAzLFxyXG4gIGFiaWxpdHlJZDogNCxcclxuICBhYmlsaXR5TmFtZTogNSxcclxuICB0YXJnZXRJZDogNixcclxuICB0YXJnZXROYW1lOiA3LFxyXG4gIGR1cmF0aW9uOiA4LFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLy8gQWJpbGl0eSB1c2UgZXZlbnRcclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDB4MTQgZXh0ZW5kcyBMaW5lRXZlbnRcclxuICBpbXBsZW1lbnRzIExpbmVFdmVudFNvdXJjZSwgTGluZUV2ZW50VGFyZ2V0LCBMaW5lRXZlbnRBYmlsaXR5IHtcclxuICBwdWJsaWMgcmVhZG9ubHkgcHJvcGVyQ2FzZUNvbnZlcnRlZExpbmU6IHN0cmluZztcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgYWJpbGl0eUlkOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGFiaWxpdHlJZEhleDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBhYmlsaXR5TmFtZTogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSB0YXJnZXRJZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSB0YXJnZXROYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGR1cmF0aW9uOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlzU291cmNlID0gdHJ1ZTtcclxuICBwdWJsaWMgcmVhZG9ubHkgaXNUYXJnZXQgPSB0cnVlO1xyXG4gIHB1YmxpYyByZWFkb25seSBpc0FiaWxpdHkgPSB0cnVlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZXBvOiBMb2dSZXBvc2l0b3J5LCBsaW5lOiBzdHJpbmcsIHBhcnRzOiBzdHJpbmdbXSkge1xyXG4gICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xyXG5cclxuICAgIHRoaXMuaWQgPSBwYXJ0c1tmaWVsZHMuaWRdPy50b1VwcGVyQ2FzZSgpID8/ICcnO1xyXG4gICAgdGhpcy5uYW1lID0gcGFydHNbZmllbGRzLm5hbWVdID8/ICcnO1xyXG4gICAgdGhpcy5hYmlsaXR5SWRIZXggPSBwYXJ0c1tmaWVsZHMuYWJpbGl0eUlkXT8udG9VcHBlckNhc2UoKSA/PyAnJztcclxuICAgIHRoaXMuYWJpbGl0eUlkID0gcGFyc2VJbnQodGhpcy5hYmlsaXR5SWRIZXgpO1xyXG4gICAgdGhpcy5hYmlsaXR5TmFtZSA9IHBhcnRzW2ZpZWxkcy5hYmlsaXR5TmFtZV0gPz8gJyc7XHJcbiAgICB0aGlzLnRhcmdldElkID0gcGFydHNbZmllbGRzLnRhcmdldElkXT8udG9VcHBlckNhc2UoKSA/PyAnJztcclxuICAgIHRoaXMudGFyZ2V0TmFtZSA9IHBhcnRzW2ZpZWxkcy50YXJnZXROYW1lXSA/PyAnJztcclxuICAgIHRoaXMuZHVyYXRpb24gPSBwYXJ0c1tmaWVsZHMuZHVyYXRpb25dID8/ICcnO1xyXG5cclxuICAgIHJlcG8udXBkYXRlQ29tYmF0YW50KHRoaXMuaWQsIHtcclxuICAgICAgam9iOiB1bmRlZmluZWQsXHJcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgc3Bhd246IHRoaXMudGltZXN0YW1wLFxyXG4gICAgICBkZXNwYXduOiB0aGlzLnRpbWVzdGFtcCxcclxuICAgIH0pO1xyXG5cclxuICAgIHJlcG8udXBkYXRlQ29tYmF0YW50KHRoaXMudGFyZ2V0SWQsIHtcclxuICAgICAgam9iOiB1bmRlZmluZWQsXHJcbiAgICAgIG5hbWU6IHRoaXMudGFyZ2V0TmFtZSxcclxuICAgICAgc3Bhd246IHRoaXMudGltZXN0YW1wLFxyXG4gICAgICBkZXNwYXduOiB0aGlzLnRpbWVzdGFtcCxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXMudGFyZ2V0TmFtZS5sZW5ndGggPT09IDAgPyAnVW5rbm93bicgOiB0aGlzLnRhcmdldE5hbWU7XHJcblxyXG4gICAgdGhpcy5jb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArIHRoaXMuYWJpbGl0eUlkSGV4ICtcclxuICAgICAgJzonICsgdGhpcy5uYW1lICtcclxuICAgICAgJyBzdGFydHMgdXNpbmcgJyArIHRoaXMuYWJpbGl0eU5hbWUgK1xyXG4gICAgICAnIG9uICcgKyB0YXJnZXQgKyAnLic7XHJcbiAgICB0aGlzLnByb3BlckNhc2VDb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArIHRoaXMuYWJpbGl0eUlkSGV4ICtcclxuICAgICAgJzonICsgRW11bGF0b3JDb21tb24ucHJvcGVyQ2FzZSh0aGlzLm5hbWUpICtcclxuICAgICAgJyBzdGFydHMgdXNpbmcgJyArIHRoaXMuYWJpbGl0eU5hbWUgK1xyXG4gICAgICAnIG9uICcgKyBFbXVsYXRvckNvbW1vbi5wcm9wZXJDYXNlKHRhcmdldCkgKyAnLic7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MjAgZXh0ZW5kcyBMaW5lRXZlbnQweDE0IHsgfVxyXG4iLCJpbXBvcnQgTGluZUV2ZW50LCB7IExpbmVFdmVudEFiaWxpdHksIExpbmVFdmVudFNvdXJjZSwgTGluZUV2ZW50VGFyZ2V0IH0gZnJvbSAnLi9MaW5lRXZlbnQnO1xyXG5pbXBvcnQgTG9nUmVwb3NpdG9yeSBmcm9tICcuL0xvZ1JlcG9zaXRvcnknO1xyXG5cclxuY29uc3QgZmllbGRzID0ge1xyXG4gIGlkOiAyLFxyXG4gIG5hbWU6IDMsXHJcbiAgZmxhZ3M6IDgsXHJcbiAgZGFtYWdlOiA5LFxyXG4gIGFiaWxpdHlJZDogNCxcclxuICBhYmlsaXR5TmFtZTogNSxcclxuICB0YXJnZXRJZDogNixcclxuICB0YXJnZXROYW1lOiA3LFxyXG4gIHRhcmdldEhwOiAyNCxcclxuICB0YXJnZXRNYXhIcDogMjUsXHJcbiAgdGFyZ2V0TXA6IDI2LFxyXG4gIHRhcmdldE1heE1wOiAyNyxcclxuICB0YXJnZXRYOiAzMCxcclxuICB0YXJnZXRZOiAzMSxcclxuICB0YXJnZXRaOiAzMixcclxuICB0YXJnZXRIZWFkaW5nOiAzMyxcclxuICBzb3VyY2VIcDogMzQsXHJcbiAgc291cmNlTWF4SHA6IDM1LFxyXG4gIHNvdXJjZU1wOiAzNixcclxuICBzb3VyY2VNYXhNcDogMzcsXHJcbiAgeDogNDAsXHJcbiAgeTogNDEsXHJcbiAgejogNDIsXHJcbiAgaGVhZGluZzogNDMsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBBYmlsaXR5IGhpdCBzaW5nbGUgdGFyZ2V0IGV2ZW50XHJcbmV4cG9ydCBjbGFzcyBMaW5lRXZlbnQweDE1IGV4dGVuZHMgTGluZUV2ZW50XHJcbiAgaW1wbGVtZW50cyBMaW5lRXZlbnRTb3VyY2UsIExpbmVFdmVudFRhcmdldCwgTGluZUV2ZW50QWJpbGl0eSB7XHJcbiAgcHVibGljIHJlYWRvbmx5IGRhbWFnZTogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGFiaWxpdHlJZDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBhYmlsaXR5TmFtZTogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSB0YXJnZXRJZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSB0YXJnZXROYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGZsYWdzOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldEhwOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldE1heEhwOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldE1wOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldE1heE1wOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldFg6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0WTogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSB0YXJnZXRaOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldEhlYWRpbmc6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaHA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbWF4SHA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbXA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbWF4TXA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgeDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSB5OiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHo6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaGVhZGluZzogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBpc1NvdXJjZSA9IHRydWU7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlzVGFyZ2V0ID0gdHJ1ZTtcclxuICBwdWJsaWMgcmVhZG9ubHkgaXNBYmlsaXR5ID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IocmVwbzogTG9nUmVwb3NpdG9yeSwgbGluZTogc3RyaW5nLCBwYXJ0czogc3RyaW5nW10pIHtcclxuICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuXHJcbiAgICB0aGlzLmlkID0gcGFydHNbZmllbGRzLmlkXT8udG9VcHBlckNhc2UoKSA/PyAnJztcclxuICAgIHRoaXMubmFtZSA9IHBhcnRzW2ZpZWxkcy5uYW1lXSA/PyAnJztcclxuXHJcbiAgICB0aGlzLmZsYWdzID0gcGFydHNbZmllbGRzLmZsYWdzXSA/PyAnJztcclxuXHJcbiAgICBjb25zdCBmaWVsZE9mZnNldCA9IHRoaXMuZmxhZ3MgPT09ICczRicgPyAyIDogMDtcclxuXHJcbiAgICB0aGlzLmRhbWFnZSA9IExpbmVFdmVudC5jYWxjdWxhdGVEYW1hZ2UocGFydHNbZmllbGRzLmRhbWFnZSArIGZpZWxkT2Zmc2V0XSA/PyAnJyk7XHJcbiAgICB0aGlzLmFiaWxpdHlJZCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy5hYmlsaXR5SWRdPy50b1VwcGVyQ2FzZSgpID8/ICcnKTtcclxuICAgIHRoaXMuYWJpbGl0eU5hbWUgPSBwYXJ0c1tmaWVsZHMuYWJpbGl0eU5hbWVdID8/ICcnO1xyXG4gICAgdGhpcy50YXJnZXRJZCA9IHBhcnRzW2ZpZWxkcy50YXJnZXRJZF0/LnRvVXBwZXJDYXNlKCkgPz8gJyc7XHJcbiAgICB0aGlzLnRhcmdldE5hbWUgPSBwYXJ0c1tmaWVsZHMudGFyZ2V0TmFtZV0gPz8gJyc7XHJcblxyXG4gICAgdGhpcy50YXJnZXRIcCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy50YXJnZXRIcCArIGZpZWxkT2Zmc2V0XSA/PyAnJyk7XHJcbiAgICB0aGlzLnRhcmdldE1heEhwID0gcGFyc2VJbnQocGFydHNbZmllbGRzLnRhcmdldE1heEhwICsgZmllbGRPZmZzZXRdID8/ICcnKTtcclxuICAgIHRoaXMudGFyZ2V0TXAgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMudGFyZ2V0TXAgKyBmaWVsZE9mZnNldF0gPz8gJycpO1xyXG4gICAgdGhpcy50YXJnZXRNYXhNcCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy50YXJnZXRNYXhNcCArIGZpZWxkT2Zmc2V0XSA/PyAnJyk7XHJcbiAgICB0aGlzLnRhcmdldFggPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy50YXJnZXRYICsgZmllbGRPZmZzZXRdID8/ICcnKTtcclxuICAgIHRoaXMudGFyZ2V0WSA9IHBhcnNlRmxvYXQocGFydHNbZmllbGRzLnRhcmdldFkgKyBmaWVsZE9mZnNldF0gPz8gJycpO1xyXG4gICAgdGhpcy50YXJnZXRaID0gcGFyc2VGbG9hdChwYXJ0c1tmaWVsZHMudGFyZ2V0WiArIGZpZWxkT2Zmc2V0XSA/PyAnJyk7XHJcbiAgICB0aGlzLnRhcmdldEhlYWRpbmcgPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy50YXJnZXRIZWFkaW5nICsgZmllbGRPZmZzZXRdID8/ICcnKTtcclxuXHJcbiAgICB0aGlzLmhwID0gcGFyc2VJbnQocGFydHNbZmllbGRzLnNvdXJjZUhwICsgZmllbGRPZmZzZXRdID8/ICcnKTtcclxuICAgIHRoaXMubWF4SHAgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMuc291cmNlTWF4SHAgKyBmaWVsZE9mZnNldF0gPz8gJycpO1xyXG4gICAgdGhpcy5tcCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy5zb3VyY2VNcCArIGZpZWxkT2Zmc2V0XSA/PyAnJyk7XHJcbiAgICB0aGlzLm1heE1wID0gcGFyc2VJbnQocGFydHNbZmllbGRzLnNvdXJjZU1heE1wICsgZmllbGRPZmZzZXRdID8/ICcnKTtcclxuICAgIHRoaXMueCA9IHBhcnNlRmxvYXQocGFydHNbZmllbGRzLnggKyBmaWVsZE9mZnNldF0gPz8gJycpO1xyXG4gICAgdGhpcy55ID0gcGFyc2VGbG9hdChwYXJ0c1tmaWVsZHMueSArIGZpZWxkT2Zmc2V0XSA/PyAnJyk7XHJcbiAgICB0aGlzLnogPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy56ICsgZmllbGRPZmZzZXRdID8/ICcnKTtcclxuICAgIHRoaXMuaGVhZGluZyA9IHBhcnNlRmxvYXQocGFydHNbZmllbGRzLmhlYWRpbmcgKyBmaWVsZE9mZnNldF0gPz8gJycpO1xyXG5cclxuXHJcbiAgICByZXBvLnVwZGF0ZUNvbWJhdGFudCh0aGlzLmlkLCB7XHJcbiAgICAgIGpvYjogdW5kZWZpbmVkLFxyXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgIHNwYXduOiB0aGlzLnRpbWVzdGFtcCxcclxuICAgICAgZGVzcGF3bjogdGhpcy50aW1lc3RhbXAsXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXBvLnVwZGF0ZUNvbWJhdGFudCh0aGlzLnRhcmdldElkLCB7XHJcbiAgICAgIGpvYjogdW5kZWZpbmVkLFxyXG4gICAgICBuYW1lOiB0aGlzLnRhcmdldE5hbWUsXHJcbiAgICAgIHNwYXduOiB0aGlzLnRpbWVzdGFtcCxcclxuICAgICAgZGVzcGF3bjogdGhpcy50aW1lc3RhbXAsXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lRXZlbnQyMSBleHRlbmRzIExpbmVFdmVudDB4MTUge31cclxuIiwiaW1wb3J0IHsgTGluZUV2ZW50MHgxNSB9IGZyb20gJy4vTGluZUV2ZW50MHgxNSc7XHJcbmltcG9ydCBMb2dSZXBvc2l0b3J5IGZyb20gJy4vTG9nUmVwb3NpdG9yeSc7XHJcblxyXG4vLyBBYmlsaXR5IGhpdCBtdWx0aXBsZS9ubyB0YXJnZXQgZXZlbnRcclxuLy8gRHVwbGljYXRlIG9mIDB4MTUgYXMgZmFyIGFzIGRhdGFcclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDB4MTYgZXh0ZW5kcyBMaW5lRXZlbnQweDE1IHtcclxuICBjb25zdHJ1Y3RvcihyZXBvOiBMb2dSZXBvc2l0b3J5LCBsaW5lOiBzdHJpbmcsIHBhcnRzOiBzdHJpbmdbXSkge1xyXG4gICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDIyIGV4dGVuZHMgTGluZUV2ZW50MHgxNiB7fVxyXG4iLCJpbXBvcnQgTGluZUV2ZW50LCB7IExpbmVFdmVudEFiaWxpdHksIExpbmVFdmVudFNvdXJjZSB9IGZyb20gJy4vTGluZUV2ZW50JztcclxuaW1wb3J0IExvZ1JlcG9zaXRvcnkgZnJvbSAnLi9Mb2dSZXBvc2l0b3J5JztcclxuXHJcbmNvbnN0IGZpZWxkcyA9IHtcclxuICBpZDogMixcclxuICBuYW1lOiAzLFxyXG4gIGFiaWxpdHlJZDogNCxcclxuICBhYmlsaXR5TmFtZTogNSxcclxuICByZWFzb246IDYsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBDYW5jZWwgYWJpbGl0eSBldmVudFxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MHgxNyBleHRlbmRzIExpbmVFdmVudFxyXG4gIGltcGxlbWVudHMgTGluZUV2ZW50U291cmNlLCBMaW5lRXZlbnRBYmlsaXR5IHtcclxuICBwdWJsaWMgcmVhZG9ubHkgaWQ6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBhYmlsaXR5SWQ6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgYWJpbGl0eU5hbWU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgcmVhc29uOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlzU291cmNlID0gdHJ1ZTtcclxuICBwdWJsaWMgcmVhZG9ubHkgaXNBYmlsaXR5ID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IocmVwbzogTG9nUmVwb3NpdG9yeSwgbGluZTogc3RyaW5nLCBwYXJ0czogc3RyaW5nW10pIHtcclxuICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuXHJcbiAgICB0aGlzLmlkID0gcGFydHNbZmllbGRzLmlkXT8udG9VcHBlckNhc2UoKSA/PyAnJztcclxuICAgIHRoaXMubmFtZSA9IHBhcnRzW2ZpZWxkcy5uYW1lXSA/PyAnJztcclxuICAgIHRoaXMuYWJpbGl0eUlkID0gcGFyc2VJbnQocGFydHNbZmllbGRzLmFiaWxpdHlJZF0/LnRvVXBwZXJDYXNlKCkgPz8gJycpO1xyXG4gICAgdGhpcy5hYmlsaXR5TmFtZSA9IHBhcnRzW2ZpZWxkcy5hYmlsaXR5TmFtZV0gPz8gJyc7XHJcbiAgICB0aGlzLnJlYXNvbiA9IHBhcnRzW2ZpZWxkcy5yZWFzb25dID8/ICcnO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDIzIGV4dGVuZHMgTGluZUV2ZW50MHgxNyB7fVxyXG4iLCJpbXBvcnQgTGluZUV2ZW50LCB7IExpbmVFdmVudFNvdXJjZSB9IGZyb20gJy4vTGluZUV2ZW50JztcclxuaW1wb3J0IEVtdWxhdG9yQ29tbW9uIGZyb20gJy4uLy4uL0VtdWxhdG9yQ29tbW9uJztcclxuaW1wb3J0IExvZ1JlcG9zaXRvcnkgZnJvbSAnLi9Mb2dSZXBvc2l0b3J5JztcclxuXHJcbmNvbnN0IGZpZWxkcyA9IHtcclxuICBpZDogMixcclxuICBuYW1lOiAzLFxyXG4gIHR5cGU6IDQsXHJcbiAgZWZmZWN0SWQ6IDUsXHJcbiAgZGFtYWdlOiA2LFxyXG4gIGN1cnJlbnRIcDogNyxcclxuICBtYXhIcDogOCxcclxuICBjdXJyZW50TXA6IDksXHJcbiAgbWF4TXA6IDEwLFxyXG4gIGN1cnJlbnRUcDogMTEsXHJcbiAgbWF4VHA6IDEyLFxyXG4gIHg6IDEzLFxyXG4gIHk6IDE0LFxyXG4gIHo6IDE1LFxyXG4gIGhlYWRpbmc6IDE2LFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLy8gRG9UL0hvVCBldmVudFxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MHgxOCBleHRlbmRzIExpbmVFdmVudCBpbXBsZW1lbnRzIExpbmVFdmVudFNvdXJjZSB7XHJcbiAgcHVibGljIHJlYWRvbmx5IHByb3BlckNhc2VDb252ZXJ0ZWRMaW5lOiBzdHJpbmc7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHR5cGU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgZWZmZWN0SWQ6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgZGFtYWdlOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGhwOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IG1heEhwOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IG1wOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IG1heE1wOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRwOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IG1heFRwOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHg6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgeTogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSB6OiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGhlYWRpbmc6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaXNTb3VyY2UgPSB0cnVlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZXBvOiBMb2dSZXBvc2l0b3J5LCBsaW5lOiBzdHJpbmcsIHBhcnRzOiBzdHJpbmdbXSkge1xyXG4gICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xyXG5cclxuICAgIHRoaXMuaWQgPSBwYXJ0c1tmaWVsZHMuaWRdPy50b1VwcGVyQ2FzZSgpID8/ICcnO1xyXG4gICAgdGhpcy5uYW1lID0gcGFydHNbZmllbGRzLm5hbWVdID8/ICcnO1xyXG5cclxuICAgIHRoaXMudHlwZSA9IHBhcnRzW2ZpZWxkcy50eXBlXSA/PyAnJztcclxuICAgIHRoaXMuZWZmZWN0SWQgPSBwYXJ0c1tmaWVsZHMuZWZmZWN0SWRdPy50b1VwcGVyQ2FzZSgpID8/ICcnO1xyXG4gICAgdGhpcy5kYW1hZ2UgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMuZGFtYWdlXSA/PyAnJywgMTYpO1xyXG5cclxuICAgIHRoaXMuaHAgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMuY3VycmVudEhwXSA/PyAnJyk7XHJcbiAgICB0aGlzLm1heEhwID0gcGFyc2VJbnQocGFydHNbZmllbGRzLm1heEhwXSA/PyAnJyk7XHJcbiAgICB0aGlzLm1wID0gcGFyc2VJbnQocGFydHNbZmllbGRzLmN1cnJlbnRNcF0gPz8gJycpO1xyXG4gICAgdGhpcy5tYXhNcCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy5tYXhNcF0gPz8gJycpO1xyXG4gICAgdGhpcy50cCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy5jdXJyZW50VHBdID8/ICcnKTtcclxuICAgIHRoaXMubWF4VHAgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMubWF4VHBdID8/ICcnKTtcclxuICAgIHRoaXMueCA9IHBhcnNlRmxvYXQocGFydHNbZmllbGRzLnhdID8/ICcnKTtcclxuICAgIHRoaXMueSA9IHBhcnNlRmxvYXQocGFydHNbZmllbGRzLnldID8/ICcnKTtcclxuICAgIHRoaXMueiA9IHBhcnNlRmxvYXQocGFydHNbZmllbGRzLnpdID8/ICcnKTtcclxuICAgIHRoaXMuaGVhZGluZyA9IHBhcnNlRmxvYXQocGFydHNbZmllbGRzLmhlYWRpbmddID8/ICcnKTtcclxuXHJcbiAgICByZXBvLnVwZGF0ZUNvbWJhdGFudCh0aGlzLmlkLCB7XHJcbiAgICAgIGpvYjogdW5kZWZpbmVkLFxyXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgIHNwYXduOiB0aGlzLnRpbWVzdGFtcCxcclxuICAgICAgZGVzcGF3bjogdGhpcy50aW1lc3RhbXAsXHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgZWZmZWN0TmFtZSA9ICcnO1xyXG4gICAgY29uc3QgcmVzb2x2ZWROYW1lID0gcmVwby5yZXNvbHZlTmFtZSh0aGlzLmlkLCB0aGlzLm5hbWUpO1xyXG5cclxuICAgIGlmICh0aGlzLmVmZmVjdElkIGluIExpbmVFdmVudDB4MTguc2hvd0VmZmVjdE5hbWVzRm9yKVxyXG4gICAgICBlZmZlY3ROYW1lID0gTGluZUV2ZW50MHgxOC5zaG93RWZmZWN0TmFtZXNGb3JbdGhpcy5lZmZlY3RJZF0gPz8gJyc7XHJcblxyXG4gICAgbGV0IGVmZmVjdFBhcnQgPSAnJztcclxuICAgIGlmIChlZmZlY3ROYW1lKVxyXG4gICAgICBlZmZlY3RQYXJ0ID0gZWZmZWN0TmFtZSArICcgJztcclxuXHJcbiAgICB0aGlzLmNvbnZlcnRlZExpbmUgPSB0aGlzLnByZWZpeCgpICsgZWZmZWN0UGFydCArIHRoaXMudHlwZSArXHJcbiAgICAgICcgVGljayBvbiAnICsgcmVzb2x2ZWROYW1lICtcclxuICAgICAgJyBmb3IgJyArIHRoaXMuZGFtYWdlLnRvU3RyaW5nKCkgKyAnIGRhbWFnZS4nO1xyXG5cclxuICAgIHRoaXMucHJvcGVyQ2FzZUNvbnZlcnRlZExpbmUgPSB0aGlzLnByZWZpeCgpICsgZWZmZWN0UGFydCArIHRoaXMudHlwZSArXHJcbiAgICAgICcgVGljayBvbiAnICsgRW11bGF0b3JDb21tb24ucHJvcGVyQ2FzZShyZXNvbHZlZE5hbWUpICtcclxuICAgICAgJyBmb3IgJyArIHRoaXMuZGFtYWdlLnRvU3RyaW5nKCkgKyAnIGRhbWFnZS4nO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNob3dFZmZlY3ROYW1lc0ZvcjogeyBbZWZmZWN0SWQ6IHN0cmluZ106IHN0cmluZyB9ID0ge1xyXG4gICAgJzRDNCc6ICdFeGNvZ25pdGlvbicsXHJcbiAgICAnMzVEJzogJ1dpbGRmaXJlJyxcclxuICAgICcxRjUnOiAnRG90b24nLFxyXG4gICAgJzJFRCc6ICdTYWx0ZWQgRWFydGgnLFxyXG4gICAgJzRCNSc6ICdGbGFtZXRocm93ZXInLFxyXG4gICAgJzJFMyc6ICdBc3lsdW0nLFxyXG4gICAgJzc3Nyc6ICdBc3lsdW0nLFxyXG4gICAgJzc5OCc6ICdTYWNyZWQgU29pbCcsXHJcbiAgICAnNEM3JzogJ0ZleSBVbmlvbicsXHJcbiAgICAnNzQyJzogJ05hc2NlbnQgR2xpbnQnLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lRXZlbnQyNCBleHRlbmRzIExpbmVFdmVudDB4MTggeyB9XHJcbiIsImltcG9ydCBMaW5lRXZlbnQgZnJvbSAnLi9MaW5lRXZlbnQnO1xyXG5pbXBvcnQgRW11bGF0b3JDb21tb24gZnJvbSAnLi4vLi4vRW11bGF0b3JDb21tb24nO1xyXG5pbXBvcnQgTG9nUmVwb3NpdG9yeSBmcm9tICcuL0xvZ1JlcG9zaXRvcnknO1xyXG5cclxuY29uc3QgZmllbGRzID0ge1xyXG4gIGlkOiAyLFxyXG4gIG5hbWU6IDMsXHJcbiAgdGFyZ2V0SWQ6IDQsXHJcbiAgdGFyZ2V0TmFtZTogNSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8vIENvbWJhdGFudCBkZWZlYXRlZCBldmVudFxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MHgxOSBleHRlbmRzIExpbmVFdmVudCB7XHJcbiAgcHVibGljIHJlYWRvbmx5IHByb3BlckNhc2VDb252ZXJ0ZWRMaW5lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0SWQ6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0TmFtZTogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZXBvOiBMb2dSZXBvc2l0b3J5LCBsaW5lOiBzdHJpbmcsIHBhcnRzOiBzdHJpbmdbXSkge1xyXG4gICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xyXG5cclxuICAgIHRoaXMuaWQgPSBwYXJ0c1tmaWVsZHMuaWRdPy50b1VwcGVyQ2FzZSgpID8/ICcnO1xyXG4gICAgdGhpcy5uYW1lID0gcGFydHNbZmllbGRzLm5hbWVdID8/ICcnO1xyXG4gICAgdGhpcy50YXJnZXRJZCA9IHBhcnRzW2ZpZWxkcy50YXJnZXRJZF0/LnRvVXBwZXJDYXNlKCkgPz8gJyc7XHJcbiAgICB0aGlzLnRhcmdldE5hbWUgPSBwYXJ0c1tmaWVsZHMudGFyZ2V0TmFtZV0gPz8gJyc7XHJcblxyXG4gICAgcmVwby51cGRhdGVDb21iYXRhbnQodGhpcy5pZCwge1xyXG4gICAgICBqb2I6IHVuZGVmaW5lZCxcclxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICBzcGF3bjogdGhpcy50aW1lc3RhbXAsXHJcbiAgICAgIGRlc3Bhd246IHRoaXMudGltZXN0YW1wLFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmVwby51cGRhdGVDb21iYXRhbnQodGhpcy50YXJnZXRJZCwge1xyXG4gICAgICBqb2I6IHVuZGVmaW5lZCxcclxuICAgICAgbmFtZTogdGhpcy50YXJnZXROYW1lLFxyXG4gICAgICBzcGF3bjogdGhpcy50aW1lc3RhbXAsXHJcbiAgICAgIGRlc3Bhd246IHRoaXMudGltZXN0YW1wLFxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IHJlc29sdmVkTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgbGV0IHJlc29sdmVkVGFyZ2V0TmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIGlmICh0aGlzLmlkICE9PSAnMDAnKVxyXG4gICAgICByZXNvbHZlZE5hbWUgPSByZXBvLnJlc29sdmVOYW1lKHRoaXMuaWQsIHRoaXMubmFtZSk7XHJcblxyXG4gICAgaWYgKHRoaXMudGFyZ2V0SWQgIT09ICcwMCcpXHJcbiAgICAgIHJlc29sdmVkVGFyZ2V0TmFtZSA9IHJlcG8ucmVzb2x2ZU5hbWUodGhpcy50YXJnZXRJZCwgdGhpcy50YXJnZXROYW1lKTtcclxuXHJcbiAgICBjb25zdCBkZWZlYXRlZE5hbWUgPSAocmVzb2x2ZWROYW1lID8/IHRoaXMubmFtZSk7XHJcbiAgICBjb25zdCBraWxsZXJOYW1lID0gKHJlc29sdmVkVGFyZ2V0TmFtZSA/PyB0aGlzLnRhcmdldE5hbWUpO1xyXG4gICAgdGhpcy5jb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArIGRlZmVhdGVkTmFtZSArXHJcbiAgICAgICcgd2FzIGRlZmVhdGVkIGJ5ICcgKyBraWxsZXJOYW1lICsgJy4nO1xyXG4gICAgdGhpcy5wcm9wZXJDYXNlQ29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgKyBFbXVsYXRvckNvbW1vbi5wcm9wZXJDYXNlKGRlZmVhdGVkTmFtZSkgK1xyXG4gICAgICAnIHdhcyBkZWZlYXRlZCBieSAnICsgRW11bGF0b3JDb21tb24ucHJvcGVyQ2FzZShraWxsZXJOYW1lKSArICcuJztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lRXZlbnQyNSBleHRlbmRzIExpbmVFdmVudDB4MTkgeyB9XHJcbiIsImltcG9ydCBMaW5lRXZlbnQsIHsgTGluZUV2ZW50QWJpbGl0eSB9IGZyb20gJy4vTGluZUV2ZW50JztcclxuaW1wb3J0IEVtdWxhdG9yQ29tbW9uIGZyb20gJy4uLy4uL0VtdWxhdG9yQ29tbW9uJztcclxuaW1wb3J0IExvZ1JlcG9zaXRvcnkgZnJvbSAnLi9Mb2dSZXBvc2l0b3J5JztcclxuXHJcbmNvbnN0IGZpZWxkcyA9IHtcclxuICBhYmlsaXR5SWQ6IDIsXHJcbiAgYWJpbGl0eU5hbWU6IDMsXHJcbiAgZHVyYXRpb25TdHJpbmc6IDQsXHJcbiAgaWQ6IDUsXHJcbiAgbmFtZTogNixcclxuICB0YXJnZXRJZDogNyxcclxuICB0YXJnZXROYW1lOiA4LFxyXG4gIHN0YWNrczogOSxcclxuICB0YXJnZXRIcDogMTAsXHJcbiAgc291cmNlSHA6IDExLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLy8gR2FpbiBzdGF0dXMgZWZmZWN0IGV2ZW50XHJcbi8vIERlbGliZXJhdGVseSBkb24ndCBmbGFnIHRoaXMgYXMgTGluZUV2ZW50U291cmNlIG9yIExpbmVFdmVudFRhcmdldFxyXG4vLyBiZWNhdXNlIDB4MUEgbGluZSB2YWx1ZXMgYXJlbid0IGFjY3VyYXRlXHJcbmV4cG9ydCBjbGFzcyBMaW5lRXZlbnQweDFBIGV4dGVuZHMgTGluZUV2ZW50IGltcGxlbWVudHMgTGluZUV2ZW50QWJpbGl0eSB7XHJcbiAgcHVibGljIHJlYWRvbmx5IHJlc29sdmVkTmFtZTogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSByZXNvbHZlZFRhcmdldE5hbWU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgZmFsbGJhY2tSZXNvbHZlZFRhcmdldE5hbWU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgcHJvcGVyQ2FzZUNvbnZlcnRlZExpbmU6IHN0cmluZztcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGFiaWxpdHlJZDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBhYmlsaXR5TmFtZTogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBkdXJhdGlvbkZsb2F0OiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGR1cmF0aW9uU3RyaW5nOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0SWQ6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0TmFtZTogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBzdGFja3M6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0SHA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaHA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaXNBYmlsaXR5ID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IocmVwbzogTG9nUmVwb3NpdG9yeSwgbGluZTogc3RyaW5nLCBwYXJ0czogc3RyaW5nW10pIHtcclxuICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuXHJcbiAgICB0aGlzLmFiaWxpdHlJZCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy5hYmlsaXR5SWRdPy50b1VwcGVyQ2FzZSgpID8/ICcnKTtcclxuICAgIHRoaXMuYWJpbGl0eU5hbWUgPSBwYXJ0c1tmaWVsZHMuYWJpbGl0eU5hbWVdID8/ICcnO1xyXG4gICAgdGhpcy5kdXJhdGlvblN0cmluZyA9IHBhcnRzW2ZpZWxkcy5kdXJhdGlvblN0cmluZ10gPz8gJyc7XHJcbiAgICB0aGlzLmR1cmF0aW9uRmxvYXQgPSBwYXJzZUZsb2F0KHRoaXMuZHVyYXRpb25TdHJpbmcpO1xyXG4gICAgdGhpcy5pZCA9IHBhcnRzW2ZpZWxkcy5pZF0/LnRvVXBwZXJDYXNlKCkgPz8gJyc7XHJcbiAgICB0aGlzLm5hbWUgPSBwYXJ0c1tmaWVsZHMubmFtZV0gPz8gJyc7XHJcbiAgICB0aGlzLnRhcmdldElkID0gcGFydHNbZmllbGRzLnRhcmdldElkXT8udG9VcHBlckNhc2UoKSA/PyAnJztcclxuICAgIHRoaXMudGFyZ2V0TmFtZSA9IHBhcnRzW2ZpZWxkcy50YXJnZXROYW1lXSA/PyAnJztcclxuICAgIHRoaXMuc3RhY2tzID0gcGFyc2VJbnQocGFydHNbZmllbGRzLnN0YWNrc10gPz8gJzAnKTtcclxuICAgIHRoaXMudGFyZ2V0SHAgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMudGFyZ2V0SHBdID8/ICcnKTtcclxuICAgIHRoaXMuaHAgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMuc291cmNlSHBdID8/ICcnKTtcclxuXHJcbiAgICByZXBvLnVwZGF0ZUNvbWJhdGFudCh0aGlzLmlkLCB7XHJcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgc3Bhd246IHRoaXMudGltZXN0YW1wLFxyXG4gICAgICBkZXNwYXduOiB0aGlzLnRpbWVzdGFtcCxcclxuICAgICAgam9iOiB1bmRlZmluZWQsXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXBvLnVwZGF0ZUNvbWJhdGFudCh0aGlzLnRhcmdldElkLCB7XHJcbiAgICAgIG5hbWU6IHRoaXMudGFyZ2V0TmFtZSxcclxuICAgICAgc3Bhd246IHRoaXMudGltZXN0YW1wLFxyXG4gICAgICBkZXNwYXduOiB0aGlzLnRpbWVzdGFtcCxcclxuICAgICAgam9iOiB1bmRlZmluZWQsXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnJlc29sdmVkTmFtZSA9IHJlcG8ucmVzb2x2ZU5hbWUodGhpcy5pZCwgdGhpcy5uYW1lKTtcclxuICAgIHRoaXMucmVzb2x2ZWRUYXJnZXROYW1lID0gcmVwby5yZXNvbHZlTmFtZSh0aGlzLnRhcmdldElkLCB0aGlzLnRhcmdldE5hbWUpO1xyXG5cclxuICAgIHRoaXMuZmFsbGJhY2tSZXNvbHZlZFRhcmdldE5hbWUgPVxyXG4gICAgICByZXBvLnJlc29sdmVOYW1lKHRoaXMuaWQsIHRoaXMubmFtZSwgdGhpcy50YXJnZXRJZCwgdGhpcy50YXJnZXROYW1lKTtcclxuXHJcbiAgICBsZXQgc3RhY2tDb3VudFRleHQgPSAnJztcclxuICAgIGlmICh0aGlzLnN0YWNrcyA+IDAgJiYgdGhpcy5zdGFja3MgPCAyMCAmJlxyXG4gICAgICBMaW5lRXZlbnQweDFBLnNob3dTdGFja0NvdW50Rm9yLmluY2x1ZGVzKHRoaXMuYWJpbGl0eUlkKSlcclxuICAgICAgc3RhY2tDb3VudFRleHQgPSAnICgnICsgdGhpcy5zdGFja3MudG9TdHJpbmcoKSArICcpJztcclxuXHJcbiAgICB0aGlzLmNvbnZlcnRlZExpbmUgPSB0aGlzLnByZWZpeCgpICsgdGhpcy50YXJnZXRJZCArXHJcbiAgICAgICc6JyArIHRoaXMudGFyZ2V0TmFtZSArXHJcbiAgICAgICcgZ2FpbnMgdGhlIGVmZmVjdCBvZiAnICsgdGhpcy5hYmlsaXR5TmFtZSArXHJcbiAgICAgICcgZnJvbSAnICsgdGhpcy5mYWxsYmFja1Jlc29sdmVkVGFyZ2V0TmFtZSArXHJcbiAgICAgICcgZm9yICcgKyB0aGlzLmR1cmF0aW9uU3RyaW5nICsgJyBTZWNvbmRzLicgKyBzdGFja0NvdW50VGV4dDtcclxuXHJcbiAgICB0aGlzLnByb3BlckNhc2VDb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArIHRoaXMudGFyZ2V0SWQgK1xyXG4gICAgICAnOicgKyBFbXVsYXRvckNvbW1vbi5wcm9wZXJDYXNlKHRoaXMudGFyZ2V0TmFtZSkgK1xyXG4gICAgICAnIGdhaW5zIHRoZSBlZmZlY3Qgb2YgJyArIHRoaXMuYWJpbGl0eU5hbWUgK1xyXG4gICAgICAnIGZyb20gJyArIEVtdWxhdG9yQ29tbW9uLnByb3BlckNhc2UodGhpcy5mYWxsYmFja1Jlc29sdmVkVGFyZ2V0TmFtZSkgK1xyXG4gICAgICAnIGZvciAnICsgdGhpcy5kdXJhdGlvblN0cmluZyArICcgU2Vjb25kcy4nICsgc3RhY2tDb3VudFRleHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2hvd1N0YWNrQ291bnRGb3I6IHJlYWRvbmx5IG51bWJlcltdID0gW1xyXG4gICAgMzA0LCAvLyBBZXRoZXJmbG93XHJcbiAgICA0MDYsIC8vIFZ1bG5lcmFiaWxpdHkgRG93blxyXG4gICAgMzUwLCAvLyBWdWxuZXJhYmlsaXR5IERvd25cclxuICAgIDcxNCwgLy8gVnVsbmVyYWJpbGl0eSBVcFxyXG4gICAgNTA1LCAvLyBEYW1hZ2UgVXBcclxuICAgIDEyMzksIC8vIEVtYm9sZGVuXHJcbiAgICAxMjk3LCAvLyBFbWJvbGRlblxyXG4gIF0gYXMgY29uc3Q7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lRXZlbnQyNiBleHRlbmRzIExpbmVFdmVudDB4MUEge31cclxuIiwiaW1wb3J0IExpbmVFdmVudCwgeyBMaW5lRXZlbnRTb3VyY2UgfSBmcm9tICcuL0xpbmVFdmVudCc7XHJcbmltcG9ydCBMb2dSZXBvc2l0b3J5IGZyb20gJy4vTG9nUmVwb3NpdG9yeSc7XHJcblxyXG5jb25zdCBmaWVsZHMgPSB7XHJcbiAgdGFyZ2V0SWQ6IDIsXHJcbiAgdGFyZ2V0TmFtZTogMyxcclxuICBoZWFkbWFya2VySWQ6IDYsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBIZWFkIG1hcmtlciBldmVudFxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MHgxQiBleHRlbmRzIExpbmVFdmVudCBpbXBsZW1lbnRzIExpbmVFdmVudFNvdXJjZSB7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgaGVhZG1hcmtlcklkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlzU291cmNlID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IocmVwbzogTG9nUmVwb3NpdG9yeSwgbGluZTogc3RyaW5nLCBwYXJ0czogc3RyaW5nW10pIHtcclxuICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuXHJcbiAgICB0aGlzLmlkID0gcGFydHNbZmllbGRzLnRhcmdldElkXT8udG9VcHBlckNhc2UoKSA/PyAnJztcclxuICAgIHRoaXMubmFtZSA9IHBhcnRzW2ZpZWxkcy50YXJnZXROYW1lXSA/PyAnJztcclxuICAgIHRoaXMuaGVhZG1hcmtlcklkID0gcGFydHNbZmllbGRzLmhlYWRtYXJrZXJJZF0gPz8gJyc7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MjcgZXh0ZW5kcyBMaW5lRXZlbnQweDFCIHt9XHJcbiIsImltcG9ydCBMaW5lRXZlbnQgZnJvbSAnLi9MaW5lRXZlbnQnO1xyXG5pbXBvcnQgTG9nUmVwb3NpdG9yeSBmcm9tICcuL0xvZ1JlcG9zaXRvcnknO1xyXG5cclxuY29uc3QgZmllbGRzID0ge1xyXG4gIG9wZXJhdGlvbjogMixcclxuICB3YXltYXJrOiAzLFxyXG4gIGlkOiA0LFxyXG4gIG5hbWU6IDUsXHJcbiAgeDogNixcclxuICB5OiA3LFxyXG4gIHo6IDgsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBGbG9vciB3YXltYXJrZXIgZXZlbnRcclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDB4MUMgZXh0ZW5kcyBMaW5lRXZlbnQge1xyXG4gIHB1YmxpYyByZWFkb25seSBvcGVyYXRpb246IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgd2F5bWFyazogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHg6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgeTogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSB6OiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlcG86IExvZ1JlcG9zaXRvcnksIGxpbmU6IHN0cmluZywgcGFydHM6IHN0cmluZ1tdKSB7XHJcbiAgICBzdXBlcihyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcblxyXG4gICAgdGhpcy5vcGVyYXRpb24gPSBwYXJ0c1tmaWVsZHMub3BlcmF0aW9uXSA/PyAnJztcclxuICAgIHRoaXMud2F5bWFyayA9IHBhcnRzW2ZpZWxkcy53YXltYXJrXSA/PyAnJztcclxuICAgIHRoaXMuaWQgPSBwYXJ0c1tmaWVsZHMuaWRdPy50b1VwcGVyQ2FzZSgpID8/ICcnO1xyXG4gICAgdGhpcy5uYW1lID0gcGFydHNbZmllbGRzLm5hbWVdID8/ICcnO1xyXG4gICAgdGhpcy54ID0gcGFydHNbZmllbGRzLnhdID8/ICcnO1xyXG4gICAgdGhpcy55ID0gcGFydHNbZmllbGRzLnldID8/ICcnO1xyXG4gICAgdGhpcy56ID0gcGFydHNbZmllbGRzLnpdID8/ICcnO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDI4IGV4dGVuZHMgTGluZUV2ZW50MHgxQyB7fVxyXG4iLCJpbXBvcnQgTGluZUV2ZW50IGZyb20gJy4vTGluZUV2ZW50JztcclxuaW1wb3J0IExvZ1JlcG9zaXRvcnkgZnJvbSAnLi9Mb2dSZXBvc2l0b3J5JztcclxuXHJcbmNvbnN0IGZpZWxkcyA9IHtcclxuICBvcGVyYXRpb246IDIsXHJcbiAgd2F5bWFyazogMyxcclxuICBpZDogNCxcclxuICBuYW1lOiA1LFxyXG4gIHRhcmdldElkOiA2LFxyXG4gIHRhcmdldE5hbWU6IDcsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBXYXltYXJrZXJcclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDB4MUQgZXh0ZW5kcyBMaW5lRXZlbnQge1xyXG4gIHB1YmxpYyByZWFkb25seSBvcGVyYXRpb246IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgd2F5bWFyazogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldElkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldE5hbWU6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IocmVwbzogTG9nUmVwb3NpdG9yeSwgbGluZTogc3RyaW5nLCBwYXJ0czogc3RyaW5nW10pIHtcclxuICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuXHJcbiAgICB0aGlzLm9wZXJhdGlvbiA9IHBhcnRzW2ZpZWxkcy5vcGVyYXRpb25dID8/ICcnO1xyXG4gICAgdGhpcy53YXltYXJrID0gcGFydHNbZmllbGRzLndheW1hcmtdID8/ICcnO1xyXG4gICAgdGhpcy5pZCA9IHBhcnRzW2ZpZWxkcy5pZF0/LnRvVXBwZXJDYXNlKCkgPz8gJyc7XHJcbiAgICB0aGlzLm5hbWUgPSBwYXJ0c1tmaWVsZHMubmFtZV0gPz8gJyc7XHJcbiAgICB0aGlzLnRhcmdldElkID0gcGFydHNbZmllbGRzLnRhcmdldElkXT8udG9VcHBlckNhc2UoKSA/PyAnJztcclxuICAgIHRoaXMudGFyZ2V0TmFtZSA9IHBhcnRzW2ZpZWxkcy50YXJnZXROYW1lXSA/PyAnJztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lRXZlbnQyOSBleHRlbmRzIExpbmVFdmVudDB4MUQge31cclxuIiwiaW1wb3J0IHsgTGluZUV2ZW50MHgxQSB9IGZyb20gJy4vTGluZUV2ZW50MHgxQSc7XHJcbmltcG9ydCBFbXVsYXRvckNvbW1vbiBmcm9tICcuLi8uLi9FbXVsYXRvckNvbW1vbic7XHJcbmltcG9ydCBMb2dSZXBvc2l0b3J5IGZyb20gJy4vTG9nUmVwb3NpdG9yeSc7XHJcblxyXG4vLyBMb3NlIHN0YXR1cyBlZmZlY3QgZXZlbnRcclxuLy8gRXh0ZW5kIHRoZSBnYWluIHN0YXR1cyBldmVudCB0byByZWR1Y2UgZHVwbGljYXRlIGNvZGUgc2luY2UgdGhleSdyZVxyXG4vLyB0aGUgc2FtZSBmcm9tIGEgZGF0YSBwZXJzcGVjdGl2ZVxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MHgxRSBleHRlbmRzIExpbmVFdmVudDB4MUEge1xyXG4gIHB1YmxpYyByZWFkb25seSBwcm9wZXJDYXNlQ29udmVydGVkTGluZTogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZXBvOiBMb2dSZXBvc2l0b3J5LCBsaW5lOiBzdHJpbmcsIHBhcnRzOiBzdHJpbmdbXSkge1xyXG4gICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xyXG5cclxuICAgIGxldCBzdGFja0NvdW50VGV4dCA9ICcnO1xyXG4gICAgaWYgKHRoaXMuc3RhY2tzID4gMCAmJiB0aGlzLnN0YWNrcyA8IDIwICYmXHJcbiAgICAgIExpbmVFdmVudDB4MUEuc2hvd1N0YWNrQ291bnRGb3IuaW5jbHVkZXModGhpcy5hYmlsaXR5SWQpKVxyXG4gICAgICBzdGFja0NvdW50VGV4dCA9ICcgKCcgKyB0aGlzLnN0YWNrcy50b1N0cmluZygpICsgJyknO1xyXG5cclxuICAgIHRoaXMuY29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgKyB0aGlzLnRhcmdldElkICtcclxuICAgICAgJzonICsgdGhpcy50YXJnZXROYW1lICtcclxuICAgICAgJyBsb3NlcyB0aGUgZWZmZWN0IG9mICcgKyB0aGlzLmFiaWxpdHlOYW1lICtcclxuICAgICAgJyBmcm9tICcgKyB0aGlzLmZhbGxiYWNrUmVzb2x2ZWRUYXJnZXROYW1lICtcclxuICAgICAgJyBmb3IgJyArIHRoaXMuZHVyYXRpb25TdHJpbmcgKyAnIFNlY29uZHMuJyArIHN0YWNrQ291bnRUZXh0O1xyXG5cclxuICAgIHRoaXMucHJvcGVyQ2FzZUNvbnZlcnRlZExpbmUgPSB0aGlzLnByZWZpeCgpICsgdGhpcy50YXJnZXRJZCArXHJcbiAgICAgICc6JyArIEVtdWxhdG9yQ29tbW9uLnByb3BlckNhc2UodGhpcy50YXJnZXROYW1lKSArXHJcbiAgICAgICcgbG9zZXMgdGhlIGVmZmVjdCBvZiAnICsgdGhpcy5hYmlsaXR5TmFtZSArXHJcbiAgICAgICcgZnJvbSAnICsgRW11bGF0b3JDb21tb24ucHJvcGVyQ2FzZSh0aGlzLmZhbGxiYWNrUmVzb2x2ZWRUYXJnZXROYW1lKSArXHJcbiAgICAgICcgZm9yICcgKyB0aGlzLmR1cmF0aW9uU3RyaW5nICsgJyBTZWNvbmRzLicgKyBzdGFja0NvdW50VGV4dDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lRXZlbnQzMCBleHRlbmRzIExpbmVFdmVudDB4MUUgeyB9XHJcbiIsImltcG9ydCBMaW5lRXZlbnQgZnJvbSAnLi9MaW5lRXZlbnQnO1xyXG5pbXBvcnQgRW11bGF0b3JDb21tb24gZnJvbSAnLi4vLi4vRW11bGF0b3JDb21tb24nO1xyXG5pbXBvcnQgTG9nUmVwb3NpdG9yeSBmcm9tICcuL0xvZ1JlcG9zaXRvcnknO1xyXG5cclxuY29uc3Qgc3BsaXRGdW5jID0gKHM6IHN0cmluZykgPT4gW1xyXG4gIHMuc3Vic3RyKDYsIDIpLFxyXG4gIHMuc3Vic3RyKDQsIDIpLFxyXG4gIHMuc3Vic3RyKDIsIDIpLFxyXG4gIHMuc3Vic3RyKDAsIDIpLFxyXG5dO1xyXG5cclxuY29uc3QgZmllbGRzID0ge1xyXG4gIGlkOiAyLFxyXG4gIGRhdGFCeXRlczE6IDMsXHJcbiAgZGF0YUJ5dGVzMjogNCxcclxuICBkYXRhQnl0ZXMzOiA1LFxyXG4gIGRhdGFCeXRlczQ6IDYsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBKb2IgZ2F1Z2UgZXZlbnRcclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDB4MUYgZXh0ZW5kcyBMaW5lRXZlbnQge1xyXG4gIHB1YmxpYyByZWFkb25seSBqb2JHYXVnZUJ5dGVzOiBzdHJpbmdbXTtcclxuICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBwcm9wZXJDYXNlQ29udmVydGVkTGluZTogc3RyaW5nO1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgaWQ6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgZGF0YUJ5dGVzMTogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBkYXRhQnl0ZXMyOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGRhdGFCeXRlczM6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgZGF0YUJ5dGVzNDogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZXBvOiBMb2dSZXBvc2l0b3J5LCBsaW5lOiBzdHJpbmcsIHBhcnRzOiBzdHJpbmdbXSkge1xyXG4gICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xyXG5cclxuICAgIHRoaXMuaWQgPSBwYXJ0c1tmaWVsZHMuaWRdPy50b1VwcGVyQ2FzZSgpID8/ICcnO1xyXG4gICAgdGhpcy5kYXRhQnl0ZXMxID0gRW11bGF0b3JDb21tb24uemVyb1BhZChwYXJ0c1tmaWVsZHMuZGF0YUJ5dGVzMV0gPz8gJycpO1xyXG4gICAgdGhpcy5kYXRhQnl0ZXMyID0gRW11bGF0b3JDb21tb24uemVyb1BhZChwYXJ0c1tmaWVsZHMuZGF0YUJ5dGVzMl0gPz8gJycpO1xyXG4gICAgdGhpcy5kYXRhQnl0ZXMzID0gRW11bGF0b3JDb21tb24uemVyb1BhZChwYXJ0c1tmaWVsZHMuZGF0YUJ5dGVzM10gPz8gJycpO1xyXG4gICAgdGhpcy5kYXRhQnl0ZXM0ID0gRW11bGF0b3JDb21tb24uemVyb1BhZChwYXJ0c1tmaWVsZHMuZGF0YUJ5dGVzNF0gPz8gJycpO1xyXG5cclxuICAgIHRoaXMuam9iR2F1Z2VCeXRlcyA9IFtcclxuICAgICAgLi4uc3BsaXRGdW5jKHRoaXMuZGF0YUJ5dGVzMSksXHJcbiAgICAgIC4uLnNwbGl0RnVuYyh0aGlzLmRhdGFCeXRlczIpLFxyXG4gICAgICAuLi5zcGxpdEZ1bmModGhpcy5kYXRhQnl0ZXMzKSxcclxuICAgICAgLi4uc3BsaXRGdW5jKHRoaXMuZGF0YUJ5dGVzNCksXHJcbiAgICBdO1xyXG5cclxuICAgIHRoaXMubmFtZSA9IHJlcG8uQ29tYmF0YW50c1t0aGlzLmlkXT8ubmFtZSB8fCAnJztcclxuXHJcbiAgICByZXBvLnVwZGF0ZUNvbWJhdGFudCh0aGlzLmlkLCB7XHJcbiAgICAgIG5hbWU6IHJlcG8uQ29tYmF0YW50c1t0aGlzLmlkXT8ubmFtZSxcclxuICAgICAgc3Bhd246IHRoaXMudGltZXN0YW1wLFxyXG4gICAgICBkZXNwYXduOiB0aGlzLnRpbWVzdGFtcCxcclxuICAgICAgam9iOiB0aGlzLmpvYkdhdWdlQnl0ZXNbMF0/LnRvVXBwZXJDYXNlKCksXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmNvbnZlcnRlZExpbmUgPSB0aGlzLnByZWZpeCgpICtcclxuICAgICAgdGhpcy5pZCArICc6JyArIHRoaXMubmFtZSArXHJcbiAgICAgICc6JyArIHRoaXMuZGF0YUJ5dGVzMSArXHJcbiAgICAgICc6JyArIHRoaXMuZGF0YUJ5dGVzMiArXHJcbiAgICAgICc6JyArIHRoaXMuZGF0YUJ5dGVzMyArXHJcbiAgICAgICc6JyArIHRoaXMuZGF0YUJ5dGVzNDtcclxuICAgIHRoaXMucHJvcGVyQ2FzZUNvbnZlcnRlZExpbmUgPSB0aGlzLnByZWZpeCgpICtcclxuICAgICAgdGhpcy5pZCArICc6JyArIChFbXVsYXRvckNvbW1vbi5wcm9wZXJDYXNlKHRoaXMubmFtZSkpICtcclxuICAgICAgJzonICsgdGhpcy5kYXRhQnl0ZXMxICtcclxuICAgICAgJzonICsgdGhpcy5kYXRhQnl0ZXMyICtcclxuICAgICAgJzonICsgdGhpcy5kYXRhQnl0ZXMzICtcclxuICAgICAgJzonICsgdGhpcy5kYXRhQnl0ZXM0O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDMxIGV4dGVuZHMgTGluZUV2ZW50MHgxRiB7fVxyXG4iLCJpbXBvcnQgTGluZUV2ZW50LCB7IExpbmVFdmVudFNvdXJjZSB9IGZyb20gJy4vTGluZUV2ZW50JztcclxuaW1wb3J0IExvZ1JlcG9zaXRvcnkgZnJvbSAnLi9Mb2dSZXBvc2l0b3J5JztcclxuXHJcbmNvbnN0IGZpZWxkcyA9IHtcclxuICBpZDogMixcclxuICBuYW1lOiAzLFxyXG4gIHRhcmdldElkOiA0LFxyXG4gIHRhcmdldE5hbWU6IDUsXHJcbiAgdGFyZ2V0YWJsZTogNixcclxufSBhcyBjb25zdDtcclxuXHJcbi8vIE5hbWVwbGF0ZSB0b2dnbGVcclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDB4MjIgZXh0ZW5kcyBMaW5lRXZlbnQgaW1wbGVtZW50cyBMaW5lRXZlbnRTb3VyY2Uge1xyXG4gIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldElkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldE5hbWU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0YWJsZTogYm9vbGVhbjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaXNTb3VyY2UgPSB0cnVlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZXBvOiBMb2dSZXBvc2l0b3J5LCBsaW5lOiBzdHJpbmcsIHBhcnRzOiBzdHJpbmdbXSkge1xyXG4gICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xyXG5cclxuICAgIHRoaXMuaWQgPSBwYXJ0c1tmaWVsZHMuaWRdPy50b1VwcGVyQ2FzZSgpID8/ICcnO1xyXG4gICAgdGhpcy5uYW1lID0gcGFydHNbZmllbGRzLm5hbWVdID8/ICcnO1xyXG4gICAgdGhpcy50YXJnZXRJZCA9IHBhcnRzW2ZpZWxkcy50YXJnZXRJZF0/LnRvVXBwZXJDYXNlKCkgPz8gJyc7XHJcbiAgICB0aGlzLnRhcmdldE5hbWUgPSBwYXJ0c1tmaWVsZHMudGFyZ2V0TmFtZV0gPz8gJyc7XHJcbiAgICB0aGlzLnRhcmdldGFibGUgPSAhIXBhcnNlSW50KHBhcnRzW2ZpZWxkcy50YXJnZXRhYmxlXSA/PyAnJywgMTYpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDM0IGV4dGVuZHMgTGluZUV2ZW50MHgyMiB7fVxyXG4iLCJpbXBvcnQgTGluZUV2ZW50IGZyb20gJy4vTGluZUV2ZW50JztcclxuaW1wb3J0IExvZ1JlcG9zaXRvcnkgZnJvbSAnLi9Mb2dSZXBvc2l0b3J5JztcclxuXHJcbmNvbnN0IGZpZWxkcyA9IHtcclxuICBpZDogMixcclxuICBuYW1lOiAzLFxyXG4gIHRhcmdldElkOiA0LFxyXG4gIHRhcmdldE5hbWU6IDUsXHJcbiAgdGV0aGVySWQ6IDgsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBUZXRoZXIgZXZlbnRcclxuZXhwb3J0IGNsYXNzIExpbmVFdmVudDB4MjMgZXh0ZW5kcyBMaW5lRXZlbnQge1xyXG4gIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldElkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHRhcmdldE5hbWU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgdGV0aGVySWQ6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IocmVwbzogTG9nUmVwb3NpdG9yeSwgbGluZTogc3RyaW5nLCBwYXJ0czogc3RyaW5nW10pIHtcclxuICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuXHJcbiAgICB0aGlzLmlkID0gcGFydHNbZmllbGRzLmlkXT8udG9VcHBlckNhc2UoKSA/PyAnJztcclxuICAgIHRoaXMubmFtZSA9IHBhcnRzW2ZpZWxkcy5uYW1lXSA/PyAnJztcclxuICAgIHRoaXMudGFyZ2V0SWQgPSBwYXJ0c1tmaWVsZHMudGFyZ2V0SWRdPy50b1VwcGVyQ2FzZSgpID8/ICcnO1xyXG4gICAgdGhpcy50YXJnZXROYW1lID0gcGFydHNbZmllbGRzLnRhcmdldE5hbWVdID8/ICcnO1xyXG4gICAgdGhpcy50ZXRoZXJJZCA9IHBhcnRzW2ZpZWxkcy50ZXRoZXJJZF0gPz8gJyc7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MzUgZXh0ZW5kcyBMaW5lRXZlbnQweDIzIHt9XHJcbiIsImltcG9ydCBMaW5lRXZlbnQgZnJvbSAnLi9MaW5lRXZlbnQnO1xyXG5pbXBvcnQgTG9nUmVwb3NpdG9yeSBmcm9tICcuL0xvZ1JlcG9zaXRvcnknO1xyXG5cclxuY29uc3QgZmllbGRzID0ge1xyXG4gIHZhbHVlSGV4OiAyLFxyXG4gIGJhcnM6IDMsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBMaW1pdCBnYXVnZSBldmVudFxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MHgyNCBleHRlbmRzIExpbmVFdmVudCB7XHJcbiAgcHVibGljIHJlYWRvbmx5IHZhbHVlSGV4OiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IHZhbHVlRGVjOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGJhcnM6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IocmVwbzogTG9nUmVwb3NpdG9yeSwgbGluZTogc3RyaW5nLCBwYXJ0czogc3RyaW5nW10pIHtcclxuICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuXHJcbiAgICB0aGlzLnZhbHVlSGV4ID0gcGFydHNbZmllbGRzLnZhbHVlSGV4XSA/PyAnJztcclxuICAgIHRoaXMudmFsdWVEZWMgPSBwYXJzZUludCh0aGlzLnZhbHVlSGV4LCAxNik7XHJcbiAgICB0aGlzLmJhcnMgPSBwYXJ0c1tmaWVsZHMuYmFyc10gPz8gJyc7XHJcblxyXG4gICAgdGhpcy5jb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArICdMaW1pdCBCcmVhazogJyArIHRoaXMudmFsdWVIZXg7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MzYgZXh0ZW5kcyBMaW5lRXZlbnQweDI0IHt9XHJcbiIsImltcG9ydCBMaW5lRXZlbnQsIHsgTGluZUV2ZW50U291cmNlIH0gZnJvbSAnLi9MaW5lRXZlbnQnO1xyXG5pbXBvcnQgTG9nUmVwb3NpdG9yeSBmcm9tICcuL0xvZ1JlcG9zaXRvcnknO1xyXG5cclxuY29uc3QgZmllbGRzID0ge1xyXG4gIGlkOiAyLFxyXG4gIG5hbWU6IDMsXHJcbiAgc2VxdWVuY2VJZDogNCxcclxuICBjdXJyZW50SHA6IDUsXHJcbiAgbWF4SHA6IDYsXHJcbiAgY3VycmVudE1wOiA3LFxyXG4gIG1heE1wOiA4LFxyXG4gIGN1cnJlbnRUcDogOSxcclxuICBtYXhUcDogMTAsXHJcbiAgeDogMTEsXHJcbiAgeTogMTIsXHJcbiAgejogMTMsXHJcbiAgaGVhZGluZzogMTQsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBBY3Rpb24gc3luYyBldmVudFxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MHgyNSBleHRlbmRzIExpbmVFdmVudCBpbXBsZW1lbnRzIExpbmVFdmVudFNvdXJjZSB7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgc2VxdWVuY2VJZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBocDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBtYXhIcDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBtcDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBtYXhNcDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSB0cDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBtYXhUcDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSB4OiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHk6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgejogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBoZWFkaW5nOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlzU291cmNlID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IocmVwbzogTG9nUmVwb3NpdG9yeSwgbGluZTogc3RyaW5nLCBwYXJ0czogc3RyaW5nW10pIHtcclxuICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuXHJcbiAgICB0aGlzLmlkID0gcGFydHNbZmllbGRzLmlkXT8udG9VcHBlckNhc2UoKSA/PyAnJztcclxuICAgIHRoaXMubmFtZSA9IHBhcnRzW2ZpZWxkcy5uYW1lXSA/PyAnJztcclxuICAgIHRoaXMuc2VxdWVuY2VJZCA9IHBhcnRzW2ZpZWxkcy5zZXF1ZW5jZUlkXSA/PyAnJztcclxuICAgIHRoaXMuaHAgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMuY3VycmVudEhwXSA/PyAnJyk7XHJcbiAgICB0aGlzLm1heEhwID0gcGFyc2VJbnQocGFydHNbZmllbGRzLm1heEhwXSA/PyAnJyk7XHJcbiAgICB0aGlzLm1wID0gcGFyc2VJbnQocGFydHNbZmllbGRzLmN1cnJlbnRNcF0gPz8gJycpO1xyXG4gICAgdGhpcy5tYXhNcCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy5tYXhNcF0gPz8gJycpO1xyXG4gICAgdGhpcy50cCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy5jdXJyZW50VHBdID8/ICcnKTtcclxuICAgIHRoaXMubWF4VHAgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMubWF4VHBdID8/ICcnKTtcclxuICAgIHRoaXMueCA9IHBhcnNlRmxvYXQocGFydHNbZmllbGRzLnhdID8/ICcnKTtcclxuICAgIHRoaXMueSA9IHBhcnNlRmxvYXQocGFydHNbZmllbGRzLnldID8/ICcnKTtcclxuICAgIHRoaXMueiA9IHBhcnNlRmxvYXQocGFydHNbZmllbGRzLnpdID8/ICcnKTtcclxuICAgIHRoaXMuaGVhZGluZyA9IHBhcnNlRmxvYXQocGFydHNbZmllbGRzLmhlYWRpbmddID8/ICcnKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lRXZlbnQzNyBleHRlbmRzIExpbmVFdmVudDB4MjUge31cclxuIiwiaW1wb3J0IExpbmVFdmVudCwgeyBMaW5lRXZlbnRKb2JMZXZlbCwgTGluZUV2ZW50U291cmNlIH0gZnJvbSAnLi9MaW5lRXZlbnQnO1xyXG5pbXBvcnQgRW11bGF0b3JDb21tb24gZnJvbSAnLi4vLi4vRW11bGF0b3JDb21tb24nO1xyXG5pbXBvcnQgVXRpbCBmcm9tICcuLi8uLi8uLi8uLi8uLi9yZXNvdXJjZXMvdXRpbCc7XHJcbmltcG9ydCBMb2dSZXBvc2l0b3J5IGZyb20gJy4vTG9nUmVwb3NpdG9yeSc7XHJcbmltcG9ydCB7IEpvYiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3R5cGVzL2pvYic7XHJcblxyXG5jb25zdCBmaWVsZHMgPSB7XHJcbiAgaWQ6IDIsXHJcbiAgbmFtZTogMyxcclxuICBqb2JMZXZlbERhdGE6IDQsXHJcbiAgY3VycmVudEhwOiA1LFxyXG4gIG1heEhwOiA2LFxyXG4gIGN1cnJlbnRNcDogNyxcclxuICBtYXhNcDogOCxcclxuICBjdXJyZW50VHA6IDksXHJcbiAgbWF4VHA6IDEwLFxyXG4gIHg6IDExLFxyXG4gIHk6IDEyLFxyXG4gIHo6IDEzLFxyXG4gIGhlYWRpbmc6IDE0LFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLy8gTmV0d29yayBzdGF0dXMgZWZmZWN0IGV2ZW50XHJcbmV4cG9ydCBjbGFzcyBMaW5lRXZlbnQweDI2IGV4dGVuZHMgTGluZUV2ZW50IGltcGxlbWVudHMgTGluZUV2ZW50U291cmNlLCBMaW5lRXZlbnRKb2JMZXZlbCB7XHJcbiAgcHVibGljIHJlYWRvbmx5IGpvYklkSGV4OiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGpvYklkOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGpvYjogSm9iO1xyXG4gIHB1YmxpYyByZWFkb25seSBsZXZlbDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IGpvYkxldmVsRGF0YTogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBocDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBtYXhIcDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBtcDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBtYXhNcDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSB0cDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBtYXhUcDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSB4OiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHk6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgejogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBoZWFkaW5nOiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlzU291cmNlID0gdHJ1ZTtcclxuICBwdWJsaWMgcmVhZG9ubHkgaXNKb2JMZXZlbCA9IHRydWU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlcG86IExvZ1JlcG9zaXRvcnksIGxpbmU6IHN0cmluZywgcGFydHM6IHN0cmluZ1tdKSB7XHJcbiAgICBzdXBlcihyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcblxyXG4gICAgdGhpcy5pZCA9IHBhcnRzW2ZpZWxkcy5pZF0/LnRvVXBwZXJDYXNlKCkgPz8gJyc7XHJcbiAgICB0aGlzLm5hbWUgPSBwYXJ0c1tmaWVsZHMubmFtZV0gPz8gJyc7XHJcblxyXG4gICAgdGhpcy5qb2JMZXZlbERhdGEgPSBwYXJ0c1tmaWVsZHMuam9iTGV2ZWxEYXRhXSA/PyAnJztcclxuXHJcbiAgICB0aGlzLmhwID0gcGFyc2VJbnQocGFydHNbZmllbGRzLmN1cnJlbnRIcF0gPz8gJycpO1xyXG4gICAgdGhpcy5tYXhIcCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy5tYXhIcF0gPz8gJycpO1xyXG4gICAgdGhpcy5tcCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy5jdXJyZW50TXBdID8/ICcnKTtcclxuICAgIHRoaXMubWF4TXAgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMubWF4TXBdID8/ICcnKTtcclxuICAgIHRoaXMudHAgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMuY3VycmVudFRwXSA/PyAnJyk7XHJcbiAgICB0aGlzLm1heFRwID0gcGFyc2VJbnQocGFydHNbZmllbGRzLm1heFRwXSA/PyAnJyk7XHJcbiAgICB0aGlzLnggPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy54XSA/PyAnJyk7XHJcbiAgICB0aGlzLnkgPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy55XSA/PyAnJyk7XHJcbiAgICB0aGlzLnogPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy56XSA/PyAnJyk7XHJcbiAgICB0aGlzLmhlYWRpbmcgPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy5oZWFkaW5nXSA/PyAnJyk7XHJcblxyXG4gICAgY29uc3QgcGFkZGVkID0gRW11bGF0b3JDb21tb24uemVyb1BhZCh0aGlzLmpvYkxldmVsRGF0YSwgOCk7XHJcblxyXG4gICAgdGhpcy5qb2JJZEhleCA9IHBhZGRlZC5zdWJzdHIoNiwgMikudG9VcHBlckNhc2UoKTtcclxuICAgIHRoaXMuam9iSWQgPSBwYXJzZUludCh0aGlzLmpvYklkSGV4LCAxNik7XHJcbiAgICB0aGlzLmpvYiA9IFV0aWwuam9iRW51bVRvSm9iKHRoaXMuam9iSWQpO1xyXG5cclxuICAgIHRoaXMubGV2ZWwgPSBwYXJzZUludChwYWRkZWQuc3Vic3RyKDQsIDIpLCAxNik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MzggZXh0ZW5kcyBMaW5lRXZlbnQweDI2IHt9XHJcbiIsImltcG9ydCBMaW5lRXZlbnQsIHsgTGluZUV2ZW50U291cmNlIH0gZnJvbSAnLi9MaW5lRXZlbnQnO1xyXG5pbXBvcnQgTG9nUmVwb3NpdG9yeSBmcm9tICcuL0xvZ1JlcG9zaXRvcnknO1xyXG5cclxuY29uc3QgZmllbGRzID0ge1xyXG4gIGlkOiAyLFxyXG4gIG5hbWU6IDMsXHJcbiAgY3VycmVudEhwOiA0LFxyXG4gIG1heEhwOiA1LFxyXG4gIGN1cnJlbnRNcDogNixcclxuICBtYXhNcDogNyxcclxuICBjdXJyZW50VHA6IDgsXHJcbiAgbWF4VHA6IDksXHJcbiAgeDogMTAsXHJcbiAgeTogMTEsXHJcbiAgejogMTIsXHJcbiAgaGVhZGluZzogMTMsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBOZXR3b3JrIHVwZGF0ZSBocCBldmVudFxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MHgyNyBleHRlbmRzIExpbmVFdmVudCBpbXBsZW1lbnRzIExpbmVFdmVudFNvdXJjZSB7XHJcbiAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuICBwdWJsaWMgcmVhZG9ubHkgaHA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbWF4SHA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbXA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbWF4TXA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgdHA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgbWF4VHA6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgeDogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSB5OiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHo6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaGVhZGluZzogbnVtYmVyO1xyXG4gIHB1YmxpYyByZWFkb25seSBpc1NvdXJjZSA9IHRydWU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlcG86IExvZ1JlcG9zaXRvcnksIGxpbmU6IHN0cmluZywgcGFydHM6IHN0cmluZ1tdKSB7XHJcbiAgICBzdXBlcihyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcblxyXG4gICAgdGhpcy5pZCA9IHBhcnRzW2ZpZWxkcy5pZF0/LnRvVXBwZXJDYXNlKCkgPz8gJyc7XHJcbiAgICB0aGlzLm5hbWUgPSBwYXJ0c1tmaWVsZHMubmFtZV0gPz8gJyc7XHJcbiAgICB0aGlzLmhwID0gcGFyc2VJbnQocGFydHNbZmllbGRzLmN1cnJlbnRIcF0gPz8gJycpO1xyXG4gICAgdGhpcy5tYXhIcCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy5tYXhIcF0gPz8gJycpO1xyXG4gICAgdGhpcy5tcCA9IHBhcnNlSW50KHBhcnRzW2ZpZWxkcy5jdXJyZW50TXBdID8/ICcnKTtcclxuICAgIHRoaXMubWF4TXAgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMubWF4TXBdID8/ICcnKTtcclxuICAgIHRoaXMudHAgPSBwYXJzZUludChwYXJ0c1tmaWVsZHMuY3VycmVudFRwXSA/PyAnJyk7XHJcbiAgICB0aGlzLm1heFRwID0gcGFyc2VJbnQocGFydHNbZmllbGRzLm1heFRwXSA/PyAnJyk7XHJcbiAgICB0aGlzLnggPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy54XSA/PyAnJyk7XHJcbiAgICB0aGlzLnkgPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy55XSA/PyAnJyk7XHJcbiAgICB0aGlzLnogPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy56XSA/PyAnJyk7XHJcbiAgICB0aGlzLmhlYWRpbmcgPSBwYXJzZUZsb2F0KHBhcnRzW2ZpZWxkcy5oZWFkaW5nXSA/PyAnJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGluZUV2ZW50MzkgZXh0ZW5kcyBMaW5lRXZlbnQweDI3IHt9XHJcbiIsImltcG9ydCBMaW5lRXZlbnQgZnJvbSAnLi9MaW5lRXZlbnQnO1xyXG5pbXBvcnQgeyBMaW5lRXZlbnQwMCB9IGZyb20gJy4vTGluZUV2ZW50MHgwMCc7XHJcbmltcG9ydCB7IExpbmVFdmVudDAxIH0gZnJvbSAnLi9MaW5lRXZlbnQweDAxJztcclxuaW1wb3J0IHsgTGluZUV2ZW50MDIgfSBmcm9tICcuL0xpbmVFdmVudDB4MDInO1xyXG5pbXBvcnQgeyBMaW5lRXZlbnQwMyB9IGZyb20gJy4vTGluZUV2ZW50MHgwMyc7XHJcbmltcG9ydCB7IExpbmVFdmVudDA0IH0gZnJvbSAnLi9MaW5lRXZlbnQweDA0JztcclxuaW1wb3J0IHsgTGluZUV2ZW50MTIgfSBmcm9tICcuL0xpbmVFdmVudDB4MEMnO1xyXG5pbXBvcnQgeyBMaW5lRXZlbnQyMCB9IGZyb20gJy4vTGluZUV2ZW50MHgxNCc7XHJcbmltcG9ydCB7IExpbmVFdmVudDIxIH0gZnJvbSAnLi9MaW5lRXZlbnQweDE1JztcclxuaW1wb3J0IHsgTGluZUV2ZW50MjIgfSBmcm9tICcuL0xpbmVFdmVudDB4MTYnO1xyXG5pbXBvcnQgeyBMaW5lRXZlbnQyMyB9IGZyb20gJy4vTGluZUV2ZW50MHgxNyc7XHJcbmltcG9ydCB7IExpbmVFdmVudDI0IH0gZnJvbSAnLi9MaW5lRXZlbnQweDE4JztcclxuaW1wb3J0IHsgTGluZUV2ZW50MjUgfSBmcm9tICcuL0xpbmVFdmVudDB4MTknO1xyXG5pbXBvcnQgeyBMaW5lRXZlbnQyNiB9IGZyb20gJy4vTGluZUV2ZW50MHgxQSc7XHJcbmltcG9ydCB7IExpbmVFdmVudDI3IH0gZnJvbSAnLi9MaW5lRXZlbnQweDFCJztcclxuaW1wb3J0IHsgTGluZUV2ZW50MjggfSBmcm9tICcuL0xpbmVFdmVudDB4MUMnO1xyXG5pbXBvcnQgeyBMaW5lRXZlbnQyOSB9IGZyb20gJy4vTGluZUV2ZW50MHgxRCc7XHJcbmltcG9ydCB7IExpbmVFdmVudDMwIH0gZnJvbSAnLi9MaW5lRXZlbnQweDFFJztcclxuaW1wb3J0IHsgTGluZUV2ZW50MzEgfSBmcm9tICcuL0xpbmVFdmVudDB4MUYnO1xyXG5pbXBvcnQgeyBMaW5lRXZlbnQzNCB9IGZyb20gJy4vTGluZUV2ZW50MHgyMic7XHJcbmltcG9ydCB7IExpbmVFdmVudDM1IH0gZnJvbSAnLi9MaW5lRXZlbnQweDIzJztcclxuaW1wb3J0IHsgTGluZUV2ZW50MzYgfSBmcm9tICcuL0xpbmVFdmVudDB4MjQnO1xyXG5pbXBvcnQgeyBMaW5lRXZlbnQzNyB9IGZyb20gJy4vTGluZUV2ZW50MHgyNSc7XHJcbmltcG9ydCB7IExpbmVFdmVudDM4IH0gZnJvbSAnLi9MaW5lRXZlbnQweDI2JztcclxuaW1wb3J0IHsgTGluZUV2ZW50MzkgfSBmcm9tICcuL0xpbmVFdmVudDB4MjcnO1xyXG5pbXBvcnQgTG9nUmVwb3NpdG9yeSBmcm9tICcuL0xvZ1JlcG9zaXRvcnknO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFyc2VMaW5lIHtcclxuICBzdGF0aWMgcGFyc2UocmVwbzogTG9nUmVwb3NpdG9yeSwgbGluZTogc3RyaW5nKTogTGluZUV2ZW50IHwgdW5kZWZpbmVkIHtcclxuICAgIGxldCByZXQ7XHJcblxyXG4gICAgY29uc3QgcGFydHMgPSBsaW5lLnNwbGl0KCd8Jyk7XHJcbiAgICBjb25zdCBldmVudCA9IHBhcnRzWzBdO1xyXG5cclxuICAgIC8vIERvbid0IHBhcnNlIHJhdyBuZXR3b3JrIHBhY2tldCBsaW5lc1xyXG4gICAgaWYgKCFldmVudCB8fCBldmVudCA9PT0gJzI1MicpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICAvLyBUaGlzIGlzIHVnbHksIGJ1dCBXZWJwYWNrIHByZWZlcnMgYmVpbmcgZXhwbGljaXRcclxuICAgIHN3aXRjaCAoJ0xpbmVFdmVudCcgKyBldmVudCkge1xyXG4gICAgY2FzZSAnTGluZUV2ZW50MDAnOlxyXG4gICAgICByZXQgPSBuZXcgTGluZUV2ZW50MDAocmVwbywgbGluZSwgcGFydHMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ0xpbmVFdmVudDAxJzpcclxuICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDAxKHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdMaW5lRXZlbnQwMic6XHJcbiAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQwMihyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnTGluZUV2ZW50MDMnOlxyXG4gICAgICByZXQgPSBuZXcgTGluZUV2ZW50MDMocmVwbywgbGluZSwgcGFydHMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ0xpbmVFdmVudDA0JzpcclxuICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDA0KHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdMaW5lRXZlbnQxMic6XHJcbiAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQxMihyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnTGluZUV2ZW50MjAnOlxyXG4gICAgICByZXQgPSBuZXcgTGluZUV2ZW50MjAocmVwbywgbGluZSwgcGFydHMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ0xpbmVFdmVudDIxJzpcclxuICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDIxKHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdMaW5lRXZlbnQyMic6XHJcbiAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQyMihyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnTGluZUV2ZW50MjMnOlxyXG4gICAgICByZXQgPSBuZXcgTGluZUV2ZW50MjMocmVwbywgbGluZSwgcGFydHMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ0xpbmVFdmVudDI0JzpcclxuICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDI0KHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdMaW5lRXZlbnQyNSc6XHJcbiAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQyNShyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnTGluZUV2ZW50MjYnOlxyXG4gICAgICByZXQgPSBuZXcgTGluZUV2ZW50MjYocmVwbywgbGluZSwgcGFydHMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ0xpbmVFdmVudDI3JzpcclxuICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDI3KHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdMaW5lRXZlbnQyOCc6XHJcbiAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQyOChyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnTGluZUV2ZW50MjknOlxyXG4gICAgICByZXQgPSBuZXcgTGluZUV2ZW50MjkocmVwbywgbGluZSwgcGFydHMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ0xpbmVFdmVudDMwJzpcclxuICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDMwKHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdMaW5lRXZlbnQzMSc6XHJcbiAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQzMShyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnTGluZUV2ZW50MzQnOlxyXG4gICAgICByZXQgPSBuZXcgTGluZUV2ZW50MzQocmVwbywgbGluZSwgcGFydHMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ0xpbmVFdmVudDM1JzpcclxuICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDM1KHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdMaW5lRXZlbnQzNic6XHJcbiAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQzNihyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnTGluZUV2ZW50MzcnOlxyXG4gICAgICByZXQgPSBuZXcgTGluZUV2ZW50MzcocmVwbywgbGluZSwgcGFydHMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ0xpbmVFdmVudDM4JzpcclxuICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDM4KHJlcG8sIGxpbmUsIHBhcnRzKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdMaW5lRXZlbnQzOSc6XHJcbiAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQzOShyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0ID0gbmV3IExpbmVFdmVudChyZXBvLCBsaW5lLCBwYXJ0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWxzbyBkb24ndCBwYXJzZSBsaW5lcyB3aXRoIGEgbm9uLXNhbmUgZGF0ZS4gVGhpcyBpcyAyMDAwLTAxLTAxIDAwOjAwOjAwXHJcbiAgICBpZiAocmV0ICYmIHJldC50aW1lc3RhbXAgPCA5NDY2ODQ4MDApXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICAvLyBGaW5hbGx5LCBpZiB0aGUgb2JqZWN0IG1hcmtzIGl0c2VsZiBhcyBpbnZhbGlkLCBza2lwIGl0XHJcbiAgICBpZiAocmV0ICYmIHJldC5pbnZhbGlkKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEV2ZW50QnVzIGZyb20gJy4uL0V2ZW50QnVzJztcclxuaW1wb3J0IExpbmVFdmVudCBmcm9tICcuL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQnO1xyXG5pbXBvcnQgTG9nUmVwb3NpdG9yeSBmcm9tICcuL25ldHdvcmtfbG9nX2NvbnZlcnRlci9Mb2dSZXBvc2l0b3J5JztcclxuaW1wb3J0IFBhcnNlTGluZSBmcm9tICcuL25ldHdvcmtfbG9nX2NvbnZlcnRlci9QYXJzZUxpbmUnO1xyXG5cclxuY29uc3QgaXNMaW5lRXZlbnQgPSAobGluZT86IExpbmVFdmVudCk6IGxpbmUgaXMgTGluZUV2ZW50ID0+IHtcclxuICByZXR1cm4gISFsaW5lO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV0d29ya0xvZ0NvbnZlcnRlciBleHRlbmRzIEV2ZW50QnVzIHtcclxuICBjb252ZXJ0RmlsZShkYXRhOiBzdHJpbmcpOiBMaW5lRXZlbnRbXSB7XHJcbiAgICBjb25zdCByZXBvID0gbmV3IExvZ1JlcG9zaXRvcnkoKTtcclxuICAgIHJldHVybiB0aGlzLmNvbnZlcnRMaW5lcyhcclxuICAgICAgICAvLyBTcGxpdCBkYXRhIGludG8gYW4gYXJyYXkgb2Ygc2VwYXJhdGUgbGluZXMsIHJlbW92aW5nIGFueSBibGFuayBsaW5lcy5cclxuICAgICAgICBkYXRhLnNwbGl0KE5ldHdvcmtMb2dDb252ZXJ0ZXIubGluZVNwbGl0UmVnZXgpLmZpbHRlcigobCkgPT4gbCAhPT0gJycpLFxyXG4gICAgICAgIHJlcG8sXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgY29udmVydExpbmVzKGxpbmVzOiBzdHJpbmdbXSwgcmVwbzogTG9nUmVwb3NpdG9yeSk6IExpbmVFdmVudFtdIHtcclxuICAgIGxldCBsaW5lRXZlbnRzID0gbGluZXMubWFwKChsKSA9PiBQYXJzZUxpbmUucGFyc2UocmVwbywgbCkpLmZpbHRlcihpc0xpbmVFdmVudCk7XHJcbiAgICAvLyBDYWxsIGBjb252ZXJ0YCB0byBjb252ZXJ0IHRoZSBuZXR3b3JrIGxpbmUgdG8gbm9uLW5ldHdvcmsgZm9ybWF0IGFuZCB1cGRhdGUgaW5kZXhpbmcgdmFsdWVzXHJcbiAgICBsaW5lRXZlbnRzID0gbGluZUV2ZW50cy5tYXAoKGwsIGkpID0+IHtcclxuICAgICAgbC5pbmRleCA9IGk7XHJcbiAgICAgIHJldHVybiBsO1xyXG4gICAgfSk7XHJcbiAgICAvLyBTb3J0IHRoZSBsaW5lcyBiYXNlZCBvbiBgJHt0aW1lc3RhbXB9XyR7aW5kZXh9YCB0byBoYW5kbGUgb3V0LW9mLW9yZGVyIGxpbmVzIHByb3Blcmx5XHJcbiAgICAvLyBAVE9ETzogUmVtb3ZlIHRoaXMgb25jZSB1bmRlcmx5aW5nIENvbWJhdGFudFRyYWNrZXIgdXBkYXRlIGlzc3VlcyBhcmUgcmVzb2x2ZWRcclxuICAgIHJldHVybiBsaW5lRXZlbnRzLnNvcnQoKGwsIHIpID0+IChgJHtsLnRpbWVzdGFtcH1fJHtsLmluZGV4fWApLmxvY2FsZUNvbXBhcmUoYCR7ci50aW1lc3RhbXB9XyR7ci5pbmRleH1gKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbGluZVNwbGl0UmVnZXggPSAvXFxyP1xcbi9nbTtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgbGFuZ3VhZ2VzID0gWydlbicsICdkZScsICdmcicsICdqYScsICdjbicsICdrbyddIGFzIGNvbnN0O1xyXG5cclxuZXhwb3J0IHR5cGUgTGFuZyA9IHR5cGVvZiBsYW5ndWFnZXNbbnVtYmVyXTtcclxuXHJcbmV4cG9ydCB0eXBlIE5vbkVuTGFuZyA9IEV4Y2x1ZGU8TGFuZywgJ2VuJz47XHJcblxyXG5leHBvcnQgY29uc3QgaXNMYW5nID0gKGxhbmc/OiBzdHJpbmcpOiBsYW5nIGlzIExhbmcgPT4ge1xyXG4gIGNvbnN0IGxhbmdTdHJzOiByZWFkb25seSBzdHJpbmdbXSA9IGxhbmd1YWdlcztcclxuICBpZiAoIWxhbmcpXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgcmV0dXJuIGxhbmdTdHJzLmluY2x1ZGVzKGxhbmcpO1xyXG59O1xyXG4iLCJpbXBvcnQgQ29tYmF0YW50VHJhY2tlciBmcm9tICcuL0NvbWJhdGFudFRyYWNrZXInO1xyXG5pbXBvcnQgUGV0TmFtZXNCeUxhbmcgZnJvbSAnLi4vLi4vLi4vLi4vcmVzb3VyY2VzL3BldF9uYW1lcyc7XHJcbmltcG9ydCBFbXVsYXRvckNvbW1vbiBmcm9tICcuLi9FbXVsYXRvckNvbW1vbic7XHJcbmltcG9ydCBMb2dSZXBvc2l0b3J5IGZyb20gJy4vbmV0d29ya19sb2dfY29udmVydGVyL0xvZ1JlcG9zaXRvcnknO1xyXG5pbXBvcnQgTmV0d29ya0xvZ0NvbnZlcnRlciBmcm9tICcuL05ldHdvcmtMb2dDb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBMYW5nLCBpc0xhbmcgfSBmcm9tICcuLi8uLi8uLi8uLi9yZXNvdXJjZXMvbGFuZ3VhZ2VzJztcclxuaW1wb3J0IExpbmVFdmVudCwgeyBpc0xpbmVFdmVudFNvdXJjZSwgaXNMaW5lRXZlbnRUYXJnZXQgfSBmcm9tICcuL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQnO1xyXG5pbXBvcnQgeyBVbnJlYWNoYWJsZUNvZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9yZXNvdXJjZXMvbm90X3JlYWNoZWQnO1xyXG5cclxuY29uc3QgaXNQZXROYW1lID0gKG5hbWU6IHN0cmluZywgbGFuZ3VhZ2U/OiBMYW5nKSA9PiB7XHJcbiAgaWYgKGxhbmd1YWdlKVxyXG4gICAgcmV0dXJuIFBldE5hbWVzQnlMYW5nW2xhbmd1YWdlXS5pbmNsdWRlcyhuYW1lKTtcclxuXHJcbiAgZm9yIChjb25zdCBsYW5nIGluIFBldE5hbWVzQnlMYW5nKSB7XHJcbiAgICBpZiAoIWlzTGFuZyhsYW5nKSlcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gICAgaWYgKFBldE5hbWVzQnlMYW5nW2xhbmddLmluY2x1ZGVzKG5hbWUpKVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbmNvbnN0IGlzVmFsaWRUaW1lc3RhbXAgPSAodGltZXN0YW1wOiBudW1iZXIpID0+IHtcclxuICByZXR1cm4gdGltZXN0YW1wID4gMCAmJiB0aW1lc3RhbXAgPCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuY291bnRlciB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgZW5jb3VudGVyVmVyc2lvbiA9IDE7XHJcbiAgcHVibGljIGlkPzogbnVtYmVyO1xyXG4gIHZlcnNpb246IG51bWJlcjtcclxuICBpbml0aWFsT2Zmc2V0ID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XHJcbiAgZW5kU3RhdHVzID0gJ1Vua25vd24nO1xyXG4gIHN0YXJ0U3RhdHVzID0gJ1Vua25vd24nO1xyXG4gIHByaXZhdGUgZW5nYWdlQXQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcclxuICBwcml2YXRlIGZpcnN0UGxheWVyQWJpbGl0eSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xyXG4gIHByaXZhdGUgZmlyc3RFbmVteUFiaWxpdHkgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcclxuICBmaXJzdExpbmVJbmRleCA9IDA7XHJcbiAgY29tYmF0YW50VHJhY2tlcj86IENvbWJhdGFudFRyYWNrZXI7XHJcbiAgc3RhcnRUaW1lc3RhbXAgPSAwO1xyXG4gIGVuZFRpbWVzdGFtcCA9IDA7XHJcbiAgZHVyYXRpb24gPSAwO1xyXG4gIHBsYXliYWNrT2Zmc2V0ID0gMDtcclxuICBsYW5ndWFnZTogTGFuZyA9ICdlbic7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIGVuY291bnRlckRheTogc3RyaW5nLFxyXG4gICAgcHVibGljIGVuY291bnRlclpvbmVJZDogc3RyaW5nLFxyXG4gICAgcHVibGljIGVuY291bnRlclpvbmVOYW1lOiBzdHJpbmcsXHJcbiAgICBwdWJsaWMgbG9nTGluZXM6IExpbmVFdmVudFtdKSB7XHJcbiAgICB0aGlzLnZlcnNpb24gPSBFbmNvdW50ZXIuZW5jb3VudGVyVmVyc2lvbjtcclxuICB9XHJcblxyXG4gIGluaXRpYWxpemUoKTogdm9pZCB7XHJcbiAgICBjb25zdCBzdGFydFN0YXR1c2VzID0gbmV3IFNldDxzdHJpbmc+KCk7XHJcblxyXG4gICAgdGhpcy5sb2dMaW5lcy5mb3JFYWNoKChsaW5lLCBpKSA9PiB7XHJcbiAgICAgIGlmICghbGluZSlcclxuICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgICBsZXQgcmVzID0gRW11bGF0b3JDb21tb24ubWF0Y2hTdGFydChsaW5lLm5ldHdvcmtMaW5lKTtcclxuICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgIHRoaXMuZmlyc3RMaW5lSW5kZXggPSBpO1xyXG4gICAgICAgIGlmIChyZXMuZ3JvdXBzPy5TdGFydFR5cGUpXHJcbiAgICAgICAgICBzdGFydFN0YXR1c2VzLmFkZChyZXMuZ3JvdXBzLlN0YXJ0VHlwZSk7XHJcbiAgICAgICAgaWYgKHJlcy5ncm91cHM/LlN0YXJ0SW4pIHtcclxuICAgICAgICAgIGNvbnN0IHN0YXJ0SW4gPSBwYXJzZUludChyZXMuZ3JvdXBzLlN0YXJ0SW4pO1xyXG4gICAgICAgICAgaWYgKHN0YXJ0SW4gPj0gMClcclxuICAgICAgICAgICAgdGhpcy5lbmdhZ2VBdCA9IE1hdGgubWluKGxpbmUudGltZXN0YW1wICsgc3RhcnRJbiwgdGhpcy5lbmdhZ2VBdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlcyA9IEVtdWxhdG9yQ29tbW9uLm1hdGNoRW5kKGxpbmUubmV0d29ya0xpbmUpO1xyXG4gICAgICAgIGlmIChyZXMpIHtcclxuICAgICAgICAgIGlmIChyZXMuZ3JvdXBzPy5FbmRUeXBlKVxyXG4gICAgICAgICAgICB0aGlzLmVuZFN0YXR1cyA9IHJlcy5ncm91cHMuRW5kVHlwZTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzTGluZUV2ZW50U291cmNlKGxpbmUpICYmIGlzTGluZUV2ZW50VGFyZ2V0KGxpbmUpKSB7XHJcbiAgICAgICAgICBpZiAobGluZS5pZC5zdGFydHNXaXRoKCcxJykgfHxcclxuICAgICAgICAgICAgKGxpbmUuaWQuc3RhcnRzV2l0aCgnNCcpICYmIGlzUGV0TmFtZShsaW5lLm5hbWUsIHRoaXMubGFuZ3VhZ2UpKSkge1xyXG4gICAgICAgICAgICAvLyBQbGF5ZXIgb3IgcGV0IGFiaWxpdHlcclxuICAgICAgICAgICAgaWYgKGxpbmUudGFyZ2V0SWQuc3RhcnRzV2l0aCgnNCcpICYmICFpc1BldE5hbWUobGluZS50YXJnZXROYW1lLCB0aGlzLmxhbmd1YWdlKSkge1xyXG4gICAgICAgICAgICAgIC8vIFRhcmdldHRpbmcgbm9uIHBsYXllciBvciBwZXRcclxuICAgICAgICAgICAgICB0aGlzLmZpcnN0UGxheWVyQWJpbGl0eSA9IE1hdGgubWluKHRoaXMuZmlyc3RQbGF5ZXJBYmlsaXR5LCBsaW5lLnRpbWVzdGFtcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSBpZiAobGluZS5pZC5zdGFydHNXaXRoKCc0JykgJiYgIWlzUGV0TmFtZShsaW5lLm5hbWUsIHRoaXMubGFuZ3VhZ2UpKSB7XHJcbiAgICAgICAgICAgIC8vIE5vbi1wbGF5ZXIgYWJpbGl0eVxyXG4gICAgICAgICAgICBpZiAobGluZS50YXJnZXRJZC5zdGFydHNXaXRoKCcxJykgfHwgaXNQZXROYW1lKGxpbmUudGFyZ2V0TmFtZSwgdGhpcy5sYW5ndWFnZSkpIHtcclxuICAgICAgICAgICAgICAvLyBUYXJnZXR0aW5nIHBsYXllciBvciBwZXRcclxuICAgICAgICAgICAgICB0aGlzLmZpcnN0RW5lbXlBYmlsaXR5ID0gTWF0aC5taW4odGhpcy5maXJzdEVuZW15QWJpbGl0eSwgbGluZS50aW1lc3RhbXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IG1hdGNoZWRMYW5nID0gcmVzPy5ncm91cHM/Lmxhbmd1YWdlO1xyXG4gICAgICBpZiAoaXNMYW5nKG1hdGNoZWRMYW5nKSlcclxuICAgICAgICB0aGlzLmxhbmd1YWdlID0gbWF0Y2hlZExhbmc7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmNvbWJhdGFudFRyYWNrZXIgPSBuZXcgQ29tYmF0YW50VHJhY2tlcih0aGlzLmxvZ0xpbmVzLCB0aGlzLmxhbmd1YWdlKTtcclxuICAgIHRoaXMuc3RhcnRUaW1lc3RhbXAgPSB0aGlzLmNvbWJhdGFudFRyYWNrZXIuZmlyc3RUaW1lc3RhbXA7XHJcbiAgICB0aGlzLmVuZFRpbWVzdGFtcCA9IHRoaXMuY29tYmF0YW50VHJhY2tlci5sYXN0VGltZXN0YW1wO1xyXG4gICAgdGhpcy5kdXJhdGlvbiA9IHRoaXMuZW5kVGltZXN0YW1wIC0gdGhpcy5zdGFydFRpbWVzdGFtcDtcclxuXHJcbiAgICBpZiAodGhpcy5pbml0aWFsT2Zmc2V0ID09PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xyXG4gICAgICBpZiAodGhpcy5lbmdhZ2VBdCA8IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKVxyXG4gICAgICAgIHRoaXMuaW5pdGlhbE9mZnNldCA9IHRoaXMuZW5nYWdlQXQgLSB0aGlzLnN0YXJ0VGltZXN0YW1wO1xyXG4gICAgICBlbHNlIGlmICh0aGlzLmZpcnN0UGxheWVyQWJpbGl0eSA8IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKVxyXG4gICAgICAgIHRoaXMuaW5pdGlhbE9mZnNldCA9IHRoaXMuZmlyc3RQbGF5ZXJBYmlsaXR5IC0gdGhpcy5zdGFydFRpbWVzdGFtcDtcclxuICAgICAgZWxzZSBpZiAodGhpcy5maXJzdEVuZW15QWJpbGl0eSA8IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKVxyXG4gICAgICAgIHRoaXMuaW5pdGlhbE9mZnNldCA9IHRoaXMuZmlyc3RFbmVteUFiaWxpdHkgLSB0aGlzLnN0YXJ0VGltZXN0YW1wO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgdGhpcy5pbml0aWFsT2Zmc2V0ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBmaXJzdExpbmUgPSB0aGlzLmxvZ0xpbmVzW3RoaXMuZmlyc3RMaW5lSW5kZXhdO1xyXG5cclxuICAgIGlmIChmaXJzdExpbmUgJiYgZmlyc3RMaW5lLm9mZnNldClcclxuICAgICAgdGhpcy5wbGF5YmFja09mZnNldCA9IGZpcnN0TGluZS5vZmZzZXQ7XHJcblxyXG4gICAgdGhpcy5zdGFydFN0YXR1cyA9IFsuLi5zdGFydFN0YXR1c2VzXS5zb3J0KCkuam9pbignLCAnKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaW5pdGlhbFRpbWVzdGFtcCgpIDogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXJ0VGltZXN0YW1wICsgdGhpcy5pbml0aWFsT2Zmc2V0O1xyXG4gIH1cclxuXHJcbiAgc2hvdWxkUGVyc2lzdEZpZ2h0KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGlzVmFsaWRUaW1lc3RhbXAodGhpcy5maXJzdFBsYXllckFiaWxpdHkpICYmIGlzVmFsaWRUaW1lc3RhbXAodGhpcy5maXJzdEVuZW15QWJpbGl0eSk7XHJcbiAgfVxyXG5cclxuICB1cGdyYWRlKHZlcnNpb246IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgaWYgKEVuY291bnRlci5lbmNvdW50ZXJWZXJzaW9uIDw9IHZlcnNpb24pXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICBjb25zdCByZXBvID0gbmV3IExvZ1JlcG9zaXRvcnkoKTtcclxuICAgIGNvbnN0IGNvbnZlcnRlciA9IG5ldyBOZXR3b3JrTG9nQ29udmVydGVyKCk7XHJcbiAgICB0aGlzLmxvZ0xpbmVzID0gY29udmVydGVyLmNvbnZlcnRMaW5lcyhcclxuICAgICAgICB0aGlzLmxvZ0xpbmVzLm1hcCgobCkgPT4gbC5uZXR3b3JrTGluZSksXHJcbiAgICAgICAgcmVwbyxcclxuICAgICk7XHJcbiAgICB0aGlzLnZlcnNpb24gPSBFbmNvdW50ZXIuZW5jb3VudGVyVmVyc2lvbjtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgRW11bGF0b3JDb21tb24gZnJvbSAnLi4vRW11bGF0b3JDb21tb24nO1xyXG5pbXBvcnQgRXZlbnRCdXMgZnJvbSAnLi4vRXZlbnRCdXMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW5jb3VudGVyVGFiIGV4dGVuZHMgRXZlbnRCdXMge1xyXG4gIGNvbnN0cnVjdG9yKHBlcnNpc3Rvcikge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMucGVyc2lzdG9yID0gcGVyc2lzdG9yO1xyXG5cclxuICAgIHRoaXMuJHpvbmVDb2x1bW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZW5jb3VudGVyc1RhYiAuem9uZUxpc3QnKTtcclxuICAgIHRoaXMuJGRhdGVDb2x1bW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZW5jb3VudGVyc1RhYiAuZGF0ZUxpc3QnKTtcclxuICAgIHRoaXMuJGVuY291bnRlckNvbHVtbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlbmNvdW50ZXJzVGFiIC5lbmNvdW50ZXJMaXN0Jyk7XHJcbiAgICB0aGlzLiRpbmZvQ29sdW1uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2VuY291bnRlcnNUYWIgLmVuY291bnRlckluZm8nKTtcclxuXHJcbiAgICB0aGlzLiRlbmNvdW50ZXJUYWJSb3dUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlLmVuY291bnRlclRhYlJvdycpLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICB0aGlzLiRlbmNvdW50ZXJUYWJFbmNvdW50ZXJSb3dUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlLmVuY291bnRlclRhYkVuY291bnRlclJvdycpLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICB0aGlzLiRlbmNvdW50ZXJJbmZvVGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd0ZW1wbGF0ZS5lbmNvdW50ZXJJbmZvJykuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZDtcclxuICB9XHJcblxyXG4gIHJlZnJlc2goKSB7XHJcbiAgICB0aGlzLmVuY291bnRlcnMgPSB7fTtcclxuICAgIHRoaXMucGVyc2lzdG9yLmxpc3RFbmNvdW50ZXJzKCkudGhlbigoZW5jb3VudGVycykgPT4ge1xyXG4gICAgICBmb3IgKGNvbnN0IGkgaW4gZW5jb3VudGVycykge1xyXG4gICAgICAgIGNvbnN0IGVuYyA9IGVuY291bnRlcnNbaV07XHJcbiAgICAgICAgY29uc3Qgem9uZSA9IGVuYy56b25lTmFtZTtcclxuICAgICAgICBjb25zdCBlbmNEYXRlID0gRW11bGF0b3JDb21tb24udGltZVRvRGF0ZVN0cmluZyhlbmMuc3RhcnQpO1xyXG4gICAgICAgIGNvbnN0IGVuY1RpbWUgPSBFbXVsYXRvckNvbW1vbi50aW1lVG9UaW1lU3RyaW5nKGVuYy5zdGFydCk7XHJcbiAgICAgICAgY29uc3QgZW5jRHVyYXRpb24gPSBFbXVsYXRvckNvbW1vbi5tc1RvRHVyYXRpb24oZW5jLmR1cmF0aW9uKTtcclxuICAgICAgICB0aGlzLmVuY291bnRlcnNbem9uZV0gPSB0aGlzLmVuY291bnRlcnNbem9uZV0gfHwge307XHJcbiAgICAgICAgdGhpcy5lbmNvdW50ZXJzW3pvbmVdW2VuY0RhdGVdID0gdGhpcy5lbmNvdW50ZXJzW3pvbmVdW2VuY0RhdGVdIHx8IFtdO1xyXG4gICAgICAgIHRoaXMuZW5jb3VudGVyc1t6b25lXVtlbmNEYXRlXS5wdXNoKHtcclxuICAgICAgICAgIHN0YXJ0OiBlbmNUaW1lLFxyXG4gICAgICAgICAgbmFtZTogZW5jLm5hbWUsXHJcbiAgICAgICAgICBkdXJhdGlvbjogZW5jRHVyYXRpb24sXHJcbiAgICAgICAgICBlbmNvdW50ZXI6IGVuYyxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5yZWZyZXNoVUkoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVmcmVzaFVJKCkge1xyXG4gICAgdGhpcy5yZWZyZXNoWm9uZXMoKTtcclxuICAgIHRoaXMucmVmcmVzaERhdGVzKCk7XHJcbiAgICB0aGlzLnJlZnJlc2hFbmNvdW50ZXJzKCk7XHJcbiAgICB0aGlzLnJlZnJlc2hJbmZvKCk7XHJcbiAgfVxyXG5cclxuICByZWZyZXNoWm9uZXMoKSB7XHJcbiAgICB0aGlzLiR6b25lQ29sdW1uLmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgIGxldCBjbGVhciA9IHRydWU7XHJcblxyXG4gICAgY29uc3Qgem9uZXMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKHRoaXMuZW5jb3VudGVycykpO1xyXG5cclxuICAgIGZvciAoY29uc3Qgem9uZSBvZiBbLi4uem9uZXNdLnNvcnQoKSkge1xyXG4gICAgICBjb25zdCAkcm93ID0gdGhpcy4kZW5jb3VudGVyVGFiUm93VGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAkcm93LmlubmVyVGV4dCA9IHpvbmU7XHJcbiAgICAgIGlmICh6b25lID09PSB0aGlzLmN1cnJlbnRab25lKSB7XHJcbiAgICAgICAgY2xlYXIgPSBmYWxzZTtcclxuICAgICAgICAkcm93LmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XHJcbiAgICAgIH1cclxuICAgICAgJHJvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHQgPSBldi5jdXJyZW50VGFyZ2V0O1xyXG4gICAgICAgIHQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VsZWN0b3JSb3cuc2VsZWN0ZWQnKS5mb3JFYWNoKChuKSA9PiB7XHJcbiAgICAgICAgICBuLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFpvbmUgPSB0LnRleHRDb250ZW50O1xyXG4gICAgICAgIHRoaXMucmVmcmVzaFVJKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLiR6b25lQ29sdW1uLmFwcGVuZCgkcm93KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY2xlYXIpXHJcbiAgICAgIHRoaXMuY3VycmVudFpvbmUgPSB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICByZWZyZXNoRGF0ZXMoKSB7XHJcbiAgICB0aGlzLiRkYXRlQ29sdW1uLmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgIGxldCBjbGVhciA9IHRydWU7XHJcblxyXG4gICAgaWYgKHRoaXMuY3VycmVudFpvbmUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zdCBkYXRlcyA9IG5ldyBTZXQoT2JqZWN0LmtleXModGhpcy5lbmNvdW50ZXJzW3RoaXMuY3VycmVudFpvbmVdKSk7XHJcbiAgICAgIGZvciAoY29uc3QgZGF0ZSBvZiBbLi4uZGF0ZXNdLnNvcnQoKSkge1xyXG4gICAgICAgIGNvbnN0ICRyb3cgPSB0aGlzLiRlbmNvdW50ZXJUYWJSb3dUZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgJHJvdy5pbm5lclRleHQgPSBkYXRlO1xyXG4gICAgICAgIGlmIChkYXRlID09PSB0aGlzLmN1cnJlbnREYXRlKSB7XHJcbiAgICAgICAgICBjbGVhciA9IGZhbHNlO1xyXG4gICAgICAgICAgJHJvdy5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkcm93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB0ID0gZXYuY3VycmVudFRhcmdldDtcclxuICAgICAgICAgIHQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VsZWN0b3JSb3cuc2VsZWN0ZWQnKS5mb3JFYWNoKChuKSA9PiB7XHJcbiAgICAgICAgICAgIG4uY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZSA9IHQudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICB0aGlzLnJlZnJlc2hVSSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuJGRhdGVDb2x1bW4uYXBwZW5kKCRyb3cpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNsZWFyKVxyXG4gICAgICB0aGlzLmN1cnJlbnREYXRlID0gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgcmVmcmVzaEVuY291bnRlcnMoKSB7XHJcbiAgICB0aGlzLiRlbmNvdW50ZXJDb2x1bW4uaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgbGV0IGNsZWFyID0gdHJ1ZTtcclxuXHJcbiAgICBpZiAodGhpcy5jdXJyZW50Wm9uZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuY3VycmVudERhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zdCBzb3J0ZWRFbmNvdW50ZXJzID0gdGhpcy5lbmNvdW50ZXJzW3RoaXMuY3VycmVudFpvbmVdW3RoaXMuY3VycmVudERhdGVdLnNvcnQoKGwsIHIpID0+IHtcclxuICAgICAgICByZXR1cm4gbC5zdGFydC5sb2NhbGVDb21wYXJlKHIuc3RhcnQpO1xyXG4gICAgICB9KTtcclxuICAgICAgZm9yIChjb25zdCBpIGluIHNvcnRlZEVuY291bnRlcnMpIHtcclxuICAgICAgICBjb25zdCBlbmMgPSB0aGlzLmVuY291bnRlcnNbdGhpcy5jdXJyZW50Wm9uZV1bdGhpcy5jdXJyZW50RGF0ZV1baV07XHJcbiAgICAgICAgY29uc3QgJHJvdyA9IHRoaXMuJGVuY291bnRlclRhYkVuY291bnRlclJvd1RlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAkcm93LnNldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcsIGkpO1xyXG4gICAgICAgIGlmIChpID09PSB0aGlzLmN1cnJlbnRFbmNvdW50ZXIpIHtcclxuICAgICAgICAgIGNsZWFyID0gZmFsc2U7XHJcbiAgICAgICAgICAkcm93LmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRyb3cucXVlcnlTZWxlY3RvcignLmVuY291bnRlclN0YXJ0JykuaW5uZXJUZXh0ID0gJ1snICsgZW5jLnN0YXJ0ICsgJ10nO1xyXG4gICAgICAgICRyb3cucXVlcnlTZWxlY3RvcignLmVuY291bnRlck5hbWUnKS5pbm5lclRleHQgPSBlbmMubmFtZTtcclxuICAgICAgICAkcm93LnF1ZXJ5U2VsZWN0b3IoJy5lbmNvdW50ZXJEdXJhdGlvbicpLmlubmVyVGV4dCA9ICcoJyArIGVuYy5kdXJhdGlvbiArICcpJztcclxuICAgICAgICAkcm93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB0ID0gZXYuY3VycmVudFRhcmdldDtcclxuICAgICAgICAgIHQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VsZWN0b3JSb3cuc2VsZWN0ZWQnKS5mb3JFYWNoKChuKSA9PiB7XHJcbiAgICAgICAgICAgIG4uY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgdGhpcy5jdXJyZW50RW5jb3VudGVyID0gdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKTtcclxuICAgICAgICAgIHRoaXMucmVmcmVzaFVJKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy4kZW5jb3VudGVyQ29sdW1uLmFwcGVuZCgkcm93KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChjbGVhcilcclxuICAgICAgdGhpcy5jdXJyZW50RW5jb3VudGVyID0gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgcmVmcmVzaEluZm8oKSB7XHJcbiAgICB0aGlzLiRpbmZvQ29sdW1uLmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgIGlmICh0aGlzLmN1cnJlbnRab25lICE9PSB1bmRlZmluZWQgJiYgdGhpcy5jdXJyZW50RGF0ZSAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgIHRoaXMuY3VycmVudEVuY291bnRlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBAdHlwZSBQZXJzaXN0b3JFbmNvdW50ZXJcclxuICAgICAgICovXHJcbiAgICAgIGNvbnN0IGVuYyA9XHJcbiAgICAgICAgdGhpcy5lbmNvdW50ZXJzW3RoaXMuY3VycmVudFpvbmVdW3RoaXMuY3VycmVudERhdGVdW3RoaXMuY3VycmVudEVuY291bnRlcl0uZW5jb3VudGVyO1xyXG5cclxuICAgICAgbGV0IHB1bGxBdCA9ICdOL0EnO1xyXG4gICAgICBpZiAoIWlzTmFOKGVuYy5vZmZzZXQpKVxyXG4gICAgICAgIHB1bGxBdCA9IEVtdWxhdG9yQ29tbW9uLnRpbWVUb1N0cmluZyhlbmMub2Zmc2V0LCBmYWxzZSk7XHJcblxyXG4gICAgICBjb25zdCAkaW5mbyA9IHRoaXMuJGVuY291bnRlckluZm9UZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICRpbmZvLnF1ZXJ5U2VsZWN0b3IoJy5lbmNvdW50ZXJMb2FkJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaCgnbG9hZCcsIHRoaXMuZW5jb3VudGVyc1t0aGlzLmN1cnJlbnRab25lXVt0aGlzLmN1cnJlbnREYXRlXVt0aGlzLmN1cnJlbnRFbmNvdW50ZXJdLmVuY291bnRlci5pZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICAkaW5mby5xdWVyeVNlbGVjdG9yKCcuZW5jb3VudGVyUGFyc2UnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoKCdwYXJzZScsIHRoaXMuZW5jb3VudGVyc1t0aGlzLmN1cnJlbnRab25lXVt0aGlzLmN1cnJlbnREYXRlXVt0aGlzLmN1cnJlbnRFbmNvdW50ZXJdLmVuY291bnRlci5pZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICAkaW5mby5xdWVyeVNlbGVjdG9yKCcuZW5jb3VudGVyUHJ1bmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoKCdwcnVuZScsIHRoaXMuZW5jb3VudGVyc1t0aGlzLmN1cnJlbnRab25lXVt0aGlzLmN1cnJlbnREYXRlXVt0aGlzLmN1cnJlbnRFbmNvdW50ZXJdLmVuY291bnRlci5pZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICAkaW5mby5xdWVyeVNlbGVjdG9yKCcuZW5jb3VudGVyRGVsZXRlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaCgnZGVsZXRlJywgdGhpcy5lbmNvdW50ZXJzW3RoaXMuY3VycmVudFpvbmVdW3RoaXMuY3VycmVudERhdGVdW3RoaXMuY3VycmVudEVuY291bnRlcl0uZW5jb3VudGVyLmlkKTtcclxuICAgICAgfSk7XHJcbiAgICAgICRpbmZvLnF1ZXJ5U2VsZWN0b3IoJy5lbmNvdW50ZXJab25lIC5sYWJlbCcpLnRleHRDb250ZW50ID0gZW5jLnpvbmVOYW1lO1xyXG4gICAgICAkaW5mby5xdWVyeVNlbGVjdG9yKCcuZW5jb3VudGVyU3RhcnQgLmxhYmVsJykudGV4dENvbnRlbnQgPSBFbXVsYXRvckNvbW1vbi5kYXRlVGltZVRvU3RyaW5nKGVuYy5zdGFydCk7XHJcbiAgICAgICRpbmZvLnF1ZXJ5U2VsZWN0b3IoJy5lbmNvdW50ZXJEdXJhdGlvbiAubGFiZWwnKS50ZXh0Q29udGVudCA9IEVtdWxhdG9yQ29tbW9uLnRpbWVUb1N0cmluZyhlbmMuZHVyYXRpb24sIGZhbHNlKTtcclxuICAgICAgJGluZm8ucXVlcnlTZWxlY3RvcignLmVuY291bnRlck9mZnNldCAubGFiZWwnKS50ZXh0Q29udGVudCA9IHB1bGxBdDtcclxuICAgICAgJGluZm8ucXVlcnlTZWxlY3RvcignLmVuY291bnRlck5hbWUgLmxhYmVsJykudGV4dENvbnRlbnQgPSBlbmMubmFtZTtcclxuICAgICAgJGluZm8ucXVlcnlTZWxlY3RvcignLmVuY291bnRlclN0YXJ0U3RhdHVzIC5sYWJlbCcpLnRleHRDb250ZW50ID0gZW5jLnN0YXJ0U3RhdHVzO1xyXG4gICAgICAkaW5mby5xdWVyeVNlbGVjdG9yKCcuZW5jb3VudGVyRW5kU3RhdHVzIC5sYWJlbCcpLnRleHRDb250ZW50ID0gZW5jLmVuZFN0YXR1cztcclxuXHJcbiAgICAgIHRoaXMuJGluZm9Db2x1bW4uYXBwZW5kKCRpbmZvKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEVtdWxhdG9yQ29tbW9uIGZyb20gJy4uL0VtdWxhdG9yQ29tbW9uJztcclxuaW1wb3J0IEV2ZW50QnVzIGZyb20gJy4uL0V2ZW50QnVzJztcclxuaW1wb3J0IExpbmVFdmVudCBmcm9tICcuL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQnO1xyXG5pbXBvcnQgeyBMaW5lRXZlbnQweDAxIH0gZnJvbSAnLi9uZXR3b3JrX2xvZ19jb252ZXJ0ZXIvTGluZUV2ZW50MHgwMSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2dFdmVudEhhbmRsZXIgZXh0ZW5kcyBFdmVudEJ1cyB7XHJcbiAgcHVibGljIGN1cnJlbnRGaWdodDogTGluZUV2ZW50W10gPSBbXTtcclxuICBwdWJsaWMgY3VycmVudFpvbmVOYW1lID0gJ1Vua25vd24nO1xyXG4gIHB1YmxpYyBjdXJyZW50Wm9uZUlkID0gJy0xJztcclxuXHJcbiAgcGFyc2VMb2dzKGxvZ3M6IExpbmVFdmVudFtdKTogdm9pZCB7XHJcbiAgICBmb3IgKGNvbnN0IGxpbmVPYmogb2YgbG9ncykge1xyXG4gICAgICB0aGlzLmN1cnJlbnRGaWdodC5wdXNoKGxpbmVPYmopO1xyXG5cclxuICAgICAgbGluZU9iai5vZmZzZXQgPSBsaW5lT2JqLnRpbWVzdGFtcCAtIHRoaXMuY3VycmVudEZpZ2h0U3RhcnQ7XHJcblxyXG4gICAgICBjb25zdCByZXMgPSBFbXVsYXRvckNvbW1vbi5tYXRjaEVuZChsaW5lT2JqLm5ldHdvcmtMaW5lKTtcclxuICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgIHRoaXMuZW5kRmlnaHQoKTtcclxuICAgICAgfSBlbHNlIGlmIChsaW5lT2JqIGluc3RhbmNlb2YgTGluZUV2ZW50MHgwMSkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudFpvbmVJZCA9IGxpbmVPYmouem9uZUlkO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFpvbmVOYW1lID0gbGluZU9iai56b25lTmFtZTtcclxuICAgICAgICB0aGlzLmVuZEZpZ2h0KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0IGN1cnJlbnRGaWdodFN0YXJ0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50RmlnaHRbMF0/LnRpbWVzdGFtcCA/PyAwO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXQgY3VycmVudEZpZ2h0RW5kKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50RmlnaHQuc2xpY2UoLTEpWzBdPy50aW1lc3RhbXAgPz8gMDtcclxuICB9XHJcblxyXG4gIGVuZEZpZ2h0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuY3VycmVudEZpZ2h0Lmxlbmd0aCA8IDIpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKHRoaXMuY3VycmVudEZpZ2h0U3RhcnQpLnRvSVNPU3RyaW5nKCk7XHJcbiAgICBjb25zdCBlbmQgPSBuZXcgRGF0ZSh0aGlzLmN1cnJlbnRGaWdodEVuZCkudG9JU09TdHJpbmcoKTtcclxuXHJcbiAgICBjb25zb2xlLmRlYnVnKGBEaXNwYXRjaGluZyBuZXcgZmlnaHRcclxuU3RhcnQ6ICR7c3RhcnR9XHJcbkVuZDogJHtlbmR9XHJcblpvbmU6ICR7dGhpcy5jdXJyZW50Wm9uZU5hbWV9XHJcbkxpbmUgQ291bnQ6ICR7dGhpcy5jdXJyZW50RmlnaHQubGVuZ3RofVxyXG5gKTtcclxuICAgIHZvaWQgdGhpcy5kaXNwYXRjaCgnZmlnaHQnLCBzdGFydC5zdWJzdHIoMCwgMTApLCB0aGlzLmN1cnJlbnRab25lSWQsIHRoaXMuY3VycmVudFpvbmVOYW1lLCB0aGlzLmN1cnJlbnRGaWdodCk7XHJcblxyXG4gICAgdGhpcy5jdXJyZW50RmlnaHQgPSBbXTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVyc2lzdG9yRW5jb3VudGVyIHtcclxuICBjb25zdHJ1Y3RvcihlbmNvdW50ZXIpIHtcclxuICAgIHRoaXMuaWQgPSBlbmNvdW50ZXIuaWQ7XHJcbiAgICB0aGlzLm5hbWUgPSBlbmNvdW50ZXIuY29tYmF0YW50VHJhY2tlci5nZXRNYWluQ29tYmF0YW50TmFtZSgpO1xyXG4gICAgdGhpcy5zdGFydCA9IGVuY291bnRlci5zdGFydFRpbWVzdGFtcDtcclxuICAgIHRoaXMub2Zmc2V0ID0gZW5jb3VudGVyLmluaXRpYWxPZmZzZXQ7XHJcbiAgICB0aGlzLnN0YXJ0U3RhdHVzID0gZW5jb3VudGVyLnN0YXJ0U3RhdHVzO1xyXG4gICAgdGhpcy5lbmRTdGF0dXMgPSBlbmNvdW50ZXIuZW5kU3RhdHVzO1xyXG4gICAgdGhpcy56b25lSWQgPSBlbmNvdW50ZXIuZW5jb3VudGVyWm9uZUlkO1xyXG4gICAgdGhpcy56b25lTmFtZSA9IGVuY291bnRlci5lbmNvdW50ZXJab25lTmFtZTtcclxuICAgIHRoaXMuZHVyYXRpb24gPSBlbmNvdW50ZXIuZW5kVGltZXN0YW1wIC0gZW5jb3VudGVyLnN0YXJ0VGltZXN0YW1wO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgRW11bGF0b3JDb21tb24gZnJvbSAnLi4vRW11bGF0b3JDb21tb24nO1xyXG5pbXBvcnQgRXZlbnRCdXMgZnJvbSAnLi4vRXZlbnRCdXMnO1xyXG5pbXBvcnQgUGVyc2lzdG9yRW5jb3VudGVyIGZyb20gJy4vUGVyc2lzdG9yRW5jb3VudGVyJztcclxuaW1wb3J0IEVuY291bnRlciBmcm9tICcuL0VuY291bnRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJzaXN0b3IgZXh0ZW5kcyBFdmVudEJ1cyB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5EQiA9IG51bGw7XHJcbiAgICB0aGlzLmluaXRpYWxpemVEQigpO1xyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGl6ZURCKCkge1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IHdpbmRvdy5pbmRleGVkREIub3BlbignUmFpZEVtdWxhdG9yRW5jb3VudGVycycsIFBlcnNpc3Rvci5kYlZlcnNpb24pO1xyXG4gICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgKGV2KSA9PiB7XHJcbiAgICAgIHRoaXMuREIgPSBldi50YXJnZXQucmVzdWx0O1xyXG4gICAgICB0aGlzLmRpc3BhdGNoKCdyZWFkeScpO1xyXG4gICAgfSk7XHJcbiAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3VwZ3JhZGVuZWVkZWQnLCAoZXYpID0+IHtcclxuICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcclxuICAgICAgbGV0IGVuY291bnRlcnNTdG9yYWdlO1xyXG4gICAgICBsZXQgZW5jb3VudGVyU3VtbWFyaWVzU3RvcmFnZTtcclxuICAgICAgLy8gV2UgZGVsaWJlcmF0ZWx5IGF2b2lkIHVzaW5nIGJyZWFrcyBmb3IgdGhpcyBzd2l0Y2gvY2FzZSB0byBhbGxvd1xyXG4gICAgICAvLyBpbmNyZW1lbnRhbCB1cGdyYWRlcyB0byBhcHBseSBpbiBzZXF1ZW5jZVxyXG4gICAgICBzd2l0Y2ggKGV2Lm9sZFZlcnNpb24pIHtcclxuICAgICAgY2FzZSAwOlxyXG4gICAgICAgIGVuY291bnRlcnNTdG9yYWdlID0gZXYudGFyZ2V0LnJlc3VsdC5jcmVhdGVPYmplY3RTdG9yZSgnRW5jb3VudGVycycsIHtcclxuICAgICAgICAgIGtleVBhdGg6ICdpZCcsXHJcbiAgICAgICAgICBhdXRvSW5jcmVtZW50OiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGVuY291bnRlclN1bW1hcmllc1N0b3JhZ2UgPSBldi50YXJnZXQucmVzdWx0LmNyZWF0ZU9iamVjdFN0b3JlKCdFbmNvdW50ZXJTdW1tYXJpZXMnLCB7XHJcbiAgICAgICAgICBrZXlQYXRoOiAnaWQnLFxyXG4gICAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBlbmNvdW50ZXJTdW1tYXJpZXNTdG9yYWdlLmNyZWF0ZUluZGV4KCd6b25lTmFtZScsICd6b25lTmFtZScpO1xyXG4gICAgICAgIGVuY291bnRlclN1bW1hcmllc1N0b3JhZ2UuY3JlYXRlSW5kZXgoJ3N0YXJ0JywgJ3N0YXJ0Jyk7XHJcbiAgICAgICAgZW5jb3VudGVyU3VtbWFyaWVzU3RvcmFnZS5jcmVhdGVJbmRleCgnem9uZU5hbWVfc3RhcnQnLCBbJ3pvbmVOYW1lJywgJ3N0YXJ0J10pO1xyXG4gICAgICB9XHJcbiAgICAgIHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoKHJlcykgPT4ge1xyXG4gICAgICAgIGVuY291bnRlcnNTdG9yYWdlLnRyYW5zYWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgKHRldikgPT4ge1xyXG4gICAgICAgICAgcmVzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pKTtcclxuICAgICAgcHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZSgocmVzKSA9PiB7XHJcbiAgICAgICAgZW5jb3VudGVyU3VtbWFyaWVzU3RvcmFnZS50cmFuc2FjdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsICh0ZXYpID0+IHtcclxuICAgICAgICAgIHJlcygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KSk7XHJcblxyXG4gICAgICBsZXQgY29tcGxldGVkID0gMDtcclxuICAgICAgZm9yIChjb25zdCBpIGluIHByb21pc2VzKSB7XHJcbiAgICAgICAgcHJvbWlzZXNbaV0udGhlbigoKSA9PiB7XHJcbiAgICAgICAgICArK2NvbXBsZXRlZDtcclxuICAgICAgICAgIGlmIChjb21wbGV0ZWQgPT09IHByb21pc2VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLkRCID0gZXYudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCgncmVhZHknKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwZXJzaXN0RW5jb3VudGVyKGJhc2VFbmNvdW50ZXIpIHtcclxuICAgIGxldCByZXQ7XHJcbiAgICBpZiAodGhpcy5EQiAhPT0gbnVsbCkge1xyXG4gICAgICBsZXQgcmVzb2x2ZXI7XHJcbiAgICAgIHJldCA9IG5ldyBQcm9taXNlKChyZXMpID0+IHtcclxuICAgICAgICByZXNvbHZlciA9IHJlcztcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IGVuY291bnRlciA9IEVtdWxhdG9yQ29tbW9uLmNsb25lRGF0YShiYXNlRW5jb3VudGVyLCBbXSk7XHJcbiAgICAgIGRlbGV0ZSBlbmNvdW50ZXIuY29tYmF0YW50VHJhY2tlcjtcclxuICAgICAgY29uc3QgZW5jb3VudGVyc1N0b3JhZ2UgPSB0aGlzLmVuY291bnRlcnNTdG9yYWdlO1xyXG4gICAgICBsZXQgcmVxO1xyXG4gICAgICBpZiAoZW5jb3VudGVyLmlkID09PSBudWxsKSB7XHJcbiAgICAgICAgZGVsZXRlIGVuY291bnRlci5pZDtcclxuICAgICAgICByZXEgPSBlbmNvdW50ZXJzU3RvcmFnZS5hZGQoZW5jb3VudGVyKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXEgPSBlbmNvdW50ZXJzU3RvcmFnZS5wdXQoZW5jb3VudGVyKTtcclxuICAgICAgfVxyXG4gICAgICByZXEuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIChldikgPT4ge1xyXG4gICAgICAgIGJhc2VFbmNvdW50ZXIuaWQgPSBlbmNvdW50ZXIuaWQgPSBldi50YXJnZXQucmVzdWx0O1xyXG4gICAgICAgIGNvbnN0IGVuY291bnRlclN1bW1hcmllc1N0b3JhZ2UgPSB0aGlzLmVuY291bnRlclN1bW1hcmllc1N0b3JhZ2U7XHJcbiAgICAgICAgY29uc3Qgc3VtbWFyeSA9IG5ldyBQZXJzaXN0b3JFbmNvdW50ZXIoYmFzZUVuY291bnRlcik7XHJcbiAgICAgICAgY29uc3QgcmVxMiA9IGVuY291bnRlclN1bW1hcmllc1N0b3JhZ2UucHV0KHN1bW1hcnkpO1xyXG4gICAgICAgIHJlcTIuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIChldikgPT4ge1xyXG4gICAgICAgICAgcmVzb2x2ZXIoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXQgPSBuZXcgUHJvbWlzZSgocikgPT4gcigpKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG5cclxuICBsb2FkRW5jb3VudGVyKGlkKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcykgPT4ge1xyXG4gICAgICBpZiAodGhpcy5EQiAhPT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IGVuY291bnRlcnNTdG9yYWdlID0gdGhpcy5lbmNvdW50ZXJzU3RvcmFnZTtcclxuICAgICAgICBjb25zdCByZXEgPSBlbmNvdW50ZXJzU3RvcmFnZS5nZXQoaWQpO1xyXG4gICAgICAgIHJlcS5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgKGV2KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBlbmMgPSByZXEucmVzdWx0O1xyXG4gICAgICAgICAgY29uc3QgcmV0ID0gbmV3IEVuY291bnRlcihlbmMuZW5jb3VudGVyRGF5LFxyXG4gICAgICAgICAgICAgIGVuYy5lbmNvdW50ZXJab25lSWQsXHJcbiAgICAgICAgICAgICAgZW5jLmVuY291bnRlclpvbmVOYW1lLFxyXG4gICAgICAgICAgICAgIGVuYy5sb2dMaW5lcyk7XHJcbiAgICAgICAgICByZXQuaWQgPSBlbmMuaWQ7XHJcbiAgICAgICAgICAvLyBDaGVjayBmb3IgZW5jb3VudGVyIHVwZ3JhZGUsIHJlLXNhdmUgZW5jb3VudGVyIGlmIGl0J3MgdXBncmFkZWQuXHJcbiAgICAgICAgICBpZiAocmV0LnVwZ3JhZGUoZW5jLnZlcnNpb24pKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGVyc2lzdEVuY291bnRlcihyZXQpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJlcyhyZXQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldC5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgICAgIHJlcyhyZXQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlcyhudWxsKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVFbmNvdW50ZXIoaWQpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLkRCICE9PSBudWxsKSB7XHJcbiAgICAgICAgY29uc3QgZW5jb3VudGVyc1N0b3JhZ2UgPSB0aGlzLmVuY291bnRlcnNTdG9yYWdlO1xyXG4gICAgICAgIGNvbnN0IHJlcSA9IGVuY291bnRlcnNTdG9yYWdlLmRlbGV0ZShpZCk7XHJcbiAgICAgICAgcmVxLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCAoZXYpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGVuY291bnRlclN1bW1hcmllc1N0b3JhZ2UgPSB0aGlzLmVuY291bnRlclN1bW1hcmllc1N0b3JhZ2U7XHJcbiAgICAgICAgICBjb25zdCByZXEgPSBlbmNvdW50ZXJTdW1tYXJpZXNTdG9yYWdlLmRlbGV0ZShpZCk7XHJcbiAgICAgICAgICByZXEuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIChldikgPT4ge1xyXG4gICAgICAgICAgICByZXModHJ1ZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJlcS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIChldikgPT4ge1xyXG4gICAgICAgICAgICByZXMoZmFsc2UpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmVxLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGV2KSA9PiB7XHJcbiAgICAgICAgICByZXMoZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlcyhudWxsKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBsaXN0RW5jb3VudGVycyh6b25lTmFtZSA9IG51bGwsIHN0YXJ0VGltZXN0YW1wID0gbnVsbCwgZW5kVGltZXN0YW1wID0gbnVsbCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMpID0+IHtcclxuICAgICAgaWYgKHRoaXMuREIgIT09IG51bGwpIHtcclxuICAgICAgICBjb25zdCBlbmNvdW50ZXJTdW1tYXJpZXNTdG9yYWdlID0gdGhpcy5lbmNvdW50ZXJTdW1tYXJpZXNTdG9yYWdlO1xyXG4gICAgICAgIGxldCBrZXlSYW5nZSA9IG51bGw7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gbnVsbDtcclxuICAgICAgICBpZiAoem9uZU5hbWUgIT09IG51bGwpIHtcclxuICAgICAgICAgIGlmIChzdGFydFRpbWVzdGFtcCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpbmRleCA9IGVuY291bnRlclN1bW1hcmllc1N0b3JhZ2UuaW5kZXgoJ3pvbmVOYW1lX3N0YXJ0Jyk7XHJcbiAgICAgICAgICAgIGlmIChlbmRUaW1lc3RhbXAgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICBrZXlSYW5nZSA9IElEQktleVJhbmdlLmJvdW5kKFt6b25lTmFtZSwgc3RhcnRUaW1lc3RhbXBdLCBbem9uZU5hbWUsIGVuZFRpbWVzdGFtcF0sXHJcbiAgICAgICAgICAgICAgICAgIFt0cnVlLCB0cnVlXSwgW3RydWUsIHRydWVdKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBrZXlSYW5nZSA9IElEQktleVJhbmdlLmxvd2VyQm91bmQoW3pvbmVOYW1lLCBzdGFydFRpbWVzdGFtcF0sIFt0cnVlLCB0cnVlXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gZW5jb3VudGVyU3VtbWFyaWVzU3RvcmFnZS5pbmRleCgnem9uZU5hbWUnKTtcclxuICAgICAgICAgICAga2V5UmFuZ2UgPSBJREJLZXlSYW5nZS5vbmx5KHpvbmVOYW1lKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0VGltZXN0YW1wICE9PSBudWxsKSB7XHJcbiAgICAgICAgICBpbmRleCA9IGVuY291bnRlclN1bW1hcmllc1N0b3JhZ2UuaW5kZXgoJ3N0YXJ0Jyk7XHJcbiAgICAgICAgICBpZiAoZW5kVGltZXN0YW1wICE9PSBudWxsKVxyXG4gICAgICAgICAgICBrZXlSYW5nZSA9IElEQktleVJhbmdlLmJvdW5kKHN0YXJ0VGltZXN0YW1wLCBlbmRUaW1lc3RhbXAsIHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBrZXlSYW5nZSA9IElEQktleVJhbmdlLmxvd2VyQm91bmQoc3RhcnRUaW1lc3RhbXAsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmVxO1xyXG4gICAgICAgIGlmIChrZXlSYW5nZSAhPT0gbnVsbClcclxuICAgICAgICAgIHJlcSA9IGluZGV4LmdldEFsbChrZXlSYW5nZSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgcmVxID0gZW5jb3VudGVyU3VtbWFyaWVzU3RvcmFnZS5nZXRBbGwoKTtcclxuXHJcbiAgICAgICAgcmVxLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCAoZXYpID0+IHtcclxuICAgICAgICAgIHJlcyhyZXEucmVzdWx0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXMoW10pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGNsZWFyREIoKSB7XHJcbiAgICBsZXQgcDFSZXM7XHJcbiAgICBjb25zdCBwMSA9IG5ldyBQcm9taXNlKChyZXMpID0+IHtcclxuICAgICAgcDFSZXMgPSByZXM7XHJcbiAgICB9KTtcclxuICAgIGxldCBwMlJlcztcclxuICAgIGNvbnN0IHAyID0gbmV3IFByb21pc2UoKHJlcykgPT4ge1xyXG4gICAgICBwMlJlcyA9IHJlcztcclxuICAgIH0pO1xyXG4gICAgdGhpcy5lbmNvdW50ZXJzU3RvcmFnZS5jbGVhcigpLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCAoKSA9PiB7XHJcbiAgICAgIHAxUmVzKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuZW5jb3VudGVyU3VtbWFyaWVzU3RvcmFnZS5jbGVhcigpLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCAoKSA9PiB7XHJcbiAgICAgIHAyUmVzKCk7XHJcbiAgICB9KTtcclxuICAgIGF3YWl0IHAxO1xyXG4gICAgYXdhaXQgcDI7XHJcbiAgfVxyXG5cclxuICBhc3luYyBleHBvcnREQigpIHtcclxuICAgIGNvbnN0IHJldCA9IHtcclxuICAgICAgZW5jb3VudGVyczogW10sXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgc3VtbWFyaWVzID0gYXdhaXQgdGhpcy5saXN0RW5jb3VudGVycygpO1xyXG4gICAgZm9yIChjb25zdCBzdW1tYXJ5IG9mIHN1bW1hcmllcykge1xyXG4gICAgICBjb25zdCBlbmMgPSBhd2FpdCB0aGlzLmxvYWRFbmNvdW50ZXIoc3VtbWFyeS5pZCk7XHJcbiAgICAgIHJldC5lbmNvdW50ZXJzLnB1c2goe1xyXG4gICAgICAgIGVuY291bnRlckRheTogRW11bGF0b3JDb21tb24udGltZVRvRGF0ZVN0cmluZyhzdW1tYXJ5LlN0YXJ0KSxcclxuICAgICAgICBlbmNvdW50ZXJab25lTmFtZTogc3VtbWFyeS5ab25lTmFtZSxcclxuICAgICAgICBlbmNvdW50ZXJab25lSWQ6IHN1bW1hcnkuWm9uZUlkLFxyXG4gICAgICAgIGVuY291bnRlckxpbmVzOiBlbmMubG9nTGluZXMsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIGFzeW5jIGltcG9ydERCKERCKSB7XHJcbiAgICBEQi5lbmNvdW50ZXJzLmZvckVhY2goKGVuYykgPT4ge1xyXG4gICAgICB0aGlzLnBlcnNpc3RFbmNvdW50ZXIobmV3IEVuY291bnRlcihlbmMuZW5jb3VudGVyRGF5LFxyXG4gICAgICAgICAgZW5jLmVuY291bnRlclpvbmVJZCxcclxuICAgICAgICAgIGVuYy5lbmNvdW50ZXJab25lTmFtZSxcclxuICAgICAgICAgIGVuYy5lbmNvdW50ZXJMaW5lcykpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXQgZW5jb3VudGVyc1N0b3JhZ2UoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5EQi50cmFuc2FjdGlvbignRW5jb3VudGVycycsICdyZWFkd3JpdGUnKVxyXG4gICAgICAub2JqZWN0U3RvcmUoJ0VuY291bnRlcnMnKTtcclxuICB9XHJcbiAgZ2V0IGVuY291bnRlclN1bW1hcmllc1N0b3JhZ2UoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5EQi50cmFuc2FjdGlvbignRW5jb3VudGVyU3VtbWFyaWVzJywgJ3JlYWR3cml0ZScpXHJcbiAgICAgIC5vYmplY3RTdG9yZSgnRW5jb3VudGVyU3VtbWFyaWVzJyk7XHJcbiAgfVxyXG59XHJcblxyXG5QZXJzaXN0b3IuZGJWZXJzaW9uID0gMztcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0b3BsYXlIZWxwZXIge1xyXG4gIHN0YXRpYyBDaGVjaygpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGNvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7XHJcbiAgICByZXR1cm4gY29udGV4dC5zdGF0ZSA9PT0gJ3N1c3BlbmRlZCc7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgUHJvbXB0KCk6IHZvaWQge1xyXG4gICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICBidXR0b24uaW5uZXJUZXh0ID0gJ0NsaWNrIHRvIGVuYWJsZSBhdWRpbyc7XHJcbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnYXV0b3BsYXktaGVscGVyLWJ1dHRvbicpO1xyXG4gICAgYnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcclxuICAgICAgYnV0dG9uLnJlbW92ZSgpO1xyXG4gICAgfTtcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBDaGVja0FuZFByb21wdCgpOiB2b2lkIHtcclxuICAgIGlmIChBdXRvcGxheUhlbHBlci5DaGVjaygpKVxyXG4gICAgICBBdXRvcGxheUhlbHBlci5Qcm9tcHQoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTGFuZyB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9sYW5ndWFnZXMnO1xyXG5cclxuY2xhc3MgVFRTSXRlbSB7XHJcbiAgcmVhZG9ubHkgdGV4dDogc3RyaW5nO1xyXG4gIHJlYWRvbmx5IGl0ZW06IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZTtcclxuXHJcbiAgY29uc3RydWN0b3IodGV4dDogc3RyaW5nLCBsYW5nPzogc3RyaW5nLCB2b2ljZT86IFNwZWVjaFN5bnRoZXNpc1ZvaWNlKSB7XHJcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xyXG4gICAgdGhpcy5pdGVtID0gbmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSh0ZXh0KTtcclxuICAgIGlmIChsYW5nKVxyXG4gICAgICB0aGlzLml0ZW0ubGFuZyA9IGxhbmc7XHJcbiAgICBpZiAodm9pY2UpXHJcbiAgICAgIHRoaXMuaXRlbS52b2ljZSA9IHZvaWNlO1xyXG4gIH1cclxuXHJcbiAgcGxheSgpIHtcclxuICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuc3BlYWsodGhpcy5pdGVtKTtcclxuICB9XHJcbn1cclxuXHJcbnR5cGUgVFRTSXRlbURpY3Rpb25hcnkgPSB7XHJcbiAgW2tleTogc3RyaW5nXTogVFRTSXRlbTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJvd3NlclRUU0VuZ2luZSB7XHJcbiAgcmVhZG9ubHkgdHRzSXRlbXM6IFRUU0l0ZW1EaWN0aW9uYXJ5ID0ge307XHJcbiAgcHJpdmF0ZSBzcGVlY2hMYW5nPzogc3RyaW5nO1xyXG4gIHByaXZhdGUgc3BlZWNoVm9pY2U/OiBTcGVlY2hTeW50aGVzaXNWb2ljZTtcclxuXHJcbiAgY29uc3RydWN0b3IobGFuZzogTGFuZykge1xyXG4gICAgY29uc3QgY2FjdGJvdExhbmdUb1NwZWVjaExhbmcgPSB7XHJcbiAgICAgIGVuOiAnZW4tVVMnLFxyXG4gICAgICBkZTogJ2RlLURFJyxcclxuICAgICAgZnI6ICdmci1GUicsXHJcbiAgICAgIGphOiAnamEtSlAnLFxyXG4gICAgICAvLyBUT0RPOiBtYXliZSBuZWVkIHRvIHByb3ZpZGUgYW4gb3B0aW9uIG9mIHpoLUNOLCB6aC1ISywgemgtVFc/XHJcbiAgICAgIGNuOiAnemgtQ04nLFxyXG4gICAgICBrbzogJ2tvLUtSJyxcclxuICAgIH07XHJcblxyXG4gICAgLy8gZmlndXJlIG91dCB3aGF0IFRUUyBlbmdpbmUgdHlwZSB3ZSBuZWVkXHJcbiAgICBpZiAod2luZG93LnNwZWVjaFN5bnRoZXNpcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMub252b2ljZXNjaGFuZ2VkID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNwZWVjaExhbmcgPSBjYWN0Ym90TGFuZ1RvU3BlZWNoTGFuZ1tsYW5nXTtcclxuICAgICAgICBjb25zdCB2b2ljZSA9IHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuZ2V0Vm9pY2VzKCkuZmluZCgodm9pY2UpID0+IHZvaWNlLmxhbmcgPT09IHNwZWVjaExhbmcpO1xyXG4gICAgICAgIGlmICh2b2ljZSkge1xyXG4gICAgICAgICAgdGhpcy5zcGVlY2hMYW5nID0gc3BlZWNoTGFuZztcclxuICAgICAgICAgIHRoaXMuc3BlZWNoVm9pY2UgPSB2b2ljZTtcclxuICAgICAgICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMub252b2ljZXNjaGFuZ2VkID0gbnVsbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignQnJvd3NlclRUUyBlcnJvcjogY291bGQgbm90IGZpbmQgdm9pY2UnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdCcm93c2VyVFRTIGVycm9yOiBubyBicm93c2VyIHN1cHBvcnQgZm9yIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHBsYXkodGV4dDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuc3BlZWNoVm9pY2UpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBsZXQgdHRzSXRlbSA9IHRoaXMudHRzSXRlbXNbdGV4dF07XHJcbiAgICAgIGlmICghdHRzSXRlbSkge1xyXG4gICAgICAgIHR0c0l0ZW0gPSBuZXcgVFRTSXRlbSh0ZXh0LCB0aGlzLnNwZWVjaExhbmcsIHRoaXMuc3BlZWNoVm9pY2UpO1xyXG4gICAgICAgIHRoaXMudHRzSXRlbXNbdGV4dF0gPSB0dHNJdGVtO1xyXG4gICAgICB9XHJcbiAgICAgIHR0c0l0ZW0ucGxheSgpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFeGNlcHRpb24gcGVyZm9ybWluZyBUVFMnLCBlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUGFydHksIFBsYXllckNoYW5nZWRSZXQgfSBmcm9tICcuLi90eXBlcy9ldmVudCc7XHJcbmltcG9ydCB7IExhbmcgfSBmcm9tICcuLi9yZXNvdXJjZXMvbGFuZ3VhZ2VzJztcclxuaW1wb3J0IHsgSm9iIH0gZnJvbSAnLi4vdHlwZXMvam9iJztcclxuXHJcbmltcG9ydCB7IGFkZE92ZXJsYXlMaXN0ZW5lciB9IGZyb20gJy4vb3ZlcmxheV9wbHVnaW5fYXBpJztcclxuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJztcclxuXHJcbi8vIFdpbGwgcmVkaXJlY3QgY2FsbHMgZnJvbSBgb25QbGF5ZXJDaGFuZ2VkRXZlbnRgIHRvIHxmdW5jfCBvdmVycmlkaW5nIHdpdGhcclxuLy8gfHBsYXllck5hbWV8IGFuZCB0aGVpciBqb2IuICBKb2IgaXMgaW1wb3J0YW50IGZvciByYWlkYm9zcy5cclxuLy8gSXQgbWlnaHQgYmUgbmljZSB0byBkbyBIUCwgYmVjYXVzZSBvdGhlcndpc2UgdGhlIG1hdGggc2VjdGlvbiBvZlxyXG4vLyBSaWRvcmFuYSBMaWdodGhvdXNlIHdvbid0IHdvcmsuXHJcbi8vXHJcbi8vIE90aGVyIHBhcnRzIG9mIHRoZSBwbGF5ZXIgKHN1Y2ggdGhhdCB3b3VsZCBoZWxwIHRoZSBqb2JzIG92ZXJsYXkgcnVuKVxyXG4vLyBhcmUgZGVsaWJlcmF0ZWx5IG5vdCBpbmNsdWRlZCBoZXJlLCBiZWNhdXNlIGl0J3MgaW1wb3NzaWJsZSB0byBydW5cclxuLy8gam9icyByZW1vdGVseSBkdWUgdG8gZ2F1Z2UgZGF0YSBiZWluZyBsb2NhbCBhbmQgbWFueSBiaXRzIG9mIGluZm9ybWF0aW9uXHJcbi8vIGxvYWRlZCBmcm9tIG1lbW9yeS5cclxuXHJcbmV4cG9ydCB0eXBlIFBsYXllckNoYW5nZWREZXRhaWwgPSB7IGRldGFpbDogUGxheWVyQ2hhbmdlZFJldCB9O1xyXG50eXBlIFBsYXllckNoYW5nZWRGdW5jID0gKGU6IFBsYXllckNoYW5nZWREZXRhaWwpID0+IHZvaWQ7XHJcblxyXG4vLyBAVE9ETzogU3dhcCB0aGUgb3JkZXIgb2YgdGhlc2UgYXJndW1lbnRzLCBtYWtlIHBsYXllck5hbWUgb3B0aW9uYWwgaW5zdGVhZFxyXG5leHBvcnQgY29uc3QgYWRkUGxheWVyQ2hhbmdlZE92ZXJyaWRlTGlzdGVuZXIgPSAoZnVuYzogUGxheWVyQ2hhbmdlZEZ1bmMsXHJcbiAgICBwbGF5ZXJOYW1lPzogc3RyaW5nKTogdm9pZCA9PiB7XHJcbiAgaWYgKCFmdW5jKVxyXG4gICAgcmV0dXJuO1xyXG5cclxuICBsZXQgbGFzdFBsYXllckNoYW5nZWRFdmVudDogUGxheWVyQ2hhbmdlZERldGFpbCB8IG51bGwgPSBudWxsO1xyXG4gIGxldCBsYXN0UGxheWVySm9iOiBKb2IgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgY29uc3Qgb25QbGF5ZXJDaGFuZ2VkOiBQbGF5ZXJDaGFuZ2VkRnVuYyA9IChlOiBQbGF5ZXJDaGFuZ2VkRGV0YWlsKSA9PiB7XHJcbiAgICBpZiAocGxheWVyTmFtZSkge1xyXG4gICAgICBlLmRldGFpbC5uYW1lID0gcGxheWVyTmFtZTtcclxuICAgICAgaWYgKGxhc3RQbGF5ZXJKb2IpIHtcclxuICAgICAgICAvLyBVc2UgdGhlIG5vbi1vdmVycmlkZGVuIGpvYiBpZiB3ZSBkb24ndCBrbm93IGFuIG92ZXJyaWRkZW4gb25lLlxyXG4gICAgICAgIGUuZGV0YWlsLmpvYiA9IGxhc3RQbGF5ZXJKb2I7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGxhc3RQbGF5ZXJDaGFuZ2VkRXZlbnQgPSBlO1xyXG5cclxuICAgIGZ1bmMoZSk7XHJcbiAgfTtcclxuXHJcbiAgYWRkT3ZlcmxheUxpc3RlbmVyKCdvblBsYXllckNoYW5nZWRFdmVudCcsIG9uUGxheWVyQ2hhbmdlZCk7XHJcbiAgaWYgKCFwbGF5ZXJOYW1lKVxyXG4gICAgcmV0dXJuO1xyXG5cclxuICBhZGRPdmVybGF5TGlzdGVuZXIoJ1BhcnR5Q2hhbmdlZCcsIChlKSA9PiB7XHJcbiAgICBjb25zdCBwbGF5ZXIgPSBlLnBhcnR5LmZpbmQoKHApID0+IHAubmFtZSA9PT0gcGxheWVyTmFtZSk7XHJcbiAgICBpZiAoIXBsYXllcilcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IG5ld0pvYiA9IFV0aWwuam9iRW51bVRvSm9iKHBsYXllci5qb2IpO1xyXG4gICAgaWYgKG5ld0pvYiA9PT0gbGFzdFBsYXllckpvYilcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGxhc3RQbGF5ZXJKb2IgPSBuZXdKb2I7XHJcbiAgICAvLyBUaGlzIGV2ZW50IG1heSBjb21lIGJlZm9yZSB0aGUgZmlyc3Qgb25QbGF5ZXJDaGFuZ2VkRXZlbnQuXHJcbiAgICBpZiAobGFzdFBsYXllckNoYW5nZWRFdmVudClcclxuICAgICAgb25QbGF5ZXJDaGFuZ2VkKGxhc3RQbGF5ZXJDaGFuZ2VkRXZlbnQpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLy8gQ29tbW9uIFVJIGZvciBzZWxlY3RpbmcgYSBwbGF5ZXIuXHJcbi8vIE9ubHkgdXNlZCBmb3IgcmFpZGJvc3MsIGJ1dCBjb3VsZCBvc3RlbnNpYmx5IGJlIHJldXNlZCBmb3Igb29wc3ksXHJcbi8vIGlmIHRoZXJlJ3MgZXZlciBwbGF5ZXIgc3BlY2lmaWMgc3R1ZmYuXHJcbi8vIFRPRE86IGl0IHdvdWxkIGJlIG5pY2UgdG8gc2hvdyB0aGUgXCJjb25uZWN0ZWQgLyBub3QgY29ubmVjdGVkXCIgYml0IGluIHRoZSBVSS5cclxuZXhwb3J0IGNvbnN0IGFkZFJlbW90ZVBsYXllclNlbGVjdFVJID0gKGxhbmc6IExhbmcpOiB2b2lkID0+IHtcclxuICBjb25zdCBpbnN0cnVjdGlvblRleHRCeUxhbmcgPSB7XHJcbiAgICBlbjogJ1NlbGVjdCBhIFBsYXllclxcbih0aGUgbGlzdCB3aWxsIHVwZGF0ZSB3aGVuIGluIGFuIGluc3RhbmNlKScsXHJcbiAgICBkZTogJ1fDpGhsZSBlaW5lbiBTcGllbGVyXFxuKERpZXNlIExpc3RlIGFrdHVhbGlzaWVydCBzaWNoLCBzb2JhbGQgZWluZSBJbnN0YW5jZSBiZXRyZXR0ZW4gd2lyZCknLFxyXG4gICAgZnI6ICdTw6lsZWN0aW9ubmVyIHVuIGpvdWV1clxcbiAobGEgbGlzdGUgc2UgbWV0dHJhIMOgIGpvdXIgZGFucyB1bmUgaW5zdGFuY2UpJyxcclxuICAgIGphOiAn44OX44Os44O844Ok44O85ZCN44KS6YG45oqe44GX44Gm44GP44Gg44GV44GEXFxuKOOCpOODs+OCueOCv+ODs+OCueOBq+WFpeOCi+OBqOODquOCueODiOOBjOabtOaWsOOBmeOCiyknLFxyXG4gICAgY246ICfor7fpgInmi6nnjqnlrrblkI3np7BcXG4o5q2k5YiX6KGo5bCG5Lya5Zyo6L+b5YWl5Ymv5pys5ZCO5pu05pawKScsXHJcbiAgICBrbzogJ+2UjOugiOydtOyWtOulvCDshKDtg53tlZjshLjsmpRcXG4o7J247Iqk7YS07Iqk7JeQIOyeiOycvOuptCDrpqzsiqTtirjqsIAg7JeF642w7J207Yq465Cp64uI64ukLiknLFxyXG4gIH07XHJcbiAgY29uc3QgZm9yY2VUVFNCeUxhbmcgPSB7XHJcbiAgICBlbjogJ0ZvcmNlIEVuYWJsZSBUZXh0IFRvIFNwZWVjaCcsXHJcbiAgICBkZTogJ0VyendpbmdlIFRleHQgaW4gU3ByYWNoZSAoVFRTKScsXHJcbiAgICBmcjogJ0ZvcmNlciBsXFwnYWN0aXZhdGlvbiBkZSBsYSBzeW50aMOoc2Ugdm9jYWxlIChUVFMpJyxcclxuICAgIGphOiAnVFRT44KS5by35Yi255qE44Gr5pyJ5Yq55YyW44GZ44KLJyxcclxuICAgIGNuOiAn5by65Yi25ZCv55SoVFRTJyxcclxuICAgIGtvOiAnVFRTIOq4sOuKpeydhCDtmZzshLHtmZTtlZjquLAnLFxyXG4gIH07XHJcbiAgY29uc3QgYnV0dG9uVGV4dEJ5TGFuZyA9IHtcclxuICAgIGVuOiAnU3RhcnQgT3ZlcmxheScsXHJcbiAgICBkZTogJ1N0YXJ0IE92ZXJsYXknLFxyXG4gICAgZnI6ICdEw6ltYXJyZXIgbFxcJ092ZXJsYXknLFxyXG4gICAgamE6ICfjgqrjg7zjg5Djg7zjg6zjgqTjgpLotbfli5UnLFxyXG4gICAgY246ICflkK/nlKjmgqzmta7nqpcnLFxyXG4gICAga286ICfsmKTrsoTroIjsnbQg7Iuc7J6RJyxcclxuICB9O1xyXG4gIGNvbnN0IGRlZmF1bHRUZXh0QnlMYW5nID0ge1xyXG4gICAgZW46ICcobm8gb3ZlcnJpZGUpJyxcclxuICAgIGRlOiAnKGtlaW4gw7xiZXJzY2hyZWliZW4pJyxcclxuICAgIGZyOiAnKHBhcyBkZSBkw6lyb2dhdGlvbiknLFxyXG4gICAgamE6ICco5pei5a6a5YCkKScsXHJcbiAgICBjbjogJyjpu5jorqTlgLwpJyxcclxuICAgIGtvOiAnKO2UjOugiOydtOyWtCDsp4DsoJUg7JWI7ZWoKScsXHJcbiAgfTtcclxuXHJcbiAgLy8gVE9ETzogcHJvYmFibHkgc2hvdWxkIHNhdmUgZm9yY2VUVFMgYXMgd2VsbCwgbWF5YmUgc2F2ZSBzb21lIHt9IG9wdGlvbnM/XHJcbiAgY29uc3Qga1N0b3JhZ2VLZXkgPSAnY2FjdGJvdC1sYXN0LXNlbGVjdGVkLXBsYXllcic7XHJcbiAgY29uc3Qgc2F2ZVBsYXllck5hbWUgPSAobmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa1N0b3JhZ2VLZXksIG5hbWUpO1xyXG4gIH07XHJcbiAgY29uc3QgbG9hZFBsYXllck5hbWUgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtTdG9yYWdlS2V5KTtcclxuICB9O1xyXG5cclxuICAvLyBBZGQgY29tbW9uIFVJIHRvIHNlbGVjdCBhIHBsYXllci5cclxuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBjb250YWluZXIuaWQgPSAncGxheWVyLXNlbGVjdCc7XHJcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xyXG5cclxuICBjb25zdCBpbnN0cnVjdGlvbkVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBpbnN0cnVjdGlvbkVsZW0uaWQgPSAncGxheWVyLXNlbGVjdC1pbnN0cnVjdGlvbnMnO1xyXG4gIGluc3RydWN0aW9uRWxlbS5pbm5lckhUTUwgPSBpbnN0cnVjdGlvblRleHRCeUxhbmdbbGFuZ10gfHwgaW5zdHJ1Y3Rpb25UZXh0QnlMYW5nWydlbiddO1xyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnN0cnVjdGlvbkVsZW0pO1xyXG5cclxuICBjb25zdCBsaXN0RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGxpc3RFbGVtLmlkID0gJ3BsYXllci1zZWxlY3QtbGlzdCc7XHJcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGxpc3RFbGVtKTtcclxuXHJcbiAgY29uc3QgdHRzRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgdHRzRWxlbS50eXBlID0gJ2NoZWNrYm94JztcclxuICB0dHNFbGVtLmlkID0gJ3BsYXllci1zZWxlY3QtdHRzJztcclxuICB0dHNFbGVtLm5hbWUgPSAncGxheWVyLXNlbGVjdC10dHMnO1xyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0dHNFbGVtKTtcclxuXHJcbiAgY29uc3QgdHRzTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xyXG4gIHR0c0xhYmVsLmlkID0gJ3BsYXllci1zZWxlY3QtdHRzLWxhYmVsJztcclxuICB0dHNMYWJlbC5odG1sRm9yID0gJ3BsYXllci1zZWxlY3QtdHRzJztcclxuICB0dHNMYWJlbC5pbm5lckhUTUwgPSBmb3JjZVRUU0J5TGFuZ1tsYW5nXSB8fCBmb3JjZVRUU0J5TGFuZ1snZW4nXTtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQodHRzTGFiZWwpO1xyXG5cclxuICBjb25zdCBidXR0b25FbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgYnV0dG9uRWxlbS5pZCA9ICdwbGF5ZXItc2VsZWN0LWJ1dHRvbic7XHJcbiAgYnV0dG9uRWxlbS5uYW1lID0gJ3BsYXllci1zZWxlY3QtYnV0dG9uJztcclxuICBidXR0b25FbGVtLmlubmVySFRNTCA9IGJ1dHRvblRleHRCeUxhbmdbbGFuZ10gfHwgYnV0dG9uVGV4dEJ5TGFuZ1snZW4nXTtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uRWxlbSk7XHJcbiAgYnV0dG9uRWxlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGNvbnN0IGZvcmNlVFRTID0gdHRzRWxlbS5jaGVja2VkO1xyXG4gICAgbGV0IHBsYXllck5hbWUgPSAnJztcclxuICAgIGxldCByYWRpb0luZGV4ID0gMDtcclxuICAgIGZvciAoOzspIHtcclxuICAgICAgcmFkaW9JbmRleCsrO1xyXG4gICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHBsYXllci1yYWRpby0ke3JhZGlvSW5kZXh9YCk7XHJcbiAgICAgIGlmICghZWxlbSB8fCAhKGVsZW0gaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSlcclxuICAgICAgICBicmVhaztcclxuICAgICAgaWYgKCFlbGVtLmNoZWNrZWQpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIHBsYXllck5hbWUgPSBlbGVtLnZhbHVlO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGxheWVyTmFtZSlcclxuICAgICAgc2F2ZVBsYXllck5hbWUocGxheWVyTmFtZSk7XHJcblxyXG4gICAgLy8gUHJlc2VydmUgZXhpc3RpbmcgcGFyYW1ldGVycy5cclxuICAgIGNvbnN0IGN1cnJlbnRQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgY29uc3QgcGFyYW1NYXA6IHsgW3ZhbHVlOiBzdHJpbmddOiBudW1iZXIgfCBzdHJpbmcgfSA9IHt9O1xyXG4gICAgLy8gWWVzLCB0aGlzIGlzICh2LCBrKSBhbmQgbm90IChrLCB2KS5cclxuICAgIGN1cnJlbnRQYXJhbXMuZm9yRWFjaCgodiwgaykgPT4gcGFyYW1NYXBba10gPSBkZWNvZGVVUklDb21wb25lbnQodikpO1xyXG5cclxuICAgIHBhcmFtTWFwLnBsYXllciA9IHBsYXllck5hbWU7XHJcbiAgICAvLyBVc2UgMS8wIHRvIGJlIGNvbnNpc3RlbnQgd2l0aCBvdGhlciBxdWVyeSBwYXJhbWV0ZXJzIHJhdGhlciB0aGFuIHN0cmluZyB0cnVlL2ZhbHNlLlxyXG4gICAgcGFyYW1NYXAuZm9yY2VUVFMgPSBmb3JjZVRUUyA/IDEgOiAwO1xyXG5cclxuICAgIC8vIFRPRE86IG92ZXJsYXlfcGx1Z2luX2FwaS5qcyBkb2Vzbid0IHN1cHBvcnQgdXJpIGVuY29kZWQgT1ZFUkxBWV9XUyBwYXJhbWV0ZXJzLlxyXG4gICAgLy8gU28gdGhpcyBjYW4ndCB1c2UgVVJMU2VhcmNoUGFyYW1zLnRvU3RyaW5nIHlldC4gIE1hbnVhbGx5IGJ1aWxkIHN0cmluZy5cclxuICAgIGxldCBzZWFyY2ggPSAnPyc7XHJcbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhwYXJhbU1hcCkpXHJcbiAgICAgIHNlYXJjaCArPSBgJHtrfT0ke3Z9JmA7XHJcblxyXG4gICAgLy8gUmVsb2FkIHRoZSBwYWdlIHdpdGggbW9yZSBvcHRpb25zLlxyXG4gICAgd2luZG93LmxvY2F0aW9uLnNlYXJjaCA9IHNlYXJjaDtcclxuICB9KTtcclxuXHJcbiAgY29uc3QgbGFzdFNlbGVjdGVkUGxheWVyID0gbG9hZFBsYXllck5hbWUoKTtcclxuXHJcbiAgY29uc3QgYnVpbGRMaXN0ID0gKHBhcnR5OiBQYXJ0eVtdKSA9PiB7XHJcbiAgICB3aGlsZSAobGlzdEVsZW0uZmlyc3RDaGlsZCkge1xyXG4gICAgICBpZiAobGlzdEVsZW0ubGFzdENoaWxkKVxyXG4gICAgICAgIGxpc3RFbGVtLnJlbW92ZUNoaWxkKGxpc3RFbGVtLmxhc3RDaGlsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJhZGlvQ291bnQgPSAwO1xyXG5cclxuICAgIGNvbnN0IGFkZFJhZGlvID0gKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgZXh0cmFDbGFzczogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHJhZGlvQ291bnQrKztcclxuXHJcbiAgICAgIGNvbnN0IGlucHV0TmFtZSA9IGBwbGF5ZXItcmFkaW8tJHtyYWRpb0NvdW50fWA7XHJcblxyXG4gICAgICBjb25zdCBpbnB1dEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICBpbnB1dEVsZW0udHlwZSA9ICdyYWRpbyc7XHJcbiAgICAgIGlucHV0RWxlbS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICBpbnB1dEVsZW0uaWQgPSBpbnB1dE5hbWU7XHJcbiAgICAgIGlucHV0RWxlbS5uYW1lID0gJ3BsYXllci1yYWRpbyc7XHJcbiAgICAgIGlucHV0RWxlbS5jbGFzc0xpc3QuYWRkKCdwbGF5ZXItcmFkaW8nLCBleHRyYUNsYXNzKTtcclxuICAgICAgbGlzdEVsZW0uYXBwZW5kQ2hpbGQoaW5wdXRFbGVtKTtcclxuXHJcbiAgICAgIGNvbnN0IGxhYmVsRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XHJcbiAgICAgIGxhYmVsRWxlbS5odG1sRm9yID0gaW5wdXROYW1lO1xyXG4gICAgICBsYWJlbEVsZW0uaW5uZXJIVE1MID0gbmFtZTtcclxuICAgICAgbGlzdEVsZW0uYXBwZW5kQ2hpbGQobGFiZWxFbGVtKTtcclxuXHJcbiAgICAgIHJldHVybiBpbnB1dEVsZW07XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGRlZmF1bHRUZXh0ID0gZGVmYXVsdFRleHRCeUxhbmdbbGFuZ10gfHwgZGVmYXVsdFRleHRCeUxhbmdbJ2VuJ107XHJcbiAgICBjb25zdCBkZWZhdWx0RWxlbSA9IGFkZFJhZGlvKGRlZmF1bHRUZXh0LCAnJywgJ3BsYXllci1yYWRpby1kZWZhdWx0Jyk7XHJcbiAgICBkZWZhdWx0RWxlbS5jaGVja2VkID0gdHJ1ZTtcclxuXHJcbiAgICBpZiAobGFzdFNlbGVjdGVkUGxheWVyKSB7XHJcbiAgICAgIGNvbnN0IGxhc3QgPSBhZGRSYWRpbyhsYXN0U2VsZWN0ZWRQbGF5ZXIsIGxhc3RTZWxlY3RlZFBsYXllciwgJ3BsYXllci1yYWRpby1sYXN0Jyk7XHJcbiAgICAgIGxhc3QuY2hlY2tlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcGFydHlQbGF5ZXJzID0gcGFydHkuZmlsdGVyKChwKSA9PiBwLmluUGFydHkgJiYgcC5uYW1lICE9PSBsYXN0U2VsZWN0ZWRQbGF5ZXIpO1xyXG4gICAgY29uc3QgcGFydHlOYW1lcyA9IHBhcnR5UGxheWVycy5tYXAoKHApID0+IHAubmFtZSkuc29ydCgpO1xyXG4gICAgZm9yIChjb25zdCBuYW1lIG9mIHBhcnR5TmFtZXMpXHJcbiAgICAgIGFkZFJhZGlvKG5hbWUsIG5hbWUsICdwbGF5ZXItcmFkaW8tcGFydHknKTtcclxuXHJcbiAgICBjb25zdCBhbGxpYW5jZVBsYXllcnMgPSBwYXJ0eS5maWx0ZXIoKHApID0+ICFwLmluUGFydHkgJiYgcC5uYW1lICE9PSBsYXN0U2VsZWN0ZWRQbGF5ZXIpO1xyXG4gICAgY29uc3QgYWxsaWFuY2VOYW1lcyA9IGFsbGlhbmNlUGxheWVycy5tYXAoKHApID0+IHAubmFtZSkuc29ydCgpO1xyXG4gICAgZm9yIChjb25zdCBuYW1lIG9mIGFsbGlhbmNlTmFtZXMpXHJcbiAgICAgIGFkZFJhZGlvKG5hbWUsIG5hbWUsICdwbGF5ZXItcmFkaW8tYWxsaWFuY2UnKTtcclxuICB9O1xyXG4gIGFkZE92ZXJsYXlMaXN0ZW5lcignUGFydHlDaGFuZ2VkJywgKGUpID0+IHtcclxuICAgIGJ1aWxkTGlzdChlLnBhcnR5KTtcclxuICB9KTtcclxuICBidWlsZExpc3QoW10pO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBjYWxsT3ZlcmxheUhhbmRsZXIsIGFkZE92ZXJsYXlMaXN0ZW5lciB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9vdmVybGF5X3BsdWdpbl9hcGknO1xyXG5cclxuaW1wb3J0IEF1dG9wbGF5SGVscGVyIGZyb20gJy4vYXV0b3BsYXlfaGVscGVyJztcclxuaW1wb3J0IEJyb3dzZXJUVFNFbmdpbmUgZnJvbSAnLi9icm93c2VyX3R0c19lbmdpbmUnO1xyXG5pbXBvcnQgeyBhZGRQbGF5ZXJDaGFuZ2VkT3ZlcnJpZGVMaXN0ZW5lciwgUGxheWVyQ2hhbmdlZERldGFpbCB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9wbGF5ZXJfb3ZlcnJpZGUnO1xyXG5pbXBvcnQgUGFydHlUcmFja2VyIGZyb20gJy4uLy4uL3Jlc291cmNlcy9wYXJ0eSc7XHJcbmltcG9ydCBSZWdleGVzIGZyb20gJy4uLy4uL3Jlc291cmNlcy9yZWdleGVzJztcclxuaW1wb3J0IFV0aWwgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3V0aWwnO1xyXG5pbXBvcnQgWm9uZUlkIGZyb20gJy4uLy4uL3Jlc291cmNlcy96b25lX2lkJztcclxuaW1wb3J0IHtcclxuICBMb29zZVRyaWdnZXIsIE91dHB1dFN0cmluZ3MsIFRyaWdnZXJTZXQsIFRpbWVsaW5lRnVuYywgTG9vc2VUcmlnZ2VyU2V0LFxyXG4gIFJlc3BvbnNlRmllbGQsIFRyaWdnZXJBdXRvQ29uZmlnLCBNYXRjaGVzQW55LCBUcmlnZ2VyRmllbGQsIFRyaWdnZXJPdXRwdXQsXHJcbiAgT3V0cHV0LCBSZXNwb25zZU91dHB1dCwgTmV0UmVnZXhUcmlnZ2VyLCBSZWdleFRyaWdnZXIsIFBhcnRpYWxUcmlnZ2VyT3V0cHV0LCBEYXRhSW5pdGlhbGl6ZUZ1bmMsXHJcbn0gZnJvbSAnLi4vLi4vdHlwZXMvdHJpZ2dlcic7XHJcbmltcG9ydCB7IFVucmVhY2hhYmxlQ29kZSB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9ub3RfcmVhY2hlZCc7XHJcbmltcG9ydCB7IExhbmcgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbGFuZ3VhZ2VzJztcclxuaW1wb3J0IHsgUGVyVHJpZ2dlckF1dG9Db25maWcsIFBlclRyaWdnZXJPcHRpb24sIFJhaWRib3NzT3B0aW9ucyB9IGZyb20gJy4vcmFpZGJvc3Nfb3B0aW9ucyc7XHJcbmltcG9ydCB7IFRpbWVsaW5lUmVwbGFjZW1lbnQsIFRpbWVsaW5lTG9hZGVyIH0gZnJvbSAnLi90aW1lbGluZSc7XHJcbmltcG9ydCB7IFJhaWRib3NzRmlsZURhdGEgfSBmcm9tICcuL2RhdGEvcmFpZGJvc3NfbWFuaWZlc3QudHh0JztcclxuaW1wb3J0IHsgUmFpZGJvc3NEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvZGF0YSc7XHJcbmltcG9ydCB7IEpvYiwgUm9sZSB9IGZyb20gJy4uLy4uL3R5cGVzL2pvYic7XHJcbmltcG9ydCB7IEV2ZW50UmVzcG9uc2VzLCBMb2dFdmVudCB9IGZyb20gJy4uLy4uL3R5cGVzL2V2ZW50JztcclxuXHJcbmNvbnN0IGlzUmFpZGJvc3NMb29zZVRpbWVsaW5lVHJpZ2dlciA9XHJcbiAgKHRyaWdnZXI6IExvb3NlVHJpZ2dlcik6IHRyaWdnZXIgaXMgUHJvY2Vzc2VkVGltZWxpbmVUcmlnZ2VyID0+IHtcclxuICAgIHJldHVybiAnaXNUaW1lbGluZVRyaWdnZXInIGluIHRyaWdnZXI7XHJcbiAgfTtcclxuXHJcbmV4cG9ydCBjb25zdCBpc05ldFJlZ2V4VHJpZ2dlciA9ICh0cmlnZ2VyPzogTG9vc2VUcmlnZ2VyKTpcclxuICAgIHRyaWdnZXIgaXMgUGFydGlhbDxOZXRSZWdleFRyaWdnZXI8UmFpZGJvc3NEYXRhPj4gPT4ge1xyXG4gIGlmICh0cmlnZ2VyICYmICFpc1JhaWRib3NzTG9vc2VUaW1lbGluZVRyaWdnZXIodHJpZ2dlcikpXHJcbiAgICByZXR1cm4gJ25ldFJlZ2V4JyBpbiB0cmlnZ2VyO1xyXG4gIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBpc1JlZ2V4VHJpZ2dlciA9ICh0cmlnZ2VyPzogTG9vc2VUcmlnZ2VyKTpcclxuICAgIHRyaWdnZXIgaXMgUGFydGlhbDxSZWdleFRyaWdnZXI8UmFpZGJvc3NEYXRhPj4gPT4ge1xyXG4gIGlmICh0cmlnZ2VyICYmICFpc1JhaWRib3NzTG9vc2VUaW1lbGluZVRyaWdnZXIodHJpZ2dlcikpXHJcbiAgICByZXR1cm4gJ3JlZ2V4JyBpbiB0cmlnZ2VyO1xyXG4gIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFByb2Nlc3NlZFRyaWdnZXIgPSBMb29zZVRyaWdnZXIgJiB7XHJcbiAgZmlsZW5hbWU/OiBzdHJpbmc7XHJcbiAgbG9jYWxSZWdleD86IFJlZ0V4cDtcclxuICBsb2NhbE5ldFJlZ2V4PzogUmVnRXhwO1xyXG4gIG91dHB1dD86IE91dHB1dDtcclxufTtcclxuXHJcbnR5cGUgUHJvY2Vzc2VkVGltZWxpbmVUcmlnZ2VyID0gUHJvY2Vzc2VkVHJpZ2dlciAmIHtcclxuICBpc1RpbWVsaW5lVHJpZ2dlcj86IHRydWU7XHJcbn07XHJcblxyXG50eXBlIFByb2Nlc3NlZFRyaWdnZXJTZXQgPSBMb29zZVRyaWdnZXJTZXQgJiB7XHJcbiAgZmlsZW5hbWU/OiBzdHJpbmc7XHJcbiAgdGltZWxpbmVUcmlnZ2Vycz86IFByb2Nlc3NlZFRpbWVsaW5lVHJpZ2dlcltdO1xyXG4gIHRyaWdnZXJzPzogUHJvY2Vzc2VkVHJpZ2dlcltdO1xyXG59O1xyXG5cclxuLy8gVGhlcmUgc2hvdWxkIGJlIChhdCBtb3N0KSBzaXggbGluZXMgb2YgaW5zdHJ1Y3Rpb25zLlxyXG5jb25zdCByYWlkYm9zc0luc3RydWN0aW9uczogeyBbbGFuZyBpbiBMYW5nXTogc3RyaW5nW10gfSA9IHtcclxuICBlbjogW1xyXG4gICAgJ0luc3RydWN0aW9ucyBhcyBmb2xsb3dzOicsXHJcbiAgICAnVGhpcyBpcyBkZWJ1ZyB0ZXh0IGZvciByZXNpemluZy4nLFxyXG4gICAgJ0l0IGdvZXMgYXdheSB3aGVuIHlvdSBsb2NrIHRoZSBvdmVybGF5JyxcclxuICAgICdhbG9uZyB3aXRoIHRoZSBibHVlIGJhY2tncm91bmQuJyxcclxuICAgICdUaW1lbGluZXMgYW5kIHRyaWdnZXJzIHdpbGwgc2hvdyB1cCBpbiBzdXBwb3J0ZWQgem9uZXMuJyxcclxuICAgICdUZXN0IHJhaWRib3NzIHdpdGggYSAvY291bnRkb3duIGluIFN1bW1lcmZvcmQgRmFybXMuJyxcclxuICBdLFxyXG4gIGRlOiBbXHJcbiAgICAnQW53ZWlzdW5nZW4gd2llIGZvbGd0OicsXHJcbiAgICAnRGllcyBpc3QgZWluIERlYnVnLVRleHQgenVyIEdyw7bDn2Vuw6RuZGVydW5nLicsXHJcbiAgICAnRXIgdmVyc2Nod2luZGV0LCB3ZW5uIGR1IGRhcyBPdmVybGF5IHNwZXJyc3QsJyxcclxuICAgICd6dXNhbW1lbiBtaXQgZGVtIGJsYXVlbiBIaW50ZXJncnVuZC4nLFxyXG4gICAgJ1RpbWVsaW5lIHVuZCBUcmlnZ2VyIHdlcmRlbiBpbiBkZW4gdW50ZXJzdMO8dHp0ZW4gWm9uZW4gYW5nZXplaWd0LicsXHJcbiAgICAnVGVzdGVuIFNpZSBSYWlkYm9zcyBtaXQgZWluZW0gL2NvdW50ZG93biBpbiBTb21tZXJmdXJ0LUjDtmZlLicsXHJcbiAgXSxcclxuICBmcjogW1xyXG4gICAgJ0luc3RydWN0aW9ucyA6JyxcclxuICAgICdDZWNpIGVzdCB1biB0ZXh0ZSBkZSB0ZXN0IHBvdXIgcmVkaW1lbnNpb25uZXIuJyxcclxuICAgICdJbCBkaXNwYXJhaXRyYSBcXChhaW5zaSBxdWUgbGUgZm9uZCBibGV1XFwpIHF1YW5kJyxcclxuICAgICdsXFwnb3ZlcmxheSBzZXJhIGJsb3F1w6kuJyxcclxuICAgICdMZXMgdGltZWxpbmVzIGV0IHRyaWdnZXJzIHNlcm9udCBhZmZpY2jDqXMgZGFucyBsZXMgem9uZXMgc3VwcG9ydMOpZXMuJyxcclxuICAgICdUZXN0ZXogcmFpZGJvc3MgYXZlYyB1biAvY291bnRkb3duIGF1eCBWZXJnZXJzIGRcXCdFc3RpdmFsJyxcclxuICBdLFxyXG4gIGphOiBbXHJcbiAgICAn5pON5L2c5omL6aCG77yaJyxcclxuICAgICfjg4fjg5Djg4PjgrDnlKjjga7jg4bjgq3jgrnjg4jjgafjgZnjgIInLFxyXG4gICAgJ+mdkuiJsuOBruOCquODvOODkOODvOODrOOCpOOCkicsXHJcbiAgICAn44Ot44OD44Kv44GZ44KM44Gw5raI44GI44KL44CCJyxcclxuICAgICfjgrXjg53jg7zjg4jjgZnjgovjgr7jg7zjg7Pjgavjgr/jgqTjg6Djg6njgqTjg7Pjgajjg4jjg6rjgqzjg7zjg4bjgq3jgrnjg4jjgYzooajnpLrjgafjgY3jgovjgIInLFxyXG4gICAgJ+OCteODnuODvOODleOCqeODvOODieW6hOOBqy9jb3VudGRvd27jgrPjg57jg7Pjg4njgpLlrp/ooYzjgZfjgIFyYWlkYm9zc+OCkuODhuOCueODiOOBp+OBjeOCi+OAgicsXHJcbiAgXSxcclxuICBjbjogW1xyXG4gICAgJ+ivt+aMieS7peS4i+atpemqpOaTjeS9nO+8micsXHJcbiAgICAn6L+Z5piv5L6b55So5oi36LCD5pW05oKs5rWu56qX5aSn5bCP55qE6LCD6K+V55So5paH5pysJyxcclxuICAgICflvZPkvaDplIHlrprmraTok53oibLog4zmma/nmoTmgqzmta7nqpcnLFxyXG4gICAgJ+ivpeaWh+acrOWNs+S8mua2iOWkseOAgicsXHJcbiAgICAn5Zyo5pSv5oyB55qE5Yy65Z+f5Lit5Lya6Ieq5Yqo5Yqg6L295pe26Ze06L205ZKM6Kem5Y+R5Zmo44CCJyxcclxuICAgICflj6/lnKjnm5vlpI/lhpzluoTkvb/nlKgvY291bnRkb3du5ZG95Luk5rWL6K+V6K+lcmFpZGJvc3PmqKHlnZfjgIInLFxyXG4gIF0sXHJcbiAga286IFtcclxuICAgICc87KGw7J6RIOyEpOuqhT4nLFxyXG4gICAgJ+2BrOq4sCDsobDsoJXsnYQg7JyE7ZWcIOuUlOuyhOq3uCDssL3snoXri4jri6QnLFxyXG4gICAgJ+2MjOuegCDrsLDqsr3qs7wg7J20IO2FjeyKpO2KuOuKlCcsXHJcbiAgICAn7Jik67KE66CI7J2066W8IOychOy5mOyeoOq4iO2VmOuptCDsgqzrnbzsp5Hri4jri6QnLFxyXG4gICAgJ+yngOybkOuQmOuKlCDqtazsl63sl5DshJwg7YOA7J6E65287J246rO8IO2KuOumrOqxsOqwgCDtkZzsi5zrkKnri4jri6QnLFxyXG4gICAgJ+yXrOumhOyXrOyauCDrho3snqXsl5DshJwg7LSI7J296riw66W8IOyLpO2Wie2VmOyXrCDthYzsiqTtirgg7ZW067O8IOyImCDsnojsirXri4jri6QnLFxyXG4gIF0sXHJcbn07XHJcblxyXG4vLyBCZWNhdXNlIGFwcGFyZW50bHkgcGVvcGxlIGRvbid0IHVuZGVyc3RhbmQgdXBwZXJjYXNlIGdyZWVrIGxldHRlcnMsXHJcbi8vIGFkZCBhIHNwZWNpYWwgY2FzZSB0byBub3QgdXBwZXJjYXNlIHRoZW0uXHJcbmNvbnN0IHRyaWdnZXJVcHBlckNhc2UgPSAoc3RyOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xyXG4gIHJldHVybiBzdHIucmVwbGFjZSgvW17Osc6yzrPOtF0vZywgKHgpID0+IHgudG9VcHBlckNhc2UoKSk7XHJcbn07XHJcblxyXG4vLyBEaXNhYmxlIG5vLWV4cGxpY2l0LWFueSBkdWUgdG8gY2F0Y2ggY2xhdXNlcyByZXF1aXJpbmcgYW55XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbmNvbnN0IG9uVHJpZ2dlckV4Y2VwdGlvbiA9ICh0cmlnZ2VyOiBQcm9jZXNzZWRUcmlnZ2VyLCBlOiBhbnkpID0+IHtcclxuICAvLyBXaGVuIGEgZmlnaHQgZW5kcyBhbmQgdGhlcmUgYXJlIG9wZW4gcHJvbWlzZXMsIGZyb20gZGVsYXlTZWNvbmRzIG9yIHByb21pc2UgaXRzZWxmLFxyXG4gIC8vIGFsbCBwcm9taXNlcyB3aWxsIGJlIHJlamVjdGVkLiAgSW4gdGhpcyBjYXNlIHRoZXJlIGlzIG5vIGVycm9yOyBzaW1wbHkgcmV0dXJuIHdpdGhvdXQgbG9nZ2luZy5cclxuICBpZiAoIWUpXHJcbiAgICByZXR1cm47XHJcblxyXG4gIGxldCBzdHIgPSAnRXJyb3IgaW4gdHJpZ2dlcjogJyArICh0cmlnZ2VyLmlkID8gdHJpZ2dlci5pZCA6ICdbdW5rbm93biB0cmlnZ2VyIGlkXScpO1xyXG5cclxuICBpZiAodHJpZ2dlci5maWxlbmFtZSlcclxuICAgIHN0ciArPSAnICgnICsgdHJpZ2dlci5maWxlbmFtZSArICcpJztcclxuICBjb25zb2xlLmVycm9yKHN0cik7XHJcblxyXG4gIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgIGNvbnN0IGxpbmVzID0gZS5zdGFjaz8uc3BsaXQoJ1xcbicpID8/IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSlcclxuICAgICAgY29uc29sZS5lcnJvcihsaW5lc1tpXSk7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3Qgc291bmRzID0gWydBbGFybScsICdBbGVydCcsICdJbmZvJywgJ0xvbmcnLCAnUHVsbCddIGFzIGNvbnN0O1xyXG5jb25zdCBzb3VuZFN0cnM6IHJlYWRvbmx5IHN0cmluZ1tdID0gc291bmRzO1xyXG5cclxudHlwZSBTb3VuZCA9IHR5cGVvZiBzb3VuZHNbbnVtYmVyXTtcclxudHlwZSBTb3VuZFR5cGUgPSBgJHtTb3VuZH1Tb3VuZGA7XHJcbnR5cGUgU291bmRUeXBlVm9sdW1lID0gYCR7U291bmRUeXBlfVZvbHVtZWA7XHJcblxyXG5jb25zdCB0ZXh0cyA9IFsnaW5mbycsICdhbGVydCcsICdhbGFybSddIGFzIGNvbnN0O1xyXG5cclxuZXhwb3J0IHR5cGUgVGV4dCA9IHR5cGVvZiB0ZXh0c1tudW1iZXJdO1xyXG50eXBlIFRleHRVcHBlciA9IGAke0NhcGl0YWxpemU8VGV4dD59YDtcclxuZXhwb3J0IHR5cGUgVGV4dFRleHQgPSBgJHtUZXh0fVRleHRgO1xyXG50eXBlIFRleHRVcHBlclRleHQgPSBgJHtUZXh0VXBwZXJ9VGV4dGA7XHJcblxyXG50eXBlIFRleHRNYXAgPSB7XHJcbiAgW3RleHQgaW4gVGV4dF06IHtcclxuICAgIHRleHQ6IFRleHRUZXh0O1xyXG4gICAgdXBwZXJUZXh0OiBUZXh0VXBwZXJUZXh0O1xyXG4gICAgdXBwZXJTb3VuZDogU291bmRUeXBlO1xyXG4gICAgdXBwZXJTb3VuZFZvbHVtZTogU291bmRUeXBlVm9sdW1lO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IHRleHRNYXA6IFRleHRNYXAgPSB7XHJcbiAgaW5mbzoge1xyXG4gICAgdGV4dDogJ2luZm9UZXh0JyxcclxuICAgIHVwcGVyVGV4dDogJ0luZm9UZXh0JyxcclxuICAgIHVwcGVyU291bmQ6ICdJbmZvU291bmQnLFxyXG4gICAgdXBwZXJTb3VuZFZvbHVtZTogJ0luZm9Tb3VuZFZvbHVtZScsXHJcbiAgfSxcclxuICBhbGVydDoge1xyXG4gICAgdGV4dDogJ2FsZXJ0VGV4dCcsXHJcbiAgICB1cHBlclRleHQ6ICdBbGVydFRleHQnLFxyXG4gICAgdXBwZXJTb3VuZDogJ0FsZXJ0U291bmQnLFxyXG4gICAgdXBwZXJTb3VuZFZvbHVtZTogJ0FsZXJ0U291bmRWb2x1bWUnLFxyXG4gIH0sXHJcbiAgYWxhcm06IHtcclxuICAgIHRleHQ6ICdhbGFybVRleHQnLFxyXG4gICAgdXBwZXJUZXh0OiAnQWxhcm1UZXh0JyxcclxuICAgIHVwcGVyU291bmQ6ICdBbGFybVNvdW5kJyxcclxuICAgIHVwcGVyU291bmRWb2x1bWU6ICdBbGFybVNvdW5kVm9sdW1lJyxcclxuICB9LFxyXG59O1xyXG5cclxuLy8gSGVscGVyIGZvciBoYW5kbGluZyB0cmlnZ2VyIG92ZXJyaWRlcy5cclxuLy9cclxuLy8gYXNMaXN0IHdpbGwgcmV0dXJuIGEgbGlzdCBvZiB0cmlnZ2VycyBpbiB0aGUgc2FtZSBvcmRlciBhcyBhcHBlbmQgd2FzIGNhbGxlZCwgZXhjZXB0OlxyXG4vLyBJZiBhIGxhdGVyIHRyaWdnZXIgaGFzIHRoZSBzYW1lIGlkIGFzIGEgcHJldmlvdXMgdHJpZ2dlciwgaXQgd2lsbCByZXBsYWNlIHRoZSBwcmV2aW91cyB0cmlnZ2VyXHJcbi8vIGFuZCBhcHBlYXIgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdCB0aGUgcHJldmlvdXMgdHJpZ2dlciBhcHBlYXJlZC5cclxuLy8gZS5nLiBhLCBiMSwgYywgYjIgKHdoZXJlIGIxIGFuZCBiMiBzaGFyZSB0aGUgc2FtZSBpZCkgeWllbGRzIFthLCBiMiwgY10gYXMgdGhlIGZpbmFsIGxpc3QuXHJcbi8vXHJcbi8vIEphdmFTY3JpcHQgZGljdGlvbmFyaWVzIGFyZSAqYWxtb3N0KiBvcmRlcmVkIGF1dG9tYXRpY2FsbHkgYXMgd2Ugd291bGQgd2FudCxcclxuLy8gYnV0IHdhbnQgdG8gaGFuZGxlIG1pc3NpbmcgaWRzIGFuZCBpbnRlZ2VyIGlkcyAoeW91IHNob3VsZG4ndCwgYnV0IGp1c3QgaW4gY2FzZSkuXHJcbmNsYXNzIE9yZGVyZWRUcmlnZ2VyTGlzdCB7XHJcbiAgdHJpZ2dlcnM6IFByb2Nlc3NlZFRyaWdnZXJbXSA9IFtdO1xyXG4gIGlkVG9JbmRleDogeyBbaWQ6IHN0cmluZ106IG51bWJlciB9ID0ge307XHJcblxyXG4gIHB1c2godHJpZ2dlcjogUHJvY2Vzc2VkVHJpZ2dlcikge1xyXG4gICAgY29uc3QgaWR4ID0gdHJpZ2dlci5pZCA/IHRoaXMuaWRUb0luZGV4W3RyaWdnZXIuaWRdIDogdW5kZWZpbmVkO1xyXG4gICAgaWYgKGlkeCAmJiB0cmlnZ2VyLmlkKSB7XHJcbiAgICAgIGNvbnN0IG9sZFRyaWdnZXIgPSB0aGlzLnRyaWdnZXJzW2lkeF07XHJcblxyXG4gICAgICBpZiAob2xkVHJpZ2dlciA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuXHJcbiAgICAgIC8vIFRPRE86IGJlIHZlcmJvc2Ugbm93IHdoaWxlIHRoaXMgaXMgZnJlc2gsIGJ1dCBoaWRlIHRoaXMgb3V0cHV0IGJlaGluZCBkZWJ1ZyBmbGFncyBsYXRlci5cclxuICAgICAgY29uc3QgdHJpZ2dlckZpbGUgPVxyXG4gICAgICAgICh0cmlnZ2VyOiBQcm9jZXNzZWRUcmlnZ2VyKSA9PiB0cmlnZ2VyLmZpbGVuYW1lID8gYCcke3RyaWdnZXIuZmlsZW5hbWV9J2AgOiAndXNlciBvdmVycmlkZSc7XHJcbiAgICAgIGNvbnN0IG9sZEZpbGUgPSB0cmlnZ2VyRmlsZShvbGRUcmlnZ2VyKTtcclxuICAgICAgY29uc3QgbmV3RmlsZSA9IHRyaWdnZXJGaWxlKHRyaWdnZXIpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgT3ZlcnJpZGluZyAnJHt0cmlnZ2VyLmlkfScgZnJvbSAke29sZEZpbGV9IHdpdGggJHtuZXdGaWxlfS5gKTtcclxuXHJcbiAgICAgIHRoaXMudHJpZ2dlcnNbaWR4XSA9IHRyaWdnZXI7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBOb3JtYWwgY2FzZSBvZiBhIG5ldyB0cmlnZ2VyLCB3aXRoIG5vIG92ZXJyaWRpbmcuXHJcbiAgICBpZiAodHJpZ2dlci5pZClcclxuICAgICAgdGhpcy5pZFRvSW5kZXhbdHJpZ2dlci5pZF0gPSB0aGlzLnRyaWdnZXJzLmxlbmd0aDtcclxuICAgIHRoaXMudHJpZ2dlcnMucHVzaCh0cmlnZ2VyKTtcclxuICB9XHJcblxyXG4gIGFzTGlzdCgpIHtcclxuICAgIHJldHVybiB0aGlzLnRyaWdnZXJzO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgaXNPYmplY3QgPSAoeDogdW5rbm93bik6IHggaXMgeyBba2V5OiBzdHJpbmddOiB1bmtub3duIH0gPT4geCBpbnN0YW5jZW9mIE9iamVjdDtcclxuXHJcbi8vIFVzZXIgdHJpZ2dlciBtYXkgcGFzcyBhbnl0aGluZyBhcyBwYXJhbWV0ZXJzXHJcbnR5cGUgVHJpZ2dlclBhcmFtcyA9IHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9O1xyXG5cclxuY2xhc3MgVHJpZ2dlck91dHB1dFByb3h5IHtcclxuICBwdWJsaWMgb3V0cHV0U3RyaW5nczogT3V0cHV0U3RyaW5ncztcclxuICBwdWJsaWMgb3ZlcnJpZGVTdHJpbmdzOiBPdXRwdXRTdHJpbmdzID0ge307XHJcbiAgcHVibGljIHJlc3BvbnNlT3V0cHV0U3RyaW5nczogeyBbb3V0cHV0TmFtZTogc3RyaW5nXTogdW5rbm93biB9ID0ge307XHJcbiAgcHVibGljIHVua25vd25WYWx1ZSA9ICc/Pz8nO1xyXG5cclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKFxyXG4gICAgICBwdWJsaWMgdHJpZ2dlcjogUHJvY2Vzc2VkVHJpZ2dlcixcclxuICAgICAgcHVibGljIGRpc3BsYXlMYW5nOiBMYW5nLFxyXG4gICAgICBwdWJsaWMgcGVyVHJpZ2dlckF1dG9Db25maWc/OiBQZXJUcmlnZ2VyQXV0b0NvbmZpZykge1xyXG4gICAgdGhpcy5vdXRwdXRTdHJpbmdzID0gdHJpZ2dlci5vdXRwdXRTdHJpbmdzID8/IHt9O1xyXG5cclxuICAgIGlmICh0cmlnZ2VyLmlkICYmIHBlclRyaWdnZXJBdXRvQ29uZmlnKSB7XHJcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHBlclRyaWdnZXJBdXRvQ29uZmlnW3RyaWdnZXIuaWRdO1xyXG4gICAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5PdXRwdXRTdHJpbmdzKVxyXG4gICAgICAgIHRoaXMub3ZlcnJpZGVTdHJpbmdzID0gY29uZmlnLk91dHB1dFN0cmluZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XHJcbiAgICAgIC8vIFJlc3BvbnNlIG91dHB1dCBzdHJpbmcgc3VidGxldHk6XHJcbiAgICAgIC8vIFRha2UgdGhpcyBleGFtcGxlIHJlc3BvbnNlOlxyXG4gICAgICAvL1xyXG4gICAgICAvLyAgICByZXNwb25zZTogKGRhdGEsIG1hdGNoZXMsIG91dHB1dCkgPT4ge1xyXG4gICAgICAvLyAgICAgIHJldHVybiB7XHJcbiAgICAgIC8vICAgICAgICBhbGFybVRleHQ6IG91dHB1dC5zb21lQWxhcm0oKSxcclxuICAgICAgLy8gICAgICAgIG91dHB1dFN0cmluZ3M6IHsgc29tZUFsYXJtOiAnc3RyaW5nJyB9LCAvLyA8LSBpbXBvc3NpYmxlXHJcbiAgICAgIC8vICAgICAgfTtcclxuICAgICAgLy8gICAgfSxcclxuICAgICAgLy9cclxuICAgICAgLy8gQmVjYXVzZSB0aGUgb2JqZWN0IGJlaW5nIHJldHVybmVkIGlzIGV2YWx1YXRlZCBhbGwgYXQgb25jZSwgdGhlIG9iamVjdFxyXG4gICAgICAvLyBjYW5ub3Qgc2ltdWx0YW5lb3VzbHkgZGVmaW5lIG91dHB1dFN0cmluZ3MgYW5kIHVzZSB0aG9zZSBvdXRwdXRTdHJpbmdzLlxyXG4gICAgICAvLyBTbywgaW5zdGVhZCwgcmVzcG9uc2VzIG5lZWQgdG8gc2V0IGBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzYC5cclxuICAgICAgLy8gSE9XRVZFUiwgdGhpcyBhbHNvIGhhcyBpdHMgb3duIGlzc3VlcyEgIFRoaXMgdmFsdWUgaXMgc2V0IGZvciB0aGUgdHJpZ2dlclxyXG4gICAgICAvLyAod2hpY2ggbWF5IGhhdmUgbXVsdGlwbGUgYWN0aXZlIGluIGZsaWdodCBpbnN0YW5jZXMpLiAgVGhpcyAqc2hvdWxkKiBiZVxyXG4gICAgICAvLyBvayBiZWNhdXNlIHdlIGd1YXJhbnRlZSB0aGF0IHJlc3BvbnNlL2FsYXJtVGV4dC9hbGVydFRleHQvaW5mb1RleHQvdHRzXHJcbiAgICAgIC8vIGFyZSBldmFsdWF0ZWQgc2VxdWVudGlhbGx5IGZvciBhIHNpbmdsZSB0cmlnZ2VyIGJlZm9yZSBhbnkgb3RoZXIgdHJpZ2dlclxyXG4gICAgICAvLyBpbnN0YW5jZSBldmFsdWF0ZXMgdGhhdCBzZXQgb2YgdHJpZ2dlcnMuICBGaW5hbGx5LCBmb3IgZWFzZSBvZiBhdXRvbWF0aW5nXHJcbiAgICAgIC8vIHRoZSBjb25maWcgdWksIHRoZSByZXNwb25zZSBzaG91bGQgcmV0dXJuIHRoZSBleGFjdCBzYW1lIHNldCBvZlxyXG4gICAgICAvLyBvdXRwdXRTdHJpbmdzIGV2ZXJ5IHRpbWUuICBUaGFuayB5b3UgZm9yIGNvbWluZyB0byBteSBURUQgdGFsay5cclxuICAgICAgc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHByb3BlcnR5ID09PSAncmVzcG9uc2VPdXRwdXRTdHJpbmdzJykge1xyXG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihgSW52YWxpZCByZXNwb25zZU91dHB1dFN0cmluZ3Mgb24gdHJpZ2dlciAke3RhcmdldC50cmlnZ2VyLmlkID8/ICdVbmtub3duJ31gKTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEJlIGtpbmQgdG8gdXNlciB0cmlnZ2VycyB0aGF0IGRvIHdlaXJkIHRoaW5ncywgYW5kIGp1c3QgY29uc29sZSBlcnJvciB0aGlzXHJcbiAgICAgICAgLy8gaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBleGNlcHRpb24uXHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgSW52YWxpZCBwcm9wZXJ0eSAnJHtTdHJpbmcocHJvcGVydHkpfScgb24gb3V0cHV0LmApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGdldCh0YXJnZXQsIG5hbWUpIHtcclxuICAgICAgICAvLyBUT0RPOiBhZGQgYSB0ZXN0IHRoYXQgdmVyaWZpZXMgbm9ib2R5IGRvZXMgdGhpcy5cclxuICAgICAgICBpZiAobmFtZSA9PT0gJ3RvSlNPTicgfHwgdHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgcmV0dXJuICd7fSc7XHJcblxyXG4gICAgICAgIC8vIEJlY2F1c2Ugb3V0cHV0LmZ1bmMoKSBtdXN0IGV4aXN0IGF0IHRoZSB0aW1lIG9mIHRyaWdnZXIgZXZhbCxcclxuICAgICAgICAvLyBhbHdheXMgcHJvdmlkZSBhIGZ1bmN0aW9uIGV2ZW4gYmVmb3JlIHdlIGtub3cgd2hpY2gga2V5cyBhcmUgdmFsaWQuXHJcbiAgICAgICAgcmV0dXJuIChwYXJhbXM6IFRyaWdnZXJQYXJhbXMpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGlkID0gdGFyZ2V0LnRyaWdnZXIuaWQgPz8gJ1Vua25vd24gVHJpZ2dlcic7XHJcblxyXG4gICAgICAgICAgLy8gUHJpb3JpdHk6IHBlci10cmlnZ2VyIGNvbmZpZyBmcm9tIHVpID4gcmVzcG9uc2UgPiBidWlsdC1pbiB0cmlnZ2VyXHJcbiAgICAgICAgICAvLyBJZGVhbGx5LCByZXNwb25zZSBwcm92aWRlcyBldmVyeXRoaW5nIGFuZCB0cmlnZ2VyIHByb3ZpZGVzIG5vdGhpbmcsXHJcbiAgICAgICAgICAvLyBvciB0aGVyZSdzIG5vIHJlc3BvbnNlIGFuZCB0cmlnZ2VyIHByb3ZpZGVzIGV2ZXJ5dGhpbmcuICBIYXZpbmdcclxuICAgICAgICAgIC8vIHRoaXMgd2VsbC1kZWZpbmVkIHNtb290aHMgb3V0IHRoZSBjb2xsaXNpb24gZWRnZSBjYXNlcy5cclxuICAgICAgICAgIGxldCBzdHIgPSB0YXJnZXQuZ2V0UmVwbGFjZW1lbnQodGFyZ2V0Lm92ZXJyaWRlU3RyaW5nc1tuYW1lXSwgcGFyYW1zLCBuYW1lLCBpZCk7XHJcbiAgICAgICAgICBpZiAoc3RyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VTdHJpbmcgPSB0YXJnZXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzW25hbWVdO1xyXG4gICAgICAgICAgICBpZiAoaXNPYmplY3QocmVzcG9uc2VTdHJpbmcpKVxyXG4gICAgICAgICAgICAgIHN0ciA9IHRhcmdldC5nZXRSZXBsYWNlbWVudChyZXNwb25zZVN0cmluZywgcGFyYW1zLCBuYW1lLCBpZCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoc3RyID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHN0ciA9IHRhcmdldC5nZXRSZXBsYWNlbWVudCh0YXJnZXQub3V0cHV0U3RyaW5nc1tuYW1lXSwgcGFyYW1zLCBuYW1lLCBpZCk7XHJcbiAgICAgICAgICBpZiAoc3RyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgVHJpZ2dlciAke3RhcmdldC50cmlnZ2VyLmlkID8/ICcnfSBoYXMgbWlzc2luZyBvdXRwdXRTdHJpbmcgJHtuYW1lfS5gKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC51bmtub3duVmFsdWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFJlcGxhY2VtZW50KFxyXG4gICAgICAvLyBDYW4ndCB1c2Ugb3B0aW9uYWwgbW9kaWZpZXIgZm9yIHRoaXMgYXJnIHNpbmNlIHRoZSBvdGhlcnMgYXJlbid0IG9wdGlvbmFsXHJcbiAgICAgIHRlbXBsYXRlOiB7IFtsYW5nOiBzdHJpbmddOiB1bmtub3duIH0gfCBzdHJpbmcgfCB1bmRlZmluZWQsXHJcbiAgICAgIHBhcmFtczogVHJpZ2dlclBhcmFtcyxcclxuICAgICAgbmFtZTogc3RyaW5nLFxyXG4gICAgICBpZDogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIGlmICghdGVtcGxhdGUpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBsZXQgdmFsdWU6IHVua25vd247XHJcbiAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJylcclxuICAgICAgLy8gdXNlciBjb25maWdcclxuICAgICAgdmFsdWUgPSB0ZW1wbGF0ZTtcclxuICAgIGVsc2VcclxuICAgICAgdmFsdWUgPSB0ZW1wbGF0ZVt0aGlzLmRpc3BsYXlMYW5nXSA/PyB0ZW1wbGF0ZVsnZW4nXTtcclxuXHJcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBUcmlnZ2VyICR7aWR9IGhhcyBpbnZhbGlkIG91dHB1dFN0cmluZyAke25hbWV9LmAsIEpTT04uc3RyaW5naWZ5KHRlbXBsYXRlKSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvXFwke1xccyooW159XFxzXSspXFxzKn0vZywgKF9mdWxsTWF0Y2g6IHN0cmluZywga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgaWYgKHBhcmFtcyAmJiBrZXkgaW4gcGFyYW1zKSB7XHJcbiAgICAgICAgY29uc3Qgc3RyID0gcGFyYW1zW2tleV07XHJcbiAgICAgICAgc3dpdGNoICh0eXBlb2Ygc3RyKSB7XHJcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICAgIHJldHVybiBzdHI7XHJcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICAgIHJldHVybiBzdHIudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgVHJpZ2dlciAke2lkfSBoYXMgbm9uLXN0cmluZyBwYXJhbSB2YWx1ZSAke2tleX0uYCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudW5rbm93blZhbHVlO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFRyaWdnZXIgJHtpZH0gY2FuJ3QgcmVwbGFjZSAke2tleX0gaW4gJHtKU09OLnN0cmluZ2lmeSh0ZW1wbGF0ZSl9LmApO1xyXG4gICAgICByZXR1cm4gdGhpcy51bmtub3duVmFsdWU7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYWtlT3V0cHV0KFxyXG4gICAgICB0cmlnZ2VyOiBQcm9jZXNzZWRUcmlnZ2VyLFxyXG4gICAgICBkaXNwbGF5TGFuZzogTGFuZyxcclxuICAgICAgcGVyVHJpZ2dlckF1dG9Db25maWc/OiBQZXJUcmlnZ2VyQXV0b0NvbmZpZyk6IE91dHB1dCB7XHJcbiAgICAvLyBgT3V0cHV0YCBpcyB0aGUgY29tbW9uIHR5cGUgdXNlZCBmb3IgdGhlIHRyaWdnZXIgZGF0YSBpbnRlcmZhY2UgdG8gc3VwcG9ydCBhcmJpdHJhcnlcclxuICAgIC8vIHN0cmluZyBrZXlzIGFuZCBhbHdheXMgcmV0dXJucyBhIHN0cmluZy4gSG93ZXZlciwgVHlwZVNjcmlwdCBkb2Vzbid0IGhhdmUgZ29vZCBzdXBwb3J0XHJcbiAgICAvLyBmb3IgdGhlIFByb3h5IHJlcHJlc2VudGluZyB0aGlzIHN0cnVjdHVyZSBzbyB3ZSBuZWVkIHRvIGNhc3QgUHJveHkgPT4gdW5rbm93biA9PiBPdXRwdXRcclxuICAgIHJldHVybiBuZXcgVHJpZ2dlck91dHB1dFByb3h5KHRyaWdnZXIsIGRpc3BsYXlMYW5nLFxyXG4gICAgICAgIHBlclRyaWdnZXJBdXRvQ29uZmlnKSBhcyB1bmtub3duIGFzIE91dHB1dDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFJhaWRib3NzVHJpZ2dlckZpZWxkID1cclxuICBUcmlnZ2VyRmllbGQ8UmFpZGJvc3NEYXRhLCBUcmlnZ2VyT3V0cHV0PFJhaWRib3NzRGF0YSwgTWF0Y2hlc0FueT4+IHxcclxuICBUcmlnZ2VyRmllbGQ8UmFpZGJvc3NEYXRhLCBQYXJ0aWFsVHJpZ2dlck91dHB1dDxSYWlkYm9zc0RhdGEsIE1hdGNoZXNBbnk+PjtcclxuZXhwb3J0IHR5cGUgUmFpZGJvc3NUcmlnZ2VyT3V0cHV0ID0gVHJpZ2dlck91dHB1dDxSYWlkYm9zc0RhdGEsIE1hdGNoZXNBbnk+IHxcclxuICBQYXJ0aWFsVHJpZ2dlck91dHB1dDxSYWlkYm9zc0RhdGEsIE1hdGNoZXNBbnk+O1xyXG5cclxuY29uc3QgZGVmYXVsdE91dHB1dCA9IFRyaWdnZXJPdXRwdXRQcm94eS5tYWtlT3V0cHV0KHt9LCAnZW4nKTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVHJpZ2dlckhlbHBlciB7XHJcbiAgdmFsdWVPckZ1bmN0aW9uOiAoZjogUmFpZGJvc3NUcmlnZ2VyRmllbGQpID0+IFJhaWRib3NzVHJpZ2dlck91dHB1dDtcclxuICB0cmlnZ2VyOiBQcm9jZXNzZWRUcmlnZ2VyO1xyXG4gIG5vdzogbnVtYmVyO1xyXG4gIHRyaWdnZXJPcHRpb25zOiBQZXJUcmlnZ2VyT3B0aW9uO1xyXG4gIHRyaWdnZXJBdXRvQ29uZmlnOiBUcmlnZ2VyQXV0b0NvbmZpZztcclxuICAvLyBUaGlzIHNldHRpbmcgb25seSBzdXBwcmVzc2VzIG91dHB1dCwgdHJpZ2dlciBzdGlsbCBydW5zIGZvciBkYXRhL2xvZ2ljIHB1cnBvc2VzXHJcbiAgdXNlclN1cHByZXNzZWRPdXRwdXQ6IGJvb2xlYW47XHJcbiAgbWF0Y2hlczogTWF0Y2hlc0FueTtcclxuICByZXNwb25zZT86IFJlc3BvbnNlT3V0cHV0PFJhaWRib3NzRGF0YSwgTWF0Y2hlc0FueT47XHJcbiAgLy8gRGVmYXVsdCBvcHRpb25zXHJcbiAgc291bmRVcmw/OiBzdHJpbmc7XHJcbiAgc291bmRWb2w/OiBudW1iZXI7XHJcbiAgdHJpZ2dlclNvdW5kVm9sPzogbnVtYmVyO1xyXG4gIGRlZmF1bHRUVFNUZXh0Pzogc3RyaW5nO1xyXG4gIHRleHRBbGVydHNFbmFibGVkOiBib29sZWFuO1xyXG4gIHNvdW5kQWxlcnRzRW5hYmxlZDogYm9vbGVhbjtcclxuICBzcG9rZW5BbGVydHNFbmFibGVkOiBib29sZWFuO1xyXG4gIGdyb3VwU3Bva2VuQWxlcnRzRW5hYmxlZDogYm9vbGVhbjtcclxuICBkdXJhdGlvbj86IHtcclxuICAgIGZyb21Db25maWc/OiBudW1iZXI7XHJcbiAgICBmcm9tVHJpZ2dlcj86IG51bWJlcjtcclxuICAgIGFsYXJtVGV4dDogbnVtYmVyO1xyXG4gICAgYWxlcnRUZXh0OiBudW1iZXI7XHJcbiAgICBpbmZvVGV4dDogbnVtYmVyO1xyXG4gIH07XHJcbiAgdHRzVGV4dD86IHN0cmluZztcclxuXHJcbiAgb3V0cHV0OiBPdXRwdXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQb3B1cFRleHQge1xyXG4gIHByb3RlY3RlZCB0cmlnZ2VyczogUHJvY2Vzc2VkVHJpZ2dlcltdID0gW107XHJcbiAgcHJvdGVjdGVkIG5ldFRyaWdnZXJzOiBQcm9jZXNzZWRUcmlnZ2VyW10gPSBbXTtcclxuICBwcm90ZWN0ZWQgdGltZXJzOiB7IFt0cmlnZ2VySWQ6IG51bWJlcl06IGJvb2xlYW4gfSA9IHt9O1xyXG4gIHByb3RlY3RlZCB0cmlnZ2VyU3VwcHJlc3M6IHsgW3RyaWdnZXJJZDogc3RyaW5nXTogbnVtYmVyIH0gPSB7fTtcclxuICBwcm90ZWN0ZWQgY3VycmVudFRyaWdnZXJJRCA9IDA7XHJcbiAgcHJvdGVjdGVkIGluQ29tYmF0ID0gZmFsc2U7XHJcbiAgcHJvdGVjdGVkIHJlc2V0V2hlbk91dE9mQ29tYmF0ID0gdHJ1ZTtcclxuICAvLyBUaGVzZSBhcmUgZGVsaWJlcmF0ZWx5IGB8IG51bGxgIGZvciByYWlkZW11bGF0b3IgZXh0ZW5kYWJpbGl0eSByZWFzb25zXHJcbiAgcHJvdGVjdGVkIGluZm9UZXh0OiBIVE1MRWxlbWVudCB8IG51bGw7XHJcbiAgcHJvdGVjdGVkIGFsZXJ0VGV4dDogSFRNTEVsZW1lbnQgfCBudWxsO1xyXG4gIHByb3RlY3RlZCBhbGFybVRleHQ6IEhUTUxFbGVtZW50IHwgbnVsbDtcclxuICBwcm90ZWN0ZWQgcGFyc2VyTGFuZzogTGFuZztcclxuICBwcm90ZWN0ZWQgZGlzcGxheUxhbmc6IExhbmc7XHJcbiAgcHJvdGVjdGVkIHR0c0VuZ2luZT86IEJyb3dzZXJUVFNFbmdpbmU7XHJcbiAgcHJvdGVjdGVkIHR0c1NheTogKHRleHQ6IHN0cmluZykgPT4gdm9pZDtcclxuICBwcm90ZWN0ZWQgcGFydHlUcmFja2VyID0gbmV3IFBhcnR5VHJhY2tlcigpO1xyXG4gIHByb3RlY3RlZCByZWFkb25seSBrTWF4Um93c09mVGV4dCA9IDI7XHJcbiAgcHJvdGVjdGVkIGRhdGE6IFJhaWRib3NzRGF0YTtcclxuICBwcm90ZWN0ZWQgbWUgPSAnJztcclxuICBwcm90ZWN0ZWQgam9iOiBKb2IgPSAnTk9ORSc7XHJcbiAgcHJvdGVjdGVkIHJvbGU6IFJvbGUgPSAnbm9uZSc7XHJcbiAgcHJvdGVjdGVkIHRyaWdnZXJTZXRzOiBQcm9jZXNzZWRUcmlnZ2VyU2V0W10gPSBbXTtcclxuICBwcm90ZWN0ZWQgem9uZU5hbWUgPSAnJztcclxuICBwcm90ZWN0ZWQgem9uZUlkID0gLTE7XHJcbiAgcHJvdGVjdGVkIGRhdGFJbml0aWFsaXplcnM6IHtcclxuICAgIGZpbGU6IHN0cmluZztcclxuICAgIGZ1bmM6IERhdGFJbml0aWFsaXplRnVuYzxSYWlkYm9zc0RhdGE+O1xyXG4gIH1bXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgICAgcHJvdGVjdGVkIG9wdGlvbnM6IFJhaWRib3NzT3B0aW9ucyxcclxuICAgICAgcHJvdGVjdGVkIHRpbWVsaW5lTG9hZGVyOiBUaW1lbGluZUxvYWRlcixcclxuICAgICAgcHJvdGVjdGVkIHJhaWRib3NzRGF0YUZpbGVzOiBSYWlkYm9zc0ZpbGVEYXRhKSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgdGhpcy50aW1lbGluZUxvYWRlciA9IHRpbWVsaW5lTG9hZGVyO1xyXG4gICAgdGhpcy5Qcm9jZXNzRGF0YUZpbGVzKHJhaWRib3NzRGF0YUZpbGVzKTtcclxuXHJcbiAgICB0aGlzLmluZm9UZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvcHVwLXRleHQtaW5mbycpO1xyXG4gICAgdGhpcy5hbGVydFRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9wdXAtdGV4dC1hbGVydCcpO1xyXG4gICAgdGhpcy5hbGFybVRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9wdXAtdGV4dC1hbGFybScpO1xyXG5cclxuICAgIHRoaXMucGFyc2VyTGFuZyA9IHRoaXMub3B0aW9ucy5QYXJzZXJMYW5ndWFnZSA/PyAnZW4nO1xyXG4gICAgdGhpcy5kaXNwbGF5TGFuZyA9IHRoaXMub3B0aW9ucy5BbGVydHNMYW5ndWFnZSA/PyB0aGlzLm9wdGlvbnMuRGlzcGxheUxhbmd1YWdlID8/IHRoaXMub3B0aW9ucy5QYXJzZXJMYW5ndWFnZSA/PyAnZW4nO1xyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbnMuSXNSZW1vdGVSYWlkYm9zcykge1xyXG4gICAgICB0aGlzLnR0c0VuZ2luZSA9IG5ldyBCcm93c2VyVFRTRW5naW5lKHRoaXMuZGlzcGxheUxhbmcpO1xyXG4gICAgICB0aGlzLnR0c1NheSA9ICh0ZXh0KSA9PiB7XHJcbiAgICAgICAgdGhpcy50dHNFbmdpbmU/LnBsYXkodGhpcy5vcHRpb25zLlRyYW5zZm9ybVR0cyh0ZXh0KSk7XHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnR0c1NheSA9ICh0ZXh0KSA9PiB7XHJcbiAgICAgICAgdm9pZCBjYWxsT3ZlcmxheUhhbmRsZXIoe1xyXG4gICAgICAgICAgY2FsbDogJ2NhY3Rib3RTYXknLFxyXG4gICAgICAgICAgdGV4dDogdGhpcy5vcHRpb25zLlRyYW5zZm9ybVR0cyh0ZXh0KSxcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmRhdGEgPSB0aGlzLmdldERhdGFPYmplY3QoKTtcclxuXHJcbiAgICAvLyBjaGVjayB0byBzZWUgaWYgd2UgbmVlZCB1c2VyIGludGVyYWN0aW9uIHRvIHBsYXkgYXVkaW9cclxuICAgIC8vIG9ubHkgaWYgYXVkaW8gaXMgZW5hYmxlZCBpbiBvcHRpb25zXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLkF1ZGlvQWxsb3dlZClcclxuICAgICAgQXV0b3BsYXlIZWxwZXIuQ2hlY2tBbmRQcm9tcHQoKTtcclxuXHJcbiAgICB0aGlzLlJlc2V0KCk7XHJcbiAgICB0aGlzLkFkZERlYnVnSW5zdHJ1Y3Rpb25zKCk7XHJcbiAgICB0aGlzLkhvb2tPdmVybGF5cygpO1xyXG4gIH1cclxuXHJcbiAgQWRkRGVidWdJbnN0cnVjdGlvbnMoKTogdm9pZCB7XHJcbiAgICByYWlkYm9zc0luc3RydWN0aW9uc1t0aGlzLmRpc3BsYXlMYW5nXS5mb3JFYWNoKChsaW5lLCBpKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgaW5zdHJ1Y3Rpb25zLSR7aX1gKTtcclxuICAgICAgaWYgKCFlbGVtKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgZWxlbS5pbm5lckhUTUwgPSBsaW5lO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBIb29rT3ZlcmxheXMoKTogdm9pZCB7XHJcbiAgICBhZGRPdmVybGF5TGlzdGVuZXIoJ1BhcnR5Q2hhbmdlZCcsIChlKSA9PiB7XHJcbiAgICAgIHRoaXMucGFydHlUcmFja2VyLm9uUGFydHlDaGFuZ2VkKGUpO1xyXG4gICAgfSk7XHJcbiAgICBhZGRQbGF5ZXJDaGFuZ2VkT3ZlcnJpZGVMaXN0ZW5lcigoZTogUGxheWVyQ2hhbmdlZERldGFpbCkgPT4ge1xyXG4gICAgICB0aGlzLk9uUGxheWVyQ2hhbmdlKGUpO1xyXG4gICAgfSwgdGhpcy5vcHRpb25zLlBsYXllck5hbWVPdmVycmlkZSk7XHJcbiAgICBhZGRPdmVybGF5TGlzdGVuZXIoJ0NoYW5nZVpvbmUnLCAoZSkgPT4ge1xyXG4gICAgICB0aGlzLk9uQ2hhbmdlWm9uZShlKTtcclxuICAgIH0pO1xyXG4gICAgYWRkT3ZlcmxheUxpc3RlbmVyKCdvbkluQ29tYmF0Q2hhbmdlZEV2ZW50JywgKGUpID0+IHtcclxuICAgICAgdGhpcy5PbkluQ29tYmF0Q2hhbmdlKGUuZGV0YWlsLmluR2FtZUNvbWJhdCk7XHJcbiAgICB9KTtcclxuICAgIGFkZE92ZXJsYXlMaXN0ZW5lcignb25Mb2dFdmVudCcsIChlKSA9PiB7XHJcbiAgICAgIHRoaXMuT25Mb2coZSk7XHJcbiAgICB9KTtcclxuICAgIGFkZE92ZXJsYXlMaXN0ZW5lcignTG9nTGluZScsIChlKSA9PiB7XHJcbiAgICAgIHRoaXMuT25OZXRMb2coZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIE9uUGxheWVyQ2hhbmdlKGU6IFBsYXllckNoYW5nZWREZXRhaWwpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmpvYiAhPT0gZS5kZXRhaWwuam9iIHx8IHRoaXMubWUgIT09IGUuZGV0YWlsLm5hbWUpXHJcbiAgICAgIHRoaXMuT25Kb2JDaGFuZ2UoZSk7XHJcbiAgICB0aGlzLmRhdGEuY3VycmVudEhQID0gZS5kZXRhaWwuY3VycmVudEhQO1xyXG4gIH1cclxuXHJcbiAgUHJvY2Vzc0RhdGFGaWxlcyhmaWxlczogUmFpZGJvc3NGaWxlRGF0YSk6IHZvaWQge1xyXG4gICAgdGhpcy50cmlnZ2VyU2V0cyA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBbZmlsZW5hbWUsIGpzb25dIG9mIE9iamVjdC5lbnRyaWVzPFRyaWdnZXJTZXQ8UmFpZGJvc3NEYXRhPj4oZmlsZXMpKSB7XHJcbiAgICAgIGlmICghZmlsZW5hbWUuZW5kc1dpdGgoJy5qcycpICYmICFmaWxlbmFtZS5lbmRzV2l0aCgnLnRzJykpXHJcbiAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGpzb24gIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1VuZXhwZWN0ZWQgSlNPTiBmcm9tICcgKyBmaWxlbmFtZSArICcsIGV4cGVjdGVkIGFuIGFycmF5Jyk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFqc29uLnRyaWdnZXJzKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1VuZXhwZWN0ZWQgSlNPTiBmcm9tICcgKyBmaWxlbmFtZSArICcsIGV4cGVjdGVkIGEgdHJpZ2dlcnMnKTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodHlwZW9mIGpzb24udHJpZ2dlcnMgIT09ICdvYmplY3QnIHx8ICEoanNvbi50cmlnZ2Vycy5sZW5ndGggPj0gMCkpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnVW5leHBlY3RlZCBKU09OIGZyb20gJyArIGZpbGVuYW1lICsgJywgZXhwZWN0ZWQgdHJpZ2dlcnMgdG8gYmUgYW4gYXJyYXknKTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnRyaWdnZXJTZXRzLnB1c2goe1xyXG4gICAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZSxcclxuICAgICAgICAuLi5qc29uLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVc2VyIHRyaWdnZXJzIG11c3QgY29tZSBsYXN0IHNvIHRoYXQgdGhleSBvdmVycmlkZSBidWlsdC1pbiBmaWxlcy5cclxuICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMudHJpZ2dlclNldHMsIHRoaXMub3B0aW9ucy5UcmlnZ2Vycyk7XHJcbiAgfVxyXG5cclxuICBPbkNoYW5nZVpvbmUoZTogRXZlbnRSZXNwb25zZXNbJ0NoYW5nZVpvbmUnXSk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuem9uZU5hbWUgIT09IGUuem9uZU5hbWUpIHtcclxuICAgICAgdGhpcy56b25lTmFtZSA9IGUuem9uZU5hbWU7XHJcbiAgICAgIHRoaXMuem9uZUlkID0gZS56b25lSUQ7XHJcbiAgICAgIHRoaXMuUmVsb2FkVGltZWxpbmVzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBSZWxvYWRUaW1lbGluZXMoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMudHJpZ2dlclNldHMgfHwgIXRoaXMubWUgfHwgIXRoaXMuem9uZU5hbWUgfHwgIXRoaXMudGltZWxpbmVMb2FkZXIuSXNSZWFkeSgpKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgLy8gRHJvcCB0aGUgdHJpZ2dlcnMgYW5kIHRpbWVsaW5lcyBmcm9tIHRoZSBwcmV2aW91cyB6b25lLCBzbyB3ZSBjYW4gYWRkIG5ldyBvbmVzLlxyXG4gICAgdGhpcy50cmlnZ2VycyA9IFtdO1xyXG4gICAgdGhpcy5uZXRUcmlnZ2VycyA9IFtdO1xyXG4gICAgbGV0IHRpbWVsaW5lRmlsZXMgPSBbXTtcclxuICAgIGxldCB0aW1lbGluZXM6IHN0cmluZ1tdID0gW107XHJcbiAgICBjb25zdCByZXBsYWNlbWVudHM6IFRpbWVsaW5lUmVwbGFjZW1lbnRbXSA9IFtdO1xyXG4gICAgY29uc3QgdGltZWxpbmVTdHlsZXMgPSBbXTtcclxuICAgIHRoaXMucmVzZXRXaGVuT3V0T2ZDb21iYXQgPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0IG9yZGVyZWRUcmlnZ2VycyA9IG5ldyBPcmRlcmVkVHJpZ2dlckxpc3QoKTtcclxuXHJcbiAgICAvLyBSZWN1cnNpdmVseS9pdGVyYXRpdmVseSBwcm9jZXNzIHRpbWVsaW5lIGVudHJpZXMgZm9yIHRyaWdnZXJzLlxyXG4gICAgLy8gRnVuY3Rpb25zIGdldCBjYWxsZWQgd2l0aCBkYXRhLCBhcnJheXMgZ2V0IGl0ZXJhdGVkLCBzdHJpbmdzIGdldCBhcHBlbmRlZC5cclxuICAgIGNvbnN0IGFkZFRpbWVsaW5lID0gKGZ1bmN0aW9uKHRoaXM6IFBvcHVwVGV4dCwgb2JqOiBUaW1lbGluZUZ1bmMpIHtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xyXG4gICAgICAgIGZvciAoY29uc3Qgb2JqVmFsIG9mIG9iailcclxuICAgICAgICAgIGFkZFRpbWVsaW5lKG9ialZhbCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIGFkZFRpbWVsaW5lKG9iaih0aGlzLmRhdGEpKTtcclxuICAgICAgfSBlbHNlIGlmIChvYmopIHtcclxuICAgICAgICB0aW1lbGluZXMucHVzaChvYmopO1xyXG4gICAgICB9XHJcbiAgICB9KS5iaW5kKHRoaXMpO1xyXG5cclxuICAgIC8vIGNvbnN0cnVjdCBzb21ldGhpbmcgbGlrZSByZWdleERlIG9yIHJlZ2V4RnIuXHJcbiAgICBjb25zdCBsYW5nU3VmZml4ID0gdGhpcy5wYXJzZXJMYW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5wYXJzZXJMYW5nLnNsaWNlKDEpO1xyXG4gICAgY29uc3QgcmVnZXhQYXJzZXJMYW5nID0gJ3JlZ2V4JyArIGxhbmdTdWZmaXg7XHJcbiAgICBjb25zdCBuZXRSZWdleFBhcnNlckxhbmcgPSAnbmV0UmVnZXgnICsgbGFuZ1N1ZmZpeDtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHNldCBvZiB0aGlzLnRyaWdnZXJTZXRzKSB7XHJcbiAgICAgIC8vIHpvbmVSZWdleCBjYW4gYmUgdW5kZWZpbmVkLCBhIHJlZ2V4LCBvciB0cmFuc2xhdGFibGUgb2JqZWN0IG9mIHJlZ2V4LlxyXG4gICAgICBjb25zdCBoYXZlWm9uZVJlZ2V4ID0gJ3pvbmVSZWdleCcgaW4gc2V0O1xyXG4gICAgICBjb25zdCBoYXZlWm9uZUlkID0gJ3pvbmVJZCcgaW4gc2V0O1xyXG4gICAgICBpZiAoIWhhdmVab25lUmVnZXggJiYgIWhhdmVab25lSWQgfHwgaGF2ZVpvbmVSZWdleCAmJiBoYXZlWm9uZUlkKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgVHJpZ2dlciBzZXQgbXVzdCBpbmNsdWRlIGV4YWN0bHkgb25lIG9mIHpvbmVSZWdleCBvciB6b25lSWQgcHJvcGVydHlgKTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaGF2ZVpvbmVJZCAmJiBzZXQuem9uZUlkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IHNldC5maWxlbmFtZSA/IGAnJHtzZXQuZmlsZW5hbWV9J2AgOiAnKHVzZXIgZmlsZSknO1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFRyaWdnZXIgc2V0IGhhcyB6b25lSWQsIGJ1dCB3aXRoIG5vdGhpbmcgc3BlY2lmaWVkIGluICR7ZmlsZW5hbWV9LiAgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICBgRGlkIHlvdSBtaXNzcGVsbCB0aGUgWm9uZUlkLlpvbmVOYW1lP2ApO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc2V0LnpvbmVJZCkge1xyXG4gICAgICAgIGlmIChzZXQuem9uZUlkICE9PSBab25lSWQuTWF0Y2hBbGwgJiYgc2V0LnpvbmVJZCAhPT0gdGhpcy56b25lSWQgJiYgISh0eXBlb2Ygc2V0LnpvbmVJZCA9PT0gJ29iamVjdCcgJiYgc2V0LnpvbmVJZC5pbmNsdWRlcyh0aGlzLnpvbmVJZCkpKVxyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgIH0gZWxzZSBpZiAoc2V0LnpvbmVSZWdleCkge1xyXG4gICAgICAgIGxldCB6b25lUmVnZXggPSBzZXQuem9uZVJlZ2V4O1xyXG4gICAgICAgIGlmICh0eXBlb2Ygem9uZVJlZ2V4ICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignem9uZVJlZ2V4IG11c3QgYmUgdHJhbnNsYXRhYmxlIG9iamVjdCBvciByZWdleHA6ICcgKyBKU09OLnN0cmluZ2lmeShzZXQuem9uZVJlZ2V4KSk7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKCEoem9uZVJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKSkge1xyXG4gICAgICAgICAgY29uc3QgcGFyc2VyTGFuZ1JlZ2V4ID0gem9uZVJlZ2V4W3RoaXMucGFyc2VyTGFuZ107XHJcbiAgICAgICAgICBpZiAocGFyc2VyTGFuZ1JlZ2V4KSB7XHJcbiAgICAgICAgICAgIHpvbmVSZWdleCA9IHBhcnNlckxhbmdSZWdleDtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoem9uZVJlZ2V4WydlbiddKSB7XHJcbiAgICAgICAgICAgIHpvbmVSZWdleCA9IHpvbmVSZWdleFsnZW4nXTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3Vua25vd24gem9uZVJlZ2V4IHBhcnNlciBsYW5ndWFnZTogJyArIEpTT04uc3RyaW5naWZ5KHNldC56b25lUmVnZXgpKTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKCEoem9uZVJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCd6b25lUmVnZXggbXVzdCBiZSByZWdleHA6ICcgKyBKU09OLnN0cmluZ2lmeShzZXQuem9uZVJlZ2V4KSk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy56b25lTmFtZS5zZWFyY2goUmVnZXhlcy5wYXJzZSh6b25lUmVnZXgpKSA8IDApXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5EZWJ1Zykge1xyXG4gICAgICAgIGlmIChzZXQuZmlsZW5hbWUpXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnTG9hZGluZyAnICsgc2V0LmZpbGVuYW1lKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnTG9hZGluZyB1c2VyIHRyaWdnZXJzIGZvciB6b25lJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHNldEZpbGVuYW1lID0gc2V0LmZpbGVuYW1lID8/ICdVbmtub3duJztcclxuXHJcbiAgICAgIGlmIChzZXQuaW5pdERhdGEpIHtcclxuICAgICAgICB0aGlzLmRhdGFJbml0aWFsaXplcnMucHVzaCh7XHJcbiAgICAgICAgICBmaWxlOiBzZXRGaWxlbmFtZSxcclxuICAgICAgICAgIGZ1bmM6IHNldC5pbml0RGF0YSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQWRqdXN0IHRyaWdnZXJzIGZvciB0aGUgcGFyc2VyIGxhbmd1YWdlLlxyXG4gICAgICBpZiAoc2V0LnRyaWdnZXJzICYmIHRoaXMub3B0aW9ucy5BbGVydHNFbmFibGVkKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCB0cmlnZ2VyIG9mIHNldC50cmlnZ2Vycykge1xyXG4gICAgICAgICAgLy8gQWRkIGFuIGFkZGl0aW9uYWwgcmVzb2x2ZWQgcmVnZXggaGVyZSB0byBzYXZlXHJcbiAgICAgICAgICAvLyB0aW1lIGxhdGVyLiAgVGhpcyB3aWxsIGNsb2JiZXIgZWFjaCB0aW1lIHdlXHJcbiAgICAgICAgICAvLyBsb2FkIHRoaXMsIGJ1dCB0aGF0J3Mgb2suXHJcbiAgICAgICAgICB0cmlnZ2VyLmZpbGVuYW1lID0gc2V0RmlsZW5hbWU7XHJcbiAgICAgICAgICBjb25zdCBpZCA9IHRyaWdnZXIuaWQ7XHJcblxyXG4gICAgICAgICAgaWYgKCFpc1JlZ2V4VHJpZ2dlcih0cmlnZ2VyKSAmJiAhaXNOZXRSZWdleFRyaWdnZXIodHJpZ2dlcikpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgVHJpZ2dlciAke2lkfTogaGFzIG5vIHJlZ2V4IHByb3BlcnR5IHNwZWNpZmllZGApO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aGlzLlByb2Nlc3NUcmlnZ2VyKHRyaWdnZXIpO1xyXG5cclxuICAgICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHRyaWdnZXJPYmplY3Q6IHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9ID0gdHJpZ2dlcjtcclxuXHJcbiAgICAgICAgICAvLyBwYXJzZXItbGFuZ3VhZ2UtYmFzZWQgcmVnZXggdGFrZXMgcHJlY2VkZW5jZS5cclxuICAgICAgICAgIGlmIChpc1JlZ2V4VHJpZ2dlcih0cmlnZ2VyKSkge1xyXG4gICAgICAgICAgICBjb25zdCByZWdleCA9IHRyaWdnZXJPYmplY3RbcmVnZXhQYXJzZXJMYW5nXSA/PyB0cmlnZ2VyLnJlZ2V4O1xyXG4gICAgICAgICAgICBpZiAocmVnZXggaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgICAgICAgICB0cmlnZ2VyLmxvY2FsUmVnZXggPSBSZWdleGVzLnBhcnNlKHJlZ2V4KTtcclxuICAgICAgICAgICAgICBvcmRlcmVkVHJpZ2dlcnMucHVzaCh0cmlnZ2VyKTtcclxuICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoaXNOZXRSZWdleFRyaWdnZXIodHJpZ2dlcikpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV0UmVnZXggPSB0cmlnZ2VyT2JqZWN0W25ldFJlZ2V4UGFyc2VyTGFuZ10gPz8gdHJpZ2dlci5uZXRSZWdleDtcclxuICAgICAgICAgICAgaWYgKG5ldFJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgICAgICAgdHJpZ2dlci5sb2NhbE5ldFJlZ2V4ID0gUmVnZXhlcy5wYXJzZShuZXRSZWdleCk7XHJcbiAgICAgICAgICAgICAgb3JkZXJlZFRyaWdnZXJzLnB1c2godHJpZ2dlcik7XHJcbiAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKCFmb3VuZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdUcmlnZ2VyICcgKyB0cmlnZ2VyLmlkICsgJzogbWlzc2luZyByZWdleCBhbmQgbmV0UmVnZXgnKTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc2V0Lm92ZXJyaWRlVGltZWxpbmVGaWxlKSB7XHJcbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBzZXQuZmlsZW5hbWUgPyBgJyR7c2V0LmZpbGVuYW1lfSdgIDogJyh1c2VyIGZpbGUpJztcclxuICAgICAgICBjb25zb2xlLmxvZyhgT3ZlcnJpZGluZyB0aW1lbGluZSBmcm9tICR7ZmlsZW5hbWV9LmApO1xyXG5cclxuICAgICAgICAvLyBJZiB0aGUgdGltZWxpbmUgZmlsZSBvdmVycmlkZSBpcyBzZXQsIGFsbCBwcmV2aW91c2x5IGxvYWRlZCB0aW1lbGluZSBpbmZvIGlzIGRyb3BwZWQuXHJcbiAgICAgICAgLy8gU3R5bGVzLCB0cmlnZ2VycywgYW5kIHRyYW5zbGF0aW9ucyBhcmUga2VwdCwgYXMgdGhleSBtYXkgc3RpbGwgYXBwbHkgdG8gdGhlIG5ldyBvbmUuXHJcbiAgICAgICAgdGltZWxpbmVGaWxlcyA9IFtdO1xyXG4gICAgICAgIHRpbWVsaW5lcyA9IFtdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBbmQgc2V0IHRoZSB0aW1lbGluZSBmaWxlcy90aW1lbGluZXMgZnJvbSBlYWNoIHNldCB0aGF0IG1hdGNoZXMuXHJcbiAgICAgIGlmIChzZXQudGltZWxpbmVGaWxlKSB7XHJcbiAgICAgICAgaWYgKHNldC5maWxlbmFtZSkge1xyXG4gICAgICAgICAgY29uc3QgZGlyID0gc2V0LmZpbGVuYW1lLnN1YnN0cmluZygwLCBzZXQuZmlsZW5hbWUubGFzdEluZGV4T2YoJy8nKSk7XHJcbiAgICAgICAgICB0aW1lbGluZUZpbGVzLnB1c2goZGlyICsgJy8nICsgc2V0LnRpbWVsaW5lRmlsZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIE5vdGU6IEZvciB1c2VyIGZpbGVzLCB0aGlzIHNob3VsZCBnZXQgaGFuZGxlZCBieSByYWlkYm9zc19jb25maWcuanMsXHJcbiAgICAgICAgICAvLyB3aGVyZSBgdGltZWxpbmVGaWxlYCBzaG91bGQgZ2V0IGNvbnZlcnRlZCB0byBgdGltZWxpbmVgLlxyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignQ2FuXFwndCBzcGVjaWZ5IHRpbWVsaW5lRmlsZSBpbiBub24tbWFuaWZlc3QgZmlsZTonICsgc2V0LnRpbWVsaW5lRmlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc2V0LnRpbWVsaW5lKVxyXG4gICAgICAgIGFkZFRpbWVsaW5lKHNldC50aW1lbGluZSk7XHJcbiAgICAgIGlmIChzZXQudGltZWxpbmVSZXBsYWNlKVxyXG4gICAgICAgIHJlcGxhY2VtZW50cy5wdXNoKC4uLnNldC50aW1lbGluZVJlcGxhY2UpO1xyXG4gICAgICBpZiAoc2V0LnRpbWVsaW5lVHJpZ2dlcnMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2Ygc2V0LnRpbWVsaW5lVHJpZ2dlcnMpIHtcclxuICAgICAgICAgIHRoaXMuUHJvY2Vzc1RyaWdnZXIodHJpZ2dlcik7XHJcbiAgICAgICAgICB0cmlnZ2VyLmlzVGltZWxpbmVUcmlnZ2VyID0gdHJ1ZTtcclxuICAgICAgICAgIG9yZGVyZWRUcmlnZ2Vycy5wdXNoKHRyaWdnZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoc2V0LnRpbWVsaW5lU3R5bGVzKVxyXG4gICAgICAgIHRpbWVsaW5lU3R5bGVzLnB1c2goLi4uc2V0LnRpbWVsaW5lU3R5bGVzKTtcclxuICAgICAgaWYgKHNldC5yZXNldFdoZW5PdXRPZkNvbWJhdCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRoaXMucmVzZXRXaGVuT3V0T2ZDb21iYXQgJiY9IHNldC5yZXNldFdoZW5PdXRPZkNvbWJhdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdG9yZSBhbGwgdGhlIGNvbGxlY3RlZCB0cmlnZ2VycyBpbiBvcmRlciwgYW5kIGZpbHRlciBvdXQgZGlzYWJsZWQgdHJpZ2dlcnMuXHJcbiAgICBjb25zdCBmaWx0ZXJFbmFibGVkID0gKHRyaWdnZXI6IExvb3NlVHJpZ2dlcikgPT4gISgnZGlzYWJsZWQnIGluIHRyaWdnZXIgJiYgdHJpZ2dlci5kaXNhYmxlZCk7XHJcbiAgICBjb25zdCBhbGxUcmlnZ2VycyA9IG9yZGVyZWRUcmlnZ2Vycy5hc0xpc3QoKS5maWx0ZXIoZmlsdGVyRW5hYmxlZCk7XHJcblxyXG4gICAgdGhpcy50cmlnZ2VycyA9IGFsbFRyaWdnZXJzLmZpbHRlcihpc1JlZ2V4VHJpZ2dlcik7XHJcbiAgICB0aGlzLm5ldFRyaWdnZXJzID0gYWxsVHJpZ2dlcnMuZmlsdGVyKGlzTmV0UmVnZXhUcmlnZ2VyKTtcclxuICAgIGNvbnN0IHRpbWVsaW5lVHJpZ2dlcnMgPSBhbGxUcmlnZ2Vycy5maWx0ZXIoaXNSYWlkYm9zc0xvb3NlVGltZWxpbmVUcmlnZ2VyKTtcclxuXHJcbiAgICB0aGlzLlJlc2V0KCk7XHJcblxyXG4gICAgdGhpcy50aW1lbGluZUxvYWRlci5TZXRUaW1lbGluZXMoXHJcbiAgICAgICAgdGltZWxpbmVGaWxlcyxcclxuICAgICAgICB0aW1lbGluZXMsXHJcbiAgICAgICAgcmVwbGFjZW1lbnRzLFxyXG4gICAgICAgIHRpbWVsaW5lVHJpZ2dlcnMsXHJcbiAgICAgICAgdGltZWxpbmVTdHlsZXMsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgUHJvY2Vzc1RyaWdnZXIodHJpZ2dlcjogUHJvY2Vzc2VkVHJpZ2dlciB8IFByb2Nlc3NlZFRpbWVsaW5lVHJpZ2dlcik6IHZvaWQge1xyXG4gICAgLy8gVGhlc2UgcHJvcGVydGllcyBhcmUgdXNlZCBpbnRlcm5hbGx5IGJ5IFJlbG9hZFRpbWVsaW5lcyBvbmx5IGFuZCBzaG91bGRcclxuICAgIC8vIG5vdCBleGlzdCBvbiB1c2VyIHRyaWdnZXJzLiAgSG93ZXZlciwgdGhlIHRyaWdnZXIgb2JqZWN0cyB0aGVtc2VsdmVzIGFyZVxyXG4gICAgLy8gcmV1c2VkIHdoZW4gcmVsb2FkaW5nIHBhZ2VzLCBhbmQgc28gaXQgaXMgaW1wb3NzaWJsZSB0byB2ZXJpZnkgdGhhdFxyXG4gICAgLy8gdGhlc2UgcHJvcGVydGllcyBkb24ndCBleGlzdC4gIFRoZXJlZm9yZSwganVzdCBkZWxldGUgdGhlbSBzaWxlbnRseS5cclxuICAgIGlmIChpc1JhaWRib3NzTG9vc2VUaW1lbGluZVRyaWdnZXIodHJpZ2dlcikpXHJcbiAgICAgIGRlbGV0ZSB0cmlnZ2VyLmlzVGltZWxpbmVUcmlnZ2VyO1xyXG5cclxuICAgIGRlbGV0ZSB0cmlnZ2VyLmxvY2FsUmVnZXg7XHJcbiAgICBkZWxldGUgdHJpZ2dlci5sb2NhbE5ldFJlZ2V4O1xyXG5cclxuICAgIHRyaWdnZXIub3V0cHV0ID0gVHJpZ2dlck91dHB1dFByb3h5Lm1ha2VPdXRwdXQodHJpZ2dlciwgdGhpcy5vcHRpb25zLkRpc3BsYXlMYW5ndWFnZSxcclxuICAgICAgICB0aGlzLm9wdGlvbnMuUGVyVHJpZ2dlckF1dG9Db25maWcpO1xyXG4gIH1cclxuXHJcbiAgT25Kb2JDaGFuZ2UoZTogUGxheWVyQ2hhbmdlZERldGFpbCk6IHZvaWQge1xyXG4gICAgdGhpcy5tZSA9IGUuZGV0YWlsLm5hbWU7XHJcbiAgICB0aGlzLmpvYiA9IGUuZGV0YWlsLmpvYjtcclxuICAgIHRoaXMucm9sZSA9IFV0aWwuam9iVG9Sb2xlKHRoaXMuam9iKTtcclxuICAgIHRoaXMuUmVsb2FkVGltZWxpbmVzKCk7XHJcbiAgfVxyXG5cclxuICBPbkluQ29tYmF0Q2hhbmdlKGluQ29tYmF0OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5pbkNvbWJhdCA9PT0gaW5Db21iYXQpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBpZiAodGhpcy5yZXNldFdoZW5PdXRPZkNvbWJhdClcclxuICAgICAgdGhpcy5TZXRJbkNvbWJhdChpbkNvbWJhdCk7XHJcbiAgfVxyXG5cclxuICBTZXRJbkNvbWJhdChpbkNvbWJhdDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuaW5Db21iYXQgPT09IGluQ29tYmF0KVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgLy8gU3RvcCB0aW1lcnMgd2hlbiBzdG9wcGluZyBjb21iYXQgdG8gc3RvcCBhbnkgYWN0aXZlIHRpbWVycyB0aGF0XHJcbiAgICAvLyBhcmUgZGVsYXllZC4gIEhvd2V2ZXIsIGFsc28gcmVzZXQgd2hlbiBzdGFydGluZyBjb21iYXQuXHJcbiAgICAvLyBUaGlzIHByZXZlbnRzIGxhdGUgYXR0YWNrcyBmcm9tIGFmZmVjdGluZyB8ZGF0YXwgd2hpY2hcclxuICAgIC8vIHRocm93cyBvZmYgdGhlIG5leHQgcnVuLCBwb3RlbnRpYWxseS5cclxuICAgIHRoaXMuaW5Db21iYXQgPSBpbkNvbWJhdDtcclxuICAgIGlmICghdGhpcy5pbkNvbWJhdCkge1xyXG4gICAgICB0aGlzLlN0b3BUaW1lcnMoKTtcclxuICAgICAgdGhpcy50aW1lbGluZUxvYWRlci5TdG9wQ29tYmF0KCk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5pbkNvbWJhdClcclxuICAgICAgdGhpcy5SZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgU2hvcnROYW1pZnkobmFtZT86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAvLyBUT0RPOiBtYWtlIHRoaXMgdW5pcXVlIGFtb25nIHRoZSBwYXJ0eSBpbiBjYXNlIG9mIGZpcnN0IG5hbWUgY29sbGlzaW9ucy5cclxuICAgIC8vIFRPRE86IHByb2JhYmx5IHRoaXMgc2hvdWxkIGJlIGEgZ2VuZXJhbCBjYWN0Ym90IHV0aWxpdHkuXHJcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ2NhbGxlZCBTaG9ydE5hbWlmeSB3aXRoIG5vbi1zdHJpbmcnKTtcclxuICAgICAgcmV0dXJuICc/Pz8nO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG5pY2sgPSB0aGlzLm9wdGlvbnMuUGxheWVyTmlja3NbbmFtZV07XHJcblxyXG4gICAgaWYgKG5pY2spXHJcbiAgICAgIHJldHVybiBuaWNrO1xyXG5cclxuICAgIGNvbnN0IGlkeCA9IG5hbWUuaW5kZXhPZignICcpO1xyXG4gICAgcmV0dXJuIGlkeCA8IDAgPyBuYW1lIDogbmFtZS5zdWJzdHIoMCwgaWR4KTtcclxuICB9XHJcblxyXG4gIFJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5kYXRhID0gdGhpcy5nZXREYXRhT2JqZWN0KCk7XHJcbiAgICB0aGlzLlN0b3BUaW1lcnMoKTtcclxuICAgIHRoaXMudHJpZ2dlclN1cHByZXNzID0ge307XHJcblxyXG4gICAgZm9yIChjb25zdCBpbml0T2JqIG9mIHRoaXMuZGF0YUluaXRpYWxpemVycykge1xyXG4gICAgICBjb25zdCBpbml0ID0gaW5pdE9iai5mdW5jO1xyXG4gICAgICBjb25zdCBkYXRhID0gaW5pdCgpO1xyXG4gICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0ge1xyXG4gICAgICAgICAgLi4uZGF0YSxcclxuICAgICAgICAgIC4uLnRoaXMuZGF0YSxcclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBpbiBmaWxlOiAke2luaXRPYmouZmlsZX06IHRoZXNlIHRyaWdnZXJzIG1heSBub3Qgd29yaztcclxuICAgICAgICBpbml0RGF0YSBmdW5jdGlvbiByZXR1cm5lZCBpbnZhbGlkIG9iamVjdDogJHtpbml0LnRvU3RyaW5nKCl9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIFN0b3BUaW1lcnMoKTogdm9pZCB7XHJcbiAgICB0aGlzLnRpbWVycyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgT25Mb2coZTogTG9nRXZlbnQpOiB2b2lkIHtcclxuICAgIC8vIFRoaXMgY291bGQgY29uY2VpdmFibHkgYmUgZGV0ZXJtaW5lZCBiYXNlZCBvbiB0aGUgbGluZSdzIGNvbnRlbnRzIGFzIHdlbGwsIGJ1dFxyXG4gICAgLy8gbm90IHN1cmUgaWYgdGhhdCdzIHdvcnRoIHRoZSBlZmZvcnRcclxuICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gK25ldyBEYXRlKCk7XHJcbiAgICBmb3IgKGNvbnN0IGxvZyBvZiBlLmRldGFpbC5sb2dzKSB7XHJcbiAgICAgIGlmIChsb2cuaW5jbHVkZXMoJzAwOjAwMzg6Y2FjdGJvdCB3aXBlJykpXHJcbiAgICAgICAgdGhpcy5TZXRJbkNvbWJhdChmYWxzZSk7XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2YgdGhpcy50cmlnZ2Vycykge1xyXG4gICAgICAgIGNvbnN0IHIgPSB0cmlnZ2VyLmxvY2FsUmVnZXg/LmV4ZWMobG9nKTtcclxuICAgICAgICBpZiAocilcclxuICAgICAgICAgIHRoaXMuT25UcmlnZ2VyKHRyaWdnZXIsIHIsIGN1cnJlbnRUaW1lKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgT25OZXRMb2coZTogRXZlbnRSZXNwb25zZXNbJ0xvZ0xpbmUnXSk6IHZvaWQge1xyXG4gICAgY29uc3QgbG9nID0gZS5yYXdMaW5lO1xyXG4gICAgLy8gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBiZSBkZXRlcm1pbmVkIGJhc2VkIG9uIGBuZXcgRGF0ZShlLmxpbmVbMV0pYCBhcyB3ZWxsLCBidXRcclxuICAgIC8vIG5vdCBzdXJlIGlmIHRoYXQncyB3b3J0aCB0aGUgZWZmb3J0XHJcbiAgICBjb25zdCBjdXJyZW50VGltZSA9ICtuZXcgRGF0ZSgpO1xyXG4gICAgZm9yIChjb25zdCB0cmlnZ2VyIG9mIHRoaXMubmV0VHJpZ2dlcnMpIHtcclxuICAgICAgY29uc3QgciA9IHRyaWdnZXIubG9jYWxOZXRSZWdleD8uZXhlYyhsb2cpO1xyXG4gICAgICBpZiAocilcclxuICAgICAgICB0aGlzLk9uVHJpZ2dlcih0cmlnZ2VyLCByLCBjdXJyZW50VGltZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBPblRyaWdnZXIoXHJcbiAgICAgIHRyaWdnZXI6IFByb2Nlc3NlZFRyaWdnZXIsXHJcbiAgICAgIG1hdGNoZXM6IFJlZ0V4cEV4ZWNBcnJheSB8IG51bGwsXHJcbiAgICAgIGN1cnJlbnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMuT25UcmlnZ2VySW50ZXJuYWwodHJpZ2dlciwgbWF0Y2hlcywgY3VycmVudFRpbWUpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBvblRyaWdnZXJFeGNlcHRpb24odHJpZ2dlciwgZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBPblRyaWdnZXJJbnRlcm5hbChcclxuICAgICAgdHJpZ2dlcjogUHJvY2Vzc2VkVHJpZ2dlcixcclxuICAgICAgbWF0Y2hlczogUmVnRXhwRXhlY0FycmF5IHwgbnVsbCxcclxuICAgICAgY3VycmVudFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX29uVHJpZ2dlckludGVybmFsQ2hlY2tTdXBwcmVzc2VkKHRyaWdnZXIsIGN1cnJlbnRUaW1lKSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGxldCBncm91cHM6IE1hdGNoZXNBbnkgPSB7fTtcclxuICAgIC8vIElmIHVzaW5nIG5hbWVkIGdyb3VwcywgdHJlYXQgbWF0Y2hlcy5ncm91cHMgYXMgbWF0Y2hlc1xyXG4gICAgLy8gc28gdHJpZ2dlcnMgY2FuIGRvIHRoaW5ncyBsaWtlIG1hdGNoZXMudGFyZ2V0LlxyXG4gICAgaWYgKG1hdGNoZXMgJiYgbWF0Y2hlcy5ncm91cHMpXHJcbiAgICAgIGdyb3VwcyA9IG1hdGNoZXMuZ3JvdXBzO1xyXG5cclxuICAgIC8vIFNldCB1cCBhIGhlbHBlciBvYmplY3Qgc28gd2UgZG9uJ3QgaGF2ZSB0byB0aHJvd1xyXG4gICAgLy8gYSB0b24gb2YgaW5mbyBiYWNrIGFuZCBmb3J0aCBiZXR3ZWVuIHN1YmZ1bmN0aW9uc1xyXG4gICAgY29uc3QgdHJpZ2dlckhlbHBlciA9IHRoaXMuX29uVHJpZ2dlckludGVybmFsR2V0SGVscGVyKHRyaWdnZXIsIGdyb3VwcywgY3VycmVudFRpbWUpO1xyXG5cclxuICAgIGlmICghdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxDb25kaXRpb24odHJpZ2dlckhlbHBlcikpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICB0aGlzLl9vblRyaWdnZXJJbnRlcm5hbFByZVJ1bih0cmlnZ2VySGVscGVyKTtcclxuXHJcbiAgICAvLyBFdmFsdWF0ZSBmb3IgZGVsYXkgaGVyZSwgYnV0IHJ1biBkZWxheSBsYXRlclxyXG4gICAgY29uc3QgZGVsYXlQcm9taXNlID0gdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxEZWxheVNlY29uZHModHJpZ2dlckhlbHBlcik7XHJcbiAgICB0aGlzLl9vblRyaWdnZXJJbnRlcm5hbER1cmF0aW9uU2Vjb25kcyh0cmlnZ2VySGVscGVyKTtcclxuICAgIHRoaXMuX29uVHJpZ2dlckludGVybmFsU3VwcHJlc3NTZWNvbmRzKHRyaWdnZXJIZWxwZXIpO1xyXG5cclxuICAgIGNvbnN0IHRyaWdnZXJQb3N0RGVsYXkgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLl9vblRyaWdnZXJJbnRlcm5hbFByb21pc2UodHJpZ2dlckhlbHBlcik7XHJcbiAgICAgIGNvbnN0IHRyaWdnZXJQb3N0UHJvbWlzZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLl9vblRyaWdnZXJJbnRlcm5hbFNvdW5kKHRyaWdnZXJIZWxwZXIpO1xyXG4gICAgICAgIHRoaXMuX29uVHJpZ2dlckludGVybmFsU291bmRWb2x1bWUodHJpZ2dlckhlbHBlcik7XHJcbiAgICAgICAgdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxSZXNwb25zZSh0cmlnZ2VySGVscGVyKTtcclxuICAgICAgICB0aGlzLl9vblRyaWdnZXJJbnRlcm5hbEFsYXJtVGV4dCh0cmlnZ2VySGVscGVyKTtcclxuICAgICAgICB0aGlzLl9vblRyaWdnZXJJbnRlcm5hbEFsZXJ0VGV4dCh0cmlnZ2VySGVscGVyKTtcclxuICAgICAgICB0aGlzLl9vblRyaWdnZXJJbnRlcm5hbEluZm9UZXh0KHRyaWdnZXJIZWxwZXIpO1xyXG5cclxuICAgICAgICAvLyBQcmlvcml0eSBhdWRpbyBvcmRlcjpcclxuICAgICAgICAvLyAqIHVzZXIgZGlzYWJsZWQgKHBsYXkgbm90aGluZylcclxuICAgICAgICAvLyAqIGlmIHR0cyBvcHRpb25zIGFyZSBlbmFibGVkIGdsb2JhbGx5IG9yIGZvciB0aGlzIHRyaWdnZXI6XHJcbiAgICAgICAgLy8gICAqIHVzZXIgVFRTIHRyaWdnZXJzIHR0cyBvdmVycmlkZVxyXG4gICAgICAgIC8vICAgKiB0dHMgZW50cmllcyBpbiB0aGUgdHJpZ2dlclxyXG4gICAgICAgIC8vICAgKiBkZWZhdWx0IGFsYXJtIHR0c1xyXG4gICAgICAgIC8vICAgKiBkZWZhdWx0IGFsZXJ0IHR0c1xyXG4gICAgICAgIC8vICAgKiBkZWZhdWx0IGluZm8gdHRzXHJcbiAgICAgICAgLy8gKiBpZiBzb3VuZCBvcHRpb25zIGFyZSBlbmFibGVkIGdsb2JhbGx5IG9yIGZvciB0aGlzIHRyaWdnZXI6XHJcbiAgICAgICAgLy8gICAqIHVzZXIgdHJpZ2dlciBzb3VuZCBvdmVycmlkZXNcclxuICAgICAgICAvLyAgICogc291bmQgZW50cmllcyBpbiB0aGUgdHJpZ2dlclxyXG4gICAgICAgIC8vICAgKiBhbGFybSBub2lzZVxyXG4gICAgICAgIC8vICAgKiBhbGVydCBub2lzZVxyXG4gICAgICAgIC8vICAgKiBpbmZvIG5vaXNlXHJcbiAgICAgICAgLy8gKiBlbHNlLCBub3RoaW5nXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBJbiBnZW5lcmFsLCB0dHMgY29tZXMgYmVmb3JlIHNvdW5kcyBhbmQgdXNlciBvdmVycmlkZXMgY29tZVxyXG4gICAgICAgIC8vIGJlZm9yZSBkZWZhdWx0cy4gIElmIGEgdXNlciB0cmlnZ2VyIG9yIHR0cyBlbnRyeSBpcyBzcGVjaWZpZWQgYXNcclxuICAgICAgICAvLyBiZWluZyB2YWxpZCBidXQgZW1wdHksIHRoaXMgd2lsbCB0YWtlIHByaW9yaXR5IG92ZXIgdGhlIGRlZmF1bHRcclxuICAgICAgICAvLyB0dHMgdGV4dHMgZnJvbSBhbGFybS9hbGVydC9pbmZvIGFuZCB3aWxsIHByZXZlbnQgdHRzIGZyb20gcGxheWluZ1xyXG4gICAgICAgIC8vIGFuZCBhbGxvd2luZyBzb3VuZHMgdG8gYmUgcGxheWVkIGluc3RlYWQuXHJcbiAgICAgICAgdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxUVFModHJpZ2dlckhlbHBlcik7XHJcbiAgICAgICAgdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxQbGF5QXVkaW8odHJpZ2dlckhlbHBlcik7XHJcbiAgICAgICAgdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxSdW4odHJpZ2dlckhlbHBlcik7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyBUaGUgdHJpZ2dlciBib2R5IG11c3QgcnVuIHN5bmNocm9ub3VzbHkgd2hlbiB0aGVyZSBpcyBubyBwcm9taXNlLlxyXG4gICAgICBpZiAocHJvbWlzZSlcclxuICAgICAgICBwcm9taXNlLnRoZW4odHJpZ2dlclBvc3RQcm9taXNlLCAoZSkgPT4gb25UcmlnZ2VyRXhjZXB0aW9uKHRyaWdnZXIsIGUpKTtcclxuICAgICAgZWxzZVxyXG4gICAgICAgIHRyaWdnZXJQb3N0UHJvbWlzZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBUaGUgdHJpZ2dlciBib2R5IG11c3QgcnVuIHN5bmNocm9ub3VzbHkgd2hlbiB0aGVyZSBpcyBubyBkZWxheS5cclxuICAgIGlmIChkZWxheVByb21pc2UpXHJcbiAgICAgIGRlbGF5UHJvbWlzZS50aGVuKHRyaWdnZXJQb3N0RGVsYXksIChlKSA9PiBvblRyaWdnZXJFeGNlcHRpb24odHJpZ2dlciwgZSkpO1xyXG4gICAgZWxzZVxyXG4gICAgICB0cmlnZ2VyUG9zdERlbGF5KCk7XHJcbiAgfVxyXG5cclxuICAvLyBCdWlsZCBhIGRlZmF1bHQgdHJpZ2dlckhlbHBlciBvYmplY3QgZm9yIHRoaXMgdHJpZ2dlclxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbEdldEhlbHBlcihcclxuICAgICAgdHJpZ2dlcjogUHJvY2Vzc2VkVHJpZ2dlcixcclxuICAgICAgbWF0Y2hlczogTWF0Y2hlc0FueSxcclxuICAgICAgbm93OiBudW1iZXIpOiBUcmlnZ2VySGVscGVyIHtcclxuICAgIGNvbnN0IGlkID0gdHJpZ2dlci5pZDtcclxuICAgIGxldCBvcHRpb25zOiBQZXJUcmlnZ2VyT3B0aW9uID0ge307XHJcbiAgICBsZXQgY29uZmlnOiBUcmlnZ2VyQXV0b0NvbmZpZyA9IHt9O1xyXG4gICAgbGV0IHN1cHByZXNzZWQgPSBmYWxzZTtcclxuICAgIGlmIChpZCkge1xyXG4gICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLlBlclRyaWdnZXJPcHRpb25zW2lkXSA/PyBvcHRpb25zO1xyXG4gICAgICBjb25maWcgPSB0aGlzLm9wdGlvbnMuUGVyVHJpZ2dlckF1dG9Db25maWdbaWRdID8/IGNvbmZpZztcclxuICAgICAgc3VwcHJlc3NlZCA9IHRoaXMub3B0aW9ucy5EaXNhYmxlZFRyaWdnZXJzW2lkXSA/PyBzdXBwcmVzc2VkO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIgPSB7XHJcbiAgICAgIHRyaWdnZXI6IHRyaWdnZXIsXHJcbiAgICAgIG5vdzogbm93LFxyXG4gICAgICB0cmlnZ2VyT3B0aW9uczogb3B0aW9ucyxcclxuICAgICAgdHJpZ2dlckF1dG9Db25maWc6IGNvbmZpZyxcclxuICAgICAgLy8gVGhpcyBzZXR0aW5nIG9ubHkgc3VwcHJlc3NlcyBvdXRwdXQsIHRyaWdnZXIgc3RpbGwgcnVucyBmb3IgZGF0YS9sb2dpYyBwdXJwb3Nlc1xyXG4gICAgICB1c2VyU3VwcHJlc3NlZE91dHB1dDogc3VwcHJlc3NlZCxcclxuICAgICAgbWF0Y2hlczogbWF0Y2hlcyxcclxuICAgICAgLy8gRGVmYXVsdCBvcHRpb25zXHJcbiAgICAgIHRleHRBbGVydHNFbmFibGVkOiB0aGlzLm9wdGlvbnMuVGV4dEFsZXJ0c0VuYWJsZWQsXHJcbiAgICAgIHNvdW5kQWxlcnRzRW5hYmxlZDogdGhpcy5vcHRpb25zLlNvdW5kQWxlcnRzRW5hYmxlZCxcclxuICAgICAgc3Bva2VuQWxlcnRzRW5hYmxlZDogdGhpcy5vcHRpb25zLlNwb2tlbkFsZXJ0c0VuYWJsZWQsXHJcbiAgICAgIGdyb3VwU3Bva2VuQWxlcnRzRW5hYmxlZDogdGhpcy5vcHRpb25zLkdyb3VwU3Bva2VuQWxlcnRzRW5hYmxlZCxcclxuICAgICAgdmFsdWVPckZ1bmN0aW9uOiAoZjogUmFpZGJvc3NUcmlnZ2VyRmllbGQpOiBSYWlkYm9zc1RyaWdnZXJPdXRwdXQgPT4ge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBmO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0KHRoaXMuZGF0YSwgdHJpZ2dlckhlbHBlci5tYXRjaGVzLCB0cmlnZ2VySGVscGVyLm91dHB1dCk7XHJcbiAgICAgICAgLy8gQWxsIHRyaWdnZXJzIHJldHVybiBlaXRoZXIgYSBzdHJpbmcgZGlyZWN0bHksIG9yIGFuIG9iamVjdFxyXG4gICAgICAgIC8vIHdob3NlIGtleXMgYXJlIGRpZmZlcmVudCBwYXJzZXIgbGFuZ3VhZ2UgYmFzZWQgbmFtZXMuICBGb3Igc2ltcGxpY2l0eSxcclxuICAgICAgICAvLyB0aGlzIGlzIHZhbGlkIHRvIGRvIGZvciBhbnkgdHJpZ2dlciBlbnRyeSB0aGF0IGNhbiBoYW5kbGUgYSBmdW5jdGlvbi5cclxuICAgICAgICAvLyBJbiBjYXNlIGFueWJvZHkgd2FudHMgdG8gZW5jYXBzdWxhdGUgYW55IGZhbmN5IGdyYW1tYXIsIHRoZSB2YWx1ZXNcclxuICAgICAgICAvLyBpbiB0aGlzIG9iamVjdCBjYW4gYWxzbyBiZSBmdW5jdGlvbnMuXHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnIHx8IHJlc3VsdCA9PT0gbnVsbClcclxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgcmV0dXJuIHRyaWdnZXJIZWxwZXIudmFsdWVPckZ1bmN0aW9uKHJlc3VsdFt0aGlzLmRpc3BsYXlMYW5nXSA/PyByZXN1bHRbJ2VuJ10pO1xyXG4gICAgICB9LFxyXG4gICAgICBnZXQgb3V0cHV0KCk6IE91dHB1dCB7XHJcbiAgICAgICAgaWYgKHRoaXMudHJpZ2dlci5vdXRwdXQpXHJcbiAgICAgICAgICByZXR1cm4gdGhpcy50cmlnZ2VyLm91dHB1dDtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coYE1pc3NpbmcgdHJpZ2dlci5vdXRwdXQgZm9yIHRyaWdnZXIgJHt0cmlnZ2VyLmlkID8/ICdVbmtub3duJ31gKTtcclxuICAgICAgICByZXR1cm4gZGVmYXVsdE91dHB1dDtcclxuICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxIZWxwZXJEZWZhdWx0cyh0cmlnZ2VySGVscGVyKTtcclxuXHJcbiAgICByZXR1cm4gdHJpZ2dlckhlbHBlcjtcclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbENoZWNrU3VwcHJlc3NlZCh0cmlnZ2VyOiBQcm9jZXNzZWRUcmlnZ2VyLCB3aGVuOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGlkID0gdHJpZ2dlci5pZDtcclxuICAgIGlmIChpZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGNvbnN0IHN1cHByZXNzID0gdGhpcy50cmlnZ2VyU3VwcHJlc3NbaWRdO1xyXG4gICAgICBpZiAoc3VwcHJlc3MgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmIChzdXBwcmVzcyA+IHdoZW4pXHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgZGVsZXRlIHRoaXMudHJpZ2dlclN1cHByZXNzW2lkXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgX29uVHJpZ2dlckludGVybmFsQ29uZGl0aW9uKHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGNvbmRpdGlvbiA9IHRyaWdnZXJIZWxwZXIudHJpZ2dlck9wdGlvbnMuQ29uZGl0aW9uID8/IHRyaWdnZXJIZWxwZXIudHJpZ2dlci5jb25kaXRpb247XHJcbiAgICBpZiAoY29uZGl0aW9uKSB7XHJcbiAgICAgIGlmIChjb25kaXRpb24gPT09IHRydWUpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIGlmICghY29uZGl0aW9uKHRoaXMuZGF0YSwgdHJpZ2dlckhlbHBlci5tYXRjaGVzLCB0cmlnZ2VySGVscGVyLm91dHB1dCkpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBTZXQgZGVmYXVsdHMgZm9yIHRyaWdnZXJIZWxwZXIgb2JqZWN0IChhbnl0aGluZyB0aGF0IHdvbid0IGNoYW5nZSBiYXNlZCBvblxyXG4gIC8vIG90aGVyIHRyaWdnZXIgZnVuY3Rpb25zIHJ1bm5pbmcpXHJcbiAgX29uVHJpZ2dlckludGVybmFsSGVscGVyRGVmYXVsdHModHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlcik6IHZvaWQge1xyXG4gICAgaWYgKHRyaWdnZXJIZWxwZXIudHJpZ2dlckF1dG9Db25maWcpIHtcclxuICAgICAgY29uc3QgdGV4dEFsZXJ0c0VuYWJsZWQgPSB0cmlnZ2VySGVscGVyLnRyaWdnZXJBdXRvQ29uZmlnLlRleHRBbGVydHNFbmFibGVkO1xyXG4gICAgICBpZiAodGV4dEFsZXJ0c0VuYWJsZWQgIT09IHVuZGVmaW5lZClcclxuICAgICAgICB0cmlnZ2VySGVscGVyLnRleHRBbGVydHNFbmFibGVkID0gdGV4dEFsZXJ0c0VuYWJsZWQ7XHJcbiAgICAgIGNvbnN0IHNvdW5kQWxlcnRzRW5hYmxlZCA9IHRyaWdnZXJIZWxwZXIudHJpZ2dlckF1dG9Db25maWcuU291bmRBbGVydHNFbmFibGVkO1xyXG4gICAgICBpZiAoc291bmRBbGVydHNFbmFibGVkICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgdHJpZ2dlckhlbHBlci5zb3VuZEFsZXJ0c0VuYWJsZWQgPSBzb3VuZEFsZXJ0c0VuYWJsZWQ7XHJcbiAgICAgIGNvbnN0IHNwb2tlbkFsZXJ0c0VuYWJsZWQgPSB0cmlnZ2VySGVscGVyLnRyaWdnZXJBdXRvQ29uZmlnLlNwb2tlbkFsZXJ0c0VuYWJsZWQ7XHJcbiAgICAgIGlmIChzcG9rZW5BbGVydHNFbmFibGVkICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgdHJpZ2dlckhlbHBlci5zcG9rZW5BbGVydHNFbmFibGVkID0gc3Bva2VuQWxlcnRzRW5hYmxlZDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHJpZ2dlckhlbHBlci50cmlnZ2VyT3B0aW9ucykge1xyXG4gICAgICBjb25zdCB0ZXh0QWxlcnRzRW5hYmxlZCA9IHRyaWdnZXJIZWxwZXIudHJpZ2dlck9wdGlvbnMuVGV4dEFsZXJ0O1xyXG4gICAgICBpZiAodGV4dEFsZXJ0c0VuYWJsZWQgIT09IHVuZGVmaW5lZClcclxuICAgICAgICB0cmlnZ2VySGVscGVyLnRleHRBbGVydHNFbmFibGVkID0gdGV4dEFsZXJ0c0VuYWJsZWQ7XHJcbiAgICAgIGNvbnN0IHNvdW5kQWxlcnRzRW5hYmxlZCA9IHRyaWdnZXJIZWxwZXIudHJpZ2dlck9wdGlvbnMuU291bmRBbGVydDtcclxuICAgICAgaWYgKHNvdW5kQWxlcnRzRW5hYmxlZCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRyaWdnZXJIZWxwZXIuc291bmRBbGVydHNFbmFibGVkID0gc291bmRBbGVydHNFbmFibGVkO1xyXG4gICAgICBjb25zdCBzcG9rZW5BbGVydHNFbmFibGVkID0gdHJpZ2dlckhlbHBlci50cmlnZ2VyT3B0aW9ucy5TcGVlY2hBbGVydDtcclxuICAgICAgaWYgKHNwb2tlbkFsZXJ0c0VuYWJsZWQgIT09IHVuZGVmaW5lZClcclxuICAgICAgICB0cmlnZ2VySGVscGVyLnNwb2tlbkFsZXJ0c0VuYWJsZWQgPSBzcG9rZW5BbGVydHNFbmFibGVkO1xyXG4gICAgICBjb25zdCBncm91cFNwb2tlbkFsZXJ0c0VuYWJsZWQgPSB0cmlnZ2VySGVscGVyLnRyaWdnZXJPcHRpb25zLkdyb3VwU3BlZWNoQWxlcnQ7XHJcbiAgICAgIGlmIChncm91cFNwb2tlbkFsZXJ0c0VuYWJsZWQgIT09IHVuZGVmaW5lZClcclxuICAgICAgICB0cmlnZ2VySGVscGVyLmdyb3VwU3Bva2VuQWxlcnRzRW5hYmxlZCA9IGdyb3VwU3Bva2VuQWxlcnRzRW5hYmxlZDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHJpZ2dlckhlbHBlci51c2VyU3VwcHJlc3NlZE91dHB1dCkge1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnRleHRBbGVydHNFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgIHRyaWdnZXJIZWxwZXIuc291bmRBbGVydHNFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgIHRyaWdnZXJIZWxwZXIuc3Bva2VuQWxlcnRzRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICB0cmlnZ2VySGVscGVyLmdyb3VwU3Bva2VuQWxlcnRzRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuQXVkaW9BbGxvd2VkKSB7XHJcbiAgICAgIHRyaWdnZXJIZWxwZXIuc291bmRBbGVydHNFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgIHRyaWdnZXJIZWxwZXIuc3Bva2VuQWxlcnRzRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICB0cmlnZ2VySGVscGVyLmdyb3VwU3Bva2VuQWxlcnRzRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX29uVHJpZ2dlckludGVybmFsUHJlUnVuKHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiB2b2lkIHtcclxuICAgIHRyaWdnZXJIZWxwZXIudHJpZ2dlcj8ucHJlUnVuPy4oXHJcbiAgICAgICAgdGhpcy5kYXRhLFxyXG4gICAgICAgIHRyaWdnZXJIZWxwZXIubWF0Y2hlcyxcclxuICAgICAgICB0cmlnZ2VySGVscGVyLm91dHB1dCk7XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxEZWxheVNlY29uZHModHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlcik6IFByb21pc2U8dm9pZD4gfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3QgZGVsYXkgPSAnZGVsYXlTZWNvbmRzJyBpbiB0cmlnZ2VySGVscGVyLnRyaWdnZXIgPyB0cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbih0cmlnZ2VySGVscGVyLnRyaWdnZXIuZGVsYXlTZWNvbmRzKSA6IDA7XHJcbiAgICBpZiAoIWRlbGF5IHx8IGRlbGF5IDw9IDAgfHwgdHlwZW9mIGRlbGF5ICE9PSAnbnVtYmVyJylcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHRyaWdnZXJJRCA9IHRoaXMuY3VycmVudFRyaWdnZXJJRCsrO1xyXG4gICAgdGhpcy50aW1lcnNbdHJpZ2dlcklEXSA9IHRydWU7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XHJcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy50aW1lcnNbdHJpZ2dlcklEXSlcclxuICAgICAgICAgIHJlcygpO1xyXG4gICAgICAgIGVsc2UgaWYgKHJlailcclxuICAgICAgICAgIHJlaigpO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnRpbWVyc1t0cmlnZ2VySURdO1xyXG4gICAgICB9LCBkZWxheSAqIDEwMDApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxEdXJhdGlvblNlY29uZHModHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlcik6IHZvaWQge1xyXG4gICAgbGV0IHZhbHVlRHVyYXRpb24gPSB0cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbih0cmlnZ2VySGVscGVyLnRyaWdnZXIuZHVyYXRpb25TZWNvbmRzKTtcclxuICAgIGlmICh0eXBlb2YgdmFsdWVEdXJhdGlvbiAhPT0gJ251bWJlcicpXHJcbiAgICAgIHZhbHVlRHVyYXRpb24gPSB1bmRlZmluZWQ7XHJcbiAgICB0cmlnZ2VySGVscGVyLmR1cmF0aW9uID0ge1xyXG4gICAgICBmcm9tQ29uZmlnOiB0cmlnZ2VySGVscGVyLnRyaWdnZXJBdXRvQ29uZmlnLkR1cmF0aW9uLFxyXG4gICAgICBmcm9tVHJpZ2dlcjogdmFsdWVEdXJhdGlvbixcclxuICAgICAgYWxhcm1UZXh0OiB0aGlzLm9wdGlvbnMuRGlzcGxheUFsYXJtVGV4dEZvclNlY29uZHMsXHJcbiAgICAgIGFsZXJ0VGV4dDogdGhpcy5vcHRpb25zLkRpc3BsYXlBbGVydFRleHRGb3JTZWNvbmRzLFxyXG4gICAgICBpbmZvVGV4dDogdGhpcy5vcHRpb25zLkRpc3BsYXlJbmZvVGV4dEZvclNlY29uZHMsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgX29uVHJpZ2dlckludGVybmFsU3VwcHJlc3NTZWNvbmRzKHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHN1cHByZXNzID0gJ3N1cHByZXNzU2Vjb25kcycgaW4gdHJpZ2dlckhlbHBlci50cmlnZ2VyID8gdHJpZ2dlckhlbHBlci52YWx1ZU9yRnVuY3Rpb24odHJpZ2dlckhlbHBlci50cmlnZ2VyLnN1cHByZXNzU2Vjb25kcykgOiAwO1xyXG4gICAgaWYgKHR5cGVvZiBzdXBwcmVzcyAhPT0gJ251bWJlcicpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGlmICh0cmlnZ2VySGVscGVyLnRyaWdnZXIuaWQgJiYgc3VwcHJlc3MgPiAwKVxyXG4gICAgICB0aGlzLnRyaWdnZXJTdXBwcmVzc1t0cmlnZ2VySGVscGVyLnRyaWdnZXIuaWRdID0gdHJpZ2dlckhlbHBlci5ub3cgKyAoc3VwcHJlc3MgKiAxMDAwKTtcclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbFByb21pc2UodHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlcik6IFByb21pc2U8dm9pZD4gfCB1bmRlZmluZWQge1xyXG4gICAgbGV0IHByb21pc2U6IFByb21pc2U8dm9pZD4gfCB1bmRlZmluZWQ7XHJcbiAgICBpZiAoJ3Byb21pc2UnIGluIHRyaWdnZXJIZWxwZXIudHJpZ2dlcikge1xyXG4gICAgICBjb25zdCBpZCA9IHRyaWdnZXJIZWxwZXIudHJpZ2dlci5pZCA/PyAnVW5rbm93bic7XHJcbiAgICAgIGlmICh0eXBlb2YgdHJpZ2dlckhlbHBlci50cmlnZ2VyLnByb21pc2UgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBwcm9taXNlID0gdHJpZ2dlckhlbHBlci50cmlnZ2VyLnByb21pc2UoXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcclxuICAgICAgICAgICAgdHJpZ2dlckhlbHBlci5tYXRjaGVzLFxyXG4gICAgICAgICAgICB0cmlnZ2VySGVscGVyLm91dHB1dCk7XHJcblxyXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBhY3R1YWxseSBnZXQgYSBQcm9taXNlIGJhY2sgZnJvbSB0aGUgZnVuY3Rpb25cclxuICAgICAgICBpZiAoUHJvbWlzZS5yZXNvbHZlKHByb21pc2UpICE9PSBwcm9taXNlKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBUcmlnZ2VyICR7aWR9OiBwcm9taXNlIGZ1bmN0aW9uIGRpZCBub3QgcmV0dXJuIGEgcHJvbWlzZWApO1xyXG4gICAgICAgICAgcHJvbWlzZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgVHJpZ2dlciAke2lkfTogcHJvbWlzZSBkZWZpbmVkIGJ1dCBub3QgYSBmdW5jdGlvbmApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJvbWlzZTtcclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbFNvdW5kKHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHRyaWdnZXJIZWxwZXIudmFsdWVPckZ1bmN0aW9uKHRyaWdnZXJIZWxwZXIudHJpZ2dlci5zb3VuZCk7XHJcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpXHJcbiAgICAgIHRyaWdnZXJIZWxwZXIuc291bmRVcmwgPSByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxTb3VuZFZvbHVtZSh0cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyKTogdm9pZCB7XHJcbiAgICBjb25zdCByZXN1bHQgPSB0cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbih0cmlnZ2VySGVscGVyLnRyaWdnZXIuc291bmRWb2x1bWUpO1xyXG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdudW1iZXInKVxyXG4gICAgICB0cmlnZ2VySGVscGVyLnRyaWdnZXJTb3VuZFZvbCA9IHJlc3VsdDtcclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbFJlc3BvbnNlKHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiB2b2lkIHtcclxuICAgIGxldCByZXNwb25zZTogUmVzcG9uc2VGaWVsZDxSYWlkYm9zc0RhdGE+ID0ge307XHJcbiAgICBjb25zdCB0cmlnZ2VyID0gdHJpZ2dlckhlbHBlci50cmlnZ2VyO1xyXG4gICAgaWYgKHRyaWdnZXIucmVzcG9uc2UpIHtcclxuICAgICAgLy8gQ2FuJ3QgdXNlIFZhbHVlT3JGdW5jdGlvbiBoZXJlIGFzIHIgcmV0dXJucyBhIG5vbi1sb2NhbGl6YWJsZSBvYmplY3QuXHJcbiAgICAgIHJlc3BvbnNlID0gdHJpZ2dlci5yZXNwb25zZTtcclxuICAgICAgd2hpbGUgKHR5cGVvZiByZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICByZXNwb25zZSA9IHJlc3BvbnNlKHRoaXMuZGF0YSwgdHJpZ2dlckhlbHBlci5tYXRjaGVzLCB0cmlnZ2VySGVscGVyLm91dHB1dCk7XHJcblxyXG4gICAgICAvLyBUdXJuIGZhbHN5IHZhbHVlcyBpbnRvIGEgZGVmYXVsdCBuby1vcCByZXNwb25zZS5cclxuICAgICAgaWYgKCFyZXNwb25zZSlcclxuICAgICAgICByZXNwb25zZSA9IHt9O1xyXG4gICAgfVxyXG4gICAgdHJpZ2dlckhlbHBlci5yZXNwb25zZSA9IHJlc3BvbnNlO1xyXG4gIH1cclxuXHJcbiAgX29uVHJpZ2dlckludGVybmFsQWxhcm1UZXh0KHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX2FkZFRleHRGb3IoJ2FsYXJtJywgdHJpZ2dlckhlbHBlcik7XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxBbGVydFRleHQodHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fYWRkVGV4dEZvcignYWxlcnQnLCB0cmlnZ2VySGVscGVyKTtcclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbEluZm9UZXh0KHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX2FkZFRleHRGb3IoJ2luZm8nLCB0cmlnZ2VySGVscGVyKTtcclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbFRUUyh0cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyKTogdm9pZCB7XHJcbiAgICBpZiAoIXRyaWdnZXJIZWxwZXIuZ3JvdXBTcG9rZW5BbGVydHNFbmFibGVkIHx8IHR5cGVvZiB0cmlnZ2VySGVscGVyLnR0c1RleHQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGxldCByZXN1bHQgPSB1bmRlZmluZWQ7XHJcbiAgICAgIGlmICh0cmlnZ2VySGVscGVyLnRyaWdnZXJPcHRpb25zLlRUU1RleHQpIHtcclxuICAgICAgICByZXN1bHQgPSB0cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbih0cmlnZ2VySGVscGVyLnRyaWdnZXJPcHRpb25zLlRUU1RleHQpO1xyXG4gICAgICB9IGVsc2UgaWYgKHRyaWdnZXJIZWxwZXIudHJpZ2dlci50dHMpIHtcclxuICAgICAgICByZXN1bHQgPSB0cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbih0cmlnZ2VySGVscGVyLnRyaWdnZXIudHRzKTtcclxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VySGVscGVyLnJlc3BvbnNlKSB7XHJcbiAgICAgICAgY29uc3QgcmVzcDogUmVzcG9uc2VGaWVsZDxSYWlkYm9zc0RhdGE+ID0gdHJpZ2dlckhlbHBlci5yZXNwb25zZTtcclxuICAgICAgICBpZiAocmVzcC50dHMpXHJcbiAgICAgICAgICByZXN1bHQgPSB0cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbihyZXNwLnR0cyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEFsbG93IGZhbHNlIG9yIG51bGwgdG8gZGlzYWJsZSB0dHMgZW50aXJlbHlcclxuICAgICAgLy8gVW5kZWZpbmVkIHdpbGwgZmFsbCBiYWNrIHRvIGRlZmF1bHRUVFNUZXh0XHJcbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmIChyZXN1bHQpXHJcbiAgICAgICAgICB0cmlnZ2VySGVscGVyLnR0c1RleHQgPSByZXN1bHQ/LnRvU3RyaW5nKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdHJpZ2dlckhlbHBlci50dHNUZXh0ID0gdHJpZ2dlckhlbHBlci5kZWZhdWx0VFRTVGV4dDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX29uVHJpZ2dlckludGVybmFsUGxheUF1ZGlvKHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiB2b2lkIHtcclxuICAgIGlmICh0cmlnZ2VySGVscGVyLnRyaWdnZXIuc291bmQgJiZcclxuICAgICAgICB0cmlnZ2VySGVscGVyLnNvdW5kVXJsICYmXHJcbiAgICAgICAgc291bmRTdHJzLmluY2x1ZGVzKHRyaWdnZXJIZWxwZXIuc291bmRVcmwpKSB7XHJcbiAgICAgIGNvbnN0IG5hbWVkU291bmQgPSB0cmlnZ2VySGVscGVyLnNvdW5kVXJsICsgJ1NvdW5kJztcclxuICAgICAgY29uc3QgbmFtZWRTb3VuZFZvbHVtZSA9IHRyaWdnZXJIZWxwZXIuc291bmRVcmwgKyAnU291bmRWb2x1bWUnO1xyXG4gICAgICBjb25zdCBzb3VuZCA9IHRoaXMub3B0aW9uc1tuYW1lZFNvdW5kXTtcclxuICAgICAgaWYgKHR5cGVvZiBzb3VuZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICB0cmlnZ2VySGVscGVyLnNvdW5kVXJsID0gc291bmQ7XHJcbiAgICAgICAgY29uc3Qgc291bmRWb2wgPSB0aGlzLm9wdGlvbnNbbmFtZWRTb3VuZFZvbHVtZV07XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VuZFZvbCA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICB0cmlnZ2VySGVscGVyLnNvdW5kVm9sID0gc291bmRWb2w7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0cmlnZ2VySGVscGVyLnNvdW5kVXJsID0gdHJpZ2dlckhlbHBlci50cmlnZ2VyT3B0aW9ucy5Tb3VuZE92ZXJyaWRlID8/IHRyaWdnZXJIZWxwZXIuc291bmRVcmw7XHJcbiAgICB0cmlnZ2VySGVscGVyLnNvdW5kVm9sID0gdHJpZ2dlckhlbHBlci50cmlnZ2VyT3B0aW9ucy5Wb2x1bWVPdmVycmlkZSA/P1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnRyaWdnZXJTb3VuZFZvbCA/PyB0cmlnZ2VySGVscGVyLnNvdW5kVm9sO1xyXG5cclxuICAgIC8vIFRleHQgdG8gc3BlZWNoIG92ZXJyaWRlcyBhbGwgb3RoZXIgc291bmRzLiAgVGhpcyBpcyBzb1xyXG4gICAgLy8gdGhhdCBhIHVzZXIgd2hvIHByZWZlcnMgdHRzIGNhbiBzdGlsbCBnZXQgdGhlIGJlbmVmaXRcclxuICAgIC8vIG9mIGluZm9UZXh0IHRyaWdnZXJzIHdpdGhvdXQgdHRzIGVudHJpZXMgYnkgdHVybmluZ1xyXG4gICAgLy8gb24gKHNwZWVjaD10cnVlLCB0ZXh0PXRydWUsIHNvdW5kPXRydWUpIGJ1dCB0aGlzIHdpbGxcclxuICAgIC8vIG5vdCBjYXVzZSB0dHMgdG8gcGxheSBvdmVyIHRvcCBvZiBzb3VuZHMgb3Igbm9pc2VzLlxyXG4gICAgaWYgKHRyaWdnZXJIZWxwZXIudHRzVGV4dCAmJiB0cmlnZ2VySGVscGVyLnNwb2tlbkFsZXJ0c0VuYWJsZWQpIHtcclxuICAgICAgLy8gSGV1cmlzdGljcyBmb3IgYXV0byB0dHMuXHJcbiAgICAgIC8vICogSW4gY2FzZSB0aGlzIGlzIGFuIGludGVnZXIuXHJcbiAgICAgIHRyaWdnZXJIZWxwZXIudHRzVGV4dCA9IHRyaWdnZXJIZWxwZXIudHRzVGV4dC50b1N0cmluZygpO1xyXG4gICAgICAvLyAqIFJlbW92ZSBhIGJ1bmNoIG9mIGNoYXJzLlxyXG4gICAgICB0cmlnZ2VySGVscGVyLnR0c1RleHQgPSB0cmlnZ2VySGVscGVyLnR0c1RleHQucmVwbGFjZSgvWyMhXS9nLCAnJyk7XHJcbiAgICAgIC8vICogc2xhc2hlcyBiZXR3ZWVuIG1lY2hhbmljc1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnR0c1RleHQgPSB0cmlnZ2VySGVscGVyLnR0c1RleHQucmVwbGFjZSgnLycsICcgJyk7XHJcbiAgICAgIC8vICogdGlsZGVzIGF0IHRoZSBlbmQgZm9yIGVtcGhhc2lzXHJcbiAgICAgIHRyaWdnZXJIZWxwZXIudHRzVGV4dCA9IHRyaWdnZXJIZWxwZXIudHRzVGV4dC5yZXBsYWNlKC9+KyQvLCAnJyk7XHJcbiAgICAgIC8vICogYXJyb3dzIGhlbHBpbmcgdmlzdWFsbHkgc2ltcGxlIHRvIHVuZGVyc3RhbmQgZS5nLiDihpYgRnJvbnQgbGVmdCAvIEJhY2sgcmlnaHQg4oaYXHJcbiAgICAgIHRyaWdnZXJIZWxwZXIudHRzVGV4dCA9IHRyaWdnZXJIZWxwZXIudHRzVGV4dC5yZXBsYWNlKC9b4oaWLeKGmV0vZywgJycpO1xyXG4gICAgICAvLyAqIEtvcmVhbiBUVFMgcmVhZHMgd3Jvbmcgd2l0aCAnMeuyiOynuCdcclxuICAgICAgdHJpZ2dlckhlbHBlci50dHNUZXh0ID0gdHJpZ2dlckhlbHBlci50dHNUZXh0LnJlcGxhY2UoJzHrsojsp7gnLCAn7LKr67KI7Ke4Jyk7XHJcbiAgICAgIC8vICogYXJyb3dzIGF0IHRoZSBmcm9udCBvciB0aGUgZW5kIGFyZSBkaXJlY3Rpb25zLCBlLmcuIFwiZWFzdCA9PlwiXHJcbiAgICAgIHRyaWdnZXJIZWxwZXIudHRzVGV4dCA9IHRyaWdnZXJIZWxwZXIudHRzVGV4dC5yZXBsYWNlKC9bLT1dPlxccyokL2csICcnKTtcclxuICAgICAgdHJpZ2dlckhlbHBlci50dHNUZXh0ID0gdHJpZ2dlckhlbHBlci50dHNUZXh0LnJlcGxhY2UoL15cXHMqPFstPV0vZywgJycpO1xyXG4gICAgICAvLyAqIGFycm93cyBpbiB0aGUgbWlkZGxlIGFyZSBhIHNlcXVlbmNlLCBlLmcuIFwiaW4gPT4gb3V0ID0+IHNwcmVhZFwiXHJcbiAgICAgIGNvbnN0IGFycm93UmVwbGFjZW1lbnQgPSB7XHJcbiAgICAgICAgZW46ICcgdGhlbiAnLFxyXG4gICAgICAgIGRlOiAnIGRhbm4gJyxcclxuICAgICAgICBmcjogJyBwdWlzICcsXHJcbiAgICAgICAgamE6ICfjgoQnLFxyXG4gICAgICAgIGNuOiAn54S25ZCOJyxcclxuICAgICAgICBrbzogJyDqt7jrpqzqs6AgJyxcclxuICAgICAgfTtcclxuICAgICAgdHJpZ2dlckhlbHBlci50dHNUZXh0ID0gdHJpZ2dlckhlbHBlci50dHNUZXh0LnJlcGxhY2UoL1xccyooPFstPV18Wz0tXT4pXFxzKi9nLFxyXG4gICAgICAgICAgYXJyb3dSZXBsYWNlbWVudFt0aGlzLmRpc3BsYXlMYW5nXSk7XHJcbiAgICAgIHRoaXMudHRzU2F5KHRyaWdnZXJIZWxwZXIudHRzVGV4dCk7XHJcbiAgICB9IGVsc2UgaWYgKHRyaWdnZXJIZWxwZXIuc291bmRVcmwgJiYgdHJpZ2dlckhlbHBlci5zb3VuZEFsZXJ0c0VuYWJsZWQpIHtcclxuICAgICAgdGhpcy5fcGxheUF1ZGlvRmlsZSh0cmlnZ2VySGVscGVyLCB0cmlnZ2VySGVscGVyLnNvdW5kVXJsLCB0cmlnZ2VySGVscGVyLnNvdW5kVm9sKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbFJ1bih0cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyKTogdm9pZCB7XHJcbiAgICB0cmlnZ2VySGVscGVyLnRyaWdnZXI/LnJ1bj8uKFxyXG4gICAgICAgIHRoaXMuZGF0YSxcclxuICAgICAgICB0cmlnZ2VySGVscGVyLm1hdGNoZXMsXHJcbiAgICAgICAgdHJpZ2dlckhlbHBlci5vdXRwdXQpO1xyXG4gIH1cclxuXHJcbiAgX2NyZWF0ZVRleHRGb3IoXHJcbiAgICAgIHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIsXHJcbiAgICAgIHRleHQ6IHN0cmluZyxcclxuICAgICAgdGV4dFR5cGU6IFRleHQsXHJcbiAgICAgIGxvd2VyVGV4dEtleTogVGV4dFRleHQsXHJcbiAgICAgIGR1cmF0aW9uOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8vIGluZm8tdGV4dFxyXG4gICAgY29uc3QgdGV4dEVsZW1lbnRDbGFzcyA9IHRleHRUeXBlICsgJy10ZXh0JztcclxuICAgIGlmICh0ZXh0VHlwZSAhPT0gJ2luZm8nKVxyXG4gICAgICB0ZXh0ID0gdHJpZ2dlclVwcGVyQ2FzZSh0ZXh0KTtcclxuXHJcbiAgICBjb25zdCBob2xkZXIgPSB0aGlzW2xvd2VyVGV4dEtleV0/LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2hvbGRlcicpWzBdO1xyXG4gICAgY29uc3QgZGl2ID0gdGhpcy5fbWFrZVRleHRFbGVtZW50KHRyaWdnZXJIZWxwZXIsIHRleHQsIHRleHRFbGVtZW50Q2xhc3MpO1xyXG5cclxuICAgIGlmICghaG9sZGVyKVxyXG4gICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgaG9sZGVyLmFwcGVuZENoaWxkKGRpdik7XHJcbiAgICBpZiAoaG9sZGVyLmNoaWxkcmVuLmxlbmd0aCA+IHRoaXMua01heFJvd3NPZlRleHQpXHJcbiAgICAgIGhvbGRlci5maXJzdENoaWxkPy5yZW1vdmUoKTtcclxuXHJcbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGlmIChob2xkZXIuY29udGFpbnMoZGl2KSlcclxuICAgICAgICBob2xkZXIucmVtb3ZlQ2hpbGQoZGl2KTtcclxuICAgIH0sIGR1cmF0aW9uICogMTAwMCk7XHJcbiAgfVxyXG5cclxuICBfYWRkVGV4dEZvcih0ZXh0VHlwZTogVGV4dCwgdHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlcik6IHZvaWQge1xyXG4gICAgLy8gaW5mb1RleHRcclxuICAgIGNvbnN0IGxvd2VyVGV4dEtleSA9IHRleHRNYXBbdGV4dFR5cGVdLnRleHQ7XHJcbiAgICAvLyBJbmZvVGV4dFxyXG4gICAgY29uc3QgdXBwZXJUZXh0S2V5ID0gdGV4dE1hcFt0ZXh0VHlwZV0udXBwZXJUZXh0O1xyXG4gICAgLy8gSW5mb1NvdW5kXHJcbiAgICBjb25zdCB1cHBlclNvdW5kID0gdGV4dE1hcFt0ZXh0VHlwZV0udXBwZXJTb3VuZDtcclxuICAgIC8vIEluZm9Tb3VuZFZvbHVtZVxyXG4gICAgY29uc3QgdXBwZXJTb3VuZFZvbHVtZSA9IHRleHRNYXBbdGV4dFR5cGVdLnVwcGVyU291bmRWb2x1bWU7XHJcblxyXG4gICAgbGV0IHRleHRPYmo6IFJhaWRib3NzVHJpZ2dlck91dHB1dCA9XHJcbiAgICAgIHRyaWdnZXJIZWxwZXIudHJpZ2dlck9wdGlvbnNbdXBwZXJUZXh0S2V5XTtcclxuICAgIGlmICghdGV4dE9iaiAmJiB0cmlnZ2VySGVscGVyLnRyaWdnZXJbbG93ZXJUZXh0S2V5XSlcclxuICAgICAgdGV4dE9iaiA9IHRyaWdnZXJIZWxwZXIudHJpZ2dlcltsb3dlclRleHRLZXldO1xyXG4gICAgaWYgKCF0ZXh0T2JqICYmIHRyaWdnZXJIZWxwZXIucmVzcG9uc2UpXHJcbiAgICAgIHRleHRPYmogPSB0cmlnZ2VySGVscGVyLnJlc3BvbnNlW2xvd2VyVGV4dEtleV07XHJcbiAgICBpZiAodGV4dE9iaikge1xyXG4gICAgICBsZXQgdGV4dCA9IHRyaWdnZXJIZWxwZXIudmFsdWVPckZ1bmN0aW9uKHRleHRPYmopO1xyXG4gICAgICBpZiAoIXRleHQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICBpZiAodHlwZW9mIHRleHQgPT09ICdudW1iZXInKVxyXG4gICAgICAgIHRleHQgPSB0ZXh0LnRvU3RyaW5nKCk7XHJcbiAgICAgIGlmICh0eXBlb2YgdGV4dCAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgdGV4dCA9IFN0cmluZyh0ZXh0KTtcclxuICAgICAgdHJpZ2dlckhlbHBlci5kZWZhdWx0VFRTVGV4dCA9IHRyaWdnZXJIZWxwZXIuZGVmYXVsdFRUU1RleHQgPz8gdGV4dDtcclxuICAgICAgaWYgKHRleHQgJiYgdHlwZW9mIHRleHQgPT09ICdzdHJpbmcnICYmIHRyaWdnZXJIZWxwZXIudGV4dEFsZXJ0c0VuYWJsZWQpIHtcclxuICAgICAgICAvLyBwZXItdHJpZ2dlciBvcHRpb24gPiB0cmlnZ2VyIGZpZWxkID4gb3B0aW9uIGR1cmF0aW9uIGJ5IHRleHQgdHlwZVxyXG4gICAgICAgIGxldCBkdXJhdGlvbiA9IHRyaWdnZXJIZWxwZXIuZHVyYXRpb24/LmZyb21Db25maWcgPz8gdHJpZ2dlckhlbHBlci5kdXJhdGlvbj8uZnJvbVRyaWdnZXI7XHJcbiAgICAgICAgaWYgKGR1cmF0aW9uID09PSB1bmRlZmluZWQgJiYgdHJpZ2dlckhlbHBlci5kdXJhdGlvbilcclxuICAgICAgICAgIGR1cmF0aW9uID0gdHJpZ2dlckhlbHBlci5kdXJhdGlvbltsb3dlclRleHRLZXldO1xyXG4gICAgICAgIGlmIChkdXJhdGlvbiA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgZHVyYXRpb24gPSAwO1xyXG5cclxuICAgICAgICB0aGlzLl9jcmVhdGVUZXh0Rm9yKHRyaWdnZXJIZWxwZXIsIHRleHQsIHRleHRUeXBlLCBsb3dlclRleHRLZXksIGR1cmF0aW9uKTtcclxuICAgICAgICBpZiAoIXRyaWdnZXJIZWxwZXIuc291bmRVcmwpIHtcclxuICAgICAgICAgIHRyaWdnZXJIZWxwZXIuc291bmRVcmwgPSB0aGlzLm9wdGlvbnNbdXBwZXJTb3VuZF07XHJcbiAgICAgICAgICB0cmlnZ2VySGVscGVyLnNvdW5kVm9sID0gdGhpcy5vcHRpb25zW3VwcGVyU291bmRWb2x1bWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX21ha2VUZXh0RWxlbWVudChfdHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlciwgdGV4dDogc3RyaW5nLCBjbGFzc05hbWU6IHN0cmluZyk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcclxuICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdhbmltYXRlLXRleHQnKTtcclxuICAgIGRpdi5pbm5lclRleHQgPSB0ZXh0O1xyXG4gICAgcmV0dXJuIGRpdjtcclxuICB9XHJcblxyXG4gIF9wbGF5QXVkaW9GaWxlKHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIsIHVybDogc3RyaW5nLCB2b2x1bWU/OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IGF1ZGlvID0gbmV3IEF1ZGlvKHVybCk7XHJcbiAgICBhdWRpby52b2x1bWUgPSB2b2x1bWUgPz8gMTtcclxuICAgIHZvaWQgYXVkaW8ucGxheSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGF0YU9iamVjdCgpOiBSYWlkYm9zc0RhdGEge1xyXG4gICAgbGV0IHByZXNlcnZlSFAgPSAwO1xyXG4gICAgaWYgKHRoaXMuZGF0YSAmJiB0aGlzLmRhdGEuY3VycmVudEhQKVxyXG4gICAgICBwcmVzZXJ2ZUhQID0gdGhpcy5kYXRhLmN1cnJlbnRIUDtcclxuXHJcbiAgICAvLyBUT0RPOiBtYWtlIGEgYnJlYWtpbmcgY2hhbmdlIGF0IHNvbWUgcG9pbnQgYW5kXHJcbiAgICAvLyBtYWtlIGFsbCB0aGlzIHN0eWxlIGNvbnNpc3RlbnQsIHNvcnJ5LlxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbWU6IHRoaXMubWUsXHJcbiAgICAgIGpvYjogdGhpcy5qb2IsXHJcbiAgICAgIHJvbGU6IHRoaXMucm9sZSxcclxuICAgICAgcGFydHk6IHRoaXMucGFydHlUcmFja2VyLFxyXG4gICAgICBsYW5nOiB0aGlzLnBhcnNlckxhbmcsXHJcbiAgICAgIHBhcnNlckxhbmc6IHRoaXMucGFyc2VyTGFuZyxcclxuICAgICAgZGlzcGxheUxhbmc6IHRoaXMuZGlzcGxheUxhbmcsXHJcbiAgICAgIGN1cnJlbnRIUDogcHJlc2VydmVIUCxcclxuICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxyXG4gICAgICBTaG9ydE5hbWU6IHRoaXMuU2hvcnROYW1pZnkuYmluZCh0aGlzKSxcclxuICAgICAgU3RvcENvbWJhdDogKCkgPT4gdGhpcy5TZXRJbkNvbWJhdChmYWxzZSksXHJcbiAgICAgIFBhcnNlTG9jYWxlRmxvYXQ6IHBhcnNlRmxvYXQsXHJcbiAgICAgIENhblN0dW46ICgpID0+IFV0aWwuY2FuU3R1bih0aGlzLmpvYiksXHJcbiAgICAgIENhblNpbGVuY2U6ICgpID0+IFV0aWwuY2FuU2lsZW5jZSh0aGlzLmpvYiksXHJcbiAgICAgIENhblNsZWVwOiAoKSA9PiBVdGlsLmNhblNsZWVwKHRoaXMuam9iKSxcclxuICAgICAgQ2FuQ2xlYW5zZTogKCkgPT4gVXRpbC5jYW5DbGVhbnNlKHRoaXMuam9iKSxcclxuICAgICAgQ2FuRmVpbnQ6ICgpID0+IFV0aWwuY2FuRmVpbnQodGhpcy5qb2IpLFxyXG4gICAgICBDYW5BZGRsZTogKCkgPT4gVXRpbC5jYW5BZGRsZSh0aGlzLmpvYiksXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBvcHVwVGV4dEdlbmVyYXRvciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwb3B1cFRleHQ6IFBvcHVwVGV4dCkge1xyXG4gIH1cclxuXHJcbiAgSW5mbyh0ZXh0OiBzdHJpbmcsIGN1cnJlbnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMucG9wdXBUZXh0Lk9uVHJpZ2dlcih7XHJcbiAgICAgIGluZm9UZXh0OiB0ZXh0LFxyXG4gICAgICB0dHM6IHRleHQsXHJcbiAgICB9LFxyXG4gICAgbnVsbCxcclxuICAgIGN1cnJlbnRUaW1lKTtcclxuICB9XHJcblxyXG4gIEFsZXJ0KHRleHQ6IHN0cmluZywgY3VycmVudFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5wb3B1cFRleHQuT25UcmlnZ2VyKHtcclxuICAgICAgYWxlcnRUZXh0OiB0ZXh0LFxyXG4gICAgICB0dHM6IHRleHQsXHJcbiAgICB9LFxyXG4gICAgbnVsbCxcclxuICAgIGN1cnJlbnRUaW1lKTtcclxuICB9XHJcblxyXG4gIEFsYXJtKHRleHQ6IHN0cmluZywgY3VycmVudFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5wb3B1cFRleHQuT25UcmlnZ2VyKHtcclxuICAgICAgYWxhcm1UZXh0OiB0ZXh0LFxyXG4gICAgICB0dHM6IHRleHQsXHJcbiAgICB9LFxyXG4gICAgbnVsbCxcclxuICAgIGN1cnJlbnRUaW1lKTtcclxuICB9XHJcblxyXG4gIFRUUyh0ZXh0OiBzdHJpbmcsIGN1cnJlbnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMucG9wdXBUZXh0Lk9uVHJpZ2dlcih7XHJcbiAgICAgIGluZm9UZXh0OiB0ZXh0LFxyXG4gICAgICB0dHM6IHRleHQsXHJcbiAgICB9LFxyXG4gICAgbnVsbCxcclxuICAgIGN1cnJlbnRUaW1lKTtcclxuICB9XHJcblxyXG4gIFRyaWdnZXIodHJpZ2dlcjogUHJvY2Vzc2VkVHJpZ2dlciwgbWF0Y2hlczogUmVnRXhwRXhlY0FycmF5IHwgbnVsbCwgY3VycmVudFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5wb3B1cFRleHQuT25UcmlnZ2VyKHRyaWdnZXIsIG1hdGNoZXMsIGN1cnJlbnRUaW1lKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi9Ub29sdGlwJztcclxuaW1wb3J0IEVtdWxhdG9yQ29tbW9uIGZyb20gJy4uL0VtdWxhdG9yQ29tbW9uJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2dyZXNzQmFyIHtcclxuICBjb25zdHJ1Y3RvcihlbXVsYXRvcikge1xyXG4gICAgdGhpcy4kcHJvZ3Jlc3NCYXJUb29sdGlwID0gbmV3IFRvb2x0aXAoJy5lbmNvdW50ZXJQcm9ncmVzc0JhcicsICdib3R0b20nLCAnJywgZmFsc2UpO1xyXG4gICAgdGhpcy4kcHJvZ3Jlc3NCYXJDdXJyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmN1cnJlbnQtdGltZXN0YW1wJyk7XHJcbiAgICB0aGlzLiRwcm9ncmVzc0JhckR1cmF0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmR1cmF0aW9uLXRpbWVzdGFtcCcpO1xyXG4gICAgdGhpcy4kcHJvZ3Jlc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZW5jb3VudGVyUHJvZ3Jlc3NCYXInKTtcclxuICAgIHRoaXMuJHByb2dyZXNzQmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVuY291bnRlclByb2dyZXNzQmFyIC5wcm9ncmVzcy1iYXInKTtcclxuICAgIHRoaXMuJGVuZ2FnZUluZGljYXRvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmVzc0JhclJvdyAuZW5nYWdlSW5kaWNhdG9yJyk7XHJcbiAgICBuZXcgVG9vbHRpcCh0aGlzLiRlbmdhZ2VJbmRpY2F0b3IsICdib3R0b20nLCAnRmlnaHQgQmVnaW5zJyk7XHJcbiAgICB0aGlzLmVtdWxhdG9yID0gZW11bGF0b3I7XHJcbiAgICB0aGlzLiRwcm9ncmVzcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZSkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5lbXVsYXRvci5jdXJyZW50RW5jb3VudGVyKSB7XHJcbiAgICAgICAgY29uc3QgcGVyY2VudCA9IGUub2Zmc2V0WCAvIGUuY3VycmVudFRhcmdldC5vZmZzZXRXaWR0aDtcclxuICAgICAgICBjb25zdCB0aW1lID0gTWF0aC5mbG9vcih0aGlzLmVtdWxhdG9yLmN1cnJlbnRFbmNvdW50ZXIuZW5jb3VudGVyLmR1cmF0aW9uICogcGVyY2VudCkgLVxyXG4gICAgICAgICAgdGhpcy5lbXVsYXRvci5jdXJyZW50RW5jb3VudGVyLmVuY291bnRlci5pbml0aWFsT2Zmc2V0O1xyXG4gICAgICAgIHRoaXMuJHByb2dyZXNzQmFyVG9vbHRpcC5vZmZzZXQueCA9IGUub2Zmc2V0WCAtIChlLmN1cnJlbnRUYXJnZXQub2Zmc2V0V2lkdGggLyAyKTtcclxuICAgICAgICB0aGlzLiRwcm9ncmVzc0JhclRvb2x0aXAuc2V0VGV4dChFbXVsYXRvckNvbW1vbi50aW1lVG9TdHJpbmcodGltZSkpO1xyXG4gICAgICAgIHRoaXMuJHByb2dyZXNzQmFyVG9vbHRpcC5zaG93KCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdGhpcy4kcHJvZ3Jlc3MuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5lbXVsYXRvci5jdXJyZW50RW5jb3VudGVyKSB7XHJcbiAgICAgICAgY29uc3QgcGVyY2VudCA9IGUub2Zmc2V0WCAvIGUuY3VycmVudFRhcmdldC5vZmZzZXRXaWR0aDtcclxuICAgICAgICBjb25zdCB0aW1lID0gTWF0aC5mbG9vcih0aGlzLmVtdWxhdG9yLmN1cnJlbnRFbmNvdW50ZXIuZW5jb3VudGVyLmR1cmF0aW9uICogcGVyY2VudCk7XHJcbiAgICAgICAgdGhpcy5lbXVsYXRvci5zZWVrKHRpbWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGVtdWxhdG9yLm9uKCdjdXJyZW50RW5jb3VudGVyQ2hhbmdlZCcsIChlbmNvdW50ZXIpID0+IHtcclxuICAgICAgdGhpcy4kcHJvZ3Jlc3NCYXJDdXJyZW50LnRleHRDb250ZW50ID0gRW11bGF0b3JDb21tb24udGltZVRvU3RyaW5nKDAsIGZhbHNlKTtcclxuICAgICAgdGhpcy4kcHJvZ3Jlc3NCYXJEdXJhdGlvbi50ZXh0Q29udGVudCA9IEVtdWxhdG9yQ29tbW9uLnRpbWVUb1N0cmluZyhcclxuICAgICAgICAgIGVuY291bnRlci5lbmNvdW50ZXIuZHVyYXRpb24gLSBlbmNvdW50ZXIuZW5jb3VudGVyLmluaXRpYWxPZmZzZXQsXHJcbiAgICAgICAgICBmYWxzZSk7XHJcbiAgICAgIHRoaXMuJHByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gJzAlJztcclxuICAgICAgdGhpcy4kcHJvZ3Jlc3NCYXIuc2V0QXR0cmlidXRlKCdhcmlhVmFsdWVNYXgnLCBlbmNvdW50ZXIuZW5jb3VudGVyLmR1cmF0aW9uKTtcclxuICAgICAgaWYgKGlzTmFOKGVuY291bnRlci5lbmNvdW50ZXIuaW5pdGlhbE9mZnNldCkpIHtcclxuICAgICAgICB0aGlzLiRlbmdhZ2VJbmRpY2F0b3IuY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgaW5pdGlhbFBlcmNlbnQgPVxyXG4gICAgICAgICAgKGVuY291bnRlci5lbmNvdW50ZXIuaW5pdGlhbE9mZnNldCAvIGVtdWxhdG9yLmN1cnJlbnRFbmNvdW50ZXIuZW5jb3VudGVyLmR1cmF0aW9uKSAqIDEwMDtcclxuICAgICAgICB0aGlzLiRlbmdhZ2VJbmRpY2F0b3IuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcbiAgICAgICAgdGhpcy4kZW5nYWdlSW5kaWNhdG9yLnN0eWxlLmxlZnQgPSBpbml0aWFsUGVyY2VudCArICclJztcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBlbXVsYXRvci5vbigndGljaycsIChjdXJyZW50TG9nVGltZSkgPT4ge1xyXG4gICAgICBjb25zdCBjdXJyZW50T2Zmc2V0ID0gY3VycmVudExvZ1RpbWUgLSBlbXVsYXRvci5jdXJyZW50RW5jb3VudGVyLmVuY291bnRlci5zdGFydFRpbWVzdGFtcDtcclxuICAgICAgY29uc3QgcHJvZ1BlcmNlbnQgPSAoY3VycmVudE9mZnNldCAvIGVtdWxhdG9yLmN1cnJlbnRFbmNvdW50ZXIuZW5jb3VudGVyLmR1cmF0aW9uKSAqIDEwMDtcclxuICAgICAgY29uc3QgcHJvZ1ZhbHVlID0gY3VycmVudExvZ1RpbWUgLSBlbXVsYXRvci5jdXJyZW50RW5jb3VudGVyLmVuY291bnRlci5pbml0aWFsVGltZXN0YW1wO1xyXG4gICAgICB0aGlzLiRwcm9ncmVzc0JhckN1cnJlbnQudGV4dENvbnRlbnQgPSBFbXVsYXRvckNvbW1vbi50aW1lVG9TdHJpbmcocHJvZ1ZhbHVlLCBmYWxzZSk7XHJcbiAgICAgIHRoaXMuJHByb2dyZXNzQmFyLnNldEF0dHJpYnV0ZSgnYXJpYVZhbHVlTm93JywgcHJvZ1ZhbHVlKTtcclxuICAgICAgdGhpcy4kcHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSBwcm9nUGVyY2VudCArICclJztcclxuICAgIH0pO1xyXG4gICAgY29uc3QgJHBsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZ3Jlc3NCYXJSb3cgYnV0dG9uLnBsYXknKTtcclxuICAgIGNvbnN0ICRwYXVzZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmVzc0JhclJvdyBidXR0b24ucGF1c2UnKTtcclxuICAgICRwbGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5lbXVsYXRvci5wbGF5KCkpIHtcclxuICAgICAgICAkcGxheS5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuICAgICAgICAkcGF1c2UuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgJHBhdXNlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5lbXVsYXRvci5wYXVzZSgpKSB7XHJcbiAgICAgICAgJHBhdXNlLmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xyXG4gICAgICAgICRwbGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiLy8gVE9ETzogbWF5YmUgdGhpcyBzaG91bGQgYmUgc3RydWN0dXJlZCBpZGVudGljYWxseSB0byBhIHRpbWVsaW5lUmVwbGFjZSBzZWN0aW9uLlxyXG5cclxuaW1wb3J0IHsgTGFuZywgTm9uRW5MYW5nIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL2xhbmd1YWdlcyc7XHJcblxyXG4vLyBJdCdzIGF3a3dhcmQgdG8gcmVmZXIgdG8gdGhlc2Ugc3RyaW5nIGtleXMsIHNvIG5hbWUgdGhlbSBhcyByZXBsYWNlU3luY1trZXlzLnNlYWxLZXldLlxyXG5leHBvcnQgY29uc3Qgc3luY0tleXMgPSB7XHJcbiAgLy8gTWF0Y2ggUmVnZXhlcywgTmV0UmVnZXhlcywgYW5kIHRpbWVsaW5lIGNvbnN0cnVjdGlvbnMgb2Ygc2VhbCBsb2cgbGluZXMuXHJcbiAgc2VhbDogJyg/PD0wMDowODM5OnwwMFxcXFx8W158XSpcXFxcfDA4MzlcXFxcfFxcXFx8KSguKikgd2lsbCBiZSBzZWFsZWQgb2ZmKD86IGluICg/OlswLTldKyBzZWNvbmRzKT8pPycsXHJcbiAgdW5zZWFsOiAnaXMgbm8gbG9uZ2VyIHNlYWxlZCcsXHJcbiAgZW5nYWdlOiAnRW5nYWdlIScsXHJcbn07XHJcblxyXG5jb25zdCB0ZXh0S2V5cyA9IHtcclxuICAvLyBNYXRjaCBkaXJlY3Rpb25zIGluIHJlcGxhY2VUZXh0XHJcbiAgLy8gZWc6IGAoTilgLCBgKFNXKWAsIGAoTkUvTlcpYCwgZXRjLlxyXG4gIEU6ICcoPzw9IFxcXFwofFxcXFwvKUUoPz1cXFxcKXxcXFxcLyknLFxyXG4gIE46ICcoPzw9IFxcXFwofFxcXFwvKU4oPz1cXFxcKXxcXFxcLyknLFxyXG4gIFM6ICcoPzw9IFxcXFwofFxcXFwvKVMoPz1cXFxcKXxcXFxcLyknLFxyXG4gIFc6ICcoPzw9IFxcXFwofFxcXFwvKVcoPz1cXFxcKXxcXFxcLyknLFxyXG4gIE5FOiAnKD88PSBcXFxcKHxcXFxcLylORSg/PVxcXFwpfFxcXFwvKScsXHJcbiAgTlc6ICcoPzw9IFxcXFwofFxcXFwvKU5XKD89XFxcXCl8XFxcXC8pJyxcclxuICBTRTogJyg/PD0gXFxcXCh8XFxcXC8pU0UoPz1cXFxcKXxcXFxcLyknLFxyXG4gIFNXOiAnKD88PSBcXFxcKHxcXFxcLylTVyg/PVxcXFwpfFxcXFwvKScsXHJcbiAgLy8gTWF0Y2ggUm9sZXMgaW4gcmVwbGFjZVRleHRcclxuICAvLyBlZzogYChUYW5rKWAsIGAoSGVhbGVyKWAsIGAoRFBTKWAsIGV0Y1xyXG4gIFRhbms6ICcoPzw9IFxcXFwofFxcXFwvKVRhbmtzPyg/PVxcXFwpfFxcXFwvKScsXHJcbiAgSGVhbGVyOiAnKD88PSBcXFxcKHxcXFxcLylIZWFsZXJzPyg/PVxcXFwpfFxcXFwvKScsXHJcbiAgRFBTOiAnKD88PSBcXFxcKHxcXFxcLylEUFMoPz1cXFxcKXxcXFxcLyknLFxyXG4gIC8vIE1hdGNoIGAtLTEtLWAgc3R5bGUgdGV4dC5cclxuICBOdW1iZXI6ICctLShcXFxccypcXFxcZCtcXFxccyopLS0nLFxyXG59O1xyXG5cclxudHlwZSBDb21tb25SZXBsYWNlbWVudCA9IHtcclxuICByZXBsYWNlU3luYzoge1xyXG4gICAgW3JlcGxhY2VLZXk6IHN0cmluZ106IHsgW2tleSBpbiBMYW5nXT86IHN0cmluZyB9O1xyXG4gIH07XHJcbiAgcmVwbGFjZVRleHQ6IHtcclxuICAgIFtyZXBsYWNlS2V5OiBzdHJpbmddOiB7XHJcbiAgICAgIFtrZXkgaW4gTm9uRW5MYW5nXT86IHN0cmluZztcclxuICAgIH0gJiB7XHJcbiAgICAgIC8vIGRvbid0IHNldCB0aGlzIGtleSwgYnV0IGFsbG93IHVzIHRvIGFzayBpZiBpdCBleGlzdHNcclxuICAgICAgZW4/OiBuZXZlcjtcclxuICAgIH07XHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21tb25SZXBsYWNlbWVudDogQ29tbW9uUmVwbGFjZW1lbnQgPSB7XHJcbiAgcmVwbGFjZVN5bmM6IHtcclxuICAgIFtzeW5jS2V5cy5zZWFsXToge1xyXG4gICAgICBlbjogJyQxIHdpbGwgYmUgc2VhbGVkIG9mZicsXHJcbiAgICAgIGRlOiAnTm9jaCAxNSBTZWt1bmRlbiwgYmlzIHNpY2ggKD86KD86ZGVyfGRpZXxkYXMpICk/KD86WnVnYW5nIHp1KD86W3JtXXwgZGVuKT8gKT8kMSBzY2hsaWXDn3QnLFxyXG4gICAgICBmcjogJ0Zlcm1ldHVyZSBkKD86ZXx1fGVzKSAkMSBkYW5zJyxcclxuICAgICAgamE6ICckMeOBruWwgemOluOBvuOBp+OBguOBqCcsXHJcbiAgICAgIGNuOiAn6LedJDHooqvlsIHplIHov5jmnIknLFxyXG4gICAgICBrbzogJzE17LSIIO2bhOyXkCAkMSg/OuydtHzqsIApIOu0ieyHhOuQqeuLiOuLpCcsXHJcbiAgICB9LFxyXG4gICAgW3N5bmNLZXlzLnVuc2VhbF06IHtcclxuICAgICAgZW46ICdpcyBubyBsb25nZXIgc2VhbGVkJyxcclxuICAgICAgZGU6ICfDtmZmbmV0IHNpY2ggKD86d2llZGVyfGVybmV1dCknLFxyXG4gICAgICBmcjogJ091dmVydHVyZSAnLFxyXG4gICAgICBqYTogJ+OBruWwgemOluOBjOino+OBi+OCjOOBnycsXHJcbiAgICAgIGNuOiAn55qE5bCB6ZSB6Kej6Zmk5LqGJyxcclxuICAgICAga286ICfsnZgg67SJ7IeE6rCAIO2VtOygnOuQmOyXiOyKteuLiOuLpCcsXHJcbiAgICB9LFxyXG4gICAgW3N5bmNLZXlzLmVuZ2FnZV06IHtcclxuICAgICAgZW46ICdFbmdhZ2UhJyxcclxuICAgICAgZGU6ICdTdGFydCEnLFxyXG4gICAgICBmcjogJ8OAIGxcXCdhdHRhcXVlJyxcclxuICAgICAgamE6ICfmiKbpl5jplovlp4vvvIEnLFxyXG4gICAgICBjbjogJ+aImOaWl+W8gOWni++8gScsXHJcbiAgICAgIGtvOiAn7KCE7YisIOyLnOyekSEnLFxyXG4gICAgfSxcclxuICB9LFxyXG4gIHJlcGxhY2VUZXh0OiB7XHJcbiAgICAnLS1hZGRzIHNwYXduLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1BZGRzIGVyc2NoZWluZW4tLScsXHJcbiAgICAgIGZyOiAnLS1BcHBhcml0aW9uIGRcXCdhZGRzLS0nLFxyXG4gICAgICBqYTogJy0t6ZuR6a2a5Ye654++LS0nLFxyXG4gICAgICBjbjogJy0t5bCP5oCq5Ye6546wLS0nLFxyXG4gICAgICBrbzogJy0t7KuEIOyGjO2ZmC0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1hZGRzIHRhcmdldGFibGUtLSc6IHtcclxuICAgICAgZGU6ICctLUFkZHMgYW52aXNpZXJiYXItLScsXHJcbiAgICAgIGZyOiAnLS1BZGRzIGNpYmxhYmxlcy0tJyxcclxuICAgICAgamE6ICctLembkemtmuOCv+ODvOOCsuODg+ODiOWPr+iDvS0tJyxcclxuICAgICAgY246ICctLeWwj+aAquWPr+mAieS4rS0tJyxcclxuICAgICAga286ICctLeyrhCDtg4Dqsp8g6rCA64qlLS0nLFxyXG4gICAgfSxcclxuICAgICctLWNlbnRlci0tJzoge1xyXG4gICAgICBkZTogJy0tTWl0dGUtLScsXHJcbiAgICAgIGZyOiAnLS1DZW50cmUtLScsXHJcbiAgICAgIGphOiAnLS3jgrvjg7Pjgr/jg7wtLScsXHJcbiAgICAgIGNuOiAnLS3kuK3lpK4tLScsXHJcbiAgICAgIGtvOiAnLS3spJHslZktLScsXHJcbiAgICB9LFxyXG4gICAgJ1xcXFwoY2VudGVyXFxcXCknOiB7XHJcbiAgICAgIGRlOiAnKE1pdHRlKScsXHJcbiAgICAgIGZyOiAnKENlbnRyZSknLFxyXG4gICAgICBqYTogJyjjgrvjg7Pjgr/jg7wpJyxcclxuICAgICAgY246ICco5Lit5aSuKScsXHJcbiAgICAgIGtvOiAnKOykkeyVmSknLFxyXG4gICAgfSxcclxuICAgICctLWNsb25lcyBhcHBlYXItLSc6IHtcclxuICAgICAgZGU6ICctLUtsb25lIGVyc2NoZWluZW4tLScsXHJcbiAgICAgIGZyOiAnLS1BcHBhcml0aW9uIGRlcyBjbG9uZXMtLScsXHJcbiAgICAgIGphOiAnLS3lubvlvbHlh7rnj74tLScsXHJcbiAgICAgIGNuOiAnLS3lhYvpmoYg5L2TIOWHuueOsC0tJyxcclxuICAgICAga286ICctLeu2hOyLoCDshoztmZgtLScsXHJcbiAgICB9LFxyXG4gICAgJy0tY29ybmVyLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1FY2tlLS0nLFxyXG4gICAgICBmcjogJy0tQ29pbi0tJyxcclxuICAgICAgamE6ICctLeOCs+ODvOODiuODvC0tJyxcclxuICAgICAgY246ICctLeinkuiQvS0tJyxcclxuICAgICAga286ICctLeq1rOyEnS0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1kcHMgYnVybi0tJzoge1xyXG4gICAgICBkZTogJy0tRFBTIGJ1cm4tLScsXHJcbiAgICAgIGZyOiAnLS1CdXJuIGRwcy0tJyxcclxuICAgICAgamE6ICctLeeBq+WKm+WHuuOBmy0tJyxcclxuICAgICAgY246ICctLei9rOeBqy0tJyxcclxuICAgICAga286ICctLeuUnCDssrTtgawtLScsXHJcbiAgICB9LFxyXG4gICAgJy0tZWFzdC0tJzoge1xyXG4gICAgICBkZTogJy0tT3N0ZW4tLScsXHJcbiAgICAgIGZyOiAnLS1Fc3QtLScsXHJcbiAgICAgIGphOiAnLS3mnbEtLScsXHJcbiAgICAgIGNuOiAnLS3kuJwtLScsXHJcbiAgICAgIGtvOiAnLS3rj5nsqr0tLScsXHJcbiAgICB9LFxyXG4gICAgJ1xcXFwoZWFzdFxcXFwpJzoge1xyXG4gICAgICBkZTogJyhPc3RlbiknLFxyXG4gICAgICBmcjogJyhFc3QpJyxcclxuICAgICAgamE6ICco5p2xKScsXHJcbiAgICAgIGNuOiAnKOS4nCknLFxyXG4gICAgICBrbzogJyjrj5nsqr0pJyxcclxuICAgIH0sXHJcbiAgICAnRW5yYWdlJzoge1xyXG4gICAgICBkZTogJ0ZpbmFsYW5ncmlmZicsXHJcbiAgICAgIGZyOiAnRW5yYWdlJyxcclxuICAgICAgamE6ICfmmYLplpPliIfjgownLFxyXG4gICAgICBjbjogJ+eLguaatCcsXHJcbiAgICAgIGtvOiAn7KCE66m46riwJyxcclxuICAgIH0sXHJcbiAgICAnLS1mcm96ZW4tLSc6IHtcclxuICAgICAgZGU6ICctLWVpbmdlZnJvcmVuLS0nLFxyXG4gICAgICBmcjogJy0tR2Vsw6ktLScsXHJcbiAgICAgIGphOiAnLS3lh43ntZAtLScsXHJcbiAgICAgIGNuOiAnLS3lhrvnu5MtLScsXHJcbiAgICAgIGtvOiAnLS3rj5nqsrAtLScsXHJcbiAgICB9LFxyXG4gICAgJy0taW4tLSc6IHtcclxuICAgICAgZGU6ICctLVJlaW4tLScsXHJcbiAgICAgIGZyOiAnLS1JbnTDqXJpZXVyLS0nLFxyXG4gICAgICBqYTogJy0t5LitLS0nLFxyXG4gICAgICBjbjogJy0t5YaFLS0nLFxyXG4gICAgICBrbzogJy0t7JWILS0nLFxyXG4gICAgfSxcclxuICAgICdcXFxcKEluXFxcXCknOiB7XHJcbiAgICAgIGRlOiAnKFJlaW4pJyxcclxuICAgICAgZnI6ICcoSW50w6lyaWV1ciknLFxyXG4gICAgICBqYTogJyjkuK0pJyxcclxuICAgICAgY246ICco5YaFKScsXHJcbiAgICAgIGtvOiAnKOyViCknLFxyXG4gICAgfSxcclxuICAgICdcXFxcKGlubmVyXFxcXCknOiB7XHJcbiAgICAgIGRlOiAnKGlubmVuKScsXHJcbiAgICAgIGZyOiAnKGludMOpcmlldXIpJyxcclxuICAgICAgamE6ICco5LitKScsXHJcbiAgICAgIGNuOiAnKOWGhSknLFxyXG4gICAgICBrbzogJyjslYgpJyxcclxuICAgIH0sXHJcbiAgICAnLS1qdW1wLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1TcHJ1bmctLScsXHJcbiAgICAgIGZyOiAnLS1TYXV0LS0nLFxyXG4gICAgICBqYTogJy0t44K444Oj44Oz44OXLS0nLFxyXG4gICAgICBjbjogJy0t6LezLS0nLFxyXG4gICAgICBrbzogJy0t7KCQ7ZSELS0nLFxyXG4gICAgfSxcclxuICAgICctLWtub2NrYmFjay0tJzoge1xyXG4gICAgICBkZTogJy0tUsO8Y2tzdG/Dny0tJyxcclxuICAgICAgZnI6ICctLVBvdXNzw6llLS0nLFxyXG4gICAgICBqYTogJy0t44OO44OD44Kv44OQ44OD44KvLS0nLFxyXG4gICAgICBjbjogJy0t5Ye76YCALS0nLFxyXG4gICAgICBrbzogJy0t64SJ67CxLS0nLFxyXG4gICAgfSxcclxuICAgICctLW1pZGRsZS0tJzoge1xyXG4gICAgICBkZTogJy0tTWl0dGUtLScsXHJcbiAgICAgIGZyOiAnLS1NaWxpZXUtLScsXHJcbiAgICAgIGphOiAnLS3kuK3lpK4tLScsXHJcbiAgICAgIGNuOiAnLS3kuK3pl7QtLScsXHJcbiAgICAgIGtvOiAnLS3spJHslZktLScsXHJcbiAgICB9LFxyXG4gICAgJ1xcXFwobWlkZGxlXFxcXCknOiB7XHJcbiAgICAgIGRlOiAnKE1pdHRlKScsXHJcbiAgICAgIGZyOiAnKE1pbGlldSknLFxyXG4gICAgICBqYTogJyjkuK3lpK4pJyxcclxuICAgICAgY246ICco5Lit6Ze0KScsXHJcbiAgICAgIGtvOiAnKOykkeyVmSknLFxyXG4gICAgfSxcclxuICAgICctLW5vcnRoLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1Ob3JkZW4tLScsXHJcbiAgICAgIGZyOiAnLS1Ob3JkLS0nLFxyXG4gICAgICBqYTogJy0t5YyXLS0nLFxyXG4gICAgICBjbjogJy0t5YyXLS0nLFxyXG4gICAgICBrbzogJy0t67aB7Kq9LS0nLFxyXG4gICAgfSxcclxuICAgICdcXFxcKG5vcnRoXFxcXCknOiB7XHJcbiAgICAgIGRlOiAnKE5vcmRlbiknLFxyXG4gICAgICBmcjogJyhOb3JkKScsXHJcbiAgICAgIGphOiAnKOWMlyknLFxyXG4gICAgICBjbjogJyjljJcpJyxcclxuICAgICAga286ICco67aB7Kq9KScsXHJcbiAgICB9LFxyXG4gICAgJy0tbm9ydGhlYXN0LS0nOiB7XHJcbiAgICAgIGRlOiAnLS1Ob3Jkb3N0ZW4tLScsXHJcbiAgICAgIGZyOiAnLS1Ob3JkLUVzdC0tJyxcclxuICAgICAgamE6ICctLeWMl+adsS0tJyxcclxuICAgICAgY246ICctLeS4nOWMly0tJyxcclxuICAgICAga286ICctLeu2geuPmS0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1ub3J0aHdlc3QtLSc6IHtcclxuICAgICAgZGU6ICctLU5vcmR3ZXN0ZW4tLScsXHJcbiAgICAgIGZyOiAnLS1Ob3JkLU91ZXN0LS0nLFxyXG4gICAgICBqYTogJy0t5YyX6KW/LS0nLFxyXG4gICAgICBjbjogJy0t6KW/5YyXLS0nLFxyXG4gICAgICBrbzogJy0t67aB7IScLS0nLFxyXG4gICAgfSxcclxuICAgICctLW91dC0tJzoge1xyXG4gICAgICBkZTogJy0tUmF1cy0tJyxcclxuICAgICAgZnI6ICctLUV4dMOpcmlldXItLScsXHJcbiAgICAgIGphOiAnLS3lpJYtLScsXHJcbiAgICAgIGNuOiAnLS3lpJYtLScsXHJcbiAgICAgIGtvOiAnLS3rsJYtLScsXHJcbiAgICB9LFxyXG4gICAgJ1xcXFwoT3V0XFxcXCknOiB7XHJcbiAgICAgIGRlOiAnKFJhdXMpJyxcclxuICAgICAgZnI6ICcoRXh0w6lyaWV1ciknLFxyXG4gICAgICBqYTogJyjlpJYpJyxcclxuICAgICAgY246ICco5aSWKScsXHJcbiAgICAgIGtvOiAnKOuwliknLFxyXG4gICAgfSxcclxuICAgICdcXFxcKG91dGVyXFxcXCknOiB7XHJcbiAgICAgIGRlOiAnKGF1w59lbiknLFxyXG4gICAgICBmcjogJyhleHTDqXJpZXVyKScsXHJcbiAgICAgIGphOiAnKOWkliknLFxyXG4gICAgICBjbjogJyjlpJYpJyxcclxuICAgICAga286ICco67CWKScsXHJcbiAgICB9LFxyXG4gICAgJ1xcXFwob3V0c2lkZVxcXFwpJzoge1xyXG4gICAgICBkZTogJyhEcmF1w59lbiknLFxyXG4gICAgICBmcjogJyjDgCBsXFwnZXh0w6lyaWV1ciknLFxyXG4gICAgICBqYTogJyjlpJYpJyxcclxuICAgICAgY246ICco5aSW6Z2iKScsXHJcbiAgICAgIGtvOiAnKOuwlOq5pSknLFxyXG4gICAgfSxcclxuICAgICctLXJvdGF0ZS0tJzoge1xyXG4gICAgICBkZTogJy0tcm90aWVyZW4tLScsXHJcbiAgICAgIGZyOiAnLS1yb3RhdGlvbi0tJyxcclxuICAgICAgamE6ICctLeWbnui7oi0tJyxcclxuICAgICAgY246ICctLem+meWbnui9rC0tJyxcclxuICAgICAga286ICctLe2ajOyghC0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1zb3V0aC0tJzoge1xyXG4gICAgICBkZTogJy0tU8O8ZGVuLS0nLFxyXG4gICAgICBmcjogJy0tU3VkLS0nLFxyXG4gICAgICBqYTogJy0t5Y2XLS0nLFxyXG4gICAgICBjbjogJy0t5Y2XLS0nLFxyXG4gICAgICBrbzogJy0t64Ko7Kq9LS0nLFxyXG4gICAgfSxcclxuICAgICdcXFxcKHNvdXRoXFxcXCknOiB7XHJcbiAgICAgIGRlOiAnKFPDvGRlbiknLFxyXG4gICAgICBmcjogJyhTdWQpJyxcclxuICAgICAgamE6ICco5Y2XKScsXHJcbiAgICAgIGNuOiAnKOWNlyknLFxyXG4gICAgICBrbzogJyjrgqjsqr0pJyxcclxuICAgIH0sXHJcbiAgICAnLS1zb3V0aGVhc3QtLSc6IHtcclxuICAgICAgZGU6ICctLVPDvGRvc3Rlbi0tJyxcclxuICAgICAgZnI6ICctLVN1ZC1Fc3QtLScsXHJcbiAgICAgIGphOiAnLS3ljZfmnbEtLScsXHJcbiAgICAgIGNuOiAnLS3kuJzljZctLScsXHJcbiAgICAgIGtvOiAnLS3rgqjrj5ktLScsXHJcbiAgICB9LFxyXG4gICAgJy0tc291dGh3ZXN0LS0nOiB7XHJcbiAgICAgIGRlOiAnLS1Tw7xkd2VzdGVuLS0nLFxyXG4gICAgICBmcjogJy0tU3VkLU91ZXN0LS0nLFxyXG4gICAgICBqYTogJy0t5Y2X6KW/LS0nLFxyXG4gICAgICBjbjogJy0t6KW/5Y2XLS0nLFxyXG4gICAgICBrbzogJy0t64Ko7IScLS0nLFxyXG4gICAgfSxcclxuICAgICctLXNwbGl0LS0nOiB7XHJcbiAgICAgIGRlOiAnLS10ZWlsZW4tLScsXHJcbiAgICAgIGZyOiAnLS1kaXZpc2lvbi0tJyxcclxuICAgICAgamE6ICctLeWIhuijgi0tJyxcclxuICAgICAgY246ICctLeWIhuijgi0tJyxcclxuICAgICAga286ICctLeu2hOyXtC0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1zdHVuLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1CZXTDpHVidW5nLS0nLFxyXG4gICAgICBmcjogJy0tw4l0b3VyZGlzc2VtZW50LS0nLFxyXG4gICAgICBqYTogJy0t44K544K/44OzLS0nLFxyXG4gICAgICBjbjogJy0t5Ye75pmVLS0nLFxyXG4gICAgICBrbzogJy0t6riw7KCILS0nLFxyXG4gICAgfSxcclxuICAgICctLXN5bmMtLSc6IHtcclxuICAgICAgZGU6ICctLXN5bmNocm9uaXNhdGlvbi0tJyxcclxuICAgICAgZnI6ICctLXN5bmNocm9uaXNhdGlvbi0tJyxcclxuICAgICAgamE6ICctLeOCt+ODs+OCry0tJyxcclxuICAgICAgY246ICctLeWQjOatpeWMli0tJyxcclxuICAgICAga286ICctLeuPmeq4sO2ZlC0tJyxcclxuICAgIH0sXHJcbiAgICAnLS0oWzAtOV0reCApP3RhcmdldGFibGUtLSc6IHtcclxuICAgICAgZGU6ICctLSQxYW52aXNpZXJiYXItLScsXHJcbiAgICAgIGZyOiAnLS0kMWNpYmxhYmxlLS0nLFxyXG4gICAgICBqYTogJy0tJDHjgr/jg7zjgrLjg4Pjg4jlj6/og70tLScsXHJcbiAgICAgIGNuOiAnLS0kMeWPr+mAieS4rS0tJyxcclxuICAgICAga286ICctLSQx7YOA6rKfIOqwgOuKpS0tJyxcclxuICAgIH0sXHJcbiAgICAnLS10ZWxlcG9ydC0tJzoge1xyXG4gICAgICBkZTogJy0tdGVsZXBvcnRhdGlvbi0tJyxcclxuICAgICAgZnI6ICctLXTDqWzDqXBvcnRhdGlvbi0tJyxcclxuICAgICAgamE6ICctLeODhuODrOODneODvOODiC0tJyxcclxuICAgICAgY246ICctLeWCs+mAgS0tJyxcclxuICAgICAga286ICctLeyInOqwhCDsnbTrj5ktLScsXHJcbiAgICB9LFxyXG4gICAgJy0tdW50YXJnZXRhYmxlLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1uaWNoIGFudmlzaWVyYmFyLS0nLFxyXG4gICAgICBmcjogJy0tbm9uIGNpYmxhYmxlLS0nLFxyXG4gICAgICBqYTogJy0t44K/44O844Ky44OD44OI5LiN5Y+vLS0nLFxyXG4gICAgICBjbjogJy0t5peg5rOV6YCJ5LitLS0nLFxyXG4gICAgICBrbzogJy0t7YOA6rKfIOu2iOqwgOuKpS0tJyxcclxuICAgIH0sXHJcbiAgICAnLS13ZXN0LS0nOiB7XHJcbiAgICAgIGRlOiAnLS1XZXN0ZW4tLScsXHJcbiAgICAgIGZyOiAnLS1PdWVzdC0tJyxcclxuICAgICAgamE6ICctLeilvy0tJyxcclxuICAgICAgY246ICctLeilvy0tJyxcclxuICAgICAga286ICctLeyEnOyqvS0tJyxcclxuICAgIH0sXHJcbiAgICBbdGV4dEtleXMuRV06IHtcclxuICAgICAgZGU6ICdPJyxcclxuICAgICAgZnI6ICdFJyxcclxuICAgICAgamE6ICfmnbEnLFxyXG4gICAgICBjbjogJ+S4nCcsXHJcbiAgICAgIGtvOiAn64+ZJyxcclxuICAgIH0sXHJcbiAgICBbdGV4dEtleXMuTl06IHtcclxuICAgICAgZGU6ICdOJyxcclxuICAgICAgZnI6ICdOJyxcclxuICAgICAgamE6ICfljJcnLFxyXG4gICAgICBjbjogJ+WMlycsXHJcbiAgICAgIGtvOiAn67aBJyxcclxuICAgIH0sXHJcbiAgICBbdGV4dEtleXMuU106IHtcclxuICAgICAgZGU6ICdTJyxcclxuICAgICAgZnI6ICdTJyxcclxuICAgICAgamE6ICfljZcnLFxyXG4gICAgICBjbjogJ+WNlycsXHJcbiAgICAgIGtvOiAn64KoJyxcclxuICAgIH0sXHJcbiAgICBbdGV4dEtleXMuV106IHtcclxuICAgICAgZGU6ICdXJyxcclxuICAgICAgZnI6ICdPJyxcclxuICAgICAgamE6ICfopb8nLFxyXG4gICAgICBjbjogJ+ilvycsXHJcbiAgICAgIGtvOiAn7IScJyxcclxuICAgIH0sXHJcbiAgICBbdGV4dEtleXMuTkVdOiB7XHJcbiAgICAgIGRlOiAnTk8nLFxyXG4gICAgICBmcjogJ05FJyxcclxuICAgICAgamE6ICfljJfmnbEnLFxyXG4gICAgICBjbjogJ+S4nOWMlycsXHJcbiAgICAgIGtvOiAn67aB64+ZJyxcclxuICAgIH0sXHJcbiAgICBbdGV4dEtleXMuTlddOiB7XHJcbiAgICAgIGRlOiAnTlcnLFxyXG4gICAgICBmcjogJ05PJyxcclxuICAgICAgamE6ICfljJfopb8nLFxyXG4gICAgICBjbjogJ+ilv+WMlycsXHJcbiAgICAgIGtvOiAn67aB7IScJyxcclxuICAgIH0sXHJcbiAgICBbdGV4dEtleXMuU0VdOiB7XHJcbiAgICAgIGRlOiAnU08nLFxyXG4gICAgICBmcjogJ1NFJyxcclxuICAgICAgamE6ICfljZfmnbEnLFxyXG4gICAgICBjbjogJ+S4nOWNlycsXHJcbiAgICAgIGtvOiAn64Ko64+ZJyxcclxuICAgIH0sXHJcbiAgICBbdGV4dEtleXMuU1ddOiB7XHJcbiAgICAgIGRlOiAnU1cnLFxyXG4gICAgICBmcjogJ1NPJyxcclxuICAgICAgamE6ICfljZfopb8nLFxyXG4gICAgICBjbjogJ+ilv+WNlycsXHJcbiAgICAgIGtvOiAn64Ko7IScJyxcclxuICAgIH0sXHJcbiAgICBbdGV4dEtleXMuVGFua106IHtcclxuICAgICAgZGU6ICdUYW5rJyxcclxuICAgICAgZnI6ICdUYW5rJyxcclxuICAgICAgamE6ICfjgr/jg7Pjgq8nLFxyXG4gICAgICBjbjogJ+WdpuWFiycsXHJcbiAgICAgIGtvOiAn7YOx7LukJyxcclxuICAgIH0sXHJcbiAgICBbdGV4dEtleXMuSGVhbGVyXToge1xyXG4gICAgICBkZTogJ0hlaWxlcicsXHJcbiAgICAgIGZyOiAnSGVhbGVyJyxcclxuICAgICAgamE6ICfjg5Ljg7zjg6njg7wnLFxyXG4gICAgICBjbjogJ+ayu+eWlycsXHJcbiAgICAgIGtvOiAn7Z6Q65+sJyxcclxuICAgIH0sXHJcbiAgICBbdGV4dEtleXMuRFBTXToge1xyXG4gICAgICBkZTogJ0RQUycsXHJcbiAgICAgIGZyOiAnRFBTJyxcclxuICAgICAgamE6ICdEUFMnLFxyXG4gICAgICBjbjogJ0RQUycsXHJcbiAgICAgIGtvOiAn65Sc65+sJyxcclxuICAgIH0sXHJcbiAgICBbdGV4dEtleXMuTnVtYmVyXToge1xyXG4gICAgICBkZTogJy0tJDEtLScsXHJcbiAgICAgIGZyOiAnLS0kMS0tJyxcclxuICAgICAgamE6ICctLSQxLS0nLFxyXG4gICAgICBjbjogJy0tJDEtLScsXHJcbiAgICAgIGtvOiAnLS0kMS0tJyxcclxuICAgIH0sXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuXHJcbi8vIEtleXMgaW50byBjb21tb25SZXBsYWNlbWVudCBvYmplY3RzIHRoYXQgcmVwcmVzZW50IFwicGFydGlhbFwiIHRyYW5zbGF0aW9ucyxcclxuLy8gaW4gdGhlIHNlbnNlIHRoYXQgZXZlbiBpZiBpdCBhcHBsaWVzLCB0aGVyZSBzdGlsbCBuZWVkcyB0byBiZSBhbm90aGVyXHJcbi8vIHRyYW5zbGF0aW9uIGZvciBpdCB0byBiZSBjb21wbGV0ZS4gIFRoZXNlIGtleXMgc2hvdWxkIGJlIGV4YWN0bHkgdGhlIHNhbWVcclxuLy8gYXMgdGhlIGtleXMgZnJvbSB0aGUgY29tbW9uUmVwbGFjZW1lbnQgYmxvY2sgYWJvdmUuXHJcbmV4cG9ydCBjb25zdCBwYXJ0aWFsQ29tbW9uUmVwbGFjZW1lbnRLZXlzID0gW1xyXG4gIC8vIEJlY2F1c2UgdGhlIHpvbmUgbmFtZSBuZWVkcyB0byBiZSB0cmFuc2xhdGVkIGhlcmUsIHRoaXMgaXMgcGFydGlhbC5cclxuICBzeW5jS2V5cy5zZWFsLFxyXG4gIC8vIERpcmVjdGlvbnNcclxuICB0ZXh0S2V5cy5FLFxyXG4gIHRleHRLZXlzLk4sXHJcbiAgdGV4dEtleXMuUyxcclxuICB0ZXh0S2V5cy5XLFxyXG4gIHRleHRLZXlzLk5FLFxyXG4gIHRleHRLZXlzLk5XLFxyXG4gIHRleHRLZXlzLlNFLFxyXG4gIHRleHRLZXlzLlNXLFxyXG4gIC8vIFJvbGVzXHJcbiAgdGV4dEtleXMuVGFuayxcclxuICB0ZXh0S2V5cy5IZWFsZXIsXHJcbiAgdGV4dEtleXMuRFBTLFxyXG5dO1xyXG4iLCJpbXBvcnQgeyBjb21tb25SZXBsYWNlbWVudCB9IGZyb20gJy4vY29tbW9uX3JlcGxhY2VtZW50JztcclxuaW1wb3J0IFJlZ2V4ZXMsIHsgUmVnZXgsIE5ldHdvcms2ZFBhcmFtcyB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9yZWdleGVzJztcclxuaW1wb3J0IHsgTG9jYWxlUmVnZXggfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvdHJhbnNsYXRpb25zJztcclxuaW1wb3J0IHsgVW5yZWFjaGFibGVDb2RlIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL25vdF9yZWFjaGVkJztcclxuaW1wb3J0IHsgUmFpZGJvc3NPcHRpb25zIH0gZnJvbSAnLi9yYWlkYm9zc19vcHRpb25zJztcclxuaW1wb3J0IHsgTGFuZyB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9sYW5ndWFnZXMnO1xyXG5pbXBvcnQgVGltZXJCYXIgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3RpbWVyYmFyJztcclxuaW1wb3J0IHsgTG9nRXZlbnQgfSBmcm9tICcuLi8uLi90eXBlcy9ldmVudCc7XHJcbmltcG9ydCB7IExvb3NlVGltZWxpbmVUcmlnZ2VyLCBUcmlnZ2VyQXV0b0NvbmZpZyB9IGZyb20gJy4uLy4uL3R5cGVzL3RyaWdnZXInO1xyXG5pbXBvcnQgeyBQb3B1cFRleHRHZW5lcmF0b3IgfSBmcm9tICcuL3BvcHVwLXRleHQnO1xyXG5cclxuY29uc3Qga0JpZyA9IDEwMDAwMDAwMDA7IC8vIFNvbWV0aGluZyBiaWdnZXIgdGhhbiBhbnkgZmlnaHQgbGVuZ3RoIGluIHNlY29uZHMuXHJcblxyXG5jb25zdCB0aW1lbGluZUluc3RydWN0aW9ucyA9IHtcclxuICBlbjogW1xyXG4gICAgJ1RoZXNlIGxpbmVzIGFyZScsXHJcbiAgICAnZGVidWcgdGltZWxpbmUgZW50cmllcy4nLFxyXG4gICAgJ0lmIHlvdSBsb2NrIHRoZSBvdmVybGF5LCcsXHJcbiAgICAndGhleSB3aWxsIGRpc2FwcGVhciEnLFxyXG4gICAgJ1JlYWwgdGltZWxpbmVzIGF1dG9tYXRpY2FsbHknLFxyXG4gICAgJ2FwcGVhciB3aGVuIHN1cHBvcnRlZC4nLFxyXG4gIF0sXHJcbiAgZGU6IFtcclxuICAgICdEaWVzZSBaZWlsZW4gc2luZCcsXHJcbiAgICAnVGltZWxpbmUgRGVidWctRWludHLDpGdlLicsXHJcbiAgICAnV2VubiBkdSBkYXMgT3ZlcmxheSBzcGVycnN0LCcsXHJcbiAgICAnd2VyZGVuIHNpZSB2ZXJzY2h3aW5kZW4hJyxcclxuICAgICdFY2h0ZSBUaW1lbGluZXMgZXJzY2hlaW5lbiBhdXRvbWF0aXNjaCwnLFxyXG4gICAgJ3dlbm4gc2llIHVudGVyc3TDvHR6dCB3ZXJkZW4uJyxcclxuICBdLFxyXG4gIGZyOiBbXHJcbiAgICAnQ2VzIGxpZ25lcyBzb250JyxcclxuICAgICdkZXMgdGltZWxpbmVzIGRlIHRlc3QuJyxcclxuICAgICdTaSB2b3VzIGJsb3F1ZXogbFxcJ292ZXJsYXksJyxcclxuICAgICdlbGxlcyBkaXNwYXJhw650cm9udCAhJyxcclxuICAgICdMZXMgdnJhaWVzIFRpbWVsaW5lcycsXHJcbiAgICAnYXBwYXJhw650cm9udCBhdXRvbWF0aXF1ZW1lbnQuJyxcclxuICBdLFxyXG4gIGphOiBbXHJcbiAgICAn44GT44Gh44KJ44Gv44OH44OQ44OD44Kw55So44GuJyxcclxuICAgICfjgr/jgqTjg6Djg6njgqTjg7PjgafjgZnjgIInLFxyXG4gICAgJ+OCquODvOODkOODvOODrOOCpOOCkuODreODg+OCr+OBmeOCjOOBsOOAgScsXHJcbiAgICAn44OH44OQ44OD44Kw55So44OG44Kt44K544OI44KC5raI44GI44KLJyxcclxuICAgICfjgrXjg53jg7zjg4jjgZnjgovjgr7jg7zjg7Pjgavjga/jgr/jgqTjg6AnLFxyXG4gICAgJ+ODqeOCpOODs+OCkuWLleeahOOBq+ODreODvOODieOBmeOCi+OAgicsXHJcbiAgXSxcclxuICBjbjogW1xyXG4gICAgJ+aYvuekuuWcqOatpOWkhOeahOaYrycsXHJcbiAgICAn6LCD6K+V55So5pe26Ze06L2044CCJyxcclxuICAgICflsIbmraTmgqzmta7nqpfplIHlrponLFxyXG4gICAgJ+WImeS8mueri+WIu+a2iOWksScsXHJcbiAgICAn55yf5a6e55qE5pe26Ze06L205Lya5qC55o2uJyxcclxuICAgICflvZPliY3ljLrln5/liqjmgIHliqDovb3lubbmmL7npLonLFxyXG4gIF0sXHJcbiAga286IFtcclxuICAgICfsnbQg66eJ64yA67CU64qUIOuUlOuyhOq3uOyaqScsXHJcbiAgICAn7YOA7J6E65287J24IOyeheuLiOuLpC4nLFxyXG4gICAgJ+yYpOuyhOugiOydtOulvCDsnITsuZjsnqDquIjtlZjrqbQsJyxcclxuICAgICfsnbQg66eJ64yA67CU64+EIOyCrOudvOynkeuLiOuLpC4nLFxyXG4gICAgJ+yngOybkOuQmOuKlCDqtazsl63sl5DshJwg7YOA7J6E65287J247J20JyxcclxuICAgICfsnpDrj5nsnLzroZwg7ZGc7Iuc65Cp64uI64ukLicsXHJcbiAgXSxcclxufTtcclxuXHJcbmNvbnN0IGFjdGl2ZVRleHQgPSB7XHJcbiAgZW46ICdBY3RpdmU6JyxcclxuICBkZTogJ0FrdGl2OicsXHJcbiAgZnI6ICdBY3RpdmUgOicsXHJcbiAgamE6ICco6YCy6KGMKTonLFxyXG4gIGNuOiAnKOi/m+ihjOS4rSk6JyxcclxuICBrbzogJ+yLnOyghOykkTonLFxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgVGltZWxpbmVSZXBsYWNlbWVudCA9IHtcclxuICBsb2NhbGU6IHN0cmluZztcclxuICBtaXNzaW5nVHJhbnNsYXRpb25zPzogYm9vbGVhbjtcclxuICByZXBsYWNlU3luYz86IHsgW3JlZ2V4U3RyaW5nOiBzdHJpbmddOiBzdHJpbmcgfTtcclxuICByZXBsYWNlVGV4dD86IHsgW3RpbWVsaW5lVGV4dDogc3RyaW5nXTogc3RyaW5nIH07XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBUaW1lbGluZVN0eWxlID0ge1xyXG4gIHN0eWxlOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xyXG4gIHJlZ2V4OiBSZWdFeHA7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEV2ZW50ID0ge1xyXG4gIGlkOiBudW1iZXI7XHJcbiAgdGltZTogbnVtYmVyO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICB0ZXh0OiBzdHJpbmc7XHJcbiAgYWN0aXZlVGltZT86IG51bWJlcjtcclxuICBsaW5lTnVtYmVyPzogbnVtYmVyO1xyXG4gIGR1cmF0aW9uPzogbnVtYmVyO1xyXG4gIHNvcnRLZXk/OiBudW1iZXI7XHJcbiAgaXNEdXI/OiBib29sZWFuO1xyXG4gIHN0eWxlPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcclxufVxyXG5cclxudHlwZSBFcnJvciA9IHtcclxuICBsaW5lTnVtYmVyPzogbnVtYmVyO1xyXG4gIGxpbmU/OiBzdHJpbmc7XHJcbiAgZXJyb3I6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgU3luYyA9IHtcclxuICBpZDogbnVtYmVyO1xyXG4gIG9yaWdSZWdleFN0cjogc3RyaW5nO1xyXG4gIHJlZ2V4OiBSZWdFeHA7XHJcbiAgc3RhcnQ6IG51bWJlcjtcclxuICBlbmQ6IG51bWJlcjtcclxuICB0aW1lOiBudW1iZXI7XHJcbiAgbGluZU51bWJlcjogbnVtYmVyO1xyXG4gIGp1bXA/OiBudW1iZXI7XHJcbn1cclxuXHJcbnR5cGUgUGFyc2VkUG9wdXBUZXh0ID0ge1xyXG4gIHR5cGU6ICdpbmZvJyB8ICdhbGVydCcgfCAnYWxhcm0nIHwgJ3R0cyc7XHJcbiAgc2Vjb25kc0JlZm9yZT86IG51bWJlcjtcclxuICB0ZXh0OiBzdHJpbmc7XHJcbn1cclxuXHJcbnR5cGUgUGFyc2VkVHJpZ2dlclRleHQgPSB7XHJcbiAgdHlwZTogJ3RyaWdnZXInO1xyXG4gIHNlY29uZHNCZWZvcmU/OiBudW1iZXI7XHJcbiAgdGV4dD86IHN0cmluZztcclxuICBtYXRjaGVzOiBSZWdFeHBFeGVjQXJyYXkgfCBudWxsO1xyXG4gIHRyaWdnZXI6IExvb3NlVGltZWxpbmVUcmlnZ2VyO1xyXG59XHJcblxyXG50eXBlIFBhcnNlZFRleHQgPSBQYXJzZWRQb3B1cFRleHQgfCBQYXJzZWRUcmlnZ2VyVGV4dDtcclxuXHJcbnR5cGUgVGV4dCA9IFBhcnNlZFRleHQgJiB7IHRpbWU6IG51bWJlciB9O1xyXG5cclxudHlwZSBBZGRUaW1lckNhbGxiYWNrID0gKGZpZ2h0Tm93OiBudW1iZXIsIGR1cmF0aW9uRXZlbnQ6IEV2ZW50LCBjaGFubmVsaW5nOiBib29sZWFuKSA9PiB2b2lkO1xyXG50eXBlIFBvcHVwVGV4dENhbGxiYWNrID0gKHRleHQ6IHN0cmluZywgY3VycmVudFRpbWU6IG51bWJlcikgPT4gdm9pZDtcclxudHlwZSBUcmlnZ2VyQ2FsbGJhY2sgPVxyXG4gICAgKHRyaWdnZXI6IExvb3NlVGltZWxpbmVUcmlnZ2VyLFxyXG4gICAgbWF0Y2hlczogUmVnRXhwRXhlY0FycmF5IHwgbnVsbCxcclxuICAgIGN1cnJlbnRUaW1lOiBudW1iZXIpID0+IHZvaWQ7XHJcblxyXG4vLyBUT0RPOiBEdXBsaWNhdGVkIGluICdqb2JzJ1xyXG5jb25zdCBjb21wdXRlQmFja2dyb3VuZENvbG9yRnJvbSA9IChlbGVtZW50OiBIVE1MRWxlbWVudCwgY2xhc3NMaXN0OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xyXG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGNvbnN0IGNsYXNzZXMgPSBjbGFzc0xpc3Quc3BsaXQoJy4nKTtcclxuICBmb3IgKGNvbnN0IGNscyBvZiBjbGFzc2VzKVxyXG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoY2xzKTtcclxuICBlbGVtZW50LmFwcGVuZENoaWxkKGRpdik7XHJcbiAgY29uc3QgY29sb3IgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkaXYpLmJhY2tncm91bmRDb2xvcjtcclxuICBlbGVtZW50LnJlbW92ZUNoaWxkKGRpdik7XHJcbiAgcmV0dXJuIGNvbG9yO1xyXG59O1xyXG5cclxuLy8gVGhpcyBjbGFzcyByZWFkcyB0aGUgZm9ybWF0IG9mIEFDVCBUaW1lbGluZSBwbHVnaW4sIGRlc2NyaWJlZCBpblxyXG4vLyBkb2NzL1RpbWVsaW5lR3VpZGUubWRcclxuZXhwb3J0IGNsYXNzIFRpbWVsaW5lIHtcclxuICBwcml2YXRlIG9wdGlvbnM6IFJhaWRib3NzT3B0aW9ucztcclxuICBwcml2YXRlIHBlclRyaWdnZXJBdXRvQ29uZmlnOiB7IFt0cmlnZ2VySWQ6IHN0cmluZ106IFRyaWdnZXJBdXRvQ29uZmlnIH07XHJcbiAgcHJpdmF0ZSBhY3RpdmVUZXh0OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSByZXBsYWNlbWVudHM6IFRpbWVsaW5lUmVwbGFjZW1lbnRbXTtcclxuXHJcbiAgcHJpdmF0ZSBpZ25vcmVzOiB7IFtpZ25vcmVJZDogc3RyaW5nXTogYm9vbGVhbiB9O1xyXG4gIHB1YmxpYyBldmVudHM6IEV2ZW50W107XHJcbiAgcHJpdmF0ZSB0ZXh0czogVGV4dFtdO1xyXG4gIHB1YmxpYyBzeW5jU3RhcnRzOiBTeW5jW107XHJcbiAgcHJpdmF0ZSBzeW5jRW5kczogU3luY1tdO1xyXG4gIHByaXZhdGUgYWN0aXZlU3luY3M6IFN5bmNbXTtcclxuICBwcml2YXRlIGFjdGl2ZUV2ZW50czogRXZlbnRbXTtcclxuICBwdWJsaWMgZXJyb3JzOiBFcnJvcltdO1xyXG5cclxuICBwdWJsaWMgdGltZWJhc2UgPSAwO1xyXG5cclxuICBwcml2YXRlIG5leHRFdmVudCA9IDA7XHJcbiAgcHJpdmF0ZSBuZXh0VGV4dCA9IDA7XHJcbiAgcHJpdmF0ZSBuZXh0U3luY1N0YXJ0ID0gMDtcclxuICBwcml2YXRlIG5leHRTeW5jRW5kID0gMDtcclxuXHJcbiAgcHJpdmF0ZSBhZGRUaW1lckNhbGxiYWNrOiBBZGRUaW1lckNhbGxiYWNrIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSByZW1vdmVUaW1lckNhbGxiYWNrOiB8XHJcbiAgICAoKGU6IEV2ZW50LCBleHBpcmVkOiBib29sZWFuLCBmb3JjZT86IGJvb2xlYW4pID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBzaG93SW5mb1RleHRDYWxsYmFjazogUG9wdXBUZXh0Q2FsbGJhY2sgfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIHNob3dBbGVydFRleHRDYWxsYmFjazogUG9wdXBUZXh0Q2FsbGJhY2sgfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIHNob3dBbGFybVRleHRDYWxsYmFjazogUG9wdXBUZXh0Q2FsbGJhY2sgfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIHNwZWFrVFRTQ2FsbGJhY2s6IFBvcHVwVGV4dENhbGxiYWNrIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSB0cmlnZ2VyQ2FsbGJhY2s6IFRyaWdnZXJDYWxsYmFjayB8IG51bGwgPSBudWxsO1xyXG4gIHByaXZhdGUgc3luY1RpbWVDYWxsYmFjazogKChmaWdodE5vdzogbnVtYmVyLCBydW5uaW5nOiBib29sZWFuKSA9PiB2b2lkKSB8IG51bGwgPSBudWxsO1xyXG5cclxuICBwcml2YXRlIHVwZGF0ZVRpbWVyID0gMDtcclxuXHJcbiAgY29uc3RydWN0b3IodGV4dDogc3RyaW5nLCByZXBsYWNlbWVudHM6IFRpbWVsaW5lUmVwbGFjZW1lbnRbXSwgdHJpZ2dlcnM6IExvb3NlVGltZWxpbmVUcmlnZ2VyW10sXHJcbiAgICAgIHN0eWxlczogVGltZWxpbmVTdHlsZVtdLCBvcHRpb25zOiBSYWlkYm9zc09wdGlvbnMpIHtcclxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICB0aGlzLnBlclRyaWdnZXJBdXRvQ29uZmlnID0gdGhpcy5vcHRpb25zWydQZXJUcmlnZ2VyQXV0b0NvbmZpZyddIHx8IHt9O1xyXG4gICAgdGhpcy5yZXBsYWNlbWVudHMgPSByZXBsYWNlbWVudHM7XHJcblxyXG4gICAgY29uc3QgbGFuZyA9IHRoaXMub3B0aW9ucy5UaW1lbGluZUxhbmd1YWdlIHx8IHRoaXMub3B0aW9ucy5QYXJzZXJMYW5ndWFnZSB8fCAnZW4nO1xyXG4gICAgdGhpcy5hY3RpdmVUZXh0ID0gbGFuZyBpbiBhY3RpdmVUZXh0ID8gYWN0aXZlVGV4dFtsYW5nXSA6IGFjdGl2ZVRleHRbJ2VuJ107XHJcblxyXG4gICAgLy8gQSBzZXQgb2YgbmFtZXMgd2hpY2ggd2lsbCBub3QgYmUgbm90aWZpZWQgYWJvdXQuXHJcbiAgICB0aGlzLmlnbm9yZXMgPSB7fTtcclxuICAgIC8vIFNvcnRlZCBieSBldmVudCBvY2N1cnJlbmNlIHRpbWUuXHJcbiAgICB0aGlzLmV2ZW50cyA9IFtdO1xyXG4gICAgLy8gU29ydGVkIGJ5IGV2ZW50IG9jY3VycmVuY2UgdGltZS5cclxuICAgIHRoaXMudGV4dHMgPSBbXTtcclxuICAgIC8vIFNvcnRlZCBieSBzeW5jLnN0YXJ0IHRpbWUuXHJcbiAgICB0aGlzLnN5bmNTdGFydHMgPSBbXTtcclxuICAgIC8vIFNvcnRlZCBieSBzeW5jLmVuZCB0aW1lLlxyXG4gICAgdGhpcy5zeW5jRW5kcyA9IFtdO1xyXG4gICAgLy8gTm90IHNvcnRlZC5cclxuICAgIHRoaXMuYWN0aXZlU3luY3MgPSBbXTtcclxuICAgIC8vIFNvcnRlZCBieSBldmVudCBvY2N1cnJlbmNlIHRpbWUuXHJcbiAgICB0aGlzLmFjdGl2ZUV2ZW50cyA9IFtdO1xyXG4gICAgLy8gU29ydGVkIGJ5IGxpbmUuXHJcbiAgICB0aGlzLmVycm9ycyA9IFtdO1xyXG4gICAgdGhpcy5Mb2FkRmlsZSh0ZXh0LCB0cmlnZ2Vycywgc3R5bGVzKTtcclxuICAgIHRoaXMuU3RvcCgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBHZXRSZXBsYWNlZEhlbHBlcih0ZXh0OiBzdHJpbmcsIHJlcGxhY2VLZXk6ICdyZXBsYWNlU3luYycgfCAncmVwbGFjZVRleHQnLCByZXBsYWNlTGFuZzogTGFuZywgaXNHbG9iYWw6IGJvb2xlYW4pOiBzdHJpbmcge1xyXG4gICAgaWYgKCF0aGlzLnJlcGxhY2VtZW50cylcclxuICAgICAgcmV0dXJuIHRleHQ7XHJcblxyXG4gICAgZm9yIChjb25zdCByIG9mIHRoaXMucmVwbGFjZW1lbnRzKSB7XHJcbiAgICAgIGlmIChyLmxvY2FsZSAmJiByLmxvY2FsZSAhPT0gcmVwbGFjZUxhbmcpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIGNvbnN0IHJlcHMgPSByW3JlcGxhY2VLZXldO1xyXG4gICAgICBpZiAoIXJlcHMpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHJlcHMpKVxyXG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoUmVnZXhlcy5wYXJzZShrZXkpLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICAvLyBDb21tb24gUmVwbGFjZW1lbnRzXHJcbiAgICBjb25zdCByZXBsYWNlbWVudCA9IGNvbW1vblJlcGxhY2VtZW50W3JlcGxhY2VLZXldO1xyXG4gICAgaWYgKCFyZXBsYWNlbWVudClcclxuICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhyZXBsYWNlbWVudCkpIHtcclxuICAgICAgY29uc3QgcmVwbCA9IHZhbHVlW3JlcGxhY2VMYW5nXTtcclxuICAgICAgaWYgKCFyZXBsKVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICBjb25zdCByZWdleCA9IGlzR2xvYmFsID8gUmVnZXhlcy5wYXJzZUdsb2JhbChrZXkpIDogUmVnZXhlcy5wYXJzZShrZXkpO1xyXG4gICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHJlZ2V4LCByZXBsKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0ZXh0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBHZXRSZXBsYWNlZFRleHQodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmICghdGhpcy5yZXBsYWNlbWVudHMpXHJcbiAgICAgIHJldHVybiB0ZXh0O1xyXG5cclxuICAgIGNvbnN0IHJlcGxhY2VMYW5nID0gdGhpcy5vcHRpb25zLlRpbWVsaW5lTGFuZ3VhZ2UgfHwgdGhpcy5vcHRpb25zLlBhcnNlckxhbmd1YWdlIHx8ICdlbic7XHJcbiAgICBjb25zdCBpc0dsb2JhbCA9IGZhbHNlO1xyXG4gICAgcmV0dXJuIHRoaXMuR2V0UmVwbGFjZWRIZWxwZXIodGV4dCwgJ3JlcGxhY2VUZXh0JywgcmVwbGFjZUxhbmcsIGlzR2xvYmFsKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgR2V0UmVwbGFjZWRTeW5jKHN5bmM6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBpZiAoIXRoaXMucmVwbGFjZW1lbnRzKVxyXG4gICAgICByZXR1cm4gc3luYztcclxuXHJcbiAgICBjb25zdCByZXBsYWNlTGFuZyA9IHRoaXMub3B0aW9ucy5QYXJzZXJMYW5ndWFnZSB8fCAnZW4nO1xyXG4gICAgY29uc3QgaXNHbG9iYWwgPSB0cnVlO1xyXG4gICAgcmV0dXJuIHRoaXMuR2V0UmVwbGFjZWRIZWxwZXIoc3luYywgJ3JlcGxhY2VTeW5jJywgcmVwbGFjZUxhbmcsIGlzR2xvYmFsKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBHZXRNaXNzaW5nVHJhbnNsYXRpb25zVG9JZ25vcmUoKTogUmVnRXhwW10ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJy0tUmVzZXQtLScsXHJcbiAgICAgICctLXN5bmMtLScsXHJcbiAgICAgICdTdGFydCcsXHJcbiAgICAgICdeID8yMTonLFxyXG4gICAgICAnXihcXFxcKFxcXFw/XFxcXDx0aW1lc3RhbXBcXFxcPlxcXFxeXFxcXC5cXFxcezE0XFxcXH1cXFxcKSkgKDFCfDIxfDIzKTonLFxyXG4gICAgICAnXihcXFxcXlxcXFwuXFxcXHsxNFxcXFx9KT8gPygxQnwyMXwyMyk6JyxcclxuICAgICAgJ146OlxcXFx5e0FiaWxpdHlDb2RlfTokJyxcclxuICAgICAgJ15cXFxcLlxcXFwqJCcsXHJcbiAgICBdLm1hcCgoeCkgPT4gUmVnZXhlcy5wYXJzZSh4KSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIExvYWRGaWxlKHRleHQ6IHN0cmluZywgdHJpZ2dlcnM6IExvb3NlVGltZWxpbmVUcmlnZ2VyW10sIHN0eWxlczogVGltZWxpbmVTdHlsZVtdKTogdm9pZCB7XHJcbiAgICB0aGlzLmV2ZW50cyA9IFtdO1xyXG4gICAgdGhpcy5zeW5jU3RhcnRzID0gW107XHJcbiAgICB0aGlzLnN5bmNFbmRzID0gW107XHJcblxyXG4gICAgbGV0IHVuaXF1ZWlkID0gMTtcclxuICAgIGNvbnN0IHRleHRzOiB7IFtpZDogc3RyaW5nXTogUGFyc2VkVGV4dFtdIH0gPSB7fTtcclxuICAgIGNvbnN0IHJlZ2V4ZXMgPSB7XHJcbiAgICAgIGNvbW1lbnQ6IC9eXFxzKiMvLFxyXG4gICAgICBjb21tZW50TGluZTogLyMuKiQvLFxyXG4gICAgICBkdXJhdGlvbkNvbW1hbmQ6IC8oPzpbXiNdKj9cXHMpPyg/PHRleHQ+ZHVyYXRpb25cXHMrKD88c2Vjb25kcz5bMC05XSsoPzpcXC5bMC05XSspPykpKFxccy4qKT8kLyxcclxuICAgICAgaWdub3JlOiAvXmhpZGVhbGxcXHMrXFxcIig/PGlkPlteXCJdKylcXFwiJC8sXHJcbiAgICAgIGp1bXBDb21tYW5kOiAvKD86W14jXSo/XFxzKT8oPzx0ZXh0Pmp1bXBcXHMrKD88c2Vjb25kcz5bMC05XSsoPzpcXC5bMC05XSspPykpKD86XFxzLiopPyQvLFxyXG4gICAgICBsaW5lOiAvXig/PHRleHQ+KD88dGltZT5bMC05XSsoPzpcXC5bMC05XSspPylcXHMrXCIoPzxuYW1lPi4qPylcIikoXFxzKyguKikpPy8sXHJcbiAgICAgIHBvcHVwVGV4dDogL14oPzx0eXBlPmluZm98YWxlcnR8YWxhcm0pdGV4dFxccytcXFwiKD88aWQ+W15cIl0rKVxcXCJcXHMrYmVmb3JlXFxzKyg/PGJlZm9yZVNlY29uZHM+LT9bMC05XSsoPzpcXC5bMC05XSspPykoPzpcXHMrXFxcIig/PHRleHQ+W15cIl0rKVxcXCIpPyQvLFxyXG4gICAgICBzb3VuZEFsZXJ0OiAvXmRlZmluZVxccytzb3VuZGFsZXJ0XFxzK1wiW15cIl0qXCJcXHMrXCJbXlwiXSpcIiQvLFxyXG4gICAgICBzcGVha2VyOiAvZGVmaW5lIHNwZWFrZXIgXCJbXlwiXSpcIihcXHMrXCJbXlwiXSpcIik/XFxzKygtP1swLTldKyg/OlxcLlswLTldKyk/KVxccysoLT9bMC05XSsoPzpcXC5bMC05XSspPykvLFxyXG4gICAgICBzeW5jQ29tbWFuZDogLyg/OlteI10qP1xccyk/KD88dGV4dD5zeW5jXFxzKlxcLyg/PHJlZ2V4Pi4qKVxcLykoPzxhcmdzPlxccy4qKT8kLyxcclxuICAgICAgdHRzOiAvXmFsZXJ0YWxsXFxzK1wiKD88aWQ+W15cIl0qKVwiXFxzK2JlZm9yZVxccysoPzxiZWZvcmVTZWNvbmRzPi0/WzAtOV0rKD86XFwuWzAtOV0rKT8pXFxzKyg/PGNvbW1hbmQ+c291bmR8c3BlYWtcXHMrXCJbXlwiXSpcIilcXHMrXCIoPzx0ZXh0PlteXCJdKilcIiQvLFxyXG4gICAgICB3aW5kb3dDb21tYW5kOiAvKD86W14jXSo/XFxzKT8oPzx0ZXh0PndpbmRvd1xccysoPzooPzxzdGFydD5bMC05XSsoPzpcXC5bMC05XSspPyksKT8oPzxlbmQ+WzAtOV0rKD86XFwuWzAtOV0rKT8pKSg/Olxccy4qKT8kLyxcclxuICAgIH07XHJcblxyXG4gICAgLy8gTWFrZSBhbGwgcmVnZXhlcyBjYXNlIGluc2Vuc2l0aXZlLCBhbmQgcGFyc2UgYW55IHNwZWNpYWwgXFx5e30gZ3JvdXBzLlxyXG4gICAgZm9yIChjb25zdCB0cmlnZ2VyIG9mIHRyaWdnZXJzID8/IFtdKSB7XHJcbiAgICAgIGlmICh0cmlnZ2VyLnJlZ2V4KVxyXG4gICAgICAgIHRyaWdnZXIucmVnZXggPSBSZWdleGVzLnBhcnNlKHRyaWdnZXIucmVnZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGxpbmVzID0gdGV4dC5zcGxpdCgnXFxuJyk7XHJcbiAgICBsZXQgbGluZU51bWJlciA9IDA7XHJcbiAgICBmb3IgKGxldCBsaW5lIG9mIGxpbmVzKSB7XHJcbiAgICAgICsrbGluZU51bWJlcjtcclxuICAgICAgbGluZSA9IGxpbmUudHJpbSgpO1xyXG4gICAgICAvLyBEcm9wIGNvbW1lbnRzIGFuZCBlbXB0eSBsaW5lcy5cclxuICAgICAgaWYgKCFsaW5lIHx8IHJlZ2V4ZXMuY29tbWVudC50ZXN0KGxpbmUpKVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICBjb25zdCBvcmlnaW5hbExpbmUgPSBsaW5lO1xyXG5cclxuICAgICAgbGV0IG1hdGNoID0gcmVnZXhlcy5pZ25vcmUuZXhlYyhsaW5lKTtcclxuICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWydncm91cHMnXSkge1xyXG4gICAgICAgIGNvbnN0IGlnbm9yZSA9IG1hdGNoWydncm91cHMnXTtcclxuICAgICAgICBpZiAoaWdub3JlLmlkKVxyXG4gICAgICAgICAgdGhpcy5pZ25vcmVzW2lnbm9yZS5pZF0gPSB0cnVlO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBtYXRjaCA9IHJlZ2V4ZXMudHRzLmV4ZWMobGluZSk7XHJcbiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsnZ3JvdXBzJ10pIHtcclxuICAgICAgICBjb25zdCB0dHMgPSBtYXRjaFsnZ3JvdXBzJ107XHJcbiAgICAgICAgaWYgKCF0dHMuaWQgfHwgIXR0cy5iZWZvcmVTZWNvbmRzIHx8ICF0dHMuY29tbWFuZClcclxuICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgICAgICAvLyBUT0RPOiBTdXBwb3J0IGFsZXJ0IHNvdW5kcz9cclxuICAgICAgICBpZiAodHRzLmNvbW1hbmQgPT09ICdzb3VuZCcpXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBjb25zdCB0dHNJdGVtcyA9IHRleHRzW3R0cy5pZF0gfHwgW107XHJcbiAgICAgICAgdGV4dHNbdHRzLmlkXSA9IHR0c0l0ZW1zO1xyXG4gICAgICAgIHR0c0l0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogJ3R0cycsXHJcbiAgICAgICAgICBzZWNvbmRzQmVmb3JlOiBwYXJzZUZsb2F0KHR0cy5iZWZvcmVTZWNvbmRzKSxcclxuICAgICAgICAgIHRleHQ6IHR0cy50ZXh0ID8gdHRzLnRleHQgOiB0dHMuaWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgbWF0Y2ggPSByZWdleGVzLnNvdW5kQWxlcnQuZXhlYyhsaW5lKTtcclxuICAgICAgaWYgKG1hdGNoKVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICBtYXRjaCA9IHJlZ2V4ZXMuc3BlYWtlci5leGVjKGxpbmUpO1xyXG4gICAgICBpZiAobWF0Y2gpXHJcbiAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICBtYXRjaCA9IHJlZ2V4ZXMucG9wdXBUZXh0LmV4ZWMobGluZSk7XHJcbiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsnZ3JvdXBzJ10pIHtcclxuICAgICAgICBjb25zdCBwb3B1cFRleHQgPSBtYXRjaFsnZ3JvdXBzJ107XHJcbiAgICAgICAgaWYgKCFwb3B1cFRleHQudHlwZSB8fCAhcG9wdXBUZXh0LmlkIHx8ICFwb3B1cFRleHQuYmVmb3JlU2Vjb25kcylcclxuICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgICAgICBjb25zdCBwb3B1cFRleHRJdGVtcyA9IHRleHRzW3BvcHVwVGV4dC5pZF0gfHwgW107XHJcbiAgICAgICAgdGV4dHNbcG9wdXBUZXh0LmlkXSA9IHBvcHVwVGV4dEl0ZW1zO1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBwb3B1cFRleHQudHlwZTtcclxuICAgICAgICBpZiAodHlwZSAhPT0gJ2luZm8nICYmIHR5cGUgIT09ICdhbGVydCcgJiYgdHlwZSAhPT0gJ2FsYXJtJylcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIHBvcHVwVGV4dEl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgIHNlY29uZHNCZWZvcmU6IHBhcnNlRmxvYXQocG9wdXBUZXh0LmJlZm9yZVNlY29uZHMpLFxyXG4gICAgICAgICAgdGV4dDogcG9wdXBUZXh0LnRleHQgPyBwb3B1cFRleHQudGV4dCA6IHBvcHVwVGV4dC5pZCxcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICBtYXRjaCA9IHJlZ2V4ZXMubGluZS5leGVjKGxpbmUpO1xyXG4gICAgICBpZiAoIShtYXRjaCAmJiBtYXRjaFsnZ3JvdXBzJ10pKSB7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMucHVzaCh7XHJcbiAgICAgICAgICBsaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxyXG4gICAgICAgICAgbGluZTogb3JpZ2luYWxMaW5lLFxyXG4gICAgICAgICAgZXJyb3I6ICdJbnZhbGlkIGZvcm1hdCcsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1Vua25vd24gdGltZWxpbmU6ICcgKyBvcmlnaW5hbExpbmUpO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHBhcnNlZExpbmUgPSBtYXRjaFsnZ3JvdXBzJ107XHJcbiAgICAgIC8vIFRlY2huaWNhbGx5IHRoZSBuYW1lIGNhbiBiZSBlbXB0eVxyXG4gICAgICBpZiAoIXBhcnNlZExpbmUudGV4dCB8fCAhcGFyc2VkTGluZS50aW1lIHx8IHBhcnNlZExpbmUubmFtZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgICAgbGluZSA9IGxpbmUucmVwbGFjZShwYXJzZWRMaW5lLnRleHQsICcnKS50cmltKCk7XHJcbiAgICAgIC8vIFRoZXJlIGNhbiBiZSAjIGluIHRoZSBhYmlsaXR5IG5hbWUsIGJ1dCBwcm9iYWJseSBub3QgaW4gdGhlIHJlZ2V4LlxyXG4gICAgICBsaW5lID0gbGluZS5yZXBsYWNlKHJlZ2V4ZXMuY29tbWVudExpbmUsICcnKS50cmltKCk7XHJcblxyXG4gICAgICBjb25zdCBzZWNvbmRzID0gcGFyc2VGbG9hdChwYXJzZWRMaW5lLnRpbWUpO1xyXG4gICAgICBjb25zdCBlOiBFdmVudCA9IHtcclxuICAgICAgICBpZDogdW5pcXVlaWQrKyxcclxuICAgICAgICB0aW1lOiBzZWNvbmRzLFxyXG4gICAgICAgIC8vIFRoZSBvcmlnaW5hbCBhYmlsaXR5IG5hbWUgaW4gdGhlIHRpbWVsaW5lLiAgVXNlZCBmb3IgaGlkZWFsbCwgaW5mb3RleHQsIGV0Yy5cclxuICAgICAgICBuYW1lOiBwYXJzZWRMaW5lLm5hbWUsXHJcbiAgICAgICAgLy8gVGhlIHRleHQgdG8gZGlzcGxheS4gIE5vdCB1c2VkIGZvciBhbnkgbG9naWMuXHJcbiAgICAgICAgdGV4dDogdGhpcy5HZXRSZXBsYWNlZFRleHQocGFyc2VkTGluZS5uYW1lKSxcclxuICAgICAgICBhY3RpdmVUaW1lOiAwLFxyXG4gICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChsaW5lKSB7XHJcbiAgICAgICAgbGV0IGNvbW1hbmRNYXRjaCA9IHJlZ2V4ZXMuZHVyYXRpb25Db21tYW5kLmV4ZWMobGluZSk7XHJcbiAgICAgICAgaWYgKGNvbW1hbmRNYXRjaCAmJiBjb21tYW5kTWF0Y2hbJ2dyb3VwcyddKSB7XHJcbiAgICAgICAgICBjb25zdCBkdXJhdGlvbkNvbW1hbmQgPSBjb21tYW5kTWF0Y2hbJ2dyb3VwcyddO1xyXG4gICAgICAgICAgaWYgKCFkdXJhdGlvbkNvbW1hbmQudGV4dCB8fCAhZHVyYXRpb25Db21tYW5kLnNlY29uZHMpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoZHVyYXRpb25Db21tYW5kLnRleHQsICcnKS50cmltKCk7XHJcbiAgICAgICAgICBlLmR1cmF0aW9uID0gcGFyc2VGbG9hdChkdXJhdGlvbkNvbW1hbmQuc2Vjb25kcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb21tYW5kTWF0Y2ggPSByZWdleGVzLnN5bmNDb21tYW5kLmV4ZWMobGluZSk7XHJcbiAgICAgICAgaWYgKGNvbW1hbmRNYXRjaCAmJiBjb21tYW5kTWF0Y2hbJ2dyb3VwcyddKSB7XHJcbiAgICAgICAgICBjb25zdCBzeW5jQ29tbWFuZCA9IGNvbW1hbmRNYXRjaFsnZ3JvdXBzJ107XHJcbiAgICAgICAgICBpZiAoIXN5bmNDb21tYW5kLnRleHQgfHwgIXN5bmNDb21tYW5kLnJlZ2V4KVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcbiAgICAgICAgICBsaW5lID0gbGluZS5yZXBsYWNlKHN5bmNDb21tYW5kLnRleHQsICcnKS50cmltKCk7XHJcbiAgICAgICAgICBjb25zdCBzeW5jOiBTeW5jID0ge1xyXG4gICAgICAgICAgICBpZDogdW5pcXVlaWQsXHJcbiAgICAgICAgICAgIG9yaWdSZWdleFN0cjogc3luY0NvbW1hbmQucmVnZXgsXHJcbiAgICAgICAgICAgIHJlZ2V4OiBSZWdleGVzLnBhcnNlKHRoaXMuR2V0UmVwbGFjZWRTeW5jKHN5bmNDb21tYW5kLnJlZ2V4KSksXHJcbiAgICAgICAgICAgIHN0YXJ0OiBzZWNvbmRzIC0gMi41LFxyXG4gICAgICAgICAgICBlbmQ6IHNlY29uZHMgKyAyLjUsXHJcbiAgICAgICAgICAgIHRpbWU6IHNlY29uZHMsXHJcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgaWYgKHN5bmNDb21tYW5kLmFyZ3MpIHtcclxuICAgICAgICAgICAgbGV0IGFyZ01hdGNoID0gcmVnZXhlcy53aW5kb3dDb21tYW5kLmV4ZWMoc3luY0NvbW1hbmQuYXJncyk7XHJcbiAgICAgICAgICAgIGlmIChhcmdNYXRjaCAmJiBhcmdNYXRjaFsnZ3JvdXBzJ10pIHtcclxuICAgICAgICAgICAgICBjb25zdCB3aW5kb3dDb21tYW5kID0gYXJnTWF0Y2hbJ2dyb3VwcyddO1xyXG4gICAgICAgICAgICAgIGlmICghd2luZG93Q29tbWFuZC50ZXh0IHx8ICF3aW5kb3dDb21tYW5kLmVuZClcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgICAgICAgICAgICBsaW5lID0gbGluZS5yZXBsYWNlKHdpbmRvd0NvbW1hbmQudGV4dCwgJycpLnRyaW0oKTtcclxuICAgICAgICAgICAgICBpZiAod2luZG93Q29tbWFuZC5zdGFydCkge1xyXG4gICAgICAgICAgICAgICAgc3luYy5zdGFydCA9IHNlY29uZHMgLSBwYXJzZUZsb2F0KHdpbmRvd0NvbW1hbmQuc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgc3luYy5lbmQgPSBzZWNvbmRzICsgcGFyc2VGbG9hdCh3aW5kb3dDb21tYW5kLmVuZCk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN5bmMuc3RhcnQgPSBzZWNvbmRzIC0gKHBhcnNlRmxvYXQod2luZG93Q29tbWFuZC5lbmQpIC8gMik7XHJcbiAgICAgICAgICAgICAgICBzeW5jLmVuZCA9IHNlY29uZHMgKyAocGFyc2VGbG9hdCh3aW5kb3dDb21tYW5kLmVuZCkgLyAyKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXJnTWF0Y2ggPSByZWdleGVzLmp1bXBDb21tYW5kLmV4ZWMoc3luY0NvbW1hbmQuYXJncyk7XHJcbiAgICAgICAgICAgIGlmIChhcmdNYXRjaCAmJiBhcmdNYXRjaFsnZ3JvdXBzJ10pIHtcclxuICAgICAgICAgICAgICBjb25zdCBqdW1wQ29tbWFuZCA9IGFyZ01hdGNoWydncm91cHMnXTtcclxuICAgICAgICAgICAgICBpZiAoIWp1bXBDb21tYW5kLnRleHQgfHwgIWp1bXBDb21tYW5kLnNlY29uZHMpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcbiAgICAgICAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZShqdW1wQ29tbWFuZC50ZXh0LCAnJykudHJpbSgpO1xyXG4gICAgICAgICAgICAgIHN5bmMuanVtcCA9IHBhcnNlRmxvYXQoanVtcENvbW1hbmQuc2Vjb25kcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuc3luY1N0YXJ0cy5wdXNoKHN5bmMpO1xyXG4gICAgICAgICAgdGhpcy5zeW5jRW5kcy5wdXNoKHN5bmMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvLyBJZiB0aGVyZSdzIHRleHQgbGVmdCB0aGF0IGlzbid0IGEgY29tbWVudCB0aGVuIHdlIGRpZG4ndCBwYXJzZSB0aGF0IHRleHQgc28gcmVwb3J0IGl0LlxyXG4gICAgICBpZiAobGluZSAmJiAhcmVnZXhlcy5jb21tZW50LmV4ZWMobGluZSkpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgVW5rbm93biBjb250ZW50ICcke2xpbmV9JyBpbiB0aW1lbGluZTogJHtvcmlnaW5hbExpbmV9YCk7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMucHVzaCh7XHJcbiAgICAgICAgICBsaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxyXG4gICAgICAgICAgbGluZTogb3JpZ2luYWxMaW5lLFxyXG4gICAgICAgICAgZXJyb3I6ICdFeHRyYSB0ZXh0JyxcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmV2ZW50cy5wdXNoKGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmFsaWRhdGUgdGhhdCBhbGwgdGltZWxpbmUgdHJpZ2dlcnMgbWF0Y2ggc29tZXRoaW5nLlxyXG4gICAgZm9yIChjb25zdCB0cmlnZ2VyIG9mIHRyaWdnZXJzID8/IFtdKSB7XHJcbiAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIHRoaXMuZXZlbnRzKSB7XHJcbiAgICAgICAgaWYgKHRyaWdnZXIucmVnZXggJiYgdHJpZ2dlci5yZWdleC50ZXN0KGV2ZW50Lm5hbWUpKSB7XHJcbiAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFmb3VuZCkge1xyXG4gICAgICAgIGNvbnN0IHRleHQgPSBgTm8gbWF0Y2ggZm9yIHRpbWVsaW5lIHRyaWdnZXIgJHt0cmlnZ2VyLnJlZ2V4Py5zb3VyY2UgPz8gJyd9IGluICR7dHJpZ2dlci5pZCA/PyAnJ31gO1xyXG4gICAgICAgIHRoaXMuZXJyb3JzLnB1c2goeyBlcnJvcjogdGV4dCB9KTtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGAqKiogRVJST1I6ICR7dGV4dH1gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLmV2ZW50cykge1xyXG4gICAgICBmb3IgKGNvbnN0IG1hdGNoZWRUZXh0RXZlbnQgb2YgdGV4dHNbZS5uYW1lXSA/PyBbXSkge1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBtYXRjaGVkVGV4dEV2ZW50LnR5cGU7XHJcbiAgICAgICAgaWYgKHR5cGUgIT09ICdpbmZvJyAmJiB0eXBlICE9PSAnYWxlcnQnICYmIHR5cGUgIT09ICdhbGFybScpXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB0aGlzLnRleHRzLnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgIHRpbWU6IGUudGltZSAtIChtYXRjaGVkVGV4dEV2ZW50LnNlY29uZHNCZWZvcmUgfHwgMCksXHJcbiAgICAgICAgICB0ZXh0OiBtYXRjaGVkVGV4dEV2ZW50LnRleHQgPz8gJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJhdGhlciB0aGFuIG1hdGNoaW5nIHRyaWdnZXJzIGF0IHJ1biB0aW1lLCBwcmUtbWF0Y2ggYWxsIHRoZSB0cmlnZ2Vyc1xyXG4gICAgICAvLyBhZ2FpbnN0IHRpbWVsaW5lIHRleHQgYW5kIGluc2VydCB0aGVtIGFzIHRleHQgZXZlbnRzIHRvIHJ1bi5cclxuICAgICAgZm9yIChjb25zdCB0cmlnZ2VyIG9mIHRyaWdnZXJzID8/IFtdKSB7XHJcbiAgICAgICAgY29uc3QgbSA9IHRyaWdnZXIucmVnZXg/LmV4ZWMoZS5uYW1lKTtcclxuICAgICAgICBpZiAoIW0pXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogYmVmb3JlU2Vjb25kcyBzaG91bGQgc3VwcG9ydCBiZWluZyBhIGZ1bmN0aW9uLlxyXG4gICAgICAgIGNvbnN0IGF1dG9Db25maWcgPSB0cmlnZ2VyLmlkICYmIHRoaXMucGVyVHJpZ2dlckF1dG9Db25maWdbdHJpZ2dlci5pZF0gfHwge307XHJcbiAgICAgICAgY29uc3QgYmVmb3JlU2Vjb25kcyA9IGF1dG9Db25maWdbJ0JlZm9yZVNlY29uZHMnXSA/PyB0cmlnZ2VyLmJlZm9yZVNlY29uZHM7XHJcblxyXG4gICAgICAgIHRoaXMudGV4dHMucHVzaCh7XHJcbiAgICAgICAgICB0eXBlOiAndHJpZ2dlcicsXHJcbiAgICAgICAgICB0aW1lOiBlLnRpbWUgLSAoYmVmb3JlU2Vjb25kcyB8fCAwKSxcclxuICAgICAgICAgIHRyaWdnZXI6IHRyaWdnZXIsXHJcbiAgICAgICAgICBtYXRjaGVzOiBtLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IHN0eWxlIG9mIHN0eWxlcyA/PyBbXSkge1xyXG4gICAgICAgIGlmICghc3R5bGUucmVnZXgudGVzdChlLm5hbWUpKVxyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgZS5zdHlsZSA9IHN0eWxlLnN0eWxlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU29ydCBieSB0aW1lLCBidXQgd2hlbiB0aGUgdGltZSBpcyB0aGUgc2FtZSwgc29ydCBieSBmaWxlIG9yZGVyLlxyXG4gICAgLy8gVGhlbiBhc3NpZ24gYSBzb3J0S2V5IHRvIGVhY2ggZXZlbnQgc28gdGhhdCB3ZSBjYW4gbWFpbnRhaW4gdGhhdCBvcmRlci5cclxuICAgIHRoaXMuZXZlbnRzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgaWYgKGEudGltZSA9PT0gYi50aW1lKVxyXG4gICAgICAgIHJldHVybiBhLmlkIC0gYi5pZDtcclxuICAgICAgcmV0dXJuIGEudGltZSAtIGIudGltZTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5ldmVudHMuZm9yRWFjaCgoZXZlbnQsIGlkeCkgPT4gZXZlbnQuc29ydEtleSA9IGlkeCk7XHJcblxyXG4gICAgdGhpcy50ZXh0cy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIHJldHVybiBhLnRpbWUgLSBiLnRpbWU7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuc3luY1N0YXJ0cy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIHJldHVybiBhLnN0YXJ0IC0gYi5zdGFydDtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5zeW5jRW5kcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIHJldHVybiBhLmVuZCAtIGIuZW5kO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgU3RvcCgpOiB2b2lkIHtcclxuICAgIHRoaXMudGltZWJhc2UgPSAwO1xyXG5cclxuICAgIHRoaXMubmV4dEV2ZW50ID0gMDtcclxuICAgIHRoaXMubmV4dFRleHQgPSAwO1xyXG4gICAgdGhpcy5uZXh0U3luY1N0YXJ0ID0gMDtcclxuICAgIHRoaXMubmV4dFN5bmNFbmQgPSAwO1xyXG5cclxuICAgIGNvbnN0IGZpZ2h0Tm93ID0gMDtcclxuICAgIHRoaXMuX0FkdmFuY2VUaW1lVG8oZmlnaHROb3cpO1xyXG4gICAgdGhpcy5fQ29sbGVjdEFjdGl2ZVN5bmNzKGZpZ2h0Tm93KTtcclxuXHJcbiAgICB0aGlzLl9DbGVhclRpbWVycygpO1xyXG4gICAgdGhpcy5fQ2FuY2VsVXBkYXRlKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuc3luY1RpbWVDYWxsYmFjaylcclxuICAgICAgdGhpcy5zeW5jVGltZUNhbGxiYWNrKGZpZ2h0Tm93LCBmYWxzZSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgU3luY1RvKGZpZ2h0Tm93OiBudW1iZXIsIGN1cnJlbnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8vIFRoaXMgcmVjb3JkcyB0aGUgYWN0dWFsIHRpbWUgd2hpY2ggYWxpZ25zIHdpdGggXCIwXCIgaW4gdGhlIHRpbWVsaW5lLlxyXG4gICAgY29uc3QgbmV3VGltZWJhc2UgPSBuZXcgRGF0ZShjdXJyZW50VGltZSAtIGZpZ2h0Tm93ICogMTAwMCkudmFsdWVPZigpO1xyXG4gICAgLy8gU2tpcCBzeW5jcyB0aGF0IGFyZSB0b28gY2xvc2UuICBNYW55IHN5bmNzIGhhcHBlbiBvbiBhYmlsaXRpZXMgdGhhdFxyXG4gICAgLy8gaGl0IDggdG8gMjQgcGVvcGxlLCBhbmQgc28gdGhpcyBpcyBhIGxvdCBvZiBjaHVybi5cclxuICAgIGlmIChNYXRoLmFicyhuZXdUaW1lYmFzZSAtIHRoaXMudGltZWJhc2UpIDw9IDIpXHJcbiAgICAgIHJldHVybjtcclxuICAgIHRoaXMudGltZWJhc2UgPSBuZXdUaW1lYmFzZTtcclxuXHJcbiAgICB0aGlzLm5leHRFdmVudCA9IDA7XHJcbiAgICB0aGlzLm5leHRUZXh0ID0gMDtcclxuICAgIHRoaXMubmV4dFN5bmNTdGFydCA9IDA7XHJcbiAgICB0aGlzLm5leHRTeW5jRW5kID0gMDtcclxuXHJcbiAgICAvLyBUaGlzIHdpbGwgc2tpcCB0ZXh0IGV2ZW50cyB3aXRob3V0IHJ1bm5pbmcgdGhlbS5cclxuICAgIHRoaXMuX0FkdmFuY2VUaW1lVG8oZmlnaHROb3cpO1xyXG4gICAgdGhpcy5fQ29sbGVjdEFjdGl2ZVN5bmNzKGZpZ2h0Tm93KTtcclxuXHJcbiAgICAvLyBDbGVhciBhbGwgdGltZXJzIGV4Y2VwdCBhbnkgc3ludGhldGljIGR1cmF0aW9uIGV2ZW50cy5cclxuICAgIC8vIFRoaXMgaXMgYmVjYXVzZSBpZiB0aGUgc3luYyBnb2VzIGV2ZW4gYSBoYWlyIGludG8gdGhlIGZ1dHVyZSwgdGhlblxyXG4gICAgLy8gdGhlIGR1cmF0aW9uIGVuZGluZyBldmVudCB3aWxsIGdldCBkcm9wcGVkIGhlcmUuXHJcblxyXG4gICAgLy8gRklYTUU6IHdlIGNvdWxkIGJlIHNtYXJ0ZXIgaGVyZSBhbmQga25vdyBhaGVhZCBvZiB0aW1lIHdoZXJlIGFsbCB0aGUgZHVyYXRpb25cclxuICAgIC8vIGV2ZW50cyBhcmUsIHNvIHRoYXQgd2UgY291bGQgc2tpcCBhaGVhZCBpbnRvIHRoZSBmdXR1cmUgd2hlcmUgYSBkdXJhdGlvblxyXG4gICAgLy8gZXZlbnQgaGFzIHN0YXJ0ZWQgYnV0IG5vdCBleHBpcmVkIGFuZCBoYXZlIHRoYXQgd29yayBwcm9wZXJseS5cclxuICAgIHRoaXMuX0FkZER1cmF0aW9uVGltZXJzKGZpZ2h0Tm93KTtcclxuICAgIHRoaXMuX0NsZWFyRXhjZXB0UnVubmluZ0R1cmF0aW9uVGltZXJzKGZpZ2h0Tm93KTtcclxuXHJcbiAgICB0aGlzLl9BZGRVcGNvbWluZ1RpbWVycyhmaWdodE5vdyk7XHJcbiAgICB0aGlzLl9DYW5jZWxVcGRhdGUoKTtcclxuICAgIHRoaXMuX1NjaGVkdWxlVXBkYXRlKGZpZ2h0Tm93KTtcclxuXHJcbiAgICBpZiAodGhpcy5zeW5jVGltZUNhbGxiYWNrKVxyXG4gICAgICB0aGlzLnN5bmNUaW1lQ2FsbGJhY2soZmlnaHROb3csIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfQ29sbGVjdEFjdGl2ZVN5bmNzKGZpZ2h0Tm93OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuYWN0aXZlU3luY3MgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSB0aGlzLm5leHRTeW5jRW5kOyBpIDwgdGhpcy5zeW5jRW5kcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBjb25zdCBzeW5jRW5kID0gdGhpcy5zeW5jRW5kc1tpXTtcclxuICAgICAgaWYgKHN5bmNFbmQgJiYgc3luY0VuZC5zdGFydCA8PSBmaWdodE5vdylcclxuICAgICAgICB0aGlzLmFjdGl2ZVN5bmNzLnB1c2goc3luY0VuZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgT25Mb2dMaW5lKGxpbmU6IHN0cmluZywgY3VycmVudFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgZm9yIChjb25zdCBzeW5jIG9mIHRoaXMuYWN0aXZlU3luY3MpIHtcclxuICAgICAgaWYgKGxpbmUuc2VhcmNoKHN5bmMucmVnZXgpID49IDApIHtcclxuICAgICAgICBpZiAoJ2p1bXAnIGluIHN5bmMpIHtcclxuICAgICAgICAgIGlmICghc3luYy5qdW1wKVxyXG4gICAgICAgICAgICB0aGlzLlN0b3AoKTtcclxuICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5TeW5jVG8oc3luYy5qdW1wLCBjdXJyZW50VGltZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuU3luY1RvKHN5bmMudGltZSwgY3VycmVudFRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfQWR2YW5jZVRpbWVUbyhmaWdodE5vdzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBsZXQgZXZlbnQgPSB0aGlzLmV2ZW50c1t0aGlzLm5leHRFdmVudF07XHJcbiAgICB3aGlsZSAodGhpcy5uZXh0RXZlbnQgPCB0aGlzLmV2ZW50cy5sZW5ndGggJiYgZXZlbnQgJiYgZXZlbnQudGltZSA8PSBmaWdodE5vdylcclxuICAgICAgZXZlbnQgPSB0aGlzLmV2ZW50c1srK3RoaXMubmV4dEV2ZW50XTtcclxuICAgIGxldCB0ZXh0ID0gdGhpcy50ZXh0c1t0aGlzLm5leHRUZXh0XTtcclxuICAgIHdoaWxlICh0aGlzLm5leHRUZXh0IDwgdGhpcy50ZXh0cy5sZW5ndGggJiYgdGV4dCAmJiB0ZXh0LnRpbWUgPD0gZmlnaHROb3cpXHJcbiAgICAgIHRleHQgPSB0aGlzLnRleHRzWysrdGhpcy5uZXh0VGV4dF07XHJcbiAgICBsZXQgc3luY1N0YXJ0ID0gdGhpcy5zeW5jU3RhcnRzW3RoaXMubmV4dFN5bmNTdGFydF07XHJcbiAgICB3aGlsZSAodGhpcy5uZXh0U3luY1N0YXJ0IDwgdGhpcy5zeW5jU3RhcnRzLmxlbmd0aCAmJiBzeW5jU3RhcnQgJiYgc3luY1N0YXJ0LnN0YXJ0IDw9IGZpZ2h0Tm93KVxyXG4gICAgICBzeW5jU3RhcnQgPSB0aGlzLnN5bmNTdGFydHNbKyt0aGlzLm5leHRTeW5jU3RhcnRdO1xyXG4gICAgbGV0IHN5bmNFbmQgPSB0aGlzLnN5bmNFbmRzW3RoaXMubmV4dFN5bmNFbmRdO1xyXG4gICAgd2hpbGUgKHRoaXMubmV4dFN5bmNFbmQgPCB0aGlzLnN5bmNFbmRzLmxlbmd0aCAmJiBzeW5jRW5kICYmIHN5bmNFbmQuZW5kIDw9IGZpZ2h0Tm93KVxyXG4gICAgICBzeW5jRW5kID0gdGhpcy5zeW5jRW5kc1srK3RoaXMubmV4dFN5bmNFbmRdO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfQ2xlYXJUaW1lcnMoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5yZW1vdmVUaW1lckNhbGxiYWNrKSB7XHJcbiAgICAgIGZvciAoY29uc3QgYWN0aXZlRXZlbnQgb2YgdGhpcy5hY3RpdmVFdmVudHMpXHJcbiAgICAgICAgdGhpcy5yZW1vdmVUaW1lckNhbGxiYWNrKGFjdGl2ZUV2ZW50LCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmFjdGl2ZUV2ZW50cyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfQ2xlYXJFeGNlcHRSdW5uaW5nRHVyYXRpb25UaW1lcnMoZmlnaHROb3c6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc3QgZHVyYXRpb25FdmVudHMgPSBbXTtcclxuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgdGhpcy5hY3RpdmVFdmVudHMpIHtcclxuICAgICAgaWYgKGV2ZW50LmlzRHVyICYmIGV2ZW50LnRpbWUgPiBmaWdodE5vdykge1xyXG4gICAgICAgIGR1cmF0aW9uRXZlbnRzLnB1c2goZXZlbnQpO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLnJlbW92ZVRpbWVyQ2FsbGJhY2spXHJcbiAgICAgICAgdGhpcy5yZW1vdmVUaW1lckNhbGxiYWNrKGV2ZW50LCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5hY3RpdmVFdmVudHMgPSBkdXJhdGlvbkV2ZW50cztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX1JlbW92ZUV4cGlyZWRUaW1lcnMoZmlnaHROb3c6IG51bWJlcik6IHZvaWQge1xyXG4gICAgbGV0IGFjdGl2ZUV2ZW50ID0gdGhpcy5hY3RpdmVFdmVudHNbMF07XHJcbiAgICB3aGlsZSAodGhpcy5hY3RpdmVFdmVudHMubGVuZ3RoICYmIGFjdGl2ZUV2ZW50ICYmIGFjdGl2ZUV2ZW50LnRpbWUgPD0gZmlnaHROb3cpIHtcclxuICAgICAgaWYgKHRoaXMucmVtb3ZlVGltZXJDYWxsYmFjaylcclxuICAgICAgICB0aGlzLnJlbW92ZVRpbWVyQ2FsbGJhY2soYWN0aXZlRXZlbnQsIHRydWUpO1xyXG4gICAgICB0aGlzLmFjdGl2ZUV2ZW50cy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgIGFjdGl2ZUV2ZW50ID0gdGhpcy5hY3RpdmVFdmVudHNbMF07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9BZGREdXJhdGlvblRpbWVycyhmaWdodE5vdzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBldmVudHMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hY3RpdmVFdmVudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgZSA9IHRoaXMuYWN0aXZlRXZlbnRzW2ldO1xyXG4gICAgICBpZiAoZSAmJiBlLnRpbWUgPD0gZmlnaHROb3cgJiYgZS5kdXJhdGlvbikge1xyXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uRXZlbnQ6IEV2ZW50ID0ge1xyXG4gICAgICAgICAgaWQ6IGUuaWQsXHJcbiAgICAgICAgICB0aW1lOiBlLnRpbWUgKyBlLmR1cmF0aW9uLFxyXG4gICAgICAgICAgc29ydEtleTogZS5zb3J0S2V5LFxyXG4gICAgICAgICAgbmFtZTogZS5uYW1lLFxyXG4gICAgICAgICAgdGV4dDogYCR7dGhpcy5hY3RpdmVUZXh0fSAke2UudGV4dH1gLFxyXG4gICAgICAgICAgaXNEdXI6IHRydWUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBldmVudHMucHVzaChkdXJhdGlvbkV2ZW50KTtcclxuICAgICAgICB0aGlzLmFjdGl2ZUV2ZW50cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgaWYgKHRoaXMuYWRkVGltZXJDYWxsYmFjaylcclxuICAgICAgICAgIHRoaXMuYWRkVGltZXJDYWxsYmFjayhmaWdodE5vdywgZHVyYXRpb25FdmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgLS1pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoZXZlbnRzLmxlbmd0aClcclxuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5hY3RpdmVFdmVudHMsIGV2ZW50cyk7XHJcbiAgICB0aGlzLmFjdGl2ZUV2ZW50cy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIHJldHVybiBhLnRpbWUgLSBiLnRpbWU7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX0FkZFVwY29taW5nVGltZXJzKGZpZ2h0Tm93OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHdoaWxlICh0aGlzLm5leHRFdmVudCA8IHRoaXMuZXZlbnRzLmxlbmd0aCAmJlxyXG4gICAgICAgIHRoaXMuYWN0aXZlRXZlbnRzLmxlbmd0aCA8IHRoaXMub3B0aW9ucy5NYXhOdW1iZXJPZlRpbWVyQmFycykge1xyXG4gICAgICBjb25zdCBlID0gdGhpcy5ldmVudHNbdGhpcy5uZXh0RXZlbnRdO1xyXG4gICAgICBpZiAoIWUpXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGlmIChlLnRpbWUgLSBmaWdodE5vdyA+IHRoaXMub3B0aW9ucy5TaG93VGltZXJCYXJzQXRTZWNvbmRzKVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBpZiAoZmlnaHROb3cgPCBlLnRpbWUgJiYgIShlLm5hbWUgaW4gdGhpcy5pZ25vcmVzKSkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlRXZlbnRzLnB1c2goZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuYWRkVGltZXJDYWxsYmFjaylcclxuICAgICAgICAgIHRoaXMuYWRkVGltZXJDYWxsYmFjayhmaWdodE5vdywgZSwgZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICAgICsrdGhpcy5uZXh0RXZlbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9BZGRQYXNzZWRUZXh0cyhmaWdodE5vdzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB3aGlsZSAodGhpcy5uZXh0VGV4dCA8IHRoaXMudGV4dHMubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IHQgPSB0aGlzLnRleHRzW3RoaXMubmV4dFRleHRdO1xyXG4gICAgICBpZiAoIXQpXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGlmICh0LnRpbWUgPiBmaWdodE5vdylcclxuICAgICAgICBicmVhaztcclxuICAgICAgaWYgKHQudHlwZSA9PT0gJ2luZm8nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0luZm9UZXh0Q2FsbGJhY2spXHJcbiAgICAgICAgICB0aGlzLnNob3dJbmZvVGV4dENhbGxiYWNrKHQudGV4dCwgdGhpcy50aW1lYmFzZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodC50eXBlID09PSAnYWxlcnQnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0FsZXJ0VGV4dENhbGxiYWNrKVxyXG4gICAgICAgICAgdGhpcy5zaG93QWxlcnRUZXh0Q2FsbGJhY2sodC50ZXh0LCB0aGlzLnRpbWViYXNlKTtcclxuICAgICAgfSBlbHNlIGlmICh0LnR5cGUgPT09ICdhbGFybScpIHtcclxuICAgICAgICBpZiAodGhpcy5zaG93QWxhcm1UZXh0Q2FsbGJhY2spXHJcbiAgICAgICAgICB0aGlzLnNob3dBbGFybVRleHRDYWxsYmFjayh0LnRleHQsIHRoaXMudGltZWJhc2UpO1xyXG4gICAgICB9IGVsc2UgaWYgKHQudHlwZSA9PT0gJ3R0cycpIHtcclxuICAgICAgICBpZiAodGhpcy5zcGVha1RUU0NhbGxiYWNrKVxyXG4gICAgICAgICAgdGhpcy5zcGVha1RUU0NhbGxiYWNrKHQudGV4dCwgdGhpcy50aW1lYmFzZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodC50eXBlID09PSAndHJpZ2dlcicpIHtcclxuICAgICAgICBpZiAodGhpcy50cmlnZ2VyQ2FsbGJhY2spXHJcbiAgICAgICAgICB0aGlzLnRyaWdnZXJDYWxsYmFjayh0LnRyaWdnZXIsIHQubWF0Y2hlcywgdGhpcy50aW1lYmFzZSk7XHJcbiAgICAgIH1cclxuICAgICAgKyt0aGlzLm5leHRUZXh0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfQ2FuY2VsVXBkYXRlKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMudXBkYXRlVGltZXIpIHtcclxuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnVwZGF0ZVRpbWVyKTtcclxuICAgICAgdGhpcy51cGRhdGVUaW1lciA9IDA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgX1NjaGVkdWxlVXBkYXRlKGZpZ2h0Tm93OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnNvbGUuYXNzZXJ0KHRoaXMudGltZWJhc2UsICdfU2NoZWR1bGVVcGRhdGUgY2FsbGVkIHdoaWxlIHN0b3BwZWQnKTtcclxuXHJcbiAgICBsZXQgbmV4dEV2ZW50U3RhcnRpbmcgPSBrQmlnO1xyXG4gICAgbGV0IG5leHRUZXh0T2NjdXJzID0ga0JpZztcclxuICAgIGxldCBuZXh0RXZlbnRFbmRpbmcgPSBrQmlnO1xyXG4gICAgbGV0IG5leHRTeW5jU3RhcnRpbmcgPSBrQmlnO1xyXG4gICAgbGV0IG5leHRTeW5jRW5kaW5nID0ga0JpZztcclxuXHJcbiAgICBpZiAodGhpcy5uZXh0RXZlbnQgPCB0aGlzLmV2ZW50cy5sZW5ndGgpIHtcclxuICAgICAgY29uc3QgbmV4dEV2ZW50ID0gdGhpcy5ldmVudHNbdGhpcy5uZXh0RXZlbnRdO1xyXG4gICAgICBpZiAobmV4dEV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgbmV4dEV2ZW50RW5kc0F0ID0gbmV4dEV2ZW50LnRpbWU7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQobmV4dEV2ZW50U3RhcnRpbmcgPiBmaWdodE5vdywgJ25leHRFdmVudCB3YXNuXFwndCB1cGRhdGVkIGJlZm9yZSBjYWxsaW5nIF9TY2hlZHVsZVVwZGF0ZScpO1xyXG4gICAgICAgIC8vIFRoZXJlIG1pZ2h0IGJlIG1vcmUgZXZlbnRzIHRoYW4gd2UgY2FuIHNob3csIHNvIHRoZSBuZXh0IGV2ZW50IG1pZ2h0IGJlIGluXHJcbiAgICAgICAgLy8gdGhlIHBhc3QuIElmIHRoYXQgaGFwcGVucywgdGhlbiBpZ25vcmUgaXQsIGFzIHdlIGNhbid0IHVzZSB0aGF0IGZvciBvdXIgdGltZXIuXHJcbiAgICAgICAgY29uc3Qgc2hvd05leHRFdmVudEF0ID0gbmV4dEV2ZW50RW5kc0F0IC0gdGhpcy5vcHRpb25zLlNob3dUaW1lckJhcnNBdFNlY29uZHM7XHJcbiAgICAgICAgaWYgKHNob3dOZXh0RXZlbnRBdCA+IGZpZ2h0Tm93KVxyXG4gICAgICAgICAgbmV4dEV2ZW50U3RhcnRpbmcgPSBzaG93TmV4dEV2ZW50QXQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0aGlzLm5leHRUZXh0IDwgdGhpcy50ZXh0cy5sZW5ndGgpIHtcclxuICAgICAgY29uc3QgbmV4dFRleHQgPSB0aGlzLnRleHRzW3RoaXMubmV4dFRleHRdO1xyXG4gICAgICBpZiAobmV4dFRleHQpIHtcclxuICAgICAgICBuZXh0VGV4dE9jY3VycyA9IG5leHRUZXh0LnRpbWU7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQobmV4dFRleHRPY2N1cnMgPiBmaWdodE5vdywgJ25leHRUZXh0IHdhc25cXCd0IHVwZGF0ZWQgYmVmb3JlIGNhbGxpbmcgX1NjaGVkdWxlVXBkYXRlJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0aGlzLmFjdGl2ZUV2ZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IGFjdGl2ZUV2ZW50ID0gdGhpcy5hY3RpdmVFdmVudHNbMF07XHJcbiAgICAgIGlmIChhY3RpdmVFdmVudCkge1xyXG4gICAgICAgIG5leHRFdmVudEVuZGluZyA9IGFjdGl2ZUV2ZW50LnRpbWU7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQobmV4dEV2ZW50RW5kaW5nID4gZmlnaHROb3csICdFeHBpcmVkIGFjdGl2ZUV2ZW50cyB3ZXJlblxcJ3QgcHJ1bmVkIGJlZm9yZSBjYWxsaW5nIF9TY2hlZHVsZVVwZGF0ZScpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5uZXh0U3luY1N0YXJ0IDwgdGhpcy5zeW5jU3RhcnRzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBzeW5jU3RhcnRzID0gdGhpcy5zeW5jU3RhcnRzW3RoaXMubmV4dFN5bmNTdGFydF07XHJcbiAgICAgIGlmIChzeW5jU3RhcnRzKSB7XHJcbiAgICAgICAgbmV4dFN5bmNTdGFydGluZyA9IHN5bmNTdGFydHMuc3RhcnQ7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQobmV4dFN5bmNTdGFydGluZyA+IGZpZ2h0Tm93LCAnbmV4dFN5bmNTdGFydCB3YXNuXFwndCB1cGRhdGVkIGJlZm9yZSBjYWxsaW5nIF9TY2hlZHVsZVVwZGF0ZScpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5uZXh0U3luY0VuZCA8IHRoaXMuc3luY0VuZHMubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IHN5bmNFbmRzID0gdGhpcy5zeW5jRW5kc1t0aGlzLm5leHRTeW5jRW5kXTtcclxuICAgICAgaWYgKHN5bmNFbmRzKSB7XHJcbiAgICAgICAgbmV4dFN5bmNFbmRpbmcgPSBzeW5jRW5kcy5lbmQ7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQobmV4dFN5bmNFbmRpbmcgPiBmaWdodE5vdywgJ25leHRTeW5jRW5kIHdhc25cXCd0IHVwZGF0ZWQgYmVmb3JlIGNhbGxpbmcgX1NjaGVkdWxlVXBkYXRlJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBuZXh0VGltZSA9IE1hdGgubWluKG5leHRFdmVudFN0YXJ0aW5nLCBuZXh0RXZlbnRFbmRpbmcsIG5leHRUZXh0T2NjdXJzLFxyXG4gICAgICAgIG5leHRTeW5jU3RhcnRpbmcsIG5leHRTeW5jRW5kaW5nKTtcclxuICAgIGlmIChuZXh0VGltZSAhPT0ga0JpZykge1xyXG4gICAgICBjb25zb2xlLmFzc2VydChuZXh0VGltZSA+IGZpZ2h0Tm93LCAnbmV4dFRpbWUgaXMgaW4gdGhlIHBhc3QnKTtcclxuICAgICAgdGhpcy51cGRhdGVUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KFxyXG4gICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9PblVwZGF0ZVRpbWVyKERhdGUubm93KCkpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIChuZXh0VGltZSAtIGZpZ2h0Tm93KSAqIDEwMDApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIF9PblVwZGF0ZVRpbWVyKGN1cnJlbnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnNvbGUuYXNzZXJ0KHRoaXMudGltZWJhc2UsICdfT25UaW1lclVwZGF0ZSBjYWxsZWQgd2hpbGUgc3RvcHBlZCcpO1xyXG5cclxuICAgIC8vIFRoaXMgaXMgdGhlIG51bWJlciBvZiBzZWNvbmRzIGludG8gdGhlIGZpZ2h0IChzdWJ0cmFjdGluZyBEYXRlcyBnaXZlcyBtaWxsaXNlY29uZHMpLlxyXG4gICAgY29uc3QgZmlnaHROb3cgPSAoY3VycmVudFRpbWUgLSB0aGlzLnRpbWViYXNlKSAvIDEwMDA7XHJcbiAgICAvLyBTZW5kIHRleHQgZXZlbnRzIG5vdyBvciB0aGV5J2QgYmUgc2tpcHBlZCBieSBfQWR2YW5jZVRpbWVUbygpLlxyXG4gICAgdGhpcy5fQWRkUGFzc2VkVGV4dHMoZmlnaHROb3cpO1xyXG4gICAgdGhpcy5fQWR2YW5jZVRpbWVUbyhmaWdodE5vdyk7XHJcbiAgICB0aGlzLl9Db2xsZWN0QWN0aXZlU3luY3MoZmlnaHROb3cpO1xyXG5cclxuICAgIHRoaXMuX0FkZER1cmF0aW9uVGltZXJzKGZpZ2h0Tm93KTtcclxuICAgIHRoaXMuX1JlbW92ZUV4cGlyZWRUaW1lcnMoZmlnaHROb3cpO1xyXG4gICAgdGhpcy5fQWRkVXBjb21pbmdUaW1lcnMoZmlnaHROb3cpO1xyXG4gICAgdGhpcy5fU2NoZWR1bGVVcGRhdGUoZmlnaHROb3cpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIFNldEFkZFRpbWVyKGM6IEFkZFRpbWVyQ2FsbGJhY2sgfCBudWxsKTogdm9pZCB7XHJcbiAgICB0aGlzLmFkZFRpbWVyQ2FsbGJhY2sgPSBjO1xyXG4gIH1cclxuICBwdWJsaWMgU2V0UmVtb3ZlVGltZXIoYzogKChlOiBFdmVudCwgZXhwaXJlZDogYm9vbGVhbiwgZm9yY2U/OiBib29sZWFuKSA9PiB2b2lkKSB8IG51bGwpOiB2b2lkIHtcclxuICAgIHRoaXMucmVtb3ZlVGltZXJDYWxsYmFjayA9IGM7XHJcbiAgfVxyXG4gIHB1YmxpYyBTZXRTaG93SW5mb1RleHQoYzogUG9wdXBUZXh0Q2FsbGJhY2sgfCBudWxsKTogdm9pZCB7XHJcbiAgICB0aGlzLnNob3dJbmZvVGV4dENhbGxiYWNrID0gYztcclxuICB9XHJcbiAgcHVibGljIFNldFNob3dBbGVydFRleHQoYzogUG9wdXBUZXh0Q2FsbGJhY2sgfCBudWxsKTogdm9pZCB7XHJcbiAgICB0aGlzLnNob3dBbGVydFRleHRDYWxsYmFjayA9IGM7XHJcbiAgfVxyXG4gIHB1YmxpYyBTZXRTaG93QWxhcm1UZXh0KGM6IFBvcHVwVGV4dENhbGxiYWNrIHwgbnVsbCk6IHZvaWQge1xyXG4gICAgdGhpcy5zaG93QWxhcm1UZXh0Q2FsbGJhY2sgPSBjO1xyXG4gIH1cclxuICBwdWJsaWMgU2V0U3BlYWtUVFMoYzogUG9wdXBUZXh0Q2FsbGJhY2sgfCBudWxsKTogdm9pZCB7XHJcbiAgICB0aGlzLnNwZWFrVFRTQ2FsbGJhY2sgPSBjO1xyXG4gIH1cclxuICBwdWJsaWMgU2V0VHJpZ2dlcihjOiBUcmlnZ2VyQ2FsbGJhY2sgfCBudWxsKTogdm9pZCB7XHJcbiAgICB0aGlzLnRyaWdnZXJDYWxsYmFjayA9IGM7XHJcbiAgfVxyXG4gIHB1YmxpYyBTZXRTeW5jVGltZShjOiAoKGZpZ2h0Tm93OiBudW1iZXIsIHJ1bm5pbmc6IGJvb2xlYW4pID0+IHZvaWQpIHwgbnVsbCk6IHZvaWQge1xyXG4gICAgdGhpcy5zeW5jVGltZUNhbGxiYWNrID0gYztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUaW1lbGluZVVJIHtcclxuICBwcml2YXRlIGluaXQ6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBsYW5nOiBMYW5nO1xyXG5cclxuICBwcml2YXRlIHJvb3Q6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBiYXJDb2xvcjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBiYXJFeHBpcmVzU29vbkNvbG9yOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIHRpbWVybGlzdDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgcHJpdmF0ZSBhY3RpdmVCYXJzOiB7IFthY3RpdmViYXI6IHN0cmluZ106IFRpbWVyQmFyIH0gPSB7fTtcclxuICBwcml2YXRlIGV4cGlyZVRpbWVyczogeyBbZXhwaXJlVGltZXI6IHN0cmluZ106IG51bWJlciB9ID0ge307XHJcblxyXG4gIHByaXZhdGUgZGVidWdFbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG4gIHByaXZhdGUgZGVidWdGaWdodFRpbWVyOiBUaW1lckJhciB8IG51bGwgPSBudWxsO1xyXG5cclxuICBwcm90ZWN0ZWQgdGltZWxpbmU6IFRpbWVsaW5lIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gIHByaXZhdGUgcG9wdXBUZXh0PzogUG9wdXBUZXh0R2VuZXJhdG9yO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgb3B0aW9uczogUmFpZGJvc3NPcHRpb25zKSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgdGhpcy5pbml0ID0gZmFsc2U7XHJcbiAgICB0aGlzLmxhbmcgPSB0aGlzLm9wdGlvbnMuVGltZWxpbmVMYW5ndWFnZSB8fCB0aGlzLm9wdGlvbnMuUGFyc2VyTGFuZ3VhZ2UgfHwgJ2VuJztcclxuICAgIHRoaXMuQWRkRGVidWdJbnN0cnVjdGlvbnMoKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBJbml0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuaW5pdClcclxuICAgICAgcmV0dXJuO1xyXG4gICAgdGhpcy5pbml0ID0gdHJ1ZTtcclxuXHJcbiAgICB0aGlzLnJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGltZWxpbmUtY29udGFpbmVyJyk7XHJcbiAgICBpZiAoIXRoaXMucm9vdClcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IGZpbmQgdGltZWxpbmUtY29udGFpbmVyJyk7XHJcblxyXG4gICAgdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoYGxhbmctJHt0aGlzLmxhbmd9YCk7XHJcbiAgICBpZiAodGhpcy5vcHRpb25zLlNraW4pXHJcbiAgICAgIHRoaXMucm9vdC5jbGFzc0xpc3QuYWRkKGBza2luLSR7dGhpcy5vcHRpb25zLlNraW59YCk7XHJcblxyXG4gICAgdGhpcy5iYXJDb2xvciA9IGNvbXB1dGVCYWNrZ3JvdW5kQ29sb3JGcm9tKHRoaXMucm9vdCwgJ3RpbWVsaW5lLWJhci1jb2xvcicpO1xyXG4gICAgdGhpcy5iYXJFeHBpcmVzU29vbkNvbG9yID0gY29tcHV0ZUJhY2tncm91bmRDb2xvckZyb20odGhpcy5yb290LCAndGltZWxpbmUtYmFyLWNvbG9yLnNvb24nKTtcclxuXHJcbiAgICB0aGlzLnRpbWVybGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lbGluZScpO1xyXG4gICAgaWYgKHRoaXMudGltZXJsaXN0KVxyXG4gICAgICB0aGlzLnRpbWVybGlzdC5zdHlsZS5ncmlkVGVtcGxhdGVSb3dzID0gYHJlcGVhdCgke3RoaXMub3B0aW9ucy5NYXhOdW1iZXJPZlRpbWVyQmFyc30sIG1pbi1jb250ZW50KWA7XHJcblxyXG4gICAgdGhpcy5hY3RpdmVCYXJzID0ge307XHJcbiAgICB0aGlzLmV4cGlyZVRpbWVycyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIEFkZERlYnVnSW5zdHJ1Y3Rpb25zKCk6IHZvaWQge1xyXG4gICAgY29uc3QgbGFuZyA9IHRoaXMubGFuZyBpbiB0aW1lbGluZUluc3RydWN0aW9ucyA/IHRoaXMubGFuZyA6ICdlbic7XHJcbiAgICBjb25zdCBpbnN0cnVjdGlvbnMgPSB0aW1lbGluZUluc3RydWN0aW9uc1tsYW5nXTtcclxuXHJcbiAgICAvLyBIZWxwZXIgZm9yIHBvc2l0aW9uaW5nL3Jlc2l6aW5nIHdoZW4gbG9ja2VkLlxyXG4gICAgY29uc3QgaGVscGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbWVsaW5lLXJlc2l6ZS1oZWxwZXInKTtcclxuICAgIGlmICghaGVscGVyKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBjb25zdCByb3dzID0gTWF0aC5tYXgoNiwgdGhpcy5vcHRpb25zLk1heE51bWJlck9mVGltZXJCYXJzKTtcclxuICAgIGhlbHBlci5zdHlsZS5ncmlkVGVtcGxhdGVSb3dzID0gYHJlcGVhdCgke3Jvd3N9LCAxZnIpYDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3B0aW9ucy5NYXhOdW1iZXJPZlRpbWVyQmFyczsgKytpKSB7XHJcbiAgICAgIGNvbnN0IGhlbHBlckJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBpZiAoIWhlbHBlckJhcilcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgaGVscGVyQmFyLmNsYXNzTGlzdC5hZGQoJ3RleHQnKTtcclxuICAgICAgaGVscGVyQmFyLmNsYXNzTGlzdC5hZGQoJ3Jlc2l6ZS1oZWxwZXItYmFyJyk7XHJcbiAgICAgIGhlbHBlckJhci5jbGFzc0xpc3QuYWRkKCd0aW1lbGluZS1iYXItY29sb3InKTtcclxuICAgICAgaWYgKGkgPCAxKVxyXG4gICAgICAgIGhlbHBlckJhci5jbGFzc0xpc3QuYWRkKCdzb29uJyk7XHJcbiAgICAgIGlmIChpIDwgaW5zdHJ1Y3Rpb25zLmxlbmd0aClcclxuICAgICAgICBoZWxwZXJCYXIuaW5uZXJUZXh0ID0gaW5zdHJ1Y3Rpb25zW2ldID8/ICcnO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgaGVscGVyQmFyLmlubmVyVGV4dCA9IGAke2kgKyAxfWA7XHJcbiAgICAgIGhlbHBlci5hcHBlbmRDaGlsZChoZWxwZXJCYXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZvciBzaW1wbGljaXR5IGluIGNvZGUsIGFsd2F5cyBtYWtlIGRlYnVnRWxlbWVudCB2YWxpZCxcclxuICAgIC8vIGhvd2V2ZXIgaXQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIHJhaWQgZW11bGF0b3IuXHJcbiAgICB0aGlzLmRlYnVnRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lbGluZS1kZWJ1ZycpO1xyXG4gICAgaWYgKCF0aGlzLmRlYnVnRWxlbWVudClcclxuICAgICAgdGhpcy5kZWJ1Z0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBTZXRQb3B1cFRleHRJbnRlcmZhY2UocG9wdXBUZXh0OiBQb3B1cFRleHRHZW5lcmF0b3IpOiB2b2lkIHtcclxuICAgIHRoaXMucG9wdXBUZXh0ID0gcG9wdXBUZXh0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIFNldFRpbWVsaW5lKHRpbWVsaW5lOiBUaW1lbGluZSB8IG51bGwpOiB2b2lkIHtcclxuICAgIHRoaXMuSW5pdCgpO1xyXG4gICAgaWYgKHRoaXMudGltZWxpbmUpIHtcclxuICAgICAgdGhpcy50aW1lbGluZS5TZXRBZGRUaW1lcihudWxsKTtcclxuICAgICAgdGhpcy50aW1lbGluZS5TZXRSZW1vdmVUaW1lcihudWxsKTtcclxuICAgICAgdGhpcy50aW1lbGluZS5TZXRTaG93SW5mb1RleHQobnVsbCk7XHJcbiAgICAgIHRoaXMudGltZWxpbmUuU2V0U2hvd0FsZXJ0VGV4dChudWxsKTtcclxuICAgICAgdGhpcy50aW1lbGluZS5TZXRTaG93QWxhcm1UZXh0KG51bGwpO1xyXG4gICAgICB0aGlzLnRpbWVsaW5lLlNldFNwZWFrVFRTKG51bGwpO1xyXG4gICAgICB0aGlzLnRpbWVsaW5lLlNldFRyaWdnZXIobnVsbCk7XHJcbiAgICAgIHRoaXMudGltZWxpbmUuU2V0U3luY1RpbWUobnVsbCk7XHJcbiAgICAgIHdoaWxlICh0aGlzLnRpbWVybGlzdCAmJiB0aGlzLnRpbWVybGlzdC5sYXN0Q2hpbGQpXHJcbiAgICAgICAgdGhpcy50aW1lcmxpc3QucmVtb3ZlQ2hpbGQodGhpcy50aW1lcmxpc3QubGFzdENoaWxkKTtcclxuICAgICAgaWYgKHRoaXMuZGVidWdFbGVtZW50KVxyXG4gICAgICAgIHRoaXMuZGVidWdFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICB0aGlzLmRlYnVnRmlnaHRUaW1lciA9IG51bGw7XHJcbiAgICAgIHRoaXMuYWN0aXZlQmFycyA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudGltZWxpbmUgPSB0aW1lbGluZTtcclxuICAgIGlmICh0aGlzLnRpbWVsaW5lKSB7XHJcbiAgICAgIHRoaXMudGltZWxpbmUuU2V0QWRkVGltZXIodGhpcy5PbkFkZFRpbWVyLmJpbmQodGhpcykpO1xyXG4gICAgICB0aGlzLnRpbWVsaW5lLlNldFJlbW92ZVRpbWVyKHRoaXMuT25SZW1vdmVUaW1lci5iaW5kKHRoaXMpKTtcclxuICAgICAgdGhpcy50aW1lbGluZS5TZXRTaG93SW5mb1RleHQodGhpcy5PblNob3dJbmZvVGV4dC5iaW5kKHRoaXMpKTtcclxuICAgICAgdGhpcy50aW1lbGluZS5TZXRTaG93QWxlcnRUZXh0KHRoaXMuT25TaG93QWxlcnRUZXh0LmJpbmQodGhpcykpO1xyXG4gICAgICB0aGlzLnRpbWVsaW5lLlNldFNob3dBbGFybVRleHQodGhpcy5PblNob3dBbGFybVRleHQuYmluZCh0aGlzKSk7XHJcbiAgICAgIHRoaXMudGltZWxpbmUuU2V0U3BlYWtUVFModGhpcy5PblNwZWFrVFRTLmJpbmQodGhpcykpO1xyXG4gICAgICB0aGlzLnRpbWVsaW5lLlNldFRyaWdnZXIodGhpcy5PblRyaWdnZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgIHRoaXMudGltZWxpbmUuU2V0U3luY1RpbWUodGhpcy5PblN5bmNUaW1lLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIE9uQWRkVGltZXIoZmlnaHROb3c6IG51bWJlciwgZTogRXZlbnQsIGNoYW5uZWxpbmc6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29uc3QgYmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGltZXItYmFyJyk7XHJcbiAgICBkaXYuY2xhc3NMaXN0LmFkZCgndGltZXItYmFyJyk7XHJcbiAgICBkaXYuYXBwZW5kQ2hpbGQoYmFyKTtcclxuICAgIGJhci5kdXJhdGlvbiA9IGAke2NoYW5uZWxpbmcgPyBlLnRpbWUgLSBmaWdodE5vdyA6IHRoaXMub3B0aW9ucy5TaG93VGltZXJCYXJzQXRTZWNvbmRzfWA7XHJcbiAgICBiYXIudmFsdWUgPSBgJHtlLnRpbWUgLSBmaWdodE5vd31gO1xyXG4gICAgYmFyLnJpZ2h0dGV4dCA9ICdyZW1haW4nO1xyXG4gICAgYmFyLmxlZnR0ZXh0ID0gZS50ZXh0O1xyXG4gICAgYmFyLnRvd2FyZCA9ICdyaWdodCc7XHJcbiAgICBiYXIuc3R5bGVmaWxsID0gIWNoYW5uZWxpbmcgPyAnZmlsbCcgOiAnZW1wdHknO1xyXG5cclxuICAgIGlmIChlLnN0eWxlKVxyXG4gICAgICBiYXIuYXBwbHlTdHlsZXMoZS5zdHlsZSk7XHJcblxyXG4gICAgaWYgKCFjaGFubmVsaW5nICYmIGUudGltZSAtIGZpZ2h0Tm93ID4gdGhpcy5vcHRpb25zLkJhckV4cGlyZXNTb29uU2Vjb25kcykge1xyXG4gICAgICBiYXIuZmcgPSB0aGlzLmJhckNvbG9yO1xyXG4gICAgICB3aW5kb3cuc2V0VGltZW91dChcclxuICAgICAgICAgIHRoaXMuT25UaW1lckV4cGlyZXNTb29uLmJpbmQodGhpcywgZS5pZCksXHJcbiAgICAgICAgICAoZS50aW1lIC0gZmlnaHROb3cgLSB0aGlzLm9wdGlvbnMuQmFyRXhwaXJlc1Nvb25TZWNvbmRzKSAqIDEwMDApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYmFyLmZnID0gdGhpcy5iYXJFeHBpcmVzU29vbkNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZGluZyBhIHRpbWVyIHdpdGggdGhlIHNhbWUgaWQgaW1tZWRpYXRlbHkgcmVtb3ZlcyB0aGUgcHJldmlvdXMuXHJcbiAgICBjb25zdCBhY3RpdmVCYXIgPSB0aGlzLmFjdGl2ZUJhcnNbZS5pZF07XHJcbiAgICBpZiAoYWN0aXZlQmFyKSB7XHJcbiAgICAgIGNvbnN0IGRpdiA9IGFjdGl2ZUJhci5wYXJlbnROb2RlO1xyXG4gICAgICBkaXY/LnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKGRpdik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGUuc29ydEtleSlcclxuICAgICAgZGl2LnN0eWxlLm9yZGVyID0gZS5zb3J0S2V5LnRvU3RyaW5nKCk7XHJcbiAgICBkaXYuaWQgPSBlLmlkLnRvU3RyaW5nKCk7XHJcbiAgICB0aGlzLnRpbWVybGlzdD8uYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgIHRoaXMuYWN0aXZlQmFyc1tlLmlkXSA9IGJhcjtcclxuICAgIGlmIChlLmlkIGluIHRoaXMuZXhwaXJlVGltZXJzKSB7XHJcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5leHBpcmVUaW1lcnNbZS5pZF0pO1xyXG4gICAgICBkZWxldGUgdGhpcy5leHBpcmVUaW1lcnNbZS5pZF07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIE9uVGltZXJFeHBpcmVzU29vbihpZDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBiYXIgPSB0aGlzLmFjdGl2ZUJhcnNbaWRdO1xyXG4gICAgaWYgKGJhcilcclxuICAgICAgYmFyLmZnID0gdGhpcy5iYXJFeHBpcmVzU29vbkNvbG9yO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIE9uUmVtb3ZlVGltZXIoZTogRXZlbnQsIGV4cGlyZWQ6IGJvb2xlYW4sIGZvcmNlID0gZmFsc2UpOiB2b2lkIHtcclxuICAgIGlmICghZm9yY2UgJiYgZXhwaXJlZCAmJiB0aGlzLm9wdGlvbnMuS2VlcEV4cGlyZWRUaW1lckJhcnNGb3JTZWNvbmRzKSB7XHJcbiAgICAgIHRoaXMuZXhwaXJlVGltZXJzW2UuaWRdID0gd2luZG93LnNldFRpbWVvdXQoXHJcbiAgICAgICAgICB0aGlzLk9uUmVtb3ZlVGltZXIuYmluZCh0aGlzLCBlLCBmYWxzZSksXHJcbiAgICAgICAgICB0aGlzLm9wdGlvbnMuS2VlcEV4cGlyZWRUaW1lckJhcnNGb3JTZWNvbmRzICogMTAwMCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH0gZWxzZSBpZiAoZS5pZCBpbiB0aGlzLmV4cGlyZVRpbWVycykge1xyXG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuZXhwaXJlVGltZXJzW2UuaWRdKTtcclxuICAgICAgZGVsZXRlIHRoaXMuZXhwaXJlVGltZXJzW2UuaWRdO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGJhciA9IHRoaXMuYWN0aXZlQmFyc1tlLmlkXTtcclxuICAgIGlmICghYmFyKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc3QgZGl2ID0gYmFyLnBhcmVudE5vZGU7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZS5pZC50b1N0cmluZygpKTtcclxuICAgIGlmICghZWxlbWVudClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHJlbW92ZUJhciA9ICgpID0+IHtcclxuICAgICAgZGl2Py5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChkaXYpO1xyXG4gICAgICBkZWxldGUgdGhpcy5hY3RpdmVCYXJzW2UuaWRdO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoIWZvcmNlKVxyXG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUtdGltZXItYmFyLXJlbW92ZWQnKTtcclxuICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5hbmltYXRpb25OYW1lICE9PSAnbm9uZScpIHtcclxuICAgICAgLy8gV2FpdCBmb3IgYW5pbWF0aW9uIHRvIGZpbmlzaFxyXG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIHJlbW92ZUJhcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZW1vdmVCYXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgT25TaG93SW5mb1RleHQodGV4dDogc3RyaW5nLCBjdXJyZW50VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5wb3B1cFRleHQpXHJcbiAgICAgIHRoaXMucG9wdXBUZXh0LkluZm8odGV4dCwgY3VycmVudFRpbWUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBPblNob3dBbGVydFRleHQodGV4dDogc3RyaW5nLCBjdXJyZW50VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5wb3B1cFRleHQpXHJcbiAgICAgIHRoaXMucG9wdXBUZXh0LkFsZXJ0KHRleHQsIGN1cnJlbnRUaW1lKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgT25TaG93QWxhcm1UZXh0KHRleHQ6IHN0cmluZywgY3VycmVudFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMucG9wdXBUZXh0KVxyXG4gICAgICB0aGlzLnBvcHVwVGV4dC5BbGFybSh0ZXh0LCBjdXJyZW50VGltZSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIE9uU3BlYWtUVFModGV4dDogc3RyaW5nLCBjdXJyZW50VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5wb3B1cFRleHQpXHJcbiAgICAgIHRoaXMucG9wdXBUZXh0LlRUUyh0ZXh0LCBjdXJyZW50VGltZSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIE9uVHJpZ2dlcihcclxuICAgICAgdHJpZ2dlcjogTG9vc2VUaW1lbGluZVRyaWdnZXIsXHJcbiAgICAgIG1hdGNoZXM6IFJlZ0V4cEV4ZWNBcnJheSB8IG51bGwsXHJcbiAgICAgIGN1cnJlbnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnBvcHVwVGV4dClcclxuICAgICAgdGhpcy5wb3B1cFRleHQuVHJpZ2dlcih0cmlnZ2VyLCBtYXRjaGVzLCBjdXJyZW50VGltZSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIE9uU3luY1RpbWUoZmlnaHROb3c6IG51bWJlciwgcnVubmluZzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuRGVidWcgfHwgIXRoaXMuZGVidWdFbGVtZW50KVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgaWYgKCFydW5uaW5nKSB7XHJcbiAgICAgIGlmICh0aGlzLmRlYnVnRmlnaHRUaW1lcilcclxuICAgICAgICB0aGlzLmRlYnVnRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmRlYnVnRmlnaHRUaW1lcik7XHJcbiAgICAgIHRoaXMuZGVidWdGaWdodFRpbWVyID0gbnVsbDtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghdGhpcy5kZWJ1Z0ZpZ2h0VGltZXIpIHtcclxuICAgICAgdGhpcy5kZWJ1Z0ZpZ2h0VGltZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aW1lci1iYXInKTtcclxuICAgICAgdGhpcy5kZWJ1Z0ZpZ2h0VGltZXIud2lkdGggPSAnMTAwcHgnO1xyXG4gICAgICB0aGlzLmRlYnVnRmlnaHRUaW1lci5oZWlnaHQgPSAnMTdweCc7XHJcbiAgICAgIHRoaXMuZGVidWdGaWdodFRpbWVyLmR1cmF0aW9uID0gYCR7a0JpZ31gO1xyXG4gICAgICB0aGlzLmRlYnVnRmlnaHRUaW1lci5sZWZ0dGV4dCA9ICdlbGFwc2VkJztcclxuICAgICAgdGhpcy5kZWJ1Z0ZpZ2h0VGltZXIudG93YXJkID0gJ3JpZ2h0JztcclxuICAgICAgdGhpcy5kZWJ1Z0ZpZ2h0VGltZXIuc3R5bGVmaWxsID0gJ2ZpbGwnO1xyXG4gICAgICB0aGlzLmRlYnVnRmlnaHRUaW1lci5iZyA9ICd0cmFuc3BhcmVudCc7XHJcbiAgICAgIHRoaXMuZGVidWdGaWdodFRpbWVyLmZnID0gJ3RyYW5zcGFyZW50JztcclxuICAgICAgdGhpcy5kZWJ1Z0VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5kZWJ1Z0ZpZ2h0VGltZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZvcmNlIHRoaXMgdG8gYmUgcmVzZXQuXHJcbiAgICB0aGlzLmRlYnVnRmlnaHRUaW1lci5lbGFwc2VkID0gJzAnO1xyXG4gICAgdGhpcy5kZWJ1Z0ZpZ2h0VGltZXIuZWxhcHNlZCA9IGZpZ2h0Tm93LnRvU3RyaW5nKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGltZWxpbmVDb250cm9sbGVyIHtcclxuICBwcm90ZWN0ZWQgdGltZWxpbmVzOiB7IFtmaWxlbmFtZTogc3RyaW5nXTogc3RyaW5nIH07XHJcblxyXG4gIHByaXZhdGUgc3VwcHJlc3NOZXh0RW5nYWdlOiBib29sZWFuO1xyXG4gIHByaXZhdGUgd2lwZVJlZ2V4OiBSZWdleDxOZXR3b3JrNmRQYXJhbXM+O1xyXG4gIHByb3RlY3RlZCBhY3RpdmVUaW1lbGluZTogVGltZWxpbmUgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIG9wdGlvbnM6IFJhaWRib3NzT3B0aW9ucywgcHJvdGVjdGVkIHVpOiBUaW1lbGluZVVJLFxyXG4gICAgICByYWlkYm9zc0RhdGFGaWxlczogeyBbZmlsZW5hbWU6IHN0cmluZ106IHN0cmluZyB9KSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgdGhpcy51aSA9IHVpO1xyXG5cclxuICAgIHRoaXMudGltZWxpbmVzID0ge307XHJcbiAgICBmb3IgKGNvbnN0IFtmaWxlbmFtZSwgZmlsZV0gb2YgT2JqZWN0LmVudHJpZXMocmFpZGJvc3NEYXRhRmlsZXMpKSB7XHJcbiAgICAgIGlmICghZmlsZW5hbWUuZW5kc1dpdGgoJy50eHQnKSlcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgdGhpcy50aW1lbGluZXNbZmlsZW5hbWVdID0gZmlsZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVc2VkIHRvIHN1cHByZXNzIGFueSBFbmdhZ2UhIGlmIHRoZXJlJ3MgYSB3aXBlIGJldHdlZW4gL2NvdW50ZG93biBhbmQgRW5nYWdlIS5cclxuICAgIHRoaXMuc3VwcHJlc3NOZXh0RW5nYWdlID0gZmFsc2U7XHJcbiAgICB0aGlzLndpcGVSZWdleCA9IFJlZ2V4ZXMubmV0d29yazZkKHsgY29tbWFuZDogJzQwMDAwMDEwJyB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBTZXRQb3B1cFRleHRJbnRlcmZhY2UocG9wdXBUZXh0OiBQb3B1cFRleHRHZW5lcmF0b3IpOiB2b2lkIHtcclxuICAgIHRoaXMudWkuU2V0UG9wdXBUZXh0SW50ZXJmYWNlKHBvcHVwVGV4dCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgU2V0SW5Db21iYXQoaW5Db21iYXQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIC8vIFdpcGUgbGluZXMgY29tZSBiZWZvcmUgY29tYmF0IGlzIGZhbHNlLCBidXQgYmVjYXVzZSBPbkxvZ0V2ZW50IGRvZXNuJ3QgcHJvY2Vzc1xyXG4gICAgLy8gbGluZXMgd2hlbiBvdXQgb2YgY29tYmF0LCBzdXBwcmVzcyBhbnkgZW5nYWdlcyB0aGF0IGNvbWUgYmVmb3JlIHRoZSBuZXh0IGNvdW50ZG93blxyXG4gICAgLy8ganVzdCBhcyBhIHNhZmV0eSwgZXNwZWNpYWxseSBmb3Igb2xkIEFSUiBjb250ZW50IHdoZXJlIHdpcGUgbGluZXMgZG9uJ3QgaGFwcGVuLlxyXG4gICAgaWYgKCFpbkNvbWJhdClcclxuICAgICAgdGhpcy5zdXBwcmVzc05leHRFbmdhZ2UgPSB0cnVlO1xyXG4gICAgaWYgKCFpbkNvbWJhdCAmJiB0aGlzLmFjdGl2ZVRpbWVsaW5lKVxyXG4gICAgICB0aGlzLmFjdGl2ZVRpbWVsaW5lLlN0b3AoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBPbkxvZ0V2ZW50KGU6IExvZ0V2ZW50KTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuYWN0aXZlVGltZWxpbmUpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XHJcblxyXG4gICAgZm9yIChjb25zdCBsb2cgb2YgZS5kZXRhaWwubG9ncykge1xyXG4gICAgICBpZiAoTG9jYWxlUmVnZXguY291bnRkb3duU3RhcnRbdGhpcy5vcHRpb25zLlBhcnNlckxhbmd1YWdlXS50ZXN0KGxvZykpIHtcclxuICAgICAgICAvLyBBcyB5b3UgY2FuJ3Qgc3RhcnQgYSBjb3VudGRvd24gd2hpbGUgaW4gY29tYmF0LCB0aGUgbmV4dCBlbmdhZ2UgaXMgcmVhbC5cclxuICAgICAgICB0aGlzLnN1cHByZXNzTmV4dEVuZ2FnZSA9IGZhbHNlO1xyXG4gICAgICB9IGVsc2UgaWYgKExvY2FsZVJlZ2V4LmNvdW50ZG93bkVuZ2FnZVt0aGlzLm9wdGlvbnMuUGFyc2VyTGFuZ3VhZ2VdLnRlc3QobG9nKSkge1xyXG4gICAgICAgIC8vIElmIHdlIHNlZSBhbiBlbmdhZ2UgYWZ0ZXIgYSB3aXBlLCBidXQgYmVmb3JlIGNvbWJhdCBoYXMgc3RhcnRlZCBvdGhlcndpc2VcclxuICAgICAgICAvLyAoZS5nLiBjb3VudGRvd24gPiB3aXBlID4gZmFjZSBwdWxsID4gZW5nYWdlKSwgZG9uJ3QgcHJvY2VzcyB0aGlzIGVuZ2FnZSBsaW5lXHJcbiAgICAgICAgaWYgKHRoaXMuc3VwcHJlc3NOZXh0RW5nYWdlKVxyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy53aXBlUmVnZXgudGVzdChsb2cpKSB7XHJcbiAgICAgICAgLy8gSWYgd2Ugc2VlIGEgd2lwZSwgaWdub3JlIHRoZSBuZXh0IGVuZ2FnZS4gIElmIHdlIHNlZSBhIGNvdW50ZG93biBiZWZvcmUgdGhhdCB3aXBlLFxyXG4gICAgICAgIC8vIHdlIHdpbGwgY2xlYXIgdGhpcy4gIFRoZXJlZm9yZSwgdGhpcyB3aWxsIG9ubHkgYXBwbHkgdG8gYWN0aXZlIGNvdW50ZG93bnMuXHJcbiAgICAgICAgdGhpcy5zdXBwcmVzc05leHRFbmdhZ2UgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuYWN0aXZlVGltZWxpbmUuT25Mb2dMaW5lKGxvZywgY3VycmVudFRpbWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIFNldEFjdGl2ZVRpbWVsaW5lKHRpbWVsaW5lRmlsZXM6IHN0cmluZ1tdLCB0aW1lbGluZXM6IHN0cmluZ1tdLFxyXG4gICAgICByZXBsYWNlbWVudHM6IFRpbWVsaW5lUmVwbGFjZW1lbnRbXSwgdHJpZ2dlcnM6IExvb3NlVGltZWxpbmVUcmlnZ2VyW10sXHJcbiAgICAgIHN0eWxlczogVGltZWxpbmVTdHlsZVtdKTogdm9pZCB7XHJcbiAgICB0aGlzLmFjdGl2ZVRpbWVsaW5lID0gbnVsbDtcclxuXHJcbiAgICBsZXQgdGV4dCA9ICcnO1xyXG5cclxuICAgIC8vIEdldCB0aGUgdGV4dCBmcm9tIGVhY2ggZmlsZSBpbiB8dGltZWxpbmVGaWxlc3wuXHJcbiAgICBmb3IgKGNvbnN0IHRpbWVsaW5lRmlsZSBvZiB0aW1lbGluZUZpbGVzKSB7XHJcbiAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLnRpbWVsaW5lc1t0aW1lbGluZUZpbGVdO1xyXG4gICAgICBpZiAobmFtZSlcclxuICAgICAgICB0ZXh0ID0gYCR7dGV4dH1cXG4ke25hbWV9YDtcclxuICAgICAgZWxzZVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGBUaW1lbGluZSBmaWxlIG5vdCBmb3VuZDogJHt0aW1lbGluZUZpbGV9YCk7XHJcbiAgICB9XHJcbiAgICAvLyBBcHBlbmQgdGV4dCBmcm9tIGVhY2ggYmxvY2sgaW4gfHRpbWVsaW5lc3wuXHJcbiAgICBmb3IgKGNvbnN0IHRpbWVsaW5lIG9mIHRpbWVsaW5lcylcclxuICAgICAgdGV4dCA9IGAke3RleHR9XFxuJHt0aW1lbGluZX1gO1xyXG5cclxuICAgIGlmICh0ZXh0KVxyXG4gICAgICB0aGlzLmFjdGl2ZVRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHRleHQsIHJlcGxhY2VtZW50cywgdHJpZ2dlcnMsIHN0eWxlcywgdGhpcy5vcHRpb25zKTtcclxuICAgIHRoaXMudWkuU2V0VGltZWxpbmUodGhpcy5hY3RpdmVUaW1lbGluZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgSXNSZWFkeSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnRpbWVsaW5lcyAhPT0gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUaW1lbGluZUxvYWRlciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0aW1lbGluZUNvbnRyb2xsZXI6IFRpbWVsaW5lQ29udHJvbGxlcikge1xyXG4gICAgdGhpcy50aW1lbGluZUNvbnRyb2xsZXIgPSB0aW1lbGluZUNvbnRyb2xsZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgU2V0VGltZWxpbmVzKHRpbWVsaW5lRmlsZXM6IHN0cmluZ1tdLCB0aW1lbGluZXM6IHN0cmluZ1tdLFxyXG4gICAgICByZXBsYWNlbWVudHM6IFRpbWVsaW5lUmVwbGFjZW1lbnRbXSwgdHJpZ2dlcnM6IExvb3NlVGltZWxpbmVUcmlnZ2VyW10sXHJcbiAgICAgIHN0eWxlczogVGltZWxpbmVTdHlsZVtdKTogdm9pZCB7XHJcbiAgICB0aGlzLnRpbWVsaW5lQ29udHJvbGxlci5TZXRBY3RpdmVUaW1lbGluZShcclxuICAgICAgICB0aW1lbGluZUZpbGVzLFxyXG4gICAgICAgIHRpbWVsaW5lcyxcclxuICAgICAgICByZXBsYWNlbWVudHMsXHJcbiAgICAgICAgdHJpZ2dlcnMsXHJcbiAgICAgICAgc3R5bGVzLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBJc1JlYWR5KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMudGltZWxpbmVDb250cm9sbGVyLklzUmVhZHkoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBTdG9wQ29tYmF0KCk6IHZvaWQge1xyXG4gICAgdGhpcy50aW1lbGluZUNvbnRyb2xsZXIuU2V0SW5Db21iYXQoZmFsc2UpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBMb29zZVRpbWVsaW5lVHJpZ2dlciB9IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzL3RyaWdnZXInO1xyXG5pbXBvcnQgeyBSYWlkYm9zc09wdGlvbnMgfSBmcm9tICcuLi8uLi9yYWlkYm9zc19vcHRpb25zJztcclxuaW1wb3J0IHsgVGltZWxpbmUsIFRpbWVsaW5lUmVwbGFjZW1lbnQsIFRpbWVsaW5lU3R5bGUgfSBmcm9tICcuLi8uLi90aW1lbGluZSc7XHJcbmltcG9ydCBSYWlkRW11bGF0b3IgZnJvbSAnLi4vZGF0YS9SYWlkRW11bGF0b3InO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFpZEVtdWxhdG9yVGltZWxpbmUgZXh0ZW5kcyBUaW1lbGluZSB7XHJcbiAgZW11bGF0ZWRTdGF0dXMgPSAncGF1c2UnO1xyXG4gIGVtdWxhdG9yPzogUmFpZEVtdWxhdG9yO1xyXG4gIGNvbnN0cnVjdG9yKHRleHQ6IHN0cmluZywgcmVwbGFjZW1lbnRzOiBUaW1lbGluZVJlcGxhY2VtZW50W10sIHRyaWdnZXJzOiBMb29zZVRpbWVsaW5lVHJpZ2dlcltdLFxyXG4gICAgICBzdHlsZXM6IFRpbWVsaW5lU3R5bGVbXSwgb3B0aW9uczogUmFpZGJvc3NPcHRpb25zKSB7XHJcbiAgICBzdXBlcih0ZXh0LCByZXBsYWNlbWVudHMsIHRyaWdnZXJzLCBzdHlsZXMsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgYmluZFRvKGVtdWxhdG9yOiBSYWlkRW11bGF0b3IpOiB2b2lkIHtcclxuICAgIHRoaXMuZW11bGF0b3IgPSBlbXVsYXRvcjtcclxuICAgIGVtdWxhdG9yLm9uKCdwbGF5JywgKCkgPT4ge1xyXG4gICAgICB0aGlzLmVtdWxhdGVkU3RhdHVzID0gJ3BsYXknO1xyXG4gICAgfSk7XHJcbiAgICBlbXVsYXRvci5vbigncGF1c2UnLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuZW11bGF0ZWRTdGF0dXMgPSAncGF1c2UnO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBlbXVsYXRlZFN5bmMoY3VycmVudExvZ1RpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKCFjdXJyZW50TG9nVGltZSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIC8vIFRoaXMgaXMgYSBiaXQgY29tcGxpY2F0ZWQgZHVlIHRvIGp1bXBzIGluIHRpbWVsaW5lcy4gSWYgd2UndmUgYWxyZWFkeSBnb3QgYSB0aW1lYmFzZSxcclxuICAgIC8vIGZpZ2h0Tm93IG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgYmFzZWQgb2ZmIG9mIHRoYXQgaW5zdGVhZCBvZiBpbml0aWFsT2Zmc2V0XHJcbiAgICAvLyB0aW1lYmFzZSA9IDAgd2hlbiBub3Qgc2V0XHJcbiAgICBjb25zdCBiYXNlVGltZXN0YW1wID0gdGhpcy50aW1lYmFzZSB8fFxyXG4gICAgICB0aGlzLmVtdWxhdG9yPy5jdXJyZW50RW5jb3VudGVyPy5lbmNvdW50ZXI/LmluaXRpYWxUaW1lc3RhbXAgfHxcclxuICAgICAgY3VycmVudExvZ1RpbWU7XHJcbiAgICBjb25zdCBmaWdodE5vdyA9IChjdXJyZW50TG9nVGltZSAtIGJhc2VUaW1lc3RhbXApIC8gMTAwMDtcclxuXHJcbiAgICB0aGlzLlN5bmNUbyhmaWdodE5vdywgY3VycmVudExvZ1RpbWUpO1xyXG4gICAgdGhpcy5fT25VcGRhdGVUaW1lcihjdXJyZW50TG9nVGltZSk7XHJcbiAgfVxyXG5cclxuICBfU2NoZWR1bGVVcGRhdGUoX2ZpZ2h0Tm93OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8vIE92ZXJyaWRlXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IExvb3NlVGltZWxpbmVUcmlnZ2VyIH0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMvdHJpZ2dlcic7XHJcbmltcG9ydCB7IFRpbWVsaW5lQ29udHJvbGxlciwgVGltZWxpbmVSZXBsYWNlbWVudCwgVGltZWxpbmVTdHlsZSB9IGZyb20gJy4uLy4uL3RpbWVsaW5lJztcclxuaW1wb3J0IFJhaWRFbXVsYXRvciBmcm9tICcuLi9kYXRhL1JhaWRFbXVsYXRvcic7XHJcbmltcG9ydCB7IEVtdWxhdG9yTG9nRXZlbnQgfSBmcm9tICcuLi9FbXVsYXRvckNvbW1vbic7XHJcbmltcG9ydCBSYWlkRW11bGF0b3JUaW1lbGluZSBmcm9tICcuL1JhaWRFbXVsYXRvclRpbWVsaW5lJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhaWRFbXVsYXRvclRpbWVsaW5lQ29udHJvbGxlciBleHRlbmRzIFRpbWVsaW5lQ29udHJvbGxlciB7XHJcbiAgcHVibGljIGVtdWxhdG9yPzogUmFpZEVtdWxhdG9yO1xyXG4gIHByb3RlY3RlZCBhY3RpdmVUaW1lbGluZTogUmFpZEVtdWxhdG9yVGltZWxpbmUgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgYmluZFRvKGVtdWxhdG9yOiBSYWlkRW11bGF0b3IpOiB2b2lkIHtcclxuICAgIHRoaXMuZW11bGF0b3IgPSBlbXVsYXRvcjtcclxuICAgIGlmICh0aGlzLmFjdGl2ZVRpbWVsaW5lKVxyXG4gICAgICB0aGlzLmFjdGl2ZVRpbWVsaW5lLmJpbmRUbyhlbXVsYXRvcik7XHJcbiAgfVxyXG5cclxuICAvLyBPdmVycmlkZVxyXG4gIHB1YmxpYyBTZXRBY3RpdmVUaW1lbGluZSh0aW1lbGluZUZpbGVzOiBzdHJpbmdbXSwgdGltZWxpbmVzOiBzdHJpbmdbXSxcclxuICAgICAgcmVwbGFjZW1lbnRzOiBUaW1lbGluZVJlcGxhY2VtZW50W10sIHRyaWdnZXJzOiBMb29zZVRpbWVsaW5lVHJpZ2dlcltdLFxyXG4gICAgICBzdHlsZXM6IFRpbWVsaW5lU3R5bGVbXSk6IHZvaWQge1xyXG4gICAgdGhpcy5hY3RpdmVUaW1lbGluZSA9IG51bGw7XHJcblxyXG4gICAgbGV0IHRleHQgPSAnJztcclxuXHJcbiAgICAvLyBHZXQgdGhlIHRleHQgZnJvbSBlYWNoIGZpbGUgaW4gfHRpbWVsaW5lRmlsZXN8LlxyXG4gICAgZm9yIChjb25zdCB0aW1lbGluZUZpbGUgb2YgdGltZWxpbmVGaWxlcykge1xyXG4gICAgICBjb25zdCBuYW1lID0gdGhpcy50aW1lbGluZXNbdGltZWxpbmVGaWxlXTtcclxuICAgICAgaWYgKG5hbWUpXHJcbiAgICAgICAgdGV4dCA9IGAke3RleHR9XFxuJHtuYW1lfWA7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBjb25zb2xlLmxvZyhgVGltZWxpbmUgZmlsZSBub3QgZm91bmQ6ICR7dGltZWxpbmVGaWxlfWApO1xyXG4gICAgfVxyXG4gICAgLy8gQXBwZW5kIHRleHQgZnJvbSBlYWNoIGJsb2NrIGluIHx0aW1lbGluZXN8LlxyXG4gICAgZm9yIChjb25zdCB0aW1lbGluZSBvZiB0aW1lbGluZXMpXHJcbiAgICAgIHRleHQgPSBgJHt0ZXh0fVxcbiR7dGltZWxpbmV9YDtcclxuXHJcbiAgICBpZiAodGV4dCkge1xyXG4gICAgICB0aGlzLmFjdGl2ZVRpbWVsaW5lID1cclxuICAgICAgICBuZXcgUmFpZEVtdWxhdG9yVGltZWxpbmUodGV4dCwgcmVwbGFjZW1lbnRzLCB0cmlnZ2Vycywgc3R5bGVzLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgICBpZiAodGhpcy5lbXVsYXRvcilcclxuICAgICAgICB0aGlzLmFjdGl2ZVRpbWVsaW5lLmJpbmRUbyh0aGlzLmVtdWxhdG9yKTtcclxuICAgIH1cclxuICAgIHRoaXMudWkuU2V0VGltZWxpbmUodGhpcy5hY3RpdmVUaW1lbGluZSk7XHJcbiAgfVxyXG5cclxuICAvLyBPdmVycmlkZVxyXG4gIHB1YmxpYyBPbkxvZ0V2ZW50KGU6IEVtdWxhdG9yTG9nRXZlbnQpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5hY3RpdmVUaW1lbGluZSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGZvciAoY29uc3QgbGluZSBvZiBlLmRldGFpbC5sb2dzKSB7XHJcbiAgICAgIHRoaXMuYWN0aXZlVGltZWxpbmUuT25Mb2dMaW5lKFxyXG4gICAgICAgICAgbGluZS5wcm9wZXJDYXNlQ29udmVydGVkTGluZSB8fCBsaW5lLmNvbnZlcnRlZExpbmUsXHJcbiAgICAgICAgICBsaW5lLnRpbWVzdGFtcCk7XHJcbiAgICAgIC8vIE9ubHkgY2FsbCBfT25VcGRhdGVUaW1lciBpZiB3ZSBoYXZlIGEgdGltZWJhc2UgZnJvbSB0aGUgcHJldmlvdXMgY2FsbCB0byBPbkxvZ0xpbmVcclxuICAgICAgLy8gVGhpcyBhdm9pZHMgc3BhbW1pbmcgdGhlIGNvbnNvbGUgd2l0aCBhIHRvbiBvZiBtZXNzYWdlc1xyXG4gICAgICBpZiAodGhpcy5hY3RpdmVUaW1lbGluZS50aW1lYmFzZSlcclxuICAgICAgICB0aGlzLmFjdGl2ZVRpbWVsaW5lLl9PblVwZGF0ZVRpbWVyKGxpbmUudGltZXN0YW1wKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUmFpZGJvc3NPcHRpb25zIH0gZnJvbSAnLi4vLi4vcmFpZGJvc3Nfb3B0aW9ucyc7XHJcbmltcG9ydCB7IFRpbWVsaW5lTG9hZGVyIH0gZnJvbSAnLi4vLi4vdGltZWxpbmUnO1xyXG5pbXBvcnQgeyBQb3B1cFRleHQgfSBmcm9tICcuLi8uLi9wb3B1cC10ZXh0JztcclxuaW1wb3J0IHsgUmFpZGJvc3NGaWxlRGF0YSB9IGZyb20gJy4uLy4uL2RhdGEvcmFpZGJvc3NfbWFuaWZlc3QudHh0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0dWJiZWRQb3B1cFRleHQgZXh0ZW5kcyBQb3B1cFRleHQge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgICBvcHRpb25zOiBSYWlkYm9zc09wdGlvbnMsXHJcbiAgICAgIHRpbWVsaW5lTG9hZGVyOiBUaW1lbGluZUxvYWRlcixcclxuICAgICAgcmFpZGJvc3NGaWxlRGF0YTogUmFpZGJvc3NGaWxlRGF0YSkge1xyXG4gICAgc3VwZXIob3B0aW9ucywgdGltZWxpbmVMb2FkZXIsIHJhaWRib3NzRmlsZURhdGEpO1xyXG4gIH1cclxuXHJcbiAgSG9va092ZXJsYXlzKCk6IHZvaWQge1xyXG4gICAgLy8gU3R1YmJlZCwgd2UgZG9uJ3Qgd2FudCBvdmVybGF5IGhvb2tzXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBFbXVsYXRvckNvbW1vbiwgeyBEYXRhVHlwZSwgRW11bGF0b3JMb2dFdmVudCB9IGZyb20gJy4uL0VtdWxhdG9yQ29tbW9uJztcclxuaW1wb3J0IFN0dWJiZWRQb3B1cFRleHQgZnJvbSAnLi4vb3ZlcnJpZGVzL1N0dWJiZWRQb3B1cFRleHQnO1xyXG5pbXBvcnQgTGluZUV2ZW50IGZyb20gJy4vbmV0d29ya19sb2dfY29udmVydGVyL0xpbmVFdmVudCc7XHJcbmltcG9ydCB7IExvb3NlVHJpZ2dlciwgTWF0Y2hlc0FueSB9IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzL3RyaWdnZXInO1xyXG5pbXBvcnQgeyBUcmlnZ2VySGVscGVyLCBUZXh0LCBUZXh0VGV4dCwgUHJvY2Vzc2VkVHJpZ2dlciB9IGZyb20gJy4uLy4uL3BvcHVwLXRleHQnO1xyXG5pbXBvcnQgeyBFdmVudFJlc3BvbnNlcyB9IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzL2V2ZW50JztcclxuXHJcbnR5cGUgUmVzb2x2ZXJGdW5jID0gKCkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCB0eXBlIEVtdWxhdG9yTmV0d29ya0xvZ0V2ZW50ID0gRXZlbnRSZXNwb25zZXNbJ0xvZ0xpbmUnXSAmIHtcclxuICBkZXRhaWw6IHtcclxuICAgIGxvZ3M6IExpbmVFdmVudFtdO1xyXG4gIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBSZXNvbHZlclN0YXR1cyB7XHJcbiAgcmVzcG9uc2VUeXBlPzogc3RyaW5nO1xyXG4gIHJlc3BvbnNlTGFiZWw/OiBzdHJpbmc7XHJcbiAgaW5pdGlhbERhdGE6IERhdGFUeXBlO1xyXG4gIGZpbmFsRGF0YT86IERhdGFUeXBlO1xyXG4gIGNvbmRpdGlvbj86IGJvb2xlYW47XHJcbiAgcmVzcG9uc2U/OiB1bmRlZmluZWQ7XHJcbiAgcmVzdWx0Pzogc3RyaW5nO1xyXG4gIGRlbGF5PzogbnVtYmVyO1xyXG4gIHN1cHByZXNzZWQ6IGJvb2xlYW47XHJcbiAgZXhlY3V0ZWQ6IGJvb2xlYW47XHJcbiAgcHJvbWlzZT86IFByb21pc2U8dm9pZD47XHJcbn1cclxuXHJcbnR5cGUgRW11bGF0b3JUcmlnZ2VySGVscGVyID0gVHJpZ2dlckhlbHBlciAmIHtcclxuICByZXNvbHZlcj86IFJlc29sdmVyO1xyXG59O1xyXG5cclxuY2xhc3MgUmVzb2x2ZXIge1xyXG4gIHByaXZhdGUgcHJvbWlzZT86IFByb21pc2U8dm9pZD47XHJcbiAgcHJpdmF0ZSBydW4/OiBSZXNvbHZlckZ1bmM7XHJcbiAgcHJpdmF0ZSBkZWxheVVudGlsPzogbnVtYmVyO1xyXG4gIHByaXZhdGUgZmluYWw/OiBSZXNvbHZlckZ1bmM7XHJcbiAgcHJpdmF0ZSBkZWxheVByb21pc2U/OiBQcm9taXNlPHZvaWQ+O1xyXG4gIHByaXZhdGUgZGVsYXlSZXNvbHZlcj86IFJlc29sdmVyRnVuYztcclxuICBwdWJsaWMgdHJpZ2dlckhlbHBlcj86IEVtdWxhdG9yVHJpZ2dlckhlbHBlcjtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIHN0YXR1czogUmVzb2x2ZXJTdGF0dXMpIHt9XHJcblxyXG4gIGFzeW5jIGlzUmVzb2x2ZWQobG9nOiBMaW5lRXZlbnQpIHtcclxuICAgIGlmICh0aGlzLmRlbGF5VW50aWwpIHtcclxuICAgICAgaWYgKHRoaXMuZGVsYXlVbnRpbCA8IGxvZy50aW1lc3RhbXApIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5kZWxheVVudGlsO1xyXG4gICAgICAgIGlmICh0aGlzLmRlbGF5UmVzb2x2ZXIpXHJcbiAgICAgICAgICB0aGlzLmRlbGF5UmVzb2x2ZXIoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmRlbGF5UHJvbWlzZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0aGlzLnByb21pc2UpXHJcbiAgICAgIGF3YWl0IHRoaXMucHJvbWlzZTtcclxuICAgIGlmICh0aGlzLnJ1bilcclxuICAgICAgdGhpcy5ydW4oKTtcclxuICAgIGlmICh0aGlzLmZpbmFsKVxyXG4gICAgICB0aGlzLmZpbmFsKCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgc2V0RGVsYXkoZGVsYXlVbnRpbDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLmRlbGF5VW50aWwgPSBkZWxheVVudGlsO1xyXG4gICAgcmV0dXJuIHRoaXMuZGVsYXlQcm9taXNlID0gbmV3IFByb21pc2UoKHJlcykgPT4ge1xyXG4gICAgICB0aGlzLmRlbGF5UmVzb2x2ZXIgPSByZXM7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgc2V0UHJvbWlzZShwcm9taXNlOiBQcm9taXNlPHZvaWQ+KSB7XHJcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xyXG4gIH1cclxuICBzZXRSdW4ocnVuOiBSZXNvbHZlckZ1bmMpIHtcclxuICAgIHRoaXMucnVuID0gcnVuO1xyXG4gIH1cclxuICBzZXRGaW5hbChmaW5hbDogUmVzb2x2ZXJGdW5jKSB7XHJcbiAgICB0aGlzLmZpbmFsID0gZmluYWw7XHJcbiAgfVxyXG4gIHNldEhlbHBlcih0cmlnZ2VySGVscGVyOiBFbXVsYXRvclRyaWdnZXJIZWxwZXIpIHtcclxuICAgIHRoaXMudHJpZ2dlckhlbHBlciA9IHRyaWdnZXJIZWxwZXI7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFRleHRBbmFseXNpcyBleHRlbmRzIFN0dWJiZWRQb3B1cFRleHQge1xyXG4gIHRyaWdnZXJSZXNvbHZlcnM6IFJlc29sdmVyW10gPSBbXTtcclxuICBjdXJyZW50UmVzb2x2ZXI/OiBSZXNvbHZlcjtcclxuICBwdWJsaWMgY2FsbGJhY2s/OiAobG9nOiBMaW5lRXZlbnQsXHJcbiAgICAgIHRyaWdnZXJIZWxwZXI6IEVtdWxhdG9yVHJpZ2dlckhlbHBlciB8IHVuZGVmaW5lZCxcclxuICAgICAgY3VycmVudFRyaWdnZXJTdGF0dXM6IFJlc29sdmVyU3RhdHVzLFxyXG4gICAgICBmaW5hbERhdGE6IERhdGFUeXBlKSA9PiB2b2lkO1xyXG5cclxuICAvLyBPdmVycmlkZSBgT25UcmlnZ2VyYCBzbyB3ZSBjYW4gdXNlIG91ciBvd24gZXhjZXB0aW9uIGhhbmRsZXJcclxuICBPblRyaWdnZXIodHJpZ2dlcjogTG9vc2VUcmlnZ2VyLCBtYXRjaGVzOiBSZWdFeHBFeGVjQXJyYXkgfCBudWxsLCBjdXJyZW50VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLk9uVHJpZ2dlckludGVybmFsKHRyaWdnZXIsIG1hdGNoZXMsIGN1cnJlbnRUaW1lKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5sb2codHJpZ2dlciwgZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBPbkxvZyhlOiBFbXVsYXRvckxvZ0V2ZW50KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBmb3IgKGNvbnN0IGxvZ09iaiBvZiBlLmRldGFpbC5sb2dzKSB7XHJcbiAgICAgIGNvbnN0IGxvZyA9IGxvZ09iai5wcm9wZXJDYXNlQ29udmVydGVkTGluZSA/PyBsb2dPYmouY29udmVydGVkTGluZTtcclxuXHJcbiAgICAgIGlmIChsb2cuaW5jbHVkZXMoJzAwOjAwMzg6Y2FjdGJvdCB3aXBlJykpXHJcbiAgICAgICAgdGhpcy5TZXRJbkNvbWJhdChmYWxzZSk7XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2YgdGhpcy50cmlnZ2Vycykge1xyXG4gICAgICAgIGNvbnN0IHIgPSB0cmlnZ2VyLmxvY2FsUmVnZXg/LmV4ZWMobG9nKTtcclxuICAgICAgICBpZiAoIXIpXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSB0aGlzLmN1cnJlbnRSZXNvbHZlciA9IG5ldyBSZXNvbHZlcih7XHJcbiAgICAgICAgICBpbml0aWFsRGF0YTogRW11bGF0b3JDb21tb24uY2xvbmVEYXRhKHRoaXMuZGF0YSksXHJcbiAgICAgICAgICBzdXBwcmVzc2VkOiBmYWxzZSxcclxuICAgICAgICAgIGV4ZWN1dGVkOiBmYWxzZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRyaWdnZXJSZXNvbHZlcnMucHVzaChyZXNvbHZlcik7XHJcblxyXG4gICAgICAgIHRoaXMuT25UcmlnZ2VyKHRyaWdnZXIsIHIsIGxvZ09iai50aW1lc3RhbXApO1xyXG5cclxuICAgICAgICByZXNvbHZlci5zZXRGaW5hbCgoKSA9PiB7XHJcbiAgICAgICAgICByZXNvbHZlci5zdGF0dXMuZmluYWxEYXRhID0gRW11bGF0b3JDb21tb24uY2xvbmVEYXRhKHRoaXMuZGF0YSk7XHJcbiAgICAgICAgICBkZWxldGUgcmVzb2x2ZXIudHJpZ2dlckhlbHBlcj8ucmVzb2x2ZXI7XHJcbiAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjaylcclxuICAgICAgICAgICAgdGhpcy5jYWxsYmFjayhsb2dPYmosIHJlc29sdmVyLnRyaWdnZXJIZWxwZXIsIHJlc29sdmVyLnN0YXR1cywgdGhpcy5kYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYXdhaXQgdGhpcy5jaGVja1Jlc29sdmVkKGxvZ09iaik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBPbk5ldExvZyhlOiBFbXVsYXRvck5ldHdvcmtMb2dFdmVudCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgZm9yIChjb25zdCBsb2dPYmogb2YgZS5kZXRhaWwubG9ncykge1xyXG4gICAgICBjb25zdCBsb2cgPSBsb2dPYmoubmV0d29ya0xpbmU7XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2YgdGhpcy5uZXRUcmlnZ2Vycykge1xyXG4gICAgICAgIGNvbnN0IHIgPSB0cmlnZ2VyLmxvY2FsTmV0UmVnZXg/LmV4ZWMobG9nKTtcclxuICAgICAgICBpZiAocikge1xyXG4gICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSB0aGlzLmN1cnJlbnRSZXNvbHZlciA9IG5ldyBSZXNvbHZlcih7XHJcbiAgICAgICAgICAgIGluaXRpYWxEYXRhOiBFbXVsYXRvckNvbW1vbi5jbG9uZURhdGEodGhpcy5kYXRhKSxcclxuICAgICAgICAgICAgc3VwcHJlc3NlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGV4ZWN1dGVkOiBmYWxzZSxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy50cmlnZ2VyUmVzb2x2ZXJzLnB1c2gocmVzb2x2ZXIpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSByLmdyb3VwcyA/PyB7fTtcclxuXHJcbiAgICAgICAgICB0aGlzLl9vblRyaWdnZXJJbnRlcm5hbEdldEhlbHBlcih0cmlnZ2VyLCBtYXRjaGVzLCBsb2dPYmoudGltZXN0YW1wKTtcclxuICAgICAgICAgIHRoaXMuT25UcmlnZ2VyKHRyaWdnZXIsIHIsIGxvZ09iai50aW1lc3RhbXApO1xyXG5cclxuICAgICAgICAgIHJlc29sdmVyLnNldEZpbmFsKCgpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZXIuc3RhdHVzLmZpbmFsRGF0YSA9IEVtdWxhdG9yQ29tbW9uLmNsb25lRGF0YSh0aGlzLmRhdGEpO1xyXG4gICAgICAgICAgICBkZWxldGUgcmVzb2x2ZXIudHJpZ2dlckhlbHBlcj8ucmVzb2x2ZXI7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbGxiYWNrKVxyXG4gICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2sobG9nT2JqLCByZXNvbHZlci50cmlnZ2VySGVscGVyLCByZXNvbHZlci5zdGF0dXMsIHRoaXMuZGF0YSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGF3YWl0IHRoaXMuY2hlY2tSZXNvbHZlZChsb2dPYmopO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgY2hlY2tSZXNvbHZlZChsb2dPYmo6IExpbmVFdmVudCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoXHJcbiAgICAgICAgdGhpcy50cmlnZ2VyUmVzb2x2ZXJzLm1hcChhc3luYyAocmVzb2x2ZXIpID0+IGF3YWl0IHJlc29sdmVyLmlzUmVzb2x2ZWQobG9nT2JqKSkpXHJcbiAgICAgIC50aGVuKChyZXN1bHRzKSA9PiB7XHJcbiAgICAgICAgdGhpcy50cmlnZ2VyUmVzb2x2ZXJzID0gdGhpcy50cmlnZ2VyUmVzb2x2ZXJzLmZpbHRlcigoXywgaW5kZXgpID0+ICFyZXN1bHRzW2luZGV4XSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX29uVHJpZ2dlckludGVybmFsQ29uZGl0aW9uKHRyaWdnZXJIZWxwZXI6IEVtdWxhdG9yVHJpZ2dlckhlbHBlcik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgcmV0ID0gc3VwZXIuX29uVHJpZ2dlckludGVybmFsQ29uZGl0aW9uKHRyaWdnZXJIZWxwZXIpO1xyXG4gICAgaWYgKHRyaWdnZXJIZWxwZXIucmVzb2x2ZXIpXHJcbiAgICAgIHRyaWdnZXJIZWxwZXIucmVzb2x2ZXIuc3RhdHVzLmNvbmRpdGlvbiA9IHJldDtcclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxEZWxheVNlY29uZHModHJpZ2dlckhlbHBlcjogRW11bGF0b3JUcmlnZ2VySGVscGVyKTogUHJvbWlzZTx2b2lkPiB8IHVuZGVmaW5lZCB7XHJcbiAgICAvLyBDYW4ndCBpbmhlcml0IHRoZSBkZWZhdWx0IGxvZ2ljIGZvciBkZWxheSBzaW5jZSB3ZSBkb24ndFxyXG4gICAgLy8gd2FudCB0byBkZWxheSBmb3IgbWFzcyBwcm9jZXNzaW5nIG9mIHRoZSB0aW1lbGluZVxyXG4gICAgY29uc3QgZGVsYXkgPSAnZGVsYXlTZWNvbmRzJyBpbiB0cmlnZ2VySGVscGVyLnRyaWdnZXIgPyB0cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbih0cmlnZ2VySGVscGVyLnRyaWdnZXIuZGVsYXlTZWNvbmRzKSA6IDA7XHJcbiAgICBpZiAodHlwZW9mIGRlbGF5ID09PSAnbnVtYmVyJykge1xyXG4gICAgICBpZiAodHJpZ2dlckhlbHBlci5yZXNvbHZlcilcclxuICAgICAgICB0cmlnZ2VySGVscGVyLnJlc29sdmVyLnN0YXR1cy5kZWxheSA9IGRlbGF5O1xyXG4gICAgICBpZiAoIWRlbGF5IHx8IGRlbGF5IDw9IDApXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICByZXR1cm4gdHJpZ2dlckhlbHBlci5yZXNvbHZlcj8uc2V0RGVsYXkodHJpZ2dlckhlbHBlci5ub3cgKyAoZGVsYXkgKiAxMDAwKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxQcm9taXNlKHRyaWdnZXJIZWxwZXI6IEVtdWxhdG9yVHJpZ2dlckhlbHBlcik6IFByb21pc2U8dm9pZD4gfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3QgcmV0ID0gc3VwZXIuX29uVHJpZ2dlckludGVybmFsUHJvbWlzZSh0cmlnZ2VySGVscGVyKTtcclxuICAgIGlmICh0cmlnZ2VySGVscGVyLnJlc29sdmVyKVxyXG4gICAgICB0cmlnZ2VySGVscGVyLnJlc29sdmVyLnN0YXR1cy5wcm9taXNlID0gcmV0O1xyXG4gICAgaWYgKCFyZXQpXHJcbiAgICAgIHJldHVybiByZXQ7XHJcbiAgICBpZiAodHJpZ2dlckhlbHBlci5yZXNvbHZlcilcclxuICAgICAgdHJpZ2dlckhlbHBlci5yZXNvbHZlci5zZXRQcm9taXNlKHJldCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxUVFModHJpZ2dlckhlbHBlcjogRW11bGF0b3JUcmlnZ2VySGVscGVyKTogdm9pZCB7XHJcbiAgICBzdXBlci5fb25UcmlnZ2VySW50ZXJuYWxUVFModHJpZ2dlckhlbHBlcik7XHJcbiAgICBpZiAodHJpZ2dlckhlbHBlci50dHNUZXh0ICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgdHJpZ2dlckhlbHBlci5yZXNvbHZlciAmJlxyXG4gICAgICB0cmlnZ2VySGVscGVyLnJlc29sdmVyLnN0YXR1cy5yZXNwb25zZVR5cGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnJlc29sdmVyLnN0YXR1cy5yZXNwb25zZVR5cGUgPSAndHRzJztcclxuICAgICAgdHJpZ2dlckhlbHBlci5yZXNvbHZlci5zdGF0dXMucmVzcG9uc2VMYWJlbCA9IHRyaWdnZXJIZWxwZXIudHRzVGV4dDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbFJ1bih0cmlnZ2VySGVscGVyOiBFbXVsYXRvclRyaWdnZXJIZWxwZXIpOiB2b2lkIHtcclxuICAgIHRyaWdnZXJIZWxwZXIucmVzb2x2ZXI/LnNldFJ1bigoKSA9PiB7XHJcbiAgICAgIGlmICh0cmlnZ2VySGVscGVyLnJlc29sdmVyKVxyXG4gICAgICAgIHRyaWdnZXJIZWxwZXIucmVzb2x2ZXIuc3RhdHVzLmV4ZWN1dGVkID0gdHJ1ZTtcclxuICAgICAgc3VwZXIuX29uVHJpZ2dlckludGVybmFsUnVuKHRyaWdnZXJIZWxwZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfbWFrZVRleHRFbGVtZW50KHRyaWdnZXJIZWxwZXI6IEVtdWxhdG9yVHJpZ2dlckhlbHBlcixcclxuICAgICAgdGV4dDogc3RyaW5nLFxyXG4gICAgICBfY2xhc3NOYW1lOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBpZiAodHJpZ2dlckhlbHBlci5yZXNvbHZlcilcclxuICAgICAgdHJpZ2dlckhlbHBlci5yZXNvbHZlci5zdGF0dXMucmVzdWx0ID8/PSB0ZXh0O1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIH1cclxuXHJcbiAgX2NyZWF0ZVRleHRGb3IodHJpZ2dlckhlbHBlcjogRW11bGF0b3JUcmlnZ2VySGVscGVyLFxyXG4gICAgICB0ZXh0OiBzdHJpbmcsXHJcbiAgICAgIHRleHRUeXBlOiBUZXh0LFxyXG4gICAgICBfbG93ZXJUZXh0S2V5OiBUZXh0VGV4dCxcclxuICAgICAgX2R1cmF0aW9uOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8vIE5vLW9wIGZvciBmdW5jdGlvbmFsaXR5LCBidXQgc3RvcmUgb2ZmIHRoaXMgaW5mbyBmb3IgZmVlZGJhY2tcclxuICAgIGlmICh0cmlnZ2VySGVscGVyLnJlc29sdmVyKSB7XHJcbiAgICAgIHRyaWdnZXJIZWxwZXIucmVzb2x2ZXIuc3RhdHVzLnJlc3BvbnNlVHlwZSA9IHRleHRUeXBlO1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnJlc29sdmVyLnN0YXR1cy5yZXNwb25zZUxhYmVsID0gdGV4dDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9wbGF5QXVkaW9GaWxlKHRyaWdnZXJIZWxwZXI6IEVtdWxhdG9yVHJpZ2dlckhlbHBlcixcclxuICAgICAgdXJsOiBzdHJpbmcsXHJcbiAgICAgIF92b2x1bWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgLy8gTm8tb3AgZm9yIGZ1bmN0aW9uYWxpdHksIGJ1dCBzdG9yZSBvZmYgdGhpcyBpbmZvIGZvciBmZWVkYmFja1xyXG5cclxuICAgIGlmICh0cmlnZ2VySGVscGVyLnJlc29sdmVyKSB7XHJcbiAgICAgIC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0ZXh0IGFuZCB0aGlzIGlzIGEgZGVmYXVsdCBhbGVydCBzb3VuZCwgZG9uJ3Qgb3ZlcnJpZGUgdGhhdCBpbmZvXHJcbiAgICAgIGlmICh0cmlnZ2VySGVscGVyLnJlc29sdmVyLnN0YXR1cy5yZXNwb25zZVR5cGUpIHtcclxuICAgICAgICBpZiAodHJpZ2dlckhlbHBlci5yZXNvbHZlci5zdGF0dXMucmVzcG9uc2VUeXBlID09PSAnaW5mbycgJiZcclxuICAgICAgICAgICAgdXJsID09PSB0aGlzLm9wdGlvbnMuSW5mb1NvdW5kKVxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0cmlnZ2VySGVscGVyLnJlc29sdmVyLnN0YXR1cy5yZXNwb25zZVR5cGUgPT09ICdhbGVydCcgJiZcclxuICAgICAgICAgICAgdXJsID09PSB0aGlzLm9wdGlvbnMuQWxlcnRTb3VuZClcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAodHJpZ2dlckhlbHBlci5yZXNvbHZlci5zdGF0dXMucmVzcG9uc2VUeXBlID09PSAnYWxhcm0nICYmXHJcbiAgICAgICAgICAgIHVybCA9PT0gdGhpcy5vcHRpb25zLkFsYXJtU291bmQpXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdHJpZ2dlckhlbHBlci5yZXNvbHZlci5zdGF0dXMucmVzcG9uc2VUeXBlID0gJ2F1ZGlvZmlsZSc7XHJcbiAgICAgIHRyaWdnZXJIZWxwZXIucmVzb2x2ZXIuc3RhdHVzLnJlc3BvbnNlTGFiZWwgPSB1cmw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxHZXRIZWxwZXIoXHJcbiAgICAgIHRyaWdnZXI6IFByb2Nlc3NlZFRyaWdnZXIsXHJcbiAgICAgIG1hdGNoZXM6IE1hdGNoZXNBbnksXHJcbiAgICAgIG5vdzogbnVtYmVyKTogRW11bGF0b3JUcmlnZ2VySGVscGVyIHtcclxuICAgIGNvbnN0IHJldDogRW11bGF0b3JUcmlnZ2VySGVscGVyID0ge1xyXG4gICAgICAuLi5zdXBlci5fb25UcmlnZ2VySW50ZXJuYWxHZXRIZWxwZXIodHJpZ2dlciwgbWF0Y2hlcywgbm93KSxcclxuICAgIH07XHJcbiAgICByZXQucmVzb2x2ZXIgPSB0aGlzLmN1cnJlbnRSZXNvbHZlcjtcclxuICAgIHJldC5yZXNvbHZlcj8uc2V0SGVscGVyKHJldCk7XHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVbnJlYWNoYWJsZUNvZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9yZXNvdXJjZXMvbm90X3JlYWNoZWQnO1xyXG5pbXBvcnQgeyBSYWlkYm9zc09wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi91aS9yYWlkYm9zcy9yYWlkYm9zc19vcHRpb25zJztcclxuaW1wb3J0IHsgVGltZWxpbmVVSSwgRXZlbnQgfSBmcm9tICcuLi8uLi90aW1lbGluZSc7XHJcbmltcG9ydCBSYWlkRW11bGF0b3IgZnJvbSAnLi4vZGF0YS9SYWlkRW11bGF0b3InO1xyXG5pbXBvcnQgUmFpZEVtdWxhdG9yVGltZWxpbmUgZnJvbSAnLi9SYWlkRW11bGF0b3JUaW1lbGluZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEVtdWxhdG9yVGltZXJCYXIge1xyXG4gICRwcm9ncmVzczogSFRNTEVsZW1lbnQ7XHJcbiAgJGJhcjogSFRNTERpdkVsZW1lbnQ7XHJcbiAgJGxlZnRMYWJlbDogSFRNTEVsZW1lbnQ7XHJcbiAgJHJpZ2h0TGFiZWw6IEhUTUxFbGVtZW50O1xyXG4gIHN0YXJ0OiBudW1iZXI7XHJcbiAgc3R5bGU6ICdmaWxsJyB8ICdlbXB0eSc7XHJcbiAgZHVyYXRpb246IG51bWJlcjtcclxuICBldmVudDogRXZlbnQ7XHJcbiAgZm9yY2VSZW1vdmVBdDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYWlkRW11bGF0b3JUaW1lbGluZVVJIGV4dGVuZHMgVGltZWxpbmVVSSB7XHJcbiAgZW11bGF0ZWRUaW1lckJhcnM6IEVtdWxhdG9yVGltZXJCYXJbXSA9IFtdO1xyXG4gIGVtdWxhdGVkU3RhdHVzID0gJ3BhdXNlJztcclxuICAkYmFyQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICAkcHJvZ3Jlc3NUZW1wbGF0ZTogSFRNTEVsZW1lbnQ7XHJcbiAgY29uc3RydWN0b3Iob3B0aW9uczogUmFpZGJvc3NPcHRpb25zKSB7XHJcbiAgICBzdXBlcihvcHRpb25zKTtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lci1iYXItY29udGFpbmVyJyk7XHJcbiAgICBpZiAoIShjb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpXHJcbiAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgIHRoaXMuJGJhckNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIGNvbnN0IHBUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlLnByb2dyZXNzJyk7XHJcbiAgICBpZiAoIShwVGVtcGxhdGUgaW5zdGFuY2VvZiBIVE1MVGVtcGxhdGVFbGVtZW50KSlcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gICAgaWYgKCEocFRlbXBsYXRlLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpXHJcbiAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgIHRoaXMuJHByb2dyZXNzVGVtcGxhdGUgPSBwVGVtcGxhdGUuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZDtcclxuICB9XHJcblxyXG4gIGJpbmRUbyhlbXVsYXRvcjogUmFpZEVtdWxhdG9yKTogdm9pZCB7XHJcbiAgICBlbXVsYXRvci5vbigndGljaycsIChjdXJyZW50TG9nVGltZTogbnVtYmVyLCBsYXN0TG9nTGluZVRpbWU6IG51bWJlcikgPT4ge1xyXG4gICAgICBmb3IgKGNvbnN0IGJhciBvZiB0aGlzLmVtdWxhdGVkVGltZXJCYXJzKVxyXG4gICAgICAgIHRoaXMudXBkYXRlQmFyKGJhciwgY3VycmVudExvZ1RpbWUpO1xyXG5cclxuICAgICAgY29uc3QgdG9SZW1vdmUgPSB0aGlzLmVtdWxhdGVkVGltZXJCYXJzXHJcbiAgICAgICAgLmZpbHRlcigoYmFyKSA9PiBiYXIuZm9yY2VSZW1vdmVBdCA8PSBjdXJyZW50TG9nVGltZSk7XHJcbiAgICAgIGZvciAoY29uc3QgYmFyIG9mIHRvUmVtb3ZlKVxyXG4gICAgICAgIGJhci4kcHJvZ3Jlc3MucmVtb3ZlKCk7XHJcblxyXG4gICAgICB0aGlzLmVtdWxhdGVkVGltZXJCYXJzID0gdGhpcy5lbXVsYXRlZFRpbWVyQmFycy5maWx0ZXIoKGJhcjogRW11bGF0b3JUaW1lckJhcikgPT4ge1xyXG4gICAgICAgIHJldHVybiBiYXIuZm9yY2VSZW1vdmVBdCA+IGN1cnJlbnRMb2dUaW1lO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLnRpbWViYXNlICYmIHRoaXMudGltZWxpbmUuX09uVXBkYXRlVGltZXIobGFzdExvZ0xpbmVUaW1lKTtcclxuICAgIH0pO1xyXG4gICAgZW11bGF0b3Iub24oJ3BsYXknLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuZW11bGF0ZWRTdGF0dXMgPSAncGxheSc7XHJcbiAgICAgIGlmICh0aGlzLnRpbWVsaW5lIGluc3RhbmNlb2YgUmFpZEVtdWxhdG9yVGltZWxpbmUpXHJcbiAgICAgICAgdGhpcy50aW1lbGluZS5lbXVsYXRlZFN5bmMoZW11bGF0b3IuY3VycmVudExvZ1RpbWUpO1xyXG4gICAgfSk7XHJcbiAgICBlbXVsYXRvci5vbigncGF1c2UnLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuZW11bGF0ZWRTdGF0dXMgPSAncGF1c2UnO1xyXG4gICAgfSk7XHJcbiAgICBlbXVsYXRvci5vbigncHJlU2VlaycsIChfdGltZSkgPT4ge1xyXG4gICAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuU3RvcCgpO1xyXG4gICAgICBmb3IgKGNvbnN0IGJhciBvZiB0aGlzLmVtdWxhdGVkVGltZXJCYXJzKVxyXG4gICAgICAgIGJhci4kcHJvZ3Jlc3MucmVtb3ZlKCk7XHJcblxyXG4gICAgICB0aGlzLmVtdWxhdGVkVGltZXJCYXJzID0gW107XHJcbiAgICB9KTtcclxuICAgIGVtdWxhdG9yLm9uKCdwb3N0U2VlaycsIChjdXJyZW50TG9nVGltZSkgPT4ge1xyXG4gICAgICBpZiAodGhpcy50aW1lbGluZSBpbnN0YW5jZW9mIFJhaWRFbXVsYXRvclRpbWVsaW5lKVxyXG4gICAgICAgIHRoaXMudGltZWxpbmUuZW11bGF0ZWRTeW5jKGN1cnJlbnRMb2dUaW1lKTtcclxuXHJcbiAgICAgIGZvciAoY29uc3QgYmFyIG9mIHRoaXMuZW11bGF0ZWRUaW1lckJhcnMpXHJcbiAgICAgICAgdGhpcy51cGRhdGVCYXIoYmFyLCBjdXJyZW50TG9nVGltZSk7XHJcbiAgICB9KTtcclxuICAgIGVtdWxhdG9yLm9uKCdjdXJyZW50RW5jb3VudGVyQ2hhbmdlZCcsIHRoaXMuc3RvcC5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIHN0b3AoKTogdm9pZCB7XHJcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuU3RvcCgpO1xyXG4gICAgZm9yIChjb25zdCBiYXIgb2YgdGhpcy5lbXVsYXRlZFRpbWVyQmFycylcclxuICAgICAgYmFyLiRwcm9ncmVzcy5yZW1vdmUoKTtcclxuXHJcbiAgICB0aGlzLmVtdWxhdGVkVGltZXJCYXJzID0gW107XHJcbiAgfVxyXG5cclxuICB1cGRhdGVCYXIoYmFyOiBFbXVsYXRvclRpbWVyQmFyLCBjdXJyZW50TG9nVGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBiYXJFbGFwc2VkID0gY3VycmVudExvZ1RpbWUgLSBiYXIuc3RhcnQ7XHJcbiAgICBsZXQgYmFyUHJvZyA9IE1hdGgubWluKChiYXJFbGFwc2VkIC8gYmFyLmR1cmF0aW9uKSAqIDEwMCwgMTAwKTtcclxuICAgIGlmIChiYXIuc3R5bGUgPT09ICdlbXB0eScpXHJcbiAgICAgIGJhclByb2cgPSAxMDAgLSBiYXJQcm9nO1xyXG5cclxuICAgIGxldCByaWdodFRleHQgPSAoKGJhci5kdXJhdGlvbiAtIGJhckVsYXBzZWQpIC8gMTAwMCkudG9GaXhlZCgxKTtcclxuICAgIGlmIChiYXJQcm9nID49IDEwMClcclxuICAgICAgcmlnaHRUZXh0ID0gJyc7XHJcblxyXG4gICAgYmFyLiRsZWZ0TGFiZWwudGV4dENvbnRlbnQgPSBiYXIuZXZlbnQudGV4dDtcclxuICAgIGJhci4kcmlnaHRMYWJlbC50ZXh0Q29udGVudCA9IHJpZ2h0VGV4dDtcclxuICAgIGJhci4kYmFyLnN0eWxlLndpZHRoID0gYCR7YmFyUHJvZ30lYDtcclxuICB9XHJcblxyXG4gIEluaXQoKTogdm9pZCB7XHJcbiAgICAvLyBUaGlzIHNwYWNlIGludGVudGlvbmFsbHkgbGVmdCBibGFua1xyXG4gIH1cclxuXHJcbiAgQWRkRGVidWdJbnN0cnVjdGlvbnMoKTogdm9pZCB7XHJcbiAgICAvLyBUaGlzIHNwYWNlIGludGVudGlvbmFsbHkgbGVmdCBibGFua1xyXG4gIH1cclxuXHJcbiAgLy8gT3ZlcnJpZGVcclxuICBwcm90ZWN0ZWQgT25BZGRUaW1lcihmaWdodE5vdzogbnVtYmVyLCBlOiBFdmVudCwgY2hhbm5lbGluZzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLnRpbWVsaW5lKVxyXG4gICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgY29uc3QgZW5kID0gdGhpcy50aW1lbGluZS50aW1lYmFzZSArIChlLnRpbWUgKiAxMDAwKTtcclxuICAgIGNvbnN0IHN0YXJ0ID0gZW5kIC0gKHRoaXMub3B0aW9ucy5TaG93VGltZXJCYXJzQXRTZWNvbmRzICogMTAwMCk7XHJcbiAgICBjb25zdCAkcHJvZ3Jlc3MgPSB0aGlzLiRwcm9ncmVzc1RlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcclxuICAgIGlmICghKCRwcm9ncmVzcyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSlcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG5cclxuICAgIGNvbnN0ICRwcm9nQmFyID0gJHByb2dyZXNzLnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmVzcy1iYXInKTtcclxuICAgIGNvbnN0ICRwcm9nTGVmdCA9ICRwcm9ncmVzcy5xdWVyeVNlbGVjdG9yKCcudGltZXItYmFyLWxlZnQtbGFiZWwnKTtcclxuICAgIGNvbnN0ICRwcm9nUmlnaHQgPSAkcHJvZ3Jlc3MucXVlcnlTZWxlY3RvcignLnRpbWVyLWJhci1yaWdodC1sYWJlbCcpO1xyXG5cclxuICAgIGlmICghKFxyXG4gICAgICAkcHJvZ0JhciBpbnN0YW5jZW9mIEhUTUxEaXZFbGVtZW50ICYmXHJcbiAgICAgICRwcm9nTGVmdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmXHJcbiAgICAgICRwcm9nUmlnaHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpXHJcbiAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuXHJcbiAgICBjb25zdCBiYXI6IEVtdWxhdG9yVGltZXJCYXIgPSB7XHJcbiAgICAgICRwcm9ncmVzczogJHByb2dyZXNzLFxyXG4gICAgICAkYmFyOiAkcHJvZ0JhcixcclxuICAgICAgJGxlZnRMYWJlbDogJHByb2dMZWZ0LFxyXG4gICAgICAkcmlnaHRMYWJlbDogJHByb2dSaWdodCxcclxuICAgICAgc3RhcnQ6IHN0YXJ0LFxyXG4gICAgICBzdHlsZTogIWNoYW5uZWxpbmcgPyAnZmlsbCcgOiAnZW1wdHknLFxyXG4gICAgICBkdXJhdGlvbjogKGNoYW5uZWxpbmcgPyBlLnRpbWUgLSBmaWdodE5vdyA6IHRoaXMub3B0aW9ucy5TaG93VGltZXJCYXJzQXRTZWNvbmRzKSAqIDEwMDAsXHJcbiAgICAgIGV2ZW50OiBlLFxyXG4gICAgICBmb3JjZVJlbW92ZUF0OiAwLFxyXG4gICAgfTtcclxuXHJcbiAgICBiYXIuZm9yY2VSZW1vdmVBdCA9IGJhci5zdGFydCArIGJhci5kdXJhdGlvbjtcclxuXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLktlZXBFeHBpcmVkVGltZXJCYXJzRm9yU2Vjb25kcylcclxuICAgICAgYmFyLmZvcmNlUmVtb3ZlQXQgKz0gdGhpcy5vcHRpb25zLktlZXBFeHBpcmVkVGltZXJCYXJzRm9yU2Vjb25kcyAqIDEwMDA7XHJcblxyXG4gICAgdGhpcy5lbXVsYXRlZFRpbWVyQmFycy5wdXNoKGJhcik7XHJcbiAgICB0aGlzLiRiYXJDb250YWluZXIuYXBwZW5kKGJhci4kcHJvZ3Jlc3MpO1xyXG4gICAgdGhpcy51cGRhdGVCYXIoYmFyLCBiYXIuc3RhcnQpO1xyXG4gIH1cclxuXHJcbiAgLy8gT3ZlcnJpZGVcclxuICBPblJlbW92ZVRpbWVyKGU6IEV2ZW50LCBleHBpcmVkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBjb25zdCBiYXJzID0gdGhpcy5lbXVsYXRlZFRpbWVyQmFycy5maWx0ZXIoKGJhcikgPT4gYmFyLmV2ZW50LmlkID09PSBlLmlkKTtcclxuXHJcbiAgICBiYXJzLmZvckVhY2goKGJhcikgPT4ge1xyXG4gICAgICBpZiAoIXRoaXMudGltZWxpbmUpXHJcbiAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG5cclxuICAgICAgYmFyLmZvcmNlUmVtb3ZlQXQgPSB0aGlzLnRpbWVsaW5lLnRpbWViYXNlO1xyXG5cclxuICAgICAgaWYgKGV4cGlyZWQgJiYgdGhpcy5vcHRpb25zLktlZXBFeHBpcmVkVGltZXJCYXJzRm9yU2Vjb25kcylcclxuICAgICAgICBiYXIuZm9yY2VSZW1vdmVBdCArPSB0aGlzLm9wdGlvbnMuS2VlcEV4cGlyZWRUaW1lckJhcnNGb3JTZWNvbmRzICogMTAwMDtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBSYWlkYm9zc09wdGlvbnMgfSBmcm9tICcuLi8uLi9yYWlkYm9zc19vcHRpb25zJztcclxuaW1wb3J0IFJhaWRFbXVsYXRvclRpbWVsaW5lVUksIHsgRW11bGF0b3JUaW1lckJhciB9IGZyb20gJy4vUmFpZEVtdWxhdG9yVGltZWxpbmVVSSc7XHJcbmltcG9ydCB7IEV2ZW50IH0gZnJvbSAnLi4vLi4vdGltZWxpbmUnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFpZEVtdWxhdG9yQW5hbHlzaXNUaW1lbGluZVVJIGV4dGVuZHMgUmFpZEVtdWxhdG9yVGltZWxpbmVVSSB7XHJcbiAgY29uc3RydWN0b3Iob3B0aW9uczogUmFpZGJvc3NPcHRpb25zKSB7XHJcbiAgICBzdXBlcihvcHRpb25zKTtcclxuICAgIC8vIFVzZSBvcnBoYW5lZCBjaGlsZCBkaXYgdG8gcHJldmVudCBET00gdXBkYXRlc1xyXG4gICAgdGhpcy4kYmFyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVCYXIoX2JhcjogRW11bGF0b3JUaW1lckJhciwgX2N1cnJlbnRMb2dUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8vIFN0dWJiZWQgb3V0IGZvciBwZXJmb3JtYW5jZVxyXG4gIH1cclxuICBwcm90ZWN0ZWQgT25BZGRUaW1lcihfZmlnaHROb3c6IG51bWJlciwgX2U6IEV2ZW50LCBfY2hhbm5lbGluZzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgLy8gU3R1YmJlZCBvdXQgZm9yIHBlcmZvcm1hbmNlXHJcbiAgfVxyXG5cclxuICBPblJlbW92ZVRpbWVyKF9lOiBFdmVudCwgX2V4cGlyZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIC8vIFN0dWJiZWQgb3V0IGZvciBwZXJmb3JtYW5jZVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgRW11bGF0b3JDb21tb24gZnJvbSAnLi4vRW11bGF0b3JDb21tb24nO1xyXG5pbXBvcnQgRXZlbnRCdXMgZnJvbSAnLi4vRXZlbnRCdXMnO1xyXG5pbXBvcnQgeyBQb3B1cFRleHRHZW5lcmF0b3IgfSBmcm9tICcuLi8uLi9wb3B1cC10ZXh0JztcclxuaW1wb3J0IFJhaWRFbXVsYXRvclRpbWVsaW5lQ29udHJvbGxlciBmcm9tICcuLi9vdmVycmlkZXMvUmFpZEVtdWxhdG9yVGltZWxpbmVDb250cm9sbGVyJztcclxuaW1wb3J0IFBvcHVwVGV4dEFuYWx5c2lzIGZyb20gJy4uL2RhdGEvUG9wdXBUZXh0QW5hbHlzaXMnO1xyXG5pbXBvcnQgeyBUaW1lbGluZUxvYWRlciB9IGZyb20gJy4uLy4uL3RpbWVsaW5lJztcclxuaW1wb3J0IFV0aWwgZnJvbSAnLi4vLi4vLi4vLi4vcmVzb3VyY2VzL3V0aWwnO1xyXG5pbXBvcnQgcmFpZGJvc3NGaWxlRGF0YSBmcm9tICcuLi8uLi9kYXRhL3JhaWRib3NzX21hbmlmZXN0LnR4dCc7XHJcbmltcG9ydCBSYWlkRW11bGF0b3JBbmFseXNpc1RpbWVsaW5lVUkgZnJvbSAnLi4vb3ZlcnJpZGVzL1JhaWRFbXVsYXRvckFuYWx5c2lzVGltZWxpbmVVSSc7XHJcbmltcG9ydCBFbmNvdW50ZXIgZnJvbSAnLi9FbmNvdW50ZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5hbHl6ZWRFbmNvdW50ZXIgZXh0ZW5kcyBFdmVudEJ1cyB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtFbmNvdW50ZXJ9IGVuY291bnRlclxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMsIGVuY291bnRlciwgZW11bGF0b3IpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgdGhpcy5wb3B1cFRleHQgPSBudWxsO1xyXG4gICAgdGhpcy5wZXJzcGVjdGl2ZXMgPSB7fTtcclxuICAgIHRoaXMuZW5jb3VudGVyID0gZW5jb3VudGVyO1xyXG4gICAgdGhpcy5lbXVsYXRvciA9IGVtdWxhdG9yO1xyXG4gIH1cclxuXHJcbiAgc2VsZWN0UGVyc3BlY3RpdmUoSUQpIHtcclxuICAgIGNvbnN0IHBhcnR5TWVtYmVyID0gdGhpcy5lbmNvdW50ZXIuY29tYmF0YW50VHJhY2tlci5jb21iYXRhbnRzW0lEXTtcclxuICAgIHRoaXMucG9wdXBUZXh0LnBhcnR5VHJhY2tlci5vblBhcnR5Q2hhbmdlZCh7XHJcbiAgICAgIHBhcnR5OiB0aGlzLmVuY291bnRlci5jb21iYXRhbnRUcmFja2VyLnBhcnR5TWVtYmVycy5tYXAoKElEKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIG5hbWU6IHRoaXMuZW5jb3VudGVyLmNvbWJhdGFudFRyYWNrZXIuY29tYmF0YW50c1tJRF0ubmFtZSxcclxuICAgICAgICAgIGpvYjogVXRpbC5qb2JUb0pvYkVudW0odGhpcy5lbmNvdW50ZXIuY29tYmF0YW50VHJhY2tlci5jb21iYXRhbnRzW0lEXS5qb2IpLFxyXG4gICAgICAgICAgaW5QYXJ0eTogdHJ1ZSxcclxuICAgICAgICB9O1xyXG4gICAgICB9KSxcclxuICAgIH0pO1xyXG4gICAgdGhpcy5wb3B1cFRleHQuT25QbGF5ZXJDaGFuZ2Uoe1xyXG4gICAgICBkZXRhaWw6IHtcclxuICAgICAgICBuYW1lOiBwYXJ0eU1lbWJlci5uYW1lLFxyXG4gICAgICAgIGpvYjogcGFydHlNZW1iZXIuam9iLFxyXG4gICAgICAgIGN1cnJlbnRIUDogcGFydHlNZW1iZXIuZ2V0U3RhdGUodGhpcy5lbmNvdW50ZXIubG9nTGluZXNbMF0udGltZXN0YW1wKS5IUCxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gICAgdGhpcy5wb3B1cFRleHQuT25DaGFuZ2Vab25lKHtcclxuICAgICAgem9uZU5hbWU6IHRoaXMuZW5jb3VudGVyLmVuY291bnRlclpvbmVOYW1lLFxyXG4gICAgICB6b25lSUQ6IHBhcnNlSW50KHRoaXMuZW5jb3VudGVyLmVuY291bnRlclpvbmVJZCwgMTYpLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBhbmFseXplKHBvcHVwVGV4dCkge1xyXG4gICAgdGhpcy5wb3B1cFRleHQgPSBwb3B1cFRleHQ7XHJcbiAgICAvLyBAVE9ETzogTWFrZSB0aGlzIHJ1biBpbiBwYXJhbGxlbCBzb21ldGltZSBpbiB0aGUgZnV0dXJlLCBzaW5jZSBpdCBjb3VsZCBiZSByZWFsbHkgc2xvdz9cclxuICAgIGZvciAoY29uc3QgaW5kZXggaW4gdGhpcy5lbmNvdW50ZXIuY29tYmF0YW50VHJhY2tlci5wYXJ0eU1lbWJlcnMpXHJcbiAgICAgIGF3YWl0IHRoaXMuYW5hbHl6ZUZvcih0aGlzLmVuY291bnRlci5jb21iYXRhbnRUcmFja2VyLnBhcnR5TWVtYmVyc1tpbmRleF0pO1xyXG5cclxuICAgIHRoaXMuZGlzcGF0Y2goJ2FuYWx5emVkJyk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBhbmFseXplRm9yKElEKSB7XHJcbiAgICBsZXQgY3VycmVudExvZ0luZGV4ID0gMDtcclxuICAgIGNvbnN0IHBhcnR5TWVtYmVyID0gdGhpcy5lbmNvdW50ZXIuY29tYmF0YW50VHJhY2tlci5jb21iYXRhbnRzW0lEXTtcclxuXHJcbiAgICBpZiAoIXBhcnR5TWVtYmVyLmpvYikge1xyXG4gICAgICB0aGlzLnBlcnNwZWN0aXZlc1tJRF0gPSB7XHJcbiAgICAgICAgaW5pdGlhbERhdGE6IHt9LFxyXG4gICAgICAgIHRyaWdnZXJzOiBbXSxcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRpbWVsaW5lVUkgPSBuZXcgUmFpZEVtdWxhdG9yQW5hbHlzaXNUaW1lbGluZVVJKHRoaXMub3B0aW9ucyk7XHJcbiAgICBjb25zdCB0aW1lbGluZUNvbnRyb2xsZXIgPVxyXG4gICAgICAgIG5ldyBSYWlkRW11bGF0b3JUaW1lbGluZUNvbnRyb2xsZXIodGhpcy5vcHRpb25zLCB0aW1lbGluZVVJLCByYWlkYm9zc0ZpbGVEYXRhKTtcclxuICAgIHRpbWVsaW5lQ29udHJvbGxlci5iaW5kVG8odGhpcy5lbXVsYXRvcik7XHJcbiAgICBjb25zdCBwb3B1cFRleHQgPSBuZXcgUG9wdXBUZXh0QW5hbHlzaXMoXHJcbiAgICAgICAgdGhpcy5wb3B1cFRleHQub3B0aW9ucywgbmV3IFRpbWVsaW5lTG9hZGVyKHRpbWVsaW5lQ29udHJvbGxlciksIHJhaWRib3NzRmlsZURhdGEpO1xyXG4gICAgdGltZWxpbmVVSS5wb3B1cFRleHQgPSBwb3B1cFRleHQ7XHJcblxyXG4gICAgdGltZWxpbmVDb250cm9sbGVyLlNldFBvcHVwVGV4dEludGVyZmFjZShuZXcgUG9wdXBUZXh0R2VuZXJhdG9yKHBvcHVwVGV4dCkpO1xyXG5cclxuICAgIHBvcHVwVGV4dC5wYXJ0eVRyYWNrZXIub25QYXJ0eUNoYW5nZWQoe1xyXG4gICAgICBwYXJ0eTogdGhpcy5lbmNvdW50ZXIuY29tYmF0YW50VHJhY2tlci5wYXJ0eU1lbWJlcnMubWFwKChJRCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBuYW1lOiB0aGlzLmVuY291bnRlci5jb21iYXRhbnRUcmFja2VyLmNvbWJhdGFudHNbSURdLm5hbWUsXHJcbiAgICAgICAgICBqb2I6IFV0aWwuam9iVG9Kb2JFbnVtKHRoaXMuZW5jb3VudGVyLmNvbWJhdGFudFRyYWNrZXIuY29tYmF0YW50c1tJRF0uam9iKSxcclxuICAgICAgICAgIGluUGFydHk6IHRydWUsXHJcbiAgICAgICAgfTtcclxuICAgICAgfSksXHJcbiAgICB9KTtcclxuICAgIHBvcHVwVGV4dC5PblBsYXllckNoYW5nZSh7XHJcbiAgICAgIGRldGFpbDoge1xyXG4gICAgICAgIG5hbWU6IHBhcnR5TWVtYmVyLm5hbWUsXHJcbiAgICAgICAgam9iOiBwYXJ0eU1lbWJlci5qb2IsXHJcbiAgICAgICAgY3VycmVudEhQOiBwYXJ0eU1lbWJlci5nZXRTdGF0ZSh0aGlzLmVuY291bnRlci5sb2dMaW5lc1swXS50aW1lc3RhbXApLkhQLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICBwb3B1cFRleHQuT25DaGFuZ2Vab25lKHtcclxuICAgICAgem9uZU5hbWU6IHRoaXMuZW5jb3VudGVyLmVuY291bnRlclpvbmVOYW1lLFxyXG4gICAgICB6b25lSUQ6IHBhcnNlSW50KHRoaXMuZW5jb3VudGVyLmVuY291bnRlclpvbmVJZCwgMTYpLFxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHRpbWVsaW5lQ29udHJvbGxlci5hY3RpdmVUaW1lbGluZSkge1xyXG4gICAgICB0aW1lbGluZUNvbnRyb2xsZXIuYWN0aXZlVGltZWxpbmUuU2V0VHJpZ2dlcihhc3luYyAodHJpZ2dlciwgbWF0Y2hlcykgPT4ge1xyXG4gICAgICAgIC8vIFNvbWUgYXN5bmMgbWFnaWMgaGVyZSwgZm9yY2Ugd2FpdGluZyBmb3IgdGhlIGVudGlyZXR5IG9mXHJcbiAgICAgICAgLy8gdGhlIHRyaWdnZXIgZXhlY3V0aW9uIGJlZm9yZSBjb250aW51aW5nXHJcbiAgICAgICAgY29uc3QgZGVsYXlQcm9taXNlID0gbmV3IFByb21pc2UoKHJlcykgPT4ge1xyXG4gICAgICAgICAgcG9wdXBUZXh0LmRlbGF5UmVzb2x2ZXIgPSByZXM7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzKSA9PiB7XHJcbiAgICAgICAgICBwb3B1cFRleHQucHJvbWlzZVJlc29sdmVyID0gcmVzO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHJ1blByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzKSA9PiB7XHJcbiAgICAgICAgICBwb3B1cFRleHQucnVuUmVzb2x2ZXIgPSByZXM7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRMaW5lID0gdGhpcy5lbmNvdW50ZXIubG9nTGluZXNbY3VycmVudExvZ0luZGV4XTtcclxuXHJcbiAgICAgICAgcG9wdXBUZXh0Lk9uVHJpZ2dlcih0cmlnZ2VyLCBtYXRjaGVzLCBjdXJyZW50TGluZS50aW1lc3RhbXApO1xyXG5cclxuICAgICAgICBhd2FpdCBkZWxheVByb21pc2U7XHJcbiAgICAgICAgYXdhaXQgcHJvbWlzZVByb21pc2U7XHJcbiAgICAgICAgY29uc3QgdHJpZ2dlckhlbHBlciA9IGF3YWl0IHJ1blByb21pc2U7XHJcblxyXG4gICAgICAgIHRyaWdnZXJIZWxwZXIucmVzb2x2ZXIuc3RhdHVzLmZpbmFsRGF0YSA9IEVtdWxhdG9yQ29tbW9uLmNsb25lRGF0YShwb3B1cFRleHQuZGF0YSk7XHJcblxyXG4gICAgICAgIHBvcHVwVGV4dC5jYWxsYmFjayhcclxuICAgICAgICAgICAgY3VycmVudExpbmUsXHJcbiAgICAgICAgICAgIHRyaWdnZXJIZWxwZXIsIHRyaWdnZXJIZWxwZXIucmVzb2x2ZXIuc3RhdHVzKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9wdXBUZXh0LmNhbGxiYWNrID0gKGxvZywgdHJpZ2dlckhlbHBlciwgY3VycmVudFRyaWdnZXJTdGF0dXMsIGZpbmFsRGF0YSkgPT4ge1xyXG4gICAgICB0aGlzLnBlcnNwZWN0aXZlc1tJRF0udHJpZ2dlcnMucHVzaCh7XHJcbiAgICAgICAgdHJpZ2dlckhlbHBlcjogdHJpZ2dlckhlbHBlcixcclxuICAgICAgICBzdGF0dXM6IGN1cnJlbnRUcmlnZ2VyU3RhdHVzLFxyXG4gICAgICAgIGxvZ0xpbmU6IGxvZyxcclxuICAgICAgICByZXNvbHZlZE9mZnNldDogKGxvZy50aW1lc3RhbXAgLSB0aGlzLmVuY291bnRlci5zdGFydFRpbWVzdGFtcCkgK1xyXG4gICAgICAgICAgKGN1cnJlbnRUcmlnZ2VyU3RhdHVzLmRlbGF5ICogMTAwMCksXHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHBvcHVwVGV4dC50cmlnZ2VyUmVzb2x2ZXJzID0gW107XHJcblxyXG4gICAgdGhpcy5wZXJzcGVjdGl2ZXNbSURdID0ge1xyXG4gICAgICBpbml0aWFsRGF0YTogRW11bGF0b3JDb21tb24uY2xvbmVEYXRhKHBvcHVwVGV4dC5kYXRhLCBbXSksXHJcbiAgICAgIHRyaWdnZXJzOiBbXSxcclxuICAgICAgZmluYWxEYXRhOiBwb3B1cFRleHQuZGF0YSxcclxuICAgIH07XHJcblxyXG4gICAgZm9yICg7IGN1cnJlbnRMb2dJbmRleCA8IHRoaXMuZW5jb3VudGVyLmxvZ0xpbmVzLmxlbmd0aDsgKytjdXJyZW50TG9nSW5kZXgpIHtcclxuICAgICAgY29uc3QgbG9nID0gdGhpcy5lbmNvdW50ZXIubG9nTGluZXNbY3VycmVudExvZ0luZGV4XTtcclxuICAgICAgYXdhaXQgdGhpcy5kaXNwYXRjaCgnYW5hbHl6ZUxpbmUnLCBsb2cpO1xyXG5cclxuICAgICAgaWYgKHRoaXMuZW5jb3VudGVyLmNvbWJhdGFudFRyYWNrZXIuY29tYmF0YW50c1tJRF0uaGFzU3RhdGUobG9nLnRpbWVzdGFtcCkpIHtcclxuICAgICAgICBwb3B1cFRleHQuT25QbGF5ZXJDaGFuZ2Uoe1xyXG4gICAgICAgICAgZGV0YWlsOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuZW5jb3VudGVyLmNvbWJhdGFudFRyYWNrZXIuY29tYmF0YW50c1tJRF0ubmFtZSxcclxuICAgICAgICAgICAgam9iOiB0aGlzLmVuY291bnRlci5jb21iYXRhbnRUcmFja2VyLmNvbWJhdGFudHNbSURdLmpvYixcclxuICAgICAgICAgICAgY3VycmVudEhQOiB0aGlzLmVuY291bnRlci5jb21iYXRhbnRUcmFja2VyLmNvbWJhdGFudHNbSURdLmdldFN0YXRlKGxvZy50aW1lc3RhbXApLkhQLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgZXZlbnQgPSB7XHJcbiAgICAgICAgZGV0YWlsOiB7XHJcbiAgICAgICAgICBsb2dzOiBbbG9nXSxcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgYXdhaXQgcG9wdXBUZXh0Lk9uTG9nKGV2ZW50KTtcclxuICAgICAgYXdhaXQgcG9wdXBUZXh0Lk9uTmV0TG9nKGV2ZW50KTtcclxuICAgICAgdGltZWxpbmVDb250cm9sbGVyLk9uTG9nRXZlbnQoZXZlbnQpO1xyXG4gICAgfVxyXG4gICAgdGltZWxpbmVVSS5zdG9wKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBFdmVudEJ1cyBmcm9tICcuLi9FdmVudEJ1cyc7XHJcbmltcG9ydCBBbmFseXplZEVuY291bnRlciBmcm9tICcuL0FuYWx5emVkRW5jb3VudGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhaWRFbXVsYXRvciBleHRlbmRzIEV2ZW50QnVzIHtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgIHRoaXMuZW5jb3VudGVycyA9IFtdO1xyXG4gICAgdGhpcy5jdXJyZW50RW5jb3VudGVyID0gbnVsbDtcclxuICAgIHRoaXMucGxheWluZ0ludGVydmFsID0gbnVsbDtcclxuICAgIHRoaXMuY3VycmVudExvZ0xpbmVJbmRleCA9IG51bGw7XHJcbiAgICB0aGlzLmxhc3RMb2dMaW5lVGltZSA9IG51bGw7XHJcbiAgICB0aGlzLmxhc3RUaWNrVGltZSA9IG51bGw7XHJcbiAgfVxyXG4gIGFkZEVuY291bnRlcihlbmNvdW50ZXIpIHtcclxuICAgIHRoaXMuZW5jb3VudGVycy5wdXNoKGVuY291bnRlcik7XHJcbiAgfVxyXG4gIHNldEN1cnJlbnQoaW5kZXgpIHtcclxuICAgIGNvbnN0IGVuYyA9IHRoaXMuZW5jb3VudGVyc1tpbmRleF07XHJcblxyXG4gICAgLy8gSWYgbGFuZ3VhZ2Ugd2FzIGF1dG9kZXRlY3RlZCBmcm9tIHRoZSBlbmNvdW50ZXIsIHNldCB0aGUgY3VycmVudCBQYXJzZXJMYW5ndWFnZVxyXG4gICAgLy8gYXBwcm9wcmlhdGVseVxyXG4gICAgaWYgKGVuYy5sYW5ndWFnZSlcclxuICAgICAgdGhpcy5vcHRpb25zLlBhcnNlckxhbmd1YWdlID0gZW5jLmxhbmd1YWdlO1xyXG5cclxuICAgIHRoaXMuY3VycmVudEVuY291bnRlciA9IG5ldyBBbmFseXplZEVuY291bnRlcih0aGlzLm9wdGlvbnMsIGVuYywgdGhpcyk7XHJcbiAgICB0aGlzLmRpc3BhdGNoKCdwcmVDdXJyZW50RW5jb3VudGVyQ2hhbmdlZCcsIHRoaXMuY3VycmVudEVuY291bnRlcik7XHJcbiAgICB0aGlzLmN1cnJlbnRFbmNvdW50ZXIuYW5hbHl6ZSh0aGlzLnBvcHVwVGV4dCkudGhlbigoKSA9PiB7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2goJ2N1cnJlbnRFbmNvdW50ZXJDaGFuZ2VkJywgdGhpcy5jdXJyZW50RW5jb3VudGVyKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBzZXRDdXJyZW50QnlJRChpZCkge1xyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmVuY291bnRlcnMuZmluZEluZGV4KCh2KSA9PiB2LmlkID09PSBpZCk7XHJcbiAgICBpZiAoaW5kZXggPT09IC0xKVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5zZXRDdXJyZW50KGluZGV4KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgc2VsZWN0UGVyc3BlY3RpdmUoSUQpIHtcclxuICAgIHRoaXMuY3VycmVudEVuY291bnRlci5zZWxlY3RQZXJzcGVjdGl2ZShJRCk7XHJcbiAgICB0aGlzLnNlZWtUbyh0aGlzLmN1cnJlbnRMb2dUaW1lKTtcclxuICB9XHJcblxyXG4gIHBsYXkoKSB7XHJcbiAgICBpZiAodGhpcy5jdXJyZW50RW5jb3VudGVyID09PSBudWxsKVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgY29uc3QgZmlyc3RJbmRleCA9IHRoaXMuY3VycmVudEVuY291bnRlci5lbmNvdW50ZXIuZmlyc3RMaW5lSW5kZXg7XHJcblxyXG4gICAgdGhpcy5jdXJyZW50TG9nVGltZSA9IHRoaXMuY3VycmVudExvZ1RpbWUgfHxcclxuICAgICAgdGhpcy5jdXJyZW50RW5jb3VudGVyLmVuY291bnRlci5sb2dMaW5lc1tmaXJzdEluZGV4XS50aW1lc3RhbXA7XHJcbiAgICB0aGlzLmN1cnJlbnRMb2dMaW5lSW5kZXggPSB0aGlzLmN1cnJlbnRMb2dMaW5lSW5kZXggfHwgZmlyc3RJbmRleCAtIDE7XHJcbiAgICB0aGlzLmxhc3RUaWNrVGltZSA9IERhdGUubm93KCk7XHJcbiAgICB0aGlzLnBsYXlpbmdJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLnRpY2suYmluZCh0aGlzKSwgUmFpZEVtdWxhdG9yLnBsYXliYWNrU3BlZWQpO1xyXG4gICAgdGhpcy5kaXNwYXRjaCgncGxheScpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBwYXVzZSgpIHtcclxuICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMucGxheWluZ0ludGVydmFsKTtcclxuICAgIHRoaXMubGFzdFRpY2tUaW1lID0gbnVsbDtcclxuICAgIHRoaXMucGxheWluZ0ludGVydmFsID0gbnVsbDtcclxuICAgIHRoaXMuZGlzcGF0Y2goJ3BhdXNlJyk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHNlZWsodGltZU9mZnNldCkge1xyXG4gICAgY29uc3Qgc2Vla1RpbWVzdGFtcCA9IHRoaXMuY3VycmVudEVuY291bnRlci5lbmNvdW50ZXIuc3RhcnRUaW1lc3RhbXAgKyB0aW1lT2Zmc2V0O1xyXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2Vla1RvKHNlZWtUaW1lc3RhbXApO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2Vla1RvKHNlZWtUaW1lc3RhbXApIHtcclxuICAgIGF3YWl0IHRoaXMuZGlzcGF0Y2goJ3ByZVNlZWsnLCBzZWVrVGltZXN0YW1wKTtcclxuICAgIHRoaXMuY3VycmVudExvZ0xpbmVJbmRleCA9IC0xO1xyXG4gICAgbGV0IGxvZ3MgPSBbXTtcclxuICAgIGNvbnN0IHBsYXlpbmcgPSB0aGlzLnBsYXlpbmdJbnRlcnZhbCAhPT0gbnVsbDtcclxuICAgIGlmIChwbGF5aW5nKVxyXG4gICAgICB0aGlzLnBhdXNlKCk7XHJcbiAgICBmb3IgKGxldCBpID0gdGhpcy5jdXJyZW50TG9nTGluZUluZGV4ICsgMTtcclxuICAgICAgaSA8IHRoaXMuY3VycmVudEVuY291bnRlci5lbmNvdW50ZXIubG9nTGluZXMubGVuZ3RoO1xyXG4gICAgICArK2kpIHtcclxuICAgICAgY29uc3QgbGluZSA9IHRoaXMuY3VycmVudEVuY291bnRlci5lbmNvdW50ZXIubG9nTGluZXNbaV07XHJcbiAgICAgIGlmIChsaW5lLnRpbWVzdGFtcCA8PSBzZWVrVGltZXN0YW1wKSB7XHJcbiAgICAgICAgbG9ncy5wdXNoKGxpbmUpO1xyXG4gICAgICAgIC8vIEJ1bmNoIGVtaXR0ZWQgbGluZXMgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcclxuICAgICAgICBpZiAobG9ncy5sZW5ndGggPiAxMDApIHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMuZGlzcGF0Y2goJ2VtaXRMb2dzJywgeyBsb2dzOiBsb2dzIH0pO1xyXG4gICAgICAgICAgbG9ncyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN1cnJlbnRMb2dUaW1lID0gdGhpcy5sYXN0TG9nTGluZVRpbWUgPSBsaW5lLnRpbWVzdGFtcDtcclxuICAgICAgICArK3RoaXMuY3VycmVudExvZ0xpbmVJbmRleDtcclxuICAgICAgICBhd2FpdCB0aGlzLmRpc3BhdGNoKCdtaWRTZWVrJywgbGluZSk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRW1pdCBhbnkgcmVtYWluaW5nIGxpbmVzIGlmIG5lZWRlZFxyXG4gICAgaWYgKGxvZ3MubGVuZ3RoKSB7XHJcbiAgICAgIGF3YWl0IHRoaXMuZGlzcGF0Y2goJ2VtaXRMb2dzJywgeyBsb2dzOiBsb2dzIH0pO1xyXG4gICAgICBhd2FpdCB0aGlzLmRpc3BhdGNoKCdtaWRTZWVrJywgbG9ncy5wb3AoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgdGhpcy5kaXNwYXRjaCgncG9zdFNlZWsnLCBzZWVrVGltZXN0YW1wKTtcclxuICAgIGF3YWl0IHRoaXMuZGlzcGF0Y2goJ3RpY2snLCB0aGlzLmN1cnJlbnRMb2dUaW1lLCB0aGlzLmxhc3RMb2dMaW5lVGltZSk7XHJcbiAgICBpZiAocGxheWluZylcclxuICAgICAgdGhpcy5wbGF5KCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyB0aWNrKCkge1xyXG4gICAgaWYgKHRoaXMuY3VycmVudExvZ0xpbmVJbmRleCArIDEgPj0gdGhpcy5jdXJyZW50RW5jb3VudGVyLmVuY291bnRlci5sb2dMaW5lcy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5wYXVzZSgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5wbGF5aW5nSW50ZXJ2YWwgPT09IG51bGwpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGNvbnN0IGxvZ3MgPSBbXTtcclxuICAgIGNvbnN0IHRpbWVEaWZmID0gRGF0ZS5ub3coKSAtIHRoaXMubGFzdFRpY2tUaW1lO1xyXG4gICAgY29uc3QgbGFzdFRpbWVzdGFtcCA9IHRoaXMuY3VycmVudExvZ1RpbWUgKyB0aW1lRGlmZjtcclxuICAgIGZvciAobGV0IGkgPSB0aGlzLmN1cnJlbnRMb2dMaW5lSW5kZXggKyAxO1xyXG4gICAgICBpIDwgdGhpcy5jdXJyZW50RW5jb3VudGVyLmVuY291bnRlci5sb2dMaW5lcy5sZW5ndGg7XHJcbiAgICAgICsraSkge1xyXG4gICAgICBpZiAodGhpcy5jdXJyZW50RW5jb3VudGVyLmVuY291bnRlci5sb2dMaW5lc1tpXS50aW1lc3RhbXAgPD0gbGFzdFRpbWVzdGFtcCkge1xyXG4gICAgICAgIGxvZ3MucHVzaCh0aGlzLmN1cnJlbnRFbmNvdW50ZXIuZW5jb3VudGVyLmxvZ0xpbmVzW2ldKTtcclxuICAgICAgICB0aGlzLmxhc3RMb2dMaW5lVGltZSA9IHRoaXMuY3VycmVudEVuY291bnRlci5lbmNvdW50ZXIubG9nTGluZXNbaV0udGltZXN0YW1wO1xyXG4gICAgICAgICsrdGhpcy5jdXJyZW50TG9nTGluZUluZGV4O1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jdXJyZW50TG9nVGltZSArPSB0aW1lRGlmZjtcclxuICAgIHRoaXMubGFzdFRpY2tUaW1lICs9IHRpbWVEaWZmO1xyXG4gICAgaWYgKGxvZ3MubGVuZ3RoKVxyXG4gICAgICBhd2FpdCB0aGlzLmRpc3BhdGNoKCdlbWl0TG9ncycsIHsgbG9nczogbG9ncyB9KTtcclxuXHJcbiAgICBhd2FpdCB0aGlzLmRpc3BhdGNoKCd0aWNrJywgdGhpcy5jdXJyZW50TG9nVGltZSwgdGhpcy5sYXN0TG9nTGluZVRpbWUpO1xyXG4gIH1cclxuXHJcbiAgc2V0UG9wdXBUZXh0KHBvcHVwVGV4dCkge1xyXG4gICAgdGhpcy5wb3B1cFRleHQgPSBwb3B1cFRleHQ7XHJcbiAgfVxyXG59XHJcblxyXG5SYWlkRW11bGF0b3IucGxheWJhY2tTcGVlZCA9IDEwO1xyXG4iLCJpbXBvcnQgeyBjYWxsT3ZlcmxheUhhbmRsZXIsIGFkZE92ZXJsYXlMaXN0ZW5lciwgcmVtb3ZlT3ZlcmxheUxpc3RlbmVyLCBzZXRDYWxsT3ZlcmxheUhhbmRsZXJPdmVycmlkZSB9IGZyb20gJy4uLy4uLy4uLy4uL3Jlc291cmNlcy9vdmVybGF5X3BsdWdpbl9hcGknO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFpZEVtdWxhdG9yT3ZlcmxheUFwaUhvb2sge1xyXG4gIGNvbnN0cnVjdG9yKGVtdWxhdG9yKSB7XHJcbiAgICB0aGlzLmVtdWxhdG9yID0gZW11bGF0b3I7XHJcbiAgICB0aGlzLm9yaWdpbmFsQ2FsbCA9IHNldENhbGxPdmVybGF5SGFuZGxlck92ZXJyaWRlKHRoaXMuY2FsbC5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMuY3VycmVudExvZ1RpbWUgPSAwO1xyXG5cclxuICAgIGVtdWxhdG9yLm9uKCd0aWNrJywgKGN1cnJlbnRMb2dUaW1lKSA9PiB7XHJcbiAgICAgIHRoaXMuY3VycmVudExvZ1RpbWUgPSBjdXJyZW50TG9nVGltZTtcclxuICAgIH0pO1xyXG4gICAgZW11bGF0b3Iub24oJ3ByZVNlZWsnLCAoY3VycmVudExvZ1RpbWUpID0+IHtcclxuICAgICAgdGhpcy5jdXJyZW50TG9nVGltZSA9IDA7XHJcbiAgICB9KTtcclxuICAgIGVtdWxhdG9yLm9uKCdwcmVDdXJyZW50RW5jb3VudGVyQ2hhbmdlZCcsIChlbmNvdW50ZXIpID0+IHtcclxuICAgICAgdGhpcy5jdXJyZW50TG9nVGltZSA9IDA7XHJcbiAgICAgIGVuY291bnRlci5vbignYW5hbHl6ZUxpbmUnLCAobG9nKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TG9nVGltZSA9IGxvZy50aW1lc3RhbXA7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjYWxsKG1zZykge1xyXG4gICAgaWYgKG1zZy5jYWxsID09PSAnZ2V0Q29tYmF0YW50cycpIHtcclxuICAgICAgY29uc3QgdHJhY2tlciA9IHRoaXMuZW11bGF0b3IuY3VycmVudEVuY291bnRlci5lbmNvdW50ZXIuY29tYmF0YW50VHJhY2tlcjtcclxuICAgICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy5jdXJyZW50TG9nVGltZTtcclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMpID0+IHtcclxuICAgICAgICBjb25zdCBjb21iYXRhbnRzID0gW107XHJcbiAgICAgICAgY29uc3QgaGFzSWRzID0gbXNnLmlkcyAhPT0gdW5kZWZpbmVkICYmIG1zZy5pZHMubGVuZ3RoID4gMDtcclxuICAgICAgICBjb25zdCBoYXNOYW1lcyA9IG1zZy5uYW1lcyAhPT0gdW5kZWZpbmVkICYmIG1zZy5uYW1lcy5sZW5ndGggPiAwO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IFtpZCwgY29tYmF0YW50XSBvZiBPYmplY3QuZW50cmllcyh0cmFja2VyLmNvbWJhdGFudHMpKSB7XHJcbiAgICAgICAgICAvLyBuZXh0U2lnbmlmaWNhbnRTdGF0ZSBpcyBhIGJpdCBpbmVmZmljaWVudCBidXQgZ2l2ZW4gdGhhdCB0aGlzIGlzbid0IHJ1biBldmVyeSB0aWNrXHJcbiAgICAgICAgICAvLyB3ZSBjYW4gYWZmb3JkIHRvIGJlIGEgYml0IGluZWZmaWNpZW50IGZvciByZWFkYWJpbGl0eSdzIHNha2VcclxuICAgICAgICAgIGNvbnN0IGNvbWJhdGFudFN0YXRlID0ge1xyXG4gICAgICAgICAgICBJRDogY29tYmF0YW50LmlkLFxyXG4gICAgICAgICAgICBOYW1lOiBjb21iYXRhbnQubmFtZSxcclxuICAgICAgICAgICAgTGV2ZWw6IGNvbWJhdGFudC5sZXZlbCxcclxuICAgICAgICAgICAgSm9iOiBjb21iYXRhbnQuam9iLFxyXG4gICAgICAgICAgICAuLi5jb21iYXRhbnQubmV4dFNpZ25pZmljYW50U3RhdGUodGltZXN0YW1wKS50b1BsdWdpblN0YXRlKCksXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgaWYgKCFoYXNJZHMgJiYgIWhhc05hbWVzKVxyXG4gICAgICAgICAgICBjb21iYXRhbnRzLnB1c2goY29tYmF0YW50U3RhdGUpO1xyXG4gICAgICAgICAgZWxzZSBpZiAoaGFzSWRzICYmIG1zZy5pZHMuaW5jbHVkZXMocGFyc2VJbnQoaWQsIDE2KSkpXHJcbiAgICAgICAgICAgIGNvbWJhdGFudHMucHVzaChjb21iYXRhbnRTdGF0ZSk7XHJcbiAgICAgICAgICBlbHNlIGlmIChoYXNOYW1lcyAmJiBtc2cubmFtZXMuaW5jbHVkZXModHJhY2tlci5jb21iYXRhbnRzW2lkXS5uYW1lKSlcclxuICAgICAgICAgICAgY29tYmF0YW50cy5wdXNoKGNvbWJhdGFudFN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQFRPRE86IE1vdmUgdGhpcyB0byB0cmFjayBwcm9wZXJseSBvbiB0aGUgQ29tYmF0YW50IG9iamVjdFxyXG4gICAgICAgIGNvbWJhdGFudHMuZm9yRWFjaCgoYykgPT4ge1xyXG4gICAgICAgICAgY29uc3QgbGluZXMgPSB0aGlzLmVtdWxhdG9yLmN1cnJlbnRFbmNvdW50ZXIuZW5jb3VudGVyLmxvZ0xpbmVzXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKGwpID0+IGwuZGVjRXZlbnQgPT09IDMgJiYgbC5pZCA9PT0gYy5JRCk7XHJcbiAgICAgICAgICBpZiAobGluZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjLk93bmVySUQgPSBwYXJzZUludChsaW5lc1swXS5vd25lcklkKTtcclxuICAgICAgICAgICAgYy5CTnBjTmFtZUlEID0gcGFyc2VJbnQobGluZXNbMF0ubnBjTmFtZUlkKTtcclxuICAgICAgICAgICAgYy5CTnBjSUQgPSBwYXJzZUludChsaW5lc1swXS5ucGNCYXNlSWQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJlcyh7XHJcbiAgICAgICAgICBjb21iYXRhbnRzOiBjb21iYXRhbnRzLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLm9yaWdpbmFsQ2FsbChtc2cpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgU3R1YmJlZFBvcHVwVGV4dCBmcm9tICcuLi9vdmVycmlkZXMvU3R1YmJlZFBvcHVwVGV4dCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYWlkRW11bGF0b3JQb3B1cFRleHQgZXh0ZW5kcyBTdHViYmVkUG9wdXBUZXh0IHtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zLCB0aW1lbGluZUxvYWRlciwgcmFpZGJvc3NGaWxlRGF0YSkge1xyXG4gICAgc3VwZXIob3B0aW9ucywgdGltZWxpbmVMb2FkZXIsIHJhaWRib3NzRmlsZURhdGEpO1xyXG4gICAgdGhpcy4kcG9wdXBUZXh0Q29udGFpbmVyV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC10ZXh0LWNvbnRhaW5lci1vdXRlcicpO1xyXG4gICAgdGhpcy5lbXVsYXRlZE9mZnNldCA9IDA7XHJcblxyXG4gICAgdGhpcy5lbXVsYXRvciA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5kaXNwbGF5ZWRUZXh0ID0gW107XHJcbiAgICB0aGlzLnNjaGVkdWxlZFRyaWdnZXJzID0gW107XHJcblxyXG4gICAgdGhpcy5zZWVraW5nID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy4kdGV4dEVsZW1lbnRUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlLnRleHRFbGVtZW50JykuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZDtcclxuXHJcbiAgICB0aGlzLmF1ZGlvRGVidWdUZXh0RHVyYXRpb24gPSAyMDAwO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZG9VcGRhdGUoY3VycmVudExvZ1RpbWUpIHtcclxuICAgIHRoaXMuZW11bGF0ZWRPZmZzZXQgPSBjdXJyZW50TG9nVGltZTtcclxuICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLnNjaGVkdWxlZFRyaWdnZXJzKSB7XHJcbiAgICAgIGNvbnN0IHJlbWFpbmluZyA9IHQuZXhwaXJlcyAtIGN1cnJlbnRMb2dUaW1lO1xyXG4gICAgICBpZiAocmVtYWluaW5nIDw9IDApIHtcclxuICAgICAgICB0LnJlc29sdmVyKCk7XHJcbiAgICAgICAgYXdhaXQgdC5wcm9taXNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLnNjaGVkdWxlZFRyaWdnZXJzID0gdGhpcy5zY2hlZHVsZWRUcmlnZ2Vycy5maWx0ZXIoKHQpID0+IHtcclxuICAgICAgcmV0dXJuIHQuZXhwaXJlcyAtIGN1cnJlbnRMb2dUaW1lID4gMDtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5kaXNwbGF5ZWRUZXh0ID0gdGhpcy5kaXNwbGF5ZWRUZXh0LmZpbHRlcigodCkgPT4ge1xyXG4gICAgICBjb25zdCByZW1haW5pbmcgPSB0LmV4cGlyZXMgLSBjdXJyZW50TG9nVGltZTtcclxuICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcclxuICAgICAgICB0LmVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwLXRleHQtcmVtYWluaW5nJykudGV4dENvbnRlbnQgPSAnKCcgKyAocmVtYWluaW5nIC8gMTAwMCkudG9GaXhlZCgxKSArICcpJztcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICB0LmVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgT25Mb2cobG9ncykge1xyXG4gICAgZm9yIChjb25zdCBsIG9mIGxvZ3MpIHtcclxuICAgICAgY29uc3QgbG9nID0gbC5wcm9wZXJDYXNlQ29udmVydGVkTGluZSB8fCBsLmNvbnZlcnRlZExpbmU7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gbC50aW1lc3RhbXA7XHJcbiAgICAgIGlmIChsb2cuaW5jbHVkZXMoJzAwOjAwMzg6Y2FjdGJvdCB3aXBlJykpXHJcbiAgICAgICAgdGhpcy5TZXRJbkNvbWJhdChmYWxzZSk7XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2YgdGhpcy50cmlnZ2Vycykge1xyXG4gICAgICAgIGNvbnN0IHIgPSBsb2cubWF0Y2godHJpZ2dlci5sb2NhbFJlZ2V4KTtcclxuICAgICAgICBpZiAocilcclxuICAgICAgICAgIHRoaXMuT25UcmlnZ2VyKHRyaWdnZXIsIHIsIGN1cnJlbnRUaW1lKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgT25OZXRMb2cobG9ncykge1xyXG4gICAgZm9yIChjb25zdCBsIG9mIGxvZ3MpIHtcclxuICAgICAgY29uc3QgbG9nID0gbC5uZXR3b3JrTGluZTtcclxuICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBsLnRpbWVzdGFtcDtcclxuICAgICAgZm9yIChjb25zdCB0cmlnZ2VyIG9mIHRoaXMubmV0VHJpZ2dlcnMpIHtcclxuICAgICAgICBjb25zdCByID0gbG9nLm1hdGNoKHRyaWdnZXIubG9jYWxOZXRSZWdleCk7XHJcbiAgICAgICAgaWYgKHIpXHJcbiAgICAgICAgICB0aGlzLk9uVHJpZ2dlcih0cmlnZ2VyLCByLCBjdXJyZW50VGltZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGJpbmRUbyhlbXVsYXRvcikge1xyXG4gICAgdGhpcy5lbXVsYXRvciA9IGVtdWxhdG9yO1xyXG4gICAgZW11bGF0b3Iub24oJ2VtaXRMb2dzJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuT25Mb2coZXZlbnQubG9ncyk7XHJcbiAgICAgIHRoaXMuT25OZXRMb2coZXZlbnQubG9ncyk7XHJcbiAgICB9KTtcclxuICAgIGVtdWxhdG9yLm9uKCd0aWNrJywgYXN5bmMgKGN1cnJlbnRMb2dUaW1lKSA9PiB7XHJcbiAgICAgIGF3YWl0IHRoaXMuZG9VcGRhdGUoY3VycmVudExvZ1RpbWUpO1xyXG4gICAgfSk7XHJcbiAgICBlbXVsYXRvci5vbignbWlkU2VlaycsIGFzeW5jIChsaW5lKSA9PiB7XHJcbiAgICAgIGF3YWl0IHRoaXMuZG9VcGRhdGUobGluZS50aW1lc3RhbXApO1xyXG4gICAgfSk7XHJcbiAgICBlbXVsYXRvci5vbigncHJlU2VlaycsICh0aW1lKSA9PiB7XHJcbiAgICAgIHRoaXMuc2Vla2luZyA9IHRydWU7XHJcbiAgICAgIHRoaXMuX2VtdWxhdG9yUmVzZXQoKTtcclxuICAgIH0pO1xyXG4gICAgZW11bGF0b3Iub24oJ3Bvc3RTZWVrJywgYXN5bmMgKHRpbWUpID0+IHtcclxuICAgICAgLy8gVGhpcyBpcyBhIGhhY2t5IGZpeCBmb3IgYXVkaW8gc3RpbGwgcGxheWluZyBkdXJpbmcgc2Vla1xyXG4gICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZWVraW5nID0gZmFsc2U7XHJcbiAgICAgIH0sIDUpO1xyXG4gICAgfSk7XHJcbiAgICBlbXVsYXRvci5vbignY3VycmVudEVuY291bnRlckNoYW5nZWQnLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2VtdWxhdG9yUmVzZXQoKTtcclxuICAgICAgdGhpcy5PbkNoYW5nZVpvbmUoe1xyXG4gICAgICAgIHpvbmVOYW1lOiBlbXVsYXRvci5jdXJyZW50RW5jb3VudGVyLmVuY291bnRlci5lbmNvdW50ZXJab25lTmFtZSxcclxuICAgICAgICB6b25lSUQ6IHBhcnNlSW50KGVtdWxhdG9yLmN1cnJlbnRFbmNvdW50ZXIuZW5jb3VudGVyLmVuY291bnRlclpvbmVJZCwgMTYpLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2VtdWxhdG9yUmVzZXQoKSB7XHJcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5zY2hlZHVsZWRUcmlnZ2VycylcclxuICAgICAgaS5yZWplY3RlcigpO1xyXG5cclxuICAgIHRoaXMuc2NoZWR1bGVkVHJpZ2dlcnMgPSBbXTtcclxuICAgIHRoaXMuZGlzcGxheWVkVGV4dCA9IHRoaXMuZGlzcGxheWVkVGV4dC5maWx0ZXIoKHQpID0+IHtcclxuICAgICAgdC5lbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9KTtcclxuICAgIHRoaXMudHJpZ2dlclN1cHByZXNzID0gW107XHJcbiAgfVxyXG5cclxuICBfY3JlYXRlVGV4dEZvcih0cmlnZ2VySGVscGVyLCB0ZXh0LCB0ZXh0VHlwZSwgbG93ZXJUZXh0S2V5LCBkdXJhdGlvbikge1xyXG4gICAgY29uc3QgdGV4dEVsZW1lbnRDbGFzcyA9IHRleHRUeXBlICsgJy10ZXh0JztcclxuICAgIGNvbnN0IGUgPSB0aGlzLl9tYWtlVGV4dEVsZW1lbnQodHJpZ2dlckhlbHBlciwgdGV4dCwgdGV4dEVsZW1lbnRDbGFzcyk7XHJcbiAgICB0aGlzLmFkZERpc3BsYXlUZXh0KGUsIHRoaXMuZW11bGF0ZWRPZmZzZXQgKyAoZHVyYXRpb24gKiAxMDAwKSk7XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxEZWxheVNlY29uZHModHJpZ2dlckhlbHBlcikge1xyXG4gICAgY29uc3QgZGVsYXkgPSAnZGVsYXlTZWNvbmRzJyBpbiB0cmlnZ2VySGVscGVyLnRyaWdnZXIgPyB0cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbih0cmlnZ2VySGVscGVyLnRyaWdnZXIuZGVsYXlTZWNvbmRzKSA6IDA7XHJcblxyXG4gICAgaWYgKCFkZWxheSB8fCBkZWxheSA8PSAwKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICBsZXQgcmVzb2x2ZXI7XHJcbiAgICBsZXQgcmVqZWN0ZXI7XHJcbiAgICBjb25zdCByZXQgPSBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcclxuICAgICAgcmVzb2x2ZXIgPSByZXM7XHJcbiAgICAgIHJlamVjdGVyID0gcmVqO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnNjaGVkdWxlZFRyaWdnZXJzLnB1c2goe1xyXG4gICAgICBleHBpcmVzOiB0aGlzLmVtdWxhdGVkT2Zmc2V0ICsgKGRlbGF5ICogMTAwMCksXHJcbiAgICAgIHByb21pc2U6IHJldCxcclxuICAgICAgcmVzb2x2ZXI6IHJlc29sdmVyLFxyXG4gICAgICByZWplY3RlcjogcmVqZWN0ZXIsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG5cclxuICBfcGxheUF1ZGlvRmlsZSh0cmlnZ2VySGVscGVyLCB1cmwsIHZvbHVtZSkge1xyXG4gICAgaWYgKCFbdGhpcy5vcHRpb25zLkluZm9Tb3VuZCwgdGhpcy5vcHRpb25zLkFsZXJ0U291bmQsIHRoaXMub3B0aW9ucy5BbGFybVNvdW5kXVxyXG4gICAgICAuaW5jbHVkZXModXJsKSkge1xyXG4gICAgICBjb25zdCBkaXYgPSB0aGlzLl9tYWtlVGV4dEVsZW1lbnQodHJpZ2dlckhlbHBlciwgdXJsLCAnYXVkaW8tZmlsZScpO1xyXG4gICAgICB0aGlzLmFkZERpc3BsYXlUZXh0KGRpdiwgdGhpcy5lbXVsYXRlZE9mZnNldCArIHRoaXMuYXVkaW9EZWJ1Z1RleHREdXJhdGlvbik7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5zZWVraW5nKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgc3VwZXIuX3BsYXlBdWRpb0ZpbGUodHJpZ2dlckhlbHBlciwgdXJsLCB2b2x1bWUpO1xyXG4gIH1cclxuICB0dHNTYXkodHRzVGV4dCkge1xyXG4gICAgaWYgKHRoaXMuc2Vla2luZylcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGRpdiA9IHRoaXMuX21ha2VUZXh0RWxlbWVudCh0cmlnZ2VySGVscGVyLCB0dHNUZXh0LCAndHRzLXRleHQnKTtcclxuICAgIHRoaXMuYWRkRGlzcGxheVRleHQoZGl2LCB0aGlzLmVtdWxhdGVkT2Zmc2V0ICsgdGhpcy5hdWRpb0RlYnVnVGV4dER1cmF0aW9uKTtcclxuICAgIHN1cGVyLnR0c1NheSh0dHNUZXh0KTtcclxuICB9XHJcblxyXG4gIF9tYWtlVGV4dEVsZW1lbnQodHJpZ2dlckhlbHBlciwgdGV4dCwgY2xhc3NOYW1lKSB7XHJcbiAgICBjb25zdCAkcmV0ID0gdGhpcy4kdGV4dEVsZW1lbnRUZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAkcmV0LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcclxuICAgICRyZXQucXVlcnlTZWxlY3RvcignLnBvcHVwLXRleHQnKS50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgICByZXR1cm4gJHJldDtcclxuICB9XHJcblxyXG4gIGFkZERpc3BsYXlUZXh0KCRlLCBlbmRUaW1lc3RhbXApIHtcclxuICAgIGNvbnN0IHJlbWFpbmluZyA9IChlbmRUaW1lc3RhbXAgLSB0aGlzLmVtdWxhdGVkT2Zmc2V0KSAvIDEwMDA7XHJcbiAgICAkZS5xdWVyeVNlbGVjdG9yKCcucG9wdXAtdGV4dC1yZW1haW5pbmcnKS50ZXh0Q29udGVudCA9ICcoJyArIHJlbWFpbmluZy50b0ZpeGVkKDEpICsgJyknO1xyXG4gICAgdGhpcy4kcG9wdXBUZXh0Q29udGFpbmVyV3JhcHBlci5hcHBlbmQoJGUpO1xyXG4gICAgdGhpcy5kaXNwbGF5ZWRUZXh0LnB1c2goe1xyXG4gICAgICBlbGVtZW50OiAkZSxcclxuICAgICAgZXhwaXJlczogZW5kVGltZXN0YW1wLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsIlxuaW1wb3J0IHdvcmtlciBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5saW5lLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFdvcmtlcl9mbigpIHtcbiAgcmV0dXJuIHdvcmtlcihcIi8qKioqKiovICgoKSA9PiB7IC8vIHdlYnBhY2tCb290c3RyYXBcXG4vKioqKioqLyBcXHRcXFwidXNlIHN0cmljdFxcXCI7XFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9yZXNvdXJjZXMvcmVnZXhlcy50c1xcbmNvbnN0IHN0YXJ0c1VzaW5nUGFyYW1zID0gWyd0aW1lc3RhbXAnLCAnc291cmNlJywgJ2lkJywgJ2FiaWxpdHknLCAndGFyZ2V0JywgJ2NhcHR1cmUnXTtcXG5jb25zdCBhYmlsaXR5UGFyYW1zID0gWyd0aW1lc3RhbXAnLCAnc291cmNlJywgJ3NvdXJjZUlkJywgJ2lkJywgJ2FiaWxpdHknLCAndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ2NhcHR1cmUnXTtcXG5jb25zdCBhYmlsaXR5RnVsbFBhcmFtcyA9IFtcXG4gICAgJ3RpbWVzdGFtcCcsXFxuICAgICdzb3VyY2VJZCcsXFxuICAgICdzb3VyY2UnLFxcbiAgICAnaWQnLFxcbiAgICAnYWJpbGl0eScsXFxuICAgICd0YXJnZXRJZCcsXFxuICAgICd0YXJnZXQnLFxcbiAgICAnZmxhZ3MnLFxcbiAgICAnZmxhZzAnLFxcbiAgICAnZmxhZzEnLFxcbiAgICAnZmxhZzInLFxcbiAgICAnZmxhZzMnLFxcbiAgICAnZmxhZzQnLFxcbiAgICAnZmxhZzUnLFxcbiAgICAnZmxhZzYnLFxcbiAgICAnZmxhZzcnLFxcbiAgICAnZmxhZzgnLFxcbiAgICAnZmxhZzknLFxcbiAgICAnZmxhZzEwJyxcXG4gICAgJ2ZsYWcxMScsXFxuICAgICdmbGFnMTInLFxcbiAgICAnZmxhZzEzJyxcXG4gICAgJ2ZsYWcxNCcsXFxuICAgICd0YXJnZXRIcCcsXFxuICAgICd0YXJnZXRNYXhIcCcsXFxuICAgICd0YXJnZXRNcCcsXFxuICAgICd0YXJnZXRNYXhNcCcsXFxuICAgICd0YXJnZXRYJyxcXG4gICAgJ3RhcmdldFknLFxcbiAgICAndGFyZ2V0WicsXFxuICAgICd0YXJnZXRIZWFkaW5nJyxcXG4gICAgJ2hwJyxcXG4gICAgJ21heEhwJyxcXG4gICAgJ21wJyxcXG4gICAgJ21heE1wJyxcXG4gICAgJ3gnLFxcbiAgICAneScsXFxuICAgICd6JyxcXG4gICAgJ2hlYWRpbmcnLFxcbiAgICAnY2FwdHVyZScsXFxuXTtcXG5jb25zdCBoZWFkTWFya2VyUGFyYW1zID0gWyd0aW1lc3RhbXAnLCAndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ2lkJywgJ2NhcHR1cmUnXTtcXG5jb25zdCBhZGRlZENvbWJhdGFudFBhcmFtcyA9IFsndGltZXN0YW1wJywgJ25hbWUnLCAnY2FwdHVyZSddO1xcbmNvbnN0IGFkZGVkQ29tYmF0YW50RnVsbFBhcmFtcyA9IFtcXG4gICAgJ3RpbWVzdGFtcCcsXFxuICAgICdpZCcsXFxuICAgICduYW1lJyxcXG4gICAgJ2pvYicsXFxuICAgICdsZXZlbCcsXFxuICAgICdocCcsXFxuICAgICd4JyxcXG4gICAgJ3knLFxcbiAgICAneicsXFxuICAgICducGNJZCcsXFxuICAgICdjYXB0dXJlJyxcXG5dO1xcbmNvbnN0IHJlbW92aW5nQ29tYmF0YW50UGFyYW1zID0gW1xcbiAgICAndGltZXN0YW1wJyxcXG4gICAgJ2lkJyxcXG4gICAgJ25hbWUnLFxcbiAgICAnaHAnLFxcbiAgICAneCcsXFxuICAgICd5JyxcXG4gICAgJ3onLFxcbiAgICAnY2FwdHVyZScsXFxuXTtcXG5jb25zdCBnYWluc0VmZmVjdFBhcmFtcyA9IFsndGltZXN0YW1wJywgJ3RhcmdldElkJywgJ3RhcmdldCcsICdlZmZlY3QnLCAnc291cmNlJywgJ2R1cmF0aW9uJywgJ2NhcHR1cmUnXTtcXG5jb25zdCBzdGF0dXNFZmZlY3RFeHBsaWNpdFBhcmFtcyA9IFtcXG4gICAgJ3RpbWVzdGFtcCcsXFxuICAgICd0YXJnZXRJZCcsXFxuICAgICd0YXJnZXQnLFxcbiAgICAnam9iJyxcXG4gICAgJ2hwJyxcXG4gICAgJ21heEhwJyxcXG4gICAgJ21wJyxcXG4gICAgJ21heE1wJyxcXG4gICAgJ3gnLFxcbiAgICAneScsXFxuICAgICd6JyxcXG4gICAgJ2hlYWRpbmcnLFxcbiAgICAnZGF0YTAnLFxcbiAgICAnZGF0YTEnLFxcbiAgICAnZGF0YTInLFxcbiAgICAnZGF0YTMnLFxcbiAgICAnZGF0YTQnLFxcbiAgICAnY2FwdHVyZScsXFxuXTtcXG5jb25zdCBsb3Nlc0VmZmVjdFBhcmFtcyA9IFsndGltZXN0YW1wJywgJ3RhcmdldElkJywgJ3RhcmdldCcsICdlZmZlY3QnLCAnc291cmNlJywgJ2NhcHR1cmUnXTtcXG5jb25zdCBzdGF0Q2hhbmdlUGFyYW1zID0gW1xcbiAgICAndGltZXN0YW1wJyxcXG4gICAgJ2pvYicsXFxuICAgICdzdHJlbmd0aCcsXFxuICAgICdkZXh0ZXJpdHknLFxcbiAgICAndml0YWxpdHknLFxcbiAgICAnaW50ZWxsaWdlbmNlJyxcXG4gICAgJ21pbmQnLFxcbiAgICAncGlldHknLFxcbiAgICAnYXR0YWNrUG93ZXInLFxcbiAgICAnZGlyZWN0SGl0JyxcXG4gICAgJ2NyaXRpY2FsSGl0JyxcXG4gICAgJ2F0dGFja01hZ2ljUG90ZW5jeScsXFxuICAgICdoZWFsTWFnaWNQb3RlbmN5JyxcXG4gICAgJ2RldGVybWluYXRpb24nLFxcbiAgICAnc2tpbGxTcGVlZCcsXFxuICAgICdzcGVsbFNwZWVkJyxcXG4gICAgJ3RlbmFjaXR5JyxcXG4gICAgJ2NhcHR1cmUnLFxcbl07XFxuY29uc3QgdGV0aGVyUGFyYW1zID0gWyd0aW1lc3RhbXAnLCAnc291cmNlJywgJ3NvdXJjZUlkJywgJ3RhcmdldCcsICd0YXJnZXRJZCcsICdpZCcsICdjYXB0dXJlJ107XFxuY29uc3Qgd2FzRGVmZWF0ZWRQYXJhbXMgPSBbJ3RpbWVzdGFtcCcsICd0YXJnZXQnLCAnc291cmNlJywgJ2NhcHR1cmUnXTtcXG5jb25zdCBoYXNIUFBhcmFtcyA9IFsndGltZXN0YW1wJywgJ25hbWUnLCAnaHAnLCAnY2FwdHVyZSddO1xcbmNvbnN0IGVjaG9QYXJhbXMgPSBbJ3RpbWVzdGFtcCcsICdjb2RlJywgJ2xpbmUnLCAnY2FwdHVyZSddO1xcbmNvbnN0IGRpYWxvZ1BhcmFtcyA9IFsndGltZXN0YW1wJywgJ2NvZGUnLCAnbGluZScsICduYW1lJywgJ2NhcHR1cmUnXTtcXG5jb25zdCBtZXNzYWdlUGFyYW1zID0gWyd0aW1lc3RhbXAnLCAnY29kZScsICdsaW5lJywgJ2NhcHR1cmUnXTtcXG5jb25zdCBnYW1lTG9nUGFyYW1zID0gWyd0aW1lc3RhbXAnLCAnY29kZScsICdsaW5lJywgJ2NhcHR1cmUnXTtcXG5jb25zdCBnYW1lTmFtZUxvZ1BhcmFtcyA9IFsndGltZXN0YW1wJywgJ2NvZGUnLCAnbmFtZScsICdsaW5lJywgJ2NhcHR1cmUnXTtcXG5jb25zdCBjaGFuZ2Vab25lUGFyYW1zID0gWyd0aW1lc3RhbXAnLCAnbmFtZScsICdjYXB0dXJlJ107XFxuY29uc3QgbmV0d29yazZkUGFyYW1zID0gWyd0aW1lc3RhbXAnLCAnaW5zdGFuY2UnLCAnY29tbWFuZCcsICdkYXRhMCcsICdkYXRhMScsICdkYXRhMicsICdkYXRhMycsICdjYXB0dXJlJ107XFxuY2xhc3MgUmVnZXhlcyB7XFxuICAgIC8qKlxcbiAgICAgKiBmaWVsZHM6IHNvdXJjZSwgaWQsIGFiaWxpdHksIHRhcmdldCwgY2FwdHVyZVxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMTQtbmV0d29ya3N0YXJ0c2Nhc3RpbmdcXG4gICAgICovXFxuICAgIHN0YXRpYyBzdGFydHNVc2luZyhmKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxcbiAgICAgICAgICAgIGYgPSB7fTtcXG4gICAgICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoZiwgJ3N0YXJ0c1VzaW5nJywgc3RhcnRzVXNpbmdQYXJhbXMpO1xcbiAgICAgICAgY29uc3QgY2FwdHVyZSA9IFJlZ2V4ZXMudHJ1ZUlmVW5kZWZpbmVkKGYuY2FwdHVyZSk7XFxuICAgICAgICBsZXQgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxcXFxcXHl7VGltZXN0YW1wfScpICtcXG4gICAgICAgICAgICAnIDE0OicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdpZCcsIGYuaWQsICdcXFxcXFxcXHl7QWJpbGl0eUNvZGV9JykgKyAnOic7XFxuICAgICAgICBpZiAoZi5zb3VyY2UgfHwgZi5pZCB8fCBmLnRhcmdldCB8fCBjYXB0dXJlKVxcbiAgICAgICAgICAgIHN0ciArPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnc291cmNlJywgZi5zb3VyY2UsICcuKj8nKSArICcgc3RhcnRzIHVzaW5nICc7XFxuICAgICAgICBpZiAoZi5hYmlsaXR5IHx8IGYudGFyZ2V0IHx8IGNhcHR1cmUpXFxuICAgICAgICAgICAgc3RyICs9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdhYmlsaXR5JywgZi5hYmlsaXR5LCAnLio/JykgKyAnIG9uICc7XFxuICAgICAgICBpZiAoZi50YXJnZXQgfHwgY2FwdHVyZSlcXG4gICAgICAgICAgICBzdHIgKz0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RhcmdldCcsIGYudGFyZ2V0LCAnLio/JykgKyAnXFxcXFxcXFwuJztcXG4gICAgICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIGZpZWxkczogc291cmNlSWQsIHNvdXJjZSwgaWQsIGFiaWxpdHksIHRhcmdldElkLCB0YXJnZXQsIGNhcHR1cmVcXG4gICAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzE1LW5ldHdvcmthYmlsaXR5XFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxNi1uZXR3b3JrYW9lYWJpbGl0eVxcbiAgICAgKi9cXG4gICAgc3RhdGljIGFiaWxpdHkoZikge1xcbiAgICAgICAgaWYgKHR5cGVvZiBmID09PSAndW5kZWZpbmVkJylcXG4gICAgICAgICAgICBmID0ge307XFxuICAgICAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdhYmlsaXR5JywgYWJpbGl0eVBhcmFtcyk7XFxuICAgICAgICBjb25zdCBjYXB0dXJlID0gUmVnZXhlcy50cnVlSWZVbmRlZmluZWQoZi5jYXB0dXJlKTtcXG4gICAgICAgIGxldCBzdHIgPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGltZXN0YW1wJywgJ1xcXFxcXFxceXtUaW1lc3RhbXB9JykgK1xcbiAgICAgICAgICAgICcgMVs1Nl06JyArIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdzb3VyY2VJZCcsICdcXFxcXFxcXHl7T2JqZWN0SWR9JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdzb3VyY2UnLCBmLnNvdXJjZSwgJ1teOl0qPycpICsgJzonO1xcbiAgICAgICAgaWYgKGYuaWQgfHwgZi5hYmlsaXR5IHx8IGYudGFyZ2V0IHx8IGYudGFyZ2V0SWQgfHwgY2FwdHVyZSlcXG4gICAgICAgICAgICBzdHIgKz0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2lkJywgZi5pZCwgJ1xcXFxcXFxceXtBYmlsaXR5Q29kZX0nKSArICc6JztcXG4gICAgICAgIGlmIChmLmFiaWxpdHkgfHwgZi50YXJnZXQgfHwgZi50YXJnZXRJZCB8fCBjYXB0dXJlKVxcbiAgICAgICAgICAgIHN0ciArPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnYWJpbGl0eScsIGYuYWJpbGl0eSwgJ1teOl0qPycpICsgJzonO1xcbiAgICAgICAgaWYgKGYudGFyZ2V0IHx8IGYudGFyZ2V0SWQgfHwgY2FwdHVyZSlcXG4gICAgICAgICAgICBzdHIgKz0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RhcmdldElkJywgJ1xcXFxcXFxceXtPYmplY3RJZH0nKSArICc6JztcXG4gICAgICAgIGlmIChmLnRhcmdldCB8fCBjYXB0dXJlKVxcbiAgICAgICAgICAgIHN0ciArPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0JywgZi50YXJnZXQsICdbXjpdKj8nKSArICc6JztcXG4gICAgICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIGZpZWxkczogc291cmNlSWQsIHNvdXJjZSwgaWQsIGFiaWxpdHksIHRhcmdldElkLCB0YXJnZXQsIGZsYWdzLCB4LCB5LCB6LCBoZWFkaW5nLCBjYXB0dXJlXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxNS1uZXR3b3JrYWJpbGl0eVxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMTYtbmV0d29ya2FvZWFiaWxpdHlcXG4gICAgICovXFxuICAgIHN0YXRpYyBhYmlsaXR5RnVsbChmKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxcbiAgICAgICAgICAgIGYgPSB7fTtcXG4gICAgICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoZiwgJ2FiaWxpdHlGdWxsJywgYWJpbGl0eUZ1bGxQYXJhbXMpO1xcbiAgICAgICAgY29uc3QgY2FwdHVyZSA9IFJlZ2V4ZXMudHJ1ZUlmVW5kZWZpbmVkKGYuY2FwdHVyZSk7XFxuICAgICAgICBjb25zdCBzdHIgPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGltZXN0YW1wJywgJ1xcXFxcXFxceXtUaW1lc3RhbXB9JykgK1xcbiAgICAgICAgICAgICcgMVs1Nl06JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3NvdXJjZUlkJywgZi5zb3VyY2VJZCwgJ1xcXFxcXFxceXtPYmplY3RJZH0nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3NvdXJjZScsIGYuc291cmNlLCAnW146XSo/JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdpZCcsIGYuaWQsICdcXFxcXFxcXHl7QWJpbGl0eUNvZGV9JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdhYmlsaXR5JywgZi5hYmlsaXR5LCAnW146XSo/JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRJZCcsIGYudGFyZ2V0SWQsICdcXFxcXFxcXHl7T2JqZWN0SWR9JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXQnLCBmLnRhcmdldCwgJ1teOl0qPycpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZ3MnLCBmLmZsYWdzLCAnW146XSo/JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdmbGFnMCcsIGYuZmxhZzAsICdbXjpdKj8nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2ZsYWcxJywgZi5mbGFnMSwgJ1teOl0qPycpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzInLCBmLmZsYWcyLCAnW146XSo/JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdmbGFnMycsIGYuZmxhZzMsICdbXjpdKj8nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2ZsYWc0JywgZi5mbGFnNCwgJ1teOl0qPycpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzUnLCBmLmZsYWc1LCAnW146XSo/JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdmbGFnNicsIGYuZmxhZzYsICdbXjpdKj8nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2ZsYWc3JywgZi5mbGFnNywgJ1teOl0qPycpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzgnLCBmLmZsYWc4LCAnW146XSo/JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdmbGFnOScsIGYuZmxhZzksICdbXjpdKj8nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2ZsYWcxMCcsIGYuZmxhZzEwLCAnW146XSo/JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdmbGFnMTEnLCBmLmZsYWcxMSwgJ1teOl0qPycpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzEyJywgZi5mbGFnMTIsICdbXjpdKj8nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2ZsYWcxMycsIGYuZmxhZzEzLCAnW146XSo/JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdmbGFnMTQnLCBmLmZsYWcxMywgJ1teOl0qPycpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm9wdGlvbmFsKFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRIcCcsIGYudGFyZ2V0SHAsICdcXFxcXFxcXHl7RmxvYXR9JykpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm9wdGlvbmFsKFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRNYXhIcCcsIGYudGFyZ2V0TWF4SHAsICdcXFxcXFxcXHl7RmxvYXR9JykpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm9wdGlvbmFsKFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRNcCcsIGYudGFyZ2V0TXAsICdcXFxcXFxcXHl7RmxvYXR9JykpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm9wdGlvbmFsKFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRNYXhNcCcsIGYudGFyZ2V0TWF4TXAsICdcXFxcXFxcXHl7RmxvYXR9JykpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm9wdGlvbmFsKCdcXFxcXFxcXHl7RmxvYXR9JykgKyAnOicgKyAvLyBUYXJnZXQgVFBcXG4gICAgICAgICAgICBSZWdleGVzLm9wdGlvbmFsKCdcXFxcXFxcXHl7RmxvYXR9JykgKyAnOicgKyAvLyBUYXJnZXQgTWF4IFRQXFxuICAgICAgICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0WCcsIGYudGFyZ2V0WCwgJ1xcXFxcXFxceXtGbG9hdH0nKSkgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMub3B0aW9uYWwoUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RhcmdldFknLCBmLnRhcmdldFksICdcXFxcXFxcXHl7RmxvYXR9JykpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm9wdGlvbmFsKFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRaJywgZi50YXJnZXRaLCAnXFxcXFxcXFx5e0Zsb2F0fScpKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0SGVhZGluZycsIGYudGFyZ2V0SGVhZGluZywgJ1xcXFxcXFxceXtGbG9hdH0nKSkgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdocCcsIGYuaHAsICdcXFxcXFxcXHl7RmxvYXR9JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdtYXhIcCcsIGYubWF4SHAsICdcXFxcXFxcXHl7RmxvYXR9JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdtcCcsIGYubXAsICdcXFxcXFxcXHl7RmxvYXR9JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdtYXhNcCcsIGYubWF4TXAsICdcXFxcXFxcXHl7RmxvYXR9JykgKyAnOicgK1xcbiAgICAgICAgICAgICdcXFxcXFxcXHl7RmxvYXR9OicgKyAvLyBTb3VyY2UgVFBcXG4gICAgICAgICAgICAnXFxcXFxcXFx5e0Zsb2F0fTonICsgLy8gU291cmNlIE1heCBUUFxcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd4JywgZi54LCAnXFxcXFxcXFx5e0Zsb2F0fScpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAneScsIGYueSwgJ1xcXFxcXFxceXtGbG9hdH0nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3onLCBmLnosICdcXFxcXFxcXHl7RmxvYXR9JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdoZWFkaW5nJywgZi5oZWFkaW5nLCAnXFxcXFxcXFx5e0Zsb2F0fScpICsgJzonICtcXG4gICAgICAgICAgICAnLio/JCc7IC8vIFVua25vd24gbGFzdCBmaWVsZFxcbiAgICAgICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogZmllbGRzOiB0YXJnZXRJZCwgdGFyZ2V0LCBpZCwgY2FwdHVyZVxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMWItbmV0d29ya3RhcmdldGljb24taGVhZC1tYXJrZXJzXFxuICAgICAqL1xcbiAgICBzdGF0aWMgaGVhZE1hcmtlcihmKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxcbiAgICAgICAgICAgIGYgPSB7fTtcXG4gICAgICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoZiwgJ2hlYWRNYXJrZXInLCBoZWFkTWFya2VyUGFyYW1zKTtcXG4gICAgICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xcbiAgICAgICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxcXFxcXHl7VGltZXN0YW1wfScpICtcXG4gICAgICAgICAgICAnIDFCOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRJZCcsIGYudGFyZ2V0SWQsICdcXFxcXFxcXHl7T2JqZWN0SWR9JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXQnLCBmLnRhcmdldCwgJ1teOl0qPycpICsgJzouLi4uOi4uLi46JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2lkJywgZi5pZCwgJy4uLi4nKSArICc6JztcXG4gICAgICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XFxuICAgIH1cXG4gICAgLy8gZmllbGRzOiBuYW1lLCBjYXB0dXJlXFxuICAgIC8vIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMy1hZGRjb21iYXRhbnRcXG4gICAgc3RhdGljIGFkZGVkQ29tYmF0YW50KGYpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXFxuICAgICAgICAgICAgZiA9IHt9O1xcbiAgICAgICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnYWRkZWRDb21iYXRhbnQnLCBhZGRlZENvbWJhdGFudFBhcmFtcyk7XFxuICAgICAgICBjb25zdCBjYXB0dXJlID0gUmVnZXhlcy50cnVlSWZVbmRlZmluZWQoZi5jYXB0dXJlKTtcXG4gICAgICAgIGNvbnN0IHN0ciA9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0aW1lc3RhbXAnLCAnXFxcXFxcXFx5e1RpbWVzdGFtcH0nKSArXFxuICAgICAgICAgICAgJyAwMzpcXFxcXFxcXHl7T2JqZWN0SWR9OkFkZGVkIG5ldyBjb21iYXRhbnQgJyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ25hbWUnLCBmLm5hbWUsICcuKj8nKSArICdcXFxcXFxcXC4nO1xcbiAgICAgICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogZmllbGRzOiBpZCwgbmFtZSwgaHAsIHgsIHksIHosIG5wY0lkLCBjYXB0dXJlXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMy1hZGRjb21iYXRhbnRcXG4gICAgICovXFxuICAgIHN0YXRpYyBhZGRlZENvbWJhdGFudEZ1bGwoZikge1xcbiAgICAgICAgaWYgKHR5cGVvZiBmID09PSAndW5kZWZpbmVkJylcXG4gICAgICAgICAgICBmID0ge307XFxuICAgICAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdhZGRlZENvbWJhdGFudEZ1bGwnLCBhZGRlZENvbWJhdGFudEZ1bGxQYXJhbXMpO1xcbiAgICAgICAgY29uc3QgY2FwdHVyZSA9IFJlZ2V4ZXMudHJ1ZUlmVW5kZWZpbmVkKGYuY2FwdHVyZSk7XFxuICAgICAgICBjb25zdCBzdHIgPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGltZXN0YW1wJywgJ1xcXFxcXFxceXtUaW1lc3RhbXB9JykgK1xcbiAgICAgICAgICAgICcgMDM6JyArIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdpZCcsIGYuaWQsICdcXFxcXFxcXHl7T2JqZWN0SWR9JykgK1xcbiAgICAgICAgICAgICc6QWRkZWQgbmV3IGNvbWJhdGFudCAnICsgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ25hbWUnLCBmLm5hbWUsICdbXjpdKj8nKSArXFxuICAgICAgICAgICAgJ1xcXFxcXFxcLiB7Mn1Kb2I6ICcgKyBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnam9iJywgZi5qb2IsICdbXjpdKj8nKSArXFxuICAgICAgICAgICAgJyBMZXZlbDogJyArIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdsZXZlbCcsIGYubGV2ZWwsICdbXjpdKj8nKSArXFxuICAgICAgICAgICAgJyBNYXggSFA6ICcgKyBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnaHAnLCBmLmhwLCAnWzAtOV0rJykgKyAnXFxcXC4nICtcXG4gICAgICAgICAgICAnLio/UG9zOiBcXFxcXFxcXCgnICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAneCcsIGYueCwgJ1xcXFxcXFxceXtGbG9hdH0nKSArICcsJyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3knLCBmLnksICdcXFxcXFxcXHl7RmxvYXR9JykgKyAnLCcgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd6JywgZi56LCAnXFxcXFxcXFx5e0Zsb2F0fScpICsgJ1xcXFxcXFxcKScgK1xcbiAgICAgICAgICAgICcoPzogXFxcXFxcXFwoJyArIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICducGNJZCcsIGYubnBjSWQsICcuKj8nKSArICdcXFxcXFxcXCkpP1xcXFxcXFxcLic7XFxuICAgICAgICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBmaWVsZHM6IGlkLCBuYW1lLCBocCwgY2FwdHVyZVxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMDQtcmVtb3ZlY29tYmF0YW50XFxuICAgICAqL1xcbiAgICBzdGF0aWMgcmVtb3ZpbmdDb21iYXRhbnQoZikge1xcbiAgICAgICAgaWYgKHR5cGVvZiBmID09PSAndW5kZWZpbmVkJylcXG4gICAgICAgICAgICBmID0ge307XFxuICAgICAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdyZW1vdmluZ0NvbWJhdGFudCcsIHJlbW92aW5nQ29tYmF0YW50UGFyYW1zKTtcXG4gICAgICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xcbiAgICAgICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxcXFxcXHl7VGltZXN0YW1wfScpICtcXG4gICAgICAgICAgICAnIDA0OicgKyBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnaWQnLCAnXFxcXFxcXFx5e09iamVjdElkfScpICtcXG4gICAgICAgICAgICAnOlJlbW92aW5nIGNvbWJhdGFudCAnICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnbmFtZScsIGYubmFtZSwgJy4qPycpICsgJ1xcXFxcXFxcLicgK1xcbiAgICAgICAgICAgICcuKj9NYXggSFA6ICcgKyBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnaHAnLCBmLmhwLCAnWzAtOV0rJykgKyAnXFxcXC4nICtcXG4gICAgICAgICAgICBSZWdleGVzLm9wdGlvbmFsKCcuKj9Qb3M6IFxcXFxcXFxcKCcgK1xcbiAgICAgICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAneCcsIGYueCwgJ1xcXFxcXFxceXtGbG9hdH0nKSArICcsJyArXFxuICAgICAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd5JywgZi55LCAnXFxcXFxcXFx5e0Zsb2F0fScpICsgJywnICtcXG4gICAgICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3onLCBmLnosICdcXFxcXFxcXHl7RmxvYXR9JykgKyAnXFxcXFxcXFwpJyk7XFxuICAgICAgICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xcbiAgICB9XFxuICAgIC8vIGZpZWxkczogdGFyZ2V0SWQsIHRhcmdldCwgZWZmZWN0LCBzb3VyY2UsIGR1cmF0aW9uLCBjYXB0dXJlXFxuICAgIC8vIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxYS1uZXR3b3JrYnVmZlxcbiAgICBzdGF0aWMgZ2FpbnNFZmZlY3QoZikge1xcbiAgICAgICAgaWYgKHR5cGVvZiBmID09PSAndW5kZWZpbmVkJylcXG4gICAgICAgICAgICBmID0ge307XFxuICAgICAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdnYWluc0VmZmVjdCcsIGdhaW5zRWZmZWN0UGFyYW1zKTtcXG4gICAgICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xcbiAgICAgICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxcXFxcXHl7VGltZXN0YW1wfScpICtcXG4gICAgICAgICAgICAnIDFBOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRJZCcsIGYudGFyZ2V0SWQsICdcXFxcXFxcXHl7T2JqZWN0SWR9JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXQnLCBmLnRhcmdldCwgJy4qPycpICtcXG4gICAgICAgICAgICAnIGdhaW5zIHRoZSBlZmZlY3Qgb2YgJyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2VmZmVjdCcsIGYuZWZmZWN0LCAnLio/JykgK1xcbiAgICAgICAgICAgICcgZnJvbSAnICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnc291cmNlJywgZi5zb3VyY2UsICcuKj8nKSArXFxuICAgICAgICAgICAgJyBmb3IgJyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2R1cmF0aW9uJywgZi5kdXJhdGlvbiwgJ1xcXFxcXFxceXtGbG9hdH0nKSArXFxuICAgICAgICAgICAgJyBTZWNvbmRzXFxcXFxcXFwuJztcXG4gICAgICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIFByZWZlciBnYWluc0VmZmVjdCBvdmVyIHRoaXMgZnVuY3Rpb24gdW5sZXNzIHlvdSByZWFsbHkgbmVlZCBleHRyYSBkYXRhLlxcbiAgICAgKiBmaWVsZHM6IHRhcmdldElkLCB0YXJnZXQsIGpvYiwgaHAsIG1heEhwLCBtcCwgbWF4TXAsIHgsIHksIHosIGhlYWRpbmcsXFxuICAgICAqICAgICAgICAgZGF0YTAsIGRhdGExLCBkYXRhMiwgZGF0YTMsIGRhdGE0XFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMyNi1uZXR3b3Jrc3RhdHVzZWZmZWN0c1xcbiAgICAgKi9cXG4gICAgc3RhdGljIHN0YXR1c0VmZmVjdEV4cGxpY2l0KGYpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXFxuICAgICAgICAgICAgZiA9IHt9O1xcbiAgICAgICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnc3RhdHVzRWZmZWN0RXhwbGljaXQnLCBzdGF0dXNFZmZlY3RFeHBsaWNpdFBhcmFtcyk7XFxuICAgICAgICBjb25zdCBjYXB0dXJlID0gUmVnZXhlcy50cnVlSWZVbmRlZmluZWQoZi5jYXB0dXJlKTtcXG4gICAgICAgIGNvbnN0IGtGaWVsZCA9ICcuKj86JztcXG4gICAgICAgIGNvbnN0IHN0ciA9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0aW1lc3RhbXAnLCAnXFxcXFxcXFx5e1RpbWVzdGFtcH0nKSArXFxuICAgICAgICAgICAgJyAyNjonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0SWQnLCBmLnRhcmdldElkLCAnXFxcXFxcXFx5e09iamVjdElkfScpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0JywgZi50YXJnZXQsICdbXjpdKj8nKSArICc6JyArXFxuICAgICAgICAgICAgJ1swLTlBLUZdezAsNn0nICsgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2pvYicsIGYuam9iLCAnWzAtOUEtRl17MCwyfScpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnaHAnLCBmLmhwLCAnXFxcXFxcXFx5e0Zsb2F0fScpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnbWF4SHAnLCBmLm1heEhwLCAnXFxcXFxcXFx5e0Zsb2F0fScpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnbXAnLCBmLm1wLCAnXFxcXFxcXFx5e0Zsb2F0fScpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnbWF4TXAnLCBmLm1heE1wLCAnXFxcXFxcXFx5e0Zsb2F0fScpICsgJzonICtcXG4gICAgICAgICAgICBrRmllbGQgKyAvLyB0cCBsb2xcXG4gICAgICAgICAgICBrRmllbGQgKyAvLyBtYXggdHAgZXh0cmEgbG9sXFxuICAgICAgICAgICAgLy8geCwgeSwgeiBoZWFkaW5nIG1heSBiZSBibGFua1xcbiAgICAgICAgICAgIFJlZ2V4ZXMub3B0aW9uYWwoUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3gnLCBmLngsICdcXFxcXFxcXHl7RmxvYXR9JykpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm9wdGlvbmFsKFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd5JywgZi55LCAnXFxcXFxcXFx5e0Zsb2F0fScpKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAneicsIGYueiwgJ1xcXFxcXFxceXtGbG9hdH0nKSkgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMub3B0aW9uYWwoUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2hlYWRpbmcnLCBmLmhlYWRpbmcsICdcXFxcXFxcXHl7RmxvYXR9JykpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZGF0YTAnLCBmLmRhdGEwLCAnW146XSo/JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdkYXRhMScsIGYuZGF0YTEsICdbXjpdKj8nKSArICc6JyArXFxuICAgICAgICAgICAgLy8gZGF0YTIsIDMsIDQgbWF5IG5vdCBleGlzdCBhbmQgdGhlIGxpbmUgbWF5IHRlcm1pbmF0ZS5cXG4gICAgICAgICAgICBSZWdleGVzLm9wdGlvbmFsKFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdkYXRhMicsIGYuZGF0YTIsICdbXjpdKj8nKSArICc6JykgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMub3B0aW9uYWwoUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2RhdGEzJywgZi5kYXRhMywgJ1teOl0qPycpICsgJzonKSArXFxuICAgICAgICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZGF0YTQnLCBmLmRhdGE0LCAnW146XSo/JykgKyAnOicpO1xcbiAgICAgICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogZmllbGRzOiB0YXJnZXRJZCwgdGFyZ2V0LCBlZmZlY3QsIHNvdXJjZSwgY2FwdHVyZVxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMWUtbmV0d29ya2J1ZmZyZW1vdmVcXG4gICAgICovXFxuICAgIHN0YXRpYyBsb3Nlc0VmZmVjdChmKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxcbiAgICAgICAgICAgIGYgPSB7fTtcXG4gICAgICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoZiwgJ2xvc2VzRWZmZWN0JywgbG9zZXNFZmZlY3RQYXJhbXMpO1xcbiAgICAgICAgY29uc3QgY2FwdHVyZSA9IFJlZ2V4ZXMudHJ1ZUlmVW5kZWZpbmVkKGYuY2FwdHVyZSk7XFxuICAgICAgICBjb25zdCBzdHIgPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGltZXN0YW1wJywgJ1xcXFxcXFxceXtUaW1lc3RhbXB9JykgK1xcbiAgICAgICAgICAgICcgMUU6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RhcmdldElkJywgZi50YXJnZXRJZCwgJ1xcXFxcXFxceXtPYmplY3RJZH0nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RhcmdldCcsIGYudGFyZ2V0LCAnLio/JykgK1xcbiAgICAgICAgICAgICcgbG9zZXMgdGhlIGVmZmVjdCBvZiAnICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZWZmZWN0JywgZi5lZmZlY3QsICcuKj8nKSArXFxuICAgICAgICAgICAgJyBmcm9tICcgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdzb3VyY2UnLCBmLnNvdXJjZSwgJy4qPycpICsgJ1xcXFxcXFxcLic7XFxuICAgICAgICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBmaWVsZHM6IHNvdXJjZSwgc291cmNlSWQsIHRhcmdldCwgdGFyZ2V0SWQsIGlkLCBjYXB0dXJlXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMyMy1uZXR3b3JrdGV0aGVyXFxuICAgICAqL1xcbiAgICBzdGF0aWMgdGV0aGVyKGYpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXFxuICAgICAgICAgICAgZiA9IHt9O1xcbiAgICAgICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAndGV0aGVyJywgdGV0aGVyUGFyYW1zKTtcXG4gICAgICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xcbiAgICAgICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxcXFxcXHl7VGltZXN0YW1wfScpICtcXG4gICAgICAgICAgICAnIDIzOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdzb3VyY2VJZCcsIGYuc291cmNlSWQsICdcXFxcXFxcXHl7T2JqZWN0SWR9JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdzb3VyY2UnLCBmLnNvdXJjZSwgJ1teOl0qPycpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0SWQnLCBmLnRhcmdldElkLCAnXFxcXFxcXFx5e09iamVjdElkfScpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0JywgZi50YXJnZXQsICdbXjpdKj8nKSArXFxuICAgICAgICAgICAgJzouLi4uOi4uLi46JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2lkJywgZi5pZCwgJy4uLi4nKSArICc6JztcXG4gICAgICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqICd0YXJnZXQnIHdhcyBkZWZlYXRlZCBieSAnc291cmNlJ1xcbiAgICAgKiBmaWVsZHM6IHRhcmdldCwgc291cmNlLCBjYXB0dXJlXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxOS1uZXR3b3JrZGVhdGhcXG4gICAgICovXFxuICAgIHN0YXRpYyB3YXNEZWZlYXRlZChmKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxcbiAgICAgICAgICAgIGYgPSB7fTtcXG4gICAgICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoZiwgJ3dhc0RlZmVhdGVkJywgd2FzRGVmZWF0ZWRQYXJhbXMpO1xcbiAgICAgICAgY29uc3QgY2FwdHVyZSA9IFJlZ2V4ZXMudHJ1ZUlmVW5kZWZpbmVkKGYuY2FwdHVyZSk7XFxuICAgICAgICBjb25zdCBzdHIgPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGltZXN0YW1wJywgJ1xcXFxcXFxceXtUaW1lc3RhbXB9JykgK1xcbiAgICAgICAgICAgICcgMTk6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RhcmdldCcsIGYudGFyZ2V0LCAnLio/JykgK1xcbiAgICAgICAgICAgICcgd2FzIGRlZmVhdGVkIGJ5ICcgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdzb3VyY2UnLCBmLnNvdXJjZSwgJy4qPycpICsgJ1xcXFxcXFxcLic7XFxuICAgICAgICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBmaWVsZHM6IG5hbWUsIGhwLCBjYXB0dXJlXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwZC1jb21iYXRhbnRocFxcbiAgICAgKi9cXG4gICAgc3RhdGljIGhhc0hQKGYpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXFxuICAgICAgICAgICAgZiA9IHt9O1xcbiAgICAgICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnaGFzSFAnLCBoYXNIUFBhcmFtcyk7XFxuICAgICAgICBjb25zdCBjYXB0dXJlID0gUmVnZXhlcy50cnVlSWZVbmRlZmluZWQoZi5jYXB0dXJlKTtcXG4gICAgICAgIGNvbnN0IHN0ciA9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0aW1lc3RhbXAnLCAnXFxcXFxcXFx5e1RpbWVzdGFtcH0nKSArXFxuICAgICAgICAgICAgJyAwRDonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnbmFtZScsIGYubmFtZSwgJy4qPycpICtcXG4gICAgICAgICAgICAnIEhQIGF0ICcgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdocCcsIGYuaHAsICdcXFxcXFxcXGQrJykgKyAnJSc7XFxuICAgICAgICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBmaWVsZHM6IGNvZGUsIGxpbmUsIGNhcHR1cmVcXG4gICAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzAwLWxvZ2xpbmVcXG4gICAgICovXFxuICAgIHN0YXRpYyBlY2hvKGYpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXFxuICAgICAgICAgICAgZiA9IHt9O1xcbiAgICAgICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnZWNobycsIGVjaG9QYXJhbXMpO1xcbiAgICAgICAgcmV0dXJuIFJlZ2V4ZXMuZ2FtZUxvZyh7XFxuICAgICAgICAgICAgbGluZTogZi5saW5lLFxcbiAgICAgICAgICAgIGNhcHR1cmU6IGYuY2FwdHVyZSxcXG4gICAgICAgICAgICBjb2RlOiAnMDAzOCcsXFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogZmllbGRzOiBjb2RlLCBsaW5lLCBuYW1lLCBjYXB0dXJlXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMC1sb2dsaW5lXFxuICAgICAqL1xcbiAgICBzdGF0aWMgZGlhbG9nKGYpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXFxuICAgICAgICAgICAgZiA9IHt9O1xcbiAgICAgICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnZGlhbG9nJywgZGlhbG9nUGFyYW1zKTtcXG4gICAgICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xcbiAgICAgICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxcXFxcXHl7VGltZXN0YW1wfScpICtcXG4gICAgICAgICAgICAnIDAwOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdjb2RlJywgJzAwNDQnKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ25hbWUnLCBmLm5hbWUsICcuKj8nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2xpbmUnLCBmLmxpbmUsICcuKicpICsgJyQnO1xcbiAgICAgICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogZmllbGRzOiBjb2RlLCBsaW5lLCBjYXB0dXJlXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMC1sb2dsaW5lXFxuICAgICAqL1xcbiAgICBzdGF0aWMgbWVzc2FnZShmKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxcbiAgICAgICAgICAgIGYgPSB7fTtcXG4gICAgICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoZiwgJ21lc3NhZ2UnLCBtZXNzYWdlUGFyYW1zKTtcXG4gICAgICAgIHJldHVybiBSZWdleGVzLmdhbWVMb2coe1xcbiAgICAgICAgICAgIGxpbmU6IGYubGluZSxcXG4gICAgICAgICAgICBjYXB0dXJlOiBmLmNhcHR1cmUsXFxuICAgICAgICAgICAgY29kZTogJzA4MzknLFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIGZpZWxkczogY29kZSwgbGluZSwgY2FwdHVyZVxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMDAtbG9nbGluZVxcbiAgICAgKi9cXG4gICAgc3RhdGljIGdhbWVMb2coZikge1xcbiAgICAgICAgaWYgKHR5cGVvZiBmID09PSAndW5kZWZpbmVkJylcXG4gICAgICAgICAgICBmID0ge307XFxuICAgICAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdnYW1lTG9nJywgZ2FtZUxvZ1BhcmFtcyk7XFxuICAgICAgICBjb25zdCBjYXB0dXJlID0gUmVnZXhlcy50cnVlSWZVbmRlZmluZWQoZi5jYXB0dXJlKTtcXG4gICAgICAgIGNvbnN0IHN0ciA9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0aW1lc3RhbXAnLCAnXFxcXFxcXFx5e1RpbWVzdGFtcH0nKSArXFxuICAgICAgICAgICAgJyAwMDonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnY29kZScsIGYuY29kZSwgJy4uLi4nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2xpbmUnLCBmLmxpbmUsICcuKicpICsgJyQnO1xcbiAgICAgICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogZmllbGRzOiBjb2RlLCBuYW1lLCBsaW5lLCBjYXB0dXJlXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMC1sb2dsaW5lXFxuICAgICAqIFNvbWUgZ2FtZSBsb2cgbGluZXMgaGF2ZSBuYW1lcyBpbiB0aGVtLCBidXQgbm90IGFsbC4gIEFsbCBuZXR3b3JrIGxvZyBsaW5lcyBmb3IgdGhlc2VcXG4gICAgICogaGF2ZSBlbXB0eSBmaWVsZHMsIGJ1dCB0aGVzZSBnZXQgZHJvcHBlZCBieSB0aGUgQUNUIEZGWFYgcGx1Z2luLlxcbiAgICAgKi9cXG4gICAgc3RhdGljIGdhbWVOYW1lTG9nKGYpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXFxuICAgICAgICAgICAgZiA9IHt9O1xcbiAgICAgICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnZ2FtZU5hbWVMb2cnLCBnYW1lTmFtZUxvZ1BhcmFtcyk7XFxuICAgICAgICBjb25zdCBjYXB0dXJlID0gUmVnZXhlcy50cnVlSWZVbmRlZmluZWQoZi5jYXB0dXJlKTtcXG4gICAgICAgIGNvbnN0IHN0ciA9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0aW1lc3RhbXAnLCAnXFxcXFxcXFx5e1RpbWVzdGFtcH0nKSArXFxuICAgICAgICAgICAgJyAwMDonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnY29kZScsIGYuY29kZSwgJy4uLi4nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ25hbWUnLCBmLm5hbWUsICdbXjpdKicpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnbGluZScsIGYubGluZSwgJy4qJykgKyAnJCc7XFxuICAgICAgICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBmaWVsZHM6IGpvYiwgc3RyZW5ndGgsIGRleHRlcml0eSwgdml0YWxpdHksIGludGVsbGlnZW5jZSwgbWluZCwgcGlldHksIGF0dGFja1Bvd2VyLFxcbiAgICAgKiAgICAgICAgIGRpcmVjdEhpdCwgY3JpdGljYWxIaXQsIGF0dGFja01hZ2ljUG90ZW5jeSwgaGVhbE1hZ2ljUG90ZW5jeSwgZGV0ZXJtaW5hdGlvbixcXG4gICAgICogICAgICAgICBza2lsbFNwZWVkLCBzcGVsbFNwZWVkLCB0ZW5hY2l0eSwgY2FwdHVyZVxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMGMtcGxheWVyc3RhdHNcXG4gICAgICovXFxuICAgIHN0YXRpYyBzdGF0Q2hhbmdlKGYpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXFxuICAgICAgICAgICAgZiA9IHt9O1xcbiAgICAgICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnc3RhdENoYW5nZScsIHN0YXRDaGFuZ2VQYXJhbXMpO1xcbiAgICAgICAgY29uc3QgY2FwdHVyZSA9IFJlZ2V4ZXMudHJ1ZUlmVW5kZWZpbmVkKGYuY2FwdHVyZSk7XFxuICAgICAgICBjb25zdCBzdHIgPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGltZXN0YW1wJywgJ1xcXFxcXFxceXtUaW1lc3RhbXB9JykgK1xcbiAgICAgICAgICAgICcgMEM6UGxheWVyIFN0YXRzOiAnICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnam9iJywgZi5qb2IsICdcXFxcXFxcXGQrJykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdzdHJlbmd0aCcsIGYuc3RyZW5ndGgsICdcXFxcXFxcXGQrJykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdkZXh0ZXJpdHknLCBmLmRleHRlcml0eSwgJ1xcXFxcXFxcZCsnKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3ZpdGFsaXR5JywgZi52aXRhbGl0eSwgJ1xcXFxcXFxcZCsnKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2ludGVsbGlnZW5jZScsIGYuaW50ZWxsaWdlbmNlLCAnXFxcXFxcXFxkKycpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnbWluZCcsIGYubWluZCwgJ1xcXFxcXFxcZCsnKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3BpZXR5JywgZi5waWV0eSwgJ1xcXFxcXFxcZCsnKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2F0dGFja1Bvd2VyJywgZi5hdHRhY2tQb3dlciwgJ1xcXFxcXFxcZCsnKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2RpcmVjdEhpdCcsIGYuZGlyZWN0SGl0LCAnXFxcXFxcXFxkKycpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnY3JpdGljYWxIaXQnLCBmLmNyaXRpY2FsSGl0LCAnXFxcXFxcXFxkKycpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnYXR0YWNrTWFnaWNQb3RlbmN5JywgZi5hdHRhY2tNYWdpY1BvdGVuY3ksICdcXFxcXFxcXGQrJykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdoZWFsTWFnaWNQb3RlbmN5JywgZi5oZWFsTWFnaWNQb3RlbmN5LCAnXFxcXFxcXFxkKycpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZGV0ZXJtaW5hdGlvbicsIGYuZGV0ZXJtaW5hdGlvbiwgJ1xcXFxcXFxcZCsnKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3NraWxsU3BlZWQnLCBmLnNraWxsU3BlZWQsICdcXFxcXFxcXGQrJykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdzcGVsbFNwZWVkJywgZi5zcGVsbFNwZWVkLCAnXFxcXFxcXFxkKycpICtcXG4gICAgICAgICAgICAnOjA6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RlbmFjaXR5JywgZi50ZW5hY2l0eSwgJ1xcXFxcXFxcZCsnKTtcXG4gICAgICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIGZpZWxkczogbmFtZSwgY2FwdHVyZVxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMDEtY2hhbmdlem9uZVxcbiAgICAgKi9cXG4gICAgc3RhdGljIGNoYW5nZVpvbmUoZikge1xcbiAgICAgICAgaWYgKHR5cGVvZiBmID09PSAndW5kZWZpbmVkJylcXG4gICAgICAgICAgICBmID0ge307XFxuICAgICAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdjaGFuZ2Vab25lJywgY2hhbmdlWm9uZVBhcmFtcyk7XFxuICAgICAgICBjb25zdCBjYXB0dXJlID0gUmVnZXhlcy50cnVlSWZVbmRlZmluZWQoZi5jYXB0dXJlKTtcXG4gICAgICAgIGNvbnN0IHN0ciA9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0aW1lc3RhbXAnLCAnXFxcXFxcXFx5e1RpbWVzdGFtcH0nKSArXFxuICAgICAgICAgICAgJyAwMTpDaGFuZ2VkIFpvbmUgdG8gJyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ25hbWUnLCBmLm5hbWUsICcuKj8nKSArICdcXFxcXFxcXC4nO1xcbiAgICAgICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogZmllbGRzOiBpbnN0YW5jZSwgY29tbWFuZCwgZGF0YTAsIGRhdGExLCBkYXRhMiwgZGF0YTNcXG4gICAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzIxLW5ldHdvcms2ZC1hY3Rvci1jb250cm9sLWxpbmVzXFxuICAgICAqL1xcbiAgICBzdGF0aWMgbmV0d29yazZkKGYpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXFxuICAgICAgICAgICAgZiA9IHt9O1xcbiAgICAgICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnbmV0d29yazZkJywgbmV0d29yazZkUGFyYW1zKTtcXG4gICAgICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xcbiAgICAgICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxcXFxcXHl7VGltZXN0YW1wfScpICtcXG4gICAgICAgICAgICAnIDIxOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdpbnN0YW5jZScsIGYuaW5zdGFuY2UsICcuKj8nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2NvbW1hbmQnLCBmLmNvbW1hbmQsICcuKj8nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2RhdGEwJywgZi5kYXRhMCwgJy4qPycpICsgJzonICtcXG4gICAgICAgICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZGF0YTEnLCBmLmRhdGExLCAnLio/JykgKyAnOicgK1xcbiAgICAgICAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdkYXRhMicsIGYuZGF0YTIsICcuKj8nKSArICc6JyArXFxuICAgICAgICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2RhdGEzJywgZi5kYXRhMywgJy4qPycpICsgJyQnO1xcbiAgICAgICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIGZvciBidWlsZGluZyBuYW1lZCBjYXB0dXJlIGdyb3VwXFxuICAgICAqL1xcbiAgICBzdGF0aWMgbWF5YmVDYXB0dXJlKGNhcHR1cmUsIG5hbWUsIHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcXG4gICAgICAgIGlmICghdmFsdWUpXFxuICAgICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XFxuICAgICAgICB2YWx1ZSA9IFJlZ2V4ZXMuYW55T2YodmFsdWUpO1xcbiAgICAgICAgcmV0dXJuIGNhcHR1cmUgPyBSZWdleGVzLm5hbWVkQ2FwdHVyZShuYW1lLCB2YWx1ZSkgOiB2YWx1ZTtcXG4gICAgfVxcbiAgICBzdGF0aWMgb3B0aW9uYWwoc3RyKSB7XFxuICAgICAgICByZXR1cm4gYCg/OiR7c3RyfSk/YDtcXG4gICAgfVxcbiAgICAvLyBDcmVhdGVzIGEgbmFtZWQgcmVnZXggY2FwdHVyZSBncm91cCBuYW1lZCB8bmFtZXwgZm9yIHRoZSBtYXRjaCB8dmFsdWV8LlxcbiAgICBzdGF0aWMgbmFtZWRDYXB0dXJlKG5hbWUsIHZhbHVlKSB7XFxuICAgICAgICBpZiAobmFtZS5pbmNsdWRlcygnPicpKVxcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1xcXCInICsgbmFtZSArICdcXFwiIGNvbnRhaW5zIFxcXCI+XFxcIi4nKTtcXG4gICAgICAgIGlmIChuYW1lLmluY2x1ZGVzKCc8JykpXFxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXFxcIicgKyBuYW1lICsgJ1xcXCIgY29udGFpbnMgXFxcIj5cXFwiLicpO1xcbiAgICAgICAgcmV0dXJuICcoPzwnICsgbmFtZSArICc+JyArIHZhbHVlICsgJyknO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBDb252ZW5pZW5jZSBmb3IgdHVybmluZyBtdWx0aXBsZSBhcmdzIGludG8gYSB1bmlvbmVkIHJlZ3VsYXIgZXhwcmVzc2lvbi5cXG4gICAgICogYW55T2YoeCwgeSwgeikgb3IgYW55T2YoW3gsIHksIHpdKSBkbyB0aGUgc2FtZSB0aGluZywgYW5kIHJldHVybiAoPzp4fHl8eikuXFxuICAgICAqIGFueU9mKHgpIG9yIGFueU9mKHgpIG9uIGl0cyBvd24gc2ltcGxpZmllcyB0byBqdXN0IHguXFxuICAgICAqIGFyZ3MgbWF5IGJlIHN0cmluZ3Mgb3IgUmVnRXhwLCBhbHRob3VnaCBhbnkgYWRkaXRpb25hbCBtYXJrZXJzIHRvIFJlZ0V4cFxcbiAgICAgKiBsaWtlIC9pbnNlbnNpdGl2ZS9pIGFyZSBkcm9wcGVkLlxcbiAgICAgKi9cXG4gICAgc3RhdGljIGFueU9mKC4uLmFyZ3MpIHtcXG4gICAgICAgIGNvbnN0IGFueU9mQXJyYXkgPSAoYXJyYXkpID0+IHtcXG4gICAgICAgICAgICByZXR1cm4gYCg/OiR7YXJyYXkubWFwKChlbGVtKSA9PiBlbGVtIGluc3RhbmNlb2YgUmVnRXhwID8gZWxlbS5zb3VyY2UgOiBlbGVtKS5qb2luKCd8Jyl9KWA7XFxuICAgICAgICB9O1xcbiAgICAgICAgbGV0IGFycmF5ID0gW107XFxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdzWzBdKSlcXG4gICAgICAgICAgICAgICAgYXJyYXkgPSBhcmdzWzBdO1xcbiAgICAgICAgICAgIGVsc2UgaWYgKGFyZ3NbMF0pXFxuICAgICAgICAgICAgICAgIGFycmF5ID0gW2FyZ3NbMF1dO1xcbiAgICAgICAgICAgIGVsc2VcXG4gICAgICAgICAgICAgICAgYXJyYXkgPSBbXTtcXG4gICAgICAgIH1cXG4gICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgIC8vIFRPRE86IG1vcmUgYWNjdXJhdGUgdHlwZSBpbnN0ZWFkIG9mIGBhc2AgY2FzdFxcbiAgICAgICAgICAgIGFycmF5ID0gYXJncztcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBhbnlPZkFycmF5KGFycmF5KTtcXG4gICAgfVxcbiAgICBzdGF0aWMgcGFyc2UocmVnZXhwU3RyaW5nKSB7XFxuICAgICAgICBjb25zdCBrQ2FjdGJvdENhdGVnb3JpZXMgPSB7XFxuICAgICAgICAgICAgVGltZXN0YW1wOiAnXi57MTR9JyxcXG4gICAgICAgICAgICBOZXRUaW1lc3RhbXA6ICcuezMzfScsXFxuICAgICAgICAgICAgTmV0RmllbGQ6ICcoPzpbXnxdKlxcXFxcXFxcfCknLFxcbiAgICAgICAgICAgIExvZ1R5cGU6ICdbMC05QS1GYS1mXXsyfScsXFxuICAgICAgICAgICAgQWJpbGl0eUNvZGU6ICdbMC05QS1GYS1mXXsxLDh9JyxcXG4gICAgICAgICAgICBPYmplY3RJZDogJ1swLTlBLUZdezh9JyxcXG4gICAgICAgICAgICAvLyBNYXRjaGVzIGFueSBjaGFyYWN0ZXIgbmFtZSAoaW5jbHVkaW5nIGVtcHR5IHN0cmluZ3Mgd2hpY2ggdGhlIEZGWElWXFxuICAgICAgICAgICAgLy8gQUNUIHBsdWdpbiBjYW4gZ2VuZXJhdGUgd2hlbiB1bmtub3duKS5cXG4gICAgICAgICAgICBOYW1lOiAnKD86W15cXFxcXFxcXHM6fF0rKD86IFteXFxcXFxcXFxzOnxdKyk/fCknLFxcbiAgICAgICAgICAgIC8vIEZsb2F0cyBjYW4gaGF2ZSBjb21tYSBhcyBzZXBhcmF0b3IgaW4gRkZYSVYgcGx1Z2luIG91dHB1dDogaHR0cHM6Ly9naXRodWIuY29tL3JhdmFobi9GRlhJVl9BQ1RfUGx1Z2luL2lzc3Vlcy8xMzdcXG4gICAgICAgICAgICBGbG9hdDogJy0/WzAtOV0rKD86Wy4sXVswLTldKyk/KD86RS0/WzAtOV0rKT8nLFxcbiAgICAgICAgfTtcXG4gICAgICAgIC8vIEFsbCByZWdleGVzIGluIGNhY3Rib3QgYXJlIGNhc2UgaW5zZW5zaXRpdmUuXFxuICAgICAgICAvLyBUaGlzIGF2b2lkcyBoZWFkYWNoZXMgYXMgdGhpbmdzIGxpa2UgYFZpY2UgYW5kIFZhbml0eWAgdHVybnMgaW50b1xcbiAgICAgICAgLy8gYFZpY2UgQW5kIFZhbml0eWAsIGVzcGVjaWFsbHkgZm9yIEZyZW5jaCBhbmQgR2VybWFuLiAgSXQgYXBwZWFycyB0b1xcbiAgICAgICAgLy8gaGF2ZSBhIH4yMCUgcmVnZXggcGFyc2luZyBvdmVyaGVhZCwgYnV0IGF0IGxlYXN0IHRoZXkgd29yay5cXG4gICAgICAgIGxldCBtb2RpZmllcnMgPSAnaSc7XFxuICAgICAgICBpZiAocmVnZXhwU3RyaW5nIGluc3RhbmNlb2YgUmVnRXhwKSB7XFxuICAgICAgICAgICAgbW9kaWZpZXJzICs9IChyZWdleHBTdHJpbmcuZ2xvYmFsID8gJ2cnIDogJycpICtcXG4gICAgICAgICAgICAgICAgKHJlZ2V4cFN0cmluZy5tdWx0aWxpbmUgPyAnbScgOiAnJyk7XFxuICAgICAgICAgICAgcmVnZXhwU3RyaW5nID0gcmVnZXhwU3RyaW5nLnNvdXJjZTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJlZ2V4cFN0cmluZyA9IHJlZ2V4cFN0cmluZy5yZXBsYWNlKC9cXFxcXFxcXHlcXFxceyguKj8pXFxcXH0vZywgKG1hdGNoLCBncm91cCkgPT4ge1xcbiAgICAgICAgICAgIHJldHVybiBrQ2FjdGJvdENhdGVnb3JpZXNbZ3JvdXBdIHx8IG1hdGNoO1xcbiAgICAgICAgfSk7XFxuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleHBTdHJpbmcsIG1vZGlmaWVycyk7XFxuICAgIH1cXG4gICAgLy8gTGlrZSBSZWdleC5SZWdleGVzLnBhcnNlLCBidXQgZm9yY2UgZ2xvYmFsIGZsYWcuXFxuICAgIHN0YXRpYyBwYXJzZUdsb2JhbChyZWdleHBTdHJpbmcpIHtcXG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gUmVnZXhlcy5wYXJzZShyZWdleHBTdHJpbmcpO1xcbiAgICAgICAgbGV0IG1vZGlmaWVycyA9ICdnaSc7XFxuICAgICAgICBpZiAocmVnZXhwU3RyaW5nIGluc3RhbmNlb2YgUmVnRXhwKVxcbiAgICAgICAgICAgIG1vZGlmaWVycyArPSAocmVnZXhwU3RyaW5nLm11bHRpbGluZSA/ICdtJyA6ICcnKTtcXG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4LnNvdXJjZSwgbW9kaWZpZXJzKTtcXG4gICAgfVxcbiAgICBzdGF0aWMgdHJ1ZUlmVW5kZWZpbmVkKHZhbHVlKSB7XFxuICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09ICd1bmRlZmluZWQnKVxcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xcbiAgICAgICAgcmV0dXJuICEhdmFsdWU7XFxuICAgIH1cXG4gICAgc3RhdGljIHZhbGlkYXRlUGFyYW1zKGYsIGZ1bmNOYW1lLCBwYXJhbXMpIHtcXG4gICAgICAgIGlmIChmID09PSBudWxsKVxcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIGlmICh0eXBlb2YgZiAhPT0gJ29iamVjdCcpXFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGYpO1xcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBrZXlzLmxlbmd0aDsgKytrKSB7XFxuICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1trXTtcXG4gICAgICAgICAgICBpZiAoa2V5ICYmICFwYXJhbXMuaW5jbHVkZXMoa2V5KSkge1xcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZnVuY05hbWV9OiBpbnZhbGlkIHBhcmFtZXRlciAnJHtrZXl9Jy4gIGAgK1xcbiAgICAgICAgICAgICAgICAgICAgYFZhbGlkIHBhcmFtczogJHtKU09OLnN0cmluZ2lmeShwYXJhbXMpfWApO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9yZXNvdXJjZXMvbmV0cmVnZXhlcy50c1xcblxcbi8vIERpZmZlcmVuY2VzIGZyb20gUmVnZXhlczpcXG4vLyAqIG1heSBoYXZlIG1vcmUgZmllbGRzXFxuLy8gKiBBZGRlZENvbWJhdGFudCBucGMgaWQgaXMgYnJva2VuIHVwIGludG8gbnBjTmFtZUlkIGFuZCBucGNCYXNlSWRcXG4vLyAqIGdhbWVMb2cgYWx3YXlzIHNwbGl0cyBuYW1lIGludG8gaXRzIG93biBmaWVsZCAoYnV0IHByZXZpb3VzbHkgd291bGRuJ3QpXFxuY29uc3Qgc2VwYXJhdG9yID0gJ1xcXFxcXFxcfCc7XFxuY29uc3QgbWF0Y2hEZWZhdWx0ID0gJ1tefF0qJztcXG5jb25zdCBuZXRyZWdleGVzX3N0YXJ0c1VzaW5nUGFyYW1zID0gKC8qIHVudXNlZCBwdXJlIGV4cHJlc3Npb24gb3Igc3VwZXIgKi8gbnVsbCAmJiAoWyd0aW1lc3RhbXAnLCAnc291cmNlSWQnLCAnc291cmNlJywgJ2lkJywgJ2FiaWxpdHknLCAndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ2Nhc3RUaW1lJ10pKTtcXG5jb25zdCBuZXRyZWdleGVzX2FiaWxpdHlQYXJhbXMgPSAoLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqLyBudWxsICYmIChbJ3NvdXJjZUlkJywgJ3NvdXJjZScsICdpZCcsICdhYmlsaXR5JywgJ3RhcmdldElkJywgJ3RhcmdldCddKSk7XFxuY29uc3QgbmV0cmVnZXhlc19hYmlsaXR5RnVsbFBhcmFtcyA9ICgvKiB1bnVzZWQgcHVyZSBleHByZXNzaW9uIG9yIHN1cGVyICovIG51bGwgJiYgKFsnc291cmNlSWQnLCAnc291cmNlJywgJ2lkJywgJ2FiaWxpdHknLCAndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ2ZsYWdzJywgJ2RhbWFnZScsICd0YXJnZXRDdXJyZW50SHAnLCAndGFyZ2V0TWF4SHAnLCAneCcsICd5JywgJ3onLCAnaGVhZGluZyddKSk7XFxuY29uc3QgbmV0cmVnZXhlc19oZWFkTWFya2VyUGFyYW1zID0gKC8qIHVudXNlZCBwdXJlIGV4cHJlc3Npb24gb3Igc3VwZXIgKi8gbnVsbCAmJiAoWyd0YXJnZXRJZCcsICd0YXJnZXQnLCAnaWQnXSkpO1xcbmNvbnN0IG5ldHJlZ2V4ZXNfYWRkZWRDb21iYXRhbnRQYXJhbXMgPSAoLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqLyBudWxsICYmIChbJ2lkJywgJ25hbWUnXSkpO1xcbmNvbnN0IG5ldHJlZ2V4ZXNfYWRkZWRDb21iYXRhbnRGdWxsUGFyYW1zID0gKC8qIHVudXNlZCBwdXJlIGV4cHJlc3Npb24gb3Igc3VwZXIgKi8gbnVsbCAmJiAoWydpZCcsICduYW1lJywgJ2pvYicsICdsZXZlbCcsICdvd25lcklkJywgJ3dvcmxkJywgJ25wY05hbWVJZCcsICducGNCYXNlSWQnLCAnY3VycmVudEhwJywgJ2hwJywgJ3gnLCAneScsICd6JywgJ2hlYWRpbmcnXSkpO1xcbmNvbnN0IG5ldHJlZ2V4ZXNfcmVtb3ZpbmdDb21iYXRhbnRQYXJhbXMgPSAoLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqLyBudWxsICYmIChbJ2lkJywgJ25hbWUnLCAnaHAnXSkpO1xcbmNvbnN0IG5ldHJlZ2V4ZXNfZ2FpbnNFZmZlY3RQYXJhbXMgPSAoLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqLyBudWxsICYmIChbJ2VmZmVjdElkJywgJ2VmZmVjdCcsICdkdXJhdGlvbicsICdzb3VyY2VJZCcsICdzb3VyY2UnLCAndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ2NvdW50J10pKTtcXG5jb25zdCBuZXRyZWdleGVzX3N0YXR1c0VmZmVjdEV4cGxpY2l0UGFyYW1zID0gKC8qIHVudXNlZCBwdXJlIGV4cHJlc3Npb24gb3Igc3VwZXIgKi8gbnVsbCAmJiAoWyd0YXJnZXRJZCcsICd0YXJnZXQnLCAnaHAnLCAnbWF4SHAnLCAneCcsICd5JywgJ3onLCAnaGVhZGluZycsICdkYXRhMCcsICdkYXRhMScsICdkYXRhMicsICdkYXRhMycsICdkYXRhNCddKSk7XFxuY29uc3QgbmV0cmVnZXhlc19sb3Nlc0VmZmVjdFBhcmFtcyA9ICgvKiB1bnVzZWQgcHVyZSBleHByZXNzaW9uIG9yIHN1cGVyICovIG51bGwgJiYgKFsnZWZmZWN0SWQnLCAnZWZmZWN0JywgJ3NvdXJjZUlkJywgJ3NvdXJjZScsICd0YXJnZXRJZCcsICd0YXJnZXQnLCAnY291bnQnXSkpO1xcbmNvbnN0IG5ldHJlZ2V4ZXNfdGV0aGVyUGFyYW1zID0gKC8qIHVudXNlZCBwdXJlIGV4cHJlc3Npb24gb3Igc3VwZXIgKi8gbnVsbCAmJiAoWydzb3VyY2VJZCcsICdzb3VyY2UnLCAndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ2lkJ10pKTtcXG5jb25zdCBuZXRyZWdleGVzX3dhc0RlZmVhdGVkUGFyYW1zID0gKC8qIHVudXNlZCBwdXJlIGV4cHJlc3Npb24gb3Igc3VwZXIgKi8gbnVsbCAmJiAoWyd0YXJnZXRJZCcsICd0YXJnZXQnLCAnc291cmNlSWQnLCAnc291cmNlJ10pKTtcXG5jb25zdCBuZXRyZWdleGVzX2VjaG9QYXJhbXMgPSAoLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqLyBudWxsICYmIChbJ2NvZGUnLCAnbmFtZScsICdsaW5lJ10pKTtcXG5jb25zdCBuZXRyZWdleGVzX2RpYWxvZ1BhcmFtcyA9ICgvKiB1bnVzZWQgcHVyZSBleHByZXNzaW9uIG9yIHN1cGVyICovIG51bGwgJiYgKFsnY29kZScsICduYW1lJywgJ2xpbmUnXSkpO1xcbmNvbnN0IG5ldHJlZ2V4ZXNfbWVzc2FnZVBhcmFtcyA9ICgvKiB1bnVzZWQgcHVyZSBleHByZXNzaW9uIG9yIHN1cGVyICovIG51bGwgJiYgKFsnY29kZScsICduYW1lJywgJ2xpbmUnXSkpO1xcbmNvbnN0IG5ldHJlZ2V4ZXNfZ2FtZUxvZ1BhcmFtcyA9ICgvKiB1bnVzZWQgcHVyZSBleHByZXNzaW9uIG9yIHN1cGVyICovIG51bGwgJiYgKFsnY29kZScsICduYW1lJywgJ2xpbmUnXSkpO1xcbmNvbnN0IG5ldHJlZ2V4ZXNfZ2FtZU5hbWVMb2dQYXJhbXMgPSAoLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqLyBudWxsICYmIChbJ2NvZGUnLCAnbmFtZScsICdsaW5lJ10pKTtcXG5jb25zdCBuZXRyZWdleGVzX3N0YXRDaGFuZ2VQYXJhbXMgPSAoLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqLyBudWxsICYmIChbJ2pvYicsICdzdHJlbmd0aCcsICdkZXh0ZXJpdHknLCAndml0YWxpdHknLCAnaW50ZWxsaWdlbmNlJywgJ21pbmQnLCAncGlldHknLCAnYXR0YWNrUG93ZXInLCAnZGlyZWN0SGl0JywgJ2NyaXRpY2FsSGl0JywgJ2F0dGFja01hZ2ljUG90ZW5jeScsICdoZWFsTWFnaWNQb3RlbmN5JywgJ2RldGVybWluYXRpb24nLCAnc2tpbGxTcGVlZCcsICdzcGVsbFNwZWVkJywgJ3RlbmFjaXR5J10pKTtcXG5jb25zdCBuZXRyZWdleGVzX2NoYW5nZVpvbmVQYXJhbXMgPSAoLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqLyBudWxsICYmIChbJ2lkJywgJ25hbWUnXSkpO1xcbmNvbnN0IG5ldHJlZ2V4ZXNfbmV0d29yazZkUGFyYW1zID0gKC8qIHVudXNlZCBwdXJlIGV4cHJlc3Npb24gb3Igc3VwZXIgKi8gbnVsbCAmJiAoWydpbnN0YW5jZScsICdjb21tYW5kJywgJ2RhdGEwJywgJ2RhdGExJywgJ2RhdGEyJywgJ2RhdGEzJ10pKTtcXG5jb25zdCBuYW1lVG9nZ2xlUGFyYW1zID0gKC8qIHVudXNlZCBwdXJlIGV4cHJlc3Npb24gb3Igc3VwZXIgKi8gbnVsbCAmJiAoWydpZCcsICduYW1lJywgJ3RvZ2dsZSddKSk7XFxuLy8gSWYgTmV0UmVnZXhlcy5zZXRGbGFnVHJhbnNsYXRpb25zTmVlZGVkIGlzIHNldCB0byB0cnVlLCB0aGVuIGFueVxcbi8vIHJlZ2V4IGNyZWF0ZWQgdGhhdCByZXF1aXJlcyBhIHRyYW5zbGF0aW9uIHdpbGwgYmVnaW4gd2l0aCB0aGlzIHN0cmluZ1xcbi8vIGFuZCBtYXRjaCB0aGUgbWFnaWNTdHJpbmdSZWdleC4gIFRoaXMgaXMgbWF5YmUgYSBiaXQgZ29vZnksIGJ1dCBpc1xcbi8vIGEgcHJldHR5IHN0cmFpZ2h0Zm9yd2FyZCB3YXkgdG8gbWFyayByZWdleGVzIGZvciB0cmFuc2xhdGlvbnMuXFxuLy8gSWYgaXNzdWUgIzEzMDYgaXMgZXZlciByZXNvbHZlZCwgd2UgY2FuIHJlbW92ZSB0aGlzLlxcbmNvbnN0IG1hZ2ljVHJhbnNsYXRpb25TdHJpbmcgPSBgXl5gO1xcbmNvbnN0IG1hZ2ljU3RyaW5nUmVnZXggPSAvXlxcXFxeXFxcXF4vO1xcbmNvbnN0IGtleXNUaGF0UmVxdWlyZVRyYW5zbGF0aW9uID0gW1xcbiAgICAnYWJpbGl0eScsXFxuICAgICduYW1lJyxcXG4gICAgJ3NvdXJjZScsXFxuICAgICd0YXJnZXQnLFxcbiAgICAnbGluZScsXFxuXTtcXG5jb25zdCBwYXJzZUhlbHBlciA9IChwYXJhbXMsIGZ1bmNOYW1lLCBmaWVsZHMpID0+IHtcXG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XFxuICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xcbiAgICBjb25zdCB2YWxpZEZpZWxkcyA9IFtdO1xcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIE9iamVjdC52YWx1ZXMoZmllbGRzKSkge1xcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpXFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICB2YWxpZEZpZWxkcy5wdXNoKHZhbHVlLmZpZWxkKTtcXG4gICAgfVxcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKHBhcmFtcywgZnVuY05hbWUsIFsnY2FwdHVyZScsIC4uLnZhbGlkRmllbGRzXSk7XFxuICAgIC8vIEZpbmQgdGhlIGxhc3Qga2V5IHdlIGNhcmUgYWJvdXQsIHNvIHdlIGNhbiBzaG9ydGVuIHRoZSByZWdleCBpZiBuZWVkZWQuXFxuICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChwYXJhbXMuY2FwdHVyZSk7XFxuICAgIGNvbnN0IGZpZWxkS2V5cyA9IE9iamVjdC5rZXlzKGZpZWxkcyk7XFxuICAgIGxldCBtYXhLZXk7XFxuICAgIGlmIChjYXB0dXJlKSB7XFxuICAgICAgICBtYXhLZXkgPSBmaWVsZEtleXNbZmllbGRLZXlzLmxlbmd0aCAtIDFdO1xcbiAgICB9XFxuICAgIGVsc2Uge1xcbiAgICAgICAgbWF4S2V5ID0gMDtcXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGZpZWxkS2V5cykge1xcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gKF9hID0gZmllbGRzW2tleV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9O1xcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKVxcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSAoX2IgPSBmaWVsZHNba2V5XSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmZpZWxkO1xcbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWUgJiYgZmllbGROYW1lIGluIHBhcmFtcylcXG4gICAgICAgICAgICAgICAgbWF4S2V5ID0ga2V5O1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIC8vIEZvciB0ZXN0aW5nLCBpdCdzIHVzZWZ1bCB0byBrbm93IGlmIHRoaXMgaXMgYSByZWdleCB0aGF0IHJlcXVpcmVzXFxuICAgIC8vIHRyYW5zbGF0aW9uLiAgV2UgdGVzdCB0aGlzIGJ5IHNlZWluZyBpZiB0aGVyZSBhcmUgYW55IHNwZWNpZmllZFxcbiAgICAvLyBmaWVsZHMsIGFuZCBpZiBzbywgaW5zZXJ0aW5nIGEgbWFnaWMgc3RyaW5nIHRoYXQgd2UgY2FuIGRldGVjdC5cXG4gICAgLy8gVGhpcyBsZXRzIHVzIGRpZmZlcmVudGlhdGUgYmV0d2VlbiBcXFwicmVnZXggdGhhdCBzaG91bGQgYmUgdHJhbnNsYXRlZFxcXCJcXG4gICAgLy8gZS5nLiBhIHJlZ2V4IHdpdGggYHRhcmdldGAgc3BlY2lmaWVkLCBhbmQgXFxcInJlZ2V4IHRoYXQgc2hvdWxkbid0XFxcIlxcbiAgICAvLyBlLmcuIGEgZ2FpbnMgZWZmZWN0IHdpdGgganVzdCBlZmZlY3RJZCBzcGVjaWZpZWQuXFxuICAgIGNvbnN0IHRyYW5zUGFyYW1zID0gT2JqZWN0LmtleXMocGFyYW1zKS5maWx0ZXIoKGspID0+IGtleXNUaGF0UmVxdWlyZVRyYW5zbGF0aW9uLmluY2x1ZGVzKGspKTtcXG4gICAgY29uc3QgbmVlZHNUcmFuc2xhdGlvbnMgPSBOZXRSZWdleGVzLmZsYWdUcmFuc2xhdGlvbnNOZWVkZWQgJiYgdHJhbnNQYXJhbXMubGVuZ3RoID4gMDtcXG4gICAgLy8gQnVpbGQgdGhlIHJlZ2V4IGZyb20gdGhlIGZpZWxkcy5cXG4gICAgbGV0IHN0ciA9IG5lZWRzVHJhbnNsYXRpb25zID8gbWFnaWNUcmFuc2xhdGlvblN0cmluZyA6ICdeJztcXG4gICAgbGV0IGxhc3RLZXkgPSAtMTtcXG4gICAgZm9yIChjb25zdCBfa2V5IGluIGZpZWxkcykge1xcbiAgICAgICAgY29uc3Qga2V5ID0gcGFyc2VJbnQoX2tleSk7XFxuICAgICAgICAvLyBGaWxsIGluIGJsYW5rcy5cXG4gICAgICAgIGNvbnN0IG1pc3NpbmdGaWVsZHMgPSBrZXkgLSBsYXN0S2V5IC0gMTtcXG4gICAgICAgIGlmIChtaXNzaW5nRmllbGRzID09PSAxKVxcbiAgICAgICAgICAgIHN0ciArPSAnXFxcXFxcXFx5e05ldEZpZWxkfSc7XFxuICAgICAgICBlbHNlIGlmIChtaXNzaW5nRmllbGRzID4gMSlcXG4gICAgICAgICAgICBzdHIgKz0gYFxcXFxcXFxceXtOZXRGaWVsZH17JHttaXNzaW5nRmllbGRzfX1gO1xcbiAgICAgICAgbGFzdEtleSA9IGtleTtcXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZmllbGRzW2tleV07XFxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JylcXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZnVuY05hbWV9OiBpbnZhbGlkIHZhbHVlOiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcXG4gICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IChfYyA9IGZpZWxkc1trZXldKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZmllbGQ7XFxuICAgICAgICBjb25zdCBmaWVsZFZhbHVlID0gKF9mID0gKF9lID0gKF9kID0gZmllbGRzW2tleV0pID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC52YWx1ZSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLnRvU3RyaW5nKCkpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IG1hdGNoRGVmYXVsdDtcXG4gICAgICAgIGlmIChmaWVsZE5hbWUpIHtcXG4gICAgICAgICAgICBzdHIgKz0gUmVnZXhlcy5tYXliZUNhcHR1cmUoXFxuICAgICAgICAgICAgLy8gbW9yZSBhY2N1cmF0ZSB0eXBlIGluc3RlYWQgb2YgYGFzYCBjYXN0XFxuICAgICAgICAgICAgLy8gbWF5YmUgdGhpcyBmdW5jdGlvbiBuZWVkcyBhIHJlZmFjdG9yaW5nXFxuICAgICAgICAgICAgY2FwdHVyZSwgZmllbGROYW1lLCBwYXJhbXNbZmllbGROYW1lXSwgZmllbGRWYWx1ZSkgK1xcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3I7XFxuICAgICAgICB9XFxuICAgICAgICBlbHNlIHtcXG4gICAgICAgICAgICBzdHIgKz0gZmllbGRWYWx1ZSArIHNlcGFyYXRvcjtcXG4gICAgICAgIH1cXG4gICAgICAgIC8vIFN0b3AgaWYgd2UncmUgbm90IGNhcHR1cmluZyBhbmQgZG9uJ3QgY2FyZSBhYm91dCBmdXR1cmUgZmllbGRzLlxcbiAgICAgICAgaWYgKGtleSA+PSAobWF4S2V5ICE9PSBudWxsICYmIG1heEtleSAhPT0gdm9pZCAwID8gbWF4S2V5IDogMCkpXFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgIH1cXG4gICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcXG59O1xcbmNsYXNzIE5ldFJlZ2V4ZXMge1xcbiAgICBzdGF0aWMgc2V0RmxhZ1RyYW5zbGF0aW9uc05lZWRlZCh2YWx1ZSkge1xcbiAgICAgICAgTmV0UmVnZXhlcy5mbGFnVHJhbnNsYXRpb25zTmVlZGVkID0gdmFsdWU7XFxuICAgIH1cXG4gICAgc3RhdGljIGRvZXNOZXRSZWdleE5lZWRUcmFuc2xhdGlvbihyZWdleCkge1xcbiAgICAgICAgLy8gTmVlZCB0byBgc2V0RmxhZ1RyYW5zbGF0aW9uc05lZWRlZGAgYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KE5ldFJlZ2V4ZXMuZmxhZ1RyYW5zbGF0aW9uc05lZWRlZCk7XFxuICAgICAgICBjb25zdCBzdHIgPSB0eXBlb2YgcmVnZXggPT09ICdzdHJpbmcnID8gcmVnZXggOiByZWdleC5zb3VyY2U7XFxuICAgICAgICByZXR1cm4gISFtYWdpY1N0cmluZ1JlZ2V4LmV4ZWMoc3RyKTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzE0LW5ldHdvcmtzdGFydHNjYXN0aW5nXFxuICAgICAqL1xcbiAgICBzdGF0aWMgc3RhcnRzVXNpbmcocGFyYW1zKSB7XFxuICAgICAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnc3RhcnRzVXNpbmcnLCB7XFxuICAgICAgICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzIwJyB9LFxcbiAgICAgICAgICAgIDE6IHsgZmllbGQ6ICd0aW1lc3RhbXAnIH0sXFxuICAgICAgICAgICAgMjogeyBmaWVsZDogJ3NvdXJjZUlkJyB9LFxcbiAgICAgICAgICAgIDM6IHsgZmllbGQ6ICdzb3VyY2UnIH0sXFxuICAgICAgICAgICAgNDogeyBmaWVsZDogJ2lkJyB9LFxcbiAgICAgICAgICAgIDU6IHsgZmllbGQ6ICdhYmlsaXR5JyB9LFxcbiAgICAgICAgICAgIDY6IHsgZmllbGQ6ICd0YXJnZXRJZCcgfSxcXG4gICAgICAgICAgICA3OiB7IGZpZWxkOiAndGFyZ2V0JyB9LFxcbiAgICAgICAgICAgIDg6IHsgZmllbGQ6ICdjYXN0VGltZScgfSxcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMTUtbmV0d29ya2FiaWxpdHlcXG4gICAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzE2LW5ldHdvcmthb2VhYmlsaXR5XFxuICAgICAqL1xcbiAgICBzdGF0aWMgYWJpbGl0eShwYXJhbXMpIHtcXG4gICAgICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdhYmlsaXR5Jywge1xcbiAgICAgICAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICcyWzEyXScgfSxcXG4gICAgICAgICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxcbiAgICAgICAgICAgIDI6IHsgZmllbGQ6ICdzb3VyY2VJZCcgfSxcXG4gICAgICAgICAgICAzOiB7IGZpZWxkOiAnc291cmNlJyB9LFxcbiAgICAgICAgICAgIDQ6IHsgZmllbGQ6ICdpZCcgfSxcXG4gICAgICAgICAgICA1OiB7IGZpZWxkOiAnYWJpbGl0eScgfSxcXG4gICAgICAgICAgICA2OiB7IGZpZWxkOiAndGFyZ2V0SWQnIH0sXFxuICAgICAgICAgICAgNzogeyBmaWVsZDogJ3RhcmdldCcgfSxcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMTUtbmV0d29ya2FiaWxpdHlcXG4gICAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzE2LW5ldHdvcmthb2VhYmlsaXR5XFxuICAgICAqL1xcbiAgICBzdGF0aWMgYWJpbGl0eUZ1bGwocGFyYW1zKSB7XFxuICAgICAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnYWJpbGl0eUZ1bGwnLCB7XFxuICAgICAgICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzJbMTJdJyB9LFxcbiAgICAgICAgICAgIDE6IHsgZmllbGQ6ICd0aW1lc3RhbXAnIH0sXFxuICAgICAgICAgICAgMjogeyBmaWVsZDogJ3NvdXJjZUlkJyB9LFxcbiAgICAgICAgICAgIDM6IHsgZmllbGQ6ICdzb3VyY2UnIH0sXFxuICAgICAgICAgICAgNDogeyBmaWVsZDogJ2lkJyB9LFxcbiAgICAgICAgICAgIDU6IHsgZmllbGQ6ICdhYmlsaXR5JyB9LFxcbiAgICAgICAgICAgIDY6IHsgZmllbGQ6ICd0YXJnZXRJZCcgfSxcXG4gICAgICAgICAgICA3OiB7IGZpZWxkOiAndGFyZ2V0JyB9LFxcbiAgICAgICAgICAgIDg6IHsgZmllbGQ6ICdmbGFncycgfSxcXG4gICAgICAgICAgICA5OiB7IGZpZWxkOiAnZGFtYWdlJyB9LFxcbiAgICAgICAgICAgIDI0OiB7IGZpZWxkOiAndGFyZ2V0Q3VycmVudEhwJyB9LFxcbiAgICAgICAgICAgIDI1OiB7IGZpZWxkOiAndGFyZ2V0TWF4SHAnIH0sXFxuICAgICAgICAgICAgNDA6IHsgZmllbGQ6ICd4JyB9LFxcbiAgICAgICAgICAgIDQxOiB7IGZpZWxkOiAneScgfSxcXG4gICAgICAgICAgICA0MjogeyBmaWVsZDogJ3onIH0sXFxuICAgICAgICAgICAgNDM6IHsgZmllbGQ6ICdoZWFkaW5nJyB9LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxYi1uZXR3b3JrdGFyZ2V0aWNvbi1oZWFkLW1hcmtlcnNcXG4gICAgICovXFxuICAgIHN0YXRpYyBoZWFkTWFya2VyKHBhcmFtcykge1xcbiAgICAgICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ2hlYWRNYXJrZXInLCB7XFxuICAgICAgICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzI3JyB9LFxcbiAgICAgICAgICAgIDE6IHsgZmllbGQ6ICd0aW1lc3RhbXAnIH0sXFxuICAgICAgICAgICAgMjogeyBmaWVsZDogJ3RhcmdldElkJyB9LFxcbiAgICAgICAgICAgIDM6IHsgZmllbGQ6ICd0YXJnZXQnIH0sXFxuICAgICAgICAgICAgNjogeyBmaWVsZDogJ2lkJyB9LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMy1hZGRjb21iYXRhbnRcXG4gICAgICovXFxuICAgIHN0YXRpYyBhZGRlZENvbWJhdGFudChwYXJhbXMpIHtcXG4gICAgICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdhZGRlZENvbWJhdGFudCcsIHtcXG4gICAgICAgICAgICAwOiB7IGZpZWxkOiAndHlwZScsIHZhbHVlOiAnMDMnIH0sXFxuICAgICAgICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcXG4gICAgICAgICAgICAyOiB7IGZpZWxkOiAnaWQnIH0sXFxuICAgICAgICAgICAgMzogeyBmaWVsZDogJ25hbWUnIH0sXFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzAzLWFkZGNvbWJhdGFudFxcbiAgICAgKi9cXG4gICAgc3RhdGljIGFkZGVkQ29tYmF0YW50RnVsbChwYXJhbXMpIHtcXG4gICAgICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdhZGRlZENvbWJhdGFudEZ1bGwnLCB7XFxuICAgICAgICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzAzJyB9LFxcbiAgICAgICAgICAgIDE6IHsgZmllbGQ6ICd0aW1lc3RhbXAnIH0sXFxuICAgICAgICAgICAgMjogeyBmaWVsZDogJ2lkJyB9LFxcbiAgICAgICAgICAgIDM6IHsgZmllbGQ6ICduYW1lJyB9LFxcbiAgICAgICAgICAgIDQ6IHsgZmllbGQ6ICdqb2InIH0sXFxuICAgICAgICAgICAgNTogeyBmaWVsZDogJ2xldmVsJyB9LFxcbiAgICAgICAgICAgIDY6IHsgZmllbGQ6ICdvd25lcklkJyB9LFxcbiAgICAgICAgICAgIDg6IHsgZmllbGQ6ICd3b3JsZCcgfSxcXG4gICAgICAgICAgICA5OiB7IGZpZWxkOiAnbnBjTmFtZUlkJyB9LFxcbiAgICAgICAgICAgIDEwOiB7IGZpZWxkOiAnbnBjQmFzZUlkJyB9LFxcbiAgICAgICAgICAgIDExOiB7IGZpZWxkOiAnY3VycmVudEhwJyB9LFxcbiAgICAgICAgICAgIDEyOiB7IGZpZWxkOiAnaHAnIH0sXFxuICAgICAgICAgICAgMTc6IHsgZmllbGQ6ICd4JyB9LFxcbiAgICAgICAgICAgIDE4OiB7IGZpZWxkOiAneScgfSxcXG4gICAgICAgICAgICAxOTogeyBmaWVsZDogJ3onIH0sXFxuICAgICAgICAgICAgMjA6IHsgZmllbGQ6ICdoZWFkaW5nJyB9LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwNC1yZW1vdmVjb21iYXRhbnRcXG4gICAgICovXFxuICAgIHN0YXRpYyByZW1vdmluZ0NvbWJhdGFudChwYXJhbXMpIHtcXG4gICAgICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdyZW1vdmluZ0NvbWJhdGFudCcsIHtcXG4gICAgICAgICAgICAwOiB7IGZpZWxkOiAndHlwZScsIHZhbHVlOiAnMDQnIH0sXFxuICAgICAgICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcXG4gICAgICAgICAgICAyOiB7IGZpZWxkOiAnaWQnIH0sXFxuICAgICAgICAgICAgMzogeyBmaWVsZDogJ25hbWUnIH0sXFxuICAgICAgICAgICAgMTI6IHsgZmllbGQ6ICdocCcgfSxcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMWEtbmV0d29ya2J1ZmZcXG4gICAgICovXFxuICAgIHN0YXRpYyBnYWluc0VmZmVjdChwYXJhbXMpIHtcXG4gICAgICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdnYWluc0VmZmVjdCcsIHtcXG4gICAgICAgICAgICAwOiB7IGZpZWxkOiAndHlwZScsIHZhbHVlOiAnMjYnIH0sXFxuICAgICAgICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcXG4gICAgICAgICAgICAyOiB7IGZpZWxkOiAnZWZmZWN0SWQnIH0sXFxuICAgICAgICAgICAgMzogeyBmaWVsZDogJ2VmZmVjdCcgfSxcXG4gICAgICAgICAgICA0OiB7IGZpZWxkOiAnZHVyYXRpb24nIH0sXFxuICAgICAgICAgICAgNTogeyBmaWVsZDogJ3NvdXJjZUlkJyB9LFxcbiAgICAgICAgICAgIDY6IHsgZmllbGQ6ICdzb3VyY2UnIH0sXFxuICAgICAgICAgICAgNzogeyBmaWVsZDogJ3RhcmdldElkJyB9LFxcbiAgICAgICAgICAgIDg6IHsgZmllbGQ6ICd0YXJnZXQnIH0sXFxuICAgICAgICAgICAgOTogeyBmaWVsZDogJ2NvdW50JyB9LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIFByZWZlciBnYWluc0VmZmVjdCBvdmVyIHRoaXMgZnVuY3Rpb24gdW5sZXNzIHlvdSByZWFsbHkgbmVlZCBleHRyYSBkYXRhLlxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMjYtbmV0d29ya3N0YXR1c2VmZmVjdHNcXG4gICAgICovXFxuICAgIHN0YXRpYyBzdGF0dXNFZmZlY3RFeHBsaWNpdChwYXJhbXMpIHtcXG4gICAgICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdzdGF0dXNFZmZlY3RFeHBsaWNpdCcsIHtcXG4gICAgICAgICAgICAwOiB7IGZpZWxkOiAndHlwZScsIHZhbHVlOiAnMzgnIH0sXFxuICAgICAgICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcXG4gICAgICAgICAgICAyOiB7IGZpZWxkOiAndGFyZ2V0SWQnIH0sXFxuICAgICAgICAgICAgMzogeyBmaWVsZDogJ3RhcmdldCcgfSxcXG4gICAgICAgICAgICA1OiB7IGZpZWxkOiAnaHAnIH0sXFxuICAgICAgICAgICAgNjogeyBmaWVsZDogJ21heEhwJyB9LFxcbiAgICAgICAgICAgIDExOiB7IGZpZWxkOiAneCcgfSxcXG4gICAgICAgICAgICAxMjogeyBmaWVsZDogJ3knIH0sXFxuICAgICAgICAgICAgMTM6IHsgZmllbGQ6ICd6JyB9LFxcbiAgICAgICAgICAgIDE0OiB7IGZpZWxkOiAnaGVhZGluZycgfSxcXG4gICAgICAgICAgICAxNTogeyBmaWVsZDogJ2RhdGEwJyB9LFxcbiAgICAgICAgICAgIDE2OiB7IGZpZWxkOiAnZGF0YTEnIH0sXFxuICAgICAgICAgICAgMTc6IHsgZmllbGQ6ICdkYXRhMicgfSxcXG4gICAgICAgICAgICAxODogeyBmaWVsZDogJ2RhdGEzJyB9LFxcbiAgICAgICAgICAgIDE5OiB7IGZpZWxkOiAnZGF0YTQnIH0sXFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzFlLW5ldHdvcmtidWZmcmVtb3ZlXFxuICAgICAqL1xcbiAgICBzdGF0aWMgbG9zZXNFZmZlY3QocGFyYW1zKSB7XFxuICAgICAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnbG9zZXNFZmZlY3QnLCB7XFxuICAgICAgICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzMwJyB9LFxcbiAgICAgICAgICAgIDE6IHsgZmllbGQ6ICd0aW1lc3RhbXAnIH0sXFxuICAgICAgICAgICAgMjogeyBmaWVsZDogJ2VmZmVjdElkJyB9LFxcbiAgICAgICAgICAgIDM6IHsgZmllbGQ6ICdlZmZlY3QnIH0sXFxuICAgICAgICAgICAgNTogeyBmaWVsZDogJ3NvdXJjZUlkJyB9LFxcbiAgICAgICAgICAgIDY6IHsgZmllbGQ6ICdzb3VyY2UnIH0sXFxuICAgICAgICAgICAgNzogeyBmaWVsZDogJ3RhcmdldElkJyB9LFxcbiAgICAgICAgICAgIDg6IHsgZmllbGQ6ICd0YXJnZXQnIH0sXFxuICAgICAgICAgICAgOTogeyBmaWVsZDogJ2NvdW50JyB9LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMyMy1uZXR3b3JrdGV0aGVyXFxuICAgICAqL1xcbiAgICBzdGF0aWMgdGV0aGVyKHBhcmFtcykge1xcbiAgICAgICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ3RldGhlcicsIHtcXG4gICAgICAgICAgICAwOiB7IGZpZWxkOiAndHlwZScsIHZhbHVlOiAnMzUnIH0sXFxuICAgICAgICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcXG4gICAgICAgICAgICAyOiB7IGZpZWxkOiAnc291cmNlSWQnIH0sXFxuICAgICAgICAgICAgMzogeyBmaWVsZDogJ3NvdXJjZScgfSxcXG4gICAgICAgICAgICA0OiB7IGZpZWxkOiAndGFyZ2V0SWQnIH0sXFxuICAgICAgICAgICAgNTogeyBmaWVsZDogJ3RhcmdldCcgfSxcXG4gICAgICAgICAgICA4OiB7IGZpZWxkOiAnaWQnIH0sXFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogJ3RhcmdldCcgd2FzIGRlZmVhdGVkIGJ5ICdzb3VyY2UnXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxOS1uZXR3b3JrZGVhdGhcXG4gICAgICovXFxuICAgIHN0YXRpYyB3YXNEZWZlYXRlZChwYXJhbXMpIHtcXG4gICAgICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICd3YXNEZWZlYXRlZCcsIHtcXG4gICAgICAgICAgICAwOiB7IGZpZWxkOiAndHlwZScsIHZhbHVlOiAnMjUnIH0sXFxuICAgICAgICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcXG4gICAgICAgICAgICAyOiB7IGZpZWxkOiAndGFyZ2V0SWQnIH0sXFxuICAgICAgICAgICAgMzogeyBmaWVsZDogJ3RhcmdldCcgfSxcXG4gICAgICAgICAgICA0OiB7IGZpZWxkOiAnc291cmNlSWQnIH0sXFxuICAgICAgICAgICAgNTogeyBmaWVsZDogJ3NvdXJjZScgfSxcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMDAtbG9nbGluZVxcbiAgICAgKi9cXG4gICAgc3RhdGljIGVjaG8ocGFyYW1zKSB7XFxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcpXFxuICAgICAgICAgICAgcGFyYW1zID0ge307XFxuICAgICAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKHBhcmFtcywgJ2VjaG8nLCBbJ3R5cGUnLCAndGltZXN0YW1wJywgJ2NvZGUnLCAnbmFtZScsICdsaW5lJywgJ2NhcHR1cmUnXSk7XFxuICAgICAgICBwYXJhbXMuY29kZSA9ICcwMDM4JztcXG4gICAgICAgIHJldHVybiBOZXRSZWdleGVzLmdhbWVMb2cocGFyYW1zKTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzAwLWxvZ2xpbmVcXG4gICAgICovXFxuICAgIHN0YXRpYyBkaWFsb2cocGFyYW1zKSB7XFxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcpXFxuICAgICAgICAgICAgcGFyYW1zID0ge307XFxuICAgICAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKHBhcmFtcywgJ2RpYWxvZycsIFsndHlwZScsICd0aW1lc3RhbXAnLCAnY29kZScsICduYW1lJywgJ2xpbmUnLCAnY2FwdHVyZSddKTtcXG4gICAgICAgIHBhcmFtcy5jb2RlID0gJzAwNDQnO1xcbiAgICAgICAgcmV0dXJuIE5ldFJlZ2V4ZXMuZ2FtZUxvZyhwYXJhbXMpO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMDAtbG9nbGluZVxcbiAgICAgKi9cXG4gICAgc3RhdGljIG1lc3NhZ2UocGFyYW1zKSB7XFxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcpXFxuICAgICAgICAgICAgcGFyYW1zID0ge307XFxuICAgICAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKHBhcmFtcywgJ21lc3NhZ2UnLCBbJ3R5cGUnLCAndGltZXN0YW1wJywgJ2NvZGUnLCAnbmFtZScsICdsaW5lJywgJ2NhcHR1cmUnXSk7XFxuICAgICAgICBwYXJhbXMuY29kZSA9ICcwODM5JztcXG4gICAgICAgIHJldHVybiBOZXRSZWdleGVzLmdhbWVMb2cocGFyYW1zKTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogZmllbGRzOiBjb2RlLCBuYW1lLCBsaW5lLCBjYXB0dXJlXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMC1sb2dsaW5lXFxuICAgICAqL1xcbiAgICBzdGF0aWMgZ2FtZUxvZyhwYXJhbXMpIHtcXG4gICAgICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdnYW1lTG9nJywge1xcbiAgICAgICAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICcwMCcgfSxcXG4gICAgICAgICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxcbiAgICAgICAgICAgIDI6IHsgZmllbGQ6ICdjb2RlJyB9LFxcbiAgICAgICAgICAgIDM6IHsgZmllbGQ6ICduYW1lJyB9LFxcbiAgICAgICAgICAgIDQ6IHsgZmllbGQ6ICdsaW5lJyB9LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMC1sb2dsaW5lXFxuICAgICAqL1xcbiAgICBzdGF0aWMgZ2FtZU5hbWVMb2cocGFyYW1zKSB7XFxuICAgICAgICAvLyBmb3IgY29tcGF0IHdpdGggUmVnZXhlcy5cXG4gICAgICAgIHJldHVybiBOZXRSZWdleGVzLmdhbWVMb2cocGFyYW1zKTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzBjLXBsYXllcnN0YXRzXFxuICAgICAqL1xcbiAgICBzdGF0aWMgc3RhdENoYW5nZShwYXJhbXMpIHtcXG4gICAgICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdzdGF0Q2hhbmdlJywge1xcbiAgICAgICAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICcxMicgfSxcXG4gICAgICAgICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxcbiAgICAgICAgICAgIDI6IHsgZmllbGQ6ICdqb2InIH0sXFxuICAgICAgICAgICAgMzogeyBmaWVsZDogJ3N0cmVuZ3RoJyB9LFxcbiAgICAgICAgICAgIDQ6IHsgZmllbGQ6ICdkZXh0ZXJpdHknIH0sXFxuICAgICAgICAgICAgNTogeyBmaWVsZDogJ3ZpdGFsaXR5JyB9LFxcbiAgICAgICAgICAgIDY6IHsgZmllbGQ6ICdpbnRlbGxpZ2VuY2UnIH0sXFxuICAgICAgICAgICAgNzogeyBmaWVsZDogJ21pbmQnIH0sXFxuICAgICAgICAgICAgODogeyBmaWVsZDogJ3BpZXR5JyB9LFxcbiAgICAgICAgICAgIDk6IHsgZmllbGQ6ICdhdHRhY2tQb3dlcicgfSxcXG4gICAgICAgICAgICAxMDogeyBmaWVsZDogJ2RpcmVjdEhpdCcgfSxcXG4gICAgICAgICAgICAxMTogeyBmaWVsZDogJ2NyaXRpY2FsSGl0JyB9LFxcbiAgICAgICAgICAgIDEyOiB7IGZpZWxkOiAnYXR0YWNrTWFnaWNQb3RlbmN5JyB9LFxcbiAgICAgICAgICAgIDEzOiB7IGZpZWxkOiAnaGVhbE1hZ2ljUG90ZW5jeScgfSxcXG4gICAgICAgICAgICAxNDogeyBmaWVsZDogJ2RldGVybWluYXRpb24nIH0sXFxuICAgICAgICAgICAgMTU6IHsgZmllbGQ6ICdza2lsbFNwZWVkJyB9LFxcbiAgICAgICAgICAgIDE2OiB7IGZpZWxkOiAnc3BlbGxTcGVlZCcgfSxcXG4gICAgICAgICAgICAxODogeyBmaWVsZDogJ3RlbmFjaXR5JyB9LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMS1jaGFuZ2V6b25lXFxuICAgICAqL1xcbiAgICBzdGF0aWMgY2hhbmdlWm9uZShwYXJhbXMpIHtcXG4gICAgICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdjaGFuZ2Vab25lJywge1xcbiAgICAgICAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICcwMScgfSxcXG4gICAgICAgICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxcbiAgICAgICAgICAgIDI6IHsgZmllbGQ6ICdpZCcgfSxcXG4gICAgICAgICAgICAzOiB7IGZpZWxkOiAnbmFtZScgfSxcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMjEtbmV0d29yazZkLWFjdG9yLWNvbnRyb2wtbGluZXNcXG4gICAgICovXFxuICAgIHN0YXRpYyBuZXR3b3JrNmQocGFyYW1zKSB7XFxuICAgICAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnbmV0d29yazZkJywge1xcbiAgICAgICAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICczMycgfSxcXG4gICAgICAgICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxcbiAgICAgICAgICAgIDI6IHsgZmllbGQ6ICdpbnN0YW5jZScgfSxcXG4gICAgICAgICAgICAzOiB7IGZpZWxkOiAnY29tbWFuZCcgfSxcXG4gICAgICAgICAgICA0OiB7IGZpZWxkOiAnZGF0YTAnIH0sXFxuICAgICAgICAgICAgNTogeyBmaWVsZDogJ2RhdGExJyB9LFxcbiAgICAgICAgICAgIDY6IHsgZmllbGQ6ICdkYXRhMicgfSxcXG4gICAgICAgICAgICA3OiB7IGZpZWxkOiAnZGF0YTMnIH0sXFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXG4gICAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzIyLW5ldHdvcmtuYW1ldG9nZ2xlXFxuICAgICAqL1xcbiAgICBzdGF0aWMgbmFtZVRvZ2dsZShwYXJhbXMpIHtcXG4gICAgICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICduYW1lVG9nZ2xlJywge1xcbiAgICAgICAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICczNCcgfSxcXG4gICAgICAgICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxcbiAgICAgICAgICAgIDI6IHsgZmllbGQ6ICdpZCcgfSxcXG4gICAgICAgICAgICAzOiB7IGZpZWxkOiAnbmFtZScgfSxcXG4gICAgICAgICAgICA2OiB7IGZpZWxkOiAndG9nZ2xlJyB9LFxcbiAgICAgICAgfSk7XFxuICAgIH1cXG59XFxuTmV0UmVnZXhlcy5mbGFnVHJhbnNsYXRpb25zTmVlZGVkID0gZmFsc2U7XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcmVzb3VyY2VzL3RyYW5zbGF0aW9ucy50c1xcblxcblxcbi8vIEZpbGwgaW4gTG9jYWxlUmVnZXggc28gdGhhdCB0aGluZ3MgbGlrZSBMb2NhbGVSZWdleC5jb3VudGRvd25TdGFydC5kZSBpcyBhIHZhbGlkIHJlZ2V4LlxcbmNvbnN0IGxvY2FsZUxpbmVzID0ge1xcbiAgICBjb3VudGRvd25TdGFydDoge1xcbiAgICAgICAgZW46ICdCYXR0bGUgY29tbWVuY2luZyBpbiAoPzx0aW1lPlxcXFxcXFxceXtGbG9hdH0pIHNlY29uZHMhIFxcXFxcXFxcKCg/PHBsYXllcj4uKj8pXFxcXFxcXFwpJyxcXG4gICAgICAgIGRlOiAnTm9jaCAoPzx0aW1lPlxcXFxcXFxceXtGbG9hdH0pIFNla3VuZGVuIGJpcyBLYW1wZmJlZ2lubiEgXFxcXFxcXFwoKD88cGxheWVyPi4qPylcXFxcXFxcXCknLFxcbiAgICAgICAgZnI6ICdEw6lidXQgZHUgY29tYmF0IGRhbnMgKD88dGltZT5cXFxcXFxcXHl7RmxvYXR9KSBzZWNvbmRlc1sgXT8hIFxcXFxcXFxcKCg/PHBsYXllcj4uKj8pXFxcXFxcXFwpJyxcXG4gICAgICAgIGphOiAn5oim6ZeY6ZaL5aeL44G+44GnKD88dGltZT5cXFxcXFxcXHl7RmxvYXR9Keenku+8gSBcXFxcXFxcXCgoPzxwbGF5ZXI+Lio/KVxcXFxcXFxcKScsXFxuICAgICAgICBjbjogJ+i3neemu+aImOaWl+W8gOWni+i/mOaciSg/PHRpbWU+XFxcXFxcXFx5e0Zsb2F0fSnnp5LvvIEg77yIKD88cGxheWVyPi4qPynvvIknLFxcbiAgICAgICAga286ICfsoITtiKwg7Iuc7J6RICg/PHRpbWU+XFxcXFxcXFx5e0Zsb2F0fSnstIgg7KCEISBcXFxcXFxcXCgoPzxwbGF5ZXI+Lio/KVxcXFxcXFxcKScsXFxuICAgIH0sXFxuICAgIGNvdW50ZG93bkVuZ2FnZToge1xcbiAgICAgICAgZW46ICdFbmdhZ2UhJyxcXG4gICAgICAgIGRlOiAnU3RhcnQhJyxcXG4gICAgICAgIGZyOiAnw4AgbFxcXFwnYXR0YXF1ZVsgXT8hJyxcXG4gICAgICAgIGphOiAn5oim6ZeY6ZaL5aeL77yBJyxcXG4gICAgICAgIGNuOiAn5oiY5paX5byA5aeL77yBJyxcXG4gICAgICAgIGtvOiAn7KCE7YisIOyLnOyekSEnLFxcbiAgICB9LFxcbiAgICBjb3VudGRvd25DYW5jZWw6IHtcXG4gICAgICAgIGVuOiAnQ291bnRkb3duIGNhbmNlbGVkIGJ5ICg/PHBsYXllcj5cXFxcXFxcXHl7TmFtZX0pJyxcXG4gICAgICAgIGRlOiAnKD88cGxheWVyPlxcXFxcXFxceXtOYW1lfSkgaGF0IGRlbiBDb3VudGRvd24gYWJnZWJyb2NoZW4nLFxcbiAgICAgICAgZnI6ICdMZSBjb21wdGUgw6AgcmVib3VycyBhIMOpdMOpIGludGVycm9tcHUgcGFyICg/PHBsYXllcj5cXFxcXFxcXHl7TmFtZX0pWyBdP1xcXFxcXFxcLicsXFxuICAgICAgICBqYTogJyg/PHBsYXllcj5cXFxcXFxcXHl7TmFtZX0p44Gr44KI44KK44CB5oim6ZeY6ZaL5aeL44Kr44Km44Oz44OI44GM44Kt44Oj44Oz44K744Or44GV44KM44G+44GX44Gf44CCJyxcXG4gICAgICAgIGNuOiAnKD88cGxheWVyPlxcXFxcXFxceXtOYW1lfSnlj5bmtojkuobmiJjmlpflvIDlp4vlgJLorqHml7bjgIInLFxcbiAgICAgICAga286ICcoPzxwbGF5ZXI+XFxcXFxcXFx5e05hbWV9KSDri5jsnbQg7LSI7J296riw66W8IOy3qOyGjO2WiOyKteuLiOuLpFxcXFxcXFxcLicsXFxuICAgIH0sXFxuICAgIGFyZWFTZWFsOiB7XFxuICAgICAgICBlbjogJyg/PGFyZWE+Lio/KSB3aWxsIGJlIHNlYWxlZCBvZmYgaW4gKD88dGltZT5cXFxcXFxcXHl7RmxvYXR9KSBzZWNvbmRzIScsXFxuICAgICAgICBkZTogJ05vY2ggKD88dGltZT5cXFxcXFxcXHl7RmxvYXR9KSBTZWt1bmRlbiwgYmlzIHNpY2ggKD88YXJlYT4uKj8pIHNjaGxpZcOfdCcsXFxuICAgICAgICBmcjogJ0Zlcm1ldHVyZSAoPzxhcmVhPi4qPykgZGFucyAoPzx0aW1lPlxcXFxcXFxceXtGbG9hdH0pIHNlY29uZGVzWyBdP1xcXFxcXFxcLicsXFxuICAgICAgICBqYTogJyg/PGFyZWE+Lio/KeOBruWwgemOluOBvuOBp+OBguOBqCg/PHRpbWU+XFxcXFxcXFx5e0Zsb2F0fSnnp5InLFxcbiAgICAgICAgY246ICfot50oPzxhcmVhPi4qPynooqvlsIHplIHov5jmnIkoPzx0aW1lPlxcXFxcXFxceXtGbG9hdH0p56eSJyxcXG4gICAgICAgIGtvOiAnKD88dGltZT5cXFxcXFxcXHl7RmxvYXR9Key0iCDtm4Tsl5AgKD88YXJlYT4uKj8pKOydtHzqsIApIOu0ieyHhOuQqeuLiOuLpFxcXFxcXFxcLicsXFxuICAgIH0sXFxuICAgIGFyZWFVbnNlYWw6IHtcXG4gICAgICAgIGVuOiAnKD88YXJlYT4uKj8pIGlzIG5vIGxvbmdlciBzZWFsZWQuJyxcXG4gICAgICAgIGRlOiAnKD88YXJlYT4uKj8pIMO2ZmZuZXQgc2ljaCBlcm5ldXQuJyxcXG4gICAgICAgIGZyOiAnT3V2ZXJ0dXJlICg/PGFyZWE+Lio/KVsgXT8hJyxcXG4gICAgICAgIGphOiAnKD88YXJlYT4uKj8p44Gu5bCB6Y6W44GM6Kej44GL44KM44Gf4oCm4oCmJyxcXG4gICAgICAgIGNuOiAnKD88YXJlYT4uKj8p55qE5bCB6ZSB6Kej6Zmk5LqGJyxcXG4gICAgICAgIGtvOiAnKD88YXJlYT4uKj8p7J2YIOu0ieyHhOqwgCDtlbTsoJzrkJjsl4jsirXri4jri6RcXFxcXFxcXC4nLFxcbiAgICB9LFxcbiAgICAvLyBSZWNpcGUgbmFtZSBhbHdheXMgc3RhcnQgd2l0aCBcXFxcdWUwYmJcXG4gICAgLy8gSFEgaWNvbiBpcyBcXFxcdWUwM2NcXG4gICAgY3JhZnRpbmdTdGFydDoge1xcbiAgICAgICAgZW46ICdZb3UgYmVnaW4gc3ludGhlc2l6aW5nICg/PGNvdW50Pihhbj98XFxcXFxcXFxkKykgKT9cXFxcdWUwYmIoPzxyZWNpcGU+LiopXFxcXFxcXFwuJyxcXG4gICAgICAgIGRlOiAnRHUgaGFzdCBiZWdvbm5lbiwgZHVyY2ggU3ludGhlc2UgKD88Y291bnQ+KGVpbihlfGVzfGVtfGVyKT98XFxcXFxcXFxkKykgKT9cXFxcdWUwYmIoPzxyZWNpcGU+LiopIGhlcnp1c3RlbGxlblxcXFxcXFxcLicsXFxuICAgICAgICBmcjogJ1ZvdXMgY29tbWVuY2V6IMOgIGZhYnJpcXVlciAoPzxjb3VudD4odW5lP3xcXFxcXFxcXGQrKSApP1xcXFx1ZTBiYig/PHJlY2lwZT4uKilcXFxcXFxcXC4nLFxcbiAgICAgICAgamE6ICcoPzxwbGF5ZXI+XFxcXFxcXFx5e05hbWV9KeOBr1xcXFx1ZTBiYig/PHJlY2lwZT4uKikow5coPzxjb3VudD5cXFxcXFxcXGQrKSk/44Gu6KO95L2c44KS6ZaL5aeL44GX44Gf44CCJyxcXG4gICAgICAgIGNuOiAnKD88cGxheWVyPlxcXFxcXFxceXtOYW1lfSnlvIDlp4vliLbkvZzigJxcXFxcdWUwYmIoPzxyZWNpcGU+Liop4oCdKMOXKD88Y291bnQ+XFxcXFxcXFxkKykpP+OAgicsXFxuICAgICAgICBrbzogJ1xcXFx1ZTBiYig/PHJlY2lwZT4uKikow5coPzxjb3VudD5cXFxcXFxcXGQrKeqwnCk/IOygnOyekeydhCDsi5zsnpHtlanri4jri6RcXFxcXFxcXC4nLFxcbiAgICB9LFxcbiAgICB0cmlhbENyYWZ0aW5nU3RhcnQ6IHtcXG4gICAgICAgIGVuOiAnWW91IGJlZ2luIHRyaWFsIHN5bnRoZXNpcyBvZiBcXFxcdWUwYmIoPzxyZWNpcGU+LiopXFxcXFxcXFwuJyxcXG4gICAgICAgIGRlOiAnRHUgaGFzdCBtaXQgZGVyIFRlc3RzeW50aGVzZSB2b24gXFxcXHVlMGJiKD88cmVjaXBlPi4qKSBiZWdvbm5lblxcXFxcXFxcLicsXFxuICAgICAgICBmcjogJ1ZvdXMgY29tbWVuY2V6IHVuZSBzeW50aMOoc2UgZFxcXFwnZXNzYWkgcG91ciB1bmU/IFxcXFx1ZTBiYig/PHJlY2lwZT4uKilcXFxcXFxcXC4nLFxcbiAgICAgICAgamE6ICcoPzxwbGF5ZXI+XFxcXFxcXFx5e05hbWV9KeOBr1xcXFx1ZTBiYig/PHJlY2lwZT4uKinjga7oo73kvZznt7Tnv5LjgpLplovlp4vjgZfjgZ/jgIInLFxcbiAgICAgICAgY246ICcoPzxwbGF5ZXI+XFxcXFxcXFx5e05hbWV9KeW8gOWni+e7g+S5oOWItuS9nFxcXFx1ZTBiYig/PHJlY2lwZT4uKinjgIInLFxcbiAgICAgICAga286ICdcXFxcdWUwYmIoPzxyZWNpcGU+LiopIOygnOyekSDsl7DsirXsnYQg7Iuc7J6R7ZWp64uI64ukXFxcXFxcXFwuJyxcXG4gICAgfSxcXG4gICAgY3JhZnRpbmdGaW5pc2g6IHtcXG4gICAgICAgIGVuOiAnWW91IHN5bnRoZXNpemUgKD88Y291bnQ+KGFuP3xcXFxcXFxcXGQrKSApP1xcXFx1ZTBiYig/PHJlY2lwZT4uKikoXFxcXHVlMDNjKT9cXFxcXFxcXC4nLFxcbiAgICAgICAgZGU6ICdEdSBoYXN0IGVyZm9sZ3JlaWNoICg/PGNvdW50PihlaW4oZXxlc3xlbXxlcik/fFxcXFxcXFxcZCspICk/KD88cmVjaXBlPi4qKShcXFxcdWUwM2MpPyBoZXJnZXN0ZWxsdFxcXFxcXFxcLicsXFxuICAgICAgICBmcjogJ1ZvdXMgZmFicmlxdWV6ICg/PGNvdW50Pih1bmU/fFxcXFxcXFxcZCspICk/XFxcXHVlMGJiKD88cmVjaXBlPi4qKShcXFxcdWUwM2MpP1xcXFxcXFxcLicsXFxuICAgICAgICBqYTogJyg/PHBsYXllcj5cXFxcXFxcXHl7TmFtZX0p44GvXFxcXHVlMGJiKD88cmVjaXBlPi4qKShcXFxcdWUwM2MpPyjDlyg/PGNvdW50PlxcXFxcXFxcZCspKT/jgpLlrozmiJDjgZXjgZvjgZ/vvIEnLFxcbiAgICAgICAgY246ICcoPzxwbGF5ZXI+XFxcXFxcXFx5e05hbWV9KeWItuS9nOKAnFxcXFx1ZTBiYig/PHJlY2lwZT4uKikoXFxcXHVlMDNjKT/igJ0ow5coPzxjb3VudD5cXFxcXFxcXGQrKSk/5oiQ5Yqf77yBJyxcXG4gICAgICAgIGtvOiAnKD88cGxheWVyPlxcXFxcXFxceXtOYW1lfSkg64uY7J20IFxcXFx1ZTBiYig/PHJlY2lwZT4uKikoXFxcXHVlMDNjKT8ow5coPzxjb3VudD5cXFxcXFxcXGQrKeqwnCk/KOydhHzrpbwpIOyZhOyEse2WiOyKteuLiOuLpCEnLFxcbiAgICB9LFxcbiAgICB0cmlhbENyYWZ0aW5nRmluaXNoOiB7XFxuICAgICAgICBlbjogJ1lvdXIgdHJpYWwgc3ludGhlc2lzIG9mIFxcXFx1ZTBiYig/PHJlY2lwZT4uKikgcHJvdmVkIGEgc3VjY2VzcyEnLFxcbiAgICAgICAgZGU6ICdEaWUgVGVzdHN5bnRoZXNlIHZvbiBcXFxcdWUwYmIoPzxyZWNpcGU+LiopIHdhciBlcmZvbGdyZWljaCEnLFxcbiAgICAgICAgZnI6ICdWb3RyZSBzeW50aMOoc2UgZFxcXFwnZXNzYWkgcG91ciBmYWJyaXF1ZXIgXFxcXHVlMGJiKD88cmVjaXBlPi4qKSBhIMOpdMOpIGNvdXJvbm7DqWUgZGUgc3VjY8OocyEnLFxcbiAgICAgICAgamE6ICcoPzxwbGF5ZXI+XFxcXFxcXFx5e05hbWV9KeOBr1xcXFx1ZTBiYig/PHJlY2lwZT4uKinjga7oo73kvZznt7Tnv5LjgavmiJDlip/jgZfjgZ/vvIEnLFxcbiAgICAgICAgY246ICcoPzxwbGF5ZXI+XFxcXFxcXFx5e05hbWV9Kee7g+S5oOWItuS9nFxcXFx1ZTBiYig/PHJlY2lwZT4uKinmiJDlip/kuobvvIEnLFxcbiAgICAgICAga286ICdcXFxcdWUwYmIoPzxyZWNpcGU+LiopIOygnOyekSDsl7DsirXsl5Ag7ISx6rO17ZaI7Iq164uI64ukIScsXFxuICAgIH0sXFxuICAgIGNyYWZ0aW5nRmFpbDoge1xcbiAgICAgICAgZW46ICdZb3VyIHN5bnRoZXNpcyBmYWlscyEnLFxcbiAgICAgICAgZGU6ICdEZWluZSBTeW50aGVzZSBpc3QgZmVobGdlc2NobGFnZW4hJyxcXG4gICAgICAgIGZyOiAnTGEgc3ludGjDqHNlIMOpY2hvdWVcXFxcXFxcXC57M30nLFxcbiAgICAgICAgamE6ICcoPzxwbGF5ZXI+XFxcXFxcXFx5e05hbWV9KeOBr+ijveS9nOOBq+WkseaVl+OBl+OBn+KApuKApicsXFxuICAgICAgICBjbjogJyg/PHBsYXllcj5cXFxcXFxcXHl7TmFtZX0p5Yi25L2c5aSx6LSl5LqG4oCm4oCmJyxcXG4gICAgICAgIGtvOiAn7KCc7J6R7JeQIOyLpO2MqO2WiOyKteuLiOuLpOKApuKAplxcXFxcXFxcLicsXFxuICAgIH0sXFxuICAgIHRyaWFsQ3JhZnRpbmdGYWlsOiB7XFxuICAgICAgICBlbjogJ1lvdXIgdHJpYWwgc3ludGhlc2lzIG9mIFxcXFx1ZTBiYig/PHJlY2lwZT4uKikgZmFpbGVkXFxcXFxcXFwuezN9JyxcXG4gICAgICAgIGRlOiAnRGllIFRlc3RzeW50aGVzZSB2b24gXFxcXHVlMGJiKD88cmVjaXBlPi4qKSBpc3QgZmVobGdlc2NobGFnZW5cXFxcXFxcXC57M30nLFxcbiAgICAgICAgZnI6ICdWb3RyZSBzeW50aMOoc2UgZFxcXFwnZXNzYWkgcG91ciBmYWJyaXF1ZXIgXFxcXHVlMGJiKD88cmVjaXBlPi4qKSBzXFxcXCdlc3Qgc29sZMOpZSBwYXIgdW4gw6ljaGVjXFxcXFxcXFwuezN9JyxcXG4gICAgICAgIGphOiAnKD88cGxheWVyPlxcXFxcXFxceXtOYW1lfSnjga9cXFxcdWUwYmIoPzxyZWNpcGU+Liop44Gu6KO95L2c57e057+S44Gr5aSx5pWX44GX44Gf4oCm4oCmJyxcXG4gICAgICAgIGNuOiAnKD88cGxheWVyPlxcXFxcXFxceXtOYW1lfSnnu4PkuaDliLbkvZxcXFxcdWUwYmIoPzxyZWNpcGU+Liop5aSx6LSl5LqG4oCm4oCmJyxcXG4gICAgICAgIGtvOiAnXFxcXHVlMGJiKD88cmVjaXBlPi4qKSDsoJzsnpEg7Jew7Iq17JeQIOyLpO2MqO2WiOyKteuLiOuLpOKApuKAplxcXFxcXFxcLicsXFxuICAgIH0sXFxuICAgIGNyYWZ0aW5nQ2FuY2VsOiB7XFxuICAgICAgICBlbjogJ1lvdSBjYW5jZWwgdGhlIHN5bnRoZXNpc1xcXFxcXFxcLicsXFxuICAgICAgICBkZTogJ0R1IGhhc3QgZGllIFN5bnRoZXNlIGFiZ2Vicm9jaGVuXFxcXFxcXFwuJyxcXG4gICAgICAgIGZyOiAnTGEgc3ludGjDqHNlIGVzdCBhbm51bMOpZVxcXFxcXFxcLicsXFxuICAgICAgICBqYTogJyg/PHBsYXllcj5cXFxcXFxcXHl7TmFtZX0p44Gv6KO95L2c44KS5Lit5q2i44GX44Gf44CCJyxcXG4gICAgICAgIGNuOiAnKD88cGxheWVyPlxcXFxcXFxceXtOYW1lfSnkuK3mraLkuobliLbkvZzkvZzkuJrjgIInLFxcbiAgICAgICAga286ICfsoJzsnpHsnYQg7KSR7KeA7ZaI7Iq164uI64ukXFxcXFxcXFwuJyxcXG4gICAgfSxcXG4gICAgdHJpYWxDcmFmdGluZ0NhbmNlbDoge1xcbiAgICAgICAgZW46ICdZb3UgYWJhbmRvbmVkIHRyaWFsIHN5bnRoZXNpc1xcXFxcXFxcLicsXFxuICAgICAgICBkZTogJ1Rlc3RzeW50aGVzZSBhYmdlYnJvY2hlblxcXFxcXFxcLicsXFxuICAgICAgICBmcjogJ1ZvdXMgYXZleiBpbnRlcnJvbXB1IGxhIHN5bnRow6hzZSBkXFxcXCdlc3NhaVxcXFxcXFxcLicsXFxuICAgICAgICBqYTogJyg/PHBsYXllcj5cXFxcXFxcXHl7TmFtZX0p44Gv6KO95L2c57e057+S44KS5Lit5q2i44GX44Gf44CCJyxcXG4gICAgICAgIGNuOiAnKD88cGxheWVyPlxcXFxcXFxceXtOYW1lfSnlgZzmraLkuobnu4PkuaDjgIInLFxcbiAgICAgICAga286ICfsoJzsnpEg7Jew7Iq17J2EIOykkeyngO2WiOyKteuLiOuLpFxcXFxcXFxcLicsXFxuICAgIH0sXFxufTtcXG5jbGFzcyBSZWdleFNldCB7XFxuICAgIGdldCBsb2NhbGVSZWdleCgpIHtcXG4gICAgICAgIGlmICh0aGlzLnJlZ2V4ZXMpXFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVnZXhlcztcXG4gICAgICAgIHRoaXMucmVnZXhlcyA9IHRoaXMuYnVpbGRMb2NhbGVSZWdleGVzKGxvY2FsZUxpbmVzLCAocykgPT4gUmVnZXhlcy5nYW1lTG9nKHsgbGluZTogcyArICcuKj8nIH0pKTtcXG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2V4ZXM7XFxuICAgIH1cXG4gICAgZ2V0IGxvY2FsZU5ldFJlZ2V4KCkge1xcbiAgICAgICAgaWYgKHRoaXMubmV0UmVnZXhlcylcXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZXRSZWdleGVzO1xcbiAgICAgICAgdGhpcy5uZXRSZWdleGVzID0gdGhpcy5idWlsZExvY2FsZVJlZ2V4ZXMobG9jYWxlTGluZXMsIChzKSA9PiBOZXRSZWdleGVzLmdhbWVMb2coeyBsaW5lOiBzICsgJ1tefF0qPycgfSkpO1xcbiAgICAgICAgcmV0dXJuIHRoaXMubmV0UmVnZXhlcztcXG4gICAgfVxcbiAgICBidWlsZExvY2FsZVJlZ2V4ZXMobG9jYWxlcywgYnVpbGRlcikge1xcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3RcXG4gICAgICAgICAgICAuZW50cmllcyhsb2NhbGVzKVxcbiAgICAgICAgICAgIC5tYXAoKFtrZXksIGxpbmVzXSkgPT4gW2tleSwgdGhpcy5idWlsZExvY2FsZVJlZ2V4KGxpbmVzLCBidWlsZGVyKV0pKTtcXG4gICAgfVxcbiAgICBidWlsZExvY2FsZVJlZ2V4KGxpbmVzLCBidWlsZGVyKSB7XFxuICAgICAgICBjb25zdCByZWdleEVuID0gYnVpbGRlcihsaW5lcy5lbik7XFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIGVuOiByZWdleEVuLFxcbiAgICAgICAgICAgIGRlOiBsaW5lcy5kZSA/IGJ1aWxkZXIobGluZXMuZGUpIDogcmVnZXhFbixcXG4gICAgICAgICAgICBmcjogbGluZXMuZnIgPyBidWlsZGVyKGxpbmVzLmZyKSA6IHJlZ2V4RW4sXFxuICAgICAgICAgICAgamE6IGxpbmVzLmphID8gYnVpbGRlcihsaW5lcy5qYSkgOiByZWdleEVuLFxcbiAgICAgICAgICAgIGNuOiBsaW5lcy5jbiA/IGJ1aWxkZXIobGluZXMuY24pIDogcmVnZXhFbixcXG4gICAgICAgICAgICBrbzogbGluZXMua28gPyBidWlsZGVyKGxpbmVzLmtvKSA6IHJlZ2V4RW4sXFxuICAgICAgICB9O1xcbiAgICB9XFxufVxcbmNvbnN0IHJlZ2V4U2V0ID0gbmV3IFJlZ2V4U2V0KCk7XFxuY29uc3QgTG9jYWxlUmVnZXggPSByZWdleFNldC5sb2NhbGVSZWdleDtcXG5jb25zdCBMb2NhbGVOZXRSZWdleCA9IHJlZ2V4U2V0LmxvY2FsZU5ldFJlZ2V4O1xcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3VpL3JhaWRib3NzL2VtdWxhdG9yL0VtdWxhdG9yQ29tbW9uLnRzXFxuXFxuXFxuY2xhc3MgRW11bGF0b3JDb21tb24ge1xcbiAgICBzdGF0aWMgY2xvbmVEYXRhKGRhdGEsIGV4Y2x1ZGUgPSBbJ29wdGlvbnMnLCAncGFydHknXSkge1xcbiAgICAgICAgY29uc3QgcmV0ID0ge307XFxuICAgICAgICAvLyBVc2UgZXh0cmEgbG9naWMgZm9yIHRvcC1sZXZlbCBleHRlbmQgZm9yIHByb3BlcnR5IGV4Y2x1c2lvblxcbiAgICAgICAgLy8gVGhpcyBjdXQgdGhlIGV4ZWN1dGlvbiB0aW1lIG9mIHRoaXMgY29kZSBmcm9tIDQxLDAwMG1zIHRvIDUwbXMgd2hlbiBwYXJzaW5nIGEgMTIgbWludXRlIHB1bGxcXG4gICAgICAgIGZvciAoY29uc3QgaSBpbiBkYXRhKSB7XFxuICAgICAgICAgICAgaWYgKGV4Y2x1ZGUuaW5jbHVkZXMoaSkpXFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtpXSA9PT0gJ29iamVjdCcpXFxuICAgICAgICAgICAgICAgIHJldFtpXSA9IEVtdWxhdG9yQ29tbW9uLl9jbG9uZURhdGEoZGF0YVtpXSk7XFxuICAgICAgICAgICAgZWxzZVxcbiAgICAgICAgICAgICAgICAvLyBBc3NpZ25tZW50IG9mIGFueSB0byBhbnkuIFNlZSBEYXRhVHlwZSBkZWZpbml0aW9uIGFib3ZlIGZvciByZWFzb25pbmcuXFxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcXG4gICAgICAgICAgICAgICAgcmV0W2ldID0gZGF0YVtpXTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiByZXQ7XFxuICAgIH1cXG4gICAgc3RhdGljIF9jbG9uZURhdGEoZGF0YSkge1xcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XFxuICAgICAgICAgICAgICAgIGNvbnN0IHJldCA9IFtdO1xcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpXFxuICAgICAgICAgICAgICAgICAgICByZXRbaV0gPSBFbXVsYXRvckNvbW1vbi5fY2xvbmVEYXRhKGRhdGFbaV0pO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbClcXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XFxuICAgICAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBSZWdFeHApXFxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKGRhdGEpO1xcbiAgICAgICAgICAgIGNvbnN0IHJldCA9IHt9O1xcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBpbiBkYXRhKVxcbiAgICAgICAgICAgICAgICByZXRbaV0gPSBFbXVsYXRvckNvbW1vbi5fY2xvbmVEYXRhKGRhdGFbaV0pO1xcbiAgICAgICAgICAgIHJldHVybiByZXQ7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gZGF0YTtcXG4gICAgfVxcbiAgICBzdGF0aWMgdGltZVRvU3RyaW5nKHRpbWUsIGluY2x1ZGVNaWxsaXMgPSB0cnVlKSB7XFxuICAgICAgICBjb25zdCBuZWdhdGl2ZSA9IHRpbWUgPCAwID8gJy0nIDogJyc7XFxuICAgICAgICB0aW1lID0gTWF0aC5hYnModGltZSk7XFxuICAgICAgICBjb25zdCBtaWxsaXNOdW0gPSB0aW1lICUgMTAwMDtcXG4gICAgICAgIGNvbnN0IHNlY3NOdW0gPSAoKHRpbWUgJSAoNjAgKiAxMDAwKSkgLSBtaWxsaXNOdW0pIC8gMTAwMDtcXG4gICAgICAgIC8vIE1pbGxpc2Vjb25kc1xcbiAgICAgICAgY29uc3QgbWlsbGlzID0gYDAwJHttaWxsaXNOdW19YC5zdWJzdHIoLTMpO1xcbiAgICAgICAgY29uc3Qgc2VjcyA9IGAwJHtzZWNzTnVtfWAuc3Vic3RyKC0yKTtcXG4gICAgICAgIGNvbnN0IG1pbnMgPSBgMCR7KCgoKHRpbWUgJSAoNjAgKiA2MCAqIDEwMDApKSAtIG1pbGxpc051bSkgLyAxMDAwKSAtIHNlY3NOdW0pIC8gNjB9YC5zdWJzdHIoLTIpO1xcbiAgICAgICAgcmV0dXJuIG5lZ2F0aXZlICsgbWlucyArICc6JyArIHNlY3MgKyAoaW5jbHVkZU1pbGxpcyA/ICcuJyArIG1pbGxpcyA6ICcnKTtcXG4gICAgfVxcbiAgICBzdGF0aWMgdGltZVRvRGF0ZVN0cmluZyh0aW1lKSB7XFxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlT2JqZWN0VG9EYXRlU3RyaW5nKG5ldyBEYXRlKHRpbWUpKTtcXG4gICAgfVxcbiAgICBzdGF0aWMgZGF0ZU9iamVjdFRvRGF0ZVN0cmluZyhkYXRlKSB7XFxuICAgICAgICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xcbiAgICAgICAgY29uc3QgbW9udGggPSBFbXVsYXRvckNvbW1vbi56ZXJvUGFkKChkYXRlLmdldE1vbnRoKCkgKyAxKS50b1N0cmluZygpKTtcXG4gICAgICAgIGNvbnN0IGRheSA9IEVtdWxhdG9yQ29tbW9uLnplcm9QYWQoZGF0ZS5nZXREYXRlKCkudG9TdHJpbmcoKSk7XFxuICAgICAgICByZXR1cm4gYCR7eWVhcn0tJHttb250aH0tJHtkYXl9YDtcXG4gICAgfVxcbiAgICBzdGF0aWMgdGltZVRvVGltZVN0cmluZyh0aW1lLCBpbmNsdWRlTWlsbGlzID0gZmFsc2UpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGVPYmplY3RUb1RpbWVTdHJpbmcobmV3IERhdGUodGltZSksIGluY2x1ZGVNaWxsaXMpO1xcbiAgICB9XFxuICAgIHN0YXRpYyBkYXRlT2JqZWN0VG9UaW1lU3RyaW5nKGRhdGUsIGluY2x1ZGVNaWxsaXMgPSBmYWxzZSkge1xcbiAgICAgICAgY29uc3QgaG91ciA9IEVtdWxhdG9yQ29tbW9uLnplcm9QYWQoZGF0ZS5nZXRIb3VycygpLnRvU3RyaW5nKCkpO1xcbiAgICAgICAgY29uc3QgbWludXRlID0gRW11bGF0b3JDb21tb24uemVyb1BhZChkYXRlLmdldE1pbnV0ZXMoKS50b1N0cmluZygpKTtcXG4gICAgICAgIGNvbnN0IHNlY29uZCA9IEVtdWxhdG9yQ29tbW9uLnplcm9QYWQoZGF0ZS5nZXRTZWNvbmRzKCkudG9TdHJpbmcoKSk7XFxuICAgICAgICBsZXQgcmV0ID0gYCR7aG91cn06JHttaW51dGV9OiR7c2Vjb25kfWA7XFxuICAgICAgICBpZiAoaW5jbHVkZU1pbGxpcylcXG4gICAgICAgICAgICByZXQgPSByZXQgKyBgLiR7ZGF0ZS5nZXRNaWxsaXNlY29uZHMoKX1gO1xcbiAgICAgICAgcmV0dXJuIHJldDtcXG4gICAgfVxcbiAgICBzdGF0aWMgbXNUb0R1cmF0aW9uKG1zKSB7XFxuICAgICAgICBjb25zdCB0bXAgPSBFbXVsYXRvckNvbW1vbi50aW1lVG9TdHJpbmcobXMsIGZhbHNlKTtcXG4gICAgICAgIHJldHVybiB0bXAucmVwbGFjZSgnOicsICdtJykgKyAncyc7XFxuICAgIH1cXG4gICAgc3RhdGljIGRhdGVUaW1lVG9TdHJpbmcodGltZSwgaW5jbHVkZU1pbGxpcyA9IGZhbHNlKSB7XFxuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodGltZSk7XFxuICAgICAgICByZXR1cm4gYCR7dGhpcy5kYXRlT2JqZWN0VG9EYXRlU3RyaW5nKGRhdGUpfSAke3RoaXMuZGF0ZU9iamVjdFRvVGltZVN0cmluZyhkYXRlLCBpbmNsdWRlTWlsbGlzKX1gO1xcbiAgICB9XFxuICAgIHN0YXRpYyB6ZXJvUGFkKHN0ciwgbGVuID0gMikge1xcbiAgICAgICAgcmV0dXJuICgnJyArIHN0cikucGFkU3RhcnQobGVuLCAnMCcpO1xcbiAgICB9XFxuICAgIHN0YXRpYyBwcm9wZXJDYXNlKHN0cikge1xcbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW15cXFxcV19dK1teXFxcXHMtXSopICovZywgKHR4dCkgPT4ge1xcbiAgICAgICAgICAgIHJldHVybiB0eHQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eHQuc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCk7XFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICBzdGF0aWMgc3BhY2VQYWRMZWZ0KHN0ciwgbGVuKSB7XFxuICAgICAgICByZXR1cm4gc3RyLnBhZFN0YXJ0KGxlbiwgJyAnKTtcXG4gICAgfVxcbiAgICBzdGF0aWMgZG9lc0xpbmVNYXRjaChsaW5lLCByZWdleGVzKSB7XFxuICAgICAgICBpZiAocmVnZXhlcyBpbnN0YW5jZW9mIFJlZ0V4cClcXG4gICAgICAgICAgICByZXR1cm4gcmVnZXhlcy5leGVjKGxpbmUpO1xcbiAgICAgICAgZm9yIChjb25zdCBsYW5nU3RyIGluIHJlZ2V4ZXMpIHtcXG4gICAgICAgICAgICBjb25zdCBsYW5nID0gbGFuZ1N0cjtcXG4gICAgICAgICAgICBjb25zdCByZXMgPSByZWdleGVzW2xhbmddLmV4ZWMobGluZSk7XFxuICAgICAgICAgICAgaWYgKHJlcykge1xcbiAgICAgICAgICAgICAgICBpZiAocmVzLmdyb3VwcylcXG4gICAgICAgICAgICAgICAgICAgIHJlcy5ncm91cHMubGFuZ3VhZ2UgPSBsYW5nO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBudWxsO1xcbiAgICB9XFxuICAgIHN0YXRpYyBtYXRjaFN0YXJ0KGxpbmUpIHtcXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcXG4gICAgICAgIGxldCByZXM7XFxuICAgICAgICAvLyBDdXJyZW50bHkgYWxsIG9mIHRoZXNlIHJlZ2V4ZXMgaGF2ZSBncm91cHMgaWYgdGhleSBtYXRjaCBhdCBhbGwsXFxuICAgICAgICAvLyBidXQgYmUgcm9idXN0IHRvIHRoYXQgY2hhbmdpbmcgaW4gdGhlIGZ1dHVyZS5cXG4gICAgICAgIHJlcyA9IEVtdWxhdG9yQ29tbW9uLmRvZXNMaW5lTWF0Y2gobGluZSwgRW11bGF0b3JDb21tb24uY291bnRkb3duUmVnZXhlcyk7XFxuICAgICAgICBpZiAocmVzKSB7XFxuICAgICAgICAgICAgKF9hID0gcmVzLmdyb3VwcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKHJlcy5ncm91cHMgPSB7fSk7XFxuICAgICAgICAgICAgcmVzLmdyb3Vwcy5TdGFydEluID0gKHBhcnNlSW50KChfYiA9IHJlcy5ncm91cHMudGltZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJzAnKSAqIDEwMDApLnRvU3RyaW5nKCk7XFxuICAgICAgICAgICAgcmVzLmdyb3Vwcy5TdGFydFR5cGUgPSAnQ291bnRkb3duJztcXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmVzID0gRW11bGF0b3JDb21tb24uZG9lc0xpbmVNYXRjaChsaW5lLCBFbXVsYXRvckNvbW1vbi5zZWFsUmVnZXhlcyk7XFxuICAgICAgICBpZiAocmVzKSB7XFxuICAgICAgICAgICAgKF9jID0gcmVzLmdyb3VwcykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogKHJlcy5ncm91cHMgPSB7fSk7XFxuICAgICAgICAgICAgcmVzLmdyb3Vwcy5TdGFydEluID0gJzAnO1xcbiAgICAgICAgICAgIHJlcy5ncm91cHMuU3RhcnRUeXBlID0gJ1NlYWwnO1xcbiAgICAgICAgICAgIHJldHVybiByZXM7XFxuICAgICAgICB9XFxuICAgICAgICByZXMgPSBFbXVsYXRvckNvbW1vbi5kb2VzTGluZU1hdGNoKGxpbmUsIEVtdWxhdG9yQ29tbW9uLmVuZ2FnZVJlZ2V4ZXMpO1xcbiAgICAgICAgaWYgKHJlcykge1xcbiAgICAgICAgICAgIChfZCA9IHJlcy5ncm91cHMpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IChyZXMuZ3JvdXBzID0ge30pO1xcbiAgICAgICAgICAgIHJlcy5ncm91cHMuU3RhcnRJbiA9ICcwJztcXG4gICAgICAgICAgICByZXMuZ3JvdXBzLlN0YXJ0VHlwZSA9ICdFbmdhZ2UnO1xcbiAgICAgICAgICAgIHJldHVybiByZXM7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgc3RhdGljIG1hdGNoRW5kKGxpbmUpIHtcXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcXG4gICAgICAgIGxldCByZXM7XFxuICAgICAgICAvLyBDdXJyZW50bHkgYWxsIG9mIHRoZXNlIHJlZ2V4ZXMgaGF2ZSBncm91cHMgaWYgdGhleSBtYXRjaCBhdCBhbGwsXFxuICAgICAgICAvLyBidXQgYmUgcm9idXN0IHRvIHRoYXQgY2hhbmdpbmcgaW4gdGhlIGZ1dHVyZS5cXG4gICAgICAgIHJlcyA9IEVtdWxhdG9yQ29tbW9uLmRvZXNMaW5lTWF0Y2gobGluZSwgRW11bGF0b3JDb21tb24ud2luUmVnZXgpO1xcbiAgICAgICAgaWYgKHJlcykge1xcbiAgICAgICAgICAgIChfYSA9IHJlcy5ncm91cHMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChyZXMuZ3JvdXBzID0ge30pO1xcbiAgICAgICAgICAgIHJlcy5ncm91cHMuRW5kVHlwZSA9ICdXaW4nO1xcbiAgICAgICAgICAgIHJldHVybiByZXM7XFxuICAgICAgICB9XFxuICAgICAgICByZXMgPSBFbXVsYXRvckNvbW1vbi5kb2VzTGluZU1hdGNoKGxpbmUsIEVtdWxhdG9yQ29tbW9uLndpcGVSZWdleCk7XFxuICAgICAgICBpZiAocmVzKSB7XFxuICAgICAgICAgICAgKF9iID0gcmVzLmdyb3VwcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKHJlcy5ncm91cHMgPSB7fSk7XFxuICAgICAgICAgICAgcmVzLmdyb3Vwcy5FbmRUeXBlID0gJ1dpcGUnO1xcbiAgICAgICAgICAgIHJldHVybiByZXM7XFxuICAgICAgICB9XFxuICAgICAgICByZXMgPSBFbXVsYXRvckNvbW1vbi5kb2VzTGluZU1hdGNoKGxpbmUsIEVtdWxhdG9yQ29tbW9uLmNhY3Rib3RXaXBlUmVnZXgpO1xcbiAgICAgICAgaWYgKHJlcykge1xcbiAgICAgICAgICAgIChfYyA9IHJlcy5ncm91cHMpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IChyZXMuZ3JvdXBzID0ge30pO1xcbiAgICAgICAgICAgIHJlcy5ncm91cHMuRW5kVHlwZSA9ICdDYWN0Ym90IFdpcGUnO1xcbiAgICAgICAgICAgIHJldHVybiByZXM7XFxuICAgICAgICB9XFxuICAgICAgICByZXMgPSBFbXVsYXRvckNvbW1vbi5kb2VzTGluZU1hdGNoKGxpbmUsIEVtdWxhdG9yQ29tbW9uLnVuc2VhbFJlZ2V4ZXMpO1xcbiAgICAgICAgaWYgKHJlcykge1xcbiAgICAgICAgICAgIChfZCA9IHJlcy5ncm91cHMpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IChyZXMuZ3JvdXBzID0ge30pO1xcbiAgICAgICAgICAgIHJlcy5ncm91cHMuRW5kVHlwZSA9ICdVbnNlYWwnO1xcbiAgICAgICAgICAgIHJldHVybiByZXM7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuRW11bGF0b3JDb21tb24uc2VhbFJlZ2V4ZXMgPSBMb2NhbGVOZXRSZWdleC5hcmVhU2VhbDtcXG5FbXVsYXRvckNvbW1vbi5lbmdhZ2VSZWdleGVzID0gTG9jYWxlTmV0UmVnZXguY291bnRkb3duRW5nYWdlO1xcbkVtdWxhdG9yQ29tbW9uLmNvdW50ZG93blJlZ2V4ZXMgPSBMb2NhbGVOZXRSZWdleC5jb3VudGRvd25TdGFydDtcXG5FbXVsYXRvckNvbW1vbi51bnNlYWxSZWdleGVzID0gTG9jYWxlTmV0UmVnZXguYXJlYVVuc2VhbDtcXG5FbXVsYXRvckNvbW1vbi53aXBlUmVnZXggPSBOZXRSZWdleGVzLm5ldHdvcms2ZCh7IGNvbW1hbmQ6ICc0MDAwMDAxMCcgfSk7XFxuRW11bGF0b3JDb21tb24ud2luUmVnZXggPSBOZXRSZWdleGVzLm5ldHdvcms2ZCh7IGNvbW1hbmQ6ICc0MDAwMDAwMycgfSk7XFxuRW11bGF0b3JDb21tb24uY2FjdGJvdFdpcGVSZWdleCA9IE5ldFJlZ2V4ZXMuZWNobyh7IGxpbmU6ICdjYWN0Ym90IHdpcGUuKj8nIH0pO1xcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3Jlc291cmNlcy9ub3RfcmVhY2hlZC50c1xcbi8vIEhlbHBlciBFcnJvciBmb3IgVHlwZVNjcmlwdCBzaXR1YXRpb25zIHdoZXJlIHRoZSBwcm9ncmFtbWVyIHRoaW5rcyB0aGV5XFxuLy8ga25vdyBiZXR0ZXIgdGhhbiBUeXBlU2NyaXB0IHRoYXQgc29tZSBzaXR1YXRpb24gd2lsbCBuZXZlciBvY2N1ci5cXG4vLyBUaGUgaW50ZW50aW9uIGhlcmUgaXMgdGhhdCB0aGUgcHJvZ3JhbW1lciBkb2VzIG5vdCBleHBlY3QgYSBwYXJ0aWN1bGFyXFxuLy8gYml0IG9mIGNvZGUgdG8gaGFwcGVuLCBhbmQgc28gaGFzIG5vdCB3cml0dGVuIGNhcmVmdWwgZXJyb3IgaGFuZGxpbmcuXFxuLy8gSWYgaXQgZG9lcyBvY2N1ciwgYXQgbGVhc3QgdGhlcmUgd2lsbCBiZSBhbiBlcnJvciBhbmQgd2UgY2FuIGZpZ3VyZSBvdXQgd2h5Llxcbi8vIFRoaXMgaXMgcHJlZmVyYWJsZSB0byBjYXN0aW5nIG9yIGRpc2FibGluZyBUeXBlU2NyaXB0IGFsdG9nZXRoZXIgaW4gb3JkZXIgdG9cXG4vLyBhdm9pZCBzeW50YXggZXJyb3JzLlxcbi8vIE9uZSBjb21tb24gZXhhbXBsZSBpcyBhIHJlZ2V4LCB3aGVyZSBpZiB0aGUgcmVnZXggbWF0Y2hlcyB0aGVuIGFsbCBvZiB0aGVcXG4vLyAobm9uLW9wdGlvbmFsKSByZWdleCBncm91cHMgd2lsbCBhbHNvIGJlIHZhbGlkLCBidXQgVHlwZVNjcmlwdCBkb2Vzbid0IGtub3cuXFxuY2xhc3MgVW5yZWFjaGFibGVDb2RlIGV4dGVuZHMgRXJyb3Ige1xcbiAgICBjb25zdHJ1Y3RvcigpIHtcXG4gICAgICAgIHN1cGVyKCdUaGlzIGNvZGUgc2hvdWxkblxcXFwndCBiZSByZWFjaGVkJyk7XFxuICAgIH1cXG59XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9Db21iYXRhbnQudHNcXG5cXG5jbGFzcyBDb21iYXRhbnQge1xcbiAgICBjb25zdHJ1Y3RvcihpZCwgbmFtZSkge1xcbiAgICAgICAgdGhpcy5uYW1lID0gJyc7XFxuICAgICAgICB0aGlzLnNlcnZlciA9ICcnO1xcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSB7fTtcXG4gICAgICAgIHRoaXMuc2lnbmlmaWNhbnRTdGF0ZXMgPSBbXTtcXG4gICAgICAgIHRoaXMubGF0ZXN0VGltZXN0YW1wID0gLTE7XFxuICAgICAgICB0aGlzLmlkID0gaWQ7XFxuICAgICAgICB0aGlzLnNldE5hbWUobmFtZSk7XFxuICAgIH1cXG4gICAgc2V0TmFtZShuYW1lKSB7XFxuICAgICAgICB2YXIgX2EsIF9iLCBfYztcXG4gICAgICAgIC8vIFNvbWV0aW1lcyBuZXR3b3JrIGxpbmVzIGFycml2ZSBhZnRlciB0aGUgY29tYmF0YW50IGhhcyBiZWVuIGNsZWFyZWRcXG4gICAgICAgIC8vIGZyb20gbWVtb3J5IGluIHRoZSBjbGllbnQsIHNvIHRoZSBuZXR3b3JrIGxpbmUgd2lsbCBoYXZlIGEgdmFsaWQgSURcXG4gICAgICAgIC8vIGJ1dCB0aGUgbmFtZSB3aWxsIGJlIGJsYW5rLiBTaW5jZSB3ZSdyZSB0cmFja2luZyB0aGUgbmFtZSBmb3IgdGhlXFxuICAgICAgICAvLyBlbnRpcmUgZmlnaHQgYW5kIG5vdCBvbiBhIHN0YXRlLWJ5LXN0YXRlIGJhc2lzLCB3ZSBkb24ndCB3YW50IHRvXFxuICAgICAgICAvLyBibGFuayBvdXQgYSBuYW1lIGluIHRoaXMgY2FzZS5cXG4gICAgICAgIC8vIElmIGEgY29tYmF0YW50IGFjdHVhbGx5IGhhcyBhIGJsYW5rIG5hbWUsIHRoYXQncyBzdGlsbCBhbGxvd2VkIGJ5XFxuICAgICAgICAvLyB0aGUgY29uc3RydWN0b3IuXFxuICAgICAgICBpZiAobmFtZSA9PT0gJycpXFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgY29uc3QgcGFydHMgPSBuYW1lLnNwbGl0KCcoJyk7XFxuICAgICAgICB0aGlzLm5hbWUgPSAoX2EgPSBwYXJ0c1swXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XFxuICAgICAgICBpZiAocGFydHMubGVuZ3RoID4gMSlcXG4gICAgICAgICAgICB0aGlzLnNlcnZlciA9IChfYyA9IChfYiA9IHBhcnRzWzFdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVwbGFjZSgvXFxcXCkkLywgJycpKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAnJztcXG4gICAgfVxcbiAgICBoYXNTdGF0ZSh0aW1lc3RhbXApIHtcXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlc1t0aW1lc3RhbXBdICE9PSB1bmRlZmluZWQ7XFxuICAgIH1cXG4gICAgcHVzaFN0YXRlKHRpbWVzdGFtcCwgc3RhdGUpIHtcXG4gICAgICAgIHRoaXMuc3RhdGVzW3RpbWVzdGFtcF0gPSBzdGF0ZTtcXG4gICAgICAgIHRoaXMubGF0ZXN0VGltZXN0YW1wID0gdGltZXN0YW1wO1xcbiAgICAgICAgaWYgKCF0aGlzLnNpZ25pZmljYW50U3RhdGVzLmluY2x1ZGVzKHRpbWVzdGFtcCkpXFxuICAgICAgICAgICAgdGhpcy5zaWduaWZpY2FudFN0YXRlcy5wdXNoKHRpbWVzdGFtcCk7XFxuICAgIH1cXG4gICAgbmV4dFNpZ25pZmljYW50U3RhdGUodGltZXN0YW1wKSB7XFxuICAgICAgICB2YXIgX2E7XFxuICAgICAgICAvLyBTaG9ydGN1dCBvdXQgaWYgdGhpcyBpcyBzaWduaWZpY2FudCBvciBpZiB0aGVyZSdzIG5vIGhpZ2hlciBzaWduaWZpY2FudCBzdGF0ZVxcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnNpZ25pZmljYW50U3RhdGVzLmluZGV4T2YodGltZXN0YW1wKTtcXG4gICAgICAgIGNvbnN0IGxhc3RTaWduaWZpY2FudFN0YXRlSW5kZXggPSB0aGlzLnNpZ25pZmljYW50U3RhdGVzLmxlbmd0aCAtIDE7XFxuICAgICAgICAvLyBJZiB0aW1lc3RhbXAgaXMgYSBzaWduaWZpY2FudCBzdGF0ZSBhbHJlYWR5LCBhbmQgaXQncyBub3QgdGhlIGxhc3Qgb25lLCByZXR1cm4gdGhlIG5leHRcXG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgbGFzdFNpZ25pZmljYW50U3RhdGVJbmRleClcXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZUJ5SW5kZXgoaW5kZXggKyAxKTtcXG4gICAgICAgIC8vIElmIHRpbWVzdGFtcCBpcyB0aGUgbGFzdCBzaWduaWZpY2FudCBzdGF0ZSBvciB0aGUgdGltZXN0YW1wIGlzIHBhc3QgdGhlIGxhc3Qgc2lnbmlmaWNhbnRcXG4gICAgICAgIC8vIHN0YXRlLCByZXR1cm4gdGhlIGxhc3Qgc2lnbmlmaWNhbnQgc3RhdGVcXG4gICAgICAgIGVsc2UgaWYgKGluZGV4ID09PSBsYXN0U2lnbmlmaWNhbnRTdGF0ZUluZGV4IHx8XFxuICAgICAgICAgICAgdGltZXN0YW1wID4gKChfYSA9IHRoaXMuc2lnbmlmaWNhbnRTdGF0ZXNbbGFzdFNpZ25pZmljYW50U3RhdGVJbmRleF0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDApKVxcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0YXRlQnlJbmRleChsYXN0U2lnbmlmaWNhbnRTdGF0ZUluZGV4KTtcXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaWduaWZpY2FudFN0YXRlcy5sZW5ndGg7ICsraSkge1xcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlSW5kZXggPSB0aGlzLnNpZ25pZmljYW50U3RhdGVzW2ldO1xcbiAgICAgICAgICAgIGlmIChzdGF0ZUluZGV4ICYmIHN0YXRlSW5kZXggPiB0aW1lc3RhbXApXFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0YXRlQnlJbmRleChpKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0YXRlQnlJbmRleCh0aGlzLnNpZ25pZmljYW50U3RhdGVzLmxlbmd0aCAtIDEpO1xcbiAgICB9XFxuICAgIHB1c2hQYXJ0aWFsU3RhdGUodGltZXN0YW1wLCBwcm9wcykge1xcbiAgICAgICAgdmFyIF9hO1xcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVzW3RpbWVzdGFtcF0gPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgICAgIC8vIENsb25lIHRoZSBsYXN0IHN0YXRlIGJlZm9yZSB0aGlzIHRpbWVzdGFtcFxcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlVGltZXN0YW1wID0gKF9hID0gdGhpcy5zaWduaWZpY2FudFN0YXRlc1xcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChzKSA9PiBzIDwgdGltZXN0YW1wKVxcbiAgICAgICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gYiAtIGEpWzBdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLnNpZ25pZmljYW50U3RhdGVzWzBdO1xcbiAgICAgICAgICAgIGlmIChzdGF0ZVRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkKVxcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XFxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlc1tzdGF0ZVRpbWVzdGFtcF07XFxuICAgICAgICAgICAgaWYgKCFzdGF0ZSlcXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xcbiAgICAgICAgICAgIHRoaXMuc3RhdGVzW3RpbWVzdGFtcF0gPSBzdGF0ZS5wYXJ0aWFsQ2xvbmUocHJvcHMpO1xcbiAgICAgICAgfVxcbiAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlc1t0aW1lc3RhbXBdO1xcbiAgICAgICAgICAgIGlmICghc3RhdGUpXFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcXG4gICAgICAgICAgICB0aGlzLnN0YXRlc1t0aW1lc3RhbXBdID0gc3RhdGUucGFydGlhbENsb25lKHByb3BzKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHRoaXMubGF0ZXN0VGltZXN0YW1wID0gTWF0aC5tYXgodGhpcy5sYXRlc3RUaW1lc3RhbXAsIHRpbWVzdGFtcCk7XFxuICAgICAgICBjb25zdCBsYXN0U2lnbmlmaWNhbnRTdGF0ZVRpbWVzdGFtcCA9IHRoaXMuc2lnbmlmaWNhbnRTdGF0ZXNbdGhpcy5zaWduaWZpY2FudFN0YXRlcy5sZW5ndGggLSAxXTtcXG4gICAgICAgIGlmICghbGFzdFNpZ25pZmljYW50U3RhdGVUaW1lc3RhbXApXFxuICAgICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xcbiAgICAgICAgY29uc3Qgb2xkU3RhdGVKU09OID0gSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZXNbbGFzdFNpZ25pZmljYW50U3RhdGVUaW1lc3RhbXBdKTtcXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlSlNPTiA9IEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGVzW3RpbWVzdGFtcF0pO1xcbiAgICAgICAgaWYgKGxhc3RTaWduaWZpY2FudFN0YXRlVGltZXN0YW1wICE9PSB0aW1lc3RhbXAgJiYgbmV3U3RhdGVKU09OICE9PSBvbGRTdGF0ZUpTT04pXFxuICAgICAgICAgICAgdGhpcy5zaWduaWZpY2FudFN0YXRlcy5wdXNoKHRpbWVzdGFtcCk7XFxuICAgIH1cXG4gICAgZ2V0U3RhdGUodGltZXN0YW1wKSB7XFxuICAgICAgICBjb25zdCBzdGF0ZUJ5VGltZXN0YW1wID0gdGhpcy5zdGF0ZXNbdGltZXN0YW1wXTtcXG4gICAgICAgIGlmIChzdGF0ZUJ5VGltZXN0YW1wKVxcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZUJ5VGltZXN0YW1wO1xcbiAgICAgICAgY29uc3QgaW5pdGlhbFRpbWVzdGFtcCA9IHRoaXMuc2lnbmlmaWNhbnRTdGF0ZXNbMF07XFxuICAgICAgICBpZiAoaW5pdGlhbFRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkKVxcbiAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcXG4gICAgICAgIGlmICh0aW1lc3RhbXAgPCBpbml0aWFsVGltZXN0YW1wKVxcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0YXRlQnlJbmRleCgwKTtcXG4gICAgICAgIGxldCBpID0gMDtcXG4gICAgICAgIGZvciAoOyBpIDwgdGhpcy5zaWduaWZpY2FudFN0YXRlcy5sZW5ndGg7ICsraSkge1xcbiAgICAgICAgICAgIGNvbnN0IHByZXZUaW1lc3RhbXAgPSB0aGlzLnNpZ25pZmljYW50U3RhdGVzW2ldO1xcbiAgICAgICAgICAgIGlmIChwcmV2VGltZXN0YW1wID09PSB1bmRlZmluZWQpXFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcXG4gICAgICAgICAgICBpZiAocHJldlRpbWVzdGFtcCA+IHRpbWVzdGFtcClcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGVCeUluZGV4KGkgLSAxKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0YXRlQnlJbmRleChpIC0gMSk7XFxuICAgIH1cXG4gICAgLy8gU2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW4gYGluZGV4YCBpcyB2YWxpZC5cXG4gICAgZ2V0U3RhdGVCeUluZGV4KGluZGV4KSB7XFxuICAgICAgICBjb25zdCBzdGF0ZUluZGV4ID0gdGhpcy5zaWduaWZpY2FudFN0YXRlc1tpbmRleF07XFxuICAgICAgICBpZiAoc3RhdGVJbmRleCA9PT0gdW5kZWZpbmVkKVxcbiAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZXNbc3RhdGVJbmRleF07XFxuICAgICAgICBpZiAoc3RhdGUgPT09IHVuZGVmaW5lZClcXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XFxuICAgICAgICByZXR1cm4gc3RhdGU7XFxuICAgIH1cXG59XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9Db21iYXRhbnRKb2JTZWFyY2gudHNcXG5jbGFzcyBDb21iYXRhbnRKb2JTZWFyY2gge1xcbiAgICBzdGF0aWMgZ2V0Sm9iKGFiaWxpdHlJZCkge1xcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ29tYmF0YW50Sm9iU2VhcmNoLmFiaWxpdGllcykpIHtcXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLmluY2x1ZGVzKGFiaWxpdHlJZCkpXFxuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuQ29tYmF0YW50Sm9iU2VhcmNoLmFiaWxpdHlNYXRjaFJlZ2V4ID0gL1thLWZBLUYwLTldezEsNH0vaTtcXG5Db21iYXRhbnRKb2JTZWFyY2guYWJpbGl0aWVzID0ge1xcbiAgICBQTEQ6IFtcXG4gICAgICAgIDEyOTU5LCAxMjk2MSwgMTI5NjQsIDEyOTY3LCAxMjk2OCwgMTI5NjksIDEyOTcwLCAxMjk3MSwgMTI5NzIsIDEyOTczLCAxMjk3NCwgMTI5NzUsXFxuICAgICAgICAxMjk3NiwgMTI5NzgsIDEyOTgwLCAxMjk4MSwgMTI5ODIsIDEyOTgzLCAxMjk4NCwgMTI5ODUsIDEyOTg2LCAxMjk4NywgMTI5ODgsIDEyOTg5LFxcbiAgICAgICAgMTI5OTEsIDEyOTkyLCAxMjk5MywgMTI5OTQsIDEyOTk2LCAxMzAwMCwgMTMwMDEsIDEzMDA2LCAxNDQ4MCwgMTY0NTcsIDE2NDU4LCAxNjQ1OSxcXG4gICAgICAgIDE2NDYwLCAxNjQ2MSwgMTc2NjksIDE3NjcxLCAxNzY3MiwgMTc2OTEsIDE3NjkyLCAxNzY5MywgMTc2OTQsIDE3ODY2LCAxODA1MCwgMjcsIDI5LFxcbiAgICAgICAgMzAsIDM1MzgsIDM1MzksIDM1NDAsIDM1NDEsIDM1NDIsIDQyODQsIDQyODUsIDQyODYsIDUwMjA3LCA1MDIwOSwgNTAyNDYsIDUwMjYwLCA1MDI2MSxcXG4gICAgICAgIDUwMjYyLCA1MDI2MywgNTAyNjQsIDczODIsIDczODMsIDczODQsIDczODUsIDg3NDYsIDg3NDksIDg3NTAsIDg3NTEsIDg3NTIsIDg3NTQsIDg3NTUsXFxuICAgICAgICA4NzU2LFxcbiAgICBdLFxcbiAgICBXQVI6IFtcXG4gICAgICAgIDE2NDYyLCAxNjQ2MywgMTY0NjQsIDE2NDY1LCAxNzY5NSwgMTc2OTYsIDE3Njk3LCAxNzY5OCwgMTc4ODksIDM1NDksIDM1NTAsIDM1NTEsIDM1NTIsXFxuICAgICAgICA0Mjg5LCA0MjkwLCA0MjkxLCA0OSwgNTAxNTcsIDUwMjE4LCA1MDI0OSwgNTAyNjUsIDUwMjY2LCA1MDI2NywgNTAyNjgsIDUwMjY5LCA1MSwgNTIsXFxuICAgICAgICA3Mzg2LCA3Mzg3LCA3Mzg4LCA3Mzg5LCA4NzU4LCA4NzYxLCA4NzYyLCA4NzYzLCA4NzY0LCA4NzY1LCA4NzY3LCA4NzY4LFxcbiAgICBdLFxcbiAgICBEUks6IFtcXG4gICAgICAgIDE2NDY2LCAxNjQ2NywgMTY0NjgsIDE2NDY5LCAxNjQ3MCwgMTY0NzEsIDE2NDcyLCAxNzcwMCwgMTc3MDEsIDE3NzAyLCAzNjE3LCAzNjIxLCAzNjIzLFxcbiAgICAgICAgMzYyNCwgMzYyNSwgMzYyOSwgMzYzMiwgMzYzNCwgMzYzNiwgMzYzOCwgMzYzOSwgMzY0MCwgMzY0MSwgMzY0MywgNDMwMywgNDMwNCwgNDMwNSwgNDMwNixcXG4gICAgICAgIDQzMDcsIDQzMDgsIDQzMDksIDQzMTAsIDQzMTEsIDQzMTIsIDQ2ODAsIDUwMTU4LCA1MDE1OSwgNTAyNzEsIDUwMjcyLCA1MDMxOSwgNzM5MCwgNzM5MSxcXG4gICAgICAgIDczOTIsIDczOTMsIDg3NjksIDg3NzIsIDg3NzMsIDg3NzUsIDg3NzYsIDg3NzcsIDg3NzgsIDg3NzksXFxuICAgIF0sXFxuICAgIEdOQjogW1xcbiAgICAgICAgMTc3MDMsIDE3NzA0LCAxNzcwNSwgMTc3MDYsIDE3NzA3LCAxNzcwOCwgMTc3MDksIDE3NzEwLCAxNzcxMSwgMTc3MTIsIDE3NzEzLCAxNzcxNCxcXG4gICAgICAgIDE3NzE2LCAxNzcxNywgMTc4OTAsIDE3ODkxLCAxNjEzNywgNTAzMjAsIDE2MTM4LCAxNjEzOSwgMTYxNDAsIDE2MTQxLCAxNjE0MiwgMTYxNDMsXFxuICAgICAgICAxNjE0NCwgMTYxNDUsIDE2MTYyLCA1MDI1NywgMTYxNDgsIDE2MTQ5LCAxNjE1MSwgMTYxNTIsIDUwMjU4LCAxNjE1MywgMTYxNTQsIDE2MTQ2LFxcbiAgICAgICAgMTYxNDcsIDE2MTUwLCAxNjE1OSwgMTYxNjAsIDE2MTYxLCAxNjE1NSwgMTYxNTYsIDE2MTU3LCAxNjE1OCwgMTYxNjMsIDE2MTY0LCAxNjE2NSxcXG4gICAgICAgIDUwMjU5LFxcbiAgICBdLFxcbiAgICBXSE06IFtcXG4gICAgICAgIDEyOTU4LCAxMjk2MiwgMTI5NjUsIDEyOTk3LCAxMzAwMiwgMTMwMDMsIDEzMDA0LCAxMzAwNSwgMTMxLCAxMzYsIDEzNywgMTM5LCAxNDAsIDE0NDgxLFxcbiAgICAgICAgMTU4NCwgMTY1MzEsIDE2NTMyLCAxNjUzMywgMTY1MzQsIDE2NTM1LCAxNjUzNiwgMTc2ODgsIDE3Njg5LCAxNzY5MCwgMTc3ODksIDE3NzkwLCAxNzc5MSxcXG4gICAgICAgIDE3NzkzLCAxNzc5NCwgMTc4MzIsIDM1NjgsIDM1NjksIDM1NzAsIDM1NzEsIDQyOTYsIDQyOTcsIDUwMTgxLCA1MDE4MiwgNTAxOTYsIDUwMzA3LFxcbiAgICAgICAgNTAzMDgsIDUwMzA5LCA1MDMxMCwgNzQzMCwgNzQzMSwgNzQzMiwgNzQzMywgODg5NSwgODg5NiwgODkwMCwgOTYyMSwgMTI3LCAxMzMsXFxuICAgIF0sXFxuICAgIFNDSDogW1xcbiAgICAgICAgMTY1MzcsIDE2NTM4LCAxNjUzOSwgMTY1NDAsIDE2NTQxLCAxNjU0MiwgMTY1NDMsIDE2NTQ0LCAxNjU0NSwgMTY1NDYsIDE2NTQ3LCAxNjU0OCwgMTY1NTAsXFxuICAgICAgICAxNjU1MSwgMTY2LCAxNjcsIDE3MjE1LCAxNzIxNiwgMTc3OTUsIDE3Nzk2LCAxNzc5NywgMTc3OTgsIDE3ODAyLCAxNzg2NCwgMTc4NjUsIDE3ODY5LFxcbiAgICAgICAgMTc4NzAsIDE3OTkwLCAxODUsIDE4NiwgMTg4LCAxODksIDE5MCwgMzU4MywgMzU4NCwgMzU4NSwgMzU4NiwgMzU4NywgNDMwMCwgNTAxODQsIDUwMjE0LFxcbiAgICAgICAgNTAzMTEsIDUwMzEyLCA1MDMxMywgNTAzMjQsIDc0MzQsIDc0MzUsIDc0MzYsIDc0MzcsIDc0MzgsIDc4NjksIDgwMiwgODAzLCA4MDUsIDg5MDQsIDg5MDUsXFxuICAgICAgICA4OTA5LCA5NjIyLFxcbiAgICBdLFxcbiAgICBBU1Q6IFtcXG4gICAgICAgIDEwMDI3LCAxMDAyOCwgMTAwMjksIDE2NTUyLCAxNjU1MywgMTY1NTQsIDE2NTU1LCAxNjU1NiwgMTY1NTcsIDE2NTU4LCAxNjU1OSwgMTcwNTUsIDE3MTUxLFxcbiAgICAgICAgMTcxNTIsIDE3ODA0LCAxNzgwNSwgMTc4MDYsIDE3ODA3LCAxNzgwOSwgMTc5OTEsIDM1OTAsIDM1OTMsIDM1OTQsIDM1OTUsIDM1OTYsIDM1OTgsIDM1OTksXFxuICAgICAgICAzNjAwLCAzNjAxLCAzNjAzLCAzNjA0LCAzNjA1LCAzNjA2LCAzNjA4LCAzNjEwLCAzNjEyLCAzNjEzLCAzNjE0LCAzNjE1LCA0MzAxLCA0MzAyLCA0NDAxLFxcbiAgICAgICAgNDQwMiwgNDQwMywgNDQwNCwgNDQwNSwgNDQwNiwgNDY3NywgNDY3OCwgNDY3OSwgNTAxMjIsIDUwMTI0LCA1MDEyNSwgNTAxODYsIDUwMTg3LCA1MDE4OCxcXG4gICAgICAgIDUwMTg5LCA1MDMxNCwgNTAzMTUsIDUwMzE2LCA3NDM5LCA3NDQwLCA3NDQxLCA3NDQyLCA3NDQzLCA3NDQ0LCA3NDQ1LCA3NDQ4LCA4MzI0LCA4OTEzLFxcbiAgICAgICAgODkxNCwgODkxNiwgOTYyOSxcXG4gICAgXSxcXG4gICAgTU5LOiBbXFxuICAgICAgICAxMjk2MCwgMTI5NjMsIDEyOTY2LCAxMjk3NywgMTI5NzksIDEyOTkwLCAxMjk5NSwgMTI5OTgsIDEyOTk5LCAxNDQ3NiwgMTQ0NzgsIDE2NDczLCAxNjQ3NCxcXG4gICAgICAgIDE2NDc1LCAxNjQ3NiwgMTc2NzQsIDE3Njc1LCAxNzY3NiwgMTc2NzcsIDE3NzE5LCAxNzcyMCwgMTc3MjEsIDE3NzIyLCAxNzcyMywgMTc3MjQsIDE3NzI1LFxcbiAgICAgICAgMTc3MjYsIDM1NDMsIDM1NDUsIDM1NDYsIDM1NDcsIDQyNjIsIDQyODcsIDQyODgsIDUwMTYwLCA1MDE2MSwgNTAyNDUsIDUwMjczLCA1MDI3NCwgNjMsIDcwLFxcbiAgICAgICAgNzEsIDczOTQsIDczOTUsIDczOTYsIDc0LCA4NzgwLCA4NzgxLCA4NzgyLCA4NzgzLCA4Nzg0LCA4Nzg1LCA4Nzg3LCA4Nzg5LCA4OTI1LFxcbiAgICBdLFxcbiAgICBEUkc6IFtcXG4gICAgICAgIDE2NDc3LCAxNjQ3OCwgMTY0NzksIDE2NDgwLCAxNzcyOCwgMTc3MjksIDM1NTMsIDM1NTQsIDM1NTUsIDM1NTYsIDM1NTcsIDQyOTIsIDQyOTMsIDUwMTYyLFxcbiAgICAgICAgNTAxNjMsIDUwMjQ3LCA1MDI3NSwgNTAyNzYsIDczOTcsIDczOTgsIDczOTksIDc0MDAsIDg2LCA4NzkxLCA4NzkyLCA4NzkzLCA4Nzk0LCA4Nzk1LFxcbiAgICAgICAgODc5NiwgODc5NywgODc5OCwgODc5OSwgODgwMiwgODgwMywgODgwNCwgODgwNSwgODgwNiwgOTIsIDk0LCA5NSwgOTYsIDk2NDAsIDc1LCA3OCxcXG4gICAgXSxcXG4gICAgTklOOiBbXFxuICAgICAgICAxNjQ4OCwgMTY0ODksIDE2NDkxLCAxNjQ5MiwgMTY0OTMsIDE3NDEzLCAxNzQxNCwgMTc0MTUsIDE3NDE2LCAxNzQxNywgMTc0MTgsIDE3NDE5LCAxNzQyMCxcXG4gICAgICAgIDE3NzMyLCAxNzczMywgMTc3MzQsIDE3NzM1LCAxNzczNiwgMTc3MzcsIDE3NzM4LCAxNzczOSwgMjI0NiwgMjI1OSwgMjI2MCwgMjI2MSwgMjI2MixcXG4gICAgICAgIDIyNjMsIDIyNjQsIDIyNjUsIDIyNjYsIDIyNjcsIDIyNjgsIDIyNjksIDIyNzAsIDIyNzEsIDIyNzIsIDM1NjMsIDM1NjYsIDQyOTUsIDUwMTY1LFxcbiAgICAgICAgNTAxNjYsIDUwMTY3LCA1MDI1MCwgNTAyNzksIDUwMjgwLCA3NDAxLCA3NDAyLCA3NDAzLCA4ODA3LCA4ODA4LCA4ODA5LCA4ODEwLCA4ODEyLCA4ODE0LFxcbiAgICAgICAgODgxNSwgODgxNiwgODgyMCwgOTQ2MSxcXG4gICAgXSxcXG4gICAgU0FNOiBbXFxuICAgICAgICAxNjQ4MSwgMTY0ODIsIDE2NDgzLCAxNjQ4NCwgMTY0ODUsIDE2NDg2LCAxNjQ4NywgMTc3NDAsIDE3NzQxLCAxNzc0MiwgMTc3NDMsIDE3NzQ0LCA1MDIwOCxcXG4gICAgICAgIDUwMjE1LCA1MDI3NywgNTAyNzgsIDc0NzcsIDc0NzgsIDc0NzksIDc0ODAsIDc0ODEsIDc0ODIsIDc0ODMsIDc0ODQsIDc0ODUsIDc0ODYsIDc0ODcsXFxuICAgICAgICA3NDg4LCA3NDg5LCA3NDkwLCA3NDkxLCA3NDkyLCA3NDkzLCA3NDk0LCA3NDk1LCA3NDk2LCA3NDk3LCA3NDk4LCA3NDk5LCA3NTAxLCA3NTAyLCA3ODU1LFxcbiAgICAgICAgNzg1NywgNzg2NywgODgyMSwgODgyMiwgODgyMywgODgyNCwgODgyNSwgODgyNiwgODgyOCwgODgyOSwgODgzMCwgODgzMSwgODgzMyxcXG4gICAgXSxcXG4gICAgQlJEOiBbXFxuICAgICAgICAxMDAyMywgMTE0LCAxMTYsIDExNywgMTE4LCAxMzAwNywgMTQ0NzksIDE2NDk0LCAxNjQ5NSwgMTY0OTYsIDE3Njc4LCAxNzY3OSwgMTc2ODAsIDE3NjgxLFxcbiAgICAgICAgMTc2ODIsIDE3NzQ1LCAxNzc0NywgMzU1OCwgMzU1OSwgMzU2MCwgMzU2MSwgMzU2MiwgNDI5NCwgNTAxNjgsIDUwMTY5LCA1MDI4MiwgNTAyODMsIDUwMjg0LFxcbiAgICAgICAgNTAyODUsIDUwMjg2LCA1MDI4NywgNzQwNCwgNzQwNSwgNzQwNiwgNzQwNywgNzQwOCwgNzQwOSwgODgzNiwgODgzNywgODgzOCwgODgzOSwgODg0MSxcXG4gICAgICAgIDg4NDIsIDg4NDMsIDg4NDQsIDk2MjUsIDEwNixcXG4gICAgXSxcXG4gICAgTUNIOiBbXFxuICAgICAgICAxNjQ5NywgMTY0OTgsIDE2NDk5LCAxNjUwMCwgMTY1MDEsIDE2NTAyLCAxNjUwMywgMTY1MDQsIDE2NzY2LCAxNjg4OSwgMTcyMDYsIDE3MjA5LCAxNzc0OSxcXG4gICAgICAgIDE3NzUwLCAxNzc1MSwgMTc3NTIsIDE3NzUzLCAxNzc1NCwgMjg2NCwgMjg2NiwgMjg2OCwgMjg3MCwgMjg3MiwgMjg3MywgMjg3NCwgMjg3NiwgMjg3OCxcXG4gICAgICAgIDI4OTAsIDQyNzYsIDQ2NzUsIDQ2NzYsIDUwMTE3LCA1MDExOSwgNTAyODgsIDUwMjg5LCA1MDI5MCwgNTAyOTEsIDUwMjkyLCA1MDI5MywgNTAyOTQsXFxuICAgICAgICA3NDEwLCA3NDExLCA3NDEyLCA3NDEzLCA3NDE0LCA3NDE1LCA3NDE2LCA3NDE4LCA4ODQ4LCA4ODQ5LCA4ODUwLCA4ODUxLCA4ODUzLCA4ODU1LFxcbiAgICBdLFxcbiAgICBETkM6IFtcXG4gICAgICAgIDE3NzU2LCAxNzc1NywgMTc3NTgsIDE3NzU5LCAxNzc2MCwgMTc3NjEsIDE3NzYyLCAxNzc2MywgMTc3NjQsIDE3NzY1LCAxNzc2NiwgMTc3NjcsXFxuICAgICAgICAxNzc2OCwgMTc3NjksIDE3NzcwLCAxNzc3MSwgMTc3NzIsIDE3NzczLCAxNzgyNCwgMTc4MjUsIDE3ODI2LCAxNzgyNywgMTc4MjgsIDE3ODI5LFxcbiAgICAgICAgMTgwNzYsIDE1OTg5LCAxNTk5MCwgMTU5OTMsIDE1OTk3LCAxNTk5OSwgMTYwMDAsIDE2MDAxLCAxNjAwMiwgMTYwMDMsIDE2MTkxLCAxNjE5MixcXG4gICAgICAgIDE1OTkxLCAxNTk5NCwgMTYwMDcsIDUwMjUyLCAxNTk5NSwgMTU5OTIsIDE1OTk2LCAxNjAwOCwgMTYwMTAsIDUwMjUxLCAxNjAxNSwgMTYwMTIsXFxuICAgICAgICAxNjAwNiwgMTgwNzMsIDUwMjUzLCAxNjAxMSwgMTYwMDksIDUwMjU0LCAxNTk5OCwgMTYwMDQsIDE2MTkzLCAxNjE5NCwgMTYxOTUsIDE2MTk2LFxcbiAgICAgICAgMTYwMTMsIDE2MDA1LCA1MDI1NSwgNTAyNTYsIDE2MDE0LFxcbiAgICBdLFxcbiAgICBCTE06IFtcXG4gICAgICAgIDE0NDc3LCAxNTMsIDE1NCwgMTU4LCAxNTksIDE2MiwgMTY1MDUsIDE2NTA2LCAxNjUwNywgMTc2ODMsIDE3Njg0LCAxNzY4NSwgMTc2ODYsIDE3Njg3LFxcbiAgICAgICAgMTc3NzQsIDE3Nzc1LCAzNTczLCAzNTc0LCAzNTc1LCAzNTc2LCAzNTc3LCA0Mjk4LCA1MDE3MSwgNTAxNzIsIDUwMTczLCA1MDE3NCwgNTAyOTUsXFxuICAgICAgICA1MDI5NiwgNTAyOTcsIDUwMzIxLCA1MDMyMiwgNzQxOSwgNzQyMCwgNzQyMSwgNzQyMiwgODg1OCwgODg1OSwgODg2MCwgODg2MSwgODg2MiwgODg2MyxcXG4gICAgICAgIDg4NjQsIDg4NjUsIDg4NjYsIDg4NjcsIDg4NjksIDk2MzcsIDE0OSwgMTU1LCAxNDEsIDE1MixcXG4gICAgXSxcXG4gICAgU01OOiBbXFxuICAgICAgICAxNjUxMCwgMTY1MTEsIDE2NTEzLCAxNjUxNCwgMTY1MTUsIDE2NTE2LCAxNjUxNywgMTY1MTgsIDE2NTE5LCAxNjUyMiwgMTY1MjMsIDE2NTQ5LFxcbiAgICAgICAgMTY3OTUsIDE2Nzk2LCAxNjc5NywgMTY3OTgsIDE2Nzk5LCAxNjgwMCwgMTY4MDEsIDE2ODAyLCAxNjgwMywgMTc3NzcsIDE3Nzc4LCAxNzc3OSxcXG4gICAgICAgIDE3NzgwLCAxNzc4MSwgMTc3ODIsIDE3NzgzLCAxNzc4NCwgMTc3ODUsIDE4MCwgMTg0LCAzNTc4LCAzNTc5LCAzNTgwLCAzNTgxLCAzNTgyLCA0Mjk5LFxcbiAgICAgICAgNTAxNzYsIDUwMTc3LCA1MDE3OCwgNTAyMTMsIDUwMjE3LCA1MDI5OCwgNTAyOTksIDUwMzAwLCA1MDMwMSwgNTAzMDIsIDc0MjMsIDc0MjQsIDc0MjUsXFxuICAgICAgICA3NDI2LCA3NDI3LCA3NDI4LCA3NDI5LCA3NDQ5LCA3NDUwLCA3ODcsIDc4OCwgNzkxLCA3OTIsIDc5NCwgNzk2LCA3OTcsIDc5OCwgODAwLCA4MDEsXFxuICAgICAgICA4ODcyLCA4ODczLCA4ODc0LCA4ODc3LCA4ODc4LCA4ODc5LCA4ODgwLCA4ODgxLCA5MDE0LCA5NDMyLFxcbiAgICBdLFxcbiAgICBSRE06IFtcXG4gICAgICAgIDEwMDI1LCAxNjUyNCwgMTY1MjUsIDE2NTI2LCAxNjUyNywgMTY1MjgsIDE2NTI5LCAxNjUzMCwgMTc3ODYsIDE3Nzg3LCAxNzc4OCwgNTAxOTUsXFxuICAgICAgICA1MDIwMCwgNTAyMDEsIDUwMjE2LCA1MDMwMywgNTAzMDQsIDUwMzA1LCA1MDMwNiwgNzUwMywgNzUwNCwgNzUwNSwgNzUwNiwgNzUwNywgNzUwOSxcXG4gICAgICAgIDc1MTAsIDc1MTEsIDc1MTIsIDc1MTMsIDc1MTQsIDc1MTUsIDc1MTYsIDc1MTcsIDc1MTgsIDc1MTksIDc1MjAsIDc1MjEsIDc1MjMsIDc1MjQsXFxuICAgICAgICA3NTI1LCA3NTI2LCA3NTI3LCA3NTI4LCA3NTI5LCA3NTMwLCA4ODgyLCA4ODgzLCA4ODg0LCA4ODg1LCA4ODg3LCA4ODg4LCA4ODg5LCA4ODkwLFxcbiAgICAgICAgODg5MSwgODg5MiwgOTQzMywgOTQzNCxcXG4gICAgXSxcXG4gICAgQkxVOiBbXFxuICAgICAgICAxMTcxNSwgMTEzODMsIDExMzg0LCAxMTM4NSwgMTEzODYsIDExMzg3LCAxMTM4OCwgMTEzODksIDExMzkwLCAxMTM5MSwgMTEzOTIsIDExMzkzLFxcbiAgICAgICAgMTEzOTQsIDExMzk1LCAxMTM5NiwgMTEzOTcsIDExMzk4LCAxMTM5OSwgMTE0MDAsIDExNDAxLCAxMTQwMiwgMTE0MDMsIDExNDA0LCAxMTQwNSxcXG4gICAgICAgIDExNDA2LCAxMTQwNywgMTE0MDgsIDExNDA5LCAxMTQxMCwgMTE0MTEsIDExNDEyLCAxMTQxMywgMTE0MTQsIDExNDE1LCAxMTQxNiwgMTE0MTcsXFxuICAgICAgICAxMTQxOCwgMTE0MTksIDExNDIwLCAxMTQyMSwgMTE0MjIsIDExNDIzLCAxMTQyNCwgMTE0MjUsIDExNDI2LCAxMTQyNywgMTE0MjgsIDExNDI5LFxcbiAgICAgICAgMTE0MzAsIDExNDMxLCA1MDIxOSwgNTAyMjAsIDUwMjIxLCA1MDIyMiwgNTAyMjMsIDUwMjI0LFxcbiAgICBdLFxcbn07XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9Db21iYXRhbnRTdGF0ZS50c1xcbmNsYXNzIENvbWJhdGFudFN0YXRlIHtcXG4gICAgY29uc3RydWN0b3IocG9zWCwgcG9zWSwgcG9zWiwgaGVhZGluZywgdGFyZ2V0YWJsZSwgaHAsIG1heEhwLCBtcCwgbWF4TXApIHtcXG4gICAgICAgIHRoaXMucG9zWCA9IHBvc1g7XFxuICAgICAgICB0aGlzLnBvc1kgPSBwb3NZO1xcbiAgICAgICAgdGhpcy5wb3NaID0gcG9zWjtcXG4gICAgICAgIHRoaXMuaGVhZGluZyA9IGhlYWRpbmc7XFxuICAgICAgICB0aGlzLnRhcmdldGFibGUgPSB0YXJnZXRhYmxlO1xcbiAgICAgICAgdGhpcy5ocCA9IGhwO1xcbiAgICAgICAgdGhpcy5tYXhIcCA9IG1heEhwO1xcbiAgICAgICAgdGhpcy5tcCA9IG1wO1xcbiAgICAgICAgdGhpcy5tYXhNcCA9IG1heE1wO1xcbiAgICB9XFxuICAgIHBhcnRpYWxDbG9uZShwcm9wcykge1xcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2o7XFxuICAgICAgICByZXR1cm4gbmV3IENvbWJhdGFudFN0YXRlKChfYSA9IHByb3BzLnBvc1gpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMucG9zWCwgKF9iID0gcHJvcHMucG9zWSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdGhpcy5wb3NZLCAoX2MgPSBwcm9wcy5wb3NaKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB0aGlzLnBvc1osIChfZCA9IHByb3BzLmhlYWRpbmcpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IHRoaXMuaGVhZGluZywgKF9lID0gcHJvcHMudGFyZ2V0YWJsZSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogdGhpcy50YXJnZXRhYmxlLCAoX2YgPSBwcm9wcy5ocCkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogdGhpcy5ocCwgKF9nID0gcHJvcHMubWF4SHApICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6IHRoaXMubWF4SHAsIChfaCA9IHByb3BzLm1wKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiB0aGlzLm1wLCAoX2ogPSBwcm9wcy5tYXhNcCkgIT09IG51bGwgJiYgX2ogIT09IHZvaWQgMCA/IF9qIDogdGhpcy5tYXhNcCk7XFxuICAgIH1cXG4gICAgdG9QbHVnaW5TdGF0ZSgpIHtcXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgUG9zWDogdGhpcy5wb3NYLFxcbiAgICAgICAgICAgIFBvc1k6IHRoaXMucG9zWSxcXG4gICAgICAgICAgICBQb3NaOiB0aGlzLnBvc1osXFxuICAgICAgICAgICAgSGVhZGluZzogdGhpcy5oZWFkaW5nLFxcbiAgICAgICAgICAgIEN1cnJlbnRIUDogdGhpcy5ocCxcXG4gICAgICAgICAgICBNYXhIUDogdGhpcy5tYXhIcCxcXG4gICAgICAgICAgICBDdXJyZW50TVA6IHRoaXMubXAsXFxuICAgICAgICAgICAgTWF4TVA6IHRoaXMubWF4TXAsXFxuICAgICAgICB9O1xcbiAgICB9XFxufVxcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3Jlc291cmNlcy9wZXRfbmFtZXMudHNcXG4vLyBBdXRvLWdlbmVyYXRlZCBmcm9tIGdlbl9wZXRfbmFtZXMucHlcXG4vLyBETyBOT1QgRURJVCBUSElTIEZJTEUgRElSRUNUTFlcXG5jb25zdCBkYXRhID0ge1xcbiAgICAnY24nOiBbXFxuICAgICAgICAn57u/5a6d55+z5YW9JyxcXG4gICAgICAgICfpu4Tlrp3nn7Plhb0nLFxcbiAgICAgICAgJ+S8iuW8l+WIqeeJueS5i+eBtScsXFxuICAgICAgICAn5rOw5Z2m5LmL54G1JyxcXG4gICAgICAgICfov6bmpbznvZfkuYvngbUnLFxcbiAgICAgICAgJ+acneaXpeWwj+S7meWlsycsXFxuICAgICAgICAn5aSV5pyI5bCP5LuZ5aWzJyxcXG4gICAgICAgICfovablvI/mta7nqbrngq7loZQnLFxcbiAgICAgICAgJ+ixoeW8j+a1ruepuueCruWhlCcsXFxuICAgICAgICAn5Lqa54G156We5be05ZOI5aeG54m5JyxcXG4gICAgICAgICfkuprngbXnpZ7kuI3mrbvpuJ8nLFxcbiAgICAgICAgJ+eCveWkqeS9vycsXFxuICAgICAgICAn5pyI6ZW/5a6d55+z5YW9JyxcXG4gICAgICAgICfoi7Hpm4TnmoTmjqDlvbEnLFxcbiAgICAgICAgJ+WQjuW8j+iHqui1sOS6uuWBticsXFxuICAgICAgICAn5YiG6LqrJyxcXG4gICAgXSxcXG4gICAgJ2RlJzogW1xcbiAgICAgICAgJ1NtYXJhZ2QtS2FyZnVua2VsJyxcXG4gICAgICAgICdUb3Bhcy1LYXJmdW5rZWwnLFxcbiAgICAgICAgJ0lmcml0LUVnaScsXFxuICAgICAgICAnVGl0YW4tRWdpJyxcXG4gICAgICAgICdHYXJ1ZGEtRWdpJyxcXG4gICAgICAgICdFb3MnLFxcbiAgICAgICAgJ1NlbGVuZScsXFxuICAgICAgICAnU2VsYnN0c2NodXNzLUd5cm9jb3B0ZXIgVFVSTScsXFxuICAgICAgICAnU2VsYnN0c2NodXNzLUd5cm9jb3B0ZXIgTMOEVUZFUicsXFxuICAgICAgICAnRGVtaS1CYWhhbXV0JyxcXG4gICAgICAgICdEZW1pLVBow7ZuaXgnLFxcbiAgICAgICAgJ1NlcmFwaCcsXFxuICAgICAgICAnTW9uZHN0ZWluLUthcmZ1bmtlbCcsXFxuICAgICAgICAnU2NoYXR0ZW5zY2hlbWVuJyxcXG4gICAgICAgICdBdXRvbWF0b24gREFNRScsXFxuICAgICAgICAnR2Vkb3BwZWx0ZXMgSWNoJyxcXG4gICAgXSxcXG4gICAgJ2VuJzogW1xcbiAgICAgICAgJ0VtZXJhbGQgQ2FyYnVuY2xlJyxcXG4gICAgICAgICdUb3BheiBDYXJidW5jbGUnLFxcbiAgICAgICAgJ0lmcml0LUVnaScsXFxuICAgICAgICAnVGl0YW4tRWdpJyxcXG4gICAgICAgICdHYXJ1ZGEtRWdpJyxcXG4gICAgICAgICdFb3MnLFxcbiAgICAgICAgJ1NlbGVuZScsXFxuICAgICAgICAnUm9vayBBdXRvdHVycmV0JyxcXG4gICAgICAgICdCaXNob3AgQXV0b3R1cnJldCcsXFxuICAgICAgICAnRGVtaS1CYWhhbXV0JyxcXG4gICAgICAgICdEZW1pLVBob2VuaXgnLFxcbiAgICAgICAgJ1NlcmFwaCcsXFxuICAgICAgICAnTW9vbnN0b25lIENhcmJ1bmNsZScsXFxuICAgICAgICAnRXN0ZWVtJyxcXG4gICAgICAgICdBdXRvbWF0b24gUXVlZW4nLFxcbiAgICAgICAgJ0J1bnNoaW4nLFxcbiAgICBdLFxcbiAgICAnZnInOiBbXFxuICAgICAgICAnQ2FyYnVuY2xlIMOpbWVyYXVkZScsXFxuICAgICAgICAnQ2FyYnVuY2xlIHRvcGF6ZScsXFxuICAgICAgICAnSWZyaXQtRWdpJyxcXG4gICAgICAgICdUaXRhbi1FZ2knLFxcbiAgICAgICAgJ0dhcnVkYS1FZ2knLFxcbiAgICAgICAgJ0VvcycsXFxuICAgICAgICAnU2VsZW5lJyxcXG4gICAgICAgICdBdXRvLXRvdXJlbGxlIFRvdXInLFxcbiAgICAgICAgJ0F1dG8tdG91cmVsbGUgRm91JyxcXG4gICAgICAgICdEZW1pLUJhaGFtdXQnLFxcbiAgICAgICAgJ0RlbWktUGjDqW5peCcsXFxuICAgICAgICAnU8OpcmFwaGluJyxcXG4gICAgICAgICdDYXJidW5jbGUgaMOpY2F0b2xpdGUnLFxcbiAgICAgICAgJ0VzdGltZScsXFxuICAgICAgICAnQXV0b21hdGUgUmVpbmUnLFxcbiAgICAgICAgJ09tYnJlJyxcXG4gICAgXSxcXG4gICAgJ2phJzogW1xcbiAgICAgICAgJ+OCq+ODvOODkOODs+OCr+ODq+ODu+OCqOODoeODqeODq+ODiScsXFxuICAgICAgICAn44Kr44O844OQ44Oz44Kv44Or44O744OI44OR44O844K6JyxcXG4gICAgICAgICfjgqTjg5Xjg6rjg7zjg4jjg7vjgqjjgq4nLFxcbiAgICAgICAgJ+OCv+OCpOOCv+ODs+ODu+OCqOOCricsXFxuICAgICAgICAn44Ks44Or44O844OA44O744Ko44KuJyxcXG4gICAgICAgICfjg5XjgqfjgqLjg6rjg7zjg7vjgqjjgqrjgrknLFxcbiAgICAgICAgJ+ODleOCp+OCouODquODvOODu+OCu+ODrOODjScsXFxuICAgICAgICAn44Kq44O844OI44K/44Os44OD44OI44O744Or44O844KvJyxcXG4gICAgICAgICfjgqrjg7zjg4jjgr/jg6zjg4Pjg4jjg7vjg5Pjgrfjg6fjg4Pjg5cnLFxcbiAgICAgICAgJ+ODh+ODn+ODu+ODkOODj+ODoOODvOODiCcsXFxuICAgICAgICAn44OH44Of44O744OV44Kn44OL44OD44Kv44K5JyxcXG4gICAgICAgICfjgrvjg6njg5XjgqPjg6AnLFxcbiAgICAgICAgJ+OCq+ODvOODkOODs+OCr+ODq+ODu+ODoOODvOODs+OCueODiOODvOODsycsXFxuICAgICAgICAn6Iux6ZuE44Gu5b2x6LqrJyxcXG4gICAgICAgICfjgqrjg7zjg4jjg57jg4jjg7Pjg7vjgq/jgqTjg7zjg7MnLFxcbiAgICAgICAgJ+WIhui6qycsXFxuICAgIF0sXFxuICAgICdrbyc6IFtcXG4gICAgICAgICfsubTrspntgbQg7JeQ66mU656E65OcJyxcXG4gICAgICAgICfsubTrspntgbQg7Yag7YyM7KaIJyxcXG4gICAgICAgICfsnbTtlITrpqztirgg7JeQ6riwJyxcXG4gICAgICAgICftg4DsnbTtg4Qg7JeQ6riwJyxcXG4gICAgICAgICfqsIDro6jri6Qg7JeQ6riwJyxcXG4gICAgICAgICfsmpTsoJUg7JeQ7Jik7IqkJyxcXG4gICAgICAgICfsmpTsoJUg7IWA66CI64SkJyxcXG4gICAgICAgICfsnpDrj5ntj6ztg5Eg66OpJyxcXG4gICAgICAgICfsnpDrj5ntj6ztg5Eg67mE7IiNJyxcXG4gICAgICAgICfrjbDrr7jrsJTtlZjrrLTtirgnLFxcbiAgICAgICAgJ+uNsOuvuO2UvOuLieyKpCcsXFxuICAgICAgICAn7IS465287ZWMJyxcXG4gICAgICAgICfsubTrspntgbQg66y47Iqk7YakJyxcXG4gICAgICAgICfsmIHsm4XsnZgg7ZmY7JiBJyxcXG4gICAgICAgICfsnpDrj5nsnbjtmJUg7YC4JyxcXG4gICAgICAgICfrtoTsi6AnLFxcbiAgICBdLFxcbn07XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBwZXRfbmFtZXMgPSAoZGF0YSk7XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9uZXR3b3JrX2xvZ19jb252ZXJ0ZXIvTGluZUV2ZW50LnRzXFxuXFxuY29uc3QgZmllbGRzID0ge1xcbiAgICBldmVudDogMCxcXG4gICAgdGltZXN0YW1wOiAxLFxcbn07XFxuLyoqXFxuICogR2VuZXJpYyBjbGFzcyB0byB0cmFjayBhbiBGRlhJViBsb2cgbGluZVxcbiAqL1xcbmNsYXNzIExpbmVFdmVudCB7XFxuICAgIGNvbnN0cnVjdG9yKHJlcG8sIG5ldHdvcmtMaW5lLCBwYXJ0cykge1xcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XFxuICAgICAgICB0aGlzLm5ldHdvcmtMaW5lID0gbmV0d29ya0xpbmU7XFxuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XFxuICAgICAgICB0aGlzLmludmFsaWQgPSBmYWxzZTtcXG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xcbiAgICAgICAgdGhpcy5kZWNFdmVudCA9IHBhcnNlSW50KChfYSA9IHBhcnRzW2ZpZWxkcy5ldmVudF0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcwJyk7XFxuICAgICAgICB0aGlzLmhleEV2ZW50ID0gRW11bGF0b3JDb21tb24uemVyb1BhZCh0aGlzLmRlY0V2ZW50LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKTtcXG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gbmV3IERhdGUoKF9iID0gcGFydHNbZmllbGRzLnRpbWVzdGFtcF0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcwJykuZ2V0VGltZSgpO1xcbiAgICAgICAgdGhpcy5jaGVja3N1bSA9IChfYyA9IHBhcnRzLnNsaWNlKC0xKVswXSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogJyc7XFxuICAgICAgICByZXBvLnVwZGF0ZVRpbWVzdGFtcCh0aGlzLnRpbWVzdGFtcCk7XFxuICAgICAgICB0aGlzLmNvbnZlcnRlZExpbmUgPSB0aGlzLnByZWZpeCgpICsgKHBhcnRzLmpvaW4oJzonKSkucmVwbGFjZSgnfCcsICc6Jyk7XFxuICAgIH1cXG4gICAgcHJlZml4KCkge1xcbiAgICAgICAgcmV0dXJuICdbJyArIEVtdWxhdG9yQ29tbW9uLnRpbWVUb1RpbWVTdHJpbmcodGhpcy50aW1lc3RhbXAsIHRydWUpICsgJ10gJyArIHRoaXMuaGV4RXZlbnQgKyAnOic7XFxuICAgIH1cXG4gICAgc3RhdGljIGlzRGFtYWdlSGFsbG93ZWQoZGFtYWdlKSB7XFxuICAgICAgICByZXR1cm4gKHBhcnNlSW50KGRhbWFnZSwgMTYpICYgcGFyc2VJbnQoJzEwMDAnLCAxNikpID4gMDtcXG4gICAgfVxcbiAgICBzdGF0aWMgaXNEYW1hZ2VCaWcoZGFtYWdlKSB7XFxuICAgICAgICByZXR1cm4gKHBhcnNlSW50KGRhbWFnZSwgMTYpICYgcGFyc2VJbnQoJzQwMDAnLCAxNikpID4gMDtcXG4gICAgfVxcbiAgICBzdGF0aWMgY2FsY3VsYXRlRGFtYWdlKGRhbWFnZSkge1xcbiAgICAgICAgaWYgKExpbmVFdmVudC5pc0RhbWFnZUhhbGxvd2VkKGRhbWFnZSkpXFxuICAgICAgICAgICAgcmV0dXJuIDA7XFxuICAgICAgICBkYW1hZ2UgPSBFbXVsYXRvckNvbW1vbi56ZXJvUGFkKGRhbWFnZSwgOCk7XFxuICAgICAgICBjb25zdCBwYXJ0cyA9IFtcXG4gICAgICAgICAgICBkYW1hZ2Uuc3Vic3RyKDAsIDIpLFxcbiAgICAgICAgICAgIGRhbWFnZS5zdWJzdHIoMiwgMiksXFxuICAgICAgICAgICAgZGFtYWdlLnN1YnN0cig0LCAyKSxcXG4gICAgICAgICAgICBkYW1hZ2Uuc3Vic3RyKDYsIDIpLFxcbiAgICAgICAgXTtcXG4gICAgICAgIGlmICghTGluZUV2ZW50LmlzRGFtYWdlQmlnKGRhbWFnZSkpXFxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHBhcnRzLnNsaWNlKDAsIDIpLnJldmVyc2UoKS5qb2luKCcnKSwgMTYpO1xcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KChwYXJ0c1szXSArIHBhcnRzWzBdKSArXFxuICAgICAgICAgICAgKHBhcnNlSW50KHBhcnRzWzFdLCAxNikgLSBwYXJzZUludChwYXJ0c1szXSwgMTYpKS50b1N0cmluZygxNiksIDE2KTtcXG4gICAgfVxcbn1cXG5jb25zdCBpc0xpbmVFdmVudFNvdXJjZSA9IChsaW5lKSA9PiB7XFxuICAgIHJldHVybiAnaXNTb3VyY2UnIGluIGxpbmU7XFxufTtcXG5jb25zdCBpc0xpbmVFdmVudFRhcmdldCA9IChsaW5lKSA9PiB7XFxuICAgIHJldHVybiAnaXNUYXJnZXQnIGluIGxpbmU7XFxufTtcXG5jb25zdCBpc0xpbmVFdmVudEpvYkxldmVsID0gKGxpbmUpID0+IHtcXG4gICAgcmV0dXJuICdpc0pvYkxldmVsJyBpbiBsaW5lO1xcbn07XFxuY29uc3QgaXNMaW5lRXZlbnRBYmlsaXR5ID0gKGxpbmUpID0+IHtcXG4gICAgcmV0dXJuICdpc0FiaWxpdHknIGluIGxpbmU7XFxufTtcXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL0NvbWJhdGFudFRyYWNrZXIudHNcXG5cXG5cXG5cXG5cXG5cXG5jbGFzcyBDb21iYXRhbnRUcmFja2VyIHtcXG4gICAgY29uc3RydWN0b3IobG9nTGluZXMsIGxhbmd1YWdlKSB7XFxuICAgICAgICB0aGlzLmNvbWJhdGFudHMgPSB7fTtcXG4gICAgICAgIHRoaXMucGFydHlNZW1iZXJzID0gW107XFxuICAgICAgICB0aGlzLmVuZW1pZXMgPSBbXTtcXG4gICAgICAgIHRoaXMub3RoZXJzID0gW107XFxuICAgICAgICB0aGlzLnBldHMgPSBbXTtcXG4gICAgICAgIHRoaXMuaW5pdGlhbFN0YXRlcyA9IHt9O1xcbiAgICAgICAgdGhpcy5sYW5ndWFnZSA9IGxhbmd1YWdlO1xcbiAgICAgICAgdGhpcy5maXJzdFRpbWVzdGFtcCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xcbiAgICAgICAgdGhpcy5sYXN0VGltZXN0YW1wID0gMDtcXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZShsb2dMaW5lcyk7XFxuICAgICAgICAvLyBDbGVhciBpbml0aWFsU3RhdGVzIGFmdGVyIHdlIGluaXRpYWxpemUsIHdlIGRvbid0IG5lZWQgaXQgYW55bW9yZVxcbiAgICAgICAgdGhpcy5pbml0aWFsU3RhdGVzID0ge307XFxuICAgIH1cXG4gICAgaW5pdGlhbGl6ZShsb2dMaW5lcykge1xcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xcbiAgICAgICAgLy8gRmlyc3QgcGFzczogR2V0IGxpc3Qgb2YgY29tYmF0YW50cywgZmlndXJlIG91dCB3aGVyZSB0aGV5XFxuICAgICAgICAvLyBzdGFydCBhdCBpZiBwb3NzaWJsZVxcbiAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxvZ0xpbmVzKSB7XFxuICAgICAgICAgICAgdGhpcy5maXJzdFRpbWVzdGFtcCA9IE1hdGgubWluKHRoaXMuZmlyc3RUaW1lc3RhbXAsIGxpbmUudGltZXN0YW1wKTtcXG4gICAgICAgICAgICB0aGlzLmxhc3RUaW1lc3RhbXAgPSBNYXRoLm1heCh0aGlzLmxhc3RUaW1lc3RhbXAsIGxpbmUudGltZXN0YW1wKTtcXG4gICAgICAgICAgICBpZiAoaXNMaW5lRXZlbnRTb3VyY2UobGluZSkpXFxuICAgICAgICAgICAgICAgIHRoaXMuYWRkQ29tYmF0YW50RnJvbUxpbmUobGluZSk7XFxuICAgICAgICAgICAgaWYgKGlzTGluZUV2ZW50VGFyZ2V0KGxpbmUpKVxcbiAgICAgICAgICAgICAgICB0aGlzLmFkZENvbWJhdGFudEZyb21UYXJnZXRMaW5lKGxpbmUpO1xcbiAgICAgICAgfVxcbiAgICAgICAgLy8gQmV0d2VlbiBwYXNzZXM6IENyZWF0ZSBvdXIgaW5pdGlhbCBjb21iYXRhbnQgc3RhdGVzXFxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuaW5pdGlhbFN0YXRlcykge1xcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gKF9hID0gdGhpcy5pbml0aWFsU3RhdGVzW2lkXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XFxuICAgICAgICAgICAgKF9iID0gdGhpcy5jb21iYXRhbnRzW2lkXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnB1c2hTdGF0ZSh0aGlzLmZpcnN0VGltZXN0YW1wLCBuZXcgQ29tYmF0YW50U3RhdGUoTnVtYmVyKHN0YXRlLnBvc1gpLCBOdW1iZXIoc3RhdGUucG9zWSksIE51bWJlcihzdGF0ZS5wb3NaKSwgTnVtYmVyKHN0YXRlLmhlYWRpbmcpLCAoX2MgPSBzdGF0ZS50YXJnZXRhYmxlKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBmYWxzZSwgTnVtYmVyKHN0YXRlLmhwKSwgTnVtYmVyKHN0YXRlLm1heEhwKSwgTnVtYmVyKHN0YXRlLm1wKSwgTnVtYmVyKHN0YXRlLm1heE1wKSkpO1xcbiAgICAgICAgfVxcbiAgICAgICAgLy8gU2Vjb25kIHBhc3M6IEFuYWx5emUgY29tYmF0YW50IGluZm9ybWF0aW9uIGZvciB0cmFja2luZ1xcbiAgICAgICAgY29uc3QgZXZlbnRUcmFja2VyID0ge307XFxuICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbG9nTGluZXMpIHtcXG4gICAgICAgICAgICBpZiAoaXNMaW5lRXZlbnRTb3VyY2UobGluZSkpIHtcXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmV4dHJhY3RTdGF0ZUZyb21MaW5lKGxpbmUpO1xcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUpIHtcXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50VHJhY2tlcltsaW5lLmlkXSA9IChfZCA9IGV2ZW50VHJhY2tlcltsaW5lLmlkXSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMDtcXG4gICAgICAgICAgICAgICAgICAgICsrZXZlbnRUcmFja2VyW2xpbmUuaWRdO1xcbiAgICAgICAgICAgICAgICAgICAgKF9lID0gdGhpcy5jb21iYXRhbnRzW2xpbmUuaWRdKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UucHVzaFBhcnRpYWxTdGF0ZShsaW5lLnRpbWVzdGFtcCwgc3RhdGUpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmIChpc0xpbmVFdmVudFRhcmdldChsaW5lKSkge1xcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZXh0cmFjdFN0YXRlRnJvbVRhcmdldExpbmUobGluZSk7XFxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZSkge1xcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUcmFja2VyW2xpbmUudGFyZ2V0SWRdID0gKF9mID0gZXZlbnRUcmFja2VyW2xpbmUudGFyZ2V0SWRdKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAwO1xcbiAgICAgICAgICAgICAgICAgICAgKytldmVudFRyYWNrZXJbbGluZS50YXJnZXRJZF07XFxuICAgICAgICAgICAgICAgICAgICAoX2cgPSB0aGlzLmNvbWJhdGFudHNbbGluZS50YXJnZXRJZF0pID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5wdXNoUGFydGlhbFN0YXRlKGxpbmUudGltZXN0YW1wLCBzdGF0ZSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICAvLyBGaWd1cmUgb3V0IHBhcnR5L2VuZW15L290aGVyIHN0YXR1c1xcbiAgICAgICAgY29uc3QgcGV0TmFtZXMgPSBwZXRfbmFtZXNbdGhpcy5sYW5ndWFnZV07XFxuICAgICAgICB0aGlzLm90aGVycyA9IHRoaXMub3RoZXJzLmZpbHRlcigoSUQpID0+IHtcXG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xcbiAgICAgICAgICAgIGlmICgoKF9hID0gdGhpcy5jb21iYXRhbnRzW0lEXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmpvYikgIT09IHVuZGVmaW5lZCAmJlxcbiAgICAgICAgICAgICAgICAoKF9iID0gdGhpcy5jb21iYXRhbnRzW0lEXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmpvYikgIT09ICdOT05FJyAmJlxcbiAgICAgICAgICAgICAgICBJRC5zdGFydHNXaXRoKCcxJykpIHtcXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJ0eU1lbWJlcnMucHVzaChJRCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSBpZiAocGV0TmFtZXMuaW5jbHVkZXMoKF9kID0gKF9jID0gdGhpcy5jb21iYXRhbnRzW0lEXSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLm5hbWUpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6ICcnKSkge1xcbiAgICAgICAgICAgICAgICB0aGlzLnBldHMucHVzaChJRCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSBpZiAoKChfZSA9IGV2ZW50VHJhY2tlcltJRF0pICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IDApID4gMCkge1xcbiAgICAgICAgICAgICAgICB0aGlzLmVuZW1pZXMucHVzaChJRCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgICAgICB9KTtcXG4gICAgICAgIC8vIE1haW4gY29tYmF0YW50IGlzIHRoZSBvbmUgdGhhdCB0b29rIHRoZSBtb3N0IGFjdGlvbnNcXG4gICAgICAgIHRoaXMubWFpbkNvbWJhdGFudElEID0gdGhpcy5lbmVtaWVzLnNvcnQoKGwsIHIpID0+IHtcXG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xcbiAgICAgICAgICAgIHJldHVybiAoKF9hID0gZXZlbnRUcmFja2VyW3JdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwKSAtICgoX2IgPSBldmVudFRyYWNrZXJbbF0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDApO1xcbiAgICAgICAgfSlbMF07XFxuICAgIH1cXG4gICAgYWRkQ29tYmF0YW50RnJvbUxpbmUobGluZSkge1xcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rLCBfbCwgX20sIF9vLCBfcCwgX3E7XFxuICAgICAgICBjb25zdCBjb21iYXRhbnQgPSB0aGlzLmluaXRDb21iYXRhbnQobGluZS5pZCwgbGluZS5uYW1lKTtcXG4gICAgICAgIGNvbnN0IGluaXRTdGF0ZSA9IChfYSA9IHRoaXMuaW5pdGlhbFN0YXRlc1tsaW5lLmlkXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XFxuICAgICAgICBjb25zdCBleHRyYWN0ZWRTdGF0ZSA9IChfYiA9IHRoaXMuZXh0cmFjdFN0YXRlRnJvbUxpbmUobGluZSkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHt9O1xcbiAgICAgICAgaW5pdFN0YXRlLnBvc1ggPSAoX2MgPSBpbml0U3RhdGUucG9zWCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZXh0cmFjdGVkU3RhdGUucG9zWDtcXG4gICAgICAgIGluaXRTdGF0ZS5wb3NZID0gKF9kID0gaW5pdFN0YXRlLnBvc1kpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGV4dHJhY3RlZFN0YXRlLnBvc1k7XFxuICAgICAgICBpbml0U3RhdGUucG9zWiA9IChfZSA9IGluaXRTdGF0ZS5wb3NaKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBleHRyYWN0ZWRTdGF0ZS5wb3NaO1xcbiAgICAgICAgaW5pdFN0YXRlLmhlYWRpbmcgPSAoX2YgPSBpbml0U3RhdGUuaGVhZGluZykgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogZXh0cmFjdGVkU3RhdGUuaGVhZGluZztcXG4gICAgICAgIGluaXRTdGF0ZS50YXJnZXRhYmxlID0gKF9nID0gaW5pdFN0YXRlLnRhcmdldGFibGUpICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6IGV4dHJhY3RlZFN0YXRlLnRhcmdldGFibGU7XFxuICAgICAgICBpbml0U3RhdGUuaHAgPSAoX2ggPSBpbml0U3RhdGUuaHApICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IGV4dHJhY3RlZFN0YXRlLmhwO1xcbiAgICAgICAgaW5pdFN0YXRlLm1heEhwID0gKF9qID0gaW5pdFN0YXRlLm1heEhwKSAhPT0gbnVsbCAmJiBfaiAhPT0gdm9pZCAwID8gX2ogOiBleHRyYWN0ZWRTdGF0ZS5tYXhIcDtcXG4gICAgICAgIGluaXRTdGF0ZS5tcCA9IChfayA9IGluaXRTdGF0ZS5tcCkgIT09IG51bGwgJiYgX2sgIT09IHZvaWQgMCA/IF9rIDogZXh0cmFjdGVkU3RhdGUubXA7XFxuICAgICAgICBpbml0U3RhdGUubWF4TXAgPSAoX2wgPSBpbml0U3RhdGUubWF4TXApICE9PSBudWxsICYmIF9sICE9PSB2b2lkIDAgPyBfbCA6IGV4dHJhY3RlZFN0YXRlLm1heE1wO1xcbiAgICAgICAgaWYgKGlzTGluZUV2ZW50Sm9iTGV2ZWwobGluZSkpIHtcXG4gICAgICAgICAgICBjb21iYXRhbnQuam9iID0gKF9vID0gKF9tID0gdGhpcy5jb21iYXRhbnRzW2xpbmUuaWRdKSA9PT0gbnVsbCB8fCBfbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX20uam9iKSAhPT0gbnVsbCAmJiBfbyAhPT0gdm9pZCAwID8gX28gOiBsaW5lLmpvYjtcXG4gICAgICAgICAgICBjb21iYXRhbnQubGV2ZWwgPSAoX3EgPSAoX3AgPSB0aGlzLmNvbWJhdGFudHNbbGluZS5pZF0pID09PSBudWxsIHx8IF9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcC5sZXZlbCkgIT09IG51bGwgJiYgX3EgIT09IHZvaWQgMCA/IF9xIDogbGluZS5sZXZlbDtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmIChpc0xpbmVFdmVudEFiaWxpdHkobGluZSkpIHtcXG4gICAgICAgICAgICBpZiAoIWNvbWJhdGFudC5qb2IgJiYgIWxpbmUuaWQuc3RhcnRzV2l0aCgnNCcpICYmIGxpbmUuYWJpbGl0eUlkICE9PSB1bmRlZmluZWQpXFxuICAgICAgICAgICAgICAgIGNvbWJhdGFudC5qb2IgPSBDb21iYXRhbnRKb2JTZWFyY2guZ2V0Sm9iKGxpbmUuYWJpbGl0eUlkKTtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICBhZGRDb21iYXRhbnRGcm9tVGFyZ2V0TGluZShsaW5lKSB7XFxuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2s7XFxuICAgICAgICB0aGlzLmluaXRDb21iYXRhbnQobGluZS50YXJnZXRJZCwgbGluZS50YXJnZXROYW1lKTtcXG4gICAgICAgIGNvbnN0IGluaXRTdGF0ZSA9IChfYSA9IHRoaXMuaW5pdGlhbFN0YXRlc1tsaW5lLnRhcmdldElkXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XFxuICAgICAgICBjb25zdCBleHRyYWN0ZWRTdGF0ZSA9IChfYiA9IHRoaXMuZXh0cmFjdFN0YXRlRnJvbVRhcmdldExpbmUobGluZSkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHt9O1xcbiAgICAgICAgaW5pdFN0YXRlLnBvc1ggPSAoX2MgPSBpbml0U3RhdGUucG9zWCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogZXh0cmFjdGVkU3RhdGUucG9zWDtcXG4gICAgICAgIGluaXRTdGF0ZS5wb3NZID0gKF9kID0gaW5pdFN0YXRlLnBvc1kpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGV4dHJhY3RlZFN0YXRlLnBvc1k7XFxuICAgICAgICBpbml0U3RhdGUucG9zWiA9IChfZSA9IGluaXRTdGF0ZS5wb3NaKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBleHRyYWN0ZWRTdGF0ZS5wb3NaO1xcbiAgICAgICAgaW5pdFN0YXRlLmhlYWRpbmcgPSAoX2YgPSBpbml0U3RhdGUuaGVhZGluZykgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogZXh0cmFjdGVkU3RhdGUuaGVhZGluZztcXG4gICAgICAgIGluaXRTdGF0ZS5ocCA9IChfZyA9IGluaXRTdGF0ZS5ocCkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogZXh0cmFjdGVkU3RhdGUuaHA7XFxuICAgICAgICBpbml0U3RhdGUubWF4SHAgPSAoX2ggPSBpbml0U3RhdGUubWF4SHApICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IGV4dHJhY3RlZFN0YXRlLm1heEhwO1xcbiAgICAgICAgaW5pdFN0YXRlLm1wID0gKF9qID0gaW5pdFN0YXRlLm1wKSAhPT0gbnVsbCAmJiBfaiAhPT0gdm9pZCAwID8gX2ogOiBleHRyYWN0ZWRTdGF0ZS5tcDtcXG4gICAgICAgIGluaXRTdGF0ZS5tYXhNcCA9IChfayA9IGluaXRTdGF0ZS5tYXhNcCkgIT09IG51bGwgJiYgX2sgIT09IHZvaWQgMCA/IF9rIDogZXh0cmFjdGVkU3RhdGUubWF4TXA7XFxuICAgIH1cXG4gICAgZXh0cmFjdFN0YXRlRnJvbUxpbmUobGluZSkge1xcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB7fTtcXG4gICAgICAgIGlmIChsaW5lLnggIT09IHVuZGVmaW5lZClcXG4gICAgICAgICAgICBzdGF0ZS5wb3NYID0gbGluZS54O1xcbiAgICAgICAgaWYgKGxpbmUueSAhPT0gdW5kZWZpbmVkKVxcbiAgICAgICAgICAgIHN0YXRlLnBvc1kgPSBsaW5lLnk7XFxuICAgICAgICBpZiAobGluZS56ICE9PSB1bmRlZmluZWQpXFxuICAgICAgICAgICAgc3RhdGUucG9zWiA9IGxpbmUuejtcXG4gICAgICAgIGlmIChsaW5lLmhlYWRpbmcgIT09IHVuZGVmaW5lZClcXG4gICAgICAgICAgICBzdGF0ZS5oZWFkaW5nID0gbGluZS5oZWFkaW5nO1xcbiAgICAgICAgaWYgKGxpbmUudGFyZ2V0YWJsZSAhPT0gdW5kZWZpbmVkKVxcbiAgICAgICAgICAgIHN0YXRlLnRhcmdldGFibGUgPSBsaW5lLnRhcmdldGFibGU7XFxuICAgICAgICBpZiAobGluZS5ocCAhPT0gdW5kZWZpbmVkKVxcbiAgICAgICAgICAgIHN0YXRlLmhwID0gbGluZS5ocDtcXG4gICAgICAgIGlmIChsaW5lLm1heEhwICE9PSB1bmRlZmluZWQpXFxuICAgICAgICAgICAgc3RhdGUubWF4SHAgPSBsaW5lLm1heEhwO1xcbiAgICAgICAgaWYgKGxpbmUubXAgIT09IHVuZGVmaW5lZClcXG4gICAgICAgICAgICBzdGF0ZS5tcCA9IGxpbmUubXA7XFxuICAgICAgICBpZiAobGluZS5tYXhNcCAhPT0gdW5kZWZpbmVkKVxcbiAgICAgICAgICAgIHN0YXRlLm1heE1wID0gbGluZS5tYXhNcDtcXG4gICAgICAgIHJldHVybiBzdGF0ZTtcXG4gICAgfVxcbiAgICBleHRyYWN0U3RhdGVGcm9tVGFyZ2V0TGluZShsaW5lKSB7XFxuICAgICAgICBjb25zdCBzdGF0ZSA9IHt9O1xcbiAgICAgICAgaWYgKGxpbmUudGFyZ2V0WCAhPT0gdW5kZWZpbmVkKVxcbiAgICAgICAgICAgIHN0YXRlLnBvc1ggPSBsaW5lLnRhcmdldFg7XFxuICAgICAgICBpZiAobGluZS50YXJnZXRZICE9PSB1bmRlZmluZWQpXFxuICAgICAgICAgICAgc3RhdGUucG9zWSA9IGxpbmUudGFyZ2V0WTtcXG4gICAgICAgIGlmIChsaW5lLnRhcmdldFogIT09IHVuZGVmaW5lZClcXG4gICAgICAgICAgICBzdGF0ZS5wb3NaID0gbGluZS50YXJnZXRaO1xcbiAgICAgICAgaWYgKGxpbmUudGFyZ2V0SGVhZGluZyAhPT0gdW5kZWZpbmVkKVxcbiAgICAgICAgICAgIHN0YXRlLmhlYWRpbmcgPSBsaW5lLnRhcmdldEhlYWRpbmc7XFxuICAgICAgICBpZiAobGluZS50YXJnZXRIcCAhPT0gdW5kZWZpbmVkKVxcbiAgICAgICAgICAgIHN0YXRlLmhwID0gbGluZS50YXJnZXRIcDtcXG4gICAgICAgIGlmIChsaW5lLnRhcmdldE1heEhwICE9PSB1bmRlZmluZWQpXFxuICAgICAgICAgICAgc3RhdGUubWF4SHAgPSBsaW5lLnRhcmdldE1heEhwO1xcbiAgICAgICAgaWYgKGxpbmUudGFyZ2V0TXAgIT09IHVuZGVmaW5lZClcXG4gICAgICAgICAgICBzdGF0ZS5tcCA9IGxpbmUudGFyZ2V0TXA7XFxuICAgICAgICBpZiAobGluZS50YXJnZXRNYXhNcCAhPT0gdW5kZWZpbmVkKVxcbiAgICAgICAgICAgIHN0YXRlLm1heE1wID0gbGluZS50YXJnZXRNYXhNcDtcXG4gICAgICAgIHJldHVybiBzdGF0ZTtcXG4gICAgfVxcbiAgICBpbml0Q29tYmF0YW50KGlkLCBuYW1lKSB7XFxuICAgICAgICBsZXQgY29tYmF0YW50ID0gdGhpcy5jb21iYXRhbnRzW2lkXTtcXG4gICAgICAgIGlmIChjb21iYXRhbnQgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgICAgIGNvbWJhdGFudCA9IHRoaXMuY29tYmF0YW50c1tpZF0gPSBuZXcgQ29tYmF0YW50KGlkLCBuYW1lKTtcXG4gICAgICAgICAgICB0aGlzLm90aGVycy5wdXNoKGlkKTtcXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxTdGF0ZXNbaWRdID0ge1xcbiAgICAgICAgICAgICAgICB0YXJnZXRhYmxlOiB0cnVlLFxcbiAgICAgICAgICAgIH07XFxuICAgICAgICB9XFxuICAgICAgICBlbHNlIGlmIChjb21iYXRhbnQubmFtZSA9PT0gJycpIHtcXG4gICAgICAgICAgICBjb21iYXRhbnQuc2V0TmFtZShuYW1lKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBjb21iYXRhbnQ7XFxuICAgIH1cXG4gICAgZ2V0TWFpbkNvbWJhdGFudE5hbWUoKSB7XFxuICAgICAgICB2YXIgX2EsIF9iO1xcbiAgICAgICAgaWYgKHRoaXMubWFpbkNvbWJhdGFudElEKVxcbiAgICAgICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLmNvbWJhdGFudHNbdGhpcy5tYWluQ29tYmF0YW50SURdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJ1Vua25vd24nO1xcbiAgICAgICAgcmV0dXJuICdVbmtub3duJztcXG4gICAgfVxcbn1cXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9Mb2dSZXBvc2l0b3J5LnRzXFxuY2xhc3MgTG9nUmVwb3NpdG9yeSB7XFxuICAgIGNvbnN0cnVjdG9yKCkge1xcbiAgICAgICAgdGhpcy5Db21iYXRhbnRzID0ge307XFxuICAgICAgICB0aGlzLmZpcnN0VGltZXN0YW1wID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XFxuICAgIH1cXG4gICAgdXBkYXRlVGltZXN0YW1wKHRpbWVzdGFtcCkge1xcbiAgICAgICAgdGhpcy5maXJzdFRpbWVzdGFtcCA9IE1hdGgubWluKHRoaXMuZmlyc3RUaW1lc3RhbXAsIHRpbWVzdGFtcCk7XFxuICAgIH1cXG4gICAgdXBkYXRlQ29tYmF0YW50KGlkLCBjKSB7XFxuICAgICAgICBpZCA9IGlkLnRvVXBwZXJDYXNlKCk7XFxuICAgICAgICBpZiAoaWQgJiYgaWQubGVuZ3RoKSB7XFxuICAgICAgICAgICAgbGV0IGNvbWJhdGFudCA9IHRoaXMuQ29tYmF0YW50c1tpZF07XFxuICAgICAgICAgICAgaWYgKGNvbWJhdGFudCA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAgICAgICAgIGNvbWJhdGFudCA9IHtcXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGMubmFtZSxcXG4gICAgICAgICAgICAgICAgICAgIGpvYjogYy5qb2IsXFxuICAgICAgICAgICAgICAgICAgICBzcGF3bjogYy5zcGF3bixcXG4gICAgICAgICAgICAgICAgICAgIGRlc3Bhd246IGMuZGVzcGF3bixcXG4gICAgICAgICAgICAgICAgfTtcXG4gICAgICAgICAgICAgICAgdGhpcy5Db21iYXRhbnRzW2lkXSA9IGNvbWJhdGFudDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICAgIGNvbWJhdGFudC5uYW1lID0gYy5uYW1lIHx8IGNvbWJhdGFudC5uYW1lO1xcbiAgICAgICAgICAgICAgICBjb21iYXRhbnQuam9iID0gYy5qb2IgfHwgY29tYmF0YW50LmpvYjtcXG4gICAgICAgICAgICAgICAgY29tYmF0YW50LnNwYXduID0gTWF0aC5taW4oY29tYmF0YW50LnNwYXduLCBjLnNwYXduKTtcXG4gICAgICAgICAgICAgICAgY29tYmF0YW50LmRlc3Bhd24gPSBNYXRoLm1heChjb21iYXRhbnQuZGVzcGF3biwgYy5kZXNwYXduKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgcmVzb2x2ZU5hbWUoaWQsIG5hbWUsIGZhbGxiYWNrSWQgPSBudWxsLCBmYWxsYmFja05hbWUgPSBudWxsKSB7XFxuICAgICAgICB2YXIgX2EsIF9iO1xcbiAgICAgICAgbGV0IHJldCA9IG5hbWU7XFxuICAgICAgICBpZiAoZmFsbGJhY2tJZCAhPT0gbnVsbCkge1xcbiAgICAgICAgICAgIGlmIChpZCA9PT0gJ0UwMDAwMDAwJyAmJiByZXQgPT09ICcnKSB7XFxuICAgICAgICAgICAgICAgIGlmIChmYWxsYmFja0lkLnN0YXJ0c1dpdGgoJzQnKSlcXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IGZhbGxiYWNrTmFtZSAhPT0gbnVsbCAmJiBmYWxsYmFja05hbWUgIT09IHZvaWQgMCA/IGZhbGxiYWNrTmFtZSA6ICcnO1xcbiAgICAgICAgICAgICAgICBlbHNlXFxuICAgICAgICAgICAgICAgICAgICByZXQgPSAnVW5rbm93bic7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKHJldCA9PT0gJycpXFxuICAgICAgICAgICAgcmV0ID0gKF9iID0gKF9hID0gdGhpcy5Db21iYXRhbnRzW2lkXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5hbWUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnO1xcbiAgICAgICAgcmV0dXJuIHJldDtcXG4gICAgfVxcbn1cXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi91aS9yYWlkYm9zcy9lbXVsYXRvci9FdmVudEJ1cy50c1xcbi8qKlxcbiAqIFRoaXMgaXMgYSBiYXNlIGNsYXNzIHRoYXQgY2xhc3NlcyBjYW4gZXh0ZW5kIHRvIGluaGVyaXQgZXZlbnQgYnVzIGNhcGFiaWxpdGllcy5cXG4gKiBUaGlzIGFsbG93cyBvdGhlciBjbGFzc2VzIHRvIGxpc3RlbiBmb3IgZXZlbnRzIHdpdGggdGhlIGBvbmAgZnVuY3Rpb24uXFxuICogVGhlIGluaGVyaXRpbmcgY2xhc3MgY2FuIGZpcmUgdGhvc2UgZXZlbnRzIHdpdGggdGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24uXFxuICovXFxuY2xhc3MgRXZlbnRCdXMge1xcbiAgICBjb25zdHJ1Y3RvcigpIHtcXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge307XFxuICAgIH1cXG4gICAgLyoqXFxuICAgICAqIFN1YnNjcmliZSB0byBhbiBldmVudFxcbiAgICAgKlxcbiAgICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50KHMpIHRvIHN1YnNjcmliZSB0bywgc3BhY2Ugc2VwYXJhdGVkXFxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gaW52b2tlXFxuICAgICAqIEBwYXJhbSBzY29wZSBPcHRpb25hbC4gVGhlIHNjb3BlIHRvIGFwcGx5IHRoZSBmdW5jdGlvbiBhZ2FpbnN0XFxuICAgICAqIEByZXR1cm5zIFRoZSBjYWxsYmFja3MgcmVnaXN0ZXJlZCB0byB0aGUgZXZlbnQocylcXG4gICAgICovXFxuICAgIG9uKGV2ZW50LCBjYWxsYmFjaywgc2NvcGUpIHtcXG4gICAgICAgIHZhciBfYSwgX2I7XFxuICAgICAgICB2YXIgX2M7XFxuICAgICAgICBjb25zdCBldmVudHMgPSBldmVudC5zcGxpdCgnICcpO1xcbiAgICAgICAgY29uc3QgcmV0ID0gW107XFxuICAgICAgICBzY29wZSA9IHNjb3BlICE9PSBudWxsICYmIHNjb3BlICE9PSB2b2lkIDAgPyBzY29wZSA6ICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IHt9IDogd2luZG93KTtcXG4gICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XFxuICAgICAgICAgICAgY29uc3QgZXZlbnRzID0gKF9hID0gKF9jID0gdGhpcy5saXN0ZW5lcnMpW2V2ZW50XSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKF9jW2V2ZW50XSA9IFtdKTtcXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZClcXG4gICAgICAgICAgICAgICAgZXZlbnRzLnB1c2goeyBldmVudDogZXZlbnQsIHNjb3BlOiBzY29wZSwgY2FsbGJhY2s6IGNhbGxiYWNrIH0pO1xcbiAgICAgICAgICAgIHJldC5wdXNoKC4uLigoX2IgPSB0aGlzLmxpc3RlbmVyc1tldmVudF0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdKSk7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gcmV0O1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBEaXNwYXRjaCBhbiBldmVudCB0byBhbnkgc3Vic2NyaWJlcnNcXG4gICAgICpcXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBkaXNwYXRjaFxcbiAgICAgKiBAcGFyYW0gZXZlbnRBcmd1bWVudHMgVGhlIGV2ZW50IGFyZ3VtZW50cyB0byBwYXNzIHRvIGxpc3RlbmVyc1xcbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCBjYW4gYmUgYXdhaXQnZCBvciBpZ25vcmVkXFxuICAgICAqL1xcbiAgICBhc3luYyBkaXNwYXRjaChldmVudCwgLi4uZXZlbnRBcmd1bWVudHMpIHtcXG4gICAgICAgIHZhciBfYTtcXG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1tldmVudF0gPT09IHVuZGVmaW5lZClcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICBmb3IgKGNvbnN0IGwgb2YgKF9hID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkge1xcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGwuY2FsbGJhY2suYXBwbHkobC5zY29wZSwgZXZlbnRBcmd1bWVudHMpO1xcbiAgICAgICAgICAgIGF3YWl0IFByb21pc2UucmVzb2x2ZShyZXMpO1xcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvbmV0d29ya19sb2dfY29udmVydGVyL0xpbmVFdmVudDB4MDAudHNcXG5cXG5jb25zdCBMaW5lRXZlbnQweDAwX2ZpZWxkcyA9IHtcXG4gICAgdHlwZTogMixcXG4gICAgc3BlYWtlcjogMyxcXG59O1xcbi8vIENoYXQgZXZlbnRcXG5jbGFzcyBMaW5lRXZlbnQweDAwIGV4dGVuZHMgTGluZUV2ZW50IHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbGluZSwgcGFydHMpIHtcXG4gICAgICAgIHZhciBfYSwgX2I7XFxuICAgICAgICBzdXBlcihyZXBvLCBsaW5lLCBwYXJ0cyk7XFxuICAgICAgICB0aGlzLnR5cGUgPSAoX2EgPSBwYXJ0c1tMaW5lRXZlbnQweDAwX2ZpZWxkcy50eXBlXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XFxuICAgICAgICB0aGlzLnNwZWFrZXIgPSAoX2IgPSBwYXJ0c1tMaW5lRXZlbnQweDAwX2ZpZWxkcy5zcGVha2VyXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XFxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBwYXJ0cy5zbGljZSg0LCAtMSkuam9pbignfCcpO1xcbiAgICAgICAgLy8gVGhlIGV4YWN0IHJlYXNvbiBmb3IgdGhpcyBjaGVjayBpc24ndCBjbGVhciBhbnltb3JlIGJ1dCBtYXkgYmUgcmVsYXRlZCB0b1xcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JhdmFobi9GRlhJVl9BQ1RfUGx1Z2luL2lzc3Vlcy8yNTBcXG4gICAgICAgIGlmICh0aGlzLm1lc3NhZ2Uuc3BsaXQoJ1xcXFx1MDAxZlxcXFx1MDAxZicpLmxlbmd0aCA+IDEpXFxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkID0gdHJ1ZTtcXG4gICAgICAgIHRoaXMuY29udmVydGVkTGluZSA9XFxuICAgICAgICAgICAgdGhpcy5wcmVmaXgoKSArIHRoaXMudHlwZSArICc6JyArXFxuICAgICAgICAgICAgICAgIC8vIElmIHNwZWFrZXIgaXMgYmxhbmssIGl0J3MgZXhjbHVkZWQgZnJvbSB0aGUgY29udmVydGVkIGxpbmVcXG4gICAgICAgICAgICAgICAgKHRoaXMuc3BlYWtlciAhPT0gJycgPyB0aGlzLnNwZWFrZXIgKyAnOicgOiAnJykgK1xcbiAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UudHJpbSgpO1xcbiAgICAgICAgdGhpcy5jb252ZXJ0ZWRMaW5lID0gTGluZUV2ZW50MDAucmVwbGFjZUNoYXRTeW1ib2xzKHRoaXMuY29udmVydGVkTGluZSk7XFxuICAgIH1cXG4gICAgc3RhdGljIHJlcGxhY2VDaGF0U3ltYm9scyhsaW5lKSB7XFxuICAgICAgICBmb3IgKGNvbnN0IHJlcCBvZiBMaW5lRXZlbnQwMC5jaGF0U3ltYm9sUmVwbGFjZW1lbnRzKVxcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UocmVwLlNlYXJjaCwgcmVwLlJlcGxhY2UpO1xcbiAgICAgICAgcmV0dXJuIGxpbmU7XFxuICAgIH1cXG59XFxuTGluZUV2ZW50MHgwMC5jaGF0U3ltYm9sUmVwbGFjZW1lbnRzID0gW1xcbiAgICB7XFxuICAgICAgICBTZWFyY2g6IC86XFxcXHVFMDZGL2csXFxuICAgICAgICBSZXBsYWNlOiAnOuKHkicsXFxuICAgICAgICBUeXBlOiAnU3ltYm9sJyxcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgU2VhcmNoOiAvIFxcXFx1RTBCQlxcXFx1RTA1Qy9nLFxcbiAgICAgICAgUmVwbGFjZTogJyAnLFxcbiAgICAgICAgVHlwZTogJ1Bvc2l0aXZlIEVmZmVjdCcsXFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFNlYXJjaDogLyBcXFxcdUUwQkJcXFxcdUUwNUIvZyxcXG4gICAgICAgIFJlcGxhY2U6ICcgJyxcXG4gICAgICAgIFR5cGU6ICdOZWdhdGl2ZSBFZmZlY3QnLFxcbiAgICB9LFxcbl07XFxuY2xhc3MgTGluZUV2ZW50MDAgZXh0ZW5kcyBMaW5lRXZlbnQweDAwIHtcXG59XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9uZXR3b3JrX2xvZ19jb252ZXJ0ZXIvTGluZUV2ZW50MHgwMS50c1xcblxcblxcbmNvbnN0IExpbmVFdmVudDB4MDFfZmllbGRzID0ge1xcbiAgICB6b25lSWQ6IDIsXFxuICAgIHpvbmVOYW1lOiAzLFxcbn07XFxuLy8gWm9uZSBjaGFuZ2UgZXZlbnRcXG5jbGFzcyBMaW5lRXZlbnQweDAxIGV4dGVuZHMgTGluZUV2ZW50IHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbmV0d29ya0xpbmUsIHBhcnRzKSB7XFxuICAgICAgICB2YXIgX2EsIF9iO1xcbiAgICAgICAgc3VwZXIocmVwbywgbmV0d29ya0xpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMuem9uZUlkID0gKF9hID0gcGFydHNbTGluZUV2ZW50MHgwMV9maWVsZHMuem9uZUlkXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XFxuICAgICAgICB0aGlzLnpvbmVOYW1lID0gKF9iID0gcGFydHNbTGluZUV2ZW50MHgwMV9maWVsZHMuem9uZU5hbWVdKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJztcXG4gICAgICAgIHRoaXMuem9uZU5hbWVQcm9wZXJDYXNlID0gRW11bGF0b3JDb21tb24ucHJvcGVyQ2FzZSh0aGlzLnpvbmVOYW1lKTtcXG4gICAgICAgIHRoaXMuY29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgK1xcbiAgICAgICAgICAgICdDaGFuZ2VkIFpvbmUgdG8gJyArIHRoaXMuem9uZU5hbWUgKyAnLic7XFxuICAgICAgICB0aGlzLnByb3BlckNhc2VDb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArXFxuICAgICAgICAgICAgJ0NoYW5nZWQgWm9uZSB0byAnICsgdGhpcy56b25lTmFtZVByb3BlckNhc2UgKyAnLic7XFxuICAgIH1cXG59XFxuY2xhc3MgTGluZUV2ZW50MDEgZXh0ZW5kcyBMaW5lRXZlbnQweDAxIHtcXG59XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9uZXR3b3JrX2xvZ19jb252ZXJ0ZXIvTGluZUV2ZW50MHgwMi50c1xcblxcbmNvbnN0IExpbmVFdmVudDB4MDJfZmllbGRzID0ge1xcbiAgICBpZDogMixcXG4gICAgbmFtZTogMyxcXG59O1xcbi8vIFBsYXllciBjaGFuZ2UgZXZlbnRcXG5jbGFzcyBMaW5lRXZlbnQweDAyIGV4dGVuZHMgTGluZUV2ZW50IHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbGluZSwgcGFydHMpIHtcXG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xcbiAgICAgICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgdGhpcy5pZCA9IChfYiA9IChfYSA9IHBhcnRzW0xpbmVFdmVudDB4MDJfZmllbGRzLmlkXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnO1xcbiAgICAgICAgdGhpcy5uYW1lID0gKF9jID0gcGFydHNbTGluZUV2ZW50MHgwMl9maWVsZHMubmFtZV0pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnO1xcbiAgICAgICAgdGhpcy5jb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArICdDaGFuZ2VkIHByaW1hcnkgcGxheWVyIHRvICcgKyB0aGlzLm5hbWUgKyAnLic7XFxuICAgIH1cXG59XFxuY2xhc3MgTGluZUV2ZW50MDIgZXh0ZW5kcyBMaW5lRXZlbnQweDAyIHtcXG59XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcmVzb3VyY2VzL3V0aWwudHNcXG4vLyBUT0RPOiBpdCdkIGJlIG5pY2UgdG8gbm90IHJlcGVhdCBqb2IgbmFtZXMsIGJ1dCBhdCBsZWFzdCBSZWNvcmQgZW5mb3JjZXMgdGhhdCBhbGwgYXJlIHNldC5cXG5jb25zdCBuYW1lVG9Kb2JFbnVtID0ge1xcbiAgICBOT05FOiAwLFxcbiAgICBHTEE6IDEsXFxuICAgIFBHTDogMixcXG4gICAgTVJEOiAzLFxcbiAgICBMTkM6IDQsXFxuICAgIEFSQzogNSxcXG4gICAgQ05KOiA2LFxcbiAgICBUSE06IDcsXFxuICAgIENSUDogOCxcXG4gICAgQlNNOiA5LFxcbiAgICBBUk06IDEwLFxcbiAgICBHU006IDExLFxcbiAgICBMVFc6IDEyLFxcbiAgICBXVlI6IDEzLFxcbiAgICBBTEM6IDE0LFxcbiAgICBDVUw6IDE1LFxcbiAgICBNSU46IDE2LFxcbiAgICBCVE46IDE3LFxcbiAgICBGU0g6IDE4LFxcbiAgICBQTEQ6IDE5LFxcbiAgICBNTks6IDIwLFxcbiAgICBXQVI6IDIxLFxcbiAgICBEUkc6IDIyLFxcbiAgICBCUkQ6IDIzLFxcbiAgICBXSE06IDI0LFxcbiAgICBCTE06IDI1LFxcbiAgICBBQ046IDI2LFxcbiAgICBTTU46IDI3LFxcbiAgICBTQ0g6IDI4LFxcbiAgICBST0c6IDI5LFxcbiAgICBOSU46IDMwLFxcbiAgICBNQ0g6IDMxLFxcbiAgICBEUks6IDMyLFxcbiAgICBBU1Q6IDMzLFxcbiAgICBTQU06IDM0LFxcbiAgICBSRE06IDM1LFxcbiAgICBCTFU6IDM2LFxcbiAgICBHTkI6IDM3LFxcbiAgICBETkM6IDM4LFxcbn07XFxuY29uc3QgYWxsSm9icyA9IE9iamVjdC5rZXlzKG5hbWVUb0pvYkVudW0pO1xcbmNvbnN0IGFsbFJvbGVzID0gWyd0YW5rJywgJ2hlYWxlcicsICdkcHMnLCAnY3JhZnRlcicsICdnYXRoZXJlcicsICdub25lJ107XFxuY29uc3QgdGFua0pvYnMgPSBbJ0dMQScsICdQTEQnLCAnTVJEJywgJ1dBUicsICdEUksnLCAnR05CJ107XFxuY29uc3QgaGVhbGVySm9icyA9IFsnQ05KJywgJ1dITScsICdTQ0gnLCAnQVNUJ107XFxuY29uc3QgbWVsZWVEcHNKb2JzID0gWydQR0wnLCAnTU5LJywgJ0xOQycsICdEUkcnLCAnUk9HJywgJ05JTicsICdTQU0nXTtcXG5jb25zdCByYW5nZWREcHNKb2JzID0gWydBUkMnLCAnQlJEJywgJ0ROQycsICdNQ0gnXTtcXG5jb25zdCBjYXN0ZXJEcHNKb2JzID0gWydCTFUnLCAnUkRNJywgJ0JMTScsICdTTU4nLCAnQUNOJywgJ1RITSddO1xcbmNvbnN0IGRwc0pvYnMgPSBbLi4ubWVsZWVEcHNKb2JzLCAuLi5yYW5nZWREcHNKb2JzLCAuLi5jYXN0ZXJEcHNKb2JzXTtcXG5jb25zdCBjcmFmdGluZ0pvYnMgPSBbJ0NSUCcsICdCU00nLCAnQVJNJywgJ0dTTScsICdMVFcnLCAnV1ZSJywgJ0FMQycsICdDVUwnXTtcXG5jb25zdCBnYXRoZXJpbmdKb2JzID0gWydNSU4nLCAnQlROJywgJ0ZTSCddO1xcbmNvbnN0IHN0dW5Kb2JzID0gWydCTFUnLCAuLi50YW5rSm9icywgLi4ubWVsZWVEcHNKb2JzXTtcXG5jb25zdCBzaWxlbmNlSm9icyA9IFsnQkxVJywgLi4udGFua0pvYnMsIC4uLnJhbmdlZERwc0pvYnNdO1xcbmNvbnN0IHNsZWVwSm9icyA9IFsnQkxNJywgJ0JMVScsIC4uLmhlYWxlckpvYnNdO1xcbmNvbnN0IGZlaW50Sm9icyA9IFsuLi5tZWxlZURwc0pvYnNdO1xcbmNvbnN0IGFkZGxlSm9icyA9IFsuLi5jYXN0ZXJEcHNKb2JzXTtcXG5jb25zdCBjbGVhbnNlSm9icyA9IFsnQkxVJywgJ0JSRCcsIC4uLmhlYWxlckpvYnNdO1xcbmNvbnN0IGpvYlRvUm9sZU1hcCA9ICgoKSA9PiB7XFxuICAgIGNvbnN0IGFkZFRvTWFwID0gKG1hcCwgam9icywgcm9sZSkgPT4ge1xcbiAgICAgICAgam9icy5mb3JFYWNoKChqb2IpID0+IG1hcC5zZXQoam9iLCByb2xlKSk7XFxuICAgIH07XFxuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoW1snTk9ORScsICdub25lJ11dKTtcXG4gICAgYWRkVG9NYXAobWFwLCB0YW5rSm9icywgJ3RhbmsnKTtcXG4gICAgYWRkVG9NYXAobWFwLCBoZWFsZXJKb2JzLCAnaGVhbGVyJyk7XFxuICAgIGFkZFRvTWFwKG1hcCwgZHBzSm9icywgJ2RwcycpO1xcbiAgICBhZGRUb01hcChtYXAsIGNyYWZ0aW5nSm9icywgJ2NyYWZ0ZXInKTtcXG4gICAgYWRkVG9NYXAobWFwLCBnYXRoZXJpbmdKb2JzLCAnZ2F0aGVyZXInKTtcXG4gICAgcmV0dXJuIG1hcDtcXG59KSgpO1xcbmNvbnN0IFV0aWwgPSB7XFxuICAgIGpvYkVudW1Ub0pvYjogKGlkKSA9PiB7XFxuICAgICAgICBjb25zdCBqb2IgPSBhbGxKb2JzLmZpbmQoKGpvYikgPT4gbmFtZVRvSm9iRW51bVtqb2JdID09PSBpZCk7XFxuICAgICAgICByZXR1cm4gam9iICE9PSBudWxsICYmIGpvYiAhPT0gdm9pZCAwID8gam9iIDogJ05PTkUnO1xcbiAgICB9LFxcbiAgICBqb2JUb0pvYkVudW06IChqb2IpID0+IG5hbWVUb0pvYkVudW1bam9iXSxcXG4gICAgam9iVG9Sb2xlOiAoam9iKSA9PiB7XFxuICAgICAgICBjb25zdCByb2xlID0gam9iVG9Sb2xlTWFwLmdldChqb2IpO1xcbiAgICAgICAgcmV0dXJuIHJvbGUgIT09IG51bGwgJiYgcm9sZSAhPT0gdm9pZCAwID8gcm9sZSA6ICdub25lJztcXG4gICAgfSxcXG4gICAgZ2V0QWxsUm9sZXM6ICgpID0+IGFsbFJvbGVzLFxcbiAgICBpc1RhbmtKb2I6IChqb2IpID0+IHRhbmtKb2JzLmluY2x1ZGVzKGpvYiksXFxuICAgIGlzSGVhbGVySm9iOiAoam9iKSA9PiBoZWFsZXJKb2JzLmluY2x1ZGVzKGpvYiksXFxuICAgIGlzTWVsZWVEcHNKb2I6IChqb2IpID0+IG1lbGVlRHBzSm9icy5pbmNsdWRlcyhqb2IpLFxcbiAgICBpc1JhbmdlZERwc0pvYjogKGpvYikgPT4gcmFuZ2VkRHBzSm9icy5pbmNsdWRlcyhqb2IpLFxcbiAgICBpc0Nhc3RlckRwc0pvYjogKGpvYikgPT4gY2FzdGVyRHBzSm9icy5pbmNsdWRlcyhqb2IpLFxcbiAgICBpc0Rwc0pvYjogKGpvYikgPT4gZHBzSm9icy5pbmNsdWRlcyhqb2IpLFxcbiAgICBpc0NyYWZ0aW5nSm9iOiAoam9iKSA9PiBjcmFmdGluZ0pvYnMuaW5jbHVkZXMoam9iKSxcXG4gICAgaXNHYXRoZXJpbmdKb2I6IChqb2IpID0+IGdhdGhlcmluZ0pvYnMuaW5jbHVkZXMoam9iKSxcXG4gICAgaXNDb21iYXRKb2I6IChqb2IpID0+IHtcXG4gICAgICAgIHJldHVybiAhY3JhZnRpbmdKb2JzLmluY2x1ZGVzKGpvYikgJiYgIWdhdGhlcmluZ0pvYnMuaW5jbHVkZXMoam9iKTtcXG4gICAgfSxcXG4gICAgY2FuU3R1bjogKGpvYikgPT4gc3R1bkpvYnMuaW5jbHVkZXMoam9iKSxcXG4gICAgY2FuU2lsZW5jZTogKGpvYikgPT4gc2lsZW5jZUpvYnMuaW5jbHVkZXMoam9iKSxcXG4gICAgY2FuU2xlZXA6IChqb2IpID0+IHNsZWVwSm9icy5pbmNsdWRlcyhqb2IpLFxcbiAgICBjYW5DbGVhbnNlOiAoam9iKSA9PiBjbGVhbnNlSm9icy5pbmNsdWRlcyhqb2IpLFxcbiAgICBjYW5GZWludDogKGpvYikgPT4gZmVpbnRKb2JzLmluY2x1ZGVzKGpvYiksXFxuICAgIGNhbkFkZGxlOiAoam9iKSA9PiBhZGRsZUpvYnMuaW5jbHVkZXMoam9iKSxcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgdXRpbCA9IChVdGlsKTtcXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDAzLnRzXFxuXFxuXFxuXFxuY29uc3QgTGluZUV2ZW50MHgwM19maWVsZHMgPSB7XFxuICAgIGlkOiAyLFxcbiAgICBuYW1lOiAzLFxcbiAgICBqb2JJZEhleDogNCxcXG4gICAgbGV2ZWxTdHJpbmc6IDUsXFxuICAgIG93bmVySWQ6IDYsXFxuICAgIHdvcmxkSWQ6IDcsXFxuICAgIHdvcmxkTmFtZTogOCxcXG4gICAgbnBjTmFtZUlkOiA5LFxcbiAgICBucGNCYXNlSWQ6IDEwLFxcbiAgICBjdXJyZW50SHA6IDExLFxcbiAgICBtYXhIcFN0cmluZzogMTQsXFxuICAgIGN1cnJlbnRNcDogMTMsXFxuICAgIG1heE1wU3RyaW5nOiAxNCxcXG4gICAgY3VycmVudFRwOiAxNSxcXG4gICAgbWF4VHA6IDE2LFxcbiAgICB4U3RyaW5nOiAxNyxcXG4gICAgeVN0cmluZzogMTgsXFxuICAgIHpTdHJpbmc6IDE5LFxcbiAgICBoZWFkaW5nOiAyMCxcXG59O1xcbi8vIEFkZGVkIGNvbWJhdGFudCBldmVudFxcbmNsYXNzIExpbmVFdmVudDB4MDMgZXh0ZW5kcyBMaW5lRXZlbnQge1xcbiAgICBjb25zdHJ1Y3RvcihyZXBvLCBsaW5lLCBwYXJ0cykge1xcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rLCBfbCwgX20sIF9vLCBfcCwgX3EsIF9yLCBfcywgX3QsIF91LCBfdiwgX3csIF94O1xcbiAgICAgICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgdGhpcy5pc1NvdXJjZSA9IHRydWU7XFxuICAgICAgICB0aGlzLmlzSm9iTGV2ZWwgPSB0cnVlO1xcbiAgICAgICAgdGhpcy5pZCA9IChfYiA9IChfYSA9IHBhcnRzW0xpbmVFdmVudDB4MDNfZmllbGRzLmlkXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnO1xcbiAgICAgICAgdGhpcy5uYW1lID0gKF9jID0gcGFydHNbTGluZUV2ZW50MHgwM19maWVsZHMubmFtZV0pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnO1xcbiAgICAgICAgdGhpcy5qb2JJZEhleCA9IChfZSA9IChfZCA9IHBhcnRzW0xpbmVFdmVudDB4MDNfZmllbGRzLmpvYklkSGV4XSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6ICcnO1xcbiAgICAgICAgdGhpcy5qb2JJZCA9IHBhcnNlSW50KHRoaXMuam9iSWRIZXgsIDE2KTtcXG4gICAgICAgIHRoaXMuam9iID0gdXRpbC5qb2JFbnVtVG9Kb2IodGhpcy5qb2JJZCk7XFxuICAgICAgICB0aGlzLmxldmVsU3RyaW5nID0gKF9mID0gcGFydHNbTGluZUV2ZW50MHgwM19maWVsZHMubGV2ZWxTdHJpbmddKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAnJztcXG4gICAgICAgIHRoaXMubGV2ZWwgPSBwYXJzZUZsb2F0KHRoaXMubGV2ZWxTdHJpbmcpO1xcbiAgICAgICAgdGhpcy5vd25lcklkID0gKF9oID0gKF9nID0gcGFydHNbTGluZUV2ZW50MHgwM19maWVsZHMub3duZXJJZF0pID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy50b1VwcGVyQ2FzZSgpKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiAnJztcXG4gICAgICAgIHRoaXMud29ybGRJZCA9IChfaiA9IHBhcnRzW0xpbmVFdmVudDB4MDNfZmllbGRzLndvcmxkSWRdKSAhPT0gbnVsbCAmJiBfaiAhPT0gdm9pZCAwID8gX2ogOiAnJztcXG4gICAgICAgIHRoaXMud29ybGROYW1lID0gKF9rID0gcGFydHNbTGluZUV2ZW50MHgwM19maWVsZHMud29ybGROYW1lXSkgIT09IG51bGwgJiYgX2sgIT09IHZvaWQgMCA/IF9rIDogJyc7XFxuICAgICAgICB0aGlzLm5wY05hbWVJZCA9IChfbCA9IHBhcnRzW0xpbmVFdmVudDB4MDNfZmllbGRzLm5wY05hbWVJZF0pICE9PSBudWxsICYmIF9sICE9PSB2b2lkIDAgPyBfbCA6ICcnO1xcbiAgICAgICAgdGhpcy5ucGNCYXNlSWQgPSAoX20gPSBwYXJ0c1tMaW5lRXZlbnQweDAzX2ZpZWxkcy5ucGNCYXNlSWRdKSAhPT0gbnVsbCAmJiBfbSAhPT0gdm9pZCAwID8gX20gOiAnJztcXG4gICAgICAgIHRoaXMuaHAgPSBwYXJzZUZsb2F0KChfbyA9IHBhcnRzW0xpbmVFdmVudDB4MDNfZmllbGRzLmN1cnJlbnRIcF0pICE9PSBudWxsICYmIF9vICE9PSB2b2lkIDAgPyBfbyA6ICcnKTtcXG4gICAgICAgIHRoaXMubWF4SHBTdHJpbmcgPSAoX3AgPSBwYXJ0c1tMaW5lRXZlbnQweDAzX2ZpZWxkcy5tYXhIcFN0cmluZ10pICE9PSBudWxsICYmIF9wICE9PSB2b2lkIDAgPyBfcCA6ICcnO1xcbiAgICAgICAgdGhpcy5tYXhIcCA9IHBhcnNlRmxvYXQodGhpcy5tYXhIcFN0cmluZyk7XFxuICAgICAgICB0aGlzLm1wID0gcGFyc2VGbG9hdCgoX3EgPSBwYXJ0c1tMaW5lRXZlbnQweDAzX2ZpZWxkcy5jdXJyZW50TXBdKSAhPT0gbnVsbCAmJiBfcSAhPT0gdm9pZCAwID8gX3EgOiAnJyk7XFxuICAgICAgICB0aGlzLm1heE1wU3RyaW5nID0gKF9yID0gcGFydHNbTGluZUV2ZW50MHgwM19maWVsZHMubWF4TXBTdHJpbmddKSAhPT0gbnVsbCAmJiBfciAhPT0gdm9pZCAwID8gX3IgOiAnJztcXG4gICAgICAgIHRoaXMubWF4TXAgPSBwYXJzZUZsb2F0KHRoaXMubWF4TXBTdHJpbmcpO1xcbiAgICAgICAgdGhpcy50cCA9IHBhcnNlRmxvYXQoKF9zID0gcGFydHNbTGluZUV2ZW50MHgwM19maWVsZHMuY3VycmVudFRwXSkgIT09IG51bGwgJiYgX3MgIT09IHZvaWQgMCA/IF9zIDogJycpO1xcbiAgICAgICAgdGhpcy5tYXhUcCA9IHBhcnNlRmxvYXQoKF90ID0gcGFydHNbTGluZUV2ZW50MHgwM19maWVsZHMubWF4VHBdKSAhPT0gbnVsbCAmJiBfdCAhPT0gdm9pZCAwID8gX3QgOiAnJyk7XFxuICAgICAgICB0aGlzLnhTdHJpbmcgPSAoX3UgPSBwYXJ0c1tMaW5lRXZlbnQweDAzX2ZpZWxkcy54U3RyaW5nXSkgIT09IG51bGwgJiYgX3UgIT09IHZvaWQgMCA/IF91IDogJyc7XFxuICAgICAgICB0aGlzLnggPSBwYXJzZUZsb2F0KHRoaXMueFN0cmluZyk7XFxuICAgICAgICB0aGlzLnlTdHJpbmcgPSAoX3YgPSBwYXJ0c1tMaW5lRXZlbnQweDAzX2ZpZWxkcy55U3RyaW5nXSkgIT09IG51bGwgJiYgX3YgIT09IHZvaWQgMCA/IF92IDogJyc7XFxuICAgICAgICB0aGlzLnkgPSBwYXJzZUZsb2F0KHRoaXMueVN0cmluZyk7XFxuICAgICAgICB0aGlzLnpTdHJpbmcgPSAoX3cgPSBwYXJ0c1tMaW5lRXZlbnQweDAzX2ZpZWxkcy56U3RyaW5nXSkgIT09IG51bGwgJiYgX3cgIT09IHZvaWQgMCA/IF93IDogJyc7XFxuICAgICAgICB0aGlzLnogPSBwYXJzZUZsb2F0KHRoaXMuelN0cmluZyk7XFxuICAgICAgICB0aGlzLmhlYWRpbmcgPSBwYXJzZUZsb2F0KChfeCA9IHBhcnRzW0xpbmVFdmVudDB4MDNfZmllbGRzLmhlYWRpbmddKSAhPT0gbnVsbCAmJiBfeCAhPT0gdm9pZCAwID8gX3ggOiAnJyk7XFxuICAgICAgICByZXBvLnVwZGF0ZUNvbWJhdGFudCh0aGlzLmlkLCB7XFxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxcbiAgICAgICAgICAgIHNwYXduOiB0aGlzLnRpbWVzdGFtcCxcXG4gICAgICAgICAgICBkZXNwYXduOiB0aGlzLnRpbWVzdGFtcCxcXG4gICAgICAgICAgICBqb2I6IHRoaXMuam9iSWRIZXgsXFxuICAgICAgICB9KTtcXG4gICAgICAgIGxldCBjb21iYXRhbnROYW1lID0gdGhpcy5uYW1lO1xcbiAgICAgICAgaWYgKHRoaXMud29ybGROYW1lICE9PSAnJylcXG4gICAgICAgICAgICBjb21iYXRhbnROYW1lID0gY29tYmF0YW50TmFtZSArICcoJyArIHRoaXMud29ybGROYW1lICsgJyknO1xcbiAgICAgICAgdGhpcy5jb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArIHRoaXMuaWQudG9VcHBlckNhc2UoKSArXFxuICAgICAgICAgICAgJzpBZGRlZCBuZXcgY29tYmF0YW50ICcgKyBjb21iYXRhbnROYW1lICtcXG4gICAgICAgICAgICAnLiAgSm9iOiAnICsgdGhpcy5qb2IgK1xcbiAgICAgICAgICAgICcgTGV2ZWw6ICcgKyB0aGlzLmxldmVsU3RyaW5nICtcXG4gICAgICAgICAgICAnIE1heCBIUDogJyArIHRoaXMubWF4SHBTdHJpbmcgK1xcbiAgICAgICAgICAgICcgTWF4IE1QOiAnICsgdGhpcy5tYXhNcFN0cmluZyArXFxuICAgICAgICAgICAgJyBQb3M6ICgnICsgdGhpcy54U3RyaW5nICsgJywnICsgdGhpcy55U3RyaW5nICsgJywnICsgdGhpcy56U3RyaW5nICsgJyknO1xcbiAgICAgICAgLy8gVGhpcyBsYXN0IHBhcnQgaXMgZ3Vlc3N3b3JrIGZvciB0aGUgYXJlYSBiZXR3ZWVuIDkgYW5kIDEwLlxcbiAgICAgICAgY29uc3QgdW5rbm93blZhbHVlID0gdGhpcy5ucGNOYW1lSWQgK1xcbiAgICAgICAgICAgIEVtdWxhdG9yQ29tbW9uLnplcm9QYWQodGhpcy5ucGNCYXNlSWQsIDggKyBNYXRoLm1heCgwLCA2IC0gdGhpcy5ucGNOYW1lSWQubGVuZ3RoKSk7XFxuICAgICAgICBpZiAodW5rbm93blZhbHVlICE9PSAnMDAwMDAwMDAwMDAwMDAnKVxcbiAgICAgICAgICAgIHRoaXMuY29udmVydGVkTGluZSArPSAnICgnICsgdW5rbm93blZhbHVlICsgJyknO1xcbiAgICAgICAgdGhpcy5jb252ZXJ0ZWRMaW5lICs9ICcuJztcXG4gICAgfVxcbn1cXG5jbGFzcyBMaW5lRXZlbnQwMyBleHRlbmRzIExpbmVFdmVudDB4MDMge1xcbn1cXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDA0LnRzXFxuXFxuLy8gUmVtb3ZlZCBjb21iYXRhbnQgZXZlbnRcXG4vLyBFeHRlbmQgdGhlIGFkZCBjb21iYXRhbnQgZXZlbnQgdG8gcmVkdWNlIGR1cGxpY2F0ZSBjb2RlIHNpbmNlIHRoZXkncmVcXG4vLyB0aGUgc2FtZSBmcm9tIGEgZGF0YSBwZXJzcGVjdGl2ZVxcbmNsYXNzIExpbmVFdmVudDB4MDQgZXh0ZW5kcyBMaW5lRXZlbnQweDAzIHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbGluZSwgcGFydHMpIHtcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMuY29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgKyB0aGlzLmlkLnRvVXBwZXJDYXNlKCkgK1xcbiAgICAgICAgICAgICc6UmVtb3ZpbmcgY29tYmF0YW50ICcgKyB0aGlzLm5hbWUgK1xcbiAgICAgICAgICAgICcuIE1heCBNUDogJyArIHRoaXMubWF4TXBTdHJpbmcgK1xcbiAgICAgICAgICAgICcuIFBvczogKCcgKyB0aGlzLnhTdHJpbmcgKyAnLCcgKyB0aGlzLnlTdHJpbmcgKyAnLCcgKyB0aGlzLnpTdHJpbmcgKyAnKSc7XFxuICAgIH1cXG59XFxuY2xhc3MgTGluZUV2ZW50MDQgZXh0ZW5kcyBMaW5lRXZlbnQweDA0IHtcXG59XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9uZXR3b3JrX2xvZ19jb252ZXJ0ZXIvTGluZUV2ZW50MHgwQy50c1xcblxcbmNvbnN0IExpbmVFdmVudDB4MENfZmllbGRzID0ge1xcbiAgICBjbGFzczogMixcXG4gICAgc3RyZW5ndGg6IDMsXFxuICAgIGRleHRlcml0eTogNCxcXG4gICAgdml0YWxpdHk6IDUsXFxuICAgIGludGVsbGlnZW5jZTogNixcXG4gICAgbWluZDogNyxcXG4gICAgcGlldHk6IDgsXFxuICAgIGF0dGFja1Bvd2VyOiA5LFxcbiAgICBkaXJlY3RIaXQ6IDEwLFxcbiAgICBjcml0aWNhbEhpdDogMTEsXFxuICAgIGF0dGFja01hZ2ljUG90ZW5jeTogMTIsXFxuICAgIGhlYWxNYWdpY1BvdGVuY3k6IDEzLFxcbiAgICBkZXRlcm1pbmF0aW9uOiAxNCxcXG4gICAgc2tpbGxTcGVlZDogMTUsXFxuICAgIHNwZWxsU3BlZWQ6IDE2LFxcbiAgICB0ZW5hY2l0eTogMTgsXFxufTtcXG4vLyBQbGF5ZXIgc3RhdHMgZXZlbnRcXG5jbGFzcyBMaW5lRXZlbnQweDBDIGV4dGVuZHMgTGluZUV2ZW50IHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbGluZSwgcGFydHMpIHtcXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tLCBfbywgX3AsIF9xLCBfcjtcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMuY2xhc3MgPSAoX2EgPSBwYXJ0c1tMaW5lRXZlbnQweDBDX2ZpZWxkcy5jbGFzc10pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xcbiAgICAgICAgdGhpcy5zdHJlbmd0aCA9IChfYiA9IHBhcnRzW0xpbmVFdmVudDB4MENfZmllbGRzLnN0cmVuZ3RoXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XFxuICAgICAgICB0aGlzLmRleHRlcml0eSA9IChfYyA9IHBhcnRzW0xpbmVFdmVudDB4MENfZmllbGRzLmRleHRlcml0eV0pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnO1xcbiAgICAgICAgdGhpcy52aXRhbGl0eSA9IChfZCA9IHBhcnRzW0xpbmVFdmVudDB4MENfZmllbGRzLnZpdGFsaXR5XSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogJyc7XFxuICAgICAgICB0aGlzLmludGVsbGlnZW5jZSA9IChfZSA9IHBhcnRzW0xpbmVFdmVudDB4MENfZmllbGRzLmludGVsbGlnZW5jZV0pICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6ICcnO1xcbiAgICAgICAgdGhpcy5taW5kID0gKF9mID0gcGFydHNbTGluZUV2ZW50MHgwQ19maWVsZHMubWluZF0pICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6ICcnO1xcbiAgICAgICAgdGhpcy5waWV0eSA9IChfZyA9IHBhcnRzW0xpbmVFdmVudDB4MENfZmllbGRzLnBpZXR5XSkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogJyc7XFxuICAgICAgICB0aGlzLmF0dGFja1Bvd2VyID0gKF9oID0gcGFydHNbTGluZUV2ZW50MHgwQ19maWVsZHMuYXR0YWNrUG93ZXJdKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiAnJztcXG4gICAgICAgIHRoaXMuZGlyZWN0SGl0ID0gKF9qID0gcGFydHNbTGluZUV2ZW50MHgwQ19maWVsZHMuZGlyZWN0SGl0XSkgIT09IG51bGwgJiYgX2ogIT09IHZvaWQgMCA/IF9qIDogJyc7XFxuICAgICAgICB0aGlzLmNyaXRpY2FsSGl0ID0gKF9rID0gcGFydHNbTGluZUV2ZW50MHgwQ19maWVsZHMuY3JpdGljYWxIaXRdKSAhPT0gbnVsbCAmJiBfayAhPT0gdm9pZCAwID8gX2sgOiAnJztcXG4gICAgICAgIHRoaXMuYXR0YWNrTWFnaWNQb3RlbmN5ID0gKF9sID0gcGFydHNbTGluZUV2ZW50MHgwQ19maWVsZHMuYXR0YWNrTWFnaWNQb3RlbmN5XSkgIT09IG51bGwgJiYgX2wgIT09IHZvaWQgMCA/IF9sIDogJyc7XFxuICAgICAgICB0aGlzLmhlYWxNYWdpY1BvdGVuY3kgPSAoX20gPSBwYXJ0c1tMaW5lRXZlbnQweDBDX2ZpZWxkcy5oZWFsTWFnaWNQb3RlbmN5XSkgIT09IG51bGwgJiYgX20gIT09IHZvaWQgMCA/IF9tIDogJyc7XFxuICAgICAgICB0aGlzLmRldGVybWluYXRpb24gPSAoX28gPSBwYXJ0c1tMaW5lRXZlbnQweDBDX2ZpZWxkcy5kZXRlcm1pbmF0aW9uXSkgIT09IG51bGwgJiYgX28gIT09IHZvaWQgMCA/IF9vIDogJyc7XFxuICAgICAgICB0aGlzLnNraWxsU3BlZWQgPSAoX3AgPSBwYXJ0c1tMaW5lRXZlbnQweDBDX2ZpZWxkcy5za2lsbFNwZWVkXSkgIT09IG51bGwgJiYgX3AgIT09IHZvaWQgMCA/IF9wIDogJyc7XFxuICAgICAgICB0aGlzLnNwZWxsU3BlZWQgPSAoX3EgPSBwYXJ0c1tMaW5lRXZlbnQweDBDX2ZpZWxkcy5zcGVsbFNwZWVkXSkgIT09IG51bGwgJiYgX3EgIT09IHZvaWQgMCA/IF9xIDogJyc7XFxuICAgICAgICB0aGlzLnRlbmFjaXR5ID0gKF9yID0gcGFydHNbTGluZUV2ZW50MHgwQ19maWVsZHMudGVuYWNpdHldKSAhPT0gbnVsbCAmJiBfciAhPT0gdm9pZCAwID8gX3IgOiAnJztcXG4gICAgICAgIHRoaXMuY29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgK1xcbiAgICAgICAgICAgICdQbGF5ZXIgU3RhdHM6ICcgKyBwYXJ0cy5zbGljZSgyLCBwYXJ0cy5sZW5ndGggLSAxKS5qb2luKCc6JykucmVwbGFjZSgvXFxcXHwvZywgJzonKTtcXG4gICAgfVxcbn1cXG5jbGFzcyBMaW5lRXZlbnQxMiBleHRlbmRzIExpbmVFdmVudDB4MEMge1xcbn1cXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDE0LnRzXFxuXFxuXFxuY29uc3QgTGluZUV2ZW50MHgxNF9maWVsZHMgPSB7XFxuICAgIGlkOiAyLFxcbiAgICBuYW1lOiAzLFxcbiAgICBhYmlsaXR5SWQ6IDQsXFxuICAgIGFiaWxpdHlOYW1lOiA1LFxcbiAgICB0YXJnZXRJZDogNixcXG4gICAgdGFyZ2V0TmFtZTogNyxcXG4gICAgZHVyYXRpb246IDgsXFxufTtcXG4vLyBBYmlsaXR5IHVzZSBldmVudFxcbmNsYXNzIExpbmVFdmVudDB4MTQgZXh0ZW5kcyBMaW5lRXZlbnQge1xcbiAgICBjb25zdHJ1Y3RvcihyZXBvLCBsaW5lLCBwYXJ0cykge1xcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rO1xcbiAgICAgICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgdGhpcy5pc1NvdXJjZSA9IHRydWU7XFxuICAgICAgICB0aGlzLmlzVGFyZ2V0ID0gdHJ1ZTtcXG4gICAgICAgIHRoaXMuaXNBYmlsaXR5ID0gdHJ1ZTtcXG4gICAgICAgIHRoaXMuaWQgPSAoX2IgPSAoX2EgPSBwYXJ0c1tMaW5lRXZlbnQweDE0X2ZpZWxkcy5pZF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b1VwcGVyQ2FzZSgpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJztcXG4gICAgICAgIHRoaXMubmFtZSA9IChfYyA9IHBhcnRzW0xpbmVFdmVudDB4MTRfZmllbGRzLm5hbWVdKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAnJztcXG4gICAgICAgIHRoaXMuYWJpbGl0eUlkSGV4ID0gKF9lID0gKF9kID0gcGFydHNbTGluZUV2ZW50MHgxNF9maWVsZHMuYWJpbGl0eUlkXSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6ICcnO1xcbiAgICAgICAgdGhpcy5hYmlsaXR5SWQgPSBwYXJzZUludCh0aGlzLmFiaWxpdHlJZEhleCk7XFxuICAgICAgICB0aGlzLmFiaWxpdHlOYW1lID0gKF9mID0gcGFydHNbTGluZUV2ZW50MHgxNF9maWVsZHMuYWJpbGl0eU5hbWVdKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAnJztcXG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSAoX2ggPSAoX2cgPSBwYXJ0c1tMaW5lRXZlbnQweDE0X2ZpZWxkcy50YXJnZXRJZF0pID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy50b1VwcGVyQ2FzZSgpKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiAnJztcXG4gICAgICAgIHRoaXMudGFyZ2V0TmFtZSA9IChfaiA9IHBhcnRzW0xpbmVFdmVudDB4MTRfZmllbGRzLnRhcmdldE5hbWVdKSAhPT0gbnVsbCAmJiBfaiAhPT0gdm9pZCAwID8gX2ogOiAnJztcXG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSAoX2sgPSBwYXJ0c1tMaW5lRXZlbnQweDE0X2ZpZWxkcy5kdXJhdGlvbl0pICE9PSBudWxsICYmIF9rICE9PSB2b2lkIDAgPyBfayA6ICcnO1xcbiAgICAgICAgcmVwby51cGRhdGVDb21iYXRhbnQodGhpcy5pZCwge1xcbiAgICAgICAgICAgIGpvYjogdW5kZWZpbmVkLFxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcXG4gICAgICAgICAgICBzcGF3bjogdGhpcy50aW1lc3RhbXAsXFxuICAgICAgICAgICAgZGVzcGF3bjogdGhpcy50aW1lc3RhbXAsXFxuICAgICAgICB9KTtcXG4gICAgICAgIHJlcG8udXBkYXRlQ29tYmF0YW50KHRoaXMudGFyZ2V0SWQsIHtcXG4gICAgICAgICAgICBqb2I6IHVuZGVmaW5lZCxcXG4gICAgICAgICAgICBuYW1lOiB0aGlzLnRhcmdldE5hbWUsXFxuICAgICAgICAgICAgc3Bhd246IHRoaXMudGltZXN0YW1wLFxcbiAgICAgICAgICAgIGRlc3Bhd246IHRoaXMudGltZXN0YW1wLFxcbiAgICAgICAgfSk7XFxuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnRhcmdldE5hbWUubGVuZ3RoID09PSAwID8gJ1Vua25vd24nIDogdGhpcy50YXJnZXROYW1lO1xcbiAgICAgICAgdGhpcy5jb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArIHRoaXMuYWJpbGl0eUlkSGV4ICtcXG4gICAgICAgICAgICAnOicgKyB0aGlzLm5hbWUgK1xcbiAgICAgICAgICAgICcgc3RhcnRzIHVzaW5nICcgKyB0aGlzLmFiaWxpdHlOYW1lICtcXG4gICAgICAgICAgICAnIG9uICcgKyB0YXJnZXQgKyAnLic7XFxuICAgICAgICB0aGlzLnByb3BlckNhc2VDb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArIHRoaXMuYWJpbGl0eUlkSGV4ICtcXG4gICAgICAgICAgICAnOicgKyBFbXVsYXRvckNvbW1vbi5wcm9wZXJDYXNlKHRoaXMubmFtZSkgK1xcbiAgICAgICAgICAgICcgc3RhcnRzIHVzaW5nICcgKyB0aGlzLmFiaWxpdHlOYW1lICtcXG4gICAgICAgICAgICAnIG9uICcgKyBFbXVsYXRvckNvbW1vbi5wcm9wZXJDYXNlKHRhcmdldCkgKyAnLic7XFxuICAgIH1cXG59XFxuY2xhc3MgTGluZUV2ZW50MjAgZXh0ZW5kcyBMaW5lRXZlbnQweDE0IHtcXG59XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9uZXR3b3JrX2xvZ19jb252ZXJ0ZXIvTGluZUV2ZW50MHgxNS50c1xcblxcbmNvbnN0IExpbmVFdmVudDB4MTVfZmllbGRzID0ge1xcbiAgICBpZDogMixcXG4gICAgbmFtZTogMyxcXG4gICAgZmxhZ3M6IDgsXFxuICAgIGRhbWFnZTogOSxcXG4gICAgYWJpbGl0eUlkOiA0LFxcbiAgICBhYmlsaXR5TmFtZTogNSxcXG4gICAgdGFyZ2V0SWQ6IDYsXFxuICAgIHRhcmdldE5hbWU6IDcsXFxuICAgIHRhcmdldEhwOiAyNCxcXG4gICAgdGFyZ2V0TWF4SHA6IDI1LFxcbiAgICB0YXJnZXRNcDogMjYsXFxuICAgIHRhcmdldE1heE1wOiAyNyxcXG4gICAgdGFyZ2V0WDogMzAsXFxuICAgIHRhcmdldFk6IDMxLFxcbiAgICB0YXJnZXRaOiAzMixcXG4gICAgdGFyZ2V0SGVhZGluZzogMzMsXFxuICAgIHNvdXJjZUhwOiAzNCxcXG4gICAgc291cmNlTWF4SHA6IDM1LFxcbiAgICBzb3VyY2VNcDogMzYsXFxuICAgIHNvdXJjZU1heE1wOiAzNyxcXG4gICAgeDogNDAsXFxuICAgIHk6IDQxLFxcbiAgICB6OiA0MixcXG4gICAgaGVhZGluZzogNDMsXFxufTtcXG4vLyBBYmlsaXR5IGhpdCBzaW5nbGUgdGFyZ2V0IGV2ZW50XFxuY2xhc3MgTGluZUV2ZW50MHgxNSBleHRlbmRzIExpbmVFdmVudCB7XFxuICAgIGNvbnN0cnVjdG9yKHJlcG8sIGxpbmUsIHBhcnRzKSB7XFxuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sLCBfbSwgX28sIF9wLCBfcSwgX3IsIF9zLCBfdCwgX3UsIF92LCBfdywgX3gsIF95LCBfeiwgXzAsIF8xLCBfMjtcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMuaXNTb3VyY2UgPSB0cnVlO1xcbiAgICAgICAgdGhpcy5pc1RhcmdldCA9IHRydWU7XFxuICAgICAgICB0aGlzLmlzQWJpbGl0eSA9IHRydWU7XFxuICAgICAgICB0aGlzLmlkID0gKF9iID0gKF9hID0gcGFydHNbTGluZUV2ZW50MHgxNV9maWVsZHMuaWRdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9VcHBlckNhc2UoKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XFxuICAgICAgICB0aGlzLm5hbWUgPSAoX2MgPSBwYXJ0c1tMaW5lRXZlbnQweDE1X2ZpZWxkcy5uYW1lXSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogJyc7XFxuICAgICAgICB0aGlzLmZsYWdzID0gKF9kID0gcGFydHNbTGluZUV2ZW50MHgxNV9maWVsZHMuZmxhZ3NdKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAnJztcXG4gICAgICAgIGNvbnN0IGZpZWxkT2Zmc2V0ID0gdGhpcy5mbGFncyA9PT0gJzNGJyA/IDIgOiAwO1xcbiAgICAgICAgdGhpcy5kYW1hZ2UgPSBMaW5lRXZlbnQuY2FsY3VsYXRlRGFtYWdlKChfZSA9IHBhcnRzW0xpbmVFdmVudDB4MTVfZmllbGRzLmRhbWFnZSArIGZpZWxkT2Zmc2V0XSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogJycpO1xcbiAgICAgICAgdGhpcy5hYmlsaXR5SWQgPSBwYXJzZUludCgoX2cgPSAoX2YgPSBwYXJ0c1tMaW5lRXZlbnQweDE1X2ZpZWxkcy5hYmlsaXR5SWRdKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YudG9VcHBlckNhc2UoKSkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogJycpO1xcbiAgICAgICAgdGhpcy5hYmlsaXR5TmFtZSA9IChfaCA9IHBhcnRzW0xpbmVFdmVudDB4MTVfZmllbGRzLmFiaWxpdHlOYW1lXSkgIT09IG51bGwgJiYgX2ggIT09IHZvaWQgMCA/IF9oIDogJyc7XFxuICAgICAgICB0aGlzLnRhcmdldElkID0gKF9rID0gKF9qID0gcGFydHNbTGluZUV2ZW50MHgxNV9maWVsZHMudGFyZ2V0SWRdKSA9PT0gbnVsbCB8fCBfaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2oudG9VcHBlckNhc2UoKSkgIT09IG51bGwgJiYgX2sgIT09IHZvaWQgMCA/IF9rIDogJyc7XFxuICAgICAgICB0aGlzLnRhcmdldE5hbWUgPSAoX2wgPSBwYXJ0c1tMaW5lRXZlbnQweDE1X2ZpZWxkcy50YXJnZXROYW1lXSkgIT09IG51bGwgJiYgX2wgIT09IHZvaWQgMCA/IF9sIDogJyc7XFxuICAgICAgICB0aGlzLnRhcmdldEhwID0gcGFyc2VJbnQoKF9tID0gcGFydHNbTGluZUV2ZW50MHgxNV9maWVsZHMudGFyZ2V0SHAgKyBmaWVsZE9mZnNldF0pICE9PSBudWxsICYmIF9tICE9PSB2b2lkIDAgPyBfbSA6ICcnKTtcXG4gICAgICAgIHRoaXMudGFyZ2V0TWF4SHAgPSBwYXJzZUludCgoX28gPSBwYXJ0c1tMaW5lRXZlbnQweDE1X2ZpZWxkcy50YXJnZXRNYXhIcCArIGZpZWxkT2Zmc2V0XSkgIT09IG51bGwgJiYgX28gIT09IHZvaWQgMCA/IF9vIDogJycpO1xcbiAgICAgICAgdGhpcy50YXJnZXRNcCA9IHBhcnNlSW50KChfcCA9IHBhcnRzW0xpbmVFdmVudDB4MTVfZmllbGRzLnRhcmdldE1wICsgZmllbGRPZmZzZXRdKSAhPT0gbnVsbCAmJiBfcCAhPT0gdm9pZCAwID8gX3AgOiAnJyk7XFxuICAgICAgICB0aGlzLnRhcmdldE1heE1wID0gcGFyc2VJbnQoKF9xID0gcGFydHNbTGluZUV2ZW50MHgxNV9maWVsZHMudGFyZ2V0TWF4TXAgKyBmaWVsZE9mZnNldF0pICE9PSBudWxsICYmIF9xICE9PSB2b2lkIDAgPyBfcSA6ICcnKTtcXG4gICAgICAgIHRoaXMudGFyZ2V0WCA9IHBhcnNlRmxvYXQoKF9yID0gcGFydHNbTGluZUV2ZW50MHgxNV9maWVsZHMudGFyZ2V0WCArIGZpZWxkT2Zmc2V0XSkgIT09IG51bGwgJiYgX3IgIT09IHZvaWQgMCA/IF9yIDogJycpO1xcbiAgICAgICAgdGhpcy50YXJnZXRZID0gcGFyc2VGbG9hdCgoX3MgPSBwYXJ0c1tMaW5lRXZlbnQweDE1X2ZpZWxkcy50YXJnZXRZICsgZmllbGRPZmZzZXRdKSAhPT0gbnVsbCAmJiBfcyAhPT0gdm9pZCAwID8gX3MgOiAnJyk7XFxuICAgICAgICB0aGlzLnRhcmdldFogPSBwYXJzZUZsb2F0KChfdCA9IHBhcnRzW0xpbmVFdmVudDB4MTVfZmllbGRzLnRhcmdldFogKyBmaWVsZE9mZnNldF0pICE9PSBudWxsICYmIF90ICE9PSB2b2lkIDAgPyBfdCA6ICcnKTtcXG4gICAgICAgIHRoaXMudGFyZ2V0SGVhZGluZyA9IHBhcnNlRmxvYXQoKF91ID0gcGFydHNbTGluZUV2ZW50MHgxNV9maWVsZHMudGFyZ2V0SGVhZGluZyArIGZpZWxkT2Zmc2V0XSkgIT09IG51bGwgJiYgX3UgIT09IHZvaWQgMCA/IF91IDogJycpO1xcbiAgICAgICAgdGhpcy5ocCA9IHBhcnNlSW50KChfdiA9IHBhcnRzW0xpbmVFdmVudDB4MTVfZmllbGRzLnNvdXJjZUhwICsgZmllbGRPZmZzZXRdKSAhPT0gbnVsbCAmJiBfdiAhPT0gdm9pZCAwID8gX3YgOiAnJyk7XFxuICAgICAgICB0aGlzLm1heEhwID0gcGFyc2VJbnQoKF93ID0gcGFydHNbTGluZUV2ZW50MHgxNV9maWVsZHMuc291cmNlTWF4SHAgKyBmaWVsZE9mZnNldF0pICE9PSBudWxsICYmIF93ICE9PSB2b2lkIDAgPyBfdyA6ICcnKTtcXG4gICAgICAgIHRoaXMubXAgPSBwYXJzZUludCgoX3ggPSBwYXJ0c1tMaW5lRXZlbnQweDE1X2ZpZWxkcy5zb3VyY2VNcCArIGZpZWxkT2Zmc2V0XSkgIT09IG51bGwgJiYgX3ggIT09IHZvaWQgMCA/IF94IDogJycpO1xcbiAgICAgICAgdGhpcy5tYXhNcCA9IHBhcnNlSW50KChfeSA9IHBhcnRzW0xpbmVFdmVudDB4MTVfZmllbGRzLnNvdXJjZU1heE1wICsgZmllbGRPZmZzZXRdKSAhPT0gbnVsbCAmJiBfeSAhPT0gdm9pZCAwID8gX3kgOiAnJyk7XFxuICAgICAgICB0aGlzLnggPSBwYXJzZUZsb2F0KChfeiA9IHBhcnRzW0xpbmVFdmVudDB4MTVfZmllbGRzLnggKyBmaWVsZE9mZnNldF0pICE9PSBudWxsICYmIF96ICE9PSB2b2lkIDAgPyBfeiA6ICcnKTtcXG4gICAgICAgIHRoaXMueSA9IHBhcnNlRmxvYXQoKF8wID0gcGFydHNbTGluZUV2ZW50MHgxNV9maWVsZHMueSArIGZpZWxkT2Zmc2V0XSkgIT09IG51bGwgJiYgXzAgIT09IHZvaWQgMCA/IF8wIDogJycpO1xcbiAgICAgICAgdGhpcy56ID0gcGFyc2VGbG9hdCgoXzEgPSBwYXJ0c1tMaW5lRXZlbnQweDE1X2ZpZWxkcy56ICsgZmllbGRPZmZzZXRdKSAhPT0gbnVsbCAmJiBfMSAhPT0gdm9pZCAwID8gXzEgOiAnJyk7XFxuICAgICAgICB0aGlzLmhlYWRpbmcgPSBwYXJzZUZsb2F0KChfMiA9IHBhcnRzW0xpbmVFdmVudDB4MTVfZmllbGRzLmhlYWRpbmcgKyBmaWVsZE9mZnNldF0pICE9PSBudWxsICYmIF8yICE9PSB2b2lkIDAgPyBfMiA6ICcnKTtcXG4gICAgICAgIHJlcG8udXBkYXRlQ29tYmF0YW50KHRoaXMuaWQsIHtcXG4gICAgICAgICAgICBqb2I6IHVuZGVmaW5lZCxcXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXFxuICAgICAgICAgICAgc3Bhd246IHRoaXMudGltZXN0YW1wLFxcbiAgICAgICAgICAgIGRlc3Bhd246IHRoaXMudGltZXN0YW1wLFxcbiAgICAgICAgfSk7XFxuICAgICAgICByZXBvLnVwZGF0ZUNvbWJhdGFudCh0aGlzLnRhcmdldElkLCB7XFxuICAgICAgICAgICAgam9iOiB1bmRlZmluZWQsXFxuICAgICAgICAgICAgbmFtZTogdGhpcy50YXJnZXROYW1lLFxcbiAgICAgICAgICAgIHNwYXduOiB0aGlzLnRpbWVzdGFtcCxcXG4gICAgICAgICAgICBkZXNwYXduOiB0aGlzLnRpbWVzdGFtcCxcXG4gICAgICAgIH0pO1xcbiAgICB9XFxufVxcbmNsYXNzIExpbmVFdmVudDIxIGV4dGVuZHMgTGluZUV2ZW50MHgxNSB7XFxufVxcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvbmV0d29ya19sb2dfY29udmVydGVyL0xpbmVFdmVudDB4MTYudHNcXG5cXG4vLyBBYmlsaXR5IGhpdCBtdWx0aXBsZS9ubyB0YXJnZXQgZXZlbnRcXG4vLyBEdXBsaWNhdGUgb2YgMHgxNSBhcyBmYXIgYXMgZGF0YVxcbmNsYXNzIExpbmVFdmVudDB4MTYgZXh0ZW5kcyBMaW5lRXZlbnQweDE1IHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbGluZSwgcGFydHMpIHtcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgfVxcbn1cXG5jbGFzcyBMaW5lRXZlbnQyMiBleHRlbmRzIExpbmVFdmVudDB4MTYge1xcbn1cXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDE3LnRzXFxuXFxuY29uc3QgTGluZUV2ZW50MHgxN19maWVsZHMgPSB7XFxuICAgIGlkOiAyLFxcbiAgICBuYW1lOiAzLFxcbiAgICBhYmlsaXR5SWQ6IDQsXFxuICAgIGFiaWxpdHlOYW1lOiA1LFxcbiAgICByZWFzb246IDYsXFxufTtcXG4vLyBDYW5jZWwgYWJpbGl0eSBldmVudFxcbmNsYXNzIExpbmVFdmVudDB4MTcgZXh0ZW5kcyBMaW5lRXZlbnQge1xcbiAgICBjb25zdHJ1Y3RvcihyZXBvLCBsaW5lLCBwYXJ0cykge1xcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xcbiAgICAgICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgdGhpcy5pc1NvdXJjZSA9IHRydWU7XFxuICAgICAgICB0aGlzLmlzQWJpbGl0eSA9IHRydWU7XFxuICAgICAgICB0aGlzLmlkID0gKF9iID0gKF9hID0gcGFydHNbTGluZUV2ZW50MHgxN19maWVsZHMuaWRdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9VcHBlckNhc2UoKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XFxuICAgICAgICB0aGlzLm5hbWUgPSAoX2MgPSBwYXJ0c1tMaW5lRXZlbnQweDE3X2ZpZWxkcy5uYW1lXSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogJyc7XFxuICAgICAgICB0aGlzLmFiaWxpdHlJZCA9IHBhcnNlSW50KChfZSA9IChfZCA9IHBhcnRzW0xpbmVFdmVudDB4MTdfZmllbGRzLmFiaWxpdHlJZF0pID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC50b1VwcGVyQ2FzZSgpKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAnJyk7XFxuICAgICAgICB0aGlzLmFiaWxpdHlOYW1lID0gKF9mID0gcGFydHNbTGluZUV2ZW50MHgxN19maWVsZHMuYWJpbGl0eU5hbWVdKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAnJztcXG4gICAgICAgIHRoaXMucmVhc29uID0gKF9nID0gcGFydHNbTGluZUV2ZW50MHgxN19maWVsZHMucmVhc29uXSkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogJyc7XFxuICAgIH1cXG59XFxuY2xhc3MgTGluZUV2ZW50MjMgZXh0ZW5kcyBMaW5lRXZlbnQweDE3IHtcXG59XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9uZXR3b3JrX2xvZ19jb252ZXJ0ZXIvTGluZUV2ZW50MHgxOC50c1xcblxcblxcbmNvbnN0IExpbmVFdmVudDB4MThfZmllbGRzID0ge1xcbiAgICBpZDogMixcXG4gICAgbmFtZTogMyxcXG4gICAgdHlwZTogNCxcXG4gICAgZWZmZWN0SWQ6IDUsXFxuICAgIGRhbWFnZTogNixcXG4gICAgY3VycmVudEhwOiA3LFxcbiAgICBtYXhIcDogOCxcXG4gICAgY3VycmVudE1wOiA5LFxcbiAgICBtYXhNcDogMTAsXFxuICAgIGN1cnJlbnRUcDogMTEsXFxuICAgIG1heFRwOiAxMixcXG4gICAgeDogMTMsXFxuICAgIHk6IDE0LFxcbiAgICB6OiAxNSxcXG4gICAgaGVhZGluZzogMTYsXFxufTtcXG4vLyBEb1QvSG9UIGV2ZW50XFxuY2xhc3MgTGluZUV2ZW50MHgxOCBleHRlbmRzIExpbmVFdmVudCB7XFxuICAgIGNvbnN0cnVjdG9yKHJlcG8sIGxpbmUsIHBhcnRzKSB7XFxuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sLCBfbSwgX28sIF9wLCBfcSwgX3IsIF9zLCBfdDtcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMuaXNTb3VyY2UgPSB0cnVlO1xcbiAgICAgICAgdGhpcy5pZCA9IChfYiA9IChfYSA9IHBhcnRzW0xpbmVFdmVudDB4MThfZmllbGRzLmlkXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnO1xcbiAgICAgICAgdGhpcy5uYW1lID0gKF9jID0gcGFydHNbTGluZUV2ZW50MHgxOF9maWVsZHMubmFtZV0pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnO1xcbiAgICAgICAgdGhpcy50eXBlID0gKF9kID0gcGFydHNbTGluZUV2ZW50MHgxOF9maWVsZHMudHlwZV0pICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6ICcnO1xcbiAgICAgICAgdGhpcy5lZmZlY3RJZCA9IChfZiA9IChfZSA9IHBhcnRzW0xpbmVFdmVudDB4MThfZmllbGRzLmVmZmVjdElkXSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6ICcnO1xcbiAgICAgICAgdGhpcy5kYW1hZ2UgPSBwYXJzZUludCgoX2cgPSBwYXJ0c1tMaW5lRXZlbnQweDE4X2ZpZWxkcy5kYW1hZ2VdKSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiAnJywgMTYpO1xcbiAgICAgICAgdGhpcy5ocCA9IHBhcnNlSW50KChfaCA9IHBhcnRzW0xpbmVFdmVudDB4MThfZmllbGRzLmN1cnJlbnRIcF0pICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6ICcnKTtcXG4gICAgICAgIHRoaXMubWF4SHAgPSBwYXJzZUludCgoX2ogPSBwYXJ0c1tMaW5lRXZlbnQweDE4X2ZpZWxkcy5tYXhIcF0pICE9PSBudWxsICYmIF9qICE9PSB2b2lkIDAgPyBfaiA6ICcnKTtcXG4gICAgICAgIHRoaXMubXAgPSBwYXJzZUludCgoX2sgPSBwYXJ0c1tMaW5lRXZlbnQweDE4X2ZpZWxkcy5jdXJyZW50TXBdKSAhPT0gbnVsbCAmJiBfayAhPT0gdm9pZCAwID8gX2sgOiAnJyk7XFxuICAgICAgICB0aGlzLm1heE1wID0gcGFyc2VJbnQoKF9sID0gcGFydHNbTGluZUV2ZW50MHgxOF9maWVsZHMubWF4TXBdKSAhPT0gbnVsbCAmJiBfbCAhPT0gdm9pZCAwID8gX2wgOiAnJyk7XFxuICAgICAgICB0aGlzLnRwID0gcGFyc2VJbnQoKF9tID0gcGFydHNbTGluZUV2ZW50MHgxOF9maWVsZHMuY3VycmVudFRwXSkgIT09IG51bGwgJiYgX20gIT09IHZvaWQgMCA/IF9tIDogJycpO1xcbiAgICAgICAgdGhpcy5tYXhUcCA9IHBhcnNlSW50KChfbyA9IHBhcnRzW0xpbmVFdmVudDB4MThfZmllbGRzLm1heFRwXSkgIT09IG51bGwgJiYgX28gIT09IHZvaWQgMCA/IF9vIDogJycpO1xcbiAgICAgICAgdGhpcy54ID0gcGFyc2VGbG9hdCgoX3AgPSBwYXJ0c1tMaW5lRXZlbnQweDE4X2ZpZWxkcy54XSkgIT09IG51bGwgJiYgX3AgIT09IHZvaWQgMCA/IF9wIDogJycpO1xcbiAgICAgICAgdGhpcy55ID0gcGFyc2VGbG9hdCgoX3EgPSBwYXJ0c1tMaW5lRXZlbnQweDE4X2ZpZWxkcy55XSkgIT09IG51bGwgJiYgX3EgIT09IHZvaWQgMCA/IF9xIDogJycpO1xcbiAgICAgICAgdGhpcy56ID0gcGFyc2VGbG9hdCgoX3IgPSBwYXJ0c1tMaW5lRXZlbnQweDE4X2ZpZWxkcy56XSkgIT09IG51bGwgJiYgX3IgIT09IHZvaWQgMCA/IF9yIDogJycpO1xcbiAgICAgICAgdGhpcy5oZWFkaW5nID0gcGFyc2VGbG9hdCgoX3MgPSBwYXJ0c1tMaW5lRXZlbnQweDE4X2ZpZWxkcy5oZWFkaW5nXSkgIT09IG51bGwgJiYgX3MgIT09IHZvaWQgMCA/IF9zIDogJycpO1xcbiAgICAgICAgcmVwby51cGRhdGVDb21iYXRhbnQodGhpcy5pZCwge1xcbiAgICAgICAgICAgIGpvYjogdW5kZWZpbmVkLFxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcXG4gICAgICAgICAgICBzcGF3bjogdGhpcy50aW1lc3RhbXAsXFxuICAgICAgICAgICAgZGVzcGF3bjogdGhpcy50aW1lc3RhbXAsXFxuICAgICAgICB9KTtcXG4gICAgICAgIGxldCBlZmZlY3ROYW1lID0gJyc7XFxuICAgICAgICBjb25zdCByZXNvbHZlZE5hbWUgPSByZXBvLnJlc29sdmVOYW1lKHRoaXMuaWQsIHRoaXMubmFtZSk7XFxuICAgICAgICBpZiAodGhpcy5lZmZlY3RJZCBpbiBMaW5lRXZlbnQweDE4LnNob3dFZmZlY3ROYW1lc0ZvcilcXG4gICAgICAgICAgICBlZmZlY3ROYW1lID0gKF90ID0gTGluZUV2ZW50MHgxOC5zaG93RWZmZWN0TmFtZXNGb3JbdGhpcy5lZmZlY3RJZF0pICE9PSBudWxsICYmIF90ICE9PSB2b2lkIDAgPyBfdCA6ICcnO1xcbiAgICAgICAgbGV0IGVmZmVjdFBhcnQgPSAnJztcXG4gICAgICAgIGlmIChlZmZlY3ROYW1lKVxcbiAgICAgICAgICAgIGVmZmVjdFBhcnQgPSBlZmZlY3ROYW1lICsgJyAnO1xcbiAgICAgICAgdGhpcy5jb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArIGVmZmVjdFBhcnQgKyB0aGlzLnR5cGUgK1xcbiAgICAgICAgICAgICcgVGljayBvbiAnICsgcmVzb2x2ZWROYW1lICtcXG4gICAgICAgICAgICAnIGZvciAnICsgdGhpcy5kYW1hZ2UudG9TdHJpbmcoKSArICcgZGFtYWdlLic7XFxuICAgICAgICB0aGlzLnByb3BlckNhc2VDb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArIGVmZmVjdFBhcnQgKyB0aGlzLnR5cGUgK1xcbiAgICAgICAgICAgICcgVGljayBvbiAnICsgRW11bGF0b3JDb21tb24ucHJvcGVyQ2FzZShyZXNvbHZlZE5hbWUpICtcXG4gICAgICAgICAgICAnIGZvciAnICsgdGhpcy5kYW1hZ2UudG9TdHJpbmcoKSArICcgZGFtYWdlLic7XFxuICAgIH1cXG59XFxuTGluZUV2ZW50MHgxOC5zaG93RWZmZWN0TmFtZXNGb3IgPSB7XFxuICAgICc0QzQnOiAnRXhjb2duaXRpb24nLFxcbiAgICAnMzVEJzogJ1dpbGRmaXJlJyxcXG4gICAgJzFGNSc6ICdEb3RvbicsXFxuICAgICcyRUQnOiAnU2FsdGVkIEVhcnRoJyxcXG4gICAgJzRCNSc6ICdGbGFtZXRocm93ZXInLFxcbiAgICAnMkUzJzogJ0FzeWx1bScsXFxuICAgICc3NzcnOiAnQXN5bHVtJyxcXG4gICAgJzc5OCc6ICdTYWNyZWQgU29pbCcsXFxuICAgICc0QzcnOiAnRmV5IFVuaW9uJyxcXG4gICAgJzc0Mic6ICdOYXNjZW50IEdsaW50JyxcXG59O1xcbmNsYXNzIExpbmVFdmVudDI0IGV4dGVuZHMgTGluZUV2ZW50MHgxOCB7XFxufVxcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvbmV0d29ya19sb2dfY29udmVydGVyL0xpbmVFdmVudDB4MTkudHNcXG5cXG5cXG5jb25zdCBMaW5lRXZlbnQweDE5X2ZpZWxkcyA9IHtcXG4gICAgaWQ6IDIsXFxuICAgIG5hbWU6IDMsXFxuICAgIHRhcmdldElkOiA0LFxcbiAgICB0YXJnZXROYW1lOiA1LFxcbn07XFxuLy8gQ29tYmF0YW50IGRlZmVhdGVkIGV2ZW50XFxuY2xhc3MgTGluZUV2ZW50MHgxOSBleHRlbmRzIExpbmVFdmVudCB7XFxuICAgIGNvbnN0cnVjdG9yKHJlcG8sIGxpbmUsIHBhcnRzKSB7XFxuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMuaWQgPSAoX2IgPSAoX2EgPSBwYXJ0c1tMaW5lRXZlbnQweDE5X2ZpZWxkcy5pZF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b1VwcGVyQ2FzZSgpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJztcXG4gICAgICAgIHRoaXMubmFtZSA9IChfYyA9IHBhcnRzW0xpbmVFdmVudDB4MTlfZmllbGRzLm5hbWVdKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAnJztcXG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSAoX2UgPSAoX2QgPSBwYXJ0c1tMaW5lRXZlbnQweDE5X2ZpZWxkcy50YXJnZXRJZF0pID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC50b1VwcGVyQ2FzZSgpKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAnJztcXG4gICAgICAgIHRoaXMudGFyZ2V0TmFtZSA9IChfZiA9IHBhcnRzW0xpbmVFdmVudDB4MTlfZmllbGRzLnRhcmdldE5hbWVdKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAnJztcXG4gICAgICAgIHJlcG8udXBkYXRlQ29tYmF0YW50KHRoaXMuaWQsIHtcXG4gICAgICAgICAgICBqb2I6IHVuZGVmaW5lZCxcXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXFxuICAgICAgICAgICAgc3Bhd246IHRoaXMudGltZXN0YW1wLFxcbiAgICAgICAgICAgIGRlc3Bhd246IHRoaXMudGltZXN0YW1wLFxcbiAgICAgICAgfSk7XFxuICAgICAgICByZXBvLnVwZGF0ZUNvbWJhdGFudCh0aGlzLnRhcmdldElkLCB7XFxuICAgICAgICAgICAgam9iOiB1bmRlZmluZWQsXFxuICAgICAgICAgICAgbmFtZTogdGhpcy50YXJnZXROYW1lLFxcbiAgICAgICAgICAgIHNwYXduOiB0aGlzLnRpbWVzdGFtcCxcXG4gICAgICAgICAgICBkZXNwYXduOiB0aGlzLnRpbWVzdGFtcCxcXG4gICAgICAgIH0pO1xcbiAgICAgICAgbGV0IHJlc29sdmVkTmFtZSA9IHVuZGVmaW5lZDtcXG4gICAgICAgIGxldCByZXNvbHZlZFRhcmdldE5hbWUgPSB1bmRlZmluZWQ7XFxuICAgICAgICBpZiAodGhpcy5pZCAhPT0gJzAwJylcXG4gICAgICAgICAgICByZXNvbHZlZE5hbWUgPSByZXBvLnJlc29sdmVOYW1lKHRoaXMuaWQsIHRoaXMubmFtZSk7XFxuICAgICAgICBpZiAodGhpcy50YXJnZXRJZCAhPT0gJzAwJylcXG4gICAgICAgICAgICByZXNvbHZlZFRhcmdldE5hbWUgPSByZXBvLnJlc29sdmVOYW1lKHRoaXMudGFyZ2V0SWQsIHRoaXMudGFyZ2V0TmFtZSk7XFxuICAgICAgICBjb25zdCBkZWZlYXRlZE5hbWUgPSAocmVzb2x2ZWROYW1lICE9PSBudWxsICYmIHJlc29sdmVkTmFtZSAhPT0gdm9pZCAwID8gcmVzb2x2ZWROYW1lIDogdGhpcy5uYW1lKTtcXG4gICAgICAgIGNvbnN0IGtpbGxlck5hbWUgPSAocmVzb2x2ZWRUYXJnZXROYW1lICE9PSBudWxsICYmIHJlc29sdmVkVGFyZ2V0TmFtZSAhPT0gdm9pZCAwID8gcmVzb2x2ZWRUYXJnZXROYW1lIDogdGhpcy50YXJnZXROYW1lKTtcXG4gICAgICAgIHRoaXMuY29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgKyBkZWZlYXRlZE5hbWUgK1xcbiAgICAgICAgICAgICcgd2FzIGRlZmVhdGVkIGJ5ICcgKyBraWxsZXJOYW1lICsgJy4nO1xcbiAgICAgICAgdGhpcy5wcm9wZXJDYXNlQ29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgKyBFbXVsYXRvckNvbW1vbi5wcm9wZXJDYXNlKGRlZmVhdGVkTmFtZSkgK1xcbiAgICAgICAgICAgICcgd2FzIGRlZmVhdGVkIGJ5ICcgKyBFbXVsYXRvckNvbW1vbi5wcm9wZXJDYXNlKGtpbGxlck5hbWUpICsgJy4nO1xcbiAgICB9XFxufVxcbmNsYXNzIExpbmVFdmVudDI1IGV4dGVuZHMgTGluZUV2ZW50MHgxOSB7XFxufVxcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvbmV0d29ya19sb2dfY29udmVydGVyL0xpbmVFdmVudDB4MUEudHNcXG5cXG5cXG5jb25zdCBMaW5lRXZlbnQweDFBX2ZpZWxkcyA9IHtcXG4gICAgYWJpbGl0eUlkOiAyLFxcbiAgICBhYmlsaXR5TmFtZTogMyxcXG4gICAgZHVyYXRpb25TdHJpbmc6IDQsXFxuICAgIGlkOiA1LFxcbiAgICBuYW1lOiA2LFxcbiAgICB0YXJnZXRJZDogNyxcXG4gICAgdGFyZ2V0TmFtZTogOCxcXG4gICAgc3RhY2tzOiA5LFxcbiAgICB0YXJnZXRIcDogMTAsXFxuICAgIHNvdXJjZUhwOiAxMSxcXG59O1xcbi8vIEdhaW4gc3RhdHVzIGVmZmVjdCBldmVudFxcbi8vIERlbGliZXJhdGVseSBkb24ndCBmbGFnIHRoaXMgYXMgTGluZUV2ZW50U291cmNlIG9yIExpbmVFdmVudFRhcmdldFxcbi8vIGJlY2F1c2UgMHgxQSBsaW5lIHZhbHVlcyBhcmVuJ3QgYWNjdXJhdGVcXG5jbGFzcyBMaW5lRXZlbnQweDFBIGV4dGVuZHMgTGluZUV2ZW50IHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbGluZSwgcGFydHMpIHtcXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tLCBfbztcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMuaXNBYmlsaXR5ID0gdHJ1ZTtcXG4gICAgICAgIHRoaXMuYWJpbGl0eUlkID0gcGFyc2VJbnQoKF9iID0gKF9hID0gcGFydHNbTGluZUV2ZW50MHgxQV9maWVsZHMuYWJpbGl0eUlkXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnKTtcXG4gICAgICAgIHRoaXMuYWJpbGl0eU5hbWUgPSAoX2MgPSBwYXJ0c1tMaW5lRXZlbnQweDFBX2ZpZWxkcy5hYmlsaXR5TmFtZV0pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnO1xcbiAgICAgICAgdGhpcy5kdXJhdGlvblN0cmluZyA9IChfZCA9IHBhcnRzW0xpbmVFdmVudDB4MUFfZmllbGRzLmR1cmF0aW9uU3RyaW5nXSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogJyc7XFxuICAgICAgICB0aGlzLmR1cmF0aW9uRmxvYXQgPSBwYXJzZUZsb2F0KHRoaXMuZHVyYXRpb25TdHJpbmcpO1xcbiAgICAgICAgdGhpcy5pZCA9IChfZiA9IChfZSA9IHBhcnRzW0xpbmVFdmVudDB4MUFfZmllbGRzLmlkXSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6ICcnO1xcbiAgICAgICAgdGhpcy5uYW1lID0gKF9nID0gcGFydHNbTGluZUV2ZW50MHgxQV9maWVsZHMubmFtZV0pICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6ICcnO1xcbiAgICAgICAgdGhpcy50YXJnZXRJZCA9IChfaiA9IChfaCA9IHBhcnRzW0xpbmVFdmVudDB4MUFfZmllbGRzLnRhcmdldElkXSkgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9qICE9PSB2b2lkIDAgPyBfaiA6ICcnO1xcbiAgICAgICAgdGhpcy50YXJnZXROYW1lID0gKF9rID0gcGFydHNbTGluZUV2ZW50MHgxQV9maWVsZHMudGFyZ2V0TmFtZV0pICE9PSBudWxsICYmIF9rICE9PSB2b2lkIDAgPyBfayA6ICcnO1xcbiAgICAgICAgdGhpcy5zdGFja3MgPSBwYXJzZUludCgoX2wgPSBwYXJ0c1tMaW5lRXZlbnQweDFBX2ZpZWxkcy5zdGFja3NdKSAhPT0gbnVsbCAmJiBfbCAhPT0gdm9pZCAwID8gX2wgOiAnMCcpO1xcbiAgICAgICAgdGhpcy50YXJnZXRIcCA9IHBhcnNlSW50KChfbSA9IHBhcnRzW0xpbmVFdmVudDB4MUFfZmllbGRzLnRhcmdldEhwXSkgIT09IG51bGwgJiYgX20gIT09IHZvaWQgMCA/IF9tIDogJycpO1xcbiAgICAgICAgdGhpcy5ocCA9IHBhcnNlSW50KChfbyA9IHBhcnRzW0xpbmVFdmVudDB4MUFfZmllbGRzLnNvdXJjZUhwXSkgIT09IG51bGwgJiYgX28gIT09IHZvaWQgMCA/IF9vIDogJycpO1xcbiAgICAgICAgcmVwby51cGRhdGVDb21iYXRhbnQodGhpcy5pZCwge1xcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcXG4gICAgICAgICAgICBzcGF3bjogdGhpcy50aW1lc3RhbXAsXFxuICAgICAgICAgICAgZGVzcGF3bjogdGhpcy50aW1lc3RhbXAsXFxuICAgICAgICAgICAgam9iOiB1bmRlZmluZWQsXFxuICAgICAgICB9KTtcXG4gICAgICAgIHJlcG8udXBkYXRlQ29tYmF0YW50KHRoaXMudGFyZ2V0SWQsIHtcXG4gICAgICAgICAgICBuYW1lOiB0aGlzLnRhcmdldE5hbWUsXFxuICAgICAgICAgICAgc3Bhd246IHRoaXMudGltZXN0YW1wLFxcbiAgICAgICAgICAgIGRlc3Bhd246IHRoaXMudGltZXN0YW1wLFxcbiAgICAgICAgICAgIGpvYjogdW5kZWZpbmVkLFxcbiAgICAgICAgfSk7XFxuICAgICAgICB0aGlzLnJlc29sdmVkTmFtZSA9IHJlcG8ucmVzb2x2ZU5hbWUodGhpcy5pZCwgdGhpcy5uYW1lKTtcXG4gICAgICAgIHRoaXMucmVzb2x2ZWRUYXJnZXROYW1lID0gcmVwby5yZXNvbHZlTmFtZSh0aGlzLnRhcmdldElkLCB0aGlzLnRhcmdldE5hbWUpO1xcbiAgICAgICAgdGhpcy5mYWxsYmFja1Jlc29sdmVkVGFyZ2V0TmFtZSA9XFxuICAgICAgICAgICAgcmVwby5yZXNvbHZlTmFtZSh0aGlzLmlkLCB0aGlzLm5hbWUsIHRoaXMudGFyZ2V0SWQsIHRoaXMudGFyZ2V0TmFtZSk7XFxuICAgICAgICBsZXQgc3RhY2tDb3VudFRleHQgPSAnJztcXG4gICAgICAgIGlmICh0aGlzLnN0YWNrcyA+IDAgJiYgdGhpcy5zdGFja3MgPCAyMCAmJlxcbiAgICAgICAgICAgIExpbmVFdmVudDB4MUEuc2hvd1N0YWNrQ291bnRGb3IuaW5jbHVkZXModGhpcy5hYmlsaXR5SWQpKVxcbiAgICAgICAgICAgIHN0YWNrQ291bnRUZXh0ID0gJyAoJyArIHRoaXMuc3RhY2tzLnRvU3RyaW5nKCkgKyAnKSc7XFxuICAgICAgICB0aGlzLmNvbnZlcnRlZExpbmUgPSB0aGlzLnByZWZpeCgpICsgdGhpcy50YXJnZXRJZCArXFxuICAgICAgICAgICAgJzonICsgdGhpcy50YXJnZXROYW1lICtcXG4gICAgICAgICAgICAnIGdhaW5zIHRoZSBlZmZlY3Qgb2YgJyArIHRoaXMuYWJpbGl0eU5hbWUgK1xcbiAgICAgICAgICAgICcgZnJvbSAnICsgdGhpcy5mYWxsYmFja1Jlc29sdmVkVGFyZ2V0TmFtZSArXFxuICAgICAgICAgICAgJyBmb3IgJyArIHRoaXMuZHVyYXRpb25TdHJpbmcgKyAnIFNlY29uZHMuJyArIHN0YWNrQ291bnRUZXh0O1xcbiAgICAgICAgdGhpcy5wcm9wZXJDYXNlQ29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgKyB0aGlzLnRhcmdldElkICtcXG4gICAgICAgICAgICAnOicgKyBFbXVsYXRvckNvbW1vbi5wcm9wZXJDYXNlKHRoaXMudGFyZ2V0TmFtZSkgK1xcbiAgICAgICAgICAgICcgZ2FpbnMgdGhlIGVmZmVjdCBvZiAnICsgdGhpcy5hYmlsaXR5TmFtZSArXFxuICAgICAgICAgICAgJyBmcm9tICcgKyBFbXVsYXRvckNvbW1vbi5wcm9wZXJDYXNlKHRoaXMuZmFsbGJhY2tSZXNvbHZlZFRhcmdldE5hbWUpICtcXG4gICAgICAgICAgICAnIGZvciAnICsgdGhpcy5kdXJhdGlvblN0cmluZyArICcgU2Vjb25kcy4nICsgc3RhY2tDb3VudFRleHQ7XFxuICAgIH1cXG59XFxuTGluZUV2ZW50MHgxQS5zaG93U3RhY2tDb3VudEZvciA9IFtcXG4gICAgMzA0LFxcbiAgICA0MDYsXFxuICAgIDM1MCxcXG4gICAgNzE0LFxcbiAgICA1MDUsXFxuICAgIDEyMzksXFxuICAgIDEyOTcsXFxuXTtcXG5jbGFzcyBMaW5lRXZlbnQyNiBleHRlbmRzIExpbmVFdmVudDB4MUEge1xcbn1cXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDFCLnRzXFxuXFxuY29uc3QgTGluZUV2ZW50MHgxQl9maWVsZHMgPSB7XFxuICAgIHRhcmdldElkOiAyLFxcbiAgICB0YXJnZXROYW1lOiAzLFxcbiAgICBoZWFkbWFya2VySWQ6IDYsXFxufTtcXG4vLyBIZWFkIG1hcmtlciBldmVudFxcbmNsYXNzIExpbmVFdmVudDB4MUIgZXh0ZW5kcyBMaW5lRXZlbnQge1xcbiAgICBjb25zdHJ1Y3RvcihyZXBvLCBsaW5lLCBwYXJ0cykge1xcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xcbiAgICAgICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgdGhpcy5pc1NvdXJjZSA9IHRydWU7XFxuICAgICAgICB0aGlzLmlkID0gKF9iID0gKF9hID0gcGFydHNbTGluZUV2ZW50MHgxQl9maWVsZHMudGFyZ2V0SWRdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9VcHBlckNhc2UoKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XFxuICAgICAgICB0aGlzLm5hbWUgPSAoX2MgPSBwYXJ0c1tMaW5lRXZlbnQweDFCX2ZpZWxkcy50YXJnZXROYW1lXSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogJyc7XFxuICAgICAgICB0aGlzLmhlYWRtYXJrZXJJZCA9IChfZCA9IHBhcnRzW0xpbmVFdmVudDB4MUJfZmllbGRzLmhlYWRtYXJrZXJJZF0pICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6ICcnO1xcbiAgICB9XFxufVxcbmNsYXNzIExpbmVFdmVudDI3IGV4dGVuZHMgTGluZUV2ZW50MHgxQiB7XFxufVxcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvbmV0d29ya19sb2dfY29udmVydGVyL0xpbmVFdmVudDB4MUMudHNcXG5cXG5jb25zdCBMaW5lRXZlbnQweDFDX2ZpZWxkcyA9IHtcXG4gICAgb3BlcmF0aW9uOiAyLFxcbiAgICB3YXltYXJrOiAzLFxcbiAgICBpZDogNCxcXG4gICAgbmFtZTogNSxcXG4gICAgeDogNixcXG4gICAgeTogNyxcXG4gICAgejogOCxcXG59O1xcbi8vIEZsb29yIHdheW1hcmtlciBldmVudFxcbmNsYXNzIExpbmVFdmVudDB4MUMgZXh0ZW5kcyBMaW5lRXZlbnQge1xcbiAgICBjb25zdHJ1Y3RvcihyZXBvLCBsaW5lLCBwYXJ0cykge1xcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMub3BlcmF0aW9uID0gKF9hID0gcGFydHNbTGluZUV2ZW50MHgxQ19maWVsZHMub3BlcmF0aW9uXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XFxuICAgICAgICB0aGlzLndheW1hcmsgPSAoX2IgPSBwYXJ0c1tMaW5lRXZlbnQweDFDX2ZpZWxkcy53YXltYXJrXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XFxuICAgICAgICB0aGlzLmlkID0gKF9kID0gKF9jID0gcGFydHNbTGluZUV2ZW50MHgxQ19maWVsZHMuaWRdKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudG9VcHBlckNhc2UoKSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogJyc7XFxuICAgICAgICB0aGlzLm5hbWUgPSAoX2UgPSBwYXJ0c1tMaW5lRXZlbnQweDFDX2ZpZWxkcy5uYW1lXSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogJyc7XFxuICAgICAgICB0aGlzLnggPSAoX2YgPSBwYXJ0c1tMaW5lRXZlbnQweDFDX2ZpZWxkcy54XSkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogJyc7XFxuICAgICAgICB0aGlzLnkgPSAoX2cgPSBwYXJ0c1tMaW5lRXZlbnQweDFDX2ZpZWxkcy55XSkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogJyc7XFxuICAgICAgICB0aGlzLnogPSAoX2ggPSBwYXJ0c1tMaW5lRXZlbnQweDFDX2ZpZWxkcy56XSkgIT09IG51bGwgJiYgX2ggIT09IHZvaWQgMCA/IF9oIDogJyc7XFxuICAgIH1cXG59XFxuY2xhc3MgTGluZUV2ZW50MjggZXh0ZW5kcyBMaW5lRXZlbnQweDFDIHtcXG59XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9uZXR3b3JrX2xvZ19jb252ZXJ0ZXIvTGluZUV2ZW50MHgxRC50c1xcblxcbmNvbnN0IExpbmVFdmVudDB4MURfZmllbGRzID0ge1xcbiAgICBvcGVyYXRpb246IDIsXFxuICAgIHdheW1hcms6IDMsXFxuICAgIGlkOiA0LFxcbiAgICBuYW1lOiA1LFxcbiAgICB0YXJnZXRJZDogNixcXG4gICAgdGFyZ2V0TmFtZTogNyxcXG59O1xcbi8vIFdheW1hcmtlclxcbmNsYXNzIExpbmVFdmVudDB4MUQgZXh0ZW5kcyBMaW5lRXZlbnQge1xcbiAgICBjb25zdHJ1Y3RvcihyZXBvLCBsaW5lLCBwYXJ0cykge1xcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMub3BlcmF0aW9uID0gKF9hID0gcGFydHNbTGluZUV2ZW50MHgxRF9maWVsZHMub3BlcmF0aW9uXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XFxuICAgICAgICB0aGlzLndheW1hcmsgPSAoX2IgPSBwYXJ0c1tMaW5lRXZlbnQweDFEX2ZpZWxkcy53YXltYXJrXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XFxuICAgICAgICB0aGlzLmlkID0gKF9kID0gKF9jID0gcGFydHNbTGluZUV2ZW50MHgxRF9maWVsZHMuaWRdKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudG9VcHBlckNhc2UoKSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogJyc7XFxuICAgICAgICB0aGlzLm5hbWUgPSAoX2UgPSBwYXJ0c1tMaW5lRXZlbnQweDFEX2ZpZWxkcy5uYW1lXSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogJyc7XFxuICAgICAgICB0aGlzLnRhcmdldElkID0gKF9nID0gKF9mID0gcGFydHNbTGluZUV2ZW50MHgxRF9maWVsZHMudGFyZ2V0SWRdKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YudG9VcHBlckNhc2UoKSkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogJyc7XFxuICAgICAgICB0aGlzLnRhcmdldE5hbWUgPSAoX2ggPSBwYXJ0c1tMaW5lRXZlbnQweDFEX2ZpZWxkcy50YXJnZXROYW1lXSkgIT09IG51bGwgJiYgX2ggIT09IHZvaWQgMCA/IF9oIDogJyc7XFxuICAgIH1cXG59XFxuY2xhc3MgTGluZUV2ZW50MjkgZXh0ZW5kcyBMaW5lRXZlbnQweDFEIHtcXG59XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9uZXR3b3JrX2xvZ19jb252ZXJ0ZXIvTGluZUV2ZW50MHgxRS50c1xcblxcblxcbi8vIExvc2Ugc3RhdHVzIGVmZmVjdCBldmVudFxcbi8vIEV4dGVuZCB0aGUgZ2FpbiBzdGF0dXMgZXZlbnQgdG8gcmVkdWNlIGR1cGxpY2F0ZSBjb2RlIHNpbmNlIHRoZXkncmVcXG4vLyB0aGUgc2FtZSBmcm9tIGEgZGF0YSBwZXJzcGVjdGl2ZVxcbmNsYXNzIExpbmVFdmVudDB4MUUgZXh0ZW5kcyBMaW5lRXZlbnQweDFBIHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbGluZSwgcGFydHMpIHtcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIGxldCBzdGFja0NvdW50VGV4dCA9ICcnO1xcbiAgICAgICAgaWYgKHRoaXMuc3RhY2tzID4gMCAmJiB0aGlzLnN0YWNrcyA8IDIwICYmXFxuICAgICAgICAgICAgTGluZUV2ZW50MHgxQS5zaG93U3RhY2tDb3VudEZvci5pbmNsdWRlcyh0aGlzLmFiaWxpdHlJZCkpXFxuICAgICAgICAgICAgc3RhY2tDb3VudFRleHQgPSAnICgnICsgdGhpcy5zdGFja3MudG9TdHJpbmcoKSArICcpJztcXG4gICAgICAgIHRoaXMuY29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgKyB0aGlzLnRhcmdldElkICtcXG4gICAgICAgICAgICAnOicgKyB0aGlzLnRhcmdldE5hbWUgK1xcbiAgICAgICAgICAgICcgbG9zZXMgdGhlIGVmZmVjdCBvZiAnICsgdGhpcy5hYmlsaXR5TmFtZSArXFxuICAgICAgICAgICAgJyBmcm9tICcgKyB0aGlzLmZhbGxiYWNrUmVzb2x2ZWRUYXJnZXROYW1lICtcXG4gICAgICAgICAgICAnIGZvciAnICsgdGhpcy5kdXJhdGlvblN0cmluZyArICcgU2Vjb25kcy4nICsgc3RhY2tDb3VudFRleHQ7XFxuICAgICAgICB0aGlzLnByb3BlckNhc2VDb252ZXJ0ZWRMaW5lID0gdGhpcy5wcmVmaXgoKSArIHRoaXMudGFyZ2V0SWQgK1xcbiAgICAgICAgICAgICc6JyArIEVtdWxhdG9yQ29tbW9uLnByb3BlckNhc2UodGhpcy50YXJnZXROYW1lKSArXFxuICAgICAgICAgICAgJyBsb3NlcyB0aGUgZWZmZWN0IG9mICcgKyB0aGlzLmFiaWxpdHlOYW1lICtcXG4gICAgICAgICAgICAnIGZyb20gJyArIEVtdWxhdG9yQ29tbW9uLnByb3BlckNhc2UodGhpcy5mYWxsYmFja1Jlc29sdmVkVGFyZ2V0TmFtZSkgK1xcbiAgICAgICAgICAgICcgZm9yICcgKyB0aGlzLmR1cmF0aW9uU3RyaW5nICsgJyBTZWNvbmRzLicgKyBzdGFja0NvdW50VGV4dDtcXG4gICAgfVxcbn1cXG5jbGFzcyBMaW5lRXZlbnQzMCBleHRlbmRzIExpbmVFdmVudDB4MUUge1xcbn1cXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDFGLnRzXFxuXFxuXFxuY29uc3Qgc3BsaXRGdW5jID0gKHMpID0+IFtcXG4gICAgcy5zdWJzdHIoNiwgMiksXFxuICAgIHMuc3Vic3RyKDQsIDIpLFxcbiAgICBzLnN1YnN0cigyLCAyKSxcXG4gICAgcy5zdWJzdHIoMCwgMiksXFxuXTtcXG5jb25zdCBMaW5lRXZlbnQweDFGX2ZpZWxkcyA9IHtcXG4gICAgaWQ6IDIsXFxuICAgIGRhdGFCeXRlczE6IDMsXFxuICAgIGRhdGFCeXRlczI6IDQsXFxuICAgIGRhdGFCeXRlczM6IDUsXFxuICAgIGRhdGFCeXRlczQ6IDYsXFxufTtcXG4vLyBKb2IgZ2F1Z2UgZXZlbnRcXG5jbGFzcyBMaW5lRXZlbnQweDFGIGV4dGVuZHMgTGluZUV2ZW50IHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbGluZSwgcGFydHMpIHtcXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qO1xcbiAgICAgICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgdGhpcy5pZCA9IChfYiA9IChfYSA9IHBhcnRzW0xpbmVFdmVudDB4MUZfZmllbGRzLmlkXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnO1xcbiAgICAgICAgdGhpcy5kYXRhQnl0ZXMxID0gRW11bGF0b3JDb21tb24uemVyb1BhZCgoX2MgPSBwYXJ0c1tMaW5lRXZlbnQweDFGX2ZpZWxkcy5kYXRhQnl0ZXMxXSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogJycpO1xcbiAgICAgICAgdGhpcy5kYXRhQnl0ZXMyID0gRW11bGF0b3JDb21tb24uemVyb1BhZCgoX2QgPSBwYXJ0c1tMaW5lRXZlbnQweDFGX2ZpZWxkcy5kYXRhQnl0ZXMyXSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogJycpO1xcbiAgICAgICAgdGhpcy5kYXRhQnl0ZXMzID0gRW11bGF0b3JDb21tb24uemVyb1BhZCgoX2UgPSBwYXJ0c1tMaW5lRXZlbnQweDFGX2ZpZWxkcy5kYXRhQnl0ZXMzXSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogJycpO1xcbiAgICAgICAgdGhpcy5kYXRhQnl0ZXM0ID0gRW11bGF0b3JDb21tb24uemVyb1BhZCgoX2YgPSBwYXJ0c1tMaW5lRXZlbnQweDFGX2ZpZWxkcy5kYXRhQnl0ZXM0XSkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogJycpO1xcbiAgICAgICAgdGhpcy5qb2JHYXVnZUJ5dGVzID0gW1xcbiAgICAgICAgICAgIC4uLnNwbGl0RnVuYyh0aGlzLmRhdGFCeXRlczEpLFxcbiAgICAgICAgICAgIC4uLnNwbGl0RnVuYyh0aGlzLmRhdGFCeXRlczIpLFxcbiAgICAgICAgICAgIC4uLnNwbGl0RnVuYyh0aGlzLmRhdGFCeXRlczMpLFxcbiAgICAgICAgICAgIC4uLnNwbGl0RnVuYyh0aGlzLmRhdGFCeXRlczQpLFxcbiAgICAgICAgXTtcXG4gICAgICAgIHRoaXMubmFtZSA9ICgoX2cgPSByZXBvLkNvbWJhdGFudHNbdGhpcy5pZF0pID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5uYW1lKSB8fCAnJztcXG4gICAgICAgIHJlcG8udXBkYXRlQ29tYmF0YW50KHRoaXMuaWQsIHtcXG4gICAgICAgICAgICBuYW1lOiAoX2ggPSByZXBvLkNvbWJhdGFudHNbdGhpcy5pZF0pID09PSBudWxsIHx8IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaC5uYW1lLFxcbiAgICAgICAgICAgIHNwYXduOiB0aGlzLnRpbWVzdGFtcCxcXG4gICAgICAgICAgICBkZXNwYXduOiB0aGlzLnRpbWVzdGFtcCxcXG4gICAgICAgICAgICBqb2I6IChfaiA9IHRoaXMuam9iR2F1Z2VCeXRlc1swXSkgPT09IG51bGwgfHwgX2ogPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9qLnRvVXBwZXJDYXNlKCksXFxuICAgICAgICB9KTtcXG4gICAgICAgIHRoaXMuY29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgK1xcbiAgICAgICAgICAgIHRoaXMuaWQgKyAnOicgKyB0aGlzLm5hbWUgK1xcbiAgICAgICAgICAgICc6JyArIHRoaXMuZGF0YUJ5dGVzMSArXFxuICAgICAgICAgICAgJzonICsgdGhpcy5kYXRhQnl0ZXMyICtcXG4gICAgICAgICAgICAnOicgKyB0aGlzLmRhdGFCeXRlczMgK1xcbiAgICAgICAgICAgICc6JyArIHRoaXMuZGF0YUJ5dGVzNDtcXG4gICAgICAgIHRoaXMucHJvcGVyQ2FzZUNvbnZlcnRlZExpbmUgPSB0aGlzLnByZWZpeCgpICtcXG4gICAgICAgICAgICB0aGlzLmlkICsgJzonICsgKEVtdWxhdG9yQ29tbW9uLnByb3BlckNhc2UodGhpcy5uYW1lKSkgK1xcbiAgICAgICAgICAgICc6JyArIHRoaXMuZGF0YUJ5dGVzMSArXFxuICAgICAgICAgICAgJzonICsgdGhpcy5kYXRhQnl0ZXMyICtcXG4gICAgICAgICAgICAnOicgKyB0aGlzLmRhdGFCeXRlczMgK1xcbiAgICAgICAgICAgICc6JyArIHRoaXMuZGF0YUJ5dGVzNDtcXG4gICAgfVxcbn1cXG5jbGFzcyBMaW5lRXZlbnQzMSBleHRlbmRzIExpbmVFdmVudDB4MUYge1xcbn1cXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDIyLnRzXFxuXFxuY29uc3QgTGluZUV2ZW50MHgyMl9maWVsZHMgPSB7XFxuICAgIGlkOiAyLFxcbiAgICBuYW1lOiAzLFxcbiAgICB0YXJnZXRJZDogNCxcXG4gICAgdGFyZ2V0TmFtZTogNSxcXG4gICAgdGFyZ2V0YWJsZTogNixcXG59O1xcbi8vIE5hbWVwbGF0ZSB0b2dnbGVcXG5jbGFzcyBMaW5lRXZlbnQweDIyIGV4dGVuZHMgTGluZUV2ZW50IHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbGluZSwgcGFydHMpIHtcXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZztcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMuaXNTb3VyY2UgPSB0cnVlO1xcbiAgICAgICAgdGhpcy5pZCA9IChfYiA9IChfYSA9IHBhcnRzW0xpbmVFdmVudDB4MjJfZmllbGRzLmlkXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnO1xcbiAgICAgICAgdGhpcy5uYW1lID0gKF9jID0gcGFydHNbTGluZUV2ZW50MHgyMl9maWVsZHMubmFtZV0pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnO1xcbiAgICAgICAgdGhpcy50YXJnZXRJZCA9IChfZSA9IChfZCA9IHBhcnRzW0xpbmVFdmVudDB4MjJfZmllbGRzLnRhcmdldElkXSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6ICcnO1xcbiAgICAgICAgdGhpcy50YXJnZXROYW1lID0gKF9mID0gcGFydHNbTGluZUV2ZW50MHgyMl9maWVsZHMudGFyZ2V0TmFtZV0pICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6ICcnO1xcbiAgICAgICAgdGhpcy50YXJnZXRhYmxlID0gISFwYXJzZUludCgoX2cgPSBwYXJ0c1tMaW5lRXZlbnQweDIyX2ZpZWxkcy50YXJnZXRhYmxlXSkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogJycsIDE2KTtcXG4gICAgfVxcbn1cXG5jbGFzcyBMaW5lRXZlbnQzNCBleHRlbmRzIExpbmVFdmVudDB4MjIge1xcbn1cXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL25ldHdvcmtfbG9nX2NvbnZlcnRlci9MaW5lRXZlbnQweDIzLnRzXFxuXFxuY29uc3QgTGluZUV2ZW50MHgyM19maWVsZHMgPSB7XFxuICAgIGlkOiAyLFxcbiAgICBuYW1lOiAzLFxcbiAgICB0YXJnZXRJZDogNCxcXG4gICAgdGFyZ2V0TmFtZTogNSxcXG4gICAgdGV0aGVySWQ6IDgsXFxufTtcXG4vLyBUZXRoZXIgZXZlbnRcXG5jbGFzcyBMaW5lRXZlbnQweDIzIGV4dGVuZHMgTGluZUV2ZW50IHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbGluZSwgcGFydHMpIHtcXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZztcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMuaWQgPSAoX2IgPSAoX2EgPSBwYXJ0c1tMaW5lRXZlbnQweDIzX2ZpZWxkcy5pZF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b1VwcGVyQ2FzZSgpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJztcXG4gICAgICAgIHRoaXMubmFtZSA9IChfYyA9IHBhcnRzW0xpbmVFdmVudDB4MjNfZmllbGRzLm5hbWVdKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAnJztcXG4gICAgICAgIHRoaXMudGFyZ2V0SWQgPSAoX2UgPSAoX2QgPSBwYXJ0c1tMaW5lRXZlbnQweDIzX2ZpZWxkcy50YXJnZXRJZF0pID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC50b1VwcGVyQ2FzZSgpKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAnJztcXG4gICAgICAgIHRoaXMudGFyZ2V0TmFtZSA9IChfZiA9IHBhcnRzW0xpbmVFdmVudDB4MjNfZmllbGRzLnRhcmdldE5hbWVdKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAnJztcXG4gICAgICAgIHRoaXMudGV0aGVySWQgPSAoX2cgPSBwYXJ0c1tMaW5lRXZlbnQweDIzX2ZpZWxkcy50ZXRoZXJJZF0pICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6ICcnO1xcbiAgICB9XFxufVxcbmNsYXNzIExpbmVFdmVudDM1IGV4dGVuZHMgTGluZUV2ZW50MHgyMyB7XFxufVxcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvbmV0d29ya19sb2dfY29udmVydGVyL0xpbmVFdmVudDB4MjQudHNcXG5cXG5jb25zdCBMaW5lRXZlbnQweDI0X2ZpZWxkcyA9IHtcXG4gICAgdmFsdWVIZXg6IDIsXFxuICAgIGJhcnM6IDMsXFxufTtcXG4vLyBMaW1pdCBnYXVnZSBldmVudFxcbmNsYXNzIExpbmVFdmVudDB4MjQgZXh0ZW5kcyBMaW5lRXZlbnQge1xcbiAgICBjb25zdHJ1Y3RvcihyZXBvLCBsaW5lLCBwYXJ0cykge1xcbiAgICAgICAgdmFyIF9hLCBfYjtcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMudmFsdWVIZXggPSAoX2EgPSBwYXJ0c1tMaW5lRXZlbnQweDI0X2ZpZWxkcy52YWx1ZUhleF0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xcbiAgICAgICAgdGhpcy52YWx1ZURlYyA9IHBhcnNlSW50KHRoaXMudmFsdWVIZXgsIDE2KTtcXG4gICAgICAgIHRoaXMuYmFycyA9IChfYiA9IHBhcnRzW0xpbmVFdmVudDB4MjRfZmllbGRzLmJhcnNdKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJztcXG4gICAgICAgIHRoaXMuY29udmVydGVkTGluZSA9IHRoaXMucHJlZml4KCkgKyAnTGltaXQgQnJlYWs6ICcgKyB0aGlzLnZhbHVlSGV4O1xcbiAgICB9XFxufVxcbmNsYXNzIExpbmVFdmVudDM2IGV4dGVuZHMgTGluZUV2ZW50MHgyNCB7XFxufVxcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvbmV0d29ya19sb2dfY29udmVydGVyL0xpbmVFdmVudDB4MjUudHNcXG5cXG5jb25zdCBMaW5lRXZlbnQweDI1X2ZpZWxkcyA9IHtcXG4gICAgaWQ6IDIsXFxuICAgIG5hbWU6IDMsXFxuICAgIHNlcXVlbmNlSWQ6IDQsXFxuICAgIGN1cnJlbnRIcDogNSxcXG4gICAgbWF4SHA6IDYsXFxuICAgIGN1cnJlbnRNcDogNyxcXG4gICAgbWF4TXA6IDgsXFxuICAgIGN1cnJlbnRUcDogOSxcXG4gICAgbWF4VHA6IDEwLFxcbiAgICB4OiAxMSxcXG4gICAgeTogMTIsXFxuICAgIHo6IDEzLFxcbiAgICBoZWFkaW5nOiAxNCxcXG59O1xcbi8vIEFjdGlvbiBzeW5jIGV2ZW50XFxuY2xhc3MgTGluZUV2ZW50MHgyNSBleHRlbmRzIExpbmVFdmVudCB7XFxuICAgIGNvbnN0cnVjdG9yKHJlcG8sIGxpbmUsIHBhcnRzKSB7XFxuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sLCBfbSwgX28sIF9wO1xcbiAgICAgICAgc3VwZXIocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgdGhpcy5pc1NvdXJjZSA9IHRydWU7XFxuICAgICAgICB0aGlzLmlkID0gKF9iID0gKF9hID0gcGFydHNbTGluZUV2ZW50MHgyNV9maWVsZHMuaWRdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9VcHBlckNhc2UoKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XFxuICAgICAgICB0aGlzLm5hbWUgPSAoX2MgPSBwYXJ0c1tMaW5lRXZlbnQweDI1X2ZpZWxkcy5uYW1lXSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogJyc7XFxuICAgICAgICB0aGlzLnNlcXVlbmNlSWQgPSAoX2QgPSBwYXJ0c1tMaW5lRXZlbnQweDI1X2ZpZWxkcy5zZXF1ZW5jZUlkXSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogJyc7XFxuICAgICAgICB0aGlzLmhwID0gcGFyc2VJbnQoKF9lID0gcGFydHNbTGluZUV2ZW50MHgyNV9maWVsZHMuY3VycmVudEhwXSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogJycpO1xcbiAgICAgICAgdGhpcy5tYXhIcCA9IHBhcnNlSW50KChfZiA9IHBhcnRzW0xpbmVFdmVudDB4MjVfZmllbGRzLm1heEhwXSkgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogJycpO1xcbiAgICAgICAgdGhpcy5tcCA9IHBhcnNlSW50KChfZyA9IHBhcnRzW0xpbmVFdmVudDB4MjVfZmllbGRzLmN1cnJlbnRNcF0pICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6ICcnKTtcXG4gICAgICAgIHRoaXMubWF4TXAgPSBwYXJzZUludCgoX2ggPSBwYXJ0c1tMaW5lRXZlbnQweDI1X2ZpZWxkcy5tYXhNcF0pICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6ICcnKTtcXG4gICAgICAgIHRoaXMudHAgPSBwYXJzZUludCgoX2ogPSBwYXJ0c1tMaW5lRXZlbnQweDI1X2ZpZWxkcy5jdXJyZW50VHBdKSAhPT0gbnVsbCAmJiBfaiAhPT0gdm9pZCAwID8gX2ogOiAnJyk7XFxuICAgICAgICB0aGlzLm1heFRwID0gcGFyc2VJbnQoKF9rID0gcGFydHNbTGluZUV2ZW50MHgyNV9maWVsZHMubWF4VHBdKSAhPT0gbnVsbCAmJiBfayAhPT0gdm9pZCAwID8gX2sgOiAnJyk7XFxuICAgICAgICB0aGlzLnggPSBwYXJzZUZsb2F0KChfbCA9IHBhcnRzW0xpbmVFdmVudDB4MjVfZmllbGRzLnhdKSAhPT0gbnVsbCAmJiBfbCAhPT0gdm9pZCAwID8gX2wgOiAnJyk7XFxuICAgICAgICB0aGlzLnkgPSBwYXJzZUZsb2F0KChfbSA9IHBhcnRzW0xpbmVFdmVudDB4MjVfZmllbGRzLnldKSAhPT0gbnVsbCAmJiBfbSAhPT0gdm9pZCAwID8gX20gOiAnJyk7XFxuICAgICAgICB0aGlzLnogPSBwYXJzZUZsb2F0KChfbyA9IHBhcnRzW0xpbmVFdmVudDB4MjVfZmllbGRzLnpdKSAhPT0gbnVsbCAmJiBfbyAhPT0gdm9pZCAwID8gX28gOiAnJyk7XFxuICAgICAgICB0aGlzLmhlYWRpbmcgPSBwYXJzZUZsb2F0KChfcCA9IHBhcnRzW0xpbmVFdmVudDB4MjVfZmllbGRzLmhlYWRpbmddKSAhPT0gbnVsbCAmJiBfcCAhPT0gdm9pZCAwID8gX3AgOiAnJyk7XFxuICAgIH1cXG59XFxuY2xhc3MgTGluZUV2ZW50MzcgZXh0ZW5kcyBMaW5lRXZlbnQweDI1IHtcXG59XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9uZXR3b3JrX2xvZ19jb252ZXJ0ZXIvTGluZUV2ZW50MHgyNi50c1xcblxcblxcblxcbmNvbnN0IExpbmVFdmVudDB4MjZfZmllbGRzID0ge1xcbiAgICBpZDogMixcXG4gICAgbmFtZTogMyxcXG4gICAgam9iTGV2ZWxEYXRhOiA0LFxcbiAgICBjdXJyZW50SHA6IDUsXFxuICAgIG1heEhwOiA2LFxcbiAgICBjdXJyZW50TXA6IDcsXFxuICAgIG1heE1wOiA4LFxcbiAgICBjdXJyZW50VHA6IDksXFxuICAgIG1heFRwOiAxMCxcXG4gICAgeDogMTEsXFxuICAgIHk6IDEyLFxcbiAgICB6OiAxMyxcXG4gICAgaGVhZGluZzogMTQsXFxufTtcXG4vLyBOZXR3b3JrIHN0YXR1cyBlZmZlY3QgZXZlbnRcXG5jbGFzcyBMaW5lRXZlbnQweDI2IGV4dGVuZHMgTGluZUV2ZW50IHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbGluZSwgcGFydHMpIHtcXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tLCBfbywgX3A7XFxuICAgICAgICBzdXBlcihyZXBvLCBsaW5lLCBwYXJ0cyk7XFxuICAgICAgICB0aGlzLmlzU291cmNlID0gdHJ1ZTtcXG4gICAgICAgIHRoaXMuaXNKb2JMZXZlbCA9IHRydWU7XFxuICAgICAgICB0aGlzLmlkID0gKF9iID0gKF9hID0gcGFydHNbTGluZUV2ZW50MHgyNl9maWVsZHMuaWRdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9VcHBlckNhc2UoKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XFxuICAgICAgICB0aGlzLm5hbWUgPSAoX2MgPSBwYXJ0c1tMaW5lRXZlbnQweDI2X2ZpZWxkcy5uYW1lXSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogJyc7XFxuICAgICAgICB0aGlzLmpvYkxldmVsRGF0YSA9IChfZCA9IHBhcnRzW0xpbmVFdmVudDB4MjZfZmllbGRzLmpvYkxldmVsRGF0YV0pICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6ICcnO1xcbiAgICAgICAgdGhpcy5ocCA9IHBhcnNlSW50KChfZSA9IHBhcnRzW0xpbmVFdmVudDB4MjZfZmllbGRzLmN1cnJlbnRIcF0pICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6ICcnKTtcXG4gICAgICAgIHRoaXMubWF4SHAgPSBwYXJzZUludCgoX2YgPSBwYXJ0c1tMaW5lRXZlbnQweDI2X2ZpZWxkcy5tYXhIcF0pICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6ICcnKTtcXG4gICAgICAgIHRoaXMubXAgPSBwYXJzZUludCgoX2cgPSBwYXJ0c1tMaW5lRXZlbnQweDI2X2ZpZWxkcy5jdXJyZW50TXBdKSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiAnJyk7XFxuICAgICAgICB0aGlzLm1heE1wID0gcGFyc2VJbnQoKF9oID0gcGFydHNbTGluZUV2ZW50MHgyNl9maWVsZHMubWF4TXBdKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiAnJyk7XFxuICAgICAgICB0aGlzLnRwID0gcGFyc2VJbnQoKF9qID0gcGFydHNbTGluZUV2ZW50MHgyNl9maWVsZHMuY3VycmVudFRwXSkgIT09IG51bGwgJiYgX2ogIT09IHZvaWQgMCA/IF9qIDogJycpO1xcbiAgICAgICAgdGhpcy5tYXhUcCA9IHBhcnNlSW50KChfayA9IHBhcnRzW0xpbmVFdmVudDB4MjZfZmllbGRzLm1heFRwXSkgIT09IG51bGwgJiYgX2sgIT09IHZvaWQgMCA/IF9rIDogJycpO1xcbiAgICAgICAgdGhpcy54ID0gcGFyc2VGbG9hdCgoX2wgPSBwYXJ0c1tMaW5lRXZlbnQweDI2X2ZpZWxkcy54XSkgIT09IG51bGwgJiYgX2wgIT09IHZvaWQgMCA/IF9sIDogJycpO1xcbiAgICAgICAgdGhpcy55ID0gcGFyc2VGbG9hdCgoX20gPSBwYXJ0c1tMaW5lRXZlbnQweDI2X2ZpZWxkcy55XSkgIT09IG51bGwgJiYgX20gIT09IHZvaWQgMCA/IF9tIDogJycpO1xcbiAgICAgICAgdGhpcy56ID0gcGFyc2VGbG9hdCgoX28gPSBwYXJ0c1tMaW5lRXZlbnQweDI2X2ZpZWxkcy56XSkgIT09IG51bGwgJiYgX28gIT09IHZvaWQgMCA/IF9vIDogJycpO1xcbiAgICAgICAgdGhpcy5oZWFkaW5nID0gcGFyc2VGbG9hdCgoX3AgPSBwYXJ0c1tMaW5lRXZlbnQweDI2X2ZpZWxkcy5oZWFkaW5nXSkgIT09IG51bGwgJiYgX3AgIT09IHZvaWQgMCA/IF9wIDogJycpO1xcbiAgICAgICAgY29uc3QgcGFkZGVkID0gRW11bGF0b3JDb21tb24uemVyb1BhZCh0aGlzLmpvYkxldmVsRGF0YSwgOCk7XFxuICAgICAgICB0aGlzLmpvYklkSGV4ID0gcGFkZGVkLnN1YnN0cig2LCAyKS50b1VwcGVyQ2FzZSgpO1xcbiAgICAgICAgdGhpcy5qb2JJZCA9IHBhcnNlSW50KHRoaXMuam9iSWRIZXgsIDE2KTtcXG4gICAgICAgIHRoaXMuam9iID0gdXRpbC5qb2JFbnVtVG9Kb2IodGhpcy5qb2JJZCk7XFxuICAgICAgICB0aGlzLmxldmVsID0gcGFyc2VJbnQocGFkZGVkLnN1YnN0cig0LCAyKSwgMTYpO1xcbiAgICB9XFxufVxcbmNsYXNzIExpbmVFdmVudDM4IGV4dGVuZHMgTGluZUV2ZW50MHgyNiB7XFxufVxcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvbmV0d29ya19sb2dfY29udmVydGVyL0xpbmVFdmVudDB4MjcudHNcXG5cXG5jb25zdCBMaW5lRXZlbnQweDI3X2ZpZWxkcyA9IHtcXG4gICAgaWQ6IDIsXFxuICAgIG5hbWU6IDMsXFxuICAgIGN1cnJlbnRIcDogNCxcXG4gICAgbWF4SHA6IDUsXFxuICAgIGN1cnJlbnRNcDogNixcXG4gICAgbWF4TXA6IDcsXFxuICAgIGN1cnJlbnRUcDogOCxcXG4gICAgbWF4VHA6IDksXFxuICAgIHg6IDEwLFxcbiAgICB5OiAxMSxcXG4gICAgejogMTIsXFxuICAgIGhlYWRpbmc6IDEzLFxcbn07XFxuLy8gTmV0d29yayB1cGRhdGUgaHAgZXZlbnRcXG5jbGFzcyBMaW5lRXZlbnQweDI3IGV4dGVuZHMgTGluZUV2ZW50IHtcXG4gICAgY29uc3RydWN0b3IocmVwbywgbGluZSwgcGFydHMpIHtcXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tLCBfbztcXG4gICAgICAgIHN1cGVyKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgIHRoaXMuaXNTb3VyY2UgPSB0cnVlO1xcbiAgICAgICAgdGhpcy5pZCA9IChfYiA9IChfYSA9IHBhcnRzW0xpbmVFdmVudDB4MjdfZmllbGRzLmlkXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvVXBwZXJDYXNlKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnO1xcbiAgICAgICAgdGhpcy5uYW1lID0gKF9jID0gcGFydHNbTGluZUV2ZW50MHgyN19maWVsZHMubmFtZV0pICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnO1xcbiAgICAgICAgdGhpcy5ocCA9IHBhcnNlSW50KChfZCA9IHBhcnRzW0xpbmVFdmVudDB4MjdfZmllbGRzLmN1cnJlbnRIcF0pICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6ICcnKTtcXG4gICAgICAgIHRoaXMubWF4SHAgPSBwYXJzZUludCgoX2UgPSBwYXJ0c1tMaW5lRXZlbnQweDI3X2ZpZWxkcy5tYXhIcF0pICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6ICcnKTtcXG4gICAgICAgIHRoaXMubXAgPSBwYXJzZUludCgoX2YgPSBwYXJ0c1tMaW5lRXZlbnQweDI3X2ZpZWxkcy5jdXJyZW50TXBdKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAnJyk7XFxuICAgICAgICB0aGlzLm1heE1wID0gcGFyc2VJbnQoKF9nID0gcGFydHNbTGluZUV2ZW50MHgyN19maWVsZHMubWF4TXBdKSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiAnJyk7XFxuICAgICAgICB0aGlzLnRwID0gcGFyc2VJbnQoKF9oID0gcGFydHNbTGluZUV2ZW50MHgyN19maWVsZHMuY3VycmVudFRwXSkgIT09IG51bGwgJiYgX2ggIT09IHZvaWQgMCA/IF9oIDogJycpO1xcbiAgICAgICAgdGhpcy5tYXhUcCA9IHBhcnNlSW50KChfaiA9IHBhcnRzW0xpbmVFdmVudDB4MjdfZmllbGRzLm1heFRwXSkgIT09IG51bGwgJiYgX2ogIT09IHZvaWQgMCA/IF9qIDogJycpO1xcbiAgICAgICAgdGhpcy54ID0gcGFyc2VGbG9hdCgoX2sgPSBwYXJ0c1tMaW5lRXZlbnQweDI3X2ZpZWxkcy54XSkgIT09IG51bGwgJiYgX2sgIT09IHZvaWQgMCA/IF9rIDogJycpO1xcbiAgICAgICAgdGhpcy55ID0gcGFyc2VGbG9hdCgoX2wgPSBwYXJ0c1tMaW5lRXZlbnQweDI3X2ZpZWxkcy55XSkgIT09IG51bGwgJiYgX2wgIT09IHZvaWQgMCA/IF9sIDogJycpO1xcbiAgICAgICAgdGhpcy56ID0gcGFyc2VGbG9hdCgoX20gPSBwYXJ0c1tMaW5lRXZlbnQweDI3X2ZpZWxkcy56XSkgIT09IG51bGwgJiYgX20gIT09IHZvaWQgMCA/IF9tIDogJycpO1xcbiAgICAgICAgdGhpcy5oZWFkaW5nID0gcGFyc2VGbG9hdCgoX28gPSBwYXJ0c1tMaW5lRXZlbnQweDI3X2ZpZWxkcy5oZWFkaW5nXSkgIT09IG51bGwgJiYgX28gIT09IHZvaWQgMCA/IF9vIDogJycpO1xcbiAgICB9XFxufVxcbmNsYXNzIExpbmVFdmVudDM5IGV4dGVuZHMgTGluZUV2ZW50MHgyNyB7XFxufVxcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvbmV0d29ya19sb2dfY29udmVydGVyL1BhcnNlTGluZS50c1xcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcbmNsYXNzIFBhcnNlTGluZSB7XFxuICAgIHN0YXRpYyBwYXJzZShyZXBvLCBsaW5lKSB7XFxuICAgICAgICBsZXQgcmV0O1xcbiAgICAgICAgY29uc3QgcGFydHMgPSBsaW5lLnNwbGl0KCd8Jyk7XFxuICAgICAgICBjb25zdCBldmVudCA9IHBhcnRzWzBdO1xcbiAgICAgICAgLy8gRG9uJ3QgcGFyc2UgcmF3IG5ldHdvcmsgcGFja2V0IGxpbmVzXFxuICAgICAgICBpZiAoIWV2ZW50IHx8IGV2ZW50ID09PSAnMjUyJylcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAvLyBUaGlzIGlzIHVnbHksIGJ1dCBXZWJwYWNrIHByZWZlcnMgYmVpbmcgZXhwbGljaXRcXG4gICAgICAgIHN3aXRjaCAoJ0xpbmVFdmVudCcgKyBldmVudCkge1xcbiAgICAgICAgICAgIGNhc2UgJ0xpbmVFdmVudDAwJzpcXG4gICAgICAgICAgICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDAwKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgY2FzZSAnTGluZUV2ZW50MDEnOlxcbiAgICAgICAgICAgICAgICByZXQgPSBuZXcgTGluZUV2ZW50MDEocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlICdMaW5lRXZlbnQwMic6XFxuICAgICAgICAgICAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQwMihyZXBvLCBsaW5lLCBwYXJ0cyk7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIGNhc2UgJ0xpbmVFdmVudDAzJzpcXG4gICAgICAgICAgICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDAzKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgY2FzZSAnTGluZUV2ZW50MDQnOlxcbiAgICAgICAgICAgICAgICByZXQgPSBuZXcgTGluZUV2ZW50MDQocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlICdMaW5lRXZlbnQxMic6XFxuICAgICAgICAgICAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQxMihyZXBvLCBsaW5lLCBwYXJ0cyk7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIGNhc2UgJ0xpbmVFdmVudDIwJzpcXG4gICAgICAgICAgICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDIwKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgY2FzZSAnTGluZUV2ZW50MjEnOlxcbiAgICAgICAgICAgICAgICByZXQgPSBuZXcgTGluZUV2ZW50MjEocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlICdMaW5lRXZlbnQyMic6XFxuICAgICAgICAgICAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQyMihyZXBvLCBsaW5lLCBwYXJ0cyk7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIGNhc2UgJ0xpbmVFdmVudDIzJzpcXG4gICAgICAgICAgICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDIzKHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgY2FzZSAnTGluZUV2ZW50MjQnOlxcbiAgICAgICAgICAgICAgICByZXQgPSBuZXcgTGluZUV2ZW50MjQocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlICdMaW5lRXZlbnQyNSc6XFxuICAgICAgICAgICAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQyNShyZXBvLCBsaW5lLCBwYXJ0cyk7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIGNhc2UgJ0xpbmVFdmVudDI2JzpcXG4gICAgICAgICAgICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDI2KHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgY2FzZSAnTGluZUV2ZW50MjcnOlxcbiAgICAgICAgICAgICAgICByZXQgPSBuZXcgTGluZUV2ZW50MjcocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlICdMaW5lRXZlbnQyOCc6XFxuICAgICAgICAgICAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQyOChyZXBvLCBsaW5lLCBwYXJ0cyk7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIGNhc2UgJ0xpbmVFdmVudDI5JzpcXG4gICAgICAgICAgICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDI5KHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgY2FzZSAnTGluZUV2ZW50MzAnOlxcbiAgICAgICAgICAgICAgICByZXQgPSBuZXcgTGluZUV2ZW50MzAocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlICdMaW5lRXZlbnQzMSc6XFxuICAgICAgICAgICAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQzMShyZXBvLCBsaW5lLCBwYXJ0cyk7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIGNhc2UgJ0xpbmVFdmVudDM0JzpcXG4gICAgICAgICAgICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDM0KHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgY2FzZSAnTGluZUV2ZW50MzUnOlxcbiAgICAgICAgICAgICAgICByZXQgPSBuZXcgTGluZUV2ZW50MzUocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlICdMaW5lRXZlbnQzNic6XFxuICAgICAgICAgICAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQzNihyZXBvLCBsaW5lLCBwYXJ0cyk7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIGNhc2UgJ0xpbmVFdmVudDM3JzpcXG4gICAgICAgICAgICAgICAgcmV0ID0gbmV3IExpbmVFdmVudDM3KHJlcG8sIGxpbmUsIHBhcnRzKTtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgY2FzZSAnTGluZUV2ZW50MzgnOlxcbiAgICAgICAgICAgICAgICByZXQgPSBuZXcgTGluZUV2ZW50MzgocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlICdMaW5lRXZlbnQzOSc6XFxuICAgICAgICAgICAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQzOShyZXBvLCBsaW5lLCBwYXJ0cyk7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIGRlZmF1bHQ6XFxuICAgICAgICAgICAgICAgIHJldCA9IG5ldyBMaW5lRXZlbnQocmVwbywgbGluZSwgcGFydHMpO1xcbiAgICAgICAgfVxcbiAgICAgICAgLy8gQWxzbyBkb24ndCBwYXJzZSBsaW5lcyB3aXRoIGEgbm9uLXNhbmUgZGF0ZS4gVGhpcyBpcyAyMDAwLTAxLTAxIDAwOjAwOjAwXFxuICAgICAgICBpZiAocmV0ICYmIHJldC50aW1lc3RhbXAgPCA5NDY2ODQ4MDApXFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgLy8gRmluYWxseSwgaWYgdGhlIG9iamVjdCBtYXJrcyBpdHNlbGYgYXMgaW52YWxpZCwgc2tpcCBpdFxcbiAgICAgICAgaWYgKHJldCAmJiByZXQuaW52YWxpZClcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICByZXR1cm4gcmV0O1xcbiAgICB9XFxufVxcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3VpL3JhaWRib3NzL2VtdWxhdG9yL2RhdGEvTmV0d29ya0xvZ0NvbnZlcnRlci50c1xcblxcblxcblxcbmNvbnN0IGlzTGluZUV2ZW50ID0gKGxpbmUpID0+IHtcXG4gICAgcmV0dXJuICEhbGluZTtcXG59O1xcbmNsYXNzIE5ldHdvcmtMb2dDb252ZXJ0ZXIgZXh0ZW5kcyBFdmVudEJ1cyB7XFxuICAgIGNvbnZlcnRGaWxlKGRhdGEpIHtcXG4gICAgICAgIGNvbnN0IHJlcG8gPSBuZXcgTG9nUmVwb3NpdG9yeSgpO1xcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydExpbmVzKFxcbiAgICAgICAgLy8gU3BsaXQgZGF0YSBpbnRvIGFuIGFycmF5IG9mIHNlcGFyYXRlIGxpbmVzLCByZW1vdmluZyBhbnkgYmxhbmsgbGluZXMuXFxuICAgICAgICBkYXRhLnNwbGl0KE5ldHdvcmtMb2dDb252ZXJ0ZXIubGluZVNwbGl0UmVnZXgpLmZpbHRlcigobCkgPT4gbCAhPT0gJycpLCByZXBvKTtcXG4gICAgfVxcbiAgICBjb252ZXJ0TGluZXMobGluZXMsIHJlcG8pIHtcXG4gICAgICAgIGxldCBsaW5lRXZlbnRzID0gbGluZXMubWFwKChsKSA9PiBQYXJzZUxpbmUucGFyc2UocmVwbywgbCkpLmZpbHRlcihpc0xpbmVFdmVudCk7XFxuICAgICAgICAvLyBDYWxsIGBjb252ZXJ0YCB0byBjb252ZXJ0IHRoZSBuZXR3b3JrIGxpbmUgdG8gbm9uLW5ldHdvcmsgZm9ybWF0IGFuZCB1cGRhdGUgaW5kZXhpbmcgdmFsdWVzXFxuICAgICAgICBsaW5lRXZlbnRzID0gbGluZUV2ZW50cy5tYXAoKGwsIGkpID0+IHtcXG4gICAgICAgICAgICBsLmluZGV4ID0gaTtcXG4gICAgICAgICAgICByZXR1cm4gbDtcXG4gICAgICAgIH0pO1xcbiAgICAgICAgLy8gU29ydCB0aGUgbGluZXMgYmFzZWQgb24gYCR7dGltZXN0YW1wfV8ke2luZGV4fWAgdG8gaGFuZGxlIG91dC1vZi1vcmRlciBsaW5lcyBwcm9wZXJseVxcbiAgICAgICAgLy8gQFRPRE86IFJlbW92ZSB0aGlzIG9uY2UgdW5kZXJseWluZyBDb21iYXRhbnRUcmFja2VyIHVwZGF0ZSBpc3N1ZXMgYXJlIHJlc29sdmVkXFxuICAgICAgICByZXR1cm4gbGluZUV2ZW50cy5zb3J0KChsLCByKSA9PiAoYCR7bC50aW1lc3RhbXB9XyR7bC5pbmRleH1gKS5sb2NhbGVDb21wYXJlKGAke3IudGltZXN0YW1wfV8ke3IuaW5kZXh9YCkpO1xcbiAgICB9XFxufVxcbk5ldHdvcmtMb2dDb252ZXJ0ZXIubGluZVNwbGl0UmVnZXggPSAvXFxcXHI/XFxcXG4vZ207XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vcmVzb3VyY2VzL2xhbmd1YWdlcy50c1xcbmNvbnN0IGxhbmd1YWdlcyA9IFsnZW4nLCAnZGUnLCAnZnInLCAnamEnLCAnY24nLCAna28nXTtcXG5jb25zdCBpc0xhbmcgPSAobGFuZykgPT4ge1xcbiAgICBjb25zdCBsYW5nU3RycyA9IGxhbmd1YWdlcztcXG4gICAgaWYgKCFsYW5nKVxcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICByZXR1cm4gbGFuZ1N0cnMuaW5jbHVkZXMobGFuZyk7XFxufTtcXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi91aS9yYWlkYm9zcy9lbXVsYXRvci9kYXRhL0VuY291bnRlci50c1xcblxcblxcblxcblxcblxcblxcblxcblxcbmNvbnN0IGlzUGV0TmFtZSA9IChuYW1lLCBsYW5ndWFnZSkgPT4ge1xcbiAgICBpZiAobGFuZ3VhZ2UpXFxuICAgICAgICByZXR1cm4gcGV0X25hbWVzW2xhbmd1YWdlXS5pbmNsdWRlcyhuYW1lKTtcXG4gICAgZm9yIChjb25zdCBsYW5nIGluIHBldF9uYW1lcykge1xcbiAgICAgICAgaWYgKCFpc0xhbmcobGFuZykpXFxuICAgICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xcbiAgICAgICAgaWYgKHBldF9uYW1lc1tsYW5nXS5pbmNsdWRlcyhuYW1lKSlcXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfVxcbiAgICByZXR1cm4gZmFsc2U7XFxufTtcXG5jb25zdCBpc1ZhbGlkVGltZXN0YW1wID0gKHRpbWVzdGFtcCkgPT4ge1xcbiAgICByZXR1cm4gdGltZXN0YW1wID4gMCAmJiB0aW1lc3RhbXAgPCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcXG59O1xcbmNsYXNzIEVuY291bnRlciB7XFxuICAgIGNvbnN0cnVjdG9yKGVuY291bnRlckRheSwgZW5jb3VudGVyWm9uZUlkLCBlbmNvdW50ZXJab25lTmFtZSwgbG9nTGluZXMpIHtcXG4gICAgICAgIHRoaXMuZW5jb3VudGVyRGF5ID0gZW5jb3VudGVyRGF5O1xcbiAgICAgICAgdGhpcy5lbmNvdW50ZXJab25lSWQgPSBlbmNvdW50ZXJab25lSWQ7XFxuICAgICAgICB0aGlzLmVuY291bnRlclpvbmVOYW1lID0gZW5jb3VudGVyWm9uZU5hbWU7XFxuICAgICAgICB0aGlzLmxvZ0xpbmVzID0gbG9nTGluZXM7XFxuICAgICAgICB0aGlzLmluaXRpYWxPZmZzZXQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcXG4gICAgICAgIHRoaXMuZW5kU3RhdHVzID0gJ1Vua25vd24nO1xcbiAgICAgICAgdGhpcy5zdGFydFN0YXR1cyA9ICdVbmtub3duJztcXG4gICAgICAgIHRoaXMuZW5nYWdlQXQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcXG4gICAgICAgIHRoaXMuZmlyc3RQbGF5ZXJBYmlsaXR5ID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XFxuICAgICAgICB0aGlzLmZpcnN0RW5lbXlBYmlsaXR5ID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XFxuICAgICAgICB0aGlzLmZpcnN0TGluZUluZGV4ID0gMDtcXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lc3RhbXAgPSAwO1xcbiAgICAgICAgdGhpcy5lbmRUaW1lc3RhbXAgPSAwO1xcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IDA7XFxuICAgICAgICB0aGlzLnBsYXliYWNrT2Zmc2V0ID0gMDtcXG4gICAgICAgIHRoaXMubGFuZ3VhZ2UgPSAnZW4nO1xcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gRW5jb3VudGVyLmVuY291bnRlclZlcnNpb247XFxuICAgIH1cXG4gICAgaW5pdGlhbGl6ZSgpIHtcXG4gICAgICAgIGNvbnN0IHN0YXJ0U3RhdHVzZXMgPSBuZXcgU2V0KCk7XFxuICAgICAgICB0aGlzLmxvZ0xpbmVzLmZvckVhY2goKGxpbmUsIGkpID0+IHtcXG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XFxuICAgICAgICAgICAgaWYgKCFsaW5lKVxcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XFxuICAgICAgICAgICAgbGV0IHJlcyA9IEVtdWxhdG9yQ29tbW9uLm1hdGNoU3RhcnQobGluZS5uZXR3b3JrTGluZSk7XFxuICAgICAgICAgICAgaWYgKHJlcykge1xcbiAgICAgICAgICAgICAgICB0aGlzLmZpcnN0TGluZUluZGV4ID0gaTtcXG4gICAgICAgICAgICAgICAgaWYgKChfYSA9IHJlcy5ncm91cHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5TdGFydFR5cGUpXFxuICAgICAgICAgICAgICAgICAgICBzdGFydFN0YXR1c2VzLmFkZChyZXMuZ3JvdXBzLlN0YXJ0VHlwZSk7XFxuICAgICAgICAgICAgICAgIGlmICgoX2IgPSByZXMuZ3JvdXBzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuU3RhcnRJbikge1xcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRJbiA9IHBhcnNlSW50KHJlcy5ncm91cHMuU3RhcnRJbik7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRJbiA+PSAwKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5nYWdlQXQgPSBNYXRoLm1pbihsaW5lLnRpbWVzdGFtcCArIHN0YXJ0SW4sIHRoaXMuZW5nYWdlQXQpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgICAgICByZXMgPSBFbXVsYXRvckNvbW1vbi5tYXRjaEVuZChsaW5lLm5ldHdvcmtMaW5lKTtcXG4gICAgICAgICAgICAgICAgaWYgKHJlcykge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKChfYyA9IHJlcy5ncm91cHMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5FbmRUeXBlKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kU3RhdHVzID0gcmVzLmdyb3Vwcy5FbmRUeXBlO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzTGluZUV2ZW50U291cmNlKGxpbmUpICYmIGlzTGluZUV2ZW50VGFyZ2V0KGxpbmUpKSB7XFxuICAgICAgICAgICAgICAgICAgICBpZiAobGluZS5pZC5zdGFydHNXaXRoKCcxJykgfHxcXG4gICAgICAgICAgICAgICAgICAgICAgICAobGluZS5pZC5zdGFydHNXaXRoKCc0JykgJiYgaXNQZXROYW1lKGxpbmUubmFtZSwgdGhpcy5sYW5ndWFnZSkpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGxheWVyIG9yIHBldCBhYmlsaXR5XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmUudGFyZ2V0SWQuc3RhcnRzV2l0aCgnNCcpICYmICFpc1BldE5hbWUobGluZS50YXJnZXROYW1lLCB0aGlzLmxhbmd1YWdlKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUYXJnZXR0aW5nIG5vbiBwbGF5ZXIgb3IgcGV0XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyc3RQbGF5ZXJBYmlsaXR5ID0gTWF0aC5taW4odGhpcy5maXJzdFBsYXllckFiaWxpdHksIGxpbmUudGltZXN0YW1wKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChsaW5lLmlkLnN0YXJ0c1dpdGgoJzQnKSAmJiAhaXNQZXROYW1lKGxpbmUubmFtZSwgdGhpcy5sYW5ndWFnZSkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb24tcGxheWVyIGFiaWxpdHlcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZS50YXJnZXRJZC5zdGFydHNXaXRoKCcxJykgfHwgaXNQZXROYW1lKGxpbmUudGFyZ2V0TmFtZSwgdGhpcy5sYW5ndWFnZSkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGFyZ2V0dGluZyBwbGF5ZXIgb3IgcGV0XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyc3RFbmVteUFiaWxpdHkgPSBNYXRoLm1pbih0aGlzLmZpcnN0RW5lbXlBYmlsaXR5LCBsaW5lLnRpbWVzdGFtcCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZWRMYW5nID0gKF9kID0gcmVzID09PSBudWxsIHx8IHJlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzLmdyb3VwcykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmxhbmd1YWdlO1xcbiAgICAgICAgICAgIGlmIChpc0xhbmcobWF0Y2hlZExhbmcpKVxcbiAgICAgICAgICAgICAgICB0aGlzLmxhbmd1YWdlID0gbWF0Y2hlZExhbmc7XFxuICAgICAgICB9KTtcXG4gICAgICAgIHRoaXMuY29tYmF0YW50VHJhY2tlciA9IG5ldyBDb21iYXRhbnRUcmFja2VyKHRoaXMubG9nTGluZXMsIHRoaXMubGFuZ3VhZ2UpO1xcbiAgICAgICAgdGhpcy5zdGFydFRpbWVzdGFtcCA9IHRoaXMuY29tYmF0YW50VHJhY2tlci5maXJzdFRpbWVzdGFtcDtcXG4gICAgICAgIHRoaXMuZW5kVGltZXN0YW1wID0gdGhpcy5jb21iYXRhbnRUcmFja2VyLmxhc3RUaW1lc3RhbXA7XFxuICAgICAgICB0aGlzLmR1cmF0aW9uID0gdGhpcy5lbmRUaW1lc3RhbXAgLSB0aGlzLnN0YXJ0VGltZXN0YW1wO1xcbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbE9mZnNldCA9PT0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcXG4gICAgICAgICAgICBpZiAodGhpcy5lbmdhZ2VBdCA8IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKVxcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxPZmZzZXQgPSB0aGlzLmVuZ2FnZUF0IC0gdGhpcy5zdGFydFRpbWVzdGFtcDtcXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmZpcnN0UGxheWVyQWJpbGl0eSA8IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKVxcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxPZmZzZXQgPSB0aGlzLmZpcnN0UGxheWVyQWJpbGl0eSAtIHRoaXMuc3RhcnRUaW1lc3RhbXA7XFxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5maXJzdEVuZW15QWJpbGl0eSA8IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKVxcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxPZmZzZXQgPSB0aGlzLmZpcnN0RW5lbXlBYmlsaXR5IC0gdGhpcy5zdGFydFRpbWVzdGFtcDtcXG4gICAgICAgICAgICBlbHNlXFxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbE9mZnNldCA9IDA7XFxuICAgICAgICB9XFxuICAgICAgICBjb25zdCBmaXJzdExpbmUgPSB0aGlzLmxvZ0xpbmVzW3RoaXMuZmlyc3RMaW5lSW5kZXhdO1xcbiAgICAgICAgaWYgKGZpcnN0TGluZSAmJiBmaXJzdExpbmUub2Zmc2V0KVxcbiAgICAgICAgICAgIHRoaXMucGxheWJhY2tPZmZzZXQgPSBmaXJzdExpbmUub2Zmc2V0O1xcbiAgICAgICAgdGhpcy5zdGFydFN0YXR1cyA9IFsuLi5zdGFydFN0YXR1c2VzXS5zb3J0KCkuam9pbignLCAnKTtcXG4gICAgfVxcbiAgICBnZXQgaW5pdGlhbFRpbWVzdGFtcCgpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0VGltZXN0YW1wICsgdGhpcy5pbml0aWFsT2Zmc2V0O1xcbiAgICB9XFxuICAgIHNob3VsZFBlcnNpc3RGaWdodCgpIHtcXG4gICAgICAgIHJldHVybiBpc1ZhbGlkVGltZXN0YW1wKHRoaXMuZmlyc3RQbGF5ZXJBYmlsaXR5KSAmJiBpc1ZhbGlkVGltZXN0YW1wKHRoaXMuZmlyc3RFbmVteUFiaWxpdHkpO1xcbiAgICB9XFxuICAgIHVwZ3JhZGUodmVyc2lvbikge1xcbiAgICAgICAgaWYgKEVuY291bnRlci5lbmNvdW50ZXJWZXJzaW9uIDw9IHZlcnNpb24pXFxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgY29uc3QgcmVwbyA9IG5ldyBMb2dSZXBvc2l0b3J5KCk7XFxuICAgICAgICBjb25zdCBjb252ZXJ0ZXIgPSBuZXcgTmV0d29ya0xvZ0NvbnZlcnRlcigpO1xcbiAgICAgICAgdGhpcy5sb2dMaW5lcyA9IGNvbnZlcnRlci5jb252ZXJ0TGluZXModGhpcy5sb2dMaW5lcy5tYXAoKGwpID0+IGwubmV0d29ya0xpbmUpLCByZXBvKTtcXG4gICAgICAgIHRoaXMudmVyc2lvbiA9IEVuY291bnRlci5lbmNvdW50ZXJWZXJzaW9uO1xcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfVxcbn1cXG5FbmNvdW50ZXIuZW5jb3VudGVyVmVyc2lvbiA9IDE7XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9Mb2dFdmVudEhhbmRsZXIudHNcXG5cXG5cXG5cXG5jbGFzcyBMb2dFdmVudEhhbmRsZXIgZXh0ZW5kcyBFdmVudEJ1cyB7XFxuICAgIGNvbnN0cnVjdG9yKCkge1xcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcXG4gICAgICAgIHRoaXMuY3VycmVudEZpZ2h0ID0gW107XFxuICAgICAgICB0aGlzLmN1cnJlbnRab25lTmFtZSA9ICdVbmtub3duJztcXG4gICAgICAgIHRoaXMuY3VycmVudFpvbmVJZCA9ICctMSc7XFxuICAgIH1cXG4gICAgcGFyc2VMb2dzKGxvZ3MpIHtcXG4gICAgICAgIGZvciAoY29uc3QgbGluZU9iaiBvZiBsb2dzKSB7XFxuICAgICAgICAgICAgdGhpcy5jdXJyZW50RmlnaHQucHVzaChsaW5lT2JqKTtcXG4gICAgICAgICAgICBsaW5lT2JqLm9mZnNldCA9IGxpbmVPYmoudGltZXN0YW1wIC0gdGhpcy5jdXJyZW50RmlnaHRTdGFydDtcXG4gICAgICAgICAgICBjb25zdCByZXMgPSBFbXVsYXRvckNvbW1vbi5tYXRjaEVuZChsaW5lT2JqLm5ldHdvcmtMaW5lKTtcXG4gICAgICAgICAgICBpZiAocmVzKSB7XFxuICAgICAgICAgICAgICAgIHRoaXMuZW5kRmlnaHQoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSBpZiAobGluZU9iaiBpbnN0YW5jZW9mIExpbmVFdmVudDB4MDEpIHtcXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Wm9uZUlkID0gbGluZU9iai56b25lSWQ7XFxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFpvbmVOYW1lID0gbGluZU9iai56b25lTmFtZTtcXG4gICAgICAgICAgICAgICAgdGhpcy5lbmRGaWdodCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICBnZXQgY3VycmVudEZpZ2h0U3RhcnQoKSB7XFxuICAgICAgICB2YXIgX2EsIF9iO1xcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuY3VycmVudEZpZ2h0WzBdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGltZXN0YW1wKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwO1xcbiAgICB9XFxuICAgIGdldCBjdXJyZW50RmlnaHRFbmQoKSB7XFxuICAgICAgICB2YXIgX2EsIF9iO1xcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuY3VycmVudEZpZ2h0LnNsaWNlKC0xKVswXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRpbWVzdGFtcCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcXG4gICAgfVxcbiAgICBlbmRGaWdodCgpIHtcXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRGaWdodC5sZW5ndGggPCAyKVxcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUodGhpcy5jdXJyZW50RmlnaHRTdGFydCkudG9JU09TdHJpbmcoKTtcXG4gICAgICAgIGNvbnN0IGVuZCA9IG5ldyBEYXRlKHRoaXMuY3VycmVudEZpZ2h0RW5kKS50b0lTT1N0cmluZygpO1xcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhgRGlzcGF0Y2hpbmcgbmV3IGZpZ2h0XFxyXFxuU3RhcnQ6ICR7c3RhcnR9XFxyXFxuRW5kOiAke2VuZH1cXHJcXG5ab25lOiAke3RoaXMuY3VycmVudFpvbmVOYW1lfVxcclxcbkxpbmUgQ291bnQ6ICR7dGhpcy5jdXJyZW50RmlnaHQubGVuZ3RofVxcclxcbmApO1xcbiAgICAgICAgdm9pZCB0aGlzLmRpc3BhdGNoKCdmaWdodCcsIHN0YXJ0LnN1YnN0cigwLCAxMCksIHRoaXMuY3VycmVudFpvbmVJZCwgdGhpcy5jdXJyZW50Wm9uZU5hbWUsIHRoaXMuY3VycmVudEZpZ2h0KTtcXG4gICAgICAgIHRoaXMuY3VycmVudEZpZ2h0ID0gW107XFxuICAgIH1cXG59XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlIS4vdWkvcmFpZGJvc3MvZW11bGF0b3IvZGF0YS9OZXR3b3JrTG9nQ29udmVydGVyV29ya2VyLmpzXFxuXFxuXFxuXFxuXFxuXFxuXFxub25tZXNzYWdlID0gYXN5bmMgbXNnID0+IHtcXG4gIGNvbnN0IGxvZ0NvbnZlcnRlciA9IG5ldyBOZXR3b3JrTG9nQ29udmVydGVyKCk7XFxuICBjb25zdCBsb2NhbExvZ0hhbmRsZXIgPSBuZXcgTG9nRXZlbnRIYW5kbGVyKCk7XFxuICBjb25zdCByZXBvID0gbmV3IExvZ1JlcG9zaXRvcnkoKTsgLy8gTGlzdGVuIGZvciBMb2dFdmVudEhhbmRsZXIgdG8gZGlzcGF0Y2ggZmlnaHRzIGFuZCBwZXJzaXN0IHRoZW1cXG5cXG4gIGxvY2FsTG9nSGFuZGxlci5vbignZmlnaHQnLCBhc3luYyAoZGF5LCB6b25lSWQsIHpvbmVOYW1lLCBsaW5lcykgPT4ge1xcbiAgICBjb25zdCBlbmMgPSBuZXcgRW5jb3VudGVyKGRheSwgem9uZUlkLCB6b25lTmFtZSwgbGluZXMpO1xcbiAgICBlbmMuaW5pdGlhbGl6ZSgpO1xcblxcbiAgICBpZiAoZW5jLnNob3VsZFBlcnNpc3RGaWdodCgpKSB7XFxuICAgICAgcG9zdE1lc3NhZ2Uoe1xcbiAgICAgICAgdHlwZTogJ2VuY291bnRlcicsXFxuICAgICAgICBlbmNvdW50ZXI6IGVuYyxcXG4gICAgICAgIG5hbWU6IGVuYy5jb21iYXRhbnRUcmFja2VyLmdldE1haW5Db21iYXRhbnROYW1lKClcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSk7IC8vIENvbnZlcnQgdGhlIG1lc3NhZ2UgbWFudWFsbHkgZHVlIHRvIG1lbW9yeSBpc3N1ZXMgd2l0aCBleHRyZW1lbHkgbGFyZ2UgZmlsZXNcXG5cXG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ1VURi04Jyk7XFxuICBsZXQgYnVmID0gbmV3IFVpbnQ4QXJyYXkobXNnLmRhdGEpO1xcbiAgbGV0IG5leHRPZmZzZXQgPSAwO1xcbiAgbGV0IGxpbmVzID0gW107XFxuICBsZXQgbGluZUNvdW50ID0gMDtcXG5cXG4gIGZvciAobGV0IGN1cnJlbnRPZmZzZXQgPSBuZXh0T2Zmc2V0OyBuZXh0T2Zmc2V0IDwgYnVmLmxlbmd0aCAmJiBuZXh0T2Zmc2V0ICE9PSAtMTsgY3VycmVudE9mZnNldCA9IG5leHRPZmZzZXQpIHtcXG4gICAgbmV4dE9mZnNldCA9IGJ1Zi5pbmRleE9mKDB4MEEsIG5leHRPZmZzZXQgKyAxKTtcXG4gICAgY29uc3QgbGluZSA9IGRlY29kZXIuZGVjb2RlKGJ1Zi5zbGljZShjdXJyZW50T2Zmc2V0LCBuZXh0T2Zmc2V0KSkudHJpbSgpO1xcblxcbiAgICBpZiAobGluZS5sZW5ndGgpIHtcXG4gICAgICArK2xpbmVDb3VudDtcXG4gICAgICBsaW5lcy5wdXNoKGxpbmUpO1xcbiAgICB9XFxuXFxuICAgIGlmIChsaW5lcy5sZW5ndGggPj0gMTAwMCkge1xcbiAgICAgIGxpbmVzID0gbG9nQ29udmVydGVyLmNvbnZlcnRMaW5lcyhsaW5lcywgcmVwbyk7XFxuICAgICAgbG9jYWxMb2dIYW5kbGVyLnBhcnNlTG9ncyhsaW5lcyk7XFxuICAgICAgcG9zdE1lc3NhZ2Uoe1xcbiAgICAgICAgdHlwZTogJ3Byb2dyZXNzJyxcXG4gICAgICAgIGxpbmVzOiBsaW5lQ291bnQsXFxuICAgICAgICBieXRlczogbmV4dE9mZnNldCxcXG4gICAgICAgIHRvdGFsQnl0ZXM6IGJ1Zi5sZW5ndGhcXG4gICAgICB9KTtcXG4gICAgICBsaW5lcyA9IFtdO1xcbiAgICB9XFxuICB9XFxuXFxuICBpZiAobGluZXMubGVuZ3RoID4gMCkge1xcbiAgICBsaW5lcyA9IGxvZ0NvbnZlcnRlci5jb252ZXJ0TGluZXMobGluZXMsIHJlcG8pO1xcbiAgICBsb2NhbExvZ0hhbmRsZXIucGFyc2VMb2dzKGxpbmVzKTtcXG4gICAgbGluZXMgPSBbXTtcXG4gIH1cXG5cXG4gIHBvc3RNZXNzYWdlKHtcXG4gICAgdHlwZTogJ3Byb2dyZXNzJyxcXG4gICAgbGluZXM6IGxpbmVDb3VudCxcXG4gICAgYnl0ZXM6IGJ1Zi5sZW5ndGgsXFxuICAgIHRvdGFsQnl0ZXM6IGJ1Zi5sZW5ndGhcXG4gIH0pO1xcbiAgYnVmID0gbnVsbDtcXG4gIGxvY2FsTG9nSGFuZGxlci5lbmRGaWdodCgpO1xcbiAgcG9zdE1lc3NhZ2Uoe1xcbiAgICB0eXBlOiAnZG9uZSdcXG4gIH0pO1xcbn07XFxuLyoqKioqKi8gfSkoKVxcbjtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlqWVdOMFltOTBMeTR2Y21WemIzVnlZMlZ6TDNKbFoyVjRaWE11ZEhNaUxDSjNaV0p3WVdOck9pOHZZMkZqZEdKdmRDOHVMM0psYzI5MWNtTmxjeTl1WlhSeVpXZGxlR1Z6TG5Seklpd2lkMlZpY0dGamF6b3ZMMk5oWTNSaWIzUXZMaTl5WlhOdmRYSmpaWE12ZEhKaGJuTnNZWFJwYjI1ekxuUnpJaXdpZDJWaWNHRmphem92TDJOaFkzUmliM1F2TGk5MWFTOXlZV2xrWW05emN5OWxiWFZzWVhSdmNpOUZiWFZzWVhSdmNrTnZiVzF2Ymk1MGN5SXNJbmRsWW5CaFkyczZMeTlqWVdOMFltOTBMeTR2Y21WemIzVnlZMlZ6TDI1dmRGOXlaV0ZqYUdWa0xuUnpJaXdpZDJWaWNHRmphem92TDJOaFkzUmliM1F2TGk5MWFTOXlZV2xrWW05emN5OWxiWFZzWVhSdmNpOWtZWFJoTDBOdmJXSmhkR0Z1ZEM1MGN5SXNJbmRsWW5CaFkyczZMeTlqWVdOMFltOTBMeTR2ZFdrdmNtRnBaR0p2YzNNdlpXMTFiR0YwYjNJdlpHRjBZUzlEYjIxaVlYUmhiblJLYjJKVFpXRnlZMmd1ZEhNaUxDSjNaV0p3WVdOck9pOHZZMkZqZEdKdmRDOHVMM1ZwTDNKaGFXUmliM056TDJWdGRXeGhkRzl5TDJSaGRHRXZRMjl0WW1GMFlXNTBVM1JoZEdVdWRITWlMQ0ozWldKd1lXTnJPaTh2WTJGamRHSnZkQzh1TDNKbGMyOTFjbU5sY3k5d1pYUmZibUZ0WlhNdWRITWlMQ0ozWldKd1lXTnJPaTh2WTJGamRHSnZkQzh1TDNWcEwzSmhhV1JpYjNOekwyVnRkV3hoZEc5eUwyUmhkR0V2Ym1WMGQyOXlhMTlzYjJkZlkyOXVkbVZ5ZEdWeUwweHBibVZGZG1WdWRDNTBjeUlzSW5kbFluQmhZMnM2THk5allXTjBZbTkwTHk0dmRXa3ZjbUZwWkdKdmMzTXZaVzExYkdGMGIzSXZaR0YwWVM5RGIyMWlZWFJoYm5SVWNtRmphMlZ5TG5Seklpd2lkMlZpY0dGamF6b3ZMMk5oWTNSaWIzUXZMaTkxYVM5eVlXbGtZbTl6Y3k5bGJYVnNZWFJ2Y2k5a1lYUmhMMjVsZEhkdmNtdGZiRzluWDJOdmJuWmxjblJsY2k5TWIyZFNaWEJ2YzJsMGIzSjVMblJ6SWl3aWQyVmljR0ZqYXpvdkwyTmhZM1JpYjNRdkxpOTFhUzl5WVdsa1ltOXpjeTlsYlhWc1lYUnZjaTlGZG1WdWRFSjFjeTUwY3lJc0luZGxZbkJoWTJzNkx5OWpZV04wWW05MEx5NHZkV2t2Y21GcFpHSnZjM012WlcxMWJHRjBiM0l2WkdGMFlTOXVaWFIzYjNKclgyeHZaMTlqYjI1MlpYSjBaWEl2VEdsdVpVVjJaVzUwTUhnd01DNTBjeUlzSW5kbFluQmhZMnM2THk5allXTjBZbTkwTHk0dmRXa3ZjbUZwWkdKdmMzTXZaVzExYkdGMGIzSXZaR0YwWVM5dVpYUjNiM0pyWDJ4dloxOWpiMjUyWlhKMFpYSXZUR2x1WlVWMlpXNTBNSGd3TVM1MGN5SXNJbmRsWW5CaFkyczZMeTlqWVdOMFltOTBMeTR2ZFdrdmNtRnBaR0p2YzNNdlpXMTFiR0YwYjNJdlpHRjBZUzl1WlhSM2IzSnJYMnh2WjE5amIyNTJaWEowWlhJdlRHbHVaVVYyWlc1ME1IZ3dNaTUwY3lJc0luZGxZbkJoWTJzNkx5OWpZV04wWW05MEx5NHZjbVZ6YjNWeVkyVnpMM1YwYVd3dWRITWlMQ0ozWldKd1lXTnJPaTh2WTJGamRHSnZkQzh1TDNWcEwzSmhhV1JpYjNOekwyVnRkV3hoZEc5eUwyUmhkR0V2Ym1WMGQyOXlhMTlzYjJkZlkyOXVkbVZ5ZEdWeUwweHBibVZGZG1WdWREQjRNRE11ZEhNaUxDSjNaV0p3WVdOck9pOHZZMkZqZEdKdmRDOHVMM1ZwTDNKaGFXUmliM056TDJWdGRXeGhkRzl5TDJSaGRHRXZibVYwZDI5eWExOXNiMmRmWTI5dWRtVnlkR1Z5TDB4cGJtVkZkbVZ1ZERCNE1EUXVkSE1pTENKM1pXSndZV05yT2k4dlkyRmpkR0p2ZEM4dUwzVnBMM0poYVdSaWIzTnpMMlZ0ZFd4aGRHOXlMMlJoZEdFdmJtVjBkMjl5YTE5c2IyZGZZMjl1ZG1WeWRHVnlMMHhwYm1WRmRtVnVkREI0TUVNdWRITWlMQ0ozWldKd1lXTnJPaTh2WTJGamRHSnZkQzh1TDNWcEwzSmhhV1JpYjNOekwyVnRkV3hoZEc5eUwyUmhkR0V2Ym1WMGQyOXlhMTlzYjJkZlkyOXVkbVZ5ZEdWeUwweHBibVZGZG1WdWREQjRNVFF1ZEhNaUxDSjNaV0p3WVdOck9pOHZZMkZqZEdKdmRDOHVMM1ZwTDNKaGFXUmliM056TDJWdGRXeGhkRzl5TDJSaGRHRXZibVYwZDI5eWExOXNiMmRmWTI5dWRtVnlkR1Z5TDB4cGJtVkZkbVZ1ZERCNE1UVXVkSE1pTENKM1pXSndZV05yT2k4dlkyRmpkR0p2ZEM4dUwzVnBMM0poYVdSaWIzTnpMMlZ0ZFd4aGRHOXlMMlJoZEdFdmJtVjBkMjl5YTE5c2IyZGZZMjl1ZG1WeWRHVnlMMHhwYm1WRmRtVnVkREI0TVRZdWRITWlMQ0ozWldKd1lXTnJPaTh2WTJGamRHSnZkQzh1TDNWcEwzSmhhV1JpYjNOekwyVnRkV3hoZEc5eUwyUmhkR0V2Ym1WMGQyOXlhMTlzYjJkZlkyOXVkbVZ5ZEdWeUwweHBibVZGZG1WdWREQjRNVGN1ZEhNaUxDSjNaV0p3WVdOck9pOHZZMkZqZEdKdmRDOHVMM1ZwTDNKaGFXUmliM056TDJWdGRXeGhkRzl5TDJSaGRHRXZibVYwZDI5eWExOXNiMmRmWTI5dWRtVnlkR1Z5TDB4cGJtVkZkbVZ1ZERCNE1UZ3VkSE1pTENKM1pXSndZV05yT2k4dlkyRmpkR0p2ZEM4dUwzVnBMM0poYVdSaWIzTnpMMlZ0ZFd4aGRHOXlMMlJoZEdFdmJtVjBkMjl5YTE5c2IyZGZZMjl1ZG1WeWRHVnlMMHhwYm1WRmRtVnVkREI0TVRrdWRITWlMQ0ozWldKd1lXTnJPaTh2WTJGamRHSnZkQzh1TDNWcEwzSmhhV1JpYjNOekwyVnRkV3hoZEc5eUwyUmhkR0V2Ym1WMGQyOXlhMTlzYjJkZlkyOXVkbVZ5ZEdWeUwweHBibVZGZG1WdWREQjRNVUV1ZEhNaUxDSjNaV0p3WVdOck9pOHZZMkZqZEdKdmRDOHVMM1ZwTDNKaGFXUmliM056TDJWdGRXeGhkRzl5TDJSaGRHRXZibVYwZDI5eWExOXNiMmRmWTI5dWRtVnlkR1Z5TDB4cGJtVkZkbVZ1ZERCNE1VSXVkSE1pTENKM1pXSndZV05yT2k4dlkyRmpkR0p2ZEM4dUwzVnBMM0poYVdSaWIzTnpMMlZ0ZFd4aGRHOXlMMlJoZEdFdmJtVjBkMjl5YTE5c2IyZGZZMjl1ZG1WeWRHVnlMMHhwYm1WRmRtVnVkREI0TVVNdWRITWlMQ0ozWldKd1lXTnJPaTh2WTJGamRHSnZkQzh1TDNWcEwzSmhhV1JpYjNOekwyVnRkV3hoZEc5eUwyUmhkR0V2Ym1WMGQyOXlhMTlzYjJkZlkyOXVkbVZ5ZEdWeUwweHBibVZGZG1WdWREQjRNVVF1ZEhNaUxDSjNaV0p3WVdOck9pOHZZMkZqZEdKdmRDOHVMM1ZwTDNKaGFXUmliM056TDJWdGRXeGhkRzl5TDJSaGRHRXZibVYwZDI5eWExOXNiMmRmWTI5dWRtVnlkR1Z5TDB4cGJtVkZkbVZ1ZERCNE1VVXVkSE1pTENKM1pXSndZV05yT2k4dlkyRmpkR0p2ZEM4dUwzVnBMM0poYVdSaWIzTnpMMlZ0ZFd4aGRHOXlMMlJoZEdFdmJtVjBkMjl5YTE5c2IyZGZZMjl1ZG1WeWRHVnlMMHhwYm1WRmRtVnVkREI0TVVZdWRITWlMQ0ozWldKd1lXTnJPaTh2WTJGamRHSnZkQzh1TDNWcEwzSmhhV1JpYjNOekwyVnRkV3hoZEc5eUwyUmhkR0V2Ym1WMGQyOXlhMTlzYjJkZlkyOXVkbVZ5ZEdWeUwweHBibVZGZG1WdWREQjRNakl1ZEhNaUxDSjNaV0p3WVdOck9pOHZZMkZqZEdKdmRDOHVMM1ZwTDNKaGFXUmliM056TDJWdGRXeGhkRzl5TDJSaGRHRXZibVYwZDI5eWExOXNiMmRmWTI5dWRtVnlkR1Z5TDB4cGJtVkZkbVZ1ZERCNE1qTXVkSE1pTENKM1pXSndZV05yT2k4dlkyRmpkR0p2ZEM4dUwzVnBMM0poYVdSaWIzTnpMMlZ0ZFd4aGRHOXlMMlJoZEdFdmJtVjBkMjl5YTE5c2IyZGZZMjl1ZG1WeWRHVnlMMHhwYm1WRmRtVnVkREI0TWpRdWRITWlMQ0ozWldKd1lXTnJPaTh2WTJGamRHSnZkQzh1TDNWcEwzSmhhV1JpYjNOekwyVnRkV3hoZEc5eUwyUmhkR0V2Ym1WMGQyOXlhMTlzYjJkZlkyOXVkbVZ5ZEdWeUwweHBibVZGZG1WdWREQjRNalV1ZEhNaUxDSjNaV0p3WVdOck9pOHZZMkZqZEdKdmRDOHVMM1ZwTDNKaGFXUmliM056TDJWdGRXeGhkRzl5TDJSaGRHRXZibVYwZDI5eWExOXNiMmRmWTI5dWRtVnlkR1Z5TDB4cGJtVkZkbVZ1ZERCNE1qWXVkSE1pTENKM1pXSndZV05yT2k4dlkyRmpkR0p2ZEM4dUwzVnBMM0poYVdSaWIzTnpMMlZ0ZFd4aGRHOXlMMlJoZEdFdmJtVjBkMjl5YTE5c2IyZGZZMjl1ZG1WeWRHVnlMMHhwYm1WRmRtVnVkREI0TWpjdWRITWlMQ0ozWldKd1lXTnJPaTh2WTJGamRHSnZkQzh1TDNWcEwzSmhhV1JpYjNOekwyVnRkV3hoZEc5eUwyUmhkR0V2Ym1WMGQyOXlhMTlzYjJkZlkyOXVkbVZ5ZEdWeUwxQmhjbk5sVEdsdVpTNTBjeUlzSW5kbFluQmhZMnM2THk5allXTjBZbTkwTHk0dmRXa3ZjbUZwWkdKdmMzTXZaVzExYkdGMGIzSXZaR0YwWVM5T1pYUjNiM0pyVEc5blEyOXVkbVZ5ZEdWeUxuUnpJaXdpZDJWaWNHRmphem92TDJOaFkzUmliM1F2TGk5eVpYTnZkWEpqWlhNdmJHRnVaM1ZoWjJWekxuUnpJaXdpZDJWaWNHRmphem92TDJOaFkzUmliM1F2TGk5MWFTOXlZV2xrWW05emN5OWxiWFZzWVhSdmNpOWtZWFJoTDBWdVkyOTFiblJsY2k1MGN5SXNJbmRsWW5CaFkyczZMeTlqWVdOMFltOTBMeTR2ZFdrdmNtRnBaR0p2YzNNdlpXMTFiR0YwYjNJdlpHRjBZUzlNYjJkRmRtVnVkRWhoYm1Sc1pYSXVkSE1pTENKM1pXSndZV05yT2k4dlkyRmpkR0p2ZEM4dUwzVnBMM0poYVdSaWIzTnpMMlZ0ZFd4aGRHOXlMMlJoZEdFdlRtVjBkMjl5YTB4dlowTnZiblpsY25SbGNsZHZjbXRsY2k1cWN5SmRMQ0p1WVcxbGN5STZXeUp2Ym0xbGMzTmhaMlVpTENKdGMyY2lMQ0pzYjJkRGIyNTJaWEowWlhJaUxDSk9aWFIzYjNKclRHOW5RMjl1ZG1WeWRHVnlJaXdpYkc5allXeE1iMmRJWVc1a2JHVnlJaXdpVEc5blJYWmxiblJJWVc1a2JHVnlJaXdpY21Wd2J5SXNJa3h2WjFKbGNHOXphWFJ2Y25raUxDSnZiaUlzSW1SaGVTSXNJbnB2Ym1WSlpDSXNJbnB2Ym1WT1lXMWxJaXdpYkdsdVpYTWlMQ0psYm1NaUxDSkZibU52ZFc1MFpYSWlMQ0pwYm1sMGFXRnNhWHBsSWl3aWMyaHZkV3hrVUdWeWMybHpkRVpwWjJoMElpd2ljRzl6ZEUxbGMzTmhaMlVpTENKMGVYQmxJaXdpWlc1amIzVnVkR1Z5SWl3aWJtRnRaU0lzSW1OdmJXSmhkR0Z1ZEZSeVlXTnJaWElpTENKblpYUk5ZV2x1UTI5dFltRjBZVzUwVG1GdFpTSXNJbVJsWTI5a1pYSWlMQ0pVWlhoMFJHVmpiMlJsY2lJc0ltSjFaaUlzSWxWcGJuUTRRWEp5WVhraUxDSmtZWFJoSWl3aWJtVjRkRTltWm5ObGRDSXNJbXhwYm1WRGIzVnVkQ0lzSW1OMWNuSmxiblJQWm1aelpYUWlMQ0pzWlc1bmRHZ2lMQ0pwYm1SbGVFOW1JaXdpYkdsdVpTSXNJbVJsWTI5a1pTSXNJbk5zYVdObElpd2lkSEpwYlNJc0luQjFjMmdpTENKamIyNTJaWEowVEdsdVpYTWlMQ0p3WVhKelpVeHZaM01pTENKaWVYUmxjeUlzSW5SdmRHRnNRbmwwWlhNaUxDSmxibVJHYVdkb2RDSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdRVUZWUVN4TlFVRk5MR2xDUVVGcFFpeEhRVUZITEVOQlFVTXNWMEZCVnl4RlFVRkZMRkZCUVZFc1JVRkJSU3hKUVVGSkxFVkJRVVVzVTBGQlV5eEZRVUZGTEZGQlFWRXNSVUZCUlN4VFFVRlRMRU5CUVZVc1EwRkJRenRCUVVOcVJ5eE5RVUZOTEdGQlFXRXNSMEZCUnl4RFFVRkRMRmRCUVZjc1JVRkJSU3hSUVVGUkxFVkJRVVVzVlVGQlZTeEZRVUZGTEVsQlFVa3NSVUZCUlN4VFFVRlRMRVZCUVVVc1ZVRkJWU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFRRVUZUTEVOQlFWVXNRMEZCUXp0QlFVTnlTQ3hOUVVGTkxHbENRVUZwUWl4SFFVRkhPMGxCUTNoQ0xGZEJRVmM3U1VGRFdDeFZRVUZWTzBsQlExWXNVVUZCVVR0SlFVTlNMRWxCUVVrN1NVRkRTaXhUUVVGVE8wbEJRMVFzVlVGQlZUdEpRVU5XTEZGQlFWRTdTVUZEVWl4UFFVRlBPMGxCUTFBc1QwRkJUenRKUVVOUUxFOUJRVTg3U1VGRFVDeFBRVUZQTzBsQlExQXNUMEZCVHp0SlFVTlFMRTlCUVU4N1NVRkRVQ3hQUVVGUE8wbEJRMUFzVDBGQlR6dEpRVU5RTEU5QlFVODdTVUZEVUN4UFFVRlBPMGxCUTFBc1QwRkJUenRKUVVOUUxGRkJRVkU3U1VGRFVpeFJRVUZSTzBsQlExSXNVVUZCVVR0SlFVTlNMRkZCUVZFN1NVRkRVaXhSUVVGUk8wbEJRMUlzVlVGQlZUdEpRVU5XTEdGQlFXRTdTVUZEWWl4VlFVRlZPMGxCUTFZc1lVRkJZVHRKUVVOaUxGTkJRVk03U1VGRFZDeFRRVUZUTzBsQlExUXNVMEZCVXp0SlFVTlVMR1ZCUVdVN1NVRkRaaXhKUVVGSk8wbEJRMG9zVDBGQlR6dEpRVU5RTEVsQlFVazdTVUZEU2l4UFFVRlBPMGxCUTFBc1IwRkJSenRKUVVOSUxFZEJRVWM3U1VGRFNDeEhRVUZITzBsQlEwZ3NVMEZCVXp0SlFVTlVMRk5CUVZNN1EwRkRSQ3hEUVVGRE8wRkJRMWdzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhEUVVGRExGZEJRVmNzUlVGQlJTeFZRVUZWTEVWQlFVVXNVVUZCVVN4RlFVRkZMRWxCUVVrc1JVRkJSU3hUUVVGVExFTkJRVlVzUTBGQlF6dEJRVU4yUml4TlFVRk5MRzlDUVVGdlFpeEhRVUZITEVOQlFVTXNWMEZCVnl4RlFVRkZMRTFCUVUwc1JVRkJSU3hUUVVGVExFTkJRVlVzUTBGQlF6dEJRVU4yUlN4TlFVRk5MSGRDUVVGM1FpeEhRVUZITzBsQlF5OUNMRmRCUVZjN1NVRkRXQ3hKUVVGSk8wbEJRMG9zVFVGQlRUdEpRVU5PTEV0QlFVczdTVUZEVEN4UFFVRlBPMGxCUTFBc1NVRkJTVHRKUVVOS0xFZEJRVWM3U1VGRFNDeEhRVUZITzBsQlEwZ3NSMEZCUnp0SlFVTklMRTlCUVU4N1NVRkRVQ3hUUVVGVE8wTkJRMFFzUTBGQlF6dEJRVU5ZTEUxQlFVMHNkVUpCUVhWQ0xFZEJRVWM3U1VGRE9VSXNWMEZCVnp0SlFVTllMRWxCUVVrN1NVRkRTaXhOUVVGTk8wbEJRMDRzU1VGQlNUdEpRVU5LTEVkQlFVYzdTVUZEU0N4SFFVRkhPMGxCUTBnc1IwRkJSenRKUVVOSUxGTkJRVk03UTBGRFJDeERRVUZETzBGQlExZ3NUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eERRVUZETEZkQlFWY3NSVUZCUlN4VlFVRlZMRVZCUVVVc1VVRkJVU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlFVVXNWVUZCVlN4RlFVRkZMRk5CUVZNc1EwRkJWU3hEUVVGRE8wRkJRMnhJTEUxQlFVMHNNRUpCUVRCQ0xFZEJRVWM3U1VGRGFrTXNWMEZCVnp0SlFVTllMRlZCUVZVN1NVRkRWaXhSUVVGUk8wbEJRMUlzUzBGQlN6dEpRVU5NTEVsQlFVazdTVUZEU2l4UFFVRlBPMGxCUTFBc1NVRkJTVHRKUVVOS0xFOUJRVTg3U1VGRFVDeEhRVUZITzBsQlEwZ3NSMEZCUnp0SlFVTklMRWRCUVVjN1NVRkRTQ3hUUVVGVE8wbEJRMVFzVDBGQlR6dEpRVU5RTEU5QlFVODdTVUZEVUN4UFFVRlBPMGxCUTFBc1QwRkJUenRKUVVOUUxFOUJRVTg3U1VGRFVDeFRRVUZUTzBOQlEwUXNRMEZCUXp0QlFVTllMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NRMEZCUXl4WFFVRlhMRVZCUVVVc1ZVRkJWU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlFVVXNVVUZCVVN4RlFVRkZMRk5CUVZNc1EwRkJWU3hEUVVGRE8wRkJRM1JITEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWM3U1VGRGRrSXNWMEZCVnp0SlFVTllMRXRCUVVzN1NVRkRUQ3hWUVVGVk8wbEJRMVlzVjBGQlZ6dEpRVU5ZTEZWQlFWVTdTVUZEVml4alFVRmpPMGxCUTJRc1RVRkJUVHRKUVVOT0xFOUJRVTg3U1VGRFVDeGhRVUZoTzBsQlEySXNWMEZCVnp0SlFVTllMR0ZCUVdFN1NVRkRZaXh2UWtGQmIwSTdTVUZEY0VJc2EwSkJRV3RDTzBsQlEyeENMR1ZCUVdVN1NVRkRaaXhaUVVGWk8wbEJRMW9zV1VGQldUdEpRVU5hTEZWQlFWVTdTVUZEVml4VFFVRlRPME5CUTBRc1EwRkJRenRCUVVOWUxFMUJRVTBzV1VGQldTeEhRVUZITEVOQlFVTXNWMEZCVnl4RlFVRkZMRkZCUVZFc1JVRkJSU3hWUVVGVkxFVkJRVVVzVVVGQlVTeEZRVUZGTEZWQlFWVXNSVUZCUlN4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGVkxFTkJRVU03UVVGRGVrY3NUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eERRVUZETEZkQlFWY3NSVUZCUlN4UlFVRlJMRVZCUVVVc1VVRkJVU3hGUVVGRkxGTkJRVk1zUTBGQlZTeERRVUZETzBGQlEyaEdMRTFCUVUwc1YwRkJWeXhIUVVGSExFTkJRVU1zVjBGQlZ5eEZRVUZGTEUxQlFVMHNSVUZCUlN4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGVkxFTkJRVU03UVVGRGNFVXNUVUZCVFN4VlFVRlZMRWRCUVVjc1EwRkJReXhYUVVGWExFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlN4VFFVRlRMRU5CUVZVc1EwRkJRenRCUVVOeVJTeE5RVUZOTEZsQlFWa3NSMEZCUnl4RFFVRkRMRmRCUVZjc1JVRkJSU3hOUVVGTkxFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlN4VFFVRlRMRU5CUVZVc1EwRkJRenRCUVVNdlJTeE5RVUZOTEdGQlFXRXNSMEZCUnl4RFFVRkRMRmRCUVZjc1JVRkJSU3hOUVVGTkxFVkJRVVVzVFVGQlRTeEZRVUZGTEZOQlFWTXNRMEZCVlN4RFFVRkRPMEZCUTNoRkxFMUJRVTBzWVVGQllTeEhRVUZITEVOQlFVTXNWMEZCVnl4RlFVRkZMRTFCUVUwc1JVRkJSU3hOUVVGTkxFVkJRVVVzVTBGQlV5eERRVUZWTEVOQlFVTTdRVUZEZUVVc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4RFFVRkRMRmRCUVZjc1JVRkJSU3hOUVVGTkxFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlN4VFFVRlRMRU5CUVZVc1EwRkJRenRCUVVOd1JpeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExFTkJRVU1zVjBGQlZ5eEZRVUZGTEUxQlFVMHNSVUZCUlN4VFFVRlRMRU5CUVZVc1EwRkJRenRCUVVOdVJTeE5RVUZOTEdWQlFXVXNSMEZCUnl4RFFVRkRMRmRCUVZjc1JVRkJSU3hWUVVGVkxFVkJRVVVzVTBGQlV5eEZRVUZGTEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJTeFRRVUZUTEVOQlFWVXNRMEZCUXp0QlFYZENkRWNzVFVGQlRTeFBRVUZQTzBsQlF6RkNPenM3VDBGSFJ6dEpRVU5JTEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJOa0k3VVVGRE9VTXNTVUZCU1N4UFFVRlBMRU5CUVVNc1MwRkJTeXhYUVVGWE8xbEJRekZDTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRWQ3hQUVVGUExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNSVUZCUlN4aFFVRmhMRVZCUVVVc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0UlFVTTFSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU51UkN4SlFVRkpMRWRCUVVjc1IwRkJSeXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4WFFVRlhMRVZCUVVVc1owSkJRV2RDTEVOQlFVTTdXVUZEY0VVc1RVRkJUVHRaUVVOT0xFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETzFGQlJYUkZMRWxCUVVrc1EwRkJReXhEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhOUVVGTkxFbEJRVWtzVDBGQlR6dFpRVU42UXl4SFFVRkhMRWxCUVVrc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGTkxFVkJRVVVzUzBGQlN5eERRVUZETEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU03VVVGRmNrWXNTVUZCU1N4RFFVRkRMRU5CUVVNc1QwRkJUeXhKUVVGSkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVsQlFVa3NUMEZCVHp0WlFVTnNReXhIUVVGSExFbEJRVWtzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJSVGRGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRTFCUVUwc1NVRkJTU3hQUVVGUE8xbEJRM0pDTEVkQlFVY3NTVUZCU1N4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFJRVUZSTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hMUVVGTExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTTdVVUZGTVVVc1QwRkJUeXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUXpWQ0xFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGdzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRjVRanRSUVVOMFF5eEpRVUZKTEU5QlFVOHNRMEZCUXl4TFFVRkxMRmRCUVZjN1dVRkRNVUlzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTlVMRTlCUVU4c1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eEZRVUZGTEZOQlFWTXNSVUZCUlN4aFFVRmhMRU5CUVVNc1EwRkJRenRSUVVOd1JDeE5RVUZOTEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0UlFVTnVSQ3hKUVVGSkxFZEJRVWNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hYUVVGWExFVkJRVVVzWjBKQlFXZENMRU5CUVVNN1dVRkRjRVVzVTBGQlV5eEhRVUZITEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeGxRVUZsTEVOQlFVTXNSMEZCUnl4SFFVRkhPMWxCUXpWRkxFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU1zVFVGQlRTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVVWd1JTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFOUJRVThzU1VGQlNTeERRVUZETEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1EwRkJReXhSUVVGUkxFbEJRVWtzVDBGQlR6dFpRVU40UkN4SFFVRkhMRWxCUVVrc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRk4wVXNTVUZCU1N4RFFVRkRMRU5CUVVNc1QwRkJUeXhKUVVGSkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RFFVRkRMRkZCUVZFc1NVRkJTU3hQUVVGUE8xbEJRMmhFTEVkQlFVY3NTVUZCU1N4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFRRVUZUTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hSUVVGUkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZGTjBVc1NVRkJTU3hEUVVGRExFTkJRVU1zVFVGQlRTeEpRVUZKTEVOQlFVTXNRMEZCUXl4UlFVRlJMRWxCUVVrc1QwRkJUenRaUVVOdVF5eEhRVUZITEVsQlFVa3NUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVlVGQlZTeEZRVUZGTEdWQlFXVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVVVeFJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4TlFVRk5MRWxCUVVrc1QwRkJUenRaUVVOeVFpeEhRVUZITEVsQlFVa3NUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVVVGQlVTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1VVRkJVU3hEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETzFGQlJUTkZMRTlCUVU4c1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTTFRaXhEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCTmtJN1VVRkRPVU1zU1VGQlNTeFBRVUZQTEVOQlFVTXNTMEZCU3l4WFFVRlhPMWxCUXpGQ0xFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEVkN4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUlVGQlJTeGhRVUZoTEVWQlFVVXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dFJRVU0xUkN4TlFVRk5MRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRSUVVOdVJDeE5RVUZOTEVkQlFVY3NSMEZCUnl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFhRVUZYTEVWQlFVVXNaMEpCUVdkQ0xFTkJRVU03V1VGRGRFVXNVMEZCVXp0WlFVTlVMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFWVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxHVkJRV1VzUTBGQlF5eEhRVUZITEVkQlFVYzdXVUZETlVVc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGTkxFVkJRVVVzVVVGQlVTeERRVUZETEVkQlFVY3NSMEZCUnp0WlFVTnFSU3hQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFZEJRVWM3V1VGRGJrVXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1VVRkJVU3hEUVVGRExFZEJRVWNzUjBGQlJ6dFpRVU51UlN4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFZRVUZWTEVWQlFVVXNRMEZCUXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hsUVVGbExFTkJRVU1zUjBGQlJ5eEhRVUZITzFsQlF6VkZMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEZGQlFWRXNSVUZCUlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEhRVUZITEVkQlFVYzdXVUZEYWtVc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVVVzVVVGQlVTeERRVUZETEVkQlFVY3NSMEZCUnp0WlFVTXZSQ3hQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeFJRVUZSTEVOQlFVTXNSMEZCUnl4SFFVRkhPMWxCUXk5RUxFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkhMRWRCUVVjN1dVRkRMMFFzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWRCUVVjc1IwRkJSenRaUVVNdlJDeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4UlFVRlJMRU5CUVVNc1IwRkJSeXhIUVVGSE8xbEJReTlFTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4RlFVRkZMRkZCUVZFc1EwRkJReXhIUVVGSExFZEJRVWM3V1VGREwwUXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1VVRkJVU3hEUVVGRExFZEJRVWNzUjBGQlJ6dFpRVU12UkN4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hSUVVGUkxFTkJRVU1zUjBGQlJ5eEhRVUZITzFsQlF5OUVMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxGRkJRVkVzUTBGQlF5eEhRVUZITEVkQlFVYzdXVUZETDBRc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVVVzVVVGQlVTeERRVUZETEVkQlFVY3NSMEZCUnp0WlFVTXZSQ3hQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeFJRVUZSTEVOQlFVTXNSMEZCUnl4SFFVRkhPMWxCUXk5RUxFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU1zVFVGQlRTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkhMRWRCUVVjN1dVRkRha1VzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWRCUVVjc1IwRkJSenRaUVVOcVJTeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETEUxQlFVMHNSVUZCUlN4UlFVRlJMRU5CUVVNc1IwRkJSeXhIUVVGSE8xbEJRMnBGTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxGRkJRVkVzUlVGQlJTeERRVUZETEVOQlFVTXNUVUZCVFN4RlFVRkZMRkZCUVZFc1EwRkJReXhIUVVGSExFZEJRVWM3V1VGRGFrVXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVVVGQlVTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1VVRkJVU3hEUVVGRExFZEJRVWNzUjBGQlJ6dFpRVU5xUlN4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSenRaUVVNelJpeFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEdGQlFXRXNSVUZCUlN4RFFVRkRMRU5CUVVNc1YwRkJWeXhGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZETEVkQlFVY3NSMEZCUnp0WlFVTnFSeXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ6dFpRVU16Uml4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMR0ZCUVdFc1JVRkJSU3hEUVVGRExFTkJRVU1zVjBGQlZ5eEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSenRaUVVOcVJ5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhIUVVGSExFZEJRVWNzUjBGQlJ5eFpRVUZaTzFsQlEyNUVMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMR2RDUVVGblFqdFpRVU4yUkN4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRVU1zVDBGQlR5eEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSenRaUVVONlJpeFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEZOQlFWTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZETEVkQlFVY3NSMEZCUnp0WlFVTjZSaXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxGTkJRVk1zUlVGQlJTeERRVUZETEVOQlFVTXNUMEZCVHl4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ6dFpRVU42Uml4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMR1ZCUVdVc1JVRkJSU3hEUVVGRExFTkJRVU1zWVVGQllTeEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSenRaUVVOeVJ5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4WlFVRlpMRU5CUVVNc1IwRkJSeXhIUVVGSE8xbEJRemRFTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4RlFVRkZMRmxCUVZrc1EwRkJReXhIUVVGSExFZEJRVWM3V1VGRGJrVXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1dVRkJXU3hEUVVGRExFZEJRVWNzUjBGQlJ6dFpRVU0zUkN4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3haUVVGWkxFTkJRVU1zUjBGQlJ5eEhRVUZITzFsQlEyNUZMR0ZCUVdFc1IwRkJSeXhaUVVGWk8xbEJRelZDTEdGQlFXRXNSMEZCUnl4blFrRkJaMEk3V1VGRGFFTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1dVRkJXU3hEUVVGRExFZEJRVWNzUjBGQlJ6dFpRVU16UkN4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3haUVVGWkxFTkJRVU1zUjBGQlJ5eEhRVUZITzFsQlF6TkVMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxGbEJRVmtzUTBGQlF5eEhRVUZITEVkQlFVYzdXVUZETTBRc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNVMEZCVXl4RlFVRkZMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzV1VGQldTeERRVUZETEVkQlFVY3NSMEZCUnp0WlFVTjJSU3hOUVVGTkxFTkJRVU1zUTBGQlF5eHhRa0ZCY1VJN1VVRkRMMElzVDBGQlR5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRelZDTEVOQlFVTTdTVUZIUkRzN08wOUJSMGM3U1VGRFNDeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVRSQ08xRkJRelZETEVsQlFVa3NUMEZCVHl4RFFVRkRMRXRCUVVzc1YwRkJWenRaUVVNeFFpeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMUZCUTFRc1QwRkJUeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETEVWQlFVVXNXVUZCV1N4RlFVRkZMR2RDUVVGblFpeERRVUZETEVOQlFVTTdVVUZETVVRc1RVRkJUU3hQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03VVVGRGJrUXNUVUZCVFN4SFFVRkhMRWRCUVVjc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNWMEZCVnl4RlFVRkZMR2RDUVVGblFpeERRVUZETzFsQlEzUkZMRTFCUVUwN1dVRkRUaXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRlZMRVZCUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzUlVGQlJTeGxRVUZsTEVOQlFVTXNSMEZCUnl4SFFVRkhPMWxCUXpWRkxFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU1zVFVGQlRTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkhMR0ZCUVdFN1dVRkRNMFVzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRE8xRkJRekZFTEU5QlFVOHNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU0xUWl4RFFVRkRPMGxCUlVRc2QwSkJRWGRDTzBsQlEzaENMREpHUVVFeVJqdEpRVU16Uml4TlFVRk5MRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRV2RETzFGQlEzQkVMRWxCUVVrc1QwRkJUeXhEUVVGRExFdEJRVXNzVjBGQlZ6dFpRVU14UWl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRMVFzVDBGQlR5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF6dFJRVU5zUlN4TlFVRk5MRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRSUVVOdVJDeE5RVUZOTEVkQlFVY3NSMEZCUnl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFhRVUZYTEVWQlFVVXNaMEpCUVdkQ0xFTkJRVU03V1VGRGRFVXNkME5CUVhkRE8xbEJRM2hETEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF6dFJRVU12UkN4UFFVRlBMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZETlVJc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMRTFCUVUwc1EwRkJReXhyUWtGQmEwSXNRMEZEY2tJc1EwRkJiME03VVVGRmRFTXNTVUZCU1N4UFFVRlBMRU5CUVVNc1MwRkJTeXhYUVVGWE8xbEJRekZDTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRWQ3hQUVVGUExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNSVUZCUlN4dlFrRkJiMElzUlVGQlJTeDNRa0ZCZDBJc1EwRkJReXhEUVVGRE8xRkJRekZGTEUxQlFVMHNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUTI1RUxFMUJRVTBzUjBGQlJ5eEhRVUZITEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxGZEJRVmNzUlVGQlJTeG5Ra0ZCWjBJc1EwRkJRenRaUVVOMFJTeE5RVUZOTEVkQlFVY3NUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1pVRkJaU3hEUVVGRE8xbEJRMjVGTEhWQ1FVRjFRaXhIUVVGSExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEZGQlFWRXNRMEZCUXp0WlFVTnFSaXhqUVVGakxFZEJRVWNzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNVVUZCVVN4RFFVRkRPMWxCUTNSRkxGVkJRVlVzUjBGQlJ5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4UlFVRlJMRU5CUVVNN1dVRkRkRVVzVjBGQlZ5eEhRVUZITEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRkZCUVZFc1EwRkJReXhIUVVGSExFbEJRVWs3V1VGRGVFVXNZVUZCWVR0WlFVTmlMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxGbEJRVmtzUTBGQlF5eEhRVUZITEVkQlFVYzdXVUZETTBRc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzV1VGQldTeERRVUZETEVkQlFVY3NSMEZCUnp0WlFVTXpSQ3hQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeFpRVUZaTEVOQlFVTXNSMEZCUnl4TFFVRkxPMWxCUXpkRUxGTkJRVk1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRU5CUVVNc1IwRkJSeXhWUVVGVkxFTkJRVU03VVVGRGJFWXNUMEZCVHl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlF6VkNMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4TlFVRk5MRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCYlVNN1VVRkRNVVFzU1VGQlNTeFBRVUZQTEVOQlFVTXNTMEZCU3l4WFFVRlhPMWxCUXpGQ0xFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEVkN4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUlVGQlJTeHRRa0ZCYlVJc1JVRkJSU3gxUWtGQmRVSXNRMEZCUXl4RFFVRkRPMUZCUTNoRkxFMUJRVTBzVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFGQlEyNUVMRTFCUVUwc1IwRkJSeXhIUVVGSExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRmRCUVZjc1JVRkJSU3huUWtGQlowSXNRMEZCUXp0WlFVTjBSU3hOUVVGTkxFZEJRVWNzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hGUVVGRkxHVkJRV1VzUTBGQlF6dFpRVU0zUkN4elFrRkJjMEk3V1VGRGRFSXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFZEJRVWNzUzBGQlN6dFpRVU0xUkN4aFFVRmhMRWRCUVVjc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzVVVGQlVTeERRVUZETEVkQlFVY3NTVUZCU1R0WlFVTXhSU3hQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEdGQlFXRTdaMEpCUXpsQ0xFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEZsQlFWa3NRMEZCUXl4SFFVRkhMRWRCUVVjN1owSkJRek5FTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRmxCUVZrc1EwRkJReXhIUVVGSExFZEJRVWM3WjBKQlF6TkVMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxGbEJRVmtzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUTJwRkxFOUJRVThzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVNMVFpeERRVUZETzBsQlIwUXNPRVJCUVRoRU8wbEJRemxFTERCR1FVRXdSanRKUVVNeFJpeE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVRaQ08xRkJRemxETEVsQlFVa3NUMEZCVHl4RFFVRkRMRXRCUVVzc1YwRkJWenRaUVVNeFFpeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMUZCUTFRc1QwRkJUeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETEVWQlFVVXNZVUZCWVN4RlFVRkZMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdVVUZETlVRc1RVRkJUU3hQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03VVVGRGJrUXNUVUZCVFN4SFFVRkhMRWRCUVVjc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNWMEZCVnl4RlFVRkZMR2RDUVVGblFpeERRVUZETzFsQlEzUkZMRTFCUVUwN1dVRkRUaXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4VlFVRlZMRVZCUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzUlVGQlJTeGxRVUZsTEVOQlFVTXNSMEZCUnl4SFFVRkhPMWxCUXpWRkxFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU1zVFVGQlRTeEZRVUZGTEV0QlFVc3NRMEZCUXp0WlFVTjRSQ3gxUWtGQmRVSTdXVUZEZGtJc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGTkxFVkJRVVVzUzBGQlN5eERRVUZETzFsQlEzaEVMRkZCUVZFN1dVRkRVaXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4UlFVRlJMRVZCUVVVc1EwRkJReXhEUVVGRExFMUJRVTBzUlVGQlJTeExRVUZMTEVOQlFVTTdXVUZEZUVRc1QwRkJUenRaUVVOUUxFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeEZRVUZGTEZsQlFWa3NRMEZCUXp0WlFVTnVSU3hoUVVGaExFTkJRVU03VVVGRGFFSXNUMEZCVHl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlF6VkNMRU5CUVVNN1NVRkZSRHM3T3pzN1QwRkxSenRKUVVOSUxFMUJRVTBzUTBGQlF5eHZRa0ZCYjBJc1EwRkRka0lzUTBGQmMwTTdVVUZGZUVNc1NVRkJTU3hQUVVGUExFTkJRVU1zUzBGQlN5eFhRVUZYTzFsQlF6RkNMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRFZDeFBRVUZQTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNc1JVRkJSU3h6UWtGQmMwSXNSVUZCUlN3d1FrRkJNRUlzUTBGQlF5eERRVUZETzFGQlF6bEZMRTFCUVUwc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJSVzVFTEUxQlFVMHNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJRenRSUVVWMFFpeE5RVUZOTEVkQlFVY3NSMEZCUnl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFhRVUZYTEVWQlFVVXNaMEpCUVdkQ0xFTkJRVU03V1VGRGRFVXNUVUZCVFR0WlFVTk9MRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFWVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxHVkJRV1VzUTBGQlF5eEhRVUZITEVkQlFVYzdXVUZETlVVc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGTkxFVkJRVVVzVVVGQlVTeERRVUZETEVkQlFVY3NSMEZCUnp0WlFVTnFSU3hsUVVGbExFZEJRVWNzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNaVUZCWlN4RFFVRkRMRWRCUVVjc1IwRkJSenRaUVVOd1JpeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4WlFVRlpMRU5CUVVNc1IwRkJSeXhIUVVGSE8xbEJRemRFTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4RlFVRkZMRmxCUVZrc1EwRkJReXhIUVVGSExFZEJRVWM3V1VGRGJrVXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1dVRkJXU3hEUVVGRExFZEJRVWNzUjBGQlJ6dFpRVU0zUkN4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3haUVVGWkxFTkJRVU1zUjBGQlJ5eEhRVUZITzFsQlEyNUZMRTFCUVUwc1IwRkJSeXhUUVVGVE8xbEJRMnhDTEUxQlFVMHNSMEZCUnl4dFFrRkJiVUk3V1VGRE5VSXNLMEpCUVN0Q08xbEJReTlDTEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzV1VGQldTeERRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhPMWxCUXpkRkxFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1dVRkJXU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITzFsQlF6ZEZMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGSE8xbEJRemRGTEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNVMEZCVXl4RlFVRkZMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzV1VGQldTeERRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhPMWxCUTNwR0xFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkhMRWRCUVVjN1dVRkRMMFFzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWRCUVVjc1IwRkJSenRaUVVNdlJDeDNSRUZCZDBRN1dVRkRlRVFzVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hSUVVGUkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTTdXVUZEYWtZc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4UlFVRlJMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU03V1VGRGFrWXNUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeFJRVUZSTEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOd1JpeFBRVUZQTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRE5VSXNRMEZCUXp0SlFVZEVPenM3VDBGSFJ6dEpRVU5JTEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJOa0k3VVVGRE9VTXNTVUZCU1N4UFFVRlBMRU5CUVVNc1MwRkJTeXhYUVVGWE8xbEJRekZDTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRWQ3hQUVVGUExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNSVUZCUlN4aFFVRmhMRVZCUVVVc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0UlFVTTFSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU51UkN4TlFVRk5MRWRCUVVjc1IwRkJSeXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4WFFVRlhMRVZCUVVVc1owSkJRV2RDTEVOQlFVTTdXVUZEZEVVc1RVRkJUVHRaUVVOT0xFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeEZRVUZGTEdWQlFXVXNRMEZCUXl4SFFVRkhMRWRCUVVjN1dVRkROVVVzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVWQlFVVXNTMEZCU3l4RFFVRkRPMWxCUTNoRUxIVkNRVUYxUWp0WlFVTjJRaXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4UlFVRlJMRVZCUVVVc1EwRkJReXhEUVVGRExFMUJRVTBzUlVGQlJTeExRVUZMTEVOQlFVTTdXVUZEZUVRc1VVRkJVVHRaUVVOU0xFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU1zVFVGQlRTeEZRVUZGTEV0QlFVc3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVOdVJTeFBRVUZQTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRE5VSXNRMEZCUXp0SlFVZEVPenM3VDBGSFJ6dEpRVU5JTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJkMEk3VVVGRGNFTXNTVUZCU1N4UFFVRlBMRU5CUVVNc1MwRkJTeXhYUVVGWE8xbEJRekZDTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRWQ3hQUVVGUExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1dVRkJXU3hEUVVGRExFTkJRVU03VVVGRGJFUXNUVUZCVFN4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkRia1FzVFVGQlRTeEhRVUZITEVkQlFVY3NUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVjBGQlZ5eEZRVUZGTEdkQ1FVRm5RaXhEUVVGRE8xbEJRM1JGTEUxQlFVMDdXVUZEVGl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFZRVUZWTEVWQlFVVXNRMEZCUXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hsUVVGbExFTkJRVU1zUjBGQlJ5eEhRVUZITzFsQlF6VkZMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEZGQlFWRXNSVUZCUlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEhRVUZITEVkQlFVYzdXVUZEYWtVc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCVlN4RlFVRkZMRU5CUVVNc1EwRkJReXhSUVVGUkxFVkJRVVVzWlVGQlpTeERRVUZETEVkQlFVY3NSMEZCUnp0WlFVTTFSU3hQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4UlFVRlJMRVZCUVVVc1EwRkJReXhEUVVGRExFMUJRVTBzUlVGQlJTeFJRVUZSTEVOQlFVTTdXVUZETTBRc1lVRkJZVHRaUVVOaUxFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEUxQlFVMHNRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVVNeFJDeFBRVUZQTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRE5VSXNRMEZCUXp0SlFVZEVPenM3TzA5QlNVYzdTVUZEU0N4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVFpDTzFGQlF6bERMRWxCUVVrc1QwRkJUeXhEUVVGRExFdEJRVXNzVjBGQlZ6dFpRVU14UWl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRMVFzVDBGQlR5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1lVRkJZU3hGUVVGRkxHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1VVRkROVVFzVFVGQlRTeFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEYmtRc1RVRkJUU3hIUVVGSExFZEJRVWNzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1YwRkJWeXhGUVVGRkxHZENRVUZuUWl4RFFVRkRPMWxCUTNSRkxFMUJRVTA3V1VGRFRpeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETEUxQlFVMHNSVUZCUlN4TFFVRkxMRU5CUVVNN1dVRkRlRVFzYlVKQlFXMUNPMWxCUTI1Q0xFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU1zVFVGQlRTeEZRVUZGTEV0QlFVc3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJRenRSUVVOdVJTeFBRVUZQTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRE5VSXNRMEZCUXp0SlFVZEVPenM3VDBGSFJ6dEpRVU5JTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJkVUk3VVVGRGJFTXNTVUZCU1N4UFFVRlBMRU5CUVVNc1MwRkJTeXhYUVVGWE8xbEJRekZDTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRWQ3hQUVVGUExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVU03VVVGRGFFUXNUVUZCVFN4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkRia1FzVFVGQlRTeEhRVUZITEVkQlFVY3NUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVjBGQlZ5eEZRVUZGTEdkQ1FVRm5RaXhEUVVGRE8xbEJRM1JGTEUxQlFVMDdXVUZEVGl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTExFTkJRVU03V1VGRGNFUXNVMEZCVXp0WlFVTlVMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFMUJRVTBzUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXp0UlFVTXhSQ3hQUVVGUExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkROVUlzUTBGQlF6dEpRVWRFT3pzN1QwRkhSenRKUVVOSUxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCYzBJN1VVRkRhRU1zU1VGQlNTeFBRVUZQTEVOQlFVTXNTMEZCU3l4WFFVRlhPMWxCUXpGQ0xFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEVkN4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUlVGQlJTeE5RVUZOTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkRPVU1zVDBGQlR5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRPMWxCUTNKQ0xFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1R0WlFVTmFMRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU1zVDBGQlR6dFpRVU5zUWl4SlFVRkpMRVZCUVVVc1RVRkJUVHRUUVVOaUxFTkJRVU1zUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZIUkRzN08wOUJSMGM3U1VGRFNDeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVhkQ08xRkJRM0JETEVsQlFVa3NUMEZCVHl4RFFVRkRMRXRCUVVzc1YwRkJWenRaUVVNeFFpeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMUZCUTFRc1QwRkJUeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGRE8xRkJRMnhFTEUxQlFVMHNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUTI1RUxFMUJRVTBzUjBGQlJ5eEhRVUZITEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxGZEJRVmNzUlVGQlJTeG5Ra0ZCWjBJc1EwRkJRenRaUVVOMFJTeE5RVUZOTzFsQlEwNHNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXl4SFFVRkhMRWRCUVVjN1dVRkRia1FzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRWRCUVVjc1IwRkJSenRaUVVNeFJDeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRE5VUXNUMEZCVHl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlF6VkNMRU5CUVVNN1NVRkhSRHM3TzA5QlIwYzdTVUZEU0N4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRWGxDTzFGQlEzUkRMRWxCUVVrc1QwRkJUeXhEUVVGRExFdEJRVXNzVjBGQlZ6dFpRVU14UWl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRMVFzVDBGQlR5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1UwRkJVeXhGUVVGRkxHRkJRV0VzUTBGQlF5eERRVUZETzFGQlEzQkVMRTlCUVU4c1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF6dFpRVU55UWl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWs3V1VGRFdpeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTlCUVU4N1dVRkRiRUlzU1VGQlNTeEZRVUZGTEUxQlFVMDdVMEZEWWl4RFFVRkRMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUY1UWp0UlFVTjBReXhKUVVGSkxFOUJRVThzUTBGQlF5eExRVUZMTEZkQlFWYzdXVUZETVVJc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU5VTEU5QlFVOHNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhGUVVGRkxGTkJRVk1zUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZCUXp0UlFVTndSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU51UkN4TlFVRk5MRWRCUVVjc1IwRkJSeXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4WFFVRlhMRVZCUVVVc1owSkJRV2RDTEVOQlFVTTdXVUZEZEVVc1RVRkJUVHRaUVVOT0xFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNRMEZCUXl4SFFVRkhMRWRCUVVjN1dVRkRNMFFzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRE8xRkJRelZFTEU5QlFVOHNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU0xUWl4RFFVRkRPMGxCUjBRN096czdPMDlCUzBjN1NVRkRTQ3hOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFUWkNPMUZCUXpsRExFbEJRVWtzVDBGQlR5eERRVUZETEV0QlFVc3NWMEZCVnp0WlFVTXhRaXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzFGQlExUXNUMEZCVHl4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExFVkJRVVVzWVVGQllTeEZRVUZGTEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03VVVGRE5VUXNUVUZCVFN4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkRia1FzVFVGQlRTeEhRVUZITEVkQlFVY3NUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVjBGQlZ5eEZRVUZGTEdkQ1FVRm5RaXhEUVVGRE8xbEJRM1JGTEUxQlFVMDdXVUZEVGl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hOUVVGTkxFTkJRVU1zUjBGQlJ5eEhRVUZITzFsQlF6TkVMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF5eEhRVUZITEVkQlFVYzdXVUZETlVRc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRPMUZCUXpWRUxFOUJRVThzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVNMVFpeERRVUZETzBsQlJVUTdPenM3TzA5QlMwYzdTVUZEU0N4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVFJDTzFGQlF6VkRMRWxCUVVrc1QwRkJUeXhEUVVGRExFdEJRVXNzVjBGQlZ6dFpRVU14UWl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRMVFzVDBGQlR5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1dVRkJXU3hGUVVGRkxHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1VVRkRNVVFzVFVGQlRTeFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEYmtRc1RVRkJUU3hIUVVGSExFZEJRVWNzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1YwRkJWeXhGUVVGRkxHZENRVUZuUWl4RFFVRkRPMWxCUTNSRkxHOUNRVUZ2UWp0WlFVTndRaXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRVZCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUnl4SFFVRkhPMWxCUTNwRUxFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeEZRVUZGTEUxQlFVMHNRMEZCUXl4SFFVRkhMRWRCUVVjN1dVRkRia1VzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1YwRkJWeXhGUVVGRkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVWQlFVVXNUVUZCVFN4RFFVRkRMRWRCUVVjc1IwRkJSenRaUVVOeVJTeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZETEZGQlFWRXNSVUZCUlN4TlFVRk5MRU5CUVVNc1IwRkJSeXhIUVVGSE8xbEJRMjVGTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxHTkJRV01zUlVGQlJTeERRVUZETEVOQlFVTXNXVUZCV1N4RlFVRkZMRTFCUVUwc1EwRkJReXhIUVVGSExFZEJRVWM3V1VGRE0wVXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFZEJRVWNzUjBGQlJ6dFpRVU16UkN4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hOUVVGTkxFTkJRVU1zUjBGQlJ5eEhRVUZITzFsQlF6ZEVMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEdGQlFXRXNSVUZCUlN4RFFVRkRMRU5CUVVNc1YwRkJWeXhGUVVGRkxFMUJRVTBzUTBGQlF5eEhRVUZITEVkQlFVYzdXVUZEZWtVc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNWMEZCVnl4RlFVRkZMRU5CUVVNc1EwRkJReXhUUVVGVExFVkJRVVVzVFVGQlRTeERRVUZETEVkQlFVY3NSMEZCUnp0WlFVTnlSU3hQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4aFFVRmhMRVZCUVVVc1EwRkJReXhEUVVGRExGZEJRVmNzUlVGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUnl4SFFVRkhPMWxCUTNwRkxFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRzlDUVVGdlFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4clFrRkJhMElzUlVGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUnl4SFFVRkhPMWxCUTNaR0xFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMR3RDUVVGclFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4blFrRkJaMElzUlVGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUnl4SFFVRkhPMWxCUTI1R0xFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMR1ZCUVdVc1JVRkJSU3hEUVVGRExFTkJRVU1zWVVGQllTeEZRVUZGTEUxQlFVMHNRMEZCUXl4SFFVRkhMRWRCUVVjN1dVRkROMFVzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1dVRkJXU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFZRVUZWTEVWQlFVVXNUVUZCVFN4RFFVRkRMRWRCUVVjc1IwRkJSenRaUVVOMlJTeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3haUVVGWkxFVkJRVVVzUTBGQlF5eERRVUZETEZWQlFWVXNSVUZCUlN4TlFVRk5MRU5CUVVNN1dVRkRha1VzUzBGQlN6dFpRVU5NTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRMmhGTEU5QlFVOHNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU0xUWl4RFFVRkRPMGxCUjBRN096dFBRVWRITzBsQlEwZ3NUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVFMFFqdFJRVU0xUXl4SlFVRkpMRTlCUVU4c1EwRkJReXhMUVVGTExGZEJRVmM3V1VGRE1VSXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOVUxFOUJRVThzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXl4RlFVRkZMRmxCUVZrc1JVRkJSU3huUWtGQlowSXNRMEZCUXl4RFFVRkRPMUZCUXpGRUxFMUJRVTBzVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFGQlEyNUVMRTFCUVUwc1IwRkJSeXhIUVVGSExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRmRCUVZjc1JVRkJSU3huUWtGQlowSXNRMEZCUXp0WlFVTjBSU3h6UWtGQmMwSTdXVUZEZEVJc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUXk5RUxFOUJRVThzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVNMVFpeERRVUZETzBsQlIwUTdPenRQUVVkSE8wbEJRMGdzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRXlRanRSUVVNeFF5eEpRVUZKTEU5QlFVOHNRMEZCUXl4TFFVRkxMRmRCUVZjN1dVRkRNVUlzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTlVMRTlCUVU4c1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eEZRVUZGTEZkQlFWY3NSVUZCUlN4bFFVRmxMRU5CUVVNc1EwRkJRenRSUVVONFJDeE5RVUZOTEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0UlFVTnVSQ3hOUVVGTkxFZEJRVWNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hYUVVGWExFVkJRVVVzWjBKQlFXZENMRU5CUVVNN1dVRkRkRVVzVFVGQlRUdFpRVU5PTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4RlFVRkZMRXRCUVVzc1EwRkJReXhIUVVGSExFZEJRVWM3V1VGRGJFVXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVVzVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1MwRkJTeXhEUVVGRExFZEJRVWNzUjBGQlJ6dFpRVU5vUlN4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUjBGQlJ5eEhRVUZITzFsQlF6VkVMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlF5eEhRVUZITEVkQlFVYzdXVUZETlVRc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETEVkQlFVY3NSMEZCUnp0WlFVTTFSQ3hQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkRMMFFzVDBGQlR5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRelZDTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlEyWXNUMEZCWjBJc1JVRkRhRUlzU1VGQldTeEZRVU5hTEV0QlFXOURMRVZCUTNCRExGbEJRWEZDTzFGQlJYWkNMRWxCUVVrc1EwRkJReXhMUVVGTE8xbEJRMUlzUzBGQlN5eEhRVUZITEZsQlFWa3NRMEZCUXp0UlFVTjJRaXhMUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRXlRaXhEUVVGRExFTkJRVU03VVVGRGJrUXNUMEZCVHl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTTdTVUZETjBRc1EwRkJRenRKUVVWRUxFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCVnp0UlFVTjZRaXhQUVVGUExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTTdTVUZEZGtJc1EwRkJRenRKUVVWRUxEQkZRVUV3UlR0SlFVTXhSU3hOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFWa3NSVUZCUlN4TFFVRmhPMUZCUXpkRExFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNN1dVRkRjRUlzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRWRCUVVjc1NVRkJTU3hIUVVGSExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1VVRkRhRVFzU1VGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJRenRaUVVOd1FpeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFZEJRVWNzYVVKQlFXbENMRU5CUVVNc1EwRkJRenRSUVVWb1JDeFBRVUZQTEV0QlFVc3NSMEZCUnl4SlFVRkpMRWRCUVVjc1IwRkJSeXhIUVVGSExFdEJRVXNzUjBGQlJ5eEhRVUZITEVOQlFVTTdTVUZETVVNc1EwRkJRenRKUVVWRU96czdPenM3VDBGTlJ6dEpRVU5JTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhKUVVGblF6dFJRVU01UXl4TlFVRk5MRlZCUVZVc1IwRkJSeXhEUVVGRExFdEJRWGRDTEVWQlFWVXNSVUZCUlR0WlFVTjBSQ3hQUVVGUExFMUJRVTBzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeFpRVUZaTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTTdVVUZETjBZc1EwRkJReXhEUVVGRE8xRkJRMFlzU1VGQlNTeExRVUZMTEVkQlFYTkNMRVZCUVVVc1EwRkJRenRSUVVOc1F5eEpRVUZKTEVsQlFVa3NRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhGUVVGRk8xbEJRM0pDTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNoQ0xFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2FVSkJRMklzU1VGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOa0xFdEJRVXNzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE96dG5Ra0ZGYkVJc1MwRkJTeXhIUVVGSExFVkJRVVVzUTBGQlF6dFRRVU5rTzJGQlFVMDdXVUZEVEN4blJFRkJaMFE3V1VGRGFFUXNTMEZCU3l4SFFVRkhMRWxCUVdkQ0xFTkJRVU03VTBGRE1VSTdVVUZEUkN4UFFVRlBMRlZCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEpRVU16UWl4RFFVRkRPMGxCUlVRc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eFpRVUUyUWp0UlFVTjRReXhOUVVGTkxHdENRVUZyUWl4SFFVRkhPMWxCUTNwQ0xGTkJRVk1zUlVGQlJTeFJRVUZSTzFsQlEyNUNMRmxCUVZrc1JVRkJSU3hQUVVGUE8xbEJRM0pDTEZGQlFWRXNSVUZCUlN4alFVRmpPMWxCUTNoQ0xFOUJRVThzUlVGQlJTeG5Ra0ZCWjBJN1dVRkRla0lzVjBGQlZ5eEZRVUZGTEd0Q1FVRnJRanRaUVVNdlFpeFJRVUZSTEVWQlFVVXNZVUZCWVR0WlFVTjJRaXh6UlVGQmMwVTdXVUZEZEVVc2VVTkJRWGxETzFsQlEzcERMRWxCUVVrc1JVRkJSU3dyUWtGQkswSTdXVUZEY2tNc2JVaEJRVzFJTzFsQlEyNUlMRXRCUVVzc1JVRkJSU3gxUTBGQmRVTTdVMEZETDBNc1EwRkJRenRSUVVWR0xDdERRVUVyUXp0UlFVTXZReXh2UlVGQmIwVTdVVUZEY0VVc2MwVkJRWE5GTzFGQlEzUkZMRGhFUVVFNFJEdFJRVU01UkN4SlFVRkpMRk5CUVZNc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRGNFSXNTVUZCU1N4WlFVRlpMRmxCUVZrc1RVRkJUU3hGUVVGRk8xbEJRMnhETEZOQlFWTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRE8yZENRVU12UWl4RFFVRkRMRmxCUVZrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03V1VGRGJFUXNXVUZCV1N4SFFVRkhMRmxCUVZrc1EwRkJReXhOUVVGTkxFTkJRVU03VTBGRGNFTTdVVUZEUkN4WlFVRlpMRWRCUVVjc1dVRkJXU3hEUVVGRExFOUJRVThzUTBGQlF5eGxRVUZsTEVWQlFVVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFVkJRVVU3V1VGRGNFVXNUMEZCVHl4clFrRkJhMElzUTBGQlF5eExRVUYzUXl4RFFVRkRMRWxCUVVrc1MwRkJTeXhEUVVGRE8xRkJReTlGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTBnc1QwRkJUeXhKUVVGSkxFMUJRVTBzUTBGQlF5eFpRVUZaTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1NVRkROME1zUTBGQlF6dEpRVVZFTEcxRVFVRnRSRHRKUVVOdVJDeE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRmxCUVRaQ08xRkJRemxETEUxQlFVMHNTMEZCU3l4SFFVRkhMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdVVUZETVVNc1NVRkJTU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETzFGQlEzSkNMRWxCUVVrc1dVRkJXU3haUVVGWkxFMUJRVTA3V1VGRGFFTXNVMEZCVXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU51UkN4UFFVRlBMRWxCUVVrc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1NVRkROME1zUTBGQlF6dEpRVVZFTEUxQlFVMHNRMEZCUXl4bFFVRmxMRU5CUVVNc1MwRkJaVHRSUVVOd1F5eEpRVUZKTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhYUVVGWE8xbEJRMmhETEU5QlFVOHNTVUZCU1N4RFFVRkRPMUZCUTJRc1QwRkJUeXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEycENMRU5CUVVNN1NVRkZSQ3hOUVVGTkxFTkJRVU1zWTBGQll5eERRVU5xUWl4RFFVRnhReXhGUVVOeVF5eFJRVUZuUWl4RlFVTm9RaXhOUVVFd1FqdFJRVVUxUWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhKUVVGSk8xbEJRMW9zVDBGQlR6dFJRVU5VTEVsQlFVa3NUMEZCVHl4RFFVRkRMRXRCUVVzc1VVRkJVVHRaUVVOMlFpeFBRVUZQTzFGQlExUXNUVUZCVFN4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTTFRaXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlR0WlFVTndReXhOUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRjRUlzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTzJkQ1FVTm9ReXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEVkQlFVY3NVVUZCVVN4M1FrRkJkMElzUjBGQlJ5eE5RVUZOTzI5Q1FVTjRSQ3hwUWtGQmFVSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdZVUZEYUVRN1UwRkRSanRKUVVOSUxFTkJRVU03UTBGRFJqczdPMEZEZUhaQ01rTTdRVUZUTlVNc05FSkJRVFJDTzBGQlF6VkNMSGxDUVVGNVFqdEJRVU42UWl4dlJVRkJiMFU3UVVGRGNFVXNORVZCUVRSRk8wRkJSVFZGTEUxQlFVMHNVMEZCVXl4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVONFFpeE5RVUZOTEZsQlFWa3NSMEZCUnl4UFFVRlBMRU5CUVVNN1FVRkZOMElzVFVGQlRTdzBRa0ZCYVVJc1IwRkJSeXhwUkVGQlF5eFhRVUZYTEVWQlFVVXNWVUZCVlN4RlFVRkZMRkZCUVZFc1JVRkJSU3hKUVVGSkxFVkJRVVVzVTBGQlV5eEZRVUZGTEZWQlFWVXNSVUZCUlN4UlFVRlJMRVZCUVVVc1ZVRkJWU3hEUVVGVkxFZEJRVU03UVVGRE1VZ3NUVUZCVFN4M1FrRkJZU3hIUVVGSExHbEVRVUZETEZWQlFWVXNSVUZCUlN4UlFVRlJMRVZCUVVVc1NVRkJTU3hGUVVGRkxGTkJRVk1zUlVGQlJTeFZRVUZWTEVWQlFVVXNVVUZCVVN4RFFVRlZMRWRCUVVNN1FVRkROMFlzVFVGQlRTdzBRa0ZCYVVJc1IwRkJSeXhwUkVGQlF5eFZRVUZWTEVWQlFVVXNVVUZCVVN4RlFVRkZMRWxCUVVrc1JVRkJSU3hUUVVGVExFVkJRVVVzVlVGQlZTeEZRVUZGTEZGQlFWRXNSVUZCUlN4UFFVRlBMRVZCUVVVc1VVRkJVU3hGUVVGRkxHbENRVUZwUWl4RlFVRkZMR0ZCUVdFc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4VFFVRlRMRU5CUVZVc1IwRkJRenRCUVVOb1RDeE5RVUZOTERKQ1FVRm5RaXhIUVVGSExHbEVRVUZETEZWQlFWVXNSVUZCUlN4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGVkxFZEJRVU03UVVGREwwUXNUVUZCVFN3clFrRkJiMElzUjBGQlJ5eHBSRUZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGVkxFZEJRVU03UVVGRGNrUXNUVUZCVFN4dFEwRkJkMElzUjBGQlJ5eHBSRUZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFBRVUZQTEVWQlFVVXNVMEZCVXl4RlFVRkZMRTlCUVU4c1JVRkJSU3hYUVVGWExFVkJRVVVzVjBGQlZ5eEZRVUZGTEZkQlFWY3NSVUZCUlN4SlFVRkpMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNVMEZCVXl4RFFVRlZMRWRCUVVNN1FVRkRjRXNzVFVGQlRTeHJRMEZCZFVJc1IwRkJSeXhwUkVGQlF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJWU3hIUVVGRE8wRkJRemxFTEUxQlFVMHNORUpCUVdsQ0xFZEJRVWNzYVVSQlFVTXNWVUZCVlN4RlFVRkZMRkZCUVZFc1JVRkJSU3hWUVVGVkxFVkJRVVVzVlVGQlZTeEZRVUZGTEZGQlFWRXNSVUZCUlN4VlFVRlZMRVZCUVVVc1VVRkJVU3hGUVVGRkxFOUJRVThzUTBGQlZTeEhRVUZETzBGQlF6TklMRTFCUVUwc2NVTkJRVEJDTEVkQlFVY3NhVVJCUVVNc1ZVRkJWU3hGUVVGRkxGRkJRVkVzUlVGQlJTeEpRVUZKTEVWQlFVVXNUMEZCVHl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEZOQlFWTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRlZMRWRCUVVNN1FVRkRla29zVFVGQlRTdzBRa0ZCYVVJc1IwRkJSeXhwUkVGQlF5eFZRVUZWTEVWQlFVVXNVVUZCVVN4RlFVRkZMRlZCUVZVc1JVRkJSU3hSUVVGUkxFVkJRVVVzVlVGQlZTeEZRVUZGTEZGQlFWRXNSVUZCUlN4UFFVRlBMRU5CUVZVc1IwRkJRenRCUVVNdlJ5eE5RVUZOTEhWQ1FVRlpMRWRCUVVjc2FVUkJRVU1zVlVGQlZTeEZRVUZGTEZGQlFWRXNSVUZCUlN4VlFVRlZMRVZCUVVVc1VVRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlZTeEhRVUZETzBGQlEycEdMRTFCUVUwc05FSkJRV2xDTEVkQlFVY3NhVVJCUVVNc1ZVRkJWU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFZRVUZWTEVWQlFVVXNVVUZCVVN4RFFVRlZMRWRCUVVNN1FVRkRhRVlzVFVGQlRTeHhRa0ZCVlN4SFFVRkhMR2xFUVVGRExFMUJRVTBzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRlZMRWRCUVVNN1FVRkRja1FzVFVGQlRTeDFRa0ZCV1N4SFFVRkhMR2xFUVVGRExFMUJRVTBzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRlZMRWRCUVVNN1FVRkRka1FzVFVGQlRTeDNRa0ZCWVN4SFFVRkhMR2xFUVVGRExFMUJRVTBzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRlZMRWRCUVVNN1FVRkRlRVFzVFVGQlRTeDNRa0ZCWVN4SFFVRkhMR2xFUVVGRExFMUJRVTBzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRlZMRWRCUVVNN1FVRkRlRVFzVFVGQlRTdzBRa0ZCYVVJc1IwRkJSeXhwUkVGQlF5eE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJWU3hIUVVGRE8wRkJRelZFTEUxQlFVMHNNa0pCUVdkQ0xFZEJRVWNzYVVSQlFVTXNTMEZCU3l4RlFVRkZMRlZCUVZVc1JVRkJSU3hYUVVGWExFVkJRVVVzVlVGQlZTeEZRVUZGTEdOQlFXTXNSVUZCUlN4TlFVRk5MRVZCUVVVc1QwRkJUeXhGUVVGRkxHRkJRV0VzUlVGQlJTeFhRVUZYTEVWQlFVVXNZVUZCWVN4RlFVRkZMRzlDUVVGdlFpeEZRVUZGTEd0Q1FVRnJRaXhGUVVGRkxHVkJRV1VzUlVGQlJTeFpRVUZaTEVWQlFVVXNXVUZCV1N4RlFVRkZMRlZCUVZVc1EwRkJWU3hIUVVGRE8wRkJRemxRTEUxQlFVMHNNa0pCUVdkQ0xFZEJRVWNzYVVSQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVUwc1EwRkJWU3hIUVVGRE8wRkJRMnBFTEUxQlFVMHNNRUpCUVdVc1IwRkJSeXhwUkVGQlF5eFZRVUZWTEVWQlFVVXNVMEZCVXl4RlFVRkZMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCVlN4SFFVRkRPMEZCUXpkR0xFMUJRVTBzWjBKQlFXZENMRWRCUVVjc2FVUkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4UlFVRlJMRU5CUVZVc1IwRkJRenRCUVhkQ00wUXNiVVZCUVcxRk8wRkJRMjVGTEhkRlFVRjNSVHRCUVVONFJTeHhSVUZCY1VVN1FVRkRja1VzYVVWQlFXbEZPMEZCUTJwRkxIVkVRVUYxUkR0QlFVTjJSQ3hOUVVGTkxITkNRVUZ6UWl4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVOd1F5eE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExFOUJRVThzUTBGQlF6dEJRVU5xUXl4TlFVRk5MREJDUVVFd1FpeEhRVUZITzBsQlEycERMRk5CUVZNN1NVRkRWQ3hOUVVGTk8wbEJRMDRzVVVGQlVUdEpRVU5TTEZGQlFWRTdTVUZEVWl4TlFVRk5PME5CUTFBc1EwRkJRenRCUVVWR0xFMUJRVTBzVjBGQlZ5eEhRVUZITEVOQlEyaENMRTFCUVRaRUxFVkJRemRFTEZGQlFXZENMRVZCUTJoQ0xFMUJRU3RDTEVWQlEzcENMRVZCUVVVN08wbEJRMVlzVFVGQlRTeEhRVUZITEUxQlFVMHNZVUZCVGl4TlFVRk5MR05CUVU0c1RVRkJUU3hIUVVGSkxFVkJRVVVzUTBGQlF6dEpRVU4wUWl4TlFVRk5MRmRCUVZjc1IwRkJZU3hGUVVGRkxFTkJRVU03U1VGRGFrTXNTMEZCU3l4TlFVRk5MRXRCUVVzc1NVRkJTU3hOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZPMUZCUTNwRExFbEJRVWtzVDBGQlR5eExRVUZMTEV0QlFVc3NVVUZCVVR0WlFVTXpRaXhUUVVGVE8xRkJRMWdzVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UzBGREwwSTdTVUZEUkN4elFrRkJjMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNVVUZCVVN4RlFVRkZMRU5CUVVNc1UwRkJVeXhGUVVGRkxFZEJRVWNzVjBGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVVjBSU3d3UlVGQk1FVTdTVUZETVVVc1RVRkJUU3hQUVVGUExFZEJRVWNzZFVKQlFYVkNMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzBsQlEzaEVMRTFCUVUwc1UwRkJVeXhIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1NVRkRkRU1zU1VGQlNTeE5RVUZOTEVOQlFVTTdTVUZEV0N4SlFVRkpMRTlCUVU4c1JVRkJSVHRSUVVOWUxFMUJRVTBzUjBGQlJ5eFRRVUZUTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dExRVU14UXp0VFFVRk5PMUZCUTB3c1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU5ZTEV0QlFVc3NUVUZCVFN4SFFVRkhMRWxCUVVrc1UwRkJVeXhGUVVGRk8xbEJRek5DTEUxQlFVMHNTMEZCU3l4VFFVRkhMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTJoRExFbEJRVWtzVDBGQlR5eExRVUZMTEV0QlFVc3NVVUZCVVR0blFrRkRNMElzVTBGQlV6dFpRVU5ZTEUxQlFVMHNVMEZCVXl4VFFVRkhMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zTUVOQlFVVXNTMEZCU3l4RFFVRkRPMWxCUTNKRExFbEJRVWtzVTBGQlV5eEpRVUZKTEZOQlFWTXNTVUZCU1N4TlFVRk5PMmRDUVVOc1F5eE5RVUZOTEVkQlFVY3NSMEZCUnl4RFFVRkRPMU5CUTJoQ08wdEJRMFk3U1VGRlJDeHZSVUZCYjBVN1NVRkRjRVVzYTBWQlFXdEZPMGxCUTJ4RkxHdEZRVUZyUlR0SlFVTnNSU3gxUlVGQmRVVTdTVUZEZGtVc2JVVkJRVzFGTzBsQlEyNUZMRzlFUVVGdlJEdEpRVU53UkN4TlFVRk5MRmRCUVZjc1IwRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRPVVlzVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhWUVVGVkxFTkJRVU1zYzBKQlFYTkNMRWxCUVVrc1YwRkJWeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZGZEVZc2JVTkJRVzFETzBsQlEyNURMRWxCUVVrc1IwRkJSeXhIUVVGSExHbENRVUZwUWl4RFFVRkRMRU5CUVVNc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRE8wbEJRek5FTEVsQlFVa3NUMEZCVHl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMnBDTEV0QlFVc3NUVUZCVFN4SlFVRkpMRWxCUVVrc1RVRkJUU3hGUVVGRk8xRkJRM3BDTEUxQlFVMHNSMEZCUnl4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU16UWl4clFrRkJhMEk3VVVGRGJFSXNUVUZCVFN4aFFVRmhMRWRCUVVjc1IwRkJSeXhIUVVGSExFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEZUVNc1NVRkJTU3hoUVVGaExFdEJRVXNzUTBGQlF6dFpRVU55UWl4SFFVRkhMRWxCUVVrc1pVRkJaU3hEUVVGRE8yRkJRM0JDTEVsQlFVa3NZVUZCWVN4SFFVRkhMRU5CUVVNN1dVRkRlRUlzUjBGQlJ5eEpRVUZKTEdsQ1FVRnBRaXhoUVVGaExFZEJRVWNzUTBGQlF6dFJRVU16UXl4UFFVRlBMRWRCUVVjc1IwRkJSeXhEUVVGRE8xRkJSV1FzVFVGQlRTeExRVUZMTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRekZDTEVsQlFVa3NUMEZCVHl4TFFVRkxMRXRCUVVzc1VVRkJVVHRaUVVNelFpeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMRWRCUVVjc1VVRkJVU3h2UWtGQmIwSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdVVUZGTVVVc1RVRkJUU3hUUVVGVExGTkJRVWNzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl3d1EwRkJSU3hMUVVGTExFTkJRVU03VVVGRGNrTXNUVUZCVFN4VlFVRlZMSEZDUVVGSExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNNRU5CUVVVc1MwRkJTeXd3UTBGQlJTeFJRVUZSTEhGRFFVRk5MRmxCUVZrc1EwRkJRenRSUVVWc1JTeEpRVUZKTEZOQlFWTXNSVUZCUlR0WlFVTmlMRWRCUVVjc1NVRkJTU3h2UWtGQmIwSTdXVUZEZGtJc01FTkJRVEJETzFsQlF6RkRMREJEUVVFd1F6dFpRVU14UXl4UFFVRlBMRVZCUVVVc1UwRkJVeXhGUVVGSExFMUJRV3RETEVOQlFVTXNVMEZCVXl4RFFVRkRMRVZCUVVVc1ZVRkJWU3hEUVVGRE8yZENRVU5xUml4VFFVRlRMRU5CUVVNN1UwRkRZanRoUVVGTk8xbEJRMHdzUjBGQlJ5eEpRVUZKTEZWQlFWVXNSMEZCUnl4VFFVRlRMRU5CUVVNN1UwRkRMMEk3VVVGSFJDeHJSVUZCYTBVN1VVRkRiRVVzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MR0ZCUVU0c1RVRkJUU3hqUVVGT0xFMUJRVTBzUjBGQlNTeERRVUZYTEVOQlFVTTdXVUZEYUVNc1RVRkJUVHRMUVVOVU8wbEJRMFFzVDBGQlR5eGhRVUZoTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkROVUlzUTBGQlF5eERRVUZETzBGQlJXRXNUVUZCVFN4VlFVRlZPMGxCUlRkQ0xFMUJRVTBzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhMUVVGak8xRkJRemRETEZWQlFWVXNRMEZCUXl4elFrRkJjMElzUjBGQlJ5eExRVUZMTEVOQlFVTTdTVUZETlVNc1EwRkJRenRKUVVORUxFMUJRVTBzUTBGQlF5d3lRa0ZCTWtJc1EwRkJReXhMUVVGelFqdFJRVU4yUkN4dlJVRkJiMFU3VVVGRGNFVXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1EwRkJRenRSUVVOc1JDeE5RVUZOTEVkQlFVY3NSMEZCUnl4UFFVRlBMRXRCUVVzc1MwRkJTeXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF6dFJRVU0zUkN4UFFVRlBMRU5CUVVNc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRGRFTXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRnJRenRSUVVOdVJDeFBRVUZQTEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1lVRkJZU3hGUVVGRk8xbEJRM2hETEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlR0WlFVTnFReXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNWMEZCVnl4RlFVRkZPMWxCUTNwQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4VlFVRlZMRVZCUVVVN1dVRkRlRUlzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRkZCUVZFc1JVRkJSVHRaUVVOMFFpeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRk8xbEJRMnhDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hUUVVGVExFVkJRVVU3V1VGRGRrSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxGVkJRVlVzUlVGQlJUdFpRVU40UWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVVVGQlVTeEZRVUZGTzFsQlEzUkNMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFZRVUZWTEVWQlFVVTdVMEZEZWtJc1EwRkJReXhEUVVGRE8wbEJRMHdzUTBGQlF6dEpRVWRFT3pzN1QwRkhSenRKUVVOSUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCT0VJN1VVRkRNME1zVDBGQlR5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RlFVRkZMRk5CUVZNc1JVRkJSVHRaUVVOd1F5eERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFBRVUZQTEVWQlFVVTdXVUZEY0VNc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZkQlFWY3NSVUZCUlR0WlFVTjZRaXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNWVUZCVlN4RlFVRkZPMWxCUTNoQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVN1dVRkRkRUlzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSVHRaUVVOc1FpeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1UwRkJVeXhGUVVGRk8xbEJRM1pDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hWUVVGVkxFVkJRVVU3V1VGRGVFSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJUdFRRVU4yUWl4RFFVRkRMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJSMFE3T3p0UFFVZEhPMGxCUTBnc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZyUXp0UlFVTnVSQ3hQUVVGUExGZEJRVmNzUTBGQlF5eE5RVUZOTEVWQlFVVXNZVUZCWVN4RlFVRkZPMWxCUTNoRExFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJUdFpRVU53UXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVjBGQlZ5eEZRVUZGTzFsQlEzcENMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFZRVUZWTEVWQlFVVTdXVUZEZUVJc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZGQlFWRXNSVUZCUlR0WlFVTjBRaXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNTVUZCU1N4RlFVRkZPMWxCUTJ4Q0xFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4VFFVRlRMRVZCUVVVN1dVRkRka0lzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRlZCUVZVc1JVRkJSVHRaUVVONFFpeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1VVRkJVU3hGUVVGRk8xbEJRM1JDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hQUVVGUExFVkJRVVU3V1VGRGNrSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJUdFpRVU4wUWl4RlFVRkZMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzYVVKQlFXbENMRVZCUVVVN1dVRkRhRU1zUlVGQlJTeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMR0ZCUVdFc1JVRkJSVHRaUVVNMVFpeEZRVUZGTEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1IwRkJSeXhGUVVGRk8xbEJRMnhDTEVWQlFVVXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hIUVVGSExFVkJRVVU3V1VGRGJFSXNSVUZCUlN4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFZEJRVWNzUlVGQlJUdFpRVU5zUWl4RlFVRkZMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVTBGQlV5eEZRVUZGTzFOQlEzcENMRU5CUVVNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGSFJEczdUMEZGUnp0SlFVTklMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQmFVTTdVVUZEYWtRc1QwRkJUeXhYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTEZsQlFWa3NSVUZCUlR0WlFVTjJReXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFVkJRVVU3V1VGRGFrTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxGZEJRVmNzUlVGQlJUdFpRVU42UWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVlVGQlZTeEZRVUZGTzFsQlEzaENMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFJRVUZSTEVWQlFVVTdXVUZEZEVJc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlR0VFFVTnVRaXhEUVVGRExFTkJRVU03U1VGRFRDeERRVUZETzBsQlIwUTdPMDlCUlVjN1NVRkRTQ3hOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEUxQlFYRkRPMUZCUTNwRUxFOUJRVThzVjBGQlZ5eERRVUZETEUxQlFVMHNSVUZCUlN4blFrRkJaMElzUlVGQlJUdFpRVU16UXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRVZCUVVVN1dVRkRha01zUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRmRCUVZjc1JVRkJSVHRaUVVONlFpeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRk8xbEJRMnhDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVU3VTBGRGNrSXNRMEZCUXl4RFFVRkRPMGxCUTB3c1EwRkJRenRKUVVkRU96dFBRVVZITzBsQlEwZ3NUVUZCVFN4RFFVRkRMR3RDUVVGclFpeERRVU55UWl4TlFVRjVRenRSUVVVelF5eFBRVUZQTEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVc2IwSkJRVzlDTEVWQlFVVTdXVUZETDBNc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEUxQlFVMHNSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRk8xbEJRMnBETEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hYUVVGWExFVkJRVVU3V1VGRGVrSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUlVGQlJUdFpRVU5zUWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVFVGQlRTeEZRVUZGTzFsQlEzQkNMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVTdXVUZEYmtJc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEU5QlFVOHNSVUZCUlR0WlFVTnlRaXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNVMEZCVXl4RlFVRkZPMWxCUTNaQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCUVVVN1dVRkRja0lzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRmRCUVZjc1JVRkJSVHRaUVVONlFpeEZRVUZGTEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1YwRkJWeXhGUVVGRk8xbEJRekZDTEVWQlFVVXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hYUVVGWExFVkJRVVU3V1VGRE1VSXNSVUZCUlN4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUlVGQlJUdFpRVU51UWl4RlFVRkZMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzUjBGQlJ5eEZRVUZGTzFsQlEyeENMRVZCUVVVc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeEhRVUZITEVWQlFVVTdXVUZEYkVJc1JVRkJSU3hGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlR0WlFVTnNRaXhGUVVGRkxFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNVMEZCVXl4RlFVRkZPMU5CUTNwQ0xFTkJRVU1zUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZIUkRzN1QwRkZSenRKUVVOSUxFMUJRVTBzUTBGQlF5eHBRa0ZCYVVJc1EwRkRjRUlzVFVGQmQwTTdVVUZGTVVNc1QwRkJUeXhYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTEcxQ1FVRnRRaXhGUVVGRk8xbEJRemxETEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlR0WlFVTnFReXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNWMEZCVnl4RlFVRkZPMWxCUTNwQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRVZCUVVVN1dVRkRiRUlzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRTFCUVUwc1JVRkJSVHRaUVVOd1FpeEZRVUZGTEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRk8xTkJRM0JDTEVOQlFVTXNRMEZCUXp0SlFVTk1MRU5CUVVNN1NVRkhSRHM3VDBGRlJ6dEpRVU5JTEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1RVRkJhME03VVVGRGJrUXNUMEZCVHl4WFFVRlhMRU5CUVVNc1RVRkJUU3hGUVVGRkxHRkJRV0VzUlVGQlJUdFpRVU40UXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRVZCUVVVN1dVRkRha01zUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRmRCUVZjc1JVRkJSVHRaUVVONlFpeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1ZVRkJWU3hGUVVGRk8xbEJRM2hDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hSUVVGUkxFVkJRVVU3V1VGRGRFSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxGVkJRVlVzUlVGQlJUdFpRVU40UWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVlVGQlZTeEZRVUZGTzFsQlEzaENMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFJRVUZSTEVWQlFVVTdXVUZEZEVJc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZWQlFWVXNSVUZCUlR0WlFVTjRRaXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNVVUZCVVN4RlFVRkZPMWxCUTNSQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCUVVVN1UwRkRkRUlzUTBGQlF5eERRVUZETzBsQlEwd3NRMEZCUXp0SlFVZEVPenM3VDBGSFJ6dEpRVU5JTEUxQlFVMHNRMEZCUXl4dlFrRkJiMElzUTBGRGRrSXNUVUZCTWtNN1VVRkZOME1zVDBGQlR5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RlFVRkZMSE5DUVVGelFpeEZRVUZGTzFsQlEycEVMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSVHRaUVVOcVF5eERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1YwRkJWeXhGUVVGRk8xbEJRM3BDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hWUVVGVkxFVkJRVVU3V1VGRGVFSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJUdFpRVU4wUWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGTzFsQlEyeENMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFBRVUZQTEVWQlFVVTdXVUZEY2tJc1JVRkJSU3hGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlR0WlFVTnNRaXhGUVVGRkxFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNSMEZCUnl4RlFVRkZPMWxCUTJ4Q0xFVkJRVVVzUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVN1dVRkRiRUlzUlVGQlJTeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRk5CUVZNc1JVRkJSVHRaUVVONFFpeEZRVUZGTEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1QwRkJUeXhGUVVGRk8xbEJRM1JDTEVWQlFVVXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hQUVVGUExFVkJRVVU3V1VGRGRFSXNSVUZCUlN4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJUdFpRVU4wUWl4RlFVRkZMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVDBGQlR5eEZRVUZGTzFsQlEzUkNMRVZCUVVVc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFBRVUZQTEVWQlFVVTdVMEZEZGtJc1EwRkJReXhEUVVGRE8wbEJRMHdzUTBGQlF6dEpRVWRFT3p0UFFVVkhPMGxCUTBnc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZyUXp0UlFVTnVSQ3hQUVVGUExGZEJRVmNzUTBGQlF5eE5RVUZOTEVWQlFVVXNZVUZCWVN4RlFVRkZPMWxCUTNoRExFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUlVGQlJUdFpRVU5xUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVjBGQlZ5eEZRVUZGTzFsQlEzcENMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFZRVUZWTEVWQlFVVTdXVUZEZUVJc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZGQlFWRXNSVUZCUlR0WlFVTjBRaXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNWVUZCVlN4RlFVRkZPMWxCUTNoQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVN1dVRkRkRUlzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRlZCUVZVc1JVRkJSVHRaUVVONFFpeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1VVRkJVU3hGUVVGRk8xbEJRM1JDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hQUVVGUExFVkJRVVU3VTBGRGRFSXNRMEZCUXl4RFFVRkRPMGxCUTB3c1EwRkJRenRKUVVkRU96dFBRVVZITzBsQlEwZ3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVFMlFqdFJRVU42UXl4UFFVRlBMRmRCUVZjc1EwRkJReXhOUVVGTkxFVkJRVVVzVVVGQlVTeEZRVUZGTzFsQlEyNURMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSVHRaUVVOcVF5eERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1YwRkJWeXhGUVVGRk8xbEJRM3BDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hWUVVGVkxFVkJRVVU3V1VGRGVFSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJUdFpRVU4wUWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVlVGQlZTeEZRVUZGTzFsQlEzaENMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFJRVUZSTEVWQlFVVTdXVUZEZEVJc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlR0VFFVTnVRaXhEUVVGRExFTkJRVU03U1VGRFRDeERRVUZETzBsQlIwUTdPenRQUVVkSE8wbEJRMGdzVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRnJRenRSUVVOdVJDeFBRVUZQTEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1lVRkJZU3hGUVVGRk8xbEJRM2hETEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlR0WlFVTnFReXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNWMEZCVnl4RlFVRkZPMWxCUTNwQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4VlFVRlZMRVZCUVVVN1dVRkRlRUlzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRkZCUVZFc1JVRkJSVHRaUVVOMFFpeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1ZVRkJWU3hGUVVGRk8xbEJRM2hDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hSUVVGUkxFVkJRVVU3VTBGRGRrSXNRMEZCUXl4RFFVRkRPMGxCUTB3c1EwRkJRenRKUVVkRU96dFBRVVZITzBsQlEwZ3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVFeVFqdFJRVU55UXl4SlFVRkpMRTlCUVU4c1RVRkJUU3hMUVVGTExGZEJRVmM3V1VGREwwSXNUVUZCVFN4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOa0xITkNRVUZ6UWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hOUVVGTkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVWQlFVVXNWMEZCVnl4RlFVRkZMRTFCUVUwc1JVRkJSU3hOUVVGTkxFVkJRVVVzVFVGQlRTeEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRha2NzVFVGQlRTeERRVUZETEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNN1VVRkRja0lzVDBGQlR5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wbEJRM0JETEVOQlFVTTdTVUZIUkRzN1QwRkZSenRKUVVOSUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCTmtJN1VVRkRla01zU1VGQlNTeFBRVUZQTEUxQlFVMHNTMEZCU3l4WFFVRlhPMWxCUXk5Q0xFMUJRVTBzUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEWkN4elFrRkJjMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNVVUZCVVN4RlFVRkZMRU5CUVVNc1RVRkJUU3hGUVVGRkxGZEJRVmNzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTFCUVUwc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEyNUhMRTFCUVUwc1EwRkJReXhKUVVGSkxFZEJRVWNzVFVGQlRTeERRVUZETzFGQlEzSkNMRTlCUVU4c1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVTndReXhEUVVGRE8wbEJSMFE3TzA5QlJVYzdTVUZEU0N4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVGhDTzFGQlF6TkRMRWxCUVVrc1QwRkJUeXhOUVVGTkxFdEJRVXNzVjBGQlZ6dFpRVU12UWl4TlFVRk5MRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRMlFzYzBKQlFYTkNMRU5CUVVNc1RVRkJUU3hGUVVGRkxGTkJRVk1zUlVGQlJTeERRVUZETEUxQlFVMHNSVUZCUlN4WFFVRlhMRVZCUVVVc1RVRkJUU3hGUVVGRkxFMUJRVTBzUlVGQlJTeE5RVUZOTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOd1J5eE5RVUZOTEVOQlFVTXNTVUZCU1N4SFFVRkhMRTFCUVUwc1EwRkJRenRSUVVOeVFpeFBRVUZQTEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03U1VGRGNFTXNRMEZCUXp0SlFVZEVPenM3VDBGSFJ6dEpRVU5JTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJPRUk3VVVGRE0wTXNUMEZCVHl4WFFVRlhMRU5CUVVNc1RVRkJUU3hGUVVGRkxGTkJRVk1zUlVGQlJUdFpRVU53UXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRVZCUVVVN1dVRkRha01zUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRmRCUVZjc1JVRkJSVHRaUVVONlFpeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRk8xbEJRM0JDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVU3V1VGRGNFSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFMUJRVTBzUlVGQlJUdFRRVU55UWl4RFFVRkRMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJSMFE3TzA5QlJVYzdTVUZEU0N4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFMUJRV3RETzFGQlEyNUVMREpDUVVFeVFqdFJRVU16UWl4UFFVRlBMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdTVUZEY0VNc1EwRkJRenRKUVVkRU96dFBRVVZITzBsQlEwZ3NUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhOUVVGcFF6dFJRVU5xUkN4UFFVRlBMRmRCUVZjc1EwRkJReXhOUVVGTkxFVkJRVVVzV1VGQldTeEZRVUZGTzFsQlEzWkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSVHRaUVVOcVF5eERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1YwRkJWeXhGUVVGRk8xbEJRM3BDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVU3V1VGRGJrSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxGVkJRVlVzUlVGQlJUdFpRVU40UWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVjBGQlZ5eEZRVUZGTzFsQlEzcENMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFZRVUZWTEVWQlFVVTdXVUZEZUVJc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEdOQlFXTXNSVUZCUlR0WlFVTTFRaXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZPMWxCUTNCQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCUVVVN1dVRkRja0lzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMR0ZCUVdFc1JVRkJSVHRaUVVNelFpeEZRVUZGTEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1YwRkJWeXhGUVVGRk8xbEJRekZDTEVWQlFVVXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hoUVVGaExFVkJRVVU3V1VGRE5VSXNSVUZCUlN4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxHOUNRVUZ2UWl4RlFVRkZPMWxCUTI1RExFVkJRVVVzUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4clFrRkJhMElzUlVGQlJUdFpRVU5xUXl4RlFVRkZMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzWlVGQlpTeEZRVUZGTzFsQlF6bENMRVZCUVVVc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVWQlFVVTdXVUZETTBJc1JVRkJSU3hGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZsQlFWa3NSVUZCUlR0WlFVTXpRaXhGUVVGRkxFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNWVUZCVlN4RlFVRkZPMU5CUXpGQ0xFTkJRVU1zUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZIUkRzN1QwRkZSenRKUVVOSUxFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNUVUZCYVVNN1VVRkRha1FzVDBGQlR5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RlFVRkZMRmxCUVZrc1JVRkJSVHRaUVVOMlF5eERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUlVGQlJTeEpRVUZKTEVWQlFVVTdXVUZEYWtNc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZkQlFWY3NSVUZCUlR0WlFVTjZRaXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNTVUZCU1N4RlFVRkZPMWxCUTJ4Q0xFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TlFVRk5MRVZCUVVVN1UwRkRja0lzUTBGQlF5eERRVUZETzBsQlEwd3NRMEZCUXp0SlFVZEVPenRQUVVWSE8wbEJRMGdzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRm5RenRSUVVNdlF5eFBRVUZQTEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1YwRkJWeXhGUVVGRk8xbEJRM1JETEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlR0WlFVTnFReXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNWMEZCVnl4RlFVRkZPMWxCUTNwQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4VlFVRlZMRVZCUVVVN1dVRkRlRUlzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRk5CUVZNc1JVRkJSVHRaUVVOMlFpeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1QwRkJUeXhGUVVGRk8xbEJRM0pDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hQUVVGUExFVkJRVVU3V1VGRGNrSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJUdFpRVU55UWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzVDBGQlR5eEZRVUZGTzFOQlEzUkNMRU5CUVVNc1EwRkJRenRKUVVOTUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQmFVTTdVVUZEYWtRc1QwRkJUeXhYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTEZsQlFWa3NSVUZCUlR0WlFVTjJReXhEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFVkJRVVU3V1VGRGFrTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxGZEJRVmNzUlVGQlJUdFpRVU42UWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGTzFsQlEyeENMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVTdXVUZEY0VJc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZGQlFWRXNSVUZCUlR0VFFVTjJRaXhEUVVGRExFTkJRVU03U1VGRFRDeERRVUZET3p0QlFUbFhUU3hwUTBGQmMwSXNSMEZCUnl4TFFVRkxMRU5CUVVNN096dEJRelZLVWp0QlFVTk5PMEZCUlhSRExEQkdRVUV3Ump0QlFVTXhSaXhOUVVGTkxGZEJRVmNzUjBGQlJ6dEpRVU5zUWl4alFVRmpMRVZCUVVVN1VVRkRaQ3hGUVVGRkxFVkJRVVVzZDBWQlFYZEZPMUZCUXpWRkxFVkJRVVVzUlVGQlJTeDVSVUZCZVVVN1VVRkROMFVzUlVGQlJTeEZRVUZGTERaRlFVRTJSVHRSUVVOcVJpeEZRVUZGTEVWQlFVVXNhMFJCUVd0RU8xRkJRM1JFTEVWQlFVVXNSVUZCUlN4blJFRkJaMFE3VVVGRGNFUXNSVUZCUlN4RlFVRkZMRzlFUVVGdlJEdExRVU42UkR0SlFVTkVMR1ZCUVdVc1JVRkJSVHRSUVVObUxFVkJRVVVzUlVGQlJTeFRRVUZUTzFGQlEySXNSVUZCUlN4RlFVRkZMRkZCUVZFN1VVRkRXaXhGUVVGRkxFVkJRVVVzYlVKQlFXMUNPMUZCUTNaQ0xFVkJRVVVzUlVGQlJTeFBRVUZQTzFGQlExZ3NSVUZCUlN4RlFVRkZMRTlCUVU4N1VVRkRXQ3hGUVVGRkxFVkJRVVVzVVVGQlVUdExRVU5pTzBsQlEwUXNaVUZCWlN4RlFVRkZPMUZCUTJZc1JVRkJSU3hGUVVGRkxEUkRRVUUwUXp0UlFVTm9SQ3hGUVVGRkxFVkJRVVVzYjBSQlFXOUVPMUZCUTNoRUxFVkJRVVVzUlVGQlJTeHpSVUZCYzBVN1VVRkRNVVVzUlVGQlJTeEZRVUZGTERoRFFVRTRRenRSUVVOc1JDeEZRVUZGTEVWQlFVVXNhVU5CUVdsRE8xRkJRM0pETEVWQlFVVXNSVUZCUlN4M1EwRkJkME03UzBGRE4wTTdTVUZEUkN4UlFVRlJMRVZCUVVVN1VVRkRVaXhGUVVGRkxFVkJRVVVzYVVWQlFXbEZPMUZCUTNKRkxFVkJRVVVzUlVGQlJTeHRSVUZCYlVVN1VVRkRka1VzUlVGQlJTeEZRVUZGTEdsRlFVRnBSVHRSUVVOeVJTeEZRVUZGTEVWQlFVVXNlVU5CUVhsRE8xRkJRemRETEVWQlFVVXNSVUZCUlN4M1EwRkJkME03VVVGRE5VTXNSVUZCUlN4RlFVRkZMRzlFUVVGdlJEdExRVU42UkR0SlFVTkVMRlZCUVZVc1JVRkJSVHRSUVVOV0xFVkJRVVVzUlVGQlJTeHRRMEZCYlVNN1VVRkRka01zUlVGQlJTeEZRVUZGTEd0RFFVRnJRenRSUVVOMFF5eEZRVUZGTEVWQlFVVXNOa0pCUVRaQ08xRkJRMnBETEVWQlFVVXNSVUZCUlN4M1FrRkJkMEk3VVVGRE5VSXNSVUZCUlN4RlFVRkZMRzlDUVVGdlFqdFJRVU40UWl4RlFVRkZMRVZCUVVVc09FSkJRVGhDTzB0QlEyNURPMGxCUTBRc2RVTkJRWFZETzBsQlEzWkRMRzlDUVVGdlFqdEpRVU53UWl4aFFVRmhMRVZCUVVVN1VVRkRZaXhGUVVGRkxFVkJRVVVzY1VWQlFYRkZPMUZCUTNwRkxFVkJRVVVzUlVGQlJTeDVSMEZCZVVjN1VVRkROMGNzUlVGQlJTeEZRVUZGTERCRlFVRXdSVHRSUVVNNVJTeEZRVUZGTEVWQlFVVXNjVVZCUVhGRk8xRkJRM3BGTEVWQlFVVXNSVUZCUlN4clJVRkJhMFU3VVVGRGRFVXNSVUZCUlN4RlFVRkZMSEZFUVVGeFJEdExRVU14UkR0SlFVTkVMR3RDUVVGclFpeEZRVUZGTzFGQlEyeENMRVZCUVVVc1JVRkJSU3h4UkVGQmNVUTdVVUZEZWtRc1JVRkJSU3hGUVVGRkxHdEZRVUZyUlR0UlFVTjBSU3hGUVVGRkxFVkJRVVVzZFVWQlFYVkZPMUZCUXpORkxFVkJRVVVzUlVGQlJTeHhSRUZCY1VRN1VVRkRla1FzUlVGQlJTeEZRVUZGTEdkRVFVRm5SRHRSUVVOd1JDeEZRVUZGTEVWQlFVVXNjVU5CUVhGRE8wdEJRekZETzBsQlEwUXNZMEZCWXl4RlFVRkZPMUZCUTJRc1JVRkJSU3hGUVVGRkxITkZRVUZ6UlR0UlFVTXhSU3hGUVVGRkxFVkJRVVVzT0VaQlFUaEdPMUZCUTJ4SExFVkJRVVVzUlVGQlJTeDFSVUZCZFVVN1VVRkRNMFVzUlVGQlJTeEZRVUZGTERSRlFVRTBSVHRSUVVOb1JpeEZRVUZGTEVWQlFVVXNNa1ZCUVRKRk8xRkJReTlGTEVWQlFVVXNSVUZCUlN4elJrRkJjMFk3UzBGRE0wWTdTVUZEUkN4dFFrRkJiVUlzUlVGQlJUdFJRVU51UWl4RlFVRkZMRVZCUVVVc0swUkJRU3RFTzFGQlEyNUZMRVZCUVVVc1JVRkJSU3d5UkVGQk1rUTdVVUZETDBRc1JVRkJSU3hGUVVGRkxIVkdRVUYxUmp0UlFVTXpSaXhGUVVGRkxFVkJRVVVzY1VSQlFYRkVPMUZCUTNwRUxFVkJRVVVzUlVGQlJTeHBSRUZCYVVRN1VVRkRja1FzUlVGQlJTeEZRVUZGTEc5RFFVRnZRenRMUVVONlF6dEpRVU5FTEZsQlFWa3NSVUZCUlR0UlFVTmFMRVZCUVVVc1JVRkJSU3gxUWtGQmRVSTdVVUZETTBJc1JVRkJSU3hGUVVGRkxHOURRVUZ2UXp0UlFVTjRReXhGUVVGRkxFVkJRVVVzTUVKQlFUQkNPMUZCUXpsQ0xFVkJRVVVzUlVGQlJTeG5RMEZCWjBNN1VVRkRjRU1zUlVGQlJTeEZRVUZGTERaQ1FVRTJRanRSUVVOcVF5eEZRVUZGTEVWQlFVVXNhVUpCUVdsQ08wdEJRM1JDTzBsQlEwUXNhVUpCUVdsQ0xFVkJRVVU3VVVGRGFrSXNSVUZCUlN4RlFVRkZMREJFUVVFd1JEdFJRVU01UkN4RlFVRkZMRVZCUVVVc2JVVkJRVzFGTzFGQlEzWkZMRVZCUVVVc1JVRkJSU3cyUmtGQk5rWTdVVUZEYWtjc1JVRkJSU3hGUVVGRkxITkVRVUZ6UkR0UlFVTXhSQ3hGUVVGRkxFVkJRVVVzYTBSQlFXdEVPMUZCUTNSRUxFVkJRVVVzUlVGQlJTeDNRMEZCZDBNN1MwRkROME03U1VGRFJDeGpRVUZqTEVWQlFVVTdVVUZEWkN4RlFVRkZMRVZCUVVVc05rSkJRVFpDTzFGQlEycERMRVZCUVVVc1JVRkJSU3h4UTBGQmNVTTdVVUZEZWtNc1JVRkJSU3hGUVVGRkxEUkNRVUUwUWp0UlFVTm9ReXhGUVVGRkxFVkJRVVVzSzBKQlFTdENPMUZCUTI1RExFVkJRVVVzUlVGQlJTdzRRa0ZCT0VJN1VVRkRiRU1zUlVGQlJTeEZRVUZGTEdWQlFXVTdTMEZEY0VJN1NVRkRSQ3h0UWtGQmJVSXNSVUZCUlR0UlFVTnVRaXhGUVVGRkxFVkJRVVVzYTBOQlFXdERPMUZCUTNSRExFVkJRVVVzUlVGQlJTdzJRa0ZCTmtJN1VVRkRha01zUlVGQlJTeEZRVUZGTERoRFFVRTRRenRSUVVOc1JDeEZRVUZGTEVWQlFVVXNhVU5CUVdsRE8xRkJRM0pETEVWQlFVVXNSVUZCUlN3MFFrRkJORUk3VVVGRGFFTXNSVUZCUlN4RlFVRkZMR3RDUVVGclFqdExRVU4yUWp0RFFVTlBMRU5CUVVNN1FVRk5XQ3hOUVVGTkxGRkJRVkU3U1VGSldpeEpRVUZKTEZkQlFWYzdVVUZEWWl4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUE8xbEJRMlFzVDBGQlR5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRPMUZCUTNSQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVZNc1JVRkJSU3hGUVVGRkxFTkJRVU1zWlVGQlpTeERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1IwRkJSeXhMUVVGTExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZWtjc1QwRkJUeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETzBsQlEzUkNMRU5CUVVNN1NVRkZSQ3hKUVVGSkxHTkJRV003VVVGRGFFSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1ZVRkJWVHRaUVVOcVFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNN1VVRkRla0lzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVNc1EwRkJVeXhGUVVGRkxFVkJRVVVzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhGUVVGRkxFbEJRVWtzUlVGQlJTeERRVUZETEVkQlFVY3NVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMnhJTEU5QlFVOHNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRenRKUVVONlFpeERRVUZETzBsQlJVUXNhMEpCUVd0Q0xFTkJRMlFzVDBGQk1rSXNSVUZETTBJc1QwRkJPRUk3VVVGRmFFTXNUMEZCVHl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVOeVFpeE5RVUZOTzJGQlEwZ3NUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJRenRoUVVOb1FpeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRXRCUVVzc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlEzSkVMRU5CUVVNN1NVRkRlRUlzUTBGQlF6dEpRVVZFTEdkQ1FVRm5RaXhEUVVGRExFdEJRV2xDTEVWQlFVVXNUMEZCT0VJN1VVRkRhRVVzVFVGQlRTeFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU5zUXl4UFFVRlBPMWxCUTB3c1JVRkJSU3hGUVVGRkxFOUJRVTg3V1VGRFdDeEZRVUZGTEVWQlFVVXNTMEZCU3l4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR6dFpRVU14UXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHp0WlFVTXhReXhGUVVGRkxFVkJRVVVzUzBGQlN5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUenRaUVVNeFF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR6dFpRVU14UXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHp0VFFVTXpReXhEUVVGRE8wbEJRMG9zUTBGQlF6dERRVU5HTzBGQlJVUXNUVUZCVFN4UlFVRlJMRWRCUVVjc1NVRkJTU3hSUVVGUkxFVkJRVVVzUTBGQlF6dEJRVVY2UWl4TlFVRk5MRmRCUVZjc1IwRkJSeXhSUVVGUkxFTkJRVU1zVjBGQlZ5eERRVUZETzBGQlEzcERMRTFCUVUwc1kwRkJZeXhIUVVGSExGRkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTTdPenRCUTI1TFZ6dEJRVU5XTzBGQlpYaERMRTFCUVUwc1kwRkJZenRKUVVOcVF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVdNc1JVRkJSU3hQUVVGUExFZEJRVWNzUTBGQlF5eFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRPMUZCUXpkRUxFMUJRVTBzUjBGQlJ5eEhRVUZoTEVWQlFVVXNRMEZCUXp0UlFVVjZRaXc0UkVGQk9FUTdVVUZET1VRc0swWkJRU3RHTzFGQlF5OUdMRXRCUVVzc1RVRkJUU3hEUVVGRExFbEJRVWtzU1VGQlNTeEZRVUZGTzFsQlEzQkNMRWxCUVVrc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNKQ0xGTkJRVk03V1VGRldDeEpRVUZKTEU5QlFVOHNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExGRkJRVkU3WjBKQlF6ZENMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eGpRVUZqTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZET3p0blFrRkZOVU1zZVVWQlFYbEZPMmRDUVVONlJTeHRSVUZCYlVVN1owSkJRMjVGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVMEZEY0VJN1VVRkRSQ3hQUVVGUExFZEJRVWNzUTBGQlF6dEpRVU5pTEVOQlFVTTdTVUZGUkN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRV003VVVGRE9VSXNTVUZCU1N4UFFVRlBMRWxCUVVrc1MwRkJTeXhSUVVGUkxFVkJRVVU3V1VGRE5VSXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzJkQ1FVTjJRaXhOUVVGTkxFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTTdaMEpCUTJZc1MwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETzI5Q1FVTnNReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NZMEZCWXl4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkZPVU1zVDBGQlR5eEhRVUZITEVOQlFVTTdZVUZEV2p0WlFVVkVMRWxCUVVrc1NVRkJTU3hMUVVGTExFbEJRVWs3WjBKQlEyWXNUMEZCVHl4SlFVRkpMRU5CUVVNN1dVRkZaQ3hKUVVGSkxFbEJRVWtzV1VGQldTeE5RVUZOTzJkQ1FVTjRRaXhQUVVGUExFbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUlRGQ0xFMUJRVTBzUjBGQlJ5eEhRVUZoTEVWQlFVVXNRMEZCUXp0WlFVTjZRaXhMUVVGTExFMUJRVTBzUTBGQlF5eEpRVUZKTEVsQlFVazdaMEpCUTJ4Q0xFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4alFVRmpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUlRsRExFOUJRVThzUjBGQlJ5eERRVUZETzFOQlExbzdVVUZEUkN4UFFVRlBMRWxCUVVrc1EwRkJRenRKUVVOa0xFTkJRVU03U1VGRlJDeE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVZrc1JVRkJSU3hoUVVGaExFZEJRVWNzU1VGQlNUdFJRVU53UkN4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF6dFJRVU55UXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTjBRaXhOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUXpsQ0xFMUJRVTBzVDBGQlR5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4VFFVRlRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRE1VUXNaVUZCWlR0UlFVTm1MRTFCUVUwc1RVRkJUU3hIUVVGSExFdEJRVXNzVTBGQlV5eEZRVUZGTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE0wTXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hQUVVGUExFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOMFF5eE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEZOQlFWTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFOUJRVThzUTBGQlF5eEhRVUZITEVWQlFVVXNSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEyaEhMRTlCUVU4c1VVRkJVU3hIUVVGSExFbEJRVWtzUjBGQlJ5eEhRVUZITEVkQlFVY3NTVUZCU1N4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEpRVU0xUlN4RFFVRkRPMGxCUlVRc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWxCUVZrN1VVRkRiRU1zVDBGQlR5eEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOeVJDeERRVUZETzBsQlJVUXNUVUZCVFN4RFFVRkRMSE5DUVVGelFpeERRVUZETEVsQlFWVTdVVUZEZEVNc1RVRkJUU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRPMUZCUTJoRExFMUJRVTBzUzBGQlN5eEhRVUZITEdOQlFXTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU4yUlN4TlFVRk5MRWRCUVVjc1IwRkJSeXhqUVVGakxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlF6bEVMRTlCUVU4c1IwRkJSeXhKUVVGSkxFbEJRVWtzUzBGQlN5eEpRVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGxCUTI1RExFTkJRVU03U1VGRlJDeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zU1VGQldTeEZRVUZGTEdGQlFXRXNSMEZCUnl4TFFVRkxPMUZCUTNwRUxFOUJRVThzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMR0ZCUVdFc1EwRkJReXhEUVVGRE8wbEJRM0JGTEVOQlFVTTdTVUZGUkN4TlFVRk5MRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNTVUZCVlN4RlFVRkZMR0ZCUVdFc1IwRkJSeXhMUVVGTE8xRkJRemRFTEUxQlFVMHNTVUZCU1N4SFFVRkhMR05CUVdNc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGFFVXNUVUZCVFN4TlFVRk5MRWRCUVVjc1kwRkJZeXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU53UlN4TlFVRk5MRTFCUVUwc1IwRkJSeXhqUVVGakxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEzQkZMRWxCUVVrc1IwRkJSeXhIUVVGSExFZEJRVWNzU1VGQlNTeEpRVUZKTEUxQlFVMHNTVUZCU1N4TlFVRk5MRVZCUVVVc1EwRkJRenRSUVVONFF5eEpRVUZKTEdGQlFXRTdXVUZEWml4SFFVRkhMRWRCUVVjc1IwRkJSeXhIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEdWQlFXVXNSVUZCUlN4RlFVRkZMRU5CUVVNN1VVRkZNME1zVDBGQlR5eEhRVUZITEVOQlFVTTdTVUZEWWl4RFFVRkRPMGxCUlVRc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eEZRVUZWTzFGQlF6VkNMRTFCUVUwc1IwRkJSeXhIUVVGSExHTkJRV01zUTBGQlF5eFpRVUZaTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8xRkJRMjVFTEU5QlFVOHNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFVkJRVVVzUjBGQlJ5eERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRPMGxCUTNKRExFTkJRVU03U1VGRlJDeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zU1VGQldTeEZRVUZGTEdGQlFXRXNSMEZCUnl4TFFVRkxPMUZCUTNwRUxFMUJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRelZDTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hoUVVGaExFTkJRVU1zUlVGQlJTeERRVUZETzBsQlEzQkhMRU5CUVVNN1NVRkZSQ3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFWY3NSVUZCUlN4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVVOcVF5eFBRVUZQTEVOQlFVTXNSVUZCUlN4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRka01zUTBGQlF6dEpRVVZFTEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJWenRSUVVNelFpeFBRVUZQTEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc2NVSkJRWEZDTEVWQlFVVXNRMEZCUXl4SFFVRkhMRVZCUVVVc1JVRkJSVHRaUVVOb1JDeFBRVUZQTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVjBGQlZ5eEZRVUZGTEVkQlFVY3NSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0UlFVTnVSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkN4TlFVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExFZEJRVmNzUlVGQlJTeEhRVUZYTzFGQlF6RkRMRTlCUVU4c1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRhRU1zUTBGQlF6dEpRVVZFTEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJXU3hGUVVNM1FpeFBRVUZ6UXp0UlFVTjRReXhKUVVGSkxFOUJRVThzV1VGQldTeE5RVUZOTzFsQlF6TkNMRTlCUVU4c1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVVTFRaXhMUVVGTExFMUJRVTBzVDBGQlR5eEpRVUZKTEU5QlFVOHNSVUZCUlR0WlFVTTNRaXhOUVVGTkxFbEJRVWtzUjBGQlJ5eFBRVUVyUWl4RFFVRkRPMWxCUXpkRExFMUJRVTBzUjBGQlJ5eEhRVUZITEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdXVUZEY2tNc1NVRkJTU3hIUVVGSExFVkJRVVU3WjBKQlExQXNTVUZCU1N4SFFVRkhMRU5CUVVNc1RVRkJUVHR2UWtGRFdpeEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU03WjBKQlF6ZENMRTlCUVU4c1IwRkJSeXhEUVVGRE8yRkJRMW83VTBGRFJqdFJRVU5FTEU5QlFVOHNTVUZCU1N4RFFVRkRPMGxCUTJRc1EwRkJRenRKUVVWRUxFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCV1RzN1VVRkROVUlzU1VGQlNTeEhRVUZITEVOQlFVTTdVVUZEVWl4dFJVRkJiVVU3VVVGRGJrVXNaMFJCUVdkRU8xRkJRMmhFTEVkQlFVY3NSMEZCUnl4alFVRmpMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUlVGQlJTeGpRVUZqTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dFJRVU14UlN4SlFVRkpMRWRCUVVjc1JVRkJSVHRaUVVOUUxGTkJRVWNzUTBGQlF5eE5RVUZOTEc5RFFVRldMRWRCUVVjc1EwRkJReXhOUVVGTkxFZEJRVXNzUlVGQlJTeEZRVUZETzFsQlEyeENMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eEhRVUZITEVOQlFVTXNVVUZCVVN4UFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeHRRMEZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0WlFVTXhSU3hIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEZOQlFWTXNSMEZCUnl4WFFVRlhMRU5CUVVNN1dVRkRia01zVDBGQlR5eEhRVUZITEVOQlFVTTdVMEZEV2p0UlFVTkVMRWRCUVVjc1IwRkJSeXhqUVVGakxFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NSVUZCUlN4alFVRmpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03VVVGRGNrVXNTVUZCU1N4SFFVRkhMRVZCUVVVN1dVRkRVQ3hUUVVGSExFTkJRVU1zVFVGQlRTeHZRMEZCVml4SFFVRkhMRU5CUVVNc1RVRkJUU3hIUVVGTExFVkJRVVVzUlVGQlF6dFpRVU5zUWl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eEhRVUZITEVOQlFVTTdXVUZEZWtJc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVkQlFVY3NUVUZCVFN4RFFVRkRPMWxCUXpsQ0xFOUJRVThzUjBGQlJ5eERRVUZETzFOQlExbzdVVUZEUkN4SFFVRkhMRWRCUVVjc1kwRkJZeXhEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVWQlFVVXNZMEZCWXl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRE8xRkJRM1pGTEVsQlFVa3NSMEZCUnl4RlFVRkZPMWxCUTFBc1UwRkJSeXhEUVVGRExFMUJRVTBzYjBOQlFWWXNSMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJTeXhGUVVGRkxFVkJRVU03V1VGRGJFSXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzUjBGQlJ5eERRVUZETzFsQlEzcENMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eEhRVUZITEZGQlFWRXNRMEZCUXp0WlFVTm9ReXhQUVVGUExFZEJRVWNzUTBGQlF6dFRRVU5hTzBsQlEwZ3NRMEZCUXp0SlFVVkVMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQldUczdVVUZETVVJc1NVRkJTU3hIUVVGSExFTkJRVU03VVVGRFVpeHRSVUZCYlVVN1VVRkRia1VzWjBSQlFXZEVPMUZCUTJoRUxFZEJRVWNzUjBGQlJ5eGpRVUZqTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1JVRkJSU3hqUVVGakxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdVVUZEYkVVc1NVRkJTU3hIUVVGSExFVkJRVVU3V1VGRFVDeFRRVUZITEVOQlFVTXNUVUZCVFN4dlEwRkJWaXhIUVVGSExFTkJRVU1zVFVGQlRTeEhRVUZMTEVWQlFVVXNSVUZCUXp0WlFVTnNRaXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNN1dVRkRNMElzVDBGQlR5eEhRVUZITEVOQlFVTTdVMEZEV2p0UlFVTkVMRWRCUVVjc1IwRkJSeXhqUVVGakxFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NSVUZCUlN4alFVRmpMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRGJrVXNTVUZCU1N4SFFVRkhMRVZCUVVVN1dVRkRVQ3hUUVVGSExFTkJRVU1zVFVGQlRTeHZRMEZCVml4SFFVRkhMRU5CUVVNc1RVRkJUU3hIUVVGTExFVkJRVVVzUlVGQlF6dFpRVU5zUWl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eE5RVUZOTEVOQlFVTTdXVUZETlVJc1QwRkJUeXhIUVVGSExFTkJRVU03VTBGRFdqdFJRVU5FTEVkQlFVY3NSMEZCUnl4alFVRmpMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUlVGQlJTeGpRVUZqTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dFJRVU14UlN4SlFVRkpMRWRCUVVjc1JVRkJSVHRaUVVOUUxGTkJRVWNzUTBGQlF5eE5RVUZOTEc5RFFVRldMRWRCUVVjc1EwRkJReXhOUVVGTkxFZEJRVXNzUlVGQlJTeEZRVUZETzFsQlEyeENMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eEhRVUZITEdOQlFXTXNRMEZCUXp0WlFVTndReXhQUVVGUExFZEJRVWNzUTBGQlF6dFRRVU5hTzFGQlEwUXNSMEZCUnl4SFFVRkhMR05CUVdNc1EwRkJReXhoUVVGaExFTkJRVU1zU1VGQlNTeEZRVUZGTEdOQlFXTXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRSUVVOMlJTeEpRVUZKTEVkQlFVY3NSVUZCUlR0WlFVTlFMRk5CUVVjc1EwRkJReXhOUVVGTkxHOURRVUZXTEVkQlFVY3NRMEZCUXl4TlFVRk5MRWRCUVVzc1JVRkJSU3hGUVVGRE8xbEJRMnhDTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhIUVVGSExGRkJRVkVzUTBGQlF6dFpRVU01UWl4UFFVRlBMRWRCUVVjc1EwRkJRenRUUVVOYU8wbEJRMGdzUTBGQlF6czdRVUZGVFN3d1FrRkJWeXhIUVVGSExIVkNRVUYxUWl4RFFVRkRPMEZCUTNSRExEUkNRVUZoTEVkQlFVY3NPRUpCUVRoQ0xFTkJRVU03UVVGREwwTXNLMEpCUVdkQ0xFZEJRVWNzTmtKQlFUWkNMRU5CUVVNN1FVRkRha1FzTkVKQlFXRXNSMEZCUnl4NVFrRkJlVUlzUTBGQlF6dEJRVU14UXl4M1FrRkJVeXhIUVVGSExHOUNRVUZ2UWl4RFFVRkRMRVZCUVVVc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZETVVRc2RVSkJRVkVzUjBGQlJ5eHZRa0ZCYjBJc1EwRkJReXhGUVVGRkxFOUJRVThzUlVGQlJTeFZRVUZWTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTNwRUxDdENRVUZuUWl4SFFVRkhMR1ZCUVdVc1EwRkJReXhGUVVGRkxFbEJRVWtzUlVGQlJTeHBRa0ZCYVVJc1JVRkJSU3hEUVVGRExFTkJRVU03T3p0QlF6Tk5la1VzTUVWQlFUQkZPMEZCUXpGRkxHOUZRVUZ2UlR0QlFVVndSU3g1UlVGQmVVVTdRVUZEZWtVc2QwVkJRWGRGTzBGQlEzaEZMQ3RGUVVFclJUdEJRVU12UlN3clJVRkJLMFU3UVVGREwwVXNkVUpCUVhWQ08wRkJSWFpDTERSRlFVRTBSVHRCUVVNMVJTd3JSVUZCSzBVN1FVRkRlRVVzVFVGQlRTeGxRVUZuUWl4VFFVRlJMRXRCUVVzN1NVRkRlRU03VVVGRFJTeExRVUZMTEVOQlFVTXNhVU5CUVdsRExFTkJRVU1zUTBGQlF6dEpRVU16UXl4RFFVRkRPME5CUTBZN096dEJRMlp0UlR0QlFVbHlSQ3hOUVVGTkxGTkJRVk03U1VGWE5VSXNXVUZCV1N4RlFVRlZMRVZCUVVVc1NVRkJXVHRSUVZSd1F5eFRRVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRPMUZCUTFZc1YwRkJUU3hIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU5hTEZkQlFVMHNSMEZCTkVNc1JVRkJSU3hEUVVGRE8xRkJRM0pFTEhOQ1FVRnBRaXhIUVVGaExFVkJRVVVzUTBGQlF6dFJRVU5xUXl4dlFrRkJaU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlRXNUNMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETzFGQlEySXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU55UWl4RFFVRkRPMGxCUlVRc1QwRkJUeXhEUVVGRExFbEJRVms3TzFGQlEyeENMSE5GUVVGelJUdFJRVU4wUlN4elJVRkJjMFU3VVVGRGRFVXNiMFZCUVc5Rk8xRkJRM0JGTEcxRlFVRnRSVHRSUVVOdVJTeHBRMEZCYVVNN1VVRkRha01zYjBWQlFXOUZPMUZCUTNCRkxHMUNRVUZ0UWp0UlFVTnVRaXhKUVVGSkxFbEJRVWtzUzBGQlN5eEZRVUZGTzFsQlEySXNUMEZCVHp0UlFVVlVMRTFCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRPVUlzU1VGQlNTeERRVUZETEVsQlFVa3NVMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTXpRaXhKUVVGSkxFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXp0WlFVTnNRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeGxRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc01FTkJRVVVzVDBGQlR5eERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZMRzlEUVVGTExFVkJRVVVzUTBGQlF6dEpRVU55UkN4RFFVRkRPMGxCUlVRc1VVRkJVU3hEUVVGRExGTkJRV2xDTzFGQlEzaENMRTlCUVU4c1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4VFFVRlRMRU5CUVVNN1NVRkRPVU1zUTBGQlF6dEpRVVZFTEZOQlFWTXNRMEZCUXl4VFFVRnBRaXhGUVVGRkxFdEJRWEZDTzFGQlEyaEVMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUXk5Q0xFbEJRVWtzUTBGQlF5eGxRVUZsTEVkQlFVY3NVMEZCVXl4RFFVRkRPMUZCUTJwRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXp0WlFVTTNReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBsQlF6TkRMRU5CUVVNN1NVRkZSQ3h2UWtGQmIwSXNRMEZCUXl4VFFVRnBRanM3VVVGRGNFTXNaMFpCUVdkR08xRkJRMmhHTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRGVFUXNUVUZCVFN4NVFrRkJlVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTndSU3d3UmtGQk1FWTdVVUZETVVZc1NVRkJTU3hMUVVGTExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NSMEZCUnl4NVFrRkJlVUk3V1VGRGFrUXNUMEZCVHl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjZReXd5UmtGQk1rWTdVVUZETTBZc01rTkJRVEpETzJGQlEzUkRMRWxCUVVrc1MwRkJTeXhMUVVGTExIbENRVUY1UWp0WlFVTjRReXhUUVVGVExFZEJRVWNzVDBGQlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zZVVKQlFYbENMRU5CUVVNc2JVTkJRVWtzUTBGQlF5eERRVUZETzFsQlEzUkZMRTlCUVU4c1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhEUVVGRE8xRkJSWHBFTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZPMWxCUTNSRUxFMUJRVTBzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTNReXhKUVVGSkxGVkJRVlVzU1VGQlNTeFZRVUZWTEVkQlFVY3NVMEZCVXp0blFrRkRkRU1zVDBGQlR5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRMnhETzFGQlJVUXNUMEZCVHl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEYWtVc1EwRkJRenRKUVVWRUxHZENRVUZuUWl4RFFVRkRMRk5CUVdsQ0xFVkJRVVVzUzBGQk9FSTdPMUZCUTJoRkxFbEJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhUUVVGVExFVkJRVVU3V1VGRGVFTXNOa05CUVRaRE8xbEJRemRETEUxQlFVMHNZMEZCWXl4VFFVRkhMRWxCUVVrc1EwRkJReXhwUWtGQmFVSTdhVUpCUXpGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExGTkJRVk1zUTBGQlF6dHBRa0ZETlVJc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4dFEwRkJTU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGVrUXNTVUZCU1N4alFVRmpMRXRCUVVzc1UwRkJVenRuUWtGRE9VSXNUVUZCVFN4SlFVRkpMR1ZCUVdVc1JVRkJSU3hEUVVGRE8xbEJRemxDTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdXVUZETVVNc1NVRkJTU3hEUVVGRExFdEJRVXM3WjBKQlExSXNUVUZCVFN4SlFVRkpMR1ZCUVdVc1JVRkJSU3hEUVVGRE8xbEJRemxDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRUUVVOd1JEdGhRVUZOTzFsQlEwd3NUVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0WlFVTnlReXhKUVVGSkxFTkJRVU1zUzBGQlN6dG5Ra0ZEVWl4TlFVRk5MRWxCUVVrc1pVRkJaU3hGUVVGRkxFTkJRVU03V1VGRE9VSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNXVUZCV1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xTkJRM0JFTzFGQlEwUXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRmFrVXNUVUZCVFN3MlFrRkJOa0lzUjBGRGFrTXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkROVVFzU1VGQlNTeERRVUZETERaQ1FVRTJRanRaUVVOb1F5eE5RVUZOTEVsQlFVa3NaVUZCWlN4RlFVRkZMRU5CUVVNN1VVRkRPVUlzVFVGQlRTeFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETERaQ1FVRTJRaXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5vUml4TlFVRk5MRmxCUVZrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVVUxUkN4SlFVRkpMRFpDUVVFMlFpeExRVUZMTEZOQlFWTXNTVUZCU1N4WlFVRlpMRXRCUVVzc1dVRkJXVHRaUVVNNVJTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMGxCUXpORExFTkJRVU03U1VGRlJDeFJRVUZSTEVOQlFVTXNVMEZCYVVJN1VVRkRlRUlzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMUZCUTJoRUxFbEJRVWtzWjBKQlFXZENPMWxCUTJ4Q0xFOUJRVThzWjBKQlFXZENMRU5CUVVNN1VVRkZNVUlzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGJrUXNTVUZCU1N4blFrRkJaMElzUzBGQlN5eFRRVUZUTzFsQlEyaERMRTFCUVUwc1NVRkJTU3hsUVVGbExFVkJRVVVzUTBGQlF6dFJRVU01UWl4SlFVRkpMRk5CUVZNc1IwRkJSeXhuUWtGQlowSTdXVUZET1VJc1QwRkJUeXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUldwRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTldMRTlCUVU4c1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVTdXVUZETjBNc1RVRkJUU3hoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyaEVMRWxCUVVrc1lVRkJZU3hMUVVGTExGTkJRVk03WjBKQlF6ZENMRTFCUVUwc1NVRkJTU3hsUVVGbExFVkJRVVVzUTBGQlF6dFpRVU01UWl4SlFVRkpMR0ZCUVdFc1IwRkJSeXhUUVVGVE8yZENRVU16UWl4UFFVRlBMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMU5CUTNSRE8xRkJSVVFzVDBGQlR5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU55UXl4RFFVRkRPMGxCUlVRc0swTkJRU3RETzBsQlEzWkRMR1ZCUVdVc1EwRkJReXhMUVVGaE8xRkJRMjVETEUxQlFVMHNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVOcVJDeEpRVUZKTEZWQlFWVXNTMEZCU3l4VFFVRlRPMWxCUXpGQ0xFMUJRVTBzU1VGQlNTeGxRVUZsTEVWQlFVVXNRMEZCUXp0UlFVTTVRaXhOUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xRkJRM1JETEVsQlFVa3NTMEZCU3l4TFFVRkxMRk5CUVZNN1dVRkRja0lzVFVGQlRTeEpRVUZKTEdWQlFXVXNSVUZCUlN4RFFVRkRPMUZCUXpsQ0xFOUJRVThzUzBGQlN5eERRVUZETzBsQlEyWXNRMEZCUXp0RFFVTkdPenM3UVVOd1NXTXNUVUZCVFN4clFrRkJhMEk3U1VGRGNrTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGcFFqdFJRVU0zUWl4TFFVRkxMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETEVsQlFVa3NUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1JVRkJSVHRaUVVOMlJTeEpRVUZKTEV0QlFVc3NZVUZCVEN4TFFVRkxMSFZDUVVGTUxFdEJRVXNzUTBGQlJTeFJRVUZSTEVOQlFVTXNVMEZCVXp0blFrRkRNMElzVDBGQlR5eEhRVUZuUkN4RFFVRkRPMU5CUXpORU8wbEJRMGdzUTBGQlF6czdRVUZGWlN4dlEwRkJhVUlzUjBGQlJ5eHRRa0ZCYlVJc1EwRkJRenRCUVVWNFF5dzBRa0ZCVXl4SFFVRm5RenRKUVVOMlJDeEhRVUZITEVWQlFVVTdVVUZEU0N4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXM3VVVGRGJFWXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTE8xRkJRMnhHTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTenRSUVVOc1JpeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRk8xRkJRMjVHTEVWQlFVVXNSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTzFGQlEzSkdMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpPMUZCUTNKR0xFbEJRVWs3UzBGRFREdEpRVU5FTEVkQlFVY3NSVUZCUlR0UlFVTklMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVazdVVUZEY2tZc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNSVUZCUlN4RlFVRkZMRVZCUVVVN1VVRkRjRVlzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpPMHRCUTNaRk8wbEJRMFFzUjBGQlJ5eEZRVUZGTzFGQlEwZ3NTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNUdFJRVU4wUml4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrN1VVRkRlRVlzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWs3VVVGRGRrWXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1R0TFFVTXpSRHRKUVVORUxFZEJRVWNzUlVGQlJUdFJRVU5JTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTenRSUVVOc1JpeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzN1VVRkRiRVlzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxPMUZCUTJ4R0xFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3p0UlFVTnNSaXhMUVVGTE8wdEJRMDQ3U1VGRFJDeEhRVUZITEVWQlFVVTdVVUZEU0N4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNTMEZCU3p0UlFVTjBSaXhKUVVGSkxFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxPMUZCUTNoR0xFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzN1VVRkRia1lzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSenRMUVVNNVJUdEpRVU5FTEVkQlFVY3NSVUZCUlR0UlFVTklMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVczdVVUZEZWtZc1MwRkJTeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3p0UlFVTnlSaXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXM3VVVGRGRrWXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpPMUZCUTNwR0xFbEJRVWtzUlVGQlJTeEpRVUZKTzB0QlExZzdTVUZEUkN4SFFVRkhMRVZCUVVVN1VVRkRTQ3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxPMUZCUTNwR0xFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSk8xRkJRM3BHTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1R0UlFVTjRSaXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTenRSUVVONFJpeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNUdFJRVU4wUml4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWs3UzBGRGFrSTdTVUZEUkN4SFFVRkhMRVZCUVVVN1VVRkRTQ3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxPMUZCUTNwR0xFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzN1VVRkRla1lzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTzFGQlF6RkdMRVZCUVVVc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4RlFVRkZMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpPMHRCUXk5Rk8wbEJRMFFzUjBGQlJ5eEZRVUZGTzFGQlEwZ3NTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVczdVVUZEZWtZc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4RlFVRkZMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrN1VVRkRjRVlzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlR0TFFVTnVSanRKUVVORUxFZEJRVWNzUlVGQlJUdFJRVU5JTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXM3VVVGRGVrWXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNUdFJRVU53Uml4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3p0UlFVTnVSaXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTVHRSUVVOMlJpeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSk8wdEJRM1pDTzBsQlEwUXNSMEZCUnl4RlFVRkZPMUZCUTBnc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3p0UlFVTjZSaXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTVHRSUVVOeVJpeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVazdVVUZEZUVZc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1R0TFFVTTNSVHRKUVVORUxFZEJRVWNzUlVGQlJUdFJRVU5JTEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTzFGQlEzaEdMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxPMUZCUXpGR0xFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSk8xRkJRM0pHTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEhRVUZITzB0QlF6VkNPMGxCUTBRc1IwRkJSeXhGUVVGRk8xRkJRMGdzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTenRSUVVONlJpeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNUdFJRVU4yUml4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTzFGQlEzSkdMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpPMHRCUTI1R08wbEJRMFFzUjBGQlJ5eEZRVUZGTzFGQlEwZ3NTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTE8xRkJRMnhHTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTenRSUVVOc1JpeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzN1VVRkRiRVlzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxPMUZCUTJ4R0xFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3p0UlFVTnNSaXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTenRMUVVOc1F6dEpRVU5FTEVkQlFVY3NSVUZCUlR0UlFVTklMRXRCUVVzc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxPMUZCUTNSR0xFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzN1VVRkRia1lzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWs3VVVGRGRFWXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnp0TFFVTjJSRHRKUVVORUxFZEJRVWNzUlVGQlJUdFJRVU5JTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTenRSUVVOc1JpeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzN1VVRkRiRVlzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWs3VVVGRGRFWXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNUdFJRVU4wUml4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSE8xRkJRM0JHTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVazdTMEZETTBRN1NVRkRSQ3hIUVVGSExFVkJRVVU3VVVGRFNDeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzN1VVRkRiRVlzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTVHRSUVVOdVJpeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNUdFJRVU5zUml4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1R0UlFVTnNSaXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpPMHRCUTNaQ08wbEJRMFFzUjBGQlJ5eEZRVUZGTzFGQlEwZ3NTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTE8xRkJRMnhHTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTenRSUVVOc1JpeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzN1VVRkRiRVlzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxPMUZCUTJ4R0xFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxPMHRCUTNaRU8wTkJRMFlzUTBGQlF6czdPMEZETlVkWExFMUJRVTBzWTBGQll6dEpRVmRxUXl4WlFVRlpMRWxCUVZrc1JVRkJSU3hKUVVGWkxFVkJRVVVzU1VGQldTeEZRVUZGTEU5QlFXVXNSVUZEYWtVc1ZVRkJiVUlzUlVGRGJrSXNSVUZCVlN4RlFVRkZMRXRCUVdFc1JVRkJSU3hGUVVGVkxFVkJRVVVzUzBGQllUdFJRVU4wUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6dFJRVU5xUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6dFJRVU5xUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6dFJRVU5xUWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF6dFJRVU4yUWl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExGVkJRVlVzUTBGQlF6dFJRVU0zUWl4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU5pTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRMklzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1NVRkRja0lzUTBGQlF6dEpRVVZFTEZsQlFWa3NRMEZCUXl4TFFVRTRRanM3VVVGRGVrTXNUMEZCVHl4SlFVRkpMR05CUVdNc1QwRkRja0lzUzBGQlN5eERRVUZETEVsQlFVa3NiVU5CUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzVVVGRGRrSXNTMEZCU3l4RFFVRkRMRWxCUVVrc2JVTkJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NVVUZEZGtJc1MwRkJTeXhEUVVGRExFbEJRVWtzYlVOQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1VVRkRka0lzUzBGQlN5eERRVUZETEU5QlFVOHNiVU5CUVVrc1NVRkJTU3hEUVVGRExFOUJRVThzVVVGRE4wSXNTMEZCU3l4RFFVRkRMRlZCUVZVc2JVTkJRVWtzU1VGQlNTeERRVUZETEZWQlFWVXNVVUZEYmtNc1MwRkJTeXhEUVVGRExFVkJRVVVzYlVOQlFVa3NTVUZCU1N4RFFVRkRMRVZCUVVVc1VVRkRia0lzUzBGQlN5eERRVUZETEV0QlFVc3NiVU5CUVVrc1NVRkJTU3hEUVVGRExFdEJRVXNzVVVGRGVrSXNTMEZCU3l4RFFVRkRMRVZCUVVVc2JVTkJRVWtzU1VGQlNTeERRVUZETEVWQlFVVXNVVUZEYmtJc1MwRkJTeXhEUVVGRExFdEJRVXNzYlVOQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wbEJRMnBETEVOQlFVTTdTVUZGUkN4aFFVRmhPMUZCUTFnc1QwRkJUenRaUVVOTUxFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1R0WlFVTm1MRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNUdFpRVU5tTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTVHRaUVVObUxFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTXNUMEZCVHp0WlFVTnlRaXhUUVVGVExFVkJRVVVzU1VGQlNTeERRVUZETEVWQlFVVTdXVUZEYkVJc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTzFsQlEycENMRk5CUVZNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUlVGQlJUdFpRVU5zUWl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXM3VTBGRGJFSXNRMEZCUXp0SlFVTktMRU5CUVVNN1EwRkRSanM3TzBGRE0wVkVMSFZEUVVGMVF6dEJRVU4yUXl4cFEwRkJhVU03UVVGUmFrTXNUVUZCVFN4SlFVRkpMRWRCUVZrN1NVRkRjRUlzU1VGQlNTeEZRVUZGTzFGQlEwb3NUVUZCVFR0UlFVTk9MRTFCUVUwN1VVRkRUaXhSUVVGUk8xRkJRMUlzVFVGQlRUdFJRVU5PTEU5QlFVODdVVUZEVUN4UFFVRlBPMUZCUTFBc1QwRkJUenRSUVVOUUxGRkJRVkU3VVVGRFVpeFJRVUZSTzFGQlExSXNVMEZCVXp0UlFVTlVMRkZCUVZFN1VVRkRVaXhMUVVGTE8xRkJRMHdzVDBGQlR6dFJRVU5RTEU5QlFVODdVVUZEVUN4UlFVRlJPMUZCUTFJc1NVRkJTVHRMUVVOTU8wbEJRMFFzU1VGQlNTeEZRVUZGTzFGQlEwb3NiVUpCUVcxQ08xRkJRMjVDTEdsQ1FVRnBRanRSUVVOcVFpeFhRVUZYTzFGQlExZ3NWMEZCVnp0UlFVTllMRmxCUVZrN1VVRkRXaXhMUVVGTE8xRkJRMHdzVVVGQlVUdFJRVU5TTERoQ1FVRTRRanRSUVVNNVFpeG5RMEZCWjBNN1VVRkRhRU1zWTBGQll6dFJRVU5rTEdGQlFXRTdVVUZEWWl4UlFVRlJPMUZCUTFJc2NVSkJRWEZDTzFGQlEzSkNMR2xDUVVGcFFqdFJRVU5xUWl4blFrRkJaMEk3VVVGRGFFSXNhVUpCUVdsQ08wdEJRMnhDTzBsQlEwUXNTVUZCU1N4RlFVRkZPMUZCUTBvc2JVSkJRVzFDTzFGQlEyNUNMR2xDUVVGcFFqdFJRVU5xUWl4WFFVRlhPMUZCUTFnc1YwRkJWenRSUVVOWUxGbEJRVms3VVVGRFdpeExRVUZMTzFGQlEwd3NVVUZCVVR0UlFVTlNMR2xDUVVGcFFqdFJRVU5xUWl4dFFrRkJiVUk3VVVGRGJrSXNZMEZCWXp0UlFVTmtMR05CUVdNN1VVRkRaQ3hSUVVGUk8xRkJRMUlzY1VKQlFYRkNPMUZCUTNKQ0xGRkJRVkU3VVVGRFVpeHBRa0ZCYVVJN1VVRkRha0lzVTBGQlV6dExRVU5XTzBsQlEwUXNTVUZCU1N4RlFVRkZPMUZCUTBvc2IwSkJRVzlDTzFGQlEzQkNMR3RDUVVGclFqdFJRVU5zUWl4WFFVRlhPMUZCUTFnc1YwRkJWenRSUVVOWUxGbEJRVms3VVVGRFdpeExRVUZMTzFGQlEwd3NVVUZCVVR0UlFVTlNMRzlDUVVGdlFqdFJRVU53UWl4dFFrRkJiVUk3VVVGRGJrSXNZMEZCWXp0UlFVTmtMR0ZCUVdFN1VVRkRZaXhWUVVGVk8xRkJRMVlzYzBKQlFYTkNPMUZCUTNSQ0xGRkJRVkU3VVVGRFVpeG5Ra0ZCWjBJN1VVRkRhRUlzVDBGQlR6dExRVU5TTzBsQlEwUXNTVUZCU1N4RlFVRkZPMUZCUTBvc1kwRkJZenRSUVVOa0xHRkJRV0U3VVVGRFlpeFZRVUZWTzFGQlExWXNVMEZCVXp0UlFVTlVMRk5CUVZNN1VVRkRWQ3hYUVVGWE8xRkJRMWdzVjBGQlZ6dFJRVU5ZTEdGQlFXRTdVVUZEWWl4bFFVRmxPMUZCUTJZc1ZVRkJWVHRSUVVOV0xGZEJRVmM3VVVGRFdDeFBRVUZQTzFGQlExQXNaMEpCUVdkQ08xRkJRMmhDTEU5QlFVODdVVUZEVUN4aFFVRmhPMUZCUTJJc1NVRkJTVHRMUVVOTU8wbEJRMFFzU1VGQlNTeEZRVUZGTzFGQlEwb3NWVUZCVlR0UlFVTldMRk5CUVZNN1VVRkRWQ3hUUVVGVE8xRkJRMVFzVVVGQlVUdFJRVU5TTEZGQlFWRTdVVUZEVWl4UlFVRlJPMUZCUTFJc1VVRkJVVHRSUVVOU0xGRkJRVkU3VVVGRFVpeFRRVUZUTzFGQlExUXNVVUZCVVR0UlFVTlNMRTlCUVU4N1VVRkRVQ3hMUVVGTE8xRkJRMHdzVTBGQlV6dFJRVU5VTEZGQlFWRTdVVUZEVWl4UlFVRlJPMUZCUTFJc1NVRkJTVHRMUVVOTU8wTkJRMFlzUTBGQlF6dEJRVVZHTEdkRVFVRmxMRWxCUVVrc1JVRkJRenM3TzBGRGRrZzRRanRCUVVkc1JDeE5RVUZOTEUxQlFVMHNSMEZCUnp0SlFVTmlMRXRCUVVzc1JVRkJSU3hEUVVGRE8wbEJRMUlzVTBGQlV5eEZRVUZGTEVOQlFVTTdRMEZEU2l4RFFVRkRPMEZCUlZnN08wZEJSVWM3UVVGRFdTeE5RVUZOTEZOQlFWTTdTVUZYTlVJc1dVRkJXU3hKUVVGdFFpeEZRVUZUTEZkQlFXMUNMRVZCUVVVc1MwRkJaVHM3VVVGQmNFTXNaMEpCUVZjc1IwRkJXQ3hYUVVGWExFTkJRVkU3VVVGV2NFUXNWMEZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVWWUxGbEJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTTdVVUZEYUVJc1ZVRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVkZtTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1VVRkJVU3hQUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRzFEUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEzSkVMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzYzBKQlFYTkNMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU5xUml4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzU1VGQlNTeFBRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExHMURRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8xRkJRM0JGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRk5CUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXh0UTBGQlNTeEZRVUZGTEVOQlFVTTdVVUZEZWtNc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRja01zU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVNelJTeERRVUZETzBsQlJVUXNUVUZCVFR0UlFVTktMRTlCUVU4c1IwRkJSeXhIUVVGSExDdENRVUVyUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzUjBGQlJ5eERRVUZETzBsQlEyeEhMRU5CUVVNN1NVRkZSQ3hOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1RVRkJZenRSUVVOd1F5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlF6TkVMRU5CUVVNN1NVRkZSQ3hOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEUxQlFXTTdVVUZETDBJc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVWQlFVVXNSVUZCUlN4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVNelJDeERRVUZETzBsQlJVUXNUVUZCVFN4RFFVRkRMR1ZCUVdVc1EwRkJReXhOUVVGak8xRkJRMjVETEVsQlFVa3NVMEZCVXl4RFFVRkRMR2RDUVVGblFpeERRVUZETEUxQlFVMHNRMEZCUXp0WlFVTndReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVVZZTEUxQlFVMHNSMEZCUnl4elFrRkJjMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRNME1zVFVGQlRTeExRVUZMTEVkQlFVYzdXVUZEV2l4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdXVUZEYmtJc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMWxCUTI1Q0xFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRaUVVOdVFpeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03VTBGRFdDeERRVUZETzFGQlJWZ3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhYUVVGWExFTkJRVU1zVFVGQlRTeERRVUZETzFsQlEyaERMRTlCUVU4c1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVVUxUkN4UFFVRlBMRkZCUVZFc1EwRkRXQ3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGRrSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4SFFVRkhMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUXk5RExFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRM2hDTEVOQlFVTTdRMEZEUmp0QlFXOUNUU3hOUVVGTkxHbENRVUZwUWl4SFFVRkhMRU5CUVVNc1NVRkJaU3hGUVVFeVFpeEZRVUZGTzBsQlF6VkZMRTlCUVU4c1ZVRkJWU3hKUVVGSkxFbEJRVWtzUTBGQlF6dEJRVU0xUWl4RFFVRkRMRU5CUVVNN1FVRm5Ra3NzVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhEUVVGRExFbEJRV1VzUlVGQk1rSXNSVUZCUlR0SlFVTTFSU3hQUVVGUExGVkJRVlVzU1VGQlNTeEpRVUZKTEVOQlFVTTdRVUZETlVJc1EwRkJReXhEUVVGRE8wRkJVMHNzVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhEUVVGRExFbEJRV1VzUlVGQk5rSXNSVUZCUlR0SlFVTm9SaXhQUVVGUExGbEJRVmtzU1VGQlNTeEpRVUZKTEVOQlFVTTdRVUZET1VJc1EwRkJReXhEUVVGRE8wRkJVVXNzVFVGQlRTeHJRa0ZCYTBJc1IwRkJSeXhEUVVGRExFbEJRV1VzUlVGQk5FSXNSVUZCUlR0SlFVTTVSU3hQUVVGUExGZEJRVmNzU1VGQlNTeEpRVUZKTEVOQlFVTTdRVUZETjBJc1EwRkJReXhEUVVGRE96czdRVU0zU0d0RE8wRkJRMnRDTzBGQlExSTdRVUZEWlR0QlFVTnJTRHRCUVVkb1N5eE5RVUZOTEdkQ1FVRm5RanRKUVZkdVF5eFpRVUZaTEZGQlFYRkNMRVZCUVVVc1VVRkJZenRSUVZCcVJDeGxRVUZWTEVkQlFXZERMRVZCUVVVc1EwRkJRenRSUVVNM1F5eHBRa0ZCV1N4SFFVRmhMRVZCUVVVc1EwRkJRenRSUVVNMVFpeFpRVUZQTEVkQlFXRXNSVUZCUlN4RFFVRkRPMUZCUTNaQ0xGZEJRVTBzUjBGQllTeEZRVUZGTEVOQlFVTTdVVUZEZEVJc1UwRkJTU3hIUVVGaExFVkJRVVVzUTBGQlF6dFJRVVZ3UWl4clFrRkJZU3hIUVVFNFF5eEZRVUZGTEVOQlFVTTdVVUZGTlVRc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTTdVVUZEZWtJc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU03VVVGRE9VTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRGRrSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dFJRVU14UWl4dlJVRkJiMFU3VVVGRGNFVXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhGUVVGRkxFTkJRVU03U1VGRE1VSXNRMEZCUXp0SlFVVkVMRlZCUVZVc1EwRkJReXhSUVVGeFFqczdVVUZET1VJc05FUkJRVFJFTzFGQlF6VkVMSFZDUVVGMVFqdFJRVU4yUWl4TFFVRkxMRTFCUVUwc1NVRkJTU3hKUVVGSkxGRkJRVkVzUlVGQlJUdFpRVU16UWl4SlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1JVRkJSU3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdXVUZEY0VVc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMWxCUld4RkxFbEJRVWtzYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hEUVVGRE8yZENRVU42UWl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkZiRU1zU1VGQlNTeHBRa0ZCYVVJc1EwRkJReXhKUVVGSkxFTkJRVU03WjBKQlEzcENMRWxCUVVrc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRUUVVONlF6dFJRVVZFTEhORVFVRnpSRHRSUVVOMFJDeExRVUZMTEUxQlFVMHNSVUZCUlN4SlFVRkpMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVU3V1VGRGJrTXNUVUZCVFN4TFFVRkxMRk5CUVVjc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eEZRVUZGTEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRE8xbEJRek5ETEZWQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSU3hEUVVGRExEQkRRVUZGTEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhGUVVGRkxFbEJRVWtzWTBGQll5eERRVU5zUlN4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVU5zUWl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVU5zUWl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVU5zUWl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eFJRVU55UWl4TFFVRkxMRU5CUVVNc1ZVRkJWU3h0UTBGQlNTeExRVUZMTEVWQlEzcENMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlEyaENMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlEyNUNMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlEyaENMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlEzUkNMRVZCUVVVN1UwRkRTanRSUVVWRUxEQkVRVUV3UkR0UlFVTXhSQ3hOUVVGTkxGbEJRVmtzUjBGQk9FSXNSVUZCUlN4RFFVRkRPMUZCUTI1RUxFdEJRVXNzVFVGQlRTeEpRVUZKTEVsQlFVa3NVVUZCVVN4RlFVRkZPMWxCUXpOQ0xFbEJRVWtzYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVU3WjBKQlF6TkNMRTFCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dG5Ra0ZET1VNc1NVRkJTU3hMUVVGTExFVkJRVVU3YjBKQlExUXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zVTBGQlJ5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXh0UTBGQlNTeERRVUZETEVOQlFVTTdiMEpCUTI1RUxFVkJRVVVzV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenR2UWtGRGVFSXNWVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETERCRFFVRkZMR2RDUVVGblFpeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1MwRkJTeXhGUVVGRk8ybENRVU51UlR0aFFVTkdPMWxCUTBRc1NVRkJTU3hwUWtGQmFVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRuUWtGRE0wSXNUVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yZENRVU53UkN4SlFVRkpMRXRCUVVzc1JVRkJSVHR2UWtGRFZDeFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhUUVVGSExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzFEUVVGSkxFTkJRVU1zUTBGQlF6dHZRa0ZETDBRc1JVRkJSU3haUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMjlDUVVNNVFpeFZRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zTUVOQlFVVXNaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4TFFVRkxMRVZCUVVVN2FVSkJRM3BGTzJGQlEwWTdVMEZEUmp0UlFVVkVMSE5EUVVGelF6dFJRVU4wUXl4TlFVRk5MRkZCUVZFc1IwRkJSeXhUUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMUZCUXk5RExFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUlRzN1dVRkRkRU1zU1VGQlNTeFhRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRVZCUVVVc1EwRkJReXd3UTBGQlJTeEhRVUZITEUxQlFVc3NVMEZCVXp0blFrRkRlRU1zVjBGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNc01FTkJRVVVzUjBGQlJ5eE5RVUZMTEUxQlFVMDdaMEpCUTI1RExFVkJRVVVzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVN1owSkJRM0JDTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzJkQ1FVTXpRaXhQUVVGUExFdEJRVXNzUTBGQlF6dGhRVU5rTzJsQ1FVRk5MRWxCUVVrc1VVRkJVU3hEUVVGRExGRkJRVkVzWVVGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRVZCUVVVc1EwRkJReXd3UTBGQlJTeEpRVUZKTEcxRFFVRkpMRVZCUVVVc1EwRkJReXhGUVVGRk8yZENRVU0zUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0blFrRkRia0lzVDBGQlR5eExRVUZMTEVOQlFVTTdZVUZEWkR0cFFrRkJUU3hKUVVGSkxFOUJRVU1zV1VGQldTeERRVUZETEVWQlFVVXNRMEZCUXl4dFEwRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVTdaMEpCUTNSRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8yZENRVU4wUWl4UFFVRlBMRXRCUVVzc1EwRkJRenRoUVVOa08xbEJRMFFzVDBGQlR5eEpRVUZKTEVOQlFVTTdVVUZEWkN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVWSUxIVkVRVUYxUkR0UlFVTjJSQ3hKUVVGSkxFTkJRVU1zWlVGQlpTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPenRaUVVOb1JDeFBRVUZQTEU5QlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXh0UTBGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4UFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRExFTkJRVU1zYlVOQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRla1FzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRVaXhEUVVGRE8wbEJSVVFzYjBKQlFXOUNMRU5CUVVNc1NVRkJjVUk3TzFGQlEzaERMRTFCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEZWtRc1RVRkJUU3hUUVVGVExGTkJRVWNzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXp0UlFVVndSQ3hOUVVGTkxHTkJRV01zVTBGQlJ5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zU1VGQlNTeERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRSUVVVM1JDeFRRVUZUTEVOQlFVTXNTVUZCU1N4VFFVRkhMRk5CUVZNc1EwRkJReXhKUVVGSkxHMURRVUZKTEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRka1FzVTBGQlV5eERRVUZETEVsQlFVa3NVMEZCUnl4VFFVRlRMRU5CUVVNc1NVRkJTU3h0UTBGQlNTeGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTNaRUxGTkJRVk1zUTBGQlF5eEpRVUZKTEZOQlFVY3NVMEZCVXl4RFFVRkRMRWxCUVVrc2JVTkJRVWtzWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXp0UlFVTjJSQ3hUUVVGVExFTkJRVU1zVDBGQlR5eFRRVUZITEZOQlFWTXNRMEZCUXl4UFFVRlBMRzFEUVVGSkxHTkJRV01zUTBGQlF5eFBRVUZQTEVOQlFVTTdVVUZEYUVVc1UwRkJVeXhEUVVGRExGVkJRVlVzVTBGQlJ5eFRRVUZUTEVOQlFVTXNWVUZCVlN4dFEwRkJTU3hqUVVGakxFTkJRVU1zVlVGQlZTeERRVUZETzFGQlEzcEZMRk5CUVZNc1EwRkJReXhGUVVGRkxGTkJRVWNzVTBGQlV5eERRVUZETEVWQlFVVXNiVU5CUVVrc1kwRkJZeXhEUVVGRExFVkJRVVVzUTBGQlF6dFJRVU5xUkN4VFFVRlRMRU5CUVVNc1MwRkJTeXhUUVVGSExGTkJRVk1zUTBGQlF5eExRVUZMTEcxRFFVRkpMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU03VVVGRE1VUXNVMEZCVXl4RFFVRkRMRVZCUVVVc1UwRkJSeXhUUVVGVExFTkJRVU1zUlVGQlJTeHRRMEZCU1N4alFVRmpMRU5CUVVNc1JVRkJSU3hEUVVGRE8xRkJRMnBFTEZOQlFWTXNRMEZCUXl4TFFVRkxMRk5CUVVjc1UwRkJVeXhEUVVGRExFdEJRVXNzYlVOQlFVa3NZMEZCWXl4RFFVRkRMRXRCUVVzc1EwRkJRenRSUVVVeFJDeEpRVUZKTEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzFsQlF6ZENMRk5CUVZNc1EwRkJReXhIUVVGSExHVkJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExEQkRRVUZGTEVkQlFVY3NiVU5CUVVrc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dFpRVU14UkN4VFFVRlRMRU5CUVVNc1MwRkJTeXhsUVVGSExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXd3UTBGQlJTeExRVUZMTEcxRFFVRkpMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU03VTBGRGFrVTdVVUZGUkN4SlFVRkpMR3RDUVVGclFpeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMWxCUXpWQ0xFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExGTkJRVk1zUzBGQlN5eFRRVUZUTzJkQ1FVTTFSU3hUUVVGVExFTkJRVU1zUjBGQlJ5eEhRVUZITEhsQ1FVRjVRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0VFFVTTNSRHRKUVVOSUxFTkJRVU03U1VGRlJDd3dRa0ZCTUVJc1EwRkJReXhKUVVGeFFqczdVVUZET1VNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFJRVU51UkN4TlFVRk5MRk5CUVZNc1UwRkJSeXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETzFGQlJURkVMRTFCUVUwc1kwRkJZeXhUUVVGSExFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1EwRkJReXhKUVVGSkxFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRPMUZCUlc1RkxGTkJRVk1zUTBGQlF5eEpRVUZKTEZOQlFVY3NVMEZCVXl4RFFVRkRMRWxCUVVrc2JVTkJRVWtzWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXp0UlFVTjJSQ3hUUVVGVExFTkJRVU1zU1VGQlNTeFRRVUZITEZOQlFWTXNRMEZCUXl4SlFVRkpMRzFEUVVGSkxHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTTdVVUZEZGtRc1UwRkJVeXhEUVVGRExFbEJRVWtzVTBGQlJ5eFRRVUZUTEVOQlFVTXNTVUZCU1N4dFEwRkJTU3hqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEzWkVMRk5CUVZNc1EwRkJReXhQUVVGUExGTkJRVWNzVTBGQlV5eERRVUZETEU5QlFVOHNiVU5CUVVrc1kwRkJZeXhEUVVGRExFOUJRVThzUTBGQlF6dFJRVU5vUlN4VFFVRlRMRU5CUVVNc1JVRkJSU3hUUVVGSExGTkJRVk1zUTBGQlF5eEZRVUZGTEcxRFFVRkpMR05CUVdNc1EwRkJReXhGUVVGRkxFTkJRVU03VVVGRGFrUXNVMEZCVXl4RFFVRkRMRXRCUVVzc1UwRkJSeXhUUVVGVExFTkJRVU1zUzBGQlN5eHRRMEZCU1N4alFVRmpMRU5CUVVNc1MwRkJTeXhEUVVGRE8xRkJRekZFTEZOQlFWTXNRMEZCUXl4RlFVRkZMRk5CUVVjc1UwRkJVeXhEUVVGRExFVkJRVVVzYlVOQlFVa3NZMEZCWXl4RFFVRkRMRVZCUVVVc1EwRkJRenRSUVVOcVJDeFRRVUZUTEVOQlFVTXNTMEZCU3l4VFFVRkhMRk5CUVZNc1EwRkJReXhMUVVGTExHMURRVUZKTEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkROVVFzUTBGQlF6dEpRVVZFTEc5Q1FVRnZRaXhEUVVGRExFbEJRWEZDTzFGQlEzaERMRTFCUVUwc1MwRkJTeXhIUVVFMFFpeEZRVUZGTEVOQlFVTTdVVUZGTVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF5eExRVUZMTEZOQlFWTTdXVUZEZEVJc1MwRkJTeXhEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNSQ0xFbEJRVWtzU1VGQlNTeERRVUZETEVOQlFVTXNTMEZCU3l4VFFVRlRPMWxCUTNSQ0xFdEJRVXNzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOMFFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4RFFVRkRMRXRCUVVzc1UwRkJVenRaUVVOMFFpeExRVUZMTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGRFSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhMUVVGTExGTkJRVk03V1VGRE5VSXNTMEZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETzFGQlF5OUNMRWxCUVVrc1NVRkJTU3hEUVVGRExGVkJRVlVzUzBGQlN5eFRRVUZUTzFsQlF5OUNMRXRCUVVzc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXp0UlFVTnlReXhKUVVGSkxFbEJRVWtzUTBGQlF5eEZRVUZGTEV0QlFVc3NVMEZCVXp0WlFVTjJRaXhMUVVGTExFTkJRVU1zUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNN1VVRkRja0lzU1VGQlNTeEpRVUZKTEVOQlFVTXNTMEZCU3l4TFFVRkxMRk5CUVZNN1dVRkRNVUlzUzBGQlN5eERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRE8xRkJRek5DTEVsQlFVa3NTVUZCU1N4RFFVRkRMRVZCUVVVc1MwRkJTeXhUUVVGVE8xbEJRM1pDTEV0QlFVc3NRMEZCUXl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF6dFJRVU55UWl4SlFVRkpMRWxCUVVrc1EwRkJReXhMUVVGTExFdEJRVXNzVTBGQlV6dFpRVU14UWl4TFFVRkxMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZGTTBJc1QwRkJUeXhMUVVGTExFTkJRVU03U1VGRFppeERRVUZETzBsQlJVUXNNRUpCUVRCQ0xFTkJRVU1zU1VGQmNVSTdVVUZET1VNc1RVRkJUU3hMUVVGTExFZEJRVFJDTEVWQlFVVXNRMEZCUXp0UlFVVXhReXhKUVVGSkxFbEJRVWtzUTBGQlF5eFBRVUZQTEV0QlFVc3NVMEZCVXp0WlFVTTFRaXhMUVVGTExFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNN1VVRkROVUlzU1VGQlNTeEpRVUZKTEVOQlFVTXNUMEZCVHl4TFFVRkxMRk5CUVZNN1dVRkROVUlzUzBGQlN5eERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRE8xRkJRelZDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1MwRkJTeXhUUVVGVE8xbEJRelZDTEV0QlFVc3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF6dFJRVU0xUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhoUVVGaExFdEJRVXNzVTBGQlV6dFpRVU5zUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTTdVVUZEY2tNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeExRVUZMTEZOQlFWTTdXVUZETjBJc1MwRkJTeXhEUVVGRExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMUZCUXpOQ0xFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NTMEZCU3l4VFFVRlRPMWxCUTJoRExFdEJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJRenRSUVVOcVF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRXRCUVVzc1UwRkJVenRaUVVNM1FpeExRVUZMTEVOQlFVTXNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU03VVVGRE0wSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1YwRkJWeXhMUVVGTExGTkJRVk03V1VGRGFFTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETzFGQlJXcERMRTlCUVU4c1MwRkJTeXhEUVVGRE8wbEJRMllzUTBGQlF6dEpRVVZFTEdGQlFXRXNRMEZCUXl4RlFVRlZMRVZCUVVVc1NVRkJXVHRSUVVOd1F5eEpRVUZKTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEzQkRMRWxCUVVrc1UwRkJVeXhMUVVGTExGTkJRVk1zUlVGQlJUdFpRVU16UWl4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4SlFVRkpMRk5CUVZNc1EwRkJReXhGUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdXVUZETVVRc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1dVRkRja0lzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSenRuUWtGRGRrSXNWVUZCVlN4RlFVRkZMRWxCUVVrN1lVRkRha0lzUTBGQlF6dFRRVU5JTzJGQlFVMHNTVUZCU1N4VFFVRlRMRU5CUVVNc1NVRkJTU3hMUVVGTExFVkJRVVVzUlVGQlJUdFpRVU5vUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFOQlEzcENPMUZCUTBRc1QwRkJUeXhUUVVGVExFTkJRVU03U1VGRGJrSXNRMEZCUXp0SlFVVkVMRzlDUVVGdlFqczdVVUZEYkVJc1NVRkJTU3hKUVVGSkxFTkJRVU1zWlVGQlpUdFpRVU4wUWl4dFFrRkJUeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc01FTkJRVVVzU1VGQlNTeHRRMEZCU1N4VFFVRlRMRU5CUVVNN1VVRkRiRVVzVDBGQlR5eFRRVUZUTEVOQlFVTTdTVUZEYmtJc1EwRkJRenREUVVOR096czdRVU0zVFdNc1RVRkJUU3hoUVVGaE8wbEJRV3hETzFGQlEwVXNaVUZCVlN4SFFVRm5ReXhGUVVGRkxFTkJRVU03VVVGRE4wTXNiVUpCUVdNc1IwRkJSeXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1NVRm5SRE5ETEVOQlFVTTdTVUU1UTBNc1pVRkJaU3hEUVVGRExGTkJRV2xDTzFGQlF5OUNMRWxCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzBsQlEycEZMRU5CUVVNN1NVRkZSQ3hsUVVGbExFTkJRVU1zUlVGQlZTeEZRVUZGTEVOQlFWazdVVUZEZEVNc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0UlFVTjBRaXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNUVUZCVFN4RlFVRkZPMWxCUTI1Q0xFbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03V1VGRGNFTXNTVUZCU1N4VFFVRlRMRXRCUVVzc1UwRkJVeXhGUVVGRk8yZENRVU16UWl4VFFVRlRMRWRCUVVjN2IwSkJRMVlzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpPMjlDUVVOYUxFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNSMEZCUnp0dlFrRkRWaXhMUVVGTExFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVczdiMEpCUTJRc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTzJsQ1FVTnVRaXhEUVVGRE8yZENRVU5HTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETzJGQlEycERPMmxDUVVGTk8yZENRVU5NTEZOQlFWTXNRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzU1VGQlNTeFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRPMmRDUVVNeFF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXp0blFrRkRka01zVTBGQlV5eERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8yZENRVU55UkN4VFFVRlRMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdZVUZETlVRN1UwRkRSanRKUVVOSUxFTkJRVU03U1VGRlJDeFhRVUZYTEVOQlExQXNSVUZCVlN4RlFVTldMRWxCUVZrc1JVRkRXaXhoUVVFMFFpeEpRVUZKTEVWQlEyaERMR1ZCUVRoQ0xFbEJRVWs3TzFGQlEzQkRMRWxCUVVrc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF6dFJRVVZtTEVsQlFVa3NWVUZCVlN4TFFVRkxMRWxCUVVrc1JVRkJSVHRaUVVOMlFpeEpRVUZKTEVWQlFVVXNTMEZCU3l4VlFVRlZMRWxCUVVrc1IwRkJSeXhMUVVGTExFVkJRVVVzUlVGQlJUdG5Ra0ZEYmtNc1NVRkJTU3hWUVVGVkxFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXp0dlFrRkROVUlzUjBGQlJ5eEhRVUZITEZsQlFWa3NZVUZCV2l4WlFVRlpMR05CUVZvc1dVRkJXU3hIUVVGSkxFVkJRVVVzUTBGQlF6czdiMEpCUlhwQ0xFZEJRVWNzUjBGQlJ5eFRRVUZUTEVOQlFVTTdZVUZEYmtJN1UwRkRSanRSUVVWRUxFbEJRVWtzUjBGQlJ5eExRVUZMTEVWQlFVVTdXVUZEV2l4SFFVRkhMR1ZCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTEVOQlFVTXNNRU5CUVVVc1NVRkJTU3h0UTBGQlNTeEZRVUZGTEVOQlFVTTdVVUZGZUVNc1QwRkJUeXhIUVVGSExFTkJRVU03U1VGRFlpeERRVUZETzBOQlEwWTdPenRCUXpGRFJEczdPenRIUVVsSE8wRkJRMWtzVFVGQlRTeFJRVUZSTzBsQlFUZENPMUZCUTFVc1kwRkJVeXhIUVVGaExFVkJRVVVzUTBGQlF6dEpRWE5EYmtNc1EwRkJRenRKUVhKRFF6czdPenM3T3p0UFFVOUhPMGxCUTBnc1JVRkJSU3hEUVVGRExFdEJRV0VzUlVGQlJTeFJRVUV5UWl4RlFVRkZMRXRCUVdFN096dFJRVU14UkN4TlFVRk5MRTFCUVUwc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTJoRExFMUJRVTBzUjBGQlJ5eEhRVUZ2UWl4RlFVRkZMRU5CUVVNN1VVRkRhRU1zUzBGQlN5eEhRVUZITEV0QlFVc3NZVUZCVEN4TFFVRkxMR05CUVV3c1MwRkJTeXhIUVVGSkxFTkJRVU1zVDBGQlR5eE5RVUZOTEV0QlFVc3NWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUXk5RUxFdEJRVXNzVFVGQlRTeExRVUZMTEVsQlFVa3NUVUZCVFN4RlFVRkZPMWxCUXpGQ0xFMUJRVTBzVFVGQlRTeGxRVUZ2UWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRExFdEJRVXNzZDBOQlFVd3NTMEZCU3l4SlFVRk5MRVZCUVVVc1JVRkJRenRaUVVNM1JDeEpRVUZKTEZGQlFWRXNTMEZCU3l4VFFVRlRPMmRDUVVONFFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRkZCUVZFc1JVRkJSU3hSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETzFsQlEyeEZMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eFBRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkROVU03VVVGRFJDeFBRVUZQTEVkQlFVY3NRMEZCUXp0SlFVTmlMRU5CUVVNN1NVRkZSRHM3T3pzN08wOUJUVWM3U1VGRFNDeExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVdFc1JVRkJSU3hIUVVGSExHTkJRWEZDT3p0UlFVTndSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1UwRkJVenRaUVVOeVF5eFBRVUZQTzFGQlJWUXNTMEZCU3l4TlFVRk5MRU5CUVVNc1ZVRkJTU3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4dFEwRkJTU3hGUVVGRkxFVkJRVVU3V1VGRE0wTXNUVUZCVFN4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hqUVVGakxFTkJRVU1zUTBGQlF6dFpRVU4wUkN4TlFVRk5MRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVMEZETlVJN1NVRkRTQ3hEUVVGRE8wTkJRMFk3T3p0QlF6TkViVU03UVVGSGNFTXNUVUZCVFN4dlFrRkJUU3hIUVVGSE8wbEJRMklzU1VGQlNTeEZRVUZGTEVOQlFVTTdTVUZEVUN4UFFVRlBMRVZCUVVVc1EwRkJRenREUVVOR0xFTkJRVU03UVVGRldDeGhRVUZoTzBGQlEwNHNUVUZCVFN4aFFVRmpMRk5CUVZFc1UwRkJVenRKUVVzeFF5eFpRVUZaTEVsQlFXMUNMRVZCUVVVc1NVRkJXU3hGUVVGRkxFdEJRV1U3TzFGQlF6VkVMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUlhwQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEZOQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRSUVVOeVF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4VFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU03VVVGRE0wTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVVTFReXcwUlVGQk5FVTdVVUZETlVVc2QwUkJRWGRFTzFGQlEzaEVMRWxCUVVrc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU03V1VGREwwTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRmRFSXNTVUZCU1N4RFFVRkRMR0ZCUVdFN1dVRkRhRUlzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUjBGQlJ6dG5Ra0ZETjBJc05rUkJRVFpFTzJkQ1FVTTNSQ3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRE8yZENRVU12UXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzFGQlEzaENMRWxCUVVrc1EwRkJReXhoUVVGaExFZEJRVWNzVjBGQlZ5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0SlFVTXhSU3hEUVVGRE8wbEJSVVFzVFVGQlRTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFbEJRVms3VVVGRGNFTXNTMEZCU3l4TlFVRk5MRWRCUVVjc1NVRkJTU3hYUVVGWExFTkJRVU1zYzBKQlFYTkNPMWxCUTJ4RUxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUlM5RExFOUJRVThzU1VGQlNTeERRVUZETzBsQlEyUXNRMEZCUXpzN1FVRkZUU3h2UTBGQmMwSXNSMEZCUnp0SlFVTTVRanRSUVVORkxFMUJRVTBzUlVGQlJTeFZRVUZWTzFGQlEyeENMRTlCUVU4c1JVRkJSU3hKUVVGSk8xRkJRMklzU1VGQlNTeEZRVUZGTEZGQlFWRTdTMEZEWmp0SlFVTkVPMUZCUTBVc1RVRkJUU3hGUVVGRkxHZENRVUZuUWp0UlFVTjRRaXhQUVVGUExFVkJRVVVzUjBGQlJ6dFJRVU5hTEVsQlFVa3NSVUZCUlN4cFFrRkJhVUk3UzBGRGVFSTdTVUZEUkR0UlFVTkZMRTFCUVUwc1JVRkJSU3huUWtGQlowSTdVVUZEZUVJc1QwRkJUeXhGUVVGRkxFZEJRVWM3VVVGRFdpeEpRVUZKTEVWQlFVVXNhVUpCUVdsQ08wdEJRM2hDTzBOQlEwWXNRMEZCUXp0QlFVZEhMRTFCUVUwc1YwRkJXU3hUUVVGUkxHRkJRV0U3UTBGQlJ6czdPMEZETlVSaU8wRkJRMk03UVVGSGJFUXNUVUZCVFN4dlFrRkJUU3hIUVVGSE8wbEJRMklzVFVGQlRTeEZRVUZGTEVOQlFVTTdTVUZEVkN4UlFVRlJMRVZCUVVVc1EwRkJRenREUVVOSUxFTkJRVU03UVVGRldDeHZRa0ZCYjBJN1FVRkRZaXhOUVVGTkxHRkJRV01zVTBGQlVTeFRRVUZUTzBsQlR6RkRMRmxCUVZrc1NVRkJiVUlzUlVGQlJTeFhRVUZ0UWl4RlFVRkZMRXRCUVdVN08xRkJRMjVGTEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1YwRkJWeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzFGQlJXaERMRWxCUVVrc1EwRkJReXhOUVVGTkxGTkJRVWNzUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTjZReXhKUVVGSkxFTkJRVU1zVVVGQlVTeFRRVUZITEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNN1VVRkROME1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhIUVVGSExIbENRVUY1UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dFJRVVZ1UlN4SlFVRkpMRU5CUVVNc1lVRkJZU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVTdXVUZEYUVNc2EwSkJRV3RDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhIUVVGSExFTkJRVU03VVVGRE0wTXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVN1dVRkRNVU1zYTBKQlFXdENMRWRCUVVjc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4SFFVRkhMRWRCUVVjc1EwRkJRenRKUVVOMlJDeERRVUZETzBOQlEwWTdRVUZGVFN4TlFVRk5MRmRCUVZrc1UwRkJVU3hoUVVGaE8wTkJRVWM3T3p0QlF5OUNZanRCUVVkd1F5eE5RVUZOTEc5Q1FVRk5MRWRCUVVjN1NVRkRZaXhGUVVGRkxFVkJRVVVzUTBGQlF6dEpRVU5NTEVsQlFVa3NSVUZCUlN4RFFVRkRPME5CUTBNc1EwRkJRenRCUVVWWUxITkNRVUZ6UWp0QlFVTm1MRTFCUVUwc1lVRkJZeXhUUVVGUkxGTkJRVk03U1VGSk1VTXNXVUZCV1N4SlFVRnRRaXhGUVVGRkxFbEJRVmtzUlVGQlJTeExRVUZsT3p0UlFVTTFSQ3hMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVWNlFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4bFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl3d1EwRkJSU3hYUVVGWExIRkRRVUZOTEVWQlFVVXNRMEZCUXp0UlFVTm9SQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeFRRVUZITEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNN1VVRkZja01zU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzTkVKQlFUUkNMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEhRVUZITEVOQlFVTTdTVUZEZEVZc1EwRkJRenREUVVOR08wRkJSVTBzVFVGQlRTeFhRVUZaTEZOQlFWRXNZVUZCWVR0RFFVRkhPenM3UVVOeVFtcEVMRFpHUVVFMlJqdEJRVU0zUml4TlFVRk5MR0ZCUVdFc1IwRkJkMEk3U1VGRGVrTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1NVRkRVQ3hIUVVGSExFVkJRVVVzUTBGQlF6dEpRVU5PTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGxCUTA0c1IwRkJSeXhGUVVGRkxFTkJRVU03U1VGRFRpeEhRVUZITEVWQlFVVXNRMEZCUXp0SlFVTk9MRWRCUVVjc1JVRkJSU3hEUVVGRE8wbEJRMDRzUjBGQlJ5eEZRVUZGTEVOQlFVTTdTVUZEVGl4SFFVRkhMRVZCUVVVc1EwRkJRenRKUVVOT0xFZEJRVWNzUlVGQlJTeERRVUZETzBsQlEwNHNSMEZCUnl4RlFVRkZMRU5CUVVNN1NVRkRUaXhIUVVGSExFVkJRVVVzUlVGQlJUdEpRVU5RTEVkQlFVY3NSVUZCUlN4RlFVRkZPMGxCUTFBc1IwRkJSeXhGUVVGRkxFVkJRVVU3U1VGRFVDeEhRVUZITEVWQlFVVXNSVUZCUlR0SlFVTlFMRWRCUVVjc1JVRkJSU3hGUVVGRk8wbEJRMUFzUjBGQlJ5eEZRVUZGTEVWQlFVVTdTVUZEVUN4SFFVRkhMRVZCUVVVc1JVRkJSVHRKUVVOUUxFZEJRVWNzUlVGQlJTeEZRVUZGTzBsQlExQXNSMEZCUnl4RlFVRkZMRVZCUVVVN1NVRkRVQ3hIUVVGSExFVkJRVVVzUlVGQlJUdEpRVU5RTEVkQlFVY3NSVUZCUlN4RlFVRkZPMGxCUTFBc1IwRkJSeXhGUVVGRkxFVkJRVVU3U1VGRFVDeEhRVUZITEVWQlFVVXNSVUZCUlR0SlFVTlFMRWRCUVVjc1JVRkJSU3hGUVVGRk8wbEJRMUFzUjBGQlJ5eEZRVUZGTEVWQlFVVTdTVUZEVUN4SFFVRkhMRVZCUVVVc1JVRkJSVHRKUVVOUUxFZEJRVWNzUlVGQlJTeEZRVUZGTzBsQlExQXNSMEZCUnl4RlFVRkZMRVZCUVVVN1NVRkRVQ3hIUVVGSExFVkJRVVVzUlVGQlJUdEpRVU5RTEVkQlFVY3NSVUZCUlN4RlFVRkZPMGxCUTFBc1IwRkJSeXhGUVVGRkxFVkJRVVU3U1VGRFVDeEhRVUZITEVWQlFVVXNSVUZCUlR0SlFVTlFMRWRCUVVjc1JVRkJSU3hGUVVGRk8wbEJRMUFzUjBGQlJ5eEZRVUZGTEVWQlFVVTdTVUZEVUN4SFFVRkhMRVZCUVVVc1JVRkJSVHRKUVVOUUxFZEJRVWNzUlVGQlJTeEZRVUZGTzBsQlExQXNSMEZCUnl4RlFVRkZMRVZCUVVVN1NVRkRVQ3hIUVVGSExFVkJRVVVzUlVGQlJUdEpRVU5RTEVkQlFVY3NSVUZCUlN4RlFVRkZPME5CUTFJc1EwRkJRenRCUVVWR0xFMUJRVTBzVDBGQlR5eEhRVUZITEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGVkxFTkJRVU03UVVGRGNFUXNUVUZCVFN4UlFVRlJMRWRCUVVjc1EwRkJReXhOUVVGTkxFVkJRVVVzVVVGQlVTeEZRVUZGTEV0QlFVc3NSVUZCUlN4VFFVRlRMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFMUJRVTBzUTBGQlZ5eERRVUZETzBGQlJYQkdMRTFCUVUwc1VVRkJVU3hIUVVGVkxFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTnVSU3hOUVVGTkxGVkJRVlVzUjBGQlZTeERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEzWkVMRTFCUVUwc1dVRkJXU3hIUVVGVkxFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRPVVVzVFVGQlRTeGhRVUZoTEVkQlFWVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTXhSQ3hOUVVGTkxHRkJRV0VzUjBGQlZTeERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRlRVVzVFVGQlRTeFBRVUZQTEVkQlFWVXNRMEZCUXl4SFFVRkhMRmxCUVZrc1JVRkJSU3hIUVVGSExHRkJRV0VzUlVGQlJTeEhRVUZITEdGQlFXRXNRMEZCUXl4RFFVRkRPMEZCUXpkRkxFMUJRVTBzV1VGQldTeEhRVUZWTEVOQlFVTXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEzSkdMRTFCUVUwc1lVRkJZU3hIUVVGVkxFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVWdVJDeE5RVUZOTEZGQlFWRXNSMEZCVlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hIUVVGSExGRkJRVkVzUlVGQlJTeEhRVUZITEZsQlFWa3NRMEZCUXl4RFFVRkRPMEZCUXpsRUxFMUJRVTBzVjBGQlZ5eEhRVUZWTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWRCUVVjc1VVRkJVU3hGUVVGRkxFZEJRVWNzWVVGQllTeERRVUZETEVOQlFVTTdRVUZEYkVVc1RVRkJUU3hUUVVGVExFZEJRVlVzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWRCUVVjc1ZVRkJWU3hEUVVGRExFTkJRVU03UVVGRGRrUXNUVUZCVFN4VFFVRlRMRWRCUVZVc1EwRkJReXhIUVVGSExGbEJRVmtzUTBGQlF5eERRVUZETzBGQlF6TkRMRTFCUVUwc1UwRkJVeXhIUVVGVkxFTkJRVU1zUjBGQlJ5eGhRVUZoTEVOQlFVTXNRMEZCUXp0QlFVTTFReXhOUVVGTkxGZEJRVmNzUjBGQlZTeERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1IwRkJSeXhWUVVGVkxFTkJRVU1zUTBGQlF6dEJRVVY2UkN4TlFVRk5MRmxCUVZrc1IwRkJiVUlzUTBGQlF5eEhRVUZITEVWQlFVVTdTVUZEZWtNc1RVRkJUU3hSUVVGUkxFZEJRVWNzUTBGQlF5eEhRVUZ0UWl4RlFVRkZMRWxCUVZjc1JVRkJSU3hKUVVGVkxFVkJRVVVzUlVGQlJUdFJRVU5vUlN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUXpWRExFTkJRVU1zUTBGQlF6dEpRVVZHTEUxQlFVMHNSMEZCUnl4SFFVRnRRaXhKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU40UkN4UlFVRlJMRU5CUVVNc1IwRkJSeXhGUVVGRkxGRkJRVkVzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVTm9ReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEZWQlFWVXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVOd1F5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RlFVRkZMRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEpRVU01UWl4UlFVRlJMRU5CUVVNc1IwRkJSeXhGUVVGRkxGbEJRVmtzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXp0SlFVTjJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEdGQlFXRXNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRenRKUVVWNlF5eFBRVUZQTEVkQlFVY3NRMEZCUXp0QlFVTmlMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU03UVVGRlRDeE5RVUZOTEVsQlFVa3NSMEZCUnp0SlFVTllMRmxCUVZrc1JVRkJSU3hEUVVGRExFVkJRVlVzUlVGQlJTeEZRVUZGTzFGQlF6TkNMRTFCUVUwc1IwRkJSeXhIUVVGSExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRlJMRVZCUVVVc1JVRkJSU3hEUVVGRExHRkJRV0VzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOc1JTeFBRVUZQTEVkQlFVY3NZVUZCU0N4SFFVRkhMR05CUVVnc1IwRkJSeXhIUVVGSkxFMUJRVTBzUTBGQlF6dEpRVU4yUWl4RFFVRkRPMGxCUTBRc1dVRkJXU3hGUVVGRkxFTkJRVU1zUjBGQlVTeEZRVUZGTEVWQlFVVXNRMEZCUXl4aFFVRmhMRU5CUVVNc1IwRkJSeXhEUVVGRE8wbEJRemxETEZOQlFWTXNSVUZCUlN4RFFVRkRMRWRCUVZFc1JVRkJSU3hGUVVGRk8xRkJRM1JDTEUxQlFVMHNTVUZCU1N4SFFVRkhMRmxCUVZrc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEYmtNc1QwRkJUeXhKUVVGSkxHRkJRVW9zU1VGQlNTeGpRVUZLTEVsQlFVa3NSMEZCU1N4TlFVRk5MRU5CUVVNN1NVRkRlRUlzUTBGQlF6dEpRVU5FTEZkQlFWY3NSVUZCUlN4SFFVRnZRaXhGUVVGRkxFTkJRVU1zVVVGQlVUdEpRVU0xUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhIUVVGUkxFVkJRVVVzUlVGQlJTeERRVUZETEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRE8wbEJReTlETEZkQlFWY3NSVUZCUlN4RFFVRkRMRWRCUVZFc1JVRkJSU3hGUVVGRkxFTkJRVU1zVlVGQlZTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNN1NVRkRia1FzWVVGQllTeEZRVUZGTEVOQlFVTXNSMEZCVVN4RlFVRkZMRVZCUVVVc1EwRkJReXhaUVVGWkxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXp0SlFVTjJSQ3hqUVVGakxFVkJRVVVzUTBGQlF5eEhRVUZSTEVWQlFVVXNSVUZCUlN4RFFVRkRMR0ZCUVdFc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETzBsQlEzcEVMR05CUVdNc1JVRkJSU3hEUVVGRExFZEJRVkVzUlVGQlJTeEZRVUZGTEVOQlFVTXNZVUZCWVN4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU03U1VGRGVrUXNVVUZCVVN4RlFVRkZMRU5CUVVNc1IwRkJVU3hGUVVGRkxFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJRenRKUVVNM1F5eGhRVUZoTEVWQlFVVXNRMEZCUXl4SFFVRlJMRVZCUVVVc1JVRkJSU3hEUVVGRExGbEJRVmtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRPMGxCUTNaRUxHTkJRV01zUlVGQlJTeERRVUZETEVkQlFWRXNSVUZCUlN4RlFVRkZMRU5CUVVNc1lVRkJZU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTTdTVUZEZWtRc1YwRkJWeXhGUVVGRkxFTkJRVU1zUjBGQlVTeEZRVUZGTEVWQlFVVTdVVUZEZUVJc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTNKRkxFTkJRVU03U1VGRFJDeFBRVUZQTEVWQlFVVXNRMEZCUXl4SFFVRlJMRVZCUVVVc1JVRkJSU3hEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRPMGxCUXpkRExGVkJRVlVzUlVGQlJTeERRVUZETEVkQlFWRXNSVUZCUlN4RlFVRkZMRU5CUVVNc1YwRkJWeXhEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTTdTVUZEYmtRc1VVRkJVU3hGUVVGRkxFTkJRVU1zUjBGQlVTeEZRVUZGTEVWQlFVVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF6dEpRVU12UXl4VlFVRlZMRVZCUVVVc1EwRkJReXhIUVVGUkxFVkJRVVVzUlVGQlJTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRE8wbEJRMjVFTEZGQlFWRXNSVUZCUlN4RFFVRkRMRWRCUVZFc1JVRkJSU3hGUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNN1NVRkRMME1zVVVGQlVTeEZRVUZGTEVOQlFVTXNSMEZCVVN4RlFVRkZMRVZCUVVVc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXp0RFFVTjJReXhEUVVGRE8wRkJSVmdzTWtOQlFXVXNTVUZCU1N4RlFVRkRPenM3UVVNM1IzZEVPMEZCUXpGQ08wRkJRMFE3UVVGSmFrUXNUVUZCVFN4dlFrRkJUU3hIUVVGSE8wbEJRMklzUlVGQlJTeEZRVUZGTEVOQlFVTTdTVUZEVEN4SlFVRkpMRVZCUVVVc1EwRkJRenRKUVVOUUxGRkJRVkVzUlVGQlJTeERRVUZETzBsQlExZ3NWMEZCVnl4RlFVRkZMRU5CUVVNN1NVRkRaQ3hQUVVGUExFVkJRVVVzUTBGQlF6dEpRVU5XTEU5QlFVOHNSVUZCUlN4RFFVRkRPMGxCUTFZc1UwRkJVeXhGUVVGRkxFTkJRVU03U1VGRFdpeFRRVUZUTEVWQlFVVXNRMEZCUXp0SlFVTmFMRk5CUVZNc1JVRkJSU3hGUVVGRk8wbEJRMklzVTBGQlV5eEZRVUZGTEVWQlFVVTdTVUZEWWl4WFFVRlhMRVZCUVVVc1JVRkJSVHRKUVVObUxGTkJRVk1zUlVGQlJTeEZRVUZGTzBsQlEySXNWMEZCVnl4RlFVRkZMRVZCUVVVN1NVRkRaaXhUUVVGVExFVkJRVVVzUlVGQlJUdEpRVU5pTEV0QlFVc3NSVUZCUlN4RlFVRkZPMGxCUTFRc1QwRkJUeXhGUVVGRkxFVkJRVVU3U1VGRFdDeFBRVUZQTEVWQlFVVXNSVUZCUlR0SlFVTllMRTlCUVU4c1JVRkJSU3hGUVVGRk8wbEJRMWdzVDBGQlR5eEZRVUZGTEVWQlFVVTdRMEZEU0N4RFFVRkRPMEZCUlZnc2QwSkJRWGRDTzBGQlEycENMRTFCUVUwc1lVRkJZeXhUUVVGUkxGTkJRVk03U1VFclFqRkRMRmxCUVZrc1NVRkJiVUlzUlVGQlJTeEpRVUZaTEVWQlFVVXNTMEZCWlRzN1VVRkROVVFzUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGS1dDeGhRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTJoQ0xHVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZMYUVNc1NVRkJTU3hEUVVGRExFVkJRVVVzWlVGQlJ5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU1zTUVOQlFVVXNWMEZCVnl4eFEwRkJUU3hGUVVGRkxFTkJRVU03VVVGRGFFUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1UwRkJSeXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETzFGQlEzSkRMRWxCUVVrc1EwRkJReXhSUVVGUkxHVkJRVWNzUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExEQkRRVUZGTEZkQlFWY3NjVU5CUVUwc1JVRkJSU3hEUVVGRE8xRkJRelZFTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRla01zU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkRla01zU1VGQlNTeERRVUZETEZkQlFWY3NVMEZCUnl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRE8xRkJRMjVFTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVTXhReXhKUVVGSkxFTkJRVU1zVDBGQlR5eGxRVUZITEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5d3dRMEZCUlN4WFFVRlhMSEZEUVVGTkxFVkJRVVVzUTBGQlF6dFJRVU14UkN4SlFVRkpMRU5CUVVNc1QwRkJUeXhUUVVGSExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXh0UTBGQlNTeEZRVUZGTEVOQlFVTTdVVUZETTBNc1NVRkJTU3hEUVVGRExGTkJRVk1zVTBGQlJ5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRPMUZCUXk5RExFbEJRVWtzUTBGQlF5eFRRVUZUTEZOQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRSUVVNdlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4VFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU03VVVGREwwTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhWUVVGVkxFOUJRVU1zUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTNCRUxFbEJRVWtzUTBGQlF5eFhRVUZYTEZOQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRSUVVOdVJDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdVVUZETVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eFZRVUZWTEU5QlFVTXNTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRM0JFTEVsQlFVa3NRMEZCUXl4WFFVRlhMRk5CUVVjc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU51UkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkRNVU1zU1VGQlNTeERRVUZETEVWQlFVVXNSMEZCUnl4VlFVRlZMRTlCUVVNc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEzQkVMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzVlVGQlZTeFBRVUZETEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOdVJDeEpRVUZKTEVOQlFVTXNUMEZCVHl4VFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU03VVVGRE0wTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUTJ4RExFbEJRVWtzUTBGQlF5eFBRVUZQTEZOQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRSUVVNelF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEYkVNc1NVRkJTU3hEUVVGRExFOUJRVThzVTBGQlJ5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRPMUZCUXpORExFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU5zUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExGVkJRVlVzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkZka1FzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRelZDTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTVHRaUVVObUxFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNVMEZCVXp0WlFVTnlRaXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEZOQlFWTTdXVUZEZGtJc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFJRVUZSTzFOQlEyNUNMRU5CUVVNc1EwRkJRenRSUVVWSUxFbEJRVWtzWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRPVUlzU1VGQlNTeEpRVUZKTEVOQlFVTXNVMEZCVXl4TFFVRkxMRVZCUVVVN1dVRkRka0lzWVVGQllTeEhRVUZITEdGQlFXRXNSMEZCUnl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZGTjBRc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFhRVUZYTEVWQlFVVTdXVUZEZUVRc2RVSkJRWFZDTEVkQlFVY3NZVUZCWVR0WlFVTjJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVYzdXVUZEY2tJc1ZVRkJWU3hIUVVGSExFbEJRVWtzUTBGQlF5eFhRVUZYTzFsQlF6ZENMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ6dFpRVU01UWl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmM3V1VGRE9VSXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NSMEZCUnl4RFFVRkRPMUZCUlRORkxEWkVRVUUyUkR0UlFVTTNSQ3hOUVVGTkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXp0WlFVTnFReXh6UWtGQmMwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSWEpHTEVsQlFVa3NXVUZCV1N4TFFVRkxMR2RDUVVGblFqdFpRVU51UXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hKUVVGSkxFbEJRVWtzUjBGQlJ5eFpRVUZaTEVkQlFVY3NSMEZCUnl4RFFVRkRPMUZCUld4RUxFbEJRVWtzUTBGQlF5eGhRVUZoTEVsQlFVa3NSMEZCUnl4RFFVRkRPMGxCUXpWQ0xFTkJRVU03UTBGRFJqdEJRVVZOTEUxQlFVMHNWMEZCV1N4VFFVRlJMR0ZCUVdFN1EwRkJTVHM3TzBGRGVraEdPMEZCUjJoRUxEQkNRVUV3UWp0QlFVTXhRaXgzUlVGQmQwVTdRVUZEZUVVc2JVTkJRVzFETzBGQlF6VkNMRTFCUVUwc1lVRkJZeXhUUVVGUkxHRkJRV0U3U1VGRE9VTXNXVUZCV1N4SlFVRnRRaXhGUVVGRkxFbEJRVmtzUlVGQlJTeExRVUZsTzFGQlF6VkVMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUlhwQ0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNWMEZCVnl4RlFVRkZPMWxCUTNoRUxITkNRVUZ6UWl4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSk8xbEJRMnhETEZsQlFWa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1YwRkJWenRaUVVNdlFpeFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eEhRVUZITEVOQlFVTTdTVUZET1VVc1EwRkJRenREUVVOR08wRkJSVTBzVFVGQlRTeFhRVUZaTEZOQlFWRXNZVUZCWVR0RFFVRkpPenM3UVVOcVFtUTdRVUZIY0VNc1RVRkJUU3h2UWtGQlRTeEhRVUZITzBsQlEySXNTMEZCU3l4RlFVRkZMRU5CUVVNN1NVRkRVaXhSUVVGUkxFVkJRVVVzUTBGQlF6dEpRVU5ZTEZOQlFWTXNSVUZCUlN4RFFVRkRPMGxCUTFvc1VVRkJVU3hGUVVGRkxFTkJRVU03U1VGRFdDeFpRVUZaTEVWQlFVVXNRMEZCUXp0SlFVTm1MRWxCUVVrc1JVRkJSU3hEUVVGRE8wbEJRMUFzUzBGQlN5eEZRVUZGTEVOQlFVTTdTVUZEVWl4WFFVRlhMRVZCUVVVc1EwRkJRenRKUVVOa0xGTkJRVk1zUlVGQlJTeEZRVUZGTzBsQlEySXNWMEZCVnl4RlFVRkZMRVZCUVVVN1NVRkRaaXhyUWtGQmEwSXNSVUZCUlN4RlFVRkZPMGxCUTNSQ0xHZENRVUZuUWl4RlFVRkZMRVZCUVVVN1NVRkRjRUlzWVVGQllTeEZRVUZGTEVWQlFVVTdTVUZEYWtJc1ZVRkJWU3hGUVVGRkxFVkJRVVU3U1VGRFpDeFZRVUZWTEVWQlFVVXNSVUZCUlR0SlFVTmtMRkZCUVZFc1JVRkJSU3hGUVVGRk8wTkJRMG9zUTBGQlF6dEJRVVZZTEhGQ1FVRnhRanRCUVVOa0xFMUJRVTBzWVVGQll5eFRRVUZSTEZOQlFWTTdTVUZyUWpGRExGbEJRVmtzU1VGQmJVSXNSVUZCUlN4SlFVRlpMRVZCUVVVc1MwRkJaVHM3VVVGRE5VUXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdVVUZGZWtJc1NVRkJTU3hEUVVGRExFdEJRVXNzVTBGQlJ5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRPMUZCUTNaRExFbEJRVWtzUTBGQlF5eFJRVUZSTEZOQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRSUVVNM1F5eEpRVUZKTEVOQlFVTXNVMEZCVXl4VFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU03VVVGREwwTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1UwRkJSeXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETzFGQlF6ZERMRWxCUVVrc1EwRkJReXhaUVVGWkxGTkJRVWNzUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1dVRkJXU3hEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTnlSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeFRRVUZITEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNN1VVRkRja01zU1VGQlNTeERRVUZETEV0QlFVc3NVMEZCUnl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRE8xRkJRM1pETEVsQlFVa3NRMEZCUXl4WFFVRlhMRk5CUVVjc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU51UkN4SlFVRkpMRU5CUVVNc1UwRkJVeXhUUVVGSExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXh0UTBGQlNTeEZRVUZGTEVOQlFVTTdVVUZETDBNc1NVRkJTU3hEUVVGRExGZEJRVmNzVTBGQlJ5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRPMUZCUTI1RUxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1UwRkJSeXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4clFrRkJhMElzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNN1VVRkRha1VzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhUUVVGSExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRSUVVNM1JDeEpRVUZKTEVOQlFVTXNZVUZCWVN4VFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEdGQlFXRXNRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU03VVVGRGRrUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1UwRkJSeXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETzFGQlEycEVMRWxCUVVrc1EwRkJReXhWUVVGVkxGTkJRVWNzUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTnFSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeFRRVUZITEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNN1VVRkZOME1zU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8xbEJRMmhETEdkQ1FVRm5RaXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRkRVlzUTBGQlF6dERRVU5HTzBGQlJVMHNUVUZCVFN4WFFVRlpMRk5CUVZFc1lVRkJZVHREUVVGSk96czdRVU5zUlRCRE8wRkJRekZETzBGQlIyeEVMRTFCUVUwc2IwSkJRVTBzUjBGQlJ6dEpRVU5pTEVWQlFVVXNSVUZCUlN4RFFVRkRPMGxCUTB3c1NVRkJTU3hGUVVGRkxFTkJRVU03U1VGRFVDeFRRVUZUTEVWQlFVVXNRMEZCUXp0SlFVTmFMRmRCUVZjc1JVRkJSU3hEUVVGRE8wbEJRMlFzVVVGQlVTeEZRVUZGTEVOQlFVTTdTVUZEV0N4VlFVRlZMRVZCUVVVc1EwRkJRenRKUVVOaUxGRkJRVkVzUlVGQlJTeERRVUZETzBOQlEwZ3NRMEZCUXp0QlFVVllMRzlDUVVGdlFqdEJRVU5pTEUxQlFVMHNZVUZCWXl4VFFVRlJMRk5CUVZNN1NVRm5RakZETEZsQlFWa3NTVUZCYlVJc1JVRkJSU3hKUVVGWkxFVkJRVVVzUzBGQlpUczdVVUZETlVRc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRk1XQ3hoUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETzFGQlEyaENMR0ZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRGFFSXNZMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVzdlFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4bFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl3d1EwRkJSU3hYUVVGWExIRkRRVUZOTEVWQlFVVXNRMEZCUXp0UlFVTm9SQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeFRRVUZITEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNN1VVRkRja01zU1VGQlNTeERRVUZETEZsQlFWa3NaVUZCUnl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNNRU5CUVVVc1YwRkJWeXh4UTBGQlRTeEZRVUZGTEVOQlFVTTdVVUZEYWtVc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8xRkJRemRETEVsQlFVa3NRMEZCUXl4WFFVRlhMRk5CUVVjc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU51UkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hsUVVGSExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXd3UTBGQlJTeFhRVUZYTEhGRFFVRk5MRVZCUVVVc1EwRkJRenRSUVVNMVJDeEpRVUZKTEVOQlFVTXNWVUZCVlN4VFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU03VVVGRGFrUXNTVUZCU1N4RFFVRkRMRkZCUVZFc1UwRkJSeXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETzFGQlJUZERMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTTFRaXhIUVVGSExFVkJRVVVzVTBGQlV6dFpRVU5rTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTVHRaUVVObUxFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNVMEZCVXp0WlFVTnlRaXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEZOQlFWTTdVMEZEZUVJc1EwRkJReXhEUVVGRE8xRkJSVWdzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRk8xbEJRMnhETEVkQlFVY3NSVUZCUlN4VFFVRlRPMWxCUTJRc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFZRVUZWTzFsQlEzSkNMRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zVTBGQlV6dFpRVU55UWl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExGTkJRVk03VTBGRGVFSXNRMEZCUXl4RFFVRkRPMUZCUlVnc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU03VVVGRk1VVXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrN1dVRkRjRVFzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpPMWxCUTJZc1owSkJRV2RDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmRCUVZjN1dVRkRia01zVFVGQlRTeEhRVUZITEUxQlFVMHNSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkRlRUlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXVHRaUVVNNVJDeEhRVUZITEVkQlFVY3NlVUpCUVhsQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXp0WlFVTXhReXhuUWtGQlowSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1YwRkJWenRaUVVOdVF5eE5RVUZOTEVkQlFVY3NlVUpCUVhsQ0xFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRPMGxCUTNKRUxFTkJRVU03UTBGRFJqdEJRVVZOTEUxQlFVMHNWMEZCV1N4VFFVRlJMR0ZCUVdFN1EwRkJTVHM3TzBGRGRFVXdRenRCUVVjMVJpeE5RVUZOTEc5Q1FVRk5MRWRCUVVjN1NVRkRZaXhGUVVGRkxFVkJRVVVzUTBGQlF6dEpRVU5NTEVsQlFVa3NSVUZCUlN4RFFVRkRPMGxCUTFBc1MwRkJTeXhGUVVGRkxFTkJRVU03U1VGRFVpeE5RVUZOTEVWQlFVVXNRMEZCUXp0SlFVTlVMRk5CUVZNc1JVRkJSU3hEUVVGRE8wbEJRMW9zVjBGQlZ5eEZRVUZGTEVOQlFVTTdTVUZEWkN4UlFVRlJMRVZCUVVVc1EwRkJRenRKUVVOWUxGVkJRVlVzUlVGQlJTeERRVUZETzBsQlEySXNVVUZCVVN4RlFVRkZMRVZCUVVVN1NVRkRXaXhYUVVGWExFVkJRVVVzUlVGQlJUdEpRVU5tTEZGQlFWRXNSVUZCUlN4RlFVRkZPMGxCUTFvc1YwRkJWeXhGUVVGRkxFVkJRVVU3U1VGRFppeFBRVUZQTEVWQlFVVXNSVUZCUlR0SlFVTllMRTlCUVU4c1JVRkJSU3hGUVVGRk8wbEJRMWdzVDBGQlR5eEZRVUZGTEVWQlFVVTdTVUZEV0N4aFFVRmhMRVZCUVVVc1JVRkJSVHRKUVVOcVFpeFJRVUZSTEVWQlFVVXNSVUZCUlR0SlFVTmFMRmRCUVZjc1JVRkJSU3hGUVVGRk8wbEJRMllzVVVGQlVTeEZRVUZGTEVWQlFVVTdTVUZEV2l4WFFVRlhMRVZCUVVVc1JVRkJSVHRKUVVObUxFTkJRVU1zUlVGQlJTeEZRVUZGTzBsQlEwd3NRMEZCUXl4RlFVRkZMRVZCUVVVN1NVRkRUQ3hEUVVGRExFVkJRVVVzUlVGQlJUdEpRVU5NTEU5QlFVOHNSVUZCUlN4RlFVRkZPME5CUTBnc1EwRkJRenRCUVVWWUxHdERRVUZyUXp0QlFVTXpRaXhOUVVGTkxHRkJRV01zVTBGQlVTeFRRVUZUTzBsQk9FSXhReXhaUVVGWkxFbEJRVzFDTEVWQlFVVXNTVUZCV1N4RlFVRkZMRXRCUVdVN08xRkJRelZFTEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzFGQlRGZ3NZVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVOb1FpeGhRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTJoQ0xHTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZMTDBJc1NVRkJTU3hEUVVGRExFVkJRVVVzWlVGQlJ5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU1zTUVOQlFVVXNWMEZCVnl4eFEwRkJUU3hGUVVGRkxFTkJRVU03VVVGRGFFUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1UwRkJSeXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETzFGQlJYSkRMRWxCUVVrc1EwRkJReXhMUVVGTExGTkJRVWNzUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXp0UlFVVjJReXhOUVVGTkxGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4TFFVRkxMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZhRVFzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4NVFrRkJlVUlzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhOUVVGTkxFZEJRVWNzVjBGQlZ5eERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRMnhHTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1VVRkJVU3hoUVVGRExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXd3UTBGQlJTeFhRVUZYTEhGRFFVRk5MRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRM2hGTEVsQlFVa3NRMEZCUXl4WFFVRlhMRk5CUVVjc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU51UkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hsUVVGSExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXd3UTBGQlJTeFhRVUZYTEhGRFFVRk5MRVZCUVVVc1EwRkJRenRSUVVNMVJDeEpRVUZKTEVOQlFVTXNWVUZCVlN4VFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU03VVVGRmFrUXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhSUVVGUkxFOUJRVU1zUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1VVRkJVU3hIUVVGSExGZEJRVmNzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOeVJTeEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRkZCUVZFc1QwRkJReXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4WFFVRlhMRWRCUVVjc1YwRkJWeXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUXpORkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NVVUZCVVN4UFFVRkRMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEZGQlFWRXNSMEZCUnl4WFFVRlhMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEY2tVc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eFJRVUZSTEU5QlFVTXNTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zVjBGQlZ5eEhRVUZITEZkQlFWY3NRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU16UlN4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExGVkJRVlVzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzVjBGQlZ5eERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRM0pGTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1ZVRkJWU3hQUVVGRExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRTlCUVU4c1IwRkJSeXhYUVVGWExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRja1VzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4VlFVRlZMRTlCUVVNc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhMRmRCUVZjc1EwRkJReXh0UTBGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTnlSU3hKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEZWQlFWVXNUMEZCUXl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eGhRVUZoTEVkQlFVY3NWMEZCVnl4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlJXcEdMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzVVVGQlVTeFBRVUZETEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExGRkJRVkVzUjBGQlJ5eFhRVUZYTEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGREwwUXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhSUVVGUkxFOUJRVU1zUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1YwRkJWeXhIUVVGSExGZEJRVmNzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOeVJTeEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRkZCUVZFc1QwRkJReXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4UlFVRlJMRWRCUVVjc1YwRkJWeXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUXk5RUxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NVVUZCVVN4UFFVRkRMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEZkQlFWY3NSMEZCUnl4WFFVRlhMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEY2tVc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eFZRVUZWTEU5QlFVTXNTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEZkQlFWY3NRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU42UkN4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExGVkJRVlVzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhEUVVGRExFZEJRVWNzVjBGQlZ5eERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRM3BFTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1ZVRkJWU3hQUVVGRExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRU5CUVVNc1IwRkJSeXhYUVVGWExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRla1FzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4VlFVRlZMRTlCUVVNc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhMRmRCUVZjc1EwRkJReXh0UTBGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVZHlSU3hKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRVZCUVVVN1dVRkROVUlzUjBGQlJ5eEZRVUZGTEZOQlFWTTdXVUZEWkN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWs3V1VGRFppeExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRk5CUVZNN1dVRkRja0lzVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4VFFVRlRPMU5CUTNoQ0xFTkJRVU1zUTBGQlF6dFJRVVZJTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJUdFpRVU5zUXl4SFFVRkhMRVZCUVVVc1UwRkJVenRaUVVOa0xFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNWVUZCVlR0WlFVTnlRaXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEZOQlFWTTdXVUZEY2tJc1QwRkJUeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFRRVUZUTzFOQlEzaENMRU5CUVVNc1EwRkJRenRKUVVOTUxFTkJRVU03UTBGRFJqdEJRVVZOTEUxQlFVMHNWMEZCV1N4VFFVRlJMR0ZCUVdFN1EwRkJSenM3TzBGRGFFaEVPMEZCUjJoRUxIVkRRVUYxUXp0QlFVTjJReXh0UTBGQmJVTTdRVUZETlVJc1RVRkJUU3hoUVVGakxGTkJRVkVzWVVGQllUdEpRVU01UXl4WlFVRlpMRWxCUVcxQ0xFVkJRVVVzU1VGQldTeEZRVUZGTEV0QlFXVTdVVUZETlVRc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1NVRkRNMElzUTBGQlF6dERRVU5HTzBGQlJVMHNUVUZCVFN4WFFVRlpMRk5CUVZFc1lVRkJZVHREUVVGSE96czdRVU5ZTUVJN1FVRkhNMFVzVFVGQlRTeHZRa0ZCVFN4SFFVRkhPMGxCUTJJc1JVRkJSU3hGUVVGRkxFTkJRVU03U1VGRFRDeEpRVUZKTEVWQlFVVXNRMEZCUXp0SlFVTlFMRk5CUVZNc1JVRkJSU3hEUVVGRE8wbEJRMW9zVjBGQlZ5eEZRVUZGTEVOQlFVTTdTVUZEWkN4TlFVRk5MRVZCUVVVc1EwRkJRenREUVVORUxFTkJRVU03UVVGRldDeDFRa0ZCZFVJN1FVRkRhRUlzVFVGQlRTeGhRVUZqTEZOQlFWRXNVMEZCVXp0SlFWVXhReXhaUVVGWkxFbEJRVzFDTEVWQlFVVXNTVUZCV1N4RlFVRkZMRXRCUVdVN08xRkJRelZFTEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzFGQlNsZ3NZVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVOb1FpeGpRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCU3k5Q0xFbEJRVWtzUTBGQlF5eEZRVUZGTEdWQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zUlVGQlJTeERRVUZETERCRFFVRkZMRmRCUVZjc2NVTkJRVTBzUlVGQlJTeERRVUZETzFGQlEyaEVMRWxCUVVrc1EwRkJReXhKUVVGSkxGTkJRVWNzUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTnlReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEZGQlFWRXNZVUZCUXl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNNRU5CUVVVc1YwRkJWeXh4UTBGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTjRSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eFRRVUZITEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNN1VVRkRia1FzU1VGQlNTeERRVUZETEUxQlFVMHNVMEZCUnl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRE8wbEJRek5ETEVOQlFVTTdRMEZEUmp0QlFVVk5MRTFCUVUwc1YwRkJXU3hUUVVGUkxHRkJRV0U3UTBGQlJ6czdPMEZEYWtOUk8wRkJRMUE3UVVGSGJFUXNUVUZCVFN4dlFrRkJUU3hIUVVGSE8wbEJRMklzUlVGQlJTeEZRVUZGTEVOQlFVTTdTVUZEVEN4SlFVRkpMRVZCUVVVc1EwRkJRenRKUVVOUUxFbEJRVWtzUlVGQlJTeERRVUZETzBsQlExQXNVVUZCVVN4RlFVRkZMRU5CUVVNN1NVRkRXQ3hOUVVGTkxFVkJRVVVzUTBGQlF6dEpRVU5VTEZOQlFWTXNSVUZCUlN4RFFVRkRPMGxCUTFvc1MwRkJTeXhGUVVGRkxFTkJRVU03U1VGRFVpeFRRVUZUTEVWQlFVVXNRMEZCUXp0SlFVTmFMRXRCUVVzc1JVRkJSU3hGUVVGRk8wbEJRMVFzVTBGQlV5eEZRVUZGTEVWQlFVVTdTVUZEWWl4TFFVRkxMRVZCUVVVc1JVRkJSVHRKUVVOVUxFTkJRVU1zUlVGQlJTeEZRVUZGTzBsQlEwd3NRMEZCUXl4RlFVRkZMRVZCUVVVN1NVRkRUQ3hEUVVGRExFVkJRVVVzUlVGQlJUdEpRVU5NTEU5QlFVOHNSVUZCUlN4RlFVRkZPME5CUTBnc1EwRkJRenRCUVVWWUxHZENRVUZuUWp0QlFVTlVMRTFCUVUwc1lVRkJZeXhUUVVGUkxGTkJRVk03U1VGdlFqRkRMRmxCUVZrc1NVRkJiVUlzUlVGQlJTeEpRVUZaTEVWQlFVVXNTMEZCWlRzN1VVRkROVVFzUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGSVdDeGhRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCU3psQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEdWQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zUlVGQlJTeERRVUZETERCRFFVRkZMRmRCUVZjc2NVTkJRVTBzUlVGQlJTeERRVUZETzFGQlEyaEVMRWxCUVVrc1EwRkJReXhKUVVGSkxGTkJRVWNzUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXp0UlFVVnlReXhKUVVGSkxFTkJRVU1zU1VGQlNTeFRRVUZITEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNN1VVRkRja01zU1VGQlNTeERRVUZETEZGQlFWRXNaVUZCUnl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNNRU5CUVVVc1YwRkJWeXh4UTBGQlRTeEZRVUZGTEVOQlFVTTdVVUZETlVRc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eFJRVUZSTEU5QlFVTXNTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEcxRFFVRkpMRVZCUVVVc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVVYyUkN4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExGRkJRVkVzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRiRVFzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4UlFVRlJMRTlCUVVNc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEycEVMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzVVVGQlVTeFBRVUZETEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOc1JDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRkZCUVZFc1QwRkJReXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEYWtRc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eFJRVUZSTEU5QlFVTXNTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRMnhFTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1VVRkJVU3hQUVVGRExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXh0UTBGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTnFSQ3hKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEZWQlFWVXNUMEZCUXl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE0wTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhWUVVGVkxFOUJRVU1zUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUXpORExFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NWVUZCVlN4UFFVRkRMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU16UXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExGVkJRVlVzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkZka1FzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRelZDTEVkQlFVY3NSVUZCUlN4VFFVRlRPMWxCUTJRc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTzFsQlEyWXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhUUVVGVE8xbEJRM0pDTEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVenRUUVVONFFpeERRVUZETEVOQlFVTTdVVUZGU0N4SlFVRkpMRlZCUVZVc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRGNFSXNUVUZCVFN4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVVV4UkN4SlFVRkpMRWxCUVVrc1EwRkJReXhSUVVGUkxFbEJRVWtzWVVGQllTeERRVUZETEd0Q1FVRnJRanRaUVVOdVJDeFZRVUZWTEZOQlFVY3NZVUZCWVN4RFFVRkRMR3RDUVVGclFpeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETzFGQlJYSkZMRWxCUVVrc1ZVRkJWU3hIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU53UWl4SlFVRkpMRlZCUVZVN1dVRkRXaXhWUVVGVkxFZEJRVWNzVlVGQlZTeEhRVUZITEVkQlFVY3NRMEZCUXp0UlFVVm9ReXhKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVazdXVUZEZWtRc1YwRkJWeXhIUVVGSExGbEJRVms3V1VGRE1VSXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVkQlFVY3NWVUZCVlN4RFFVRkRPMUZCUldoRUxFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSk8xbEJRMjVGTEZkQlFWY3NSMEZCUnl4NVFrRkJlVUlzUTBGQlF5eFpRVUZaTEVOQlFVTTdXVUZEY2tRc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWRCUVVjc1ZVRkJWU3hEUVVGRE8wbEJRMnhFTEVOQlFVTTdPMEZCUlUwc1owTkJRV3RDTEVkQlFXMURPMGxCUXpGRUxFdEJRVXNzUlVGQlJTeGhRVUZoTzBsQlEzQkNMRXRCUVVzc1JVRkJSU3hWUVVGVk8wbEJRMnBDTEV0QlFVc3NSVUZCUlN4UFFVRlBPMGxCUTJRc1MwRkJTeXhGUVVGRkxHTkJRV003U1VGRGNrSXNTMEZCU3l4RlFVRkZMR05CUVdNN1NVRkRja0lzUzBGQlN5eEZRVUZGTEZGQlFWRTdTVUZEWml4TFFVRkxMRVZCUVVVc1VVRkJVVHRKUVVObUxFdEJRVXNzUlVGQlJTeGhRVUZoTzBsQlEzQkNMRXRCUVVzc1JVRkJSU3hYUVVGWE8wbEJRMnhDTEV0QlFVc3NSVUZCUlN4bFFVRmxPME5CUTNaQ0xFTkJRVU03UVVGSFJ5eE5RVUZOTEZkQlFWa3NVMEZCVVN4aFFVRmhPME5CUVVrN096dEJRM2hIWkR0QlFVTmpPMEZCUjJ4RUxFMUJRVTBzYjBKQlFVMHNSMEZCUnp0SlFVTmlMRVZCUVVVc1JVRkJSU3hEUVVGRE8wbEJRMHdzU1VGQlNTeEZRVUZGTEVOQlFVTTdTVUZEVUN4UlFVRlJMRVZCUVVVc1EwRkJRenRKUVVOWUxGVkJRVlVzUlVGQlJTeERRVUZETzBOQlEwd3NRMEZCUXp0QlFVVllMREpDUVVFeVFqdEJRVU53UWl4TlFVRk5MR0ZCUVdNc1UwRkJVU3hUUVVGVE8wbEJUekZETEZsQlFWa3NTVUZCYlVJc1JVRkJSU3hKUVVGWkxFVkJRVVVzUzBGQlpUczdVVUZETlVRc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkZla0lzU1VGQlNTeERRVUZETEVWQlFVVXNaVUZCUnl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eEZRVUZGTEVOQlFVTXNNRU5CUVVVc1YwRkJWeXh4UTBGQlRTeEZRVUZGTEVOQlFVTTdVVUZEYUVRc1NVRkJTU3hEUVVGRExFbEJRVWtzVTBGQlJ5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRPMUZCUTNKRExFbEJRVWtzUTBGQlF5eFJRVUZSTEdWQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETERCRFFVRkZMRmRCUVZjc2NVTkJRVTBzUlVGQlJTeERRVUZETzFGQlF6VkVMRWxCUVVrc1EwRkJReXhWUVVGVkxGTkJRVWNzUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXp0UlFVVnFSQ3hKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRVZCUVVVN1dVRkROVUlzUjBGQlJ5eEZRVUZGTEZOQlFWTTdXVUZEWkN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWs3V1VGRFppeExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRk5CUVZNN1dVRkRja0lzVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4VFFVRlRPMU5CUTNoQ0xFTkJRVU1zUTBGQlF6dFJRVVZJTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJUdFpRVU5zUXl4SFFVRkhMRVZCUVVVc1UwRkJVenRaUVVOa0xFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNWVUZCVlR0WlFVTnlRaXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEZOQlFWTTdXVUZEY2tJc1QwRkJUeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFRRVUZUTzFOQlEzaENMRU5CUVVNc1EwRkJRenRSUVVWSUxFbEJRVWtzV1VGQldTeEhRVUYxUWl4VFFVRlRMRU5CUVVNN1VVRkRha1FzU1VGQlNTeHJRa0ZCYTBJc1IwRkJkVUlzVTBGQlV5eERRVUZETzFGQlJYWkVMRWxCUVVrc1NVRkJTU3hEUVVGRExFVkJRVVVzUzBGQlN5eEpRVUZKTzFsQlEyeENMRmxCUVZrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlJYUkVMRWxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUzBGQlN5eEpRVUZKTzFsQlEzaENMR3RDUVVGclFpeEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkZlRVVzVFVGQlRTeFpRVUZaTEVkQlFVY3NRMEZCUXl4WlFVRlpMR0ZCUVZvc1dVRkJXU3hqUVVGYUxGbEJRVmtzUjBGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRha1FzVFVGQlRTeFZRVUZWTEVkQlFVY3NRMEZCUXl4clFrRkJhMElzWVVGQmJFSXNhMEpCUVd0Q0xHTkJRV3hDTEd0Q1FVRnJRaXhIUVVGSkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTXpSQ3hKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhaUVVGWk8xbEJReTlETEcxQ1FVRnRRaXhIUVVGSExGVkJRVlVzUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZEZWtNc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eDVRa0ZCZVVJc1EwRkJReXhaUVVGWkxFTkJRVU03V1VGRGNFWXNiVUpCUVcxQ0xFZEJRVWNzZVVKQlFYbENMRU5CUVVNc1ZVRkJWU3hEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETzBsQlEzUkZMRU5CUVVNN1EwRkRSanRCUVVWTkxFMUJRVTBzVjBGQldTeFRRVUZSTEdGQlFXRTdRMEZCU1RzN08wRkRNMFJSTzBGQlExSTdRVUZIYkVRc1RVRkJUU3h2UWtGQlRTeEhRVUZITzBsQlEySXNVMEZCVXl4RlFVRkZMRU5CUVVNN1NVRkRXaXhYUVVGWExFVkJRVVVzUTBGQlF6dEpRVU5rTEdOQlFXTXNSVUZCUlN4RFFVRkRPMGxCUTJwQ0xFVkJRVVVzUlVGQlJTeERRVUZETzBsQlEwd3NTVUZCU1N4RlFVRkZMRU5CUVVNN1NVRkRVQ3hSUVVGUkxFVkJRVVVzUTBGQlF6dEpRVU5ZTEZWQlFWVXNSVUZCUlN4RFFVRkRPMGxCUTJJc1RVRkJUU3hGUVVGRkxFTkJRVU03U1VGRFZDeFJRVUZSTEVWQlFVVXNSVUZCUlR0SlFVTmFMRkZCUVZFc1JVRkJSU3hGUVVGRk8wTkJRMG9zUTBGQlF6dEJRVVZZTERKQ1FVRXlRanRCUVVNelFpeHhSVUZCY1VVN1FVRkRja1VzTWtOQlFUSkRPMEZCUTNCRExFMUJRVTBzWVVGQll5eFRRVUZSTEZOQlFWTTdTVUZ0UWpGRExGbEJRVmtzU1VGQmJVSXNSVUZCUlN4SlFVRlpMRVZCUVVVc1MwRkJaVHM3VVVGRE5VUXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdVVUZJV0N4alFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJTeTlDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1VVRkJVU3hoUVVGRExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXd3UTBGQlJTeFhRVUZYTEhGRFFVRk5MRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRM2hGTEVsQlFVa3NRMEZCUXl4WFFVRlhMRk5CUVVjc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU51UkN4SlFVRkpMRU5CUVVNc1kwRkJZeXhUUVVGSExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXh0UTBGQlNTeEZRVUZGTEVOQlFVTTdVVUZEZWtRc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8xRkJRM0pFTEVsQlFVa3NRMEZCUXl4RlFVRkZMR1ZCUVVjc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkRMREJEUVVGRkxGZEJRVmNzY1VOQlFVMHNSVUZCUlN4RFFVRkRPMUZCUTJoRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEZOQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRSUVVOeVF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4bFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl3d1EwRkJSU3hYUVVGWExIRkRRVUZOTEVWQlFVVXNRMEZCUXp0UlFVTTFSQ3hKUVVGSkxFTkJRVU1zVlVGQlZTeFRRVUZITEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNN1VVRkRha1FzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4UlFVRlJMRTlCUVVNc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRzFEUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEzQkVMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVVVGQlVTeFBRVUZETEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOMlJDeEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRkZCUVZFc1QwRkJReXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZGYWtRc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RlFVRkZPMWxCUXpWQ0xFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1R0WlFVTm1MRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zVTBGQlV6dFpRVU55UWl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExGTkJRVk03V1VGRGRrSXNSMEZCUnl4RlFVRkZMRk5CUVZNN1UwRkRaaXhEUVVGRExFTkJRVU03VVVGRlNDeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVU3V1VGRGJFTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhWUVVGVk8xbEJRM0pDTEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVenRaUVVOeVFpeFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRk5CUVZNN1dVRkRka0lzUjBGQlJ5eEZRVUZGTEZOQlFWTTdVMEZEWml4RFFVRkRMRU5CUVVNN1VVRkZTQ3hKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRla1FzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhIUVVGSExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdVVUZGTTBVc1NVRkJTU3hEUVVGRExEQkNRVUV3UWp0WlFVTTNRaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFJRVVYyUlN4SlFVRkpMR05CUVdNc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRGVFSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRVZCUVVVN1dVRkRja01zWVVGQllTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRPMWxCUTNoRUxHTkJRV01zUjBGQlJ5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFVkJRVVVzUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZGZGtRc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkU3V1VGRGFFUXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhWUVVGVk8xbEJRM0pDTEhWQ1FVRjFRaXhIUVVGSExFbEJRVWtzUTBGQlF5eFhRVUZYTzFsQlF6RkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zTUVKQlFUQkNPMWxCUXpGRExFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRmRCUVZjc1IwRkJSeXhqUVVGakxFTkJRVU03VVVGRkwwUXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVUdFpRVU14UkN4SFFVRkhMRWRCUVVjc2VVSkJRWGxDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRenRaUVVOb1JDeDFRa0ZCZFVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ6dFpRVU14UXl4UlFVRlJMRWRCUVVjc2VVSkJRWGxDTEVOQlFVTXNTVUZCU1N4RFFVRkRMREJDUVVFd1FpeERRVUZETzFsQlEzSkZMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEZkQlFWY3NSMEZCUnl4alFVRmpMRU5CUVVNN1NVRkRha1VzUTBGQlF6czdRVUZGVFN3clFrRkJhVUlzUjBGQmMwSTdTVUZETlVNc1IwRkJSenRKUVVOSUxFZEJRVWM3U1VGRFNDeEhRVUZITzBsQlEwZ3NSMEZCUnp0SlFVTklMRWRCUVVjN1NVRkRTQ3hKUVVGSk8wbEJRMG9zU1VGQlNUdERRVU5KTEVOQlFVTTdRVUZIVGl4TlFVRk5MRmRCUVZrc1UwRkJVU3hoUVVGaE8wTkJRVWM3T3p0QlEzWkhVVHRCUVVkNlJDeE5RVUZOTEc5Q1FVRk5MRWRCUVVjN1NVRkRZaXhSUVVGUkxFVkJRVVVzUTBGQlF6dEpRVU5ZTEZWQlFWVXNSVUZCUlN4RFFVRkRPMGxCUTJJc1dVRkJXU3hGUVVGRkxFTkJRVU03UTBGRFVDeERRVUZETzBGQlJWZ3NiMEpCUVc5Q08wRkJRMklzVFVGQlRTeGhRVUZqTEZOQlFWRXNVMEZCVXp0SlFVMHhReXhaUVVGWkxFbEJRVzFDTEVWQlFVVXNTVUZCV1N4RlFVRkZMRXRCUVdVN08xRkJRelZFTEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzFGQlNGZ3NZVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVzNVFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4bFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl3d1EwRkJSU3hYUVVGWExIRkRRVUZOTEVWQlFVVXNRMEZCUXp0UlFVTjBSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeFRRVUZITEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNN1VVRkRNME1zU1VGQlNTeERRVUZETEZsQlFWa3NVMEZCUnl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRE8wbEJRM1pFTEVOQlFVTTdRMEZEUmp0QlFVVk5MRTFCUVUwc1YwRkJXU3hUUVVGUkxHRkJRV0U3UTBGQlJ6czdPMEZEZWtKaU8wRkJSM0JETEUxQlFVMHNiMEpCUVUwc1IwRkJSenRKUVVOaUxGTkJRVk1zUlVGQlJTeERRVUZETzBsQlExb3NUMEZCVHl4RlFVRkZMRU5CUVVNN1NVRkRWaXhGUVVGRkxFVkJRVVVzUTBGQlF6dEpRVU5NTEVsQlFVa3NSVUZCUlN4RFFVRkRPMGxCUTFBc1EwRkJReXhGUVVGRkxFTkJRVU03U1VGRFNpeERRVUZETEVWQlFVVXNRMEZCUXp0SlFVTktMRU5CUVVNc1JVRkJSU3hEUVVGRE8wTkJRMGtzUTBGQlF6dEJRVVZZTEhkQ1FVRjNRanRCUVVOcVFpeE5RVUZOTEdGQlFXTXNVMEZCVVN4VFFVRlRPMGxCVXpGRExGbEJRVmtzU1VGQmJVSXNSVUZCUlN4SlFVRlpMRVZCUVVVc1MwRkJaVHM3VVVGRE5VUXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdVVUZGZWtJc1NVRkJTU3hEUVVGRExGTkJRVk1zVTBGQlJ5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRPMUZCUXk5RExFbEJRVWtzUTBGQlF5eFBRVUZQTEZOQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRSUVVNelF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4bFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl3d1EwRkJSU3hYUVVGWExIRkRRVUZOTEVWQlFVVXNRMEZCUXp0UlFVTm9SQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeFRRVUZITEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNN1VVRkRja01zU1VGQlNTeERRVUZETEVOQlFVTXNVMEZCUnl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRE8xRkJReTlDTEVsQlFVa3NRMEZCUXl4RFFVRkRMRk5CUVVjc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU12UWl4SlFVRkpMRU5CUVVNc1EwRkJReXhUUVVGSExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXh0UTBGQlNTeEZRVUZGTEVOQlFVTTdTVUZEYWtNc1EwRkJRenREUVVOR08wRkJSVTBzVFVGQlRTeFhRVUZaTEZOQlFWRXNZVUZCWVR0RFFVRkhPenM3UVVOd1EySTdRVUZIY0VNc1RVRkJUU3h2UWtGQlRTeEhRVUZITzBsQlEySXNVMEZCVXl4RlFVRkZMRU5CUVVNN1NVRkRXaXhQUVVGUExFVkJRVVVzUTBGQlF6dEpRVU5XTEVWQlFVVXNSVUZCUlN4RFFVRkRPMGxCUTB3c1NVRkJTU3hGUVVGRkxFTkJRVU03U1VGRFVDeFJRVUZSTEVWQlFVVXNRMEZCUXp0SlFVTllMRlZCUVZVc1JVRkJSU3hEUVVGRE8wTkJRMHdzUTBGQlF6dEJRVVZZTEZsQlFWazdRVUZEVEN4TlFVRk5MR0ZCUVdNc1UwRkJVU3hUUVVGVE8wbEJVVEZETEZsQlFWa3NTVUZCYlVJc1JVRkJSU3hKUVVGWkxFVkJRVVVzUzBGQlpUczdVVUZETlVRc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkZla0lzU1VGQlNTeERRVUZETEZOQlFWTXNVMEZCUnl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRE8xRkJReTlETEVsQlFVa3NRMEZCUXl4UFFVRlBMRk5CUVVjc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU16UXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hsUVVGSExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRVZCUVVVc1EwRkJReXd3UTBGQlJTeFhRVUZYTEhGRFFVRk5MRVZCUVVVc1EwRkJRenRSUVVOb1JDeEpRVUZKTEVOQlFVTXNTVUZCU1N4VFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU03VVVGRGNrTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1pVRkJSeXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc01FTkJRVVVzVjBGQlZ5eHhRMEZCVFN4RlFVRkZMRU5CUVVNN1VVRkROVVFzU1VGQlNTeERRVUZETEZWQlFWVXNVMEZCUnl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRE8wbEJRMjVFTEVOQlFVTTdRMEZEUmp0QlFVVk5MRTFCUVUwc1YwRkJXU3hUUVVGUkxHRkJRV0U3UTBGQlJ6czdPMEZEYWtORU8wRkJRMFU3UVVGSGJFUXNNa0pCUVRKQ08wRkJRek5DTEhORlFVRnpSVHRCUVVOMFJTeHRRMEZCYlVNN1FVRkROVUlzVFVGQlRTeGhRVUZqTEZOQlFWRXNZVUZCWVR0SlFVYzVReXhaUVVGWkxFbEJRVzFDTEVWQlFVVXNTVUZCV1N4RlFVRkZMRXRCUVdVN1VVRkROVVFzUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGRmVrSXNTVUZCU1N4alFVRmpMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRM2hDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4RlFVRkZPMWxCUTNKRExIZERRVUYzUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU03V1VGRGVFUXNZMEZCWXl4SFFVRkhMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNSVUZCUlN4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVVWMlJDeEpRVUZKTEVOQlFVTXNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVR0WlFVTm9SQ3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVTdXVUZEY2tJc2RVSkJRWFZDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmRCUVZjN1dVRkRNVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl3d1FrRkJNRUk3V1VGRE1VTXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzVjBGQlZ5eEhRVUZITEdOQlFXTXNRMEZCUXp0UlFVVXZSQ3hKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJPMWxCUXpGRUxFZEJRVWNzUjBGQlJ5eDVRa0ZCZVVJc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETzFsQlEyaEVMSFZDUVVGMVFpeEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhPMWxCUXpGRExGRkJRVkVzUjBGQlJ5eDVRa0ZCZVVJc1EwRkJReXhKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRU5CUVVNN1dVRkRja1VzVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1YwRkJWeXhIUVVGSExHTkJRV01zUTBGQlF6dEpRVU5xUlN4RFFVRkRPME5CUTBZN1FVRkZUU3hOUVVGTkxGZEJRVmtzVTBGQlVTeGhRVUZoTzBOQlFVazdPenRCUTJoRFpEdEJRVU5qTzBGQlIyeEVMRTFCUVUwc1UwRkJVeXhIUVVGSExFTkJRVU1zUTBGQlV5eEZRVUZGTEVWQlFVVXNRMEZCUXp0SlFVTXZRaXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRaQ3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRaQ3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRaQ3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1EwRkRaaXhEUVVGRE8wRkJSVVlzVFVGQlRTeHZRa0ZCVFN4SFFVRkhPMGxCUTJJc1JVRkJSU3hGUVVGRkxFTkJRVU03U1VGRFRDeFZRVUZWTEVWQlFVVXNRMEZCUXp0SlFVTmlMRlZCUVZVc1JVRkJSU3hEUVVGRE8wbEJRMklzVlVGQlZTeEZRVUZGTEVOQlFVTTdTVUZEWWl4VlFVRlZMRVZCUVVVc1EwRkJRenREUVVOTUxFTkJRVU03UVVGRldDeHJRa0ZCYTBJN1FVRkRXQ3hOUVVGTkxHRkJRV01zVTBGQlVTeFRRVUZUTzBsQlZ6RkRMRmxCUVZrc1NVRkJiVUlzUlVGQlJTeEpRVUZaTEVWQlFVVXNTMEZCWlRzN1VVRkROVVFzUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGRmVrSXNTVUZCU1N4RFFVRkRMRVZCUVVVc1pVRkJSeXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4RlFVRkZMRU5CUVVNc01FTkJRVVVzVjBGQlZ5eHhRMEZCVFN4RlFVRkZMRU5CUVVNN1VVRkRhRVFzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4elFrRkJjMElzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRla1VzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4elFrRkJjMElzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRla1VzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4elFrRkJjMElzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRla1VzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4elFrRkJjMElzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkZla1VzU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnp0WlFVTnVRaXhIUVVGSExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRPMWxCUXpkQ0xFZEJRVWNzVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNN1dVRkROMElzUjBGQlJ5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRenRaUVVNM1FpeEhRVUZITEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRE8xTkJRemxDTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExGZEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXd3UTBGQlJTeEpRVUZKTEV0QlFVa3NSVUZCUlN4RFFVRkRPMUZCUldwRUxFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1JVRkJSVHRaUVVNMVFpeEpRVUZKTEZGQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETERCRFFVRkZMRWxCUVVrN1dVRkRjRU1zUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4VFFVRlRPMWxCUTNKQ0xFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTXNVMEZCVXp0WlFVTjJRaXhIUVVGSExGRkJRVVVzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRMRU5CUVVNc01FTkJRVVVzVjBGQlZ5eEZRVUZGTzFOQlF6RkRMRU5CUVVNc1EwRkJRenRSUVVWSUxFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSVHRaUVVOb1F5eEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNUdFpRVU42UWl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlU3V1VGRGNrSXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhWUVVGVk8xbEJRM0pDTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1ZVRkJWVHRaUVVOeVFpeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRenRSUVVONFFpeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlR0WlFVTXhReXhKUVVGSkxFTkJRVU1zUlVGQlJTeEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMSGxDUVVGNVFpeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVOMFJDeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVN1dVRkRja0lzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZPMWxCUTNKQ0xFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlR0WlFVTnlRaXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXp0SlFVTXhRaXhEUVVGRE8wTkJRMFk3UVVGRlRTeE5RVUZOTEZkQlFWa3NVMEZCVVN4aFFVRmhPME5CUVVjN096dEJRM1pGVVR0QlFVZDZSQ3hOUVVGTkxHOUNRVUZOTEVkQlFVYzdTVUZEWWl4RlFVRkZMRVZCUVVVc1EwRkJRenRKUVVOTUxFbEJRVWtzUlVGQlJTeERRVUZETzBsQlExQXNVVUZCVVN4RlFVRkZMRU5CUVVNN1NVRkRXQ3hWUVVGVkxFVkJRVVVzUTBGQlF6dEpRVU5pTEZWQlFWVXNSVUZCUlN4RFFVRkRPME5CUTB3c1EwRkJRenRCUVVWWUxHMUNRVUZ0UWp0QlFVTmFMRTFCUVUwc1lVRkJZeXhUUVVGUkxGTkJRVk03U1VGUk1VTXNXVUZCV1N4SlFVRnRRaXhGUVVGRkxFbEJRVmtzUlVGQlJTeExRVUZsT3p0UlFVTTFSQ3hMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVoWUxHRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZMT1VJc1NVRkJTU3hEUVVGRExFVkJRVVVzWlVGQlJ5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU1zTUVOQlFVVXNWMEZCVnl4eFEwRkJUU3hGUVVGRkxFTkJRVU03VVVGRGFFUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1UwRkJSeXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETzFGQlEzSkRMRWxCUVVrc1EwRkJReXhSUVVGUkxHVkJRVWNzUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExEQkRRVUZGTEZkQlFWY3NjVU5CUVUwc1JVRkJSU3hEUVVGRE8xRkJRelZFTEVsQlFVa3NRMEZCUXl4VlFVRlZMRk5CUVVjc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU5xUkN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFTkJRVU1zUTBGQlF5eFJRVUZSTEU5QlFVTXNTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEcxRFFVRkpMRVZCUVVVc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEpRVU51UlN4RFFVRkRPME5CUTBZN1FVRkZUU3hOUVVGTkxGZEJRVmtzVTBGQlVTeGhRVUZoTzBOQlFVYzdPenRCUXk5Q1lqdEJRVWR3UXl4TlFVRk5MRzlDUVVGTkxFZEJRVWM3U1VGRFlpeEZRVUZGTEVWQlFVVXNRMEZCUXp0SlFVTk1MRWxCUVVrc1JVRkJSU3hEUVVGRE8wbEJRMUFzVVVGQlVTeEZRVUZGTEVOQlFVTTdTVUZEV0N4VlFVRlZMRVZCUVVVc1EwRkJRenRKUVVOaUxGRkJRVkVzUlVGQlJTeERRVUZETzBOQlEwZ3NRMEZCUXp0QlFVVllMR1ZCUVdVN1FVRkRVaXhOUVVGTkxHRkJRV01zVTBGQlVTeFRRVUZUTzBsQlR6RkRMRmxCUVZrc1NVRkJiVUlzUlVGQlJTeEpRVUZaTEVWQlFVVXNTMEZCWlRzN1VVRkROVVFzUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGRmVrSXNTVUZCU1N4RFFVRkRMRVZCUVVVc1pVRkJSeXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4RlFVRkZMRU5CUVVNc01FTkJRVVVzVjBGQlZ5eHhRMEZCVFN4RlFVRkZMRU5CUVVNN1VVRkRhRVFzU1VGQlNTeERRVUZETEVsQlFVa3NVMEZCUnl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRE8xRkJRM0pETEVsQlFVa3NRMEZCUXl4UlFVRlJMR1ZCUVVjc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMREJEUVVGRkxGZEJRVmNzY1VOQlFVMHNSVUZCUlN4RFFVRkRPMUZCUXpWRUxFbEJRVWtzUTBGQlF5eFZRVUZWTEZOQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRSUVVOcVJDeEpRVUZKTEVOQlFVTXNVVUZCVVN4VFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU03U1VGREwwTXNRMEZCUXp0RFFVTkdPMEZCUlUwc1RVRkJUU3hYUVVGWkxGTkJRVkVzWVVGQllUdERRVUZIT3pzN1FVTTVRbUk3UVVGSGNFTXNUVUZCVFN4dlFrRkJUU3hIUVVGSE8wbEJRMklzVVVGQlVTeEZRVUZGTEVOQlFVTTdTVUZEV0N4SlFVRkpMRVZCUVVVc1EwRkJRenREUVVORExFTkJRVU03UVVGRldDeHZRa0ZCYjBJN1FVRkRZaXhOUVVGTkxHRkJRV01zVTBGQlVTeFRRVUZUTzBsQlN6RkRMRmxCUVZrc1NVRkJiVUlzUlVGQlJTeEpRVUZaTEVWQlFVVXNTMEZCWlRzN1VVRkROVVFzUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGRmVrSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1UwRkJSeXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETzFGQlF6ZERMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE5VTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1UwRkJSeXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETzFGQlJYSkRMRWxCUVVrc1EwRkJReXhoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzBsQlEzWkZMRU5CUVVNN1EwRkRSanRCUVVWTkxFMUJRVTBzVjBGQldTeFRRVUZSTEdGQlFXRTdRMEZCUnpzN08wRkRla0pSTzBGQlIzcEVMRTFCUVUwc2IwSkJRVTBzUjBGQlJ6dEpRVU5pTEVWQlFVVXNSVUZCUlN4RFFVRkRPMGxCUTB3c1NVRkJTU3hGUVVGRkxFTkJRVU03U1VGRFVDeFZRVUZWTEVWQlFVVXNRMEZCUXp0SlFVTmlMRk5CUVZNc1JVRkJSU3hEUVVGRE8wbEJRMW9zUzBGQlN5eEZRVUZGTEVOQlFVTTdTVUZEVWl4VFFVRlRMRVZCUVVVc1EwRkJRenRKUVVOYUxFdEJRVXNzUlVGQlJTeERRVUZETzBsQlExSXNVMEZCVXl4RlFVRkZMRU5CUVVNN1NVRkRXaXhMUVVGTExFVkJRVVVzUlVGQlJUdEpRVU5VTEVOQlFVTXNSVUZCUlN4RlFVRkZPMGxCUTB3c1EwRkJReXhGUVVGRkxFVkJRVVU3U1VGRFRDeERRVUZETEVWQlFVVXNSVUZCUlR0SlFVTk1MRTlCUVU4c1JVRkJSU3hGUVVGRk8wTkJRMGdzUTBGQlF6dEJRVVZZTEc5Q1FVRnZRanRCUVVOaUxFMUJRVTBzWVVGQll5eFRRVUZSTEZOQlFWTTdTVUZuUWpGRExGbEJRVmtzU1VGQmJVSXNSVUZCUlN4SlFVRlpMRVZCUVVVc1MwRkJaVHM3VVVGRE5VUXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdVVUZJV0N4aFFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJTemxDTEVsQlFVa3NRMEZCUXl4RlFVRkZMR1ZCUVVjc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkRMREJEUVVGRkxGZEJRVmNzY1VOQlFVMHNSVUZCUlN4RFFVRkRPMUZCUTJoRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEZOQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRSUVVOeVF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4VFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU03VVVGRGFrUXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhSUVVGUkxFOUJRVU1zUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTJ4RUxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NVVUZCVVN4UFFVRkRMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU5xUkN4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExGRkJRVkVzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRiRVFzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4UlFVRlJMRTlCUVVNc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEycEVMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzVVVGQlVTeFBRVUZETEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOc1JDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRkZCUVZFc1QwRkJReXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEYWtRc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eFZRVUZWTEU5QlFVTXNTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRek5ETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1ZVRkJWU3hQUVVGRExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXh0UTBGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTXpReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEZWQlFWVXNUMEZCUXl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE0wTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhWUVVGVkxFOUJRVU1zUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUTNwRUxFTkJRVU03UTBGRFJqdEJRVVZOTEUxQlFVMHNWMEZCV1N4VFFVRlJMR0ZCUVdFN1EwRkJSenM3TzBGRGRrUXlRanRCUVVNeFFqdEJRVU5FTzBGQlNXcEVMRTFCUVUwc2IwSkJRVTBzUjBGQlJ6dEpRVU5pTEVWQlFVVXNSVUZCUlN4RFFVRkRPMGxCUTB3c1NVRkJTU3hGUVVGRkxFTkJRVU03U1VGRFVDeFpRVUZaTEVWQlFVVXNRMEZCUXp0SlFVTm1MRk5CUVZNc1JVRkJSU3hEUVVGRE8wbEJRMW9zUzBGQlN5eEZRVUZGTEVOQlFVTTdTVUZEVWl4VFFVRlRMRVZCUVVVc1EwRkJRenRKUVVOYUxFdEJRVXNzUlVGQlJTeERRVUZETzBsQlExSXNVMEZCVXl4RlFVRkZMRU5CUVVNN1NVRkRXaXhMUVVGTExFVkJRVVVzUlVGQlJUdEpRVU5VTEVOQlFVTXNSVUZCUlN4RlFVRkZPMGxCUTB3c1EwRkJReXhGUVVGRkxFVkJRVVU3U1VGRFRDeERRVUZETEVWQlFVVXNSVUZCUlR0SlFVTk1MRTlCUVU4c1JVRkJSU3hGUVVGRk8wTkJRMGdzUTBGQlF6dEJRVVZZTERoQ1FVRTRRanRCUVVOMlFpeE5RVUZOTEdGQlFXTXNVMEZCVVN4VFFVRlRPMGxCY1VJeFF5eFpRVUZaTEVsQlFXMUNMRVZCUVVVc1NVRkJXU3hGUVVGRkxFdEJRV1U3TzFGQlF6VkVMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCU2xnc1lVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF6dFJRVU5vUWl4bFFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJTMmhETEVsQlFVa3NRMEZCUXl4RlFVRkZMR1ZCUVVjc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkRMREJEUVVGRkxGZEJRVmNzY1VOQlFVMHNSVUZCUlN4RFFVRkRPMUZCUTJoRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEZOQlFVY3NTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRSUVVWeVF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4VFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU03VVVGRmNrUXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhSUVVGUkxFOUJRVU1zUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTJ4RUxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NVVUZCVVN4UFFVRkRMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU5xUkN4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExGRkJRVkVzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRiRVFzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4UlFVRlJMRTlCUVVNc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEycEVMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzVVVGQlVTeFBRVUZETEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOc1JDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRkZCUVZFc1QwRkJReXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEYWtRc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eFZRVUZWTEU5QlFVTXNTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRek5ETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1ZVRkJWU3hQUVVGRExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXh0UTBGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTXpReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEZWQlFWVXNUMEZCUXl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE0wTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhWUVVGVkxFOUJRVU1zUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUlhaRUxFMUJRVTBzVFVGQlRTeEhRVUZITEhOQ1FVRnpRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZOVVFzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRenRSUVVOc1JDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTNwRExFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUlhwRExFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRMnBFTEVOQlFVTTdRMEZEUmp0QlFVVk5MRTFCUVUwc1YwRkJXU3hUUVVGUkxHRkJRV0U3UTBGQlJ6czdPMEZEZWtWUk8wRkJSM3BFTEUxQlFVMHNiMEpCUVUwc1IwRkJSenRKUVVOaUxFVkJRVVVzUlVGQlJTeERRVUZETzBsQlEwd3NTVUZCU1N4RlFVRkZMRU5CUVVNN1NVRkRVQ3hUUVVGVExFVkJRVVVzUTBGQlF6dEpRVU5hTEV0QlFVc3NSVUZCUlN4RFFVRkRPMGxCUTFJc1UwRkJVeXhGUVVGRkxFTkJRVU03U1VGRFdpeExRVUZMTEVWQlFVVXNRMEZCUXp0SlFVTlNMRk5CUVZNc1JVRkJSU3hEUVVGRE8wbEJRMW9zUzBGQlN5eEZRVUZGTEVOQlFVTTdTVUZEVWl4RFFVRkRMRVZCUVVVc1JVRkJSVHRKUVVOTUxFTkJRVU1zUlVGQlJTeEZRVUZGTzBsQlEwd3NRMEZCUXl4RlFVRkZMRVZCUVVVN1NVRkRUQ3hQUVVGUExFVkJRVVVzUlVGQlJUdERRVU5JTEVOQlFVTTdRVUZGV0N3d1FrRkJNRUk3UVVGRGJrSXNUVUZCVFN4aFFVRmpMRk5CUVZFc1UwRkJVenRKUVdVeFF5eFpRVUZaTEVsQlFXMUNMRVZCUVVVc1NVRkJXU3hGUVVGRkxFdEJRV1U3TzFGQlF6VkVMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCU0Znc1lVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF6dFJRVXM1UWl4SlFVRkpMRU5CUVVNc1JVRkJSU3hsUVVGSExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRVZCUVVVc1EwRkJReXd3UTBGQlJTeFhRVUZYTEhGRFFVRk5MRVZCUVVVc1EwRkJRenRSUVVOb1JDeEpRVUZKTEVOQlFVTXNTVUZCU1N4VFFVRkhMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU03VVVGRGNrTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhSUVVGUkxFOUJRVU1zUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTJ4RUxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NVVUZCVVN4UFFVRkRMRXRCUVVzc1EwRkJReXh2UWtGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4dFEwRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU5xUkN4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExGRkJRVkVzVDBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zYlVOQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRiRVFzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4UlFVRlJMRTlCUVVNc1MwRkJTeXhEUVVGRExHOUNRVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRzFEUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEycEVMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzVVVGQlVTeFBRVUZETEV0QlFVc3NRMEZCUXl4dlFrRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eHRRMEZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOc1JDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRkZCUVZFc1QwRkJReXhMUVVGTExFTkJRVU1zYjBKQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc2JVTkJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEYWtRc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eFZRVUZWTEU5QlFVTXNTMEZCU3l4RFFVRkRMRzlDUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRek5ETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1ZVRkJWU3hQUVVGRExFdEJRVXNzUTBGQlF5eHZRa0ZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXh0UTBGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTXpReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEZWQlFWVXNUMEZCUXl4TFFVRkxMRU5CUVVNc2IwSkJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNiVU5CUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE0wTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhWUVVGVkxFOUJRVU1zUzBGQlN5eERRVUZETEc5Q1FVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUTNwRUxFTkJRVU03UTBGRFJqdEJRVVZOTEUxQlFVMHNWMEZCV1N4VFFVRlJMR0ZCUVdFN1EwRkJSenM3TzBGRGNFUmlPMEZCUTFVN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJ5OUNMRTFCUVUwc1UwRkJVenRKUVVNMVFpeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVcxQ0xFVkJRVVVzU1VGQldUdFJRVU0xUXl4SlFVRkpMRWRCUVVjc1EwRkJRenRSUVVWU0xFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRE9VSXNUVUZCVFN4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlJYWkNMSFZEUVVGMVF6dFJRVU4yUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhKUVVGSkxFdEJRVXNzUzBGQlN5eExRVUZMTzFsQlF6TkNMRTlCUVU4N1VVRkZWQ3h0UkVGQmJVUTdVVUZEYmtRc1VVRkJVU3hYUVVGWExFZEJRVWNzUzBGQlN5eEZRVUZGTzFsQlF6ZENMRXRCUVVzc1lVRkJZVHRuUWtGRGFFSXNSMEZCUnl4SFFVRkhMRWxCUVVrc1YwRkJWeXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1owSkJRM3BETEUxQlFVMDdXVUZEVWl4TFFVRkxMR0ZCUVdFN1owSkJRMmhDTEVkQlFVY3NSMEZCUnl4SlFVRkpMRmRCUVZjc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMmRDUVVONlF5eE5RVUZOTzFsQlExSXNTMEZCU3l4aFFVRmhPMmRDUVVOb1FpeEhRVUZITEVkQlFVY3NTVUZCU1N4WFFVRlhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0blFrRkRla01zVFVGQlRUdFpRVU5TTEV0QlFVc3NZVUZCWVR0blFrRkRhRUlzUjBGQlJ5eEhRVUZITEVsQlFVa3NWMEZCVnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdaMEpCUTNwRExFMUJRVTA3V1VGRFVpeExRVUZMTEdGQlFXRTdaMEpCUTJoQ0xFZEJRVWNzUjBGQlJ5eEpRVUZKTEZkQlFWY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzJkQ1FVTjZReXhOUVVGTk8xbEJRMUlzUzBGQlN5eGhRVUZoTzJkQ1FVTm9RaXhIUVVGSExFZEJRVWNzU1VGQlNTeFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dG5Ra0ZEZWtNc1RVRkJUVHRaUVVOU0xFdEJRVXNzWVVGQllUdG5Ra0ZEYUVJc1IwRkJSeXhIUVVGSExFbEJRVWtzVjBGQlZ5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03WjBKQlEzcERMRTFCUVUwN1dVRkRVaXhMUVVGTExHRkJRV0U3WjBKQlEyaENMRWRCUVVjc1IwRkJSeXhKUVVGSkxGZEJRVmNzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8yZENRVU42UXl4TlFVRk5PMWxCUTFJc1MwRkJTeXhoUVVGaE8yZENRVU5vUWl4SFFVRkhMRWRCUVVjc1NVRkJTU3hYUVVGWExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRuUWtGRGVrTXNUVUZCVFR0WlFVTlNMRXRCUVVzc1lVRkJZVHRuUWtGRGFFSXNSMEZCUnl4SFFVRkhMRWxCUVVrc1YwRkJWeXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1owSkJRM3BETEUxQlFVMDdXVUZEVWl4TFFVRkxMR0ZCUVdFN1owSkJRMmhDTEVkQlFVY3NSMEZCUnl4SlFVRkpMRmRCUVZjc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMmRDUVVONlF5eE5RVUZOTzFsQlExSXNTMEZCU3l4aFFVRmhPMmRDUVVOb1FpeEhRVUZITEVkQlFVY3NTVUZCU1N4WFFVRlhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0blFrRkRla01zVFVGQlRUdFpRVU5TTEV0QlFVc3NZVUZCWVR0blFrRkRhRUlzUjBGQlJ5eEhRVUZITEVsQlFVa3NWMEZCVnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdaMEpCUTNwRExFMUJRVTA3V1VGRFVpeExRVUZMTEdGQlFXRTdaMEpCUTJoQ0xFZEJRVWNzUjBGQlJ5eEpRVUZKTEZkQlFWY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzJkQ1FVTjZReXhOUVVGTk8xbEJRMUlzUzBGQlN5eGhRVUZoTzJkQ1FVTm9RaXhIUVVGSExFZEJRVWNzU1VGQlNTeFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dG5Ra0ZEZWtNc1RVRkJUVHRaUVVOU0xFdEJRVXNzWVVGQllUdG5Ra0ZEYUVJc1IwRkJSeXhIUVVGSExFbEJRVWtzVjBGQlZ5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03WjBKQlEzcERMRTFCUVUwN1dVRkRVaXhMUVVGTExHRkJRV0U3WjBKQlEyaENMRWRCUVVjc1IwRkJSeXhKUVVGSkxGZEJRVmNzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8yZENRVU42UXl4TlFVRk5PMWxCUTFJc1MwRkJTeXhoUVVGaE8yZENRVU5vUWl4SFFVRkhMRWRCUVVjc1NVRkJTU3hYUVVGWExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRuUWtGRGVrTXNUVUZCVFR0WlFVTlNMRXRCUVVzc1lVRkJZVHRuUWtGRGFFSXNSMEZCUnl4SFFVRkhMRWxCUVVrc1YwRkJWeXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1owSkJRM3BETEUxQlFVMDdXVUZEVWl4TFFVRkxMR0ZCUVdFN1owSkJRMmhDTEVkQlFVY3NSMEZCUnl4SlFVRkpMRmRCUVZjc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMmRDUVVONlF5eE5RVUZOTzFsQlExSXNTMEZCU3l4aFFVRmhPMmRDUVVOb1FpeEhRVUZITEVkQlFVY3NTVUZCU1N4WFFVRlhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0blFrRkRla01zVFVGQlRUdFpRVU5TTEV0QlFVc3NZVUZCWVR0blFrRkRhRUlzUjBGQlJ5eEhRVUZITEVsQlFVa3NWMEZCVnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdaMEpCUTNwRExFMUJRVTA3V1VGRFVpeExRVUZMTEdGQlFXRTdaMEpCUTJoQ0xFZEJRVWNzUjBGQlJ5eEpRVUZKTEZkQlFWY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzJkQ1FVTjZReXhOUVVGTk8xbEJRMUlzUzBGQlN5eGhRVUZoTzJkQ1FVTm9RaXhIUVVGSExFZEJRVWNzU1VGQlNTeFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dG5Ra0ZEZWtNc1RVRkJUVHRaUVVOU08yZENRVU5GTEVkQlFVY3NSMEZCUnl4SlFVRkpMRk5CUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMU5CUTNoRE8xRkJSVVFzTWtWQlFUSkZPMUZCUXpORkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVkQlFVY3NRMEZCUXl4VFFVRlRMRWRCUVVjc1UwRkJVenRaUVVOc1F5eFBRVUZQTzFGQlJWUXNNRVJCUVRCRU8xRkJRekZFTEVsQlFVa3NSMEZCUnl4SlFVRkpMRWRCUVVjc1EwRkJReXhQUVVGUE8xbEJRM0JDTEU5QlFVODdVVUZGVkN4UFFVRlBMRWRCUVVjc1EwRkJRenRKUVVOaUxFTkJRVU03UTBGRFJqczdPMEZET1VoclF6dEJRVVVyUWp0QlFVTlNPMEZCUlRGRUxFMUJRVTBzVjBGQlZ5eEhRVUZITEVOQlFVTXNTVUZCWjBJc1JVRkJjVUlzUlVGQlJUdEpRVU14UkN4UFFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRGFFSXNRMEZCUXl4RFFVRkRPMEZCUldFc1RVRkJUU3h0UWtGQmIwSXNVMEZCVVN4UlFVRlJPMGxCUTNaRUxGZEJRVmNzUTBGQlF5eEpRVUZaTzFGQlEzUkNMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzWVVGQllTeEZRVUZGTEVOQlFVTTdVVUZEYWtNc1QwRkJUeXhKUVVGSkxFTkJRVU1zV1VGQldUdFJRVU53UWl4M1JVRkJkMFU3VVVGRGVFVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUlVGRGRFVXNTVUZCU1N4RFFVTlFMRU5CUVVNN1NVRkRTaXhEUVVGRE8wbEJSVVFzV1VGQldTeERRVUZETEV0QlFXVXNSVUZCUlN4SlFVRnRRanRSUVVNdlF5eEpRVUZKTEZWQlFWVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8xRkJRMmhHTERoR1FVRTRSanRSUVVNNVJpeFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTnVReXhEUVVGRExFTkJRVU1zUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTmFMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRMWdzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4M1JrRkJkMFk3VVVGRGVFWXNhVVpCUVdsR08xRkJRMnBHTEU5QlFVOHNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zVTBGQlV5eEpRVUZKTEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJReXhEUVVGRExHRkJRV0VzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4VFFVRlRMRWxCUVVrc1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTTNSeXhEUVVGRE96dEJRVVZOTEd0RFFVRmpMRWRCUVVjc1UwRkJVeXhEUVVGRE96czdRVU12UWpkQ0xFMUJRVTBzVTBGQlV5eEhRVUZITEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVZVc1EwRkJRenRCUVUxb1JTeE5RVUZOTEUxQlFVMHNSMEZCUnl4RFFVRkRMRWxCUVdFc1JVRkJaMElzUlVGQlJUdEpRVU53UkN4TlFVRk5MRkZCUVZFc1IwRkJjMElzVTBGQlV5eERRVUZETzBsQlF6bERMRWxCUVVrc1EwRkJReXhKUVVGSk8xRkJRMUFzVDBGQlR5eExRVUZMTEVOQlFVTTdTVUZEWml4UFFVRlBMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEYWtNc1EwRkJReXhEUVVGRE96czdRVU5ZWjBRN1FVRkRWenRCUVVOa08wRkJRMjFDTzBGQlExWTdRVUZEVHp0QlFVTnhRenRCUVVOb1F6dEJRVVZ3UlN4TlFVRk5MRk5CUVZNc1IwRkJSeXhEUVVGRExFbEJRVmtzUlVGQlJTeFJRVUZsTEVWQlFVVXNSVUZCUlR0SlFVTnNSQ3hKUVVGSkxGRkJRVkU3VVVGRFZpeFBRVUZQTEZOQlFXTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZGYWtRc1MwRkJTeXhOUVVGTkxFbEJRVWtzU1VGQlNTeFRRVUZqTEVWQlFVVTdVVUZEYWtNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTTdXVUZEWml4TlFVRk5MRWxCUVVrc1pVRkJaU3hGUVVGRkxFTkJRVU03VVVGRE9VSXNTVUZCU1N4VFFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXp0WlFVTnlReXhQUVVGUExFbEJRVWtzUTBGQlF6dExRVU5tTzBsQlJVUXNUMEZCVHl4TFFVRkxMRU5CUVVNN1FVRkRaaXhEUVVGRExFTkJRVU03UVVGRlJpeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExFTkJRVU1zVTBGQmFVSXNSVUZCUlN4RlFVRkZPMGxCUXpkRExFOUJRVThzVTBGQlV5eEhRVUZITEVOQlFVTXNTVUZCU1N4VFFVRlRMRWRCUVVjc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRPMEZCUXpsRUxFTkJRVU1zUTBGQlF6dEJRVVZoTEUxQlFVMHNVMEZCVXp0SlFXdENOVUlzV1VGRFV5eFpRVUZ2UWl4RlFVTndRaXhsUVVGMVFpeEZRVU4yUWl4cFFrRkJlVUlzUlVGRGVrSXNVVUZCY1VJN1VVRklja0lzYVVKQlFWa3NSMEZCV2l4WlFVRlpMRU5CUVZFN1VVRkRjRUlzYjBKQlFXVXNSMEZCWml4bFFVRmxMRU5CUVZFN1VVRkRka0lzYzBKQlFXbENMRWRCUVdwQ0xHbENRVUZwUWl4RFFVRlJPMUZCUTNwQ0xHRkJRVkVzUjBGQlVpeFJRVUZSTEVOQlFXRTdVVUZzUWpsQ0xHdENRVUZoTEVkQlFVY3NUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETzFGQlEzaERMR05CUVZNc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGRGRFSXNaMEpCUVZjc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGRGFFSXNZVUZCVVN4SFFVRkhMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXp0UlFVTnVReXgxUWtGQmEwSXNSMEZCUnl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTTdVVUZETjBNc2MwSkJRV2xDTEVkQlFVY3NUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETzFGQlEzQkVMRzFDUVVGakxFZEJRVWNzUTBGQlF5eERRVUZETzFGQlJXNUNMRzFDUVVGakxFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEyNUNMR2xDUVVGWkxFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEycENMR0ZCUVZFc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRFlpeHRRa0ZCWXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOdVFpeGhRVUZSTEVkQlFWTXNTVUZCU1N4RFFVRkRPMUZCVDNCQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NVMEZCVXl4RFFVRkRMR2RDUVVGblFpeERRVUZETzBsQlF6VkRMRU5CUVVNN1NVRkZSQ3hWUVVGVk8xRkJRMUlzVFVGQlRTeGhRVUZoTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVZVc1EwRkJRenRSUVVWNFF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlRzN1dVRkRhRU1zU1VGQlNTeERRVUZETEVsQlFVazdaMEpCUTFBc1RVRkJUU3hKUVVGSkxHVkJRV1VzUlVGQlJTeERRVUZETzFsQlJUbENMRWxCUVVrc1IwRkJSeXhIUVVGSExIbENRVUY1UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dFpRVU4wUkN4SlFVRkpMRWRCUVVjc1JVRkJSVHRuUWtGRFVDeEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRU5CUVVNc1EwRkJRenRuUWtGRGVFSXNWVUZCU1N4SFFVRkhMRU5CUVVNc1RVRkJUU3d3UTBGQlJTeFRRVUZUTzI5Q1FVTjJRaXhoUVVGaExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03WjBKQlF6RkRMRlZCUVVrc1IwRkJSeXhEUVVGRExFMUJRVTBzTUVOQlFVVXNUMEZCVHl4RlFVRkZPMjlDUVVOMlFpeE5RVUZOTEU5QlFVOHNSMEZCUnl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0dlFrRkROME1zU1VGQlNTeFBRVUZQTEVsQlFVa3NRMEZCUXp0M1FrRkRaQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8ybENRVU55UlR0aFFVTkdPMmxDUVVGTk8yZENRVU5NTEVkQlFVY3NSMEZCUnl4MVFrRkJkVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1owSkJRMmhFTEVsQlFVa3NSMEZCUnl4RlFVRkZPMjlDUVVOUUxGVkJRVWtzUjBGQlJ5eERRVUZETEUxQlFVMHNNRU5CUVVVc1QwRkJUenQzUWtGRGNrSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXp0cFFrRkRka003Y1VKQlFVMHNTVUZCU1N4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlR0dlFrRkROMFFzU1VGQlNTeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVU03ZDBKQlEzcENMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFVkJRVVU3ZDBKQlEyeEZMSGRDUVVGM1FqdDNRa0ZEZUVJc1NVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJUczBRa0ZETDBVc0swSkJRU3RDT3pSQ1FVTXZRaXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPM2xDUVVNM1JUdHhRa0ZEUmp0NVFrRkJUU3hKUVVGSkxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTzNkQ1FVTXhSU3h4UWtGQmNVSTdkMEpCUTNKQ0xFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGT3pSQ1FVTTVSU3d5UWtGQk1rSTdORUpCUXpOQ0xFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUlVGQlJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN2VVSkJRek5GTzNGQ1FVTkdPMmxDUVVOR08yRkJRMFk3V1VGRFJDeE5RVUZOTEZkQlFWY3NVMEZCUnl4SFFVRkhMR0ZCUVVnc1IwRkJSeXgxUWtGQlNDeEhRVUZITEVOQlFVVXNUVUZCVFN3d1EwRkJSU3hSUVVGUkxFTkJRVU03V1VGRE1VTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRE8yZENRVU55UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExGZEJRVmNzUTBGQlF6dFJRVU5vUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVWSUxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMUZCUXpORkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEdOQlFXTXNRMEZCUXp0UlFVTXpSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eGhRVUZoTEVOQlFVTTdVVUZEZUVRc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU03VVVGRmVFUXNTVUZCU1N4SlFVRkpMRU5CUVVNc1lVRkJZU3hMUVVGTExFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSVHRaUVVOc1JDeEpRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1RVRkJUU3hEUVVGRExHZENRVUZuUWp0blFrRkRla01zU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTTdhVUpCUTNSRUxFbEJRVWtzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhIUVVGSExFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJN1owSkJRM2hFTEVsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU03YVVKQlEyaEZMRWxCUVVrc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4SFFVRkhMRTFCUVUwc1EwRkJReXhuUWtGQlowSTdaMEpCUTNaRUxFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNN08yZENRVVZzUlN4SlFVRkpMRU5CUVVNc1lVRkJZU3hIUVVGSExFTkJRVU1zUTBGQlF6dFRRVU14UWp0UlFVVkVMRTFCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8xRkJSWEpFTEVsQlFVa3NVMEZCVXl4SlFVRkpMRk5CUVZNc1EwRkJReXhOUVVGTk8xbEJReTlDTEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF6dFJRVVY2UXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExFTkJRVU1zUjBGQlJ5eGhRVUZoTEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZETVVRc1EwRkJRenRKUVVWRUxFbEJRVmNzWjBKQlFXZENPMUZCUTNwQ0xFOUJRVThzU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRE8wbEJRMnhFTEVOQlFVTTdTVUZGUkN4clFrRkJhMEk3VVVGRGFFSXNUMEZCVHl4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zU1VGQlNTeG5Ra0ZCWjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRKUVVNdlJpeERRVUZETzBsQlJVUXNUMEZCVHl4RFFVRkRMRTlCUVdVN1VVRkRja0lzU1VGQlNTeFRRVUZUTEVOQlFVTXNaMEpCUVdkQ0xFbEJRVWtzVDBGQlR6dFpRVU4yUXl4UFFVRlBMRXRCUVVzc1EwRkJRenRSUVVWbUxFMUJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NZVUZCWVN4RlFVRkZMRU5CUVVNN1VVRkRha01zVFVGQlRTeFRRVUZUTEVkQlFVY3NTVUZCU1N4dFFrRkJiVUlzUlVGQlJTeERRVUZETzFGQlF6VkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVTBGQlV5eERRVUZETEZsQlFWa3NRMEZEYkVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNSVUZEZGtNc1NVRkJTU3hEUVVOUUxFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRk5CUVZNc1EwRkJReXhuUWtGQlowSXNRMEZCUXp0UlFVTXhReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdVVUZGYkVJc1QwRkJUeXhKUVVGSkxFTkJRVU03U1VGRFpDeERRVUZET3p0QlFXNUlkVUlzTUVKQlFXZENMRWRCUVVjc1EwRkJReXhEUVVGRE96czdRVU0xUWtFN1FVRkRXanRCUVVWdFF6dEJRVVYyUkN4TlFVRk5MR1ZCUVdkQ0xGTkJRVkVzVVVGQlVUdEpRVUZ5UkRzN1VVRkRVeXhwUWtGQldTeEhRVUZuUWl4RlFVRkZMRU5CUVVNN1VVRkRMMElzYjBKQlFXVXNSMEZCUnl4VFFVRlRMRU5CUVVNN1VVRkROVUlzYTBKQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNN1NVRTBRemxDTEVOQlFVTTdTVUV4UTBNc1UwRkJVeXhEUVVGRExFbEJRV2xDTzFGQlEzcENMRXRCUVVzc1RVRkJUU3hQUVVGUExFbEJRVWtzU1VGQlNTeEZRVUZGTzFsQlF6RkNMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMWxCUldoRExFOUJRVThzUTBGQlF5eE5RVUZOTEVkQlFVY3NUMEZCVHl4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNN1dVRkZOVVFzVFVGQlRTeEhRVUZITEVkQlFVY3NkVUpCUVhWQ0xFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMWxCUTNwRUxFbEJRVWtzUjBGQlJ5eEZRVUZGTzJkQ1FVTlFMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dGhRVU5xUWp0cFFrRkJUU3hKUVVGSkxFOUJRVThzV1VGQldTeGhRVUZoTEVWQlFVVTdaMEpCUXpORExFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJRenRuUWtGRGNFTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETzJkQ1FVTjRReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdZVUZEYWtJN1UwRkRSanRKUVVOSUxFTkJRVU03U1VGRlJDeEpRVUZaTEdsQ1FVRnBRanM3VVVGRE0wSXNiVUpCUVU4c1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNNRU5CUVVVc1UwRkJVeXh0UTBGQlNTeERRVUZETEVOQlFVTTdTVUZET1VNc1EwRkJRenRKUVVWRUxFbEJRVmtzWlVGQlpUczdVVUZEZWtJc2JVSkJRVThzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNNRU5CUVVVc1UwRkJVeXh0UTBGQlNTeERRVUZETEVOQlFVTTdTVUZEZUVRc1EwRkJRenRKUVVWRUxGRkJRVkU3VVVGRFRpeEpRVUZKTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU03V1VGRE9VSXNUMEZCVHp0UlFVVlVMRTFCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRPMUZCUXpkRUxFMUJRVTBzUjBGQlJ5eEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0UlFVVjZSQ3hQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETzFOQlExUXNTMEZCU3p0UFFVTlFMRWRCUVVjN1VVRkRSaXhKUVVGSkxFTkJRVU1zWlVGQlpUdGpRVU5rTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1RVRkJUVHREUVVOeVF5eERRVUZETEVOQlFVTTdVVUZEUXl4TFFVRkxMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eEZRVUZGTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4aFFVRmhMRVZCUVVVc1NVRkJTU3hEUVVGRExHVkJRV1VzUlVGQlJTeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1VVRkZPVWNzU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4RlFVRkZMRU5CUVVNN1NVRkRla0lzUTBGQlF6dERRVU5HT3pzN1FVTndSRVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVUVzVTBGQlV5eEhRVUZITEUxQlFVOURMRWRCUVZBc1NVRkJaVHRCUVVONlFpeFJRVUZOUXl4WlFVRlpMRWRCUVVjc1NVRkJTVU1zYlVKQlFVb3NSVUZCY2tJN1FVRkRRU3hSUVVGTlF5eGxRVUZsTEVkQlFVY3NTVUZCU1VNc1pVRkJTaXhGUVVGNFFqdEJRVU5CTEZGQlFVMURMRWxCUVVrc1IwRkJSeXhKUVVGSlF5eGhRVUZLTEVWQlFXSXNRMEZJZVVJc1EwRkxla0k3TzBGQlEwRklMR2xDUVVGbExFTkJRVU5KTEVWQlFXaENMRU5CUVcxQ0xFOUJRVzVDTEVWQlFUUkNMRTlCUVU5RExFZEJRVkFzUlVGQldVTXNUVUZCV2l4RlFVRnZRa01zVVVGQmNFSXNSVUZCT0VKRExFdEJRVGxDTEV0QlFYZERPMEZCUTJ4RkxGVkJRVTFETEVkQlFVY3NSMEZCUnl4SlFVRkpReXhUUVVGS0xFTkJRV05NTEVkQlFXUXNSVUZCYlVKRExFMUJRVzVDTEVWQlFUSkNReXhSUVVFelFpeEZRVUZ4UTBNc1MwRkJja01zUTBGQldqdEJRVU5CUXl4UFFVRkhMRU5CUVVORkxGVkJRVW83TzBGQlEwRXNVVUZCU1VZc1IwRkJSeXhEUVVGRFJ5eHJRa0ZCU2l4RlFVRktMRVZCUVRoQ08wRkJRelZDUXl4cFFrRkJWeXhEUVVGRE8wRkJRMVpETEZsQlFVa3NSVUZCUlN4WFFVUkpPMEZCUlZaRExHbENRVUZUTEVWQlFVVk9MRWRCUmtRN1FVRkhWazhzV1VGQlNTeEZRVUZGVUN4SFFVRkhMRU5CUVVOUkxHZENRVUZLTEVOQlFYRkNReXh2UWtGQmNrSTdRVUZJU1N4UFFVRkVMRU5CUVZnN1FVRkxSRHRCUVVOR0xFZEJWa1FzUlVGT2VVSXNRMEZyUW5wQ096dEJRVU5CTEZGQlFVMURMRTlCUVU4c1IwRkJSeXhKUVVGSlF5eFhRVUZLTEVOQlFXZENMRTlCUVdoQ0xFTkJRV2hDTzBGQlEwRXNUVUZCU1VNc1IwRkJSeXhIUVVGSExFbEJRVWxETEZWQlFVb3NRMEZCWlhwQ0xFZEJRVWNzUTBGQlF6QkNMRWxCUVc1Q0xFTkJRVlk3UVVGRFFTeE5RVUZKUXl4VlFVRlZMRWRCUVVjc1EwRkJha0k3UVVGRFFTeE5RVUZKYUVJc1MwRkJTeXhIUVVGSExFVkJRVm83UVVGRFFTeE5RVUZKYVVJc1UwRkJVeXhIUVVGSExFTkJRV2hDT3p0QlFVTkJMRTlCUVVzc1NVRkJTVU1zWVVGQllTeEhRVUZIUml4VlFVRjZRaXhGUVVORlFTeFZRVUZWTEVkQlFVZElMRWRCUVVjc1EwRkJRMDBzVFVGQmFrSXNTVUZCTWtKSUxGVkJRVlVzUzBGQlN5eERRVUZETEVOQlJEZERMRVZCUlVWRkxHRkJRV0VzUjBGQlIwWXNWVUZHYkVJc1JVRkZPRUk3UVVGRE5VSkJMR05CUVZVc1IwRkJSMGdzUjBGQlJ5eERRVUZEVHl4UFFVRktMRU5CUVZrc1NVRkJXaXhGUVVGclFrb3NWVUZCVlN4SFFVRkhMRU5CUVM5Q0xFTkJRV0k3UVVGRFFTeFZRVUZOU3l4SlFVRkpMRWRCUVVkV0xFOUJRVThzUTBGQlExY3NUVUZCVWl4RFFVRmxWQ3hIUVVGSExFTkJRVU5WTEV0QlFVb3NRMEZCVlV3c1lVRkJWaXhGUVVGNVFrWXNWVUZCZWtJc1EwRkJaaXhGUVVGeFJGRXNTVUZCY2tRc1JVRkJZanM3UVVGRFFTeFJRVUZKU0N4SlFVRkpMRU5CUVVOR0xFMUJRVlFzUlVGQmFVSTdRVUZEWml4UlFVRkZSaXhUUVVGR08wRkJRMEZxUWl4WFFVRkxMRU5CUVVONVFpeEpRVUZPTEVOQlFWZEtMRWxCUVZnN1FVRkRSRHM3UVVGRlJDeFJRVUZKY2tJc1MwRkJTeXhEUVVGRGJVSXNUVUZCVGl4SlFVRm5RaXhKUVVGd1FpeEZRVUV3UWp0QlFVTjRRbTVDTEZkQlFVc3NSMEZCUjFZc1dVRkJXU3hEUVVGRGIwTXNXVUZCWWl4RFFVRXdRakZDTEV0QlFURkNMRVZCUVdsRFRpeEpRVUZxUXl4RFFVRlNPMEZCUTBGR0xIRkNRVUZsTEVOQlFVTnRReXhUUVVGb1FpeERRVUV3UWpOQ0xFdEJRVEZDTzBGQlEwRkxMR2xDUVVGWExFTkJRVU03UVVGRFZrTXNXVUZCU1N4RlFVRkZMRlZCUkVrN1FVRkZWazRzWVVGQlN5eEZRVUZGYVVJc1UwRkdSenRCUVVkV1Z5eGhRVUZMTEVWQlFVVmFMRlZCU0VjN1FVRkpWbUVzYTBKQlFWVXNSVUZCUldoQ0xFZEJRVWNzUTBGQlEwMDdRVUZLVGl4UFFVRkVMRU5CUVZnN1FVRk5RVzVDTEZkQlFVc3NSMEZCUnl4RlFVRlNPMEZCUTBRN1FVRkRSanM3UVVGRFJDeE5RVUZKUVN4TFFVRkxMRU5CUVVOdFFpeE5RVUZPTEVkQlFXVXNRMEZCYmtJc1JVRkJjMEk3UVVGRGNFSnVRaXhUUVVGTExFZEJRVWRXTEZsQlFWa3NRMEZCUTI5RExGbEJRV0lzUTBGQk1FSXhRaXhMUVVFeFFpeEZRVUZwUTA0c1NVRkJha01zUTBGQlVqdEJRVU5CUml4dFFrRkJaU3hEUVVGRGJVTXNVMEZCYUVJc1EwRkJNRUl6UWl4TFFVRXhRanRCUVVOQlFTeFRRVUZMTEVkQlFVY3NSVUZCVWp0QlFVTkVPenRCUVVORVN5eGhRVUZYTEVOQlFVTTdRVUZEVmtNc1VVRkJTU3hGUVVGRkxGVkJSRWs3UVVGRlZrNHNVMEZCU3l4RlFVRkZhVUlzVTBGR1J6dEJRVWRXVnl4VFFVRkxMRVZCUVVWbUxFZEJRVWNzUTBGQlEwMHNUVUZJUkR0QlFVbFdWU3hqUVVGVkxFVkJRVVZvUWl4SFFVRkhMRU5CUVVOTk8wRkJTazRzUjBGQlJDeERRVUZZTzBGQlRVRk9MRXRCUVVjc1IwRkJSeXhKUVVGT08wRkJSVUZ5UWl4cFFrRkJaU3hEUVVGRGMwTXNVVUZCYUVJN1FVRkZRWHBDTEdGQlFWY3NRMEZCUXp0QlFVTldReXhSUVVGSkxFVkJRVVU3UVVGRVNTeEhRVUZFTEVOQlFWZzdRVUZIUkN4RFFXaEZSQ3hESWl3aVptbHNaU0k2SWs1bGRIZHZjbXRNYjJkRGIyNTJaWEowWlhKWGIzSnJaWEl1WW5WdVpHeGxMbmR2Y210bGNpNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUVKaGMyVlNaV2RGZUhBZ2ZTQm1jbTl0SUNjdUxpOTBlWEJsY3k5MGNtbG5aMlZ5Snp0Y2NseHVYSEpjYm1WNGNHOXlkQ0IwZVhCbElGQmhjbUZ0Y3p4VUlHVjRkR1Z1WkhNZ2MzUnlhVzVuUGlBOVhISmNiaUFnVUdGeWRHbGhiRHhTWldOdmNtUThSWGhqYkhWa1pUeFVMQ0FuZEdsdFpYTjBZVzF3SnlCOElDZGpZWEIwZFhKbEp6NHNJSE4wY21sdVp5QjhJSE4wY21sdVoxdGRQaUFtWEhKY2JpQWdleUFuZEdsdFpYTjBZVzF3SnpvZ2MzUnlhVzVuT3lBblkyRndkSFZ5WlNjNklHSnZiMnhsWVc0Z2ZUNDdYSEpjYmx4eVhHNWxlSEJ2Y25RZ2RIbHdaU0JTWldkbGVEeFVJR1Y0ZEdWdVpITWdjM1J5YVc1blBpQTlJRUpoYzJWU1pXZEZlSEE4UlhoamJIVmtaVHhVTENBblkyRndkSFZ5WlNjK1BqdGNjbHh1WEhKY2JuUjVjR1VnVm1Gc2FXUlRkSEpwYm1kUGNrRnljbUY1SUQwZ2MzUnlhVzVuSUh3Z2MzUnlhVzVuVzEwN1hISmNibHh5WEc1amIyNXpkQ0J6ZEdGeWRITlZjMmx1WjFCaGNtRnRjeUE5SUZzbmRHbHRaWE4wWVcxd0p5d2dKM052ZFhKalpTY3NJQ2RwWkNjc0lDZGhZbWxzYVhSNUp5d2dKM1JoY21kbGRDY3NJQ2RqWVhCMGRYSmxKMTBnWVhNZ1kyOXVjM1E3WEhKY2JtTnZibk4wSUdGaWFXeHBkSGxRWVhKaGJYTWdQU0JiSjNScGJXVnpkR0Z0Y0Njc0lDZHpiM1Z5WTJVbkxDQW5jMjkxY21ObFNXUW5MQ0FuYVdRbkxDQW5ZV0pwYkdsMGVTY3NJQ2QwWVhKblpYUkpaQ2NzSUNkMFlYSm5aWFFuTENBblkyRndkSFZ5WlNkZElHRnpJR052Ym5OME8xeHlYRzVqYjI1emRDQmhZbWxzYVhSNVJuVnNiRkJoY21GdGN5QTlJRnRjY2x4dUlDQW5kR2x0WlhOMFlXMXdKeXhjY2x4dUlDQW5jMjkxY21ObFNXUW5MRnh5WEc0Z0lDZHpiM1Z5WTJVbkxGeHlYRzRnSUNkcFpDY3NYSEpjYmlBZ0oyRmlhV3hwZEhrbkxGeHlYRzRnSUNkMFlYSm5aWFJKWkNjc1hISmNiaUFnSjNSaGNtZGxkQ2NzWEhKY2JpQWdKMlpzWVdkekp5eGNjbHh1SUNBblpteGhaekFuTEZ4eVhHNGdJQ2RtYkdGbk1TY3NYSEpjYmlBZ0oyWnNZV2N5Snl4Y2NseHVJQ0FuWm14aFp6TW5MRnh5WEc0Z0lDZG1iR0ZuTkNjc1hISmNiaUFnSjJac1lXYzFKeXhjY2x4dUlDQW5abXhoWnpZbkxGeHlYRzRnSUNkbWJHRm5OeWNzWEhKY2JpQWdKMlpzWVdjNEp5eGNjbHh1SUNBblpteGhaemtuTEZ4eVhHNGdJQ2RtYkdGbk1UQW5MRnh5WEc0Z0lDZG1iR0ZuTVRFbkxGeHlYRzRnSUNkbWJHRm5NVEluTEZ4eVhHNGdJQ2RtYkdGbk1UTW5MRnh5WEc0Z0lDZG1iR0ZuTVRRbkxGeHlYRzRnSUNkMFlYSm5aWFJJY0Njc1hISmNiaUFnSjNSaGNtZGxkRTFoZUVod0p5eGNjbHh1SUNBbmRHRnlaMlYwVFhBbkxGeHlYRzRnSUNkMFlYSm5aWFJOWVhoTmNDY3NYSEpjYmlBZ0ozUmhjbWRsZEZnbkxGeHlYRzRnSUNkMFlYSm5aWFJaSnl4Y2NseHVJQ0FuZEdGeVoyVjBXaWNzWEhKY2JpQWdKM1JoY21kbGRFaGxZV1JwYm1jbkxGeHlYRzRnSUNkb2NDY3NYSEpjYmlBZ0oyMWhlRWh3Snl4Y2NseHVJQ0FuYlhBbkxGeHlYRzRnSUNkdFlYaE5jQ2NzWEhKY2JpQWdKM2duTEZ4eVhHNGdJQ2Q1Snl4Y2NseHVJQ0FuZWljc1hISmNiaUFnSjJobFlXUnBibWNuTEZ4eVhHNGdJQ2RqWVhCMGRYSmxKeXhjY2x4dVhTQmhjeUJqYjI1emREdGNjbHh1WTI5dWMzUWdhR1ZoWkUxaGNtdGxjbEJoY21GdGN5QTlJRnNuZEdsdFpYTjBZVzF3Snl3Z0ozUmhjbWRsZEVsa0p5d2dKM1JoY21kbGRDY3NJQ2RwWkNjc0lDZGpZWEIwZFhKbEoxMGdZWE1nWTI5dWMzUTdYSEpjYm1OdmJuTjBJR0ZrWkdWa1EyOXRZbUYwWVc1MFVHRnlZVzF6SUQwZ1d5ZDBhVzFsYzNSaGJYQW5MQ0FuYm1GdFpTY3NJQ2RqWVhCMGRYSmxKMTBnWVhNZ1kyOXVjM1E3WEhKY2JtTnZibk4wSUdGa1pHVmtRMjl0WW1GMFlXNTBSblZzYkZCaGNtRnRjeUE5SUZ0Y2NseHVJQ0FuZEdsdFpYTjBZVzF3Snl4Y2NseHVJQ0FuYVdRbkxGeHlYRzRnSUNkdVlXMWxKeXhjY2x4dUlDQW5hbTlpSnl4Y2NseHVJQ0FuYkdWMlpXd25MRnh5WEc0Z0lDZG9jQ2NzWEhKY2JpQWdKM2duTEZ4eVhHNGdJQ2Q1Snl4Y2NseHVJQ0FuZWljc1hISmNiaUFnSjI1d1kwbGtKeXhjY2x4dUlDQW5ZMkZ3ZEhWeVpTY3NYSEpjYmwwZ1lYTWdZMjl1YzNRN1hISmNibU52Ym5OMElISmxiVzkyYVc1blEyOXRZbUYwWVc1MFVHRnlZVzF6SUQwZ1cxeHlYRzRnSUNkMGFXMWxjM1JoYlhBbkxGeHlYRzRnSUNkcFpDY3NYSEpjYmlBZ0oyNWhiV1VuTEZ4eVhHNGdJQ2RvY0Njc1hISmNiaUFnSjNnbkxGeHlYRzRnSUNkNUp5eGNjbHh1SUNBbmVpY3NYSEpjYmlBZ0oyTmhjSFIxY21VbkxGeHlYRzVkSUdGeklHTnZibk4wTzF4eVhHNWpiMjV6ZENCbllXbHVjMFZtWm1WamRGQmhjbUZ0Y3lBOUlGc25kR2x0WlhOMFlXMXdKeXdnSjNSaGNtZGxkRWxrSnl3Z0ozUmhjbWRsZENjc0lDZGxabVpsWTNRbkxDQW5jMjkxY21ObEp5d2dKMlIxY21GMGFXOXVKeXdnSjJOaGNIUjFjbVVuWFNCaGN5QmpiMjV6ZER0Y2NseHVZMjl1YzNRZ2MzUmhkSFZ6UldabVpXTjBSWGh3YkdsamFYUlFZWEpoYlhNZ1BTQmJYSEpjYmlBZ0ozUnBiV1Z6ZEdGdGNDY3NYSEpjYmlBZ0ozUmhjbWRsZEVsa0p5eGNjbHh1SUNBbmRHRnlaMlYwSnl4Y2NseHVJQ0FuYW05aUp5eGNjbHh1SUNBbmFIQW5MRnh5WEc0Z0lDZHRZWGhJY0Njc1hISmNiaUFnSjIxd0p5eGNjbHh1SUNBbmJXRjRUWEFuTEZ4eVhHNGdJQ2Q0Snl4Y2NseHVJQ0FuZVNjc1hISmNiaUFnSjNvbkxGeHlYRzRnSUNkb1pXRmthVzVuSnl4Y2NseHVJQ0FuWkdGMFlUQW5MRnh5WEc0Z0lDZGtZWFJoTVNjc1hISmNiaUFnSjJSaGRHRXlKeXhjY2x4dUlDQW5aR0YwWVRNbkxGeHlYRzRnSUNka1lYUmhOQ2NzWEhKY2JpQWdKMk5oY0hSMWNtVW5MRnh5WEc1ZElHRnpJR052Ym5OME8xeHlYRzVqYjI1emRDQnNiM05sYzBWbVptVmpkRkJoY21GdGN5QTlJRnNuZEdsdFpYTjBZVzF3Snl3Z0ozUmhjbWRsZEVsa0p5d2dKM1JoY21kbGRDY3NJQ2RsWm1abFkzUW5MQ0FuYzI5MWNtTmxKeXdnSjJOaGNIUjFjbVVuWFNCaGN5QmpiMjV6ZER0Y2NseHVZMjl1YzNRZ2MzUmhkRU5vWVc1blpWQmhjbUZ0Y3lBOUlGdGNjbHh1SUNBbmRHbHRaWE4wWVcxd0p5eGNjbHh1SUNBbmFtOWlKeXhjY2x4dUlDQW5jM1J5Wlc1bmRHZ25MRnh5WEc0Z0lDZGtaWGgwWlhKcGRIa25MRnh5WEc0Z0lDZDJhWFJoYkdsMGVTY3NYSEpjYmlBZ0oybHVkR1ZzYkdsblpXNWpaU2NzWEhKY2JpQWdKMjFwYm1RbkxGeHlYRzRnSUNkd2FXVjBlU2NzWEhKY2JpQWdKMkYwZEdGamExQnZkMlZ5Snl4Y2NseHVJQ0FuWkdseVpXTjBTR2wwSnl4Y2NseHVJQ0FuWTNKcGRHbGpZV3hJYVhRbkxGeHlYRzRnSUNkaGRIUmhZMnROWVdkcFkxQnZkR1Z1WTNrbkxGeHlYRzRnSUNkb1pXRnNUV0ZuYVdOUWIzUmxibU41Snl4Y2NseHVJQ0FuWkdWMFpYSnRhVzVoZEdsdmJpY3NYSEpjYmlBZ0ozTnJhV3hzVTNCbFpXUW5MRnh5WEc0Z0lDZHpjR1ZzYkZOd1pXVmtKeXhjY2x4dUlDQW5kR1Z1WVdOcGRIa25MRnh5WEc0Z0lDZGpZWEIwZFhKbEp5eGNjbHh1WFNCaGN5QmpiMjV6ZER0Y2NseHVZMjl1YzNRZ2RHVjBhR1Z5VUdGeVlXMXpJRDBnV3lkMGFXMWxjM1JoYlhBbkxDQW5jMjkxY21ObEp5d2dKM052ZFhKalpVbGtKeXdnSjNSaGNtZGxkQ2NzSUNkMFlYSm5aWFJKWkNjc0lDZHBaQ2NzSUNkallYQjBkWEpsSjEwZ1lYTWdZMjl1YzNRN1hISmNibU52Ym5OMElIZGhjMFJsWm1WaGRHVmtVR0Z5WVcxeklEMGdXeWQwYVcxbGMzUmhiWEFuTENBbmRHRnlaMlYwSnl3Z0ozTnZkWEpqWlNjc0lDZGpZWEIwZFhKbEoxMGdZWE1nWTI5dWMzUTdYSEpjYm1OdmJuTjBJR2hoYzBoUVVHRnlZVzF6SUQwZ1d5ZDBhVzFsYzNSaGJYQW5MQ0FuYm1GdFpTY3NJQ2RvY0Njc0lDZGpZWEIwZFhKbEoxMGdZWE1nWTI5dWMzUTdYSEpjYm1OdmJuTjBJR1ZqYUc5UVlYSmhiWE1nUFNCYkozUnBiV1Z6ZEdGdGNDY3NJQ2RqYjJSbEp5d2dKMnhwYm1VbkxDQW5ZMkZ3ZEhWeVpTZGRJR0Z6SUdOdmJuTjBPMXh5WEc1amIyNXpkQ0JrYVdGc2IyZFFZWEpoYlhNZ1BTQmJKM1JwYldWemRHRnRjQ2NzSUNkamIyUmxKeXdnSjJ4cGJtVW5MQ0FuYm1GdFpTY3NJQ2RqWVhCMGRYSmxKMTBnWVhNZ1kyOXVjM1E3WEhKY2JtTnZibk4wSUcxbGMzTmhaMlZRWVhKaGJYTWdQU0JiSjNScGJXVnpkR0Z0Y0Njc0lDZGpiMlJsSnl3Z0oyeHBibVVuTENBblkyRndkSFZ5WlNkZElHRnpJR052Ym5OME8xeHlYRzVqYjI1emRDQm5ZVzFsVEc5blVHRnlZVzF6SUQwZ1d5ZDBhVzFsYzNSaGJYQW5MQ0FuWTI5a1pTY3NJQ2RzYVc1bEp5d2dKMk5oY0hSMWNtVW5YU0JoY3lCamIyNXpkRHRjY2x4dVkyOXVjM1FnWjJGdFpVNWhiV1ZNYjJkUVlYSmhiWE1nUFNCYkozUnBiV1Z6ZEdGdGNDY3NJQ2RqYjJSbEp5d2dKMjVoYldVbkxDQW5iR2x1WlNjc0lDZGpZWEIwZFhKbEoxMGdZWE1nWTI5dWMzUTdYSEpjYm1OdmJuTjBJR05vWVc1blpWcHZibVZRWVhKaGJYTWdQU0JiSjNScGJXVnpkR0Z0Y0Njc0lDZHVZVzFsSnl3Z0oyTmhjSFIxY21VblhTQmhjeUJqYjI1emREdGNjbHh1WTI5dWMzUWdibVYwZDI5eWF6WmtVR0Z5WVcxeklEMGdXeWQwYVcxbGMzUmhiWEFuTENBbmFXNXpkR0Z1WTJVbkxDQW5ZMjl0YldGdVpDY3NJQ2RrWVhSaE1DY3NJQ2RrWVhSaE1TY3NJQ2RrWVhSaE1pY3NJQ2RrWVhSaE15Y3NJQ2RqWVhCMGRYSmxKMTBnWVhNZ1kyOXVjM1E3WEhKY2JseHlYRzVsZUhCdmNuUWdkSGx3WlNCVGRHRnlkSE5WYzJsdVoxQmhjbUZ0Y3lBOUlIUjVjR1Z2WmlCemRHRnlkSE5WYzJsdVoxQmhjbUZ0YzF0dWRXMWlaWEpkTzF4eVhHNWxlSEJ2Y25RZ2RIbHdaU0JCWW1sc2FYUjVVR0Z5WVcxeklEMGdkSGx3Wlc5bUlHRmlhV3hwZEhsUVlYSmhiWE5iYm5WdFltVnlYVHRjY2x4dVpYaHdiM0owSUhSNWNHVWdRV0pwYkdsMGVVWjFiR3hRWVhKaGJYTWdQU0IwZVhCbGIyWWdZV0pwYkdsMGVVWjFiR3hRWVhKaGJYTmJiblZ0WW1WeVhUdGNjbHh1Wlhod2IzSjBJSFI1Y0dVZ1NHVmhaRTFoY210bGNsQmhjbUZ0Y3lBOUlIUjVjR1Z2WmlCb1pXRmtUV0Z5YTJWeVVHRnlZVzF6VzI1MWJXSmxjbDA3WEhKY2JtVjRjRzl5ZENCMGVYQmxJRUZrWkdWa1EyOXRZbUYwWVc1MFVHRnlZVzF6SUQwZ2RIbHdaVzltSUdGa1pHVmtRMjl0WW1GMFlXNTBVR0Z5WVcxelcyNTFiV0psY2wwN1hISmNibVY0Y0c5eWRDQjBlWEJsSUVGa1pHVmtRMjl0WW1GMFlXNTBSblZzYkZCaGNtRnRjeUE5SUhSNWNHVnZaaUJoWkdSbFpFTnZiV0poZEdGdWRFWjFiR3hRWVhKaGJYTmJiblZ0WW1WeVhUdGNjbHh1Wlhod2IzSjBJSFI1Y0dVZ1VtVnRiM1pwYm1kRGIyMWlZWFJoYm5SUVlYSmhiWE1nUFNCMGVYQmxiMllnY21WdGIzWnBibWREYjIxaVlYUmhiblJRWVhKaGJYTmJiblZ0WW1WeVhUdGNjbHh1Wlhod2IzSjBJSFI1Y0dVZ1IyRnBibk5GWm1abFkzUlFZWEpoYlhNZ1BTQjBlWEJsYjJZZ1oyRnBibk5GWm1abFkzUlFZWEpoYlhOYmJuVnRZbVZ5WFR0Y2NseHVaWGh3YjNKMElIUjVjR1VnVTNSaGRIVnpSV1ptWldOMFJYaHdiR2xqYVhSUVlYSmhiWE1nUFNCMGVYQmxiMllnYzNSaGRIVnpSV1ptWldOMFJYaHdiR2xqYVhSUVlYSmhiWE5iYm5WdFltVnlYVHRjY2x4dVpYaHdiM0owSUhSNWNHVWdURzl6WlhORlptWmxZM1JRWVhKaGJYTWdQU0IwZVhCbGIyWWdiRzl6WlhORlptWmxZM1JRWVhKaGJYTmJiblZ0WW1WeVhUdGNjbHh1Wlhod2IzSjBJSFI1Y0dVZ1UzUmhkRU5vWVc1blpWQmhjbUZ0Y3lBOUlIUjVjR1Z2WmlCemRHRjBRMmhoYm1kbFVHRnlZVzF6VzI1MWJXSmxjbDA3WEhKY2JtVjRjRzl5ZENCMGVYQmxJRlJsZEdobGNsQmhjbUZ0Y3lBOUlIUjVjR1Z2WmlCMFpYUm9aWEpRWVhKaGJYTmJiblZ0WW1WeVhUdGNjbHh1Wlhod2IzSjBJSFI1Y0dVZ1YyRnpSR1ZtWldGMFpXUlFZWEpoYlhNZ1BTQjBlWEJsYjJZZ2QyRnpSR1ZtWldGMFpXUlFZWEpoYlhOYmJuVnRZbVZ5WFR0Y2NseHVaWGh3YjNKMElIUjVjR1VnU0dGelNGQlFZWEpoYlhNZ1BTQjBlWEJsYjJZZ2FHRnpTRkJRWVhKaGJYTmJiblZ0WW1WeVhUdGNjbHh1Wlhod2IzSjBJSFI1Y0dVZ1JXTm9iMUJoY21GdGN5QTlJSFI1Y0dWdlppQmxZMmh2VUdGeVlXMXpXMjUxYldKbGNsMDdYSEpjYm1WNGNHOXlkQ0IwZVhCbElFUnBZV3h2WjFCaGNtRnRjeUE5SUhSNWNHVnZaaUJrYVdGc2IyZFFZWEpoYlhOYmJuVnRZbVZ5WFR0Y2NseHVaWGh3YjNKMElIUjVjR1VnVFdWemMyRm5aVkJoY21GdGN5QTlJSFI1Y0dWdlppQnRaWE56WVdkbFVHRnlZVzF6VzI1MWJXSmxjbDA3WEhKY2JtVjRjRzl5ZENCMGVYQmxJRWRoYldWTWIyZFFZWEpoYlhNZ1BTQjBlWEJsYjJZZ1oyRnRaVXh2WjFCaGNtRnRjMXR1ZFcxaVpYSmRPMXh5WEc1bGVIQnZjblFnZEhsd1pTQkhZVzFsVG1GdFpVeHZaMUJoY21GdGN5QTlJSFI1Y0dWdlppQm5ZVzFsVG1GdFpVeHZaMUJoY21GdGMxdHVkVzFpWlhKZE8xeHlYRzVsZUhCdmNuUWdkSGx3WlNCRGFHRnVaMlZhYjI1bFVHRnlZVzF6SUQwZ2RIbHdaVzltSUdOb1lXNW5aVnB2Ym1WUVlYSmhiWE5iYm5WdFltVnlYVHRjY2x4dVpYaHdiM0owSUhSNWNHVWdUbVYwZDI5eWF6WmtVR0Z5WVcxeklEMGdkSGx3Wlc5bUlHNWxkSGR2Y21zMlpGQmhjbUZ0YzF0dWRXMWlaWEpkTzF4eVhHNWNjbHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1VtVm5aWGhsY3lCN1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1ptbGxiR1J6T2lCemIzVnlZMlVzSUdsa0xDQmhZbWxzYVhSNUxDQjBZWEpuWlhRc0lHTmhjSFIxY21WY2NseHVJQ0FnS2lCdFlYUmphR1Z6T2lCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNYVnBjM0YxYjNWekwyTmhZM1JpYjNRdllteHZZaTl0WVdsdUwyUnZZM012VEc5blIzVnBaR1V1YldRak1UUXRibVYwZDI5eWEzTjBZWEowYzJOaGMzUnBibWRjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ2MzUmhjblJ6VlhOcGJtY29aajg2SUZCaGNtRnRjenhUZEdGeWRITlZjMmx1WjFCaGNtRnRjejRwT2lCU1pXZGxlRHhUZEdGeWRITlZjMmx1WjFCaGNtRnRjejRnZTF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbUlEMDlQU0FuZFc1a1pXWnBibVZrSnlsY2NseHVJQ0FnSUNBZ1ppQTlJSHQ5TzF4eVhHNGdJQ0FnVW1WblpYaGxjeTUyWVd4cFpHRjBaVkJoY21GdGN5aG1MQ0FuYzNSaGNuUnpWWE5wYm1jbkxDQnpkR0Z5ZEhOVmMybHVaMUJoY21GdGN5azdYSEpjYmlBZ0lDQmpiMjV6ZENCallYQjBkWEpsSUQwZ1VtVm5aWGhsY3k1MGNuVmxTV1pWYm1SbFptbHVaV1FvWmk1allYQjBkWEpsS1R0Y2NseHVJQ0FnSUd4bGRDQnpkSElnUFNCU1pXZGxlR1Z6TG0xaGVXSmxRMkZ3ZEhWeVpTaGpZWEIwZFhKbExDQW5kR2x0WlhOMFlXMXdKeXdnSjF4Y1hGeDVlMVJwYldWemRHRnRjSDBuS1NBclhISmNiaUFnSUNBZ0lDY2dNVFE2SnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2RwWkNjc0lHWXVhV1FzSUNkY1hGeGNlWHRCWW1sc2FYUjVRMjlrWlgwbktTQXJJQ2M2Snp0Y2NseHVYSEpjYmlBZ0lDQnBaaUFvWmk1emIzVnlZMlVnZkh3Z1ppNXBaQ0I4ZkNCbUxuUmhjbWRsZENCOGZDQmpZWEIwZFhKbEtWeHlYRzRnSUNBZ0lDQnpkSElnS3owZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKM052ZFhKalpTY3NJR1l1YzI5MWNtTmxMQ0FuTGlvL0p5a2dLeUFuSUhOMFlYSjBjeUIxYzJsdVp5QW5PMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaG1MbUZpYVd4cGRIa2dmSHdnWmk1MFlYSm5aWFFnZkh3Z1kyRndkSFZ5WlNsY2NseHVJQ0FnSUNBZ2MzUnlJQ3M5SUZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZGhZbWxzYVhSNUp5d2daaTVoWW1sc2FYUjVMQ0FuTGlvL0p5a2dLeUFuSUc5dUlDYzdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tHWXVkR0Z5WjJWMElIeDhJR05oY0hSMWNtVXBYSEpjYmlBZ0lDQWdJSE4wY2lBclBTQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuZEdGeVoyVjBKeXdnWmk1MFlYSm5aWFFzSUNjdUtqOG5LU0FySUNkY1hGeGNMaWM3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUZKbFoyVjRaWE11Y0dGeWMyVW9jM1J5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlHWnBaV3hrY3pvZ2MyOTFjbU5sU1dRc0lITnZkWEpqWlN3Z2FXUXNJR0ZpYVd4cGRIa3NJSFJoY21kbGRFbGtMQ0IwWVhKblpYUXNJR05oY0hSMWNtVmNjbHh1SUNBZ0tpQnRZWFJqYUdWek9pQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjWFZwYzNGMWIzVnpMMk5oWTNSaWIzUXZZbXh2WWk5dFlXbHVMMlJ2WTNNdlRHOW5SM1ZwWkdVdWJXUWpNVFV0Ym1WMGQyOXlhMkZpYVd4cGRIbGNjbHh1SUNBZ0tpQnRZWFJqYUdWek9pQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjWFZwYzNGMWIzVnpMMk5oWTNSaWIzUXZZbXh2WWk5dFlXbHVMMlJ2WTNNdlRHOW5SM1ZwWkdVdWJXUWpNVFl0Ym1WMGQyOXlhMkZ2WldGaWFXeHBkSGxjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1lXSnBiR2wwZVNobVB6b2dVR0Z5WVcxelBFRmlhV3hwZEhsUVlYSmhiWE0rS1RvZ1VtVm5aWGc4UVdKcGJHbDBlVkJoY21GdGN6NGdlMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJtSUQwOVBTQW5kVzVrWldacGJtVmtKeWxjY2x4dUlDQWdJQ0FnWmlBOUlIdDlPMXh5WEc0Z0lDQWdVbVZuWlhobGN5NTJZV3hwWkdGMFpWQmhjbUZ0Y3lobUxDQW5ZV0pwYkdsMGVTY3NJR0ZpYVd4cGRIbFFZWEpoYlhNcE8xeHlYRzRnSUNBZ1kyOXVjM1FnWTJGd2RIVnlaU0E5SUZKbFoyVjRaWE11ZEhKMVpVbG1WVzVrWldacGJtVmtLR1l1WTJGd2RIVnlaU2s3WEhKY2JpQWdJQ0JzWlhRZ2MzUnlJRDBnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0ozUnBiV1Z6ZEdGdGNDY3NJQ2RjWEZ4Y2VYdFVhVzFsYzNSaGJYQjlKeWtnSzF4eVhHNGdJQ0FnSUNBbklERmJOVFpkT2ljZ0t5QlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuYzI5MWNtTmxTV1FuTENBblhGeGNYSGw3VDJKcVpXTjBTV1I5SnlrZ0t5QW5PaWNnSzF4eVhHNGdJQ0FnSUNCU1pXZGxlR1Z6TG0xaGVXSmxRMkZ3ZEhWeVpTaGpZWEIwZFhKbExDQW5jMjkxY21ObEp5d2daaTV6YjNWeVkyVXNJQ2RiWGpwZEtqOG5LU0FySUNjNkp6dGNjbHh1WEhKY2JpQWdJQ0JwWmlBb1ppNXBaQ0I4ZkNCbUxtRmlhV3hwZEhrZ2ZId2daaTUwWVhKblpYUWdmSHdnWmk1MFlYSm5aWFJKWkNCOGZDQmpZWEIwZFhKbEtWeHlYRzRnSUNBZ0lDQnpkSElnS3owZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKMmxrSnl3Z1ppNXBaQ3dnSjF4Y1hGeDVlMEZpYVd4cGRIbERiMlJsZlNjcElDc2dKem9uTzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2htTG1GaWFXeHBkSGtnZkh3Z1ppNTBZWEpuWlhRZ2ZId2daaTUwWVhKblpYUkpaQ0I4ZkNCallYQjBkWEpsS1Z4eVhHNGdJQ0FnSUNCemRISWdLejBnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oyRmlhV3hwZEhrbkxDQm1MbUZpYVd4cGRIa3NJQ2RiWGpwZEtqOG5LU0FySUNjNkp6dGNjbHh1WEhKY2JpQWdJQ0JwWmlBb1ppNTBZWEpuWlhRZ2ZId2daaTUwWVhKblpYUkpaQ0I4ZkNCallYQjBkWEpsS1Z4eVhHNGdJQ0FnSUNCemRISWdLejBnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0ozUmhjbWRsZEVsa0p5d2dKMXhjWEZ4NWUwOWlhbVZqZEVsa2ZTY3BJQ3NnSnpvbk8xeHlYRzVjY2x4dUlDQWdJR2xtSUNobUxuUmhjbWRsZENCOGZDQmpZWEIwZFhKbEtWeHlYRzRnSUNBZ0lDQnpkSElnS3owZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKM1JoY21kbGRDY3NJR1l1ZEdGeVoyVjBMQ0FuVzE0NlhTby9KeWtnS3lBbk9pYzdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRkpsWjJWNFpYTXVjR0Z5YzJVb2MzUnlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUdacFpXeGtjem9nYzI5MWNtTmxTV1FzSUhOdmRYSmpaU3dnYVdRc0lHRmlhV3hwZEhrc0lIUmhjbWRsZEVsa0xDQjBZWEpuWlhRc0lHWnNZV2R6TENCNExDQjVMQ0I2TENCb1pXRmthVzVuTENCallYQjBkWEpsWEhKY2JpQWdJQ29nYldGMFkyaGxjem9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNGMWFYTnhkVzkxY3k5allXTjBZbTkwTDJKc2IySXZiV0ZwYmk5a2IyTnpMMHh2WjBkMWFXUmxMbTFrSXpFMUxXNWxkSGR2Y210aFltbHNhWFI1WEhKY2JpQWdJQ29nYldGMFkyaGxjem9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNGMWFYTnhkVzkxY3k5allXTjBZbTkwTDJKc2IySXZiV0ZwYmk5a2IyTnpMMHh2WjBkMWFXUmxMbTFrSXpFMkxXNWxkSGR2Y210aGIyVmhZbWxzYVhSNVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJR0ZpYVd4cGRIbEdkV3hzS0dZL09pQlFZWEpoYlhNOFFXSnBiR2wwZVVaMWJHeFFZWEpoYlhNK0tUb2dVbVZuWlhnOFFXSnBiR2wwZVVaMWJHeFFZWEpoYlhNK0lIdGNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BYSEpjYmlBZ0lDQWdJR1lnUFNCN2ZUdGNjbHh1SUNBZ0lGSmxaMlY0WlhNdWRtRnNhV1JoZEdWUVlYSmhiWE1vWml3Z0oyRmlhV3hwZEhsR2RXeHNKeXdnWVdKcGJHbDBlVVoxYkd4UVlYSmhiWE1wTzF4eVhHNGdJQ0FnWTI5dWMzUWdZMkZ3ZEhWeVpTQTlJRkpsWjJWNFpYTXVkSEoxWlVsbVZXNWtaV1pwYm1Wa0tHWXVZMkZ3ZEhWeVpTazdYSEpjYmlBZ0lDQmpiMjV6ZENCemRISWdQU0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBbmRHbHRaWE4wWVcxd0p5d2dKMXhjWEZ4NWUxUnBiV1Z6ZEdGdGNIMG5LU0FyWEhKY2JpQWdJQ0FnSUNjZ01WczFObDA2SnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2R6YjNWeVkyVkpaQ2NzSUdZdWMyOTFjbU5sU1dRc0lDZGNYRnhjZVh0UFltcGxZM1JKWkgwbktTQXJJQ2M2SnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2R6YjNWeVkyVW5MQ0JtTG5OdmRYSmpaU3dnSjF0ZU9sMHFQeWNwSUNzZ0p6b25JQ3RjY2x4dUlDQWdJQ0FnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oybGtKeXdnWmk1cFpDd2dKMXhjWEZ4NWUwRmlhV3hwZEhsRGIyUmxmU2NwSUNzZ0p6b25JQ3RjY2x4dUlDQWdJQ0FnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oyRmlhV3hwZEhrbkxDQm1MbUZpYVd4cGRIa3NJQ2RiWGpwZEtqOG5LU0FySUNjNkp5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkMFlYSm5aWFJKWkNjc0lHWXVkR0Z5WjJWMFNXUXNJQ2RjWEZ4Y2VYdFBZbXBsWTNSSlpIMG5LU0FySUNjNkp5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkMFlYSm5aWFFuTENCbUxuUmhjbWRsZEN3Z0oxdGVPbDBxUHljcElDc2dKem9uSUN0Y2NseHVJQ0FnSUNBZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKMlpzWVdkekp5d2daaTVtYkdGbmN5d2dKMXRlT2wwcVB5Y3BJQ3NnSnpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjJac1lXY3dKeXdnWmk1bWJHRm5NQ3dnSjF0ZU9sMHFQeWNwSUNzZ0p6b25JQ3RjY2x4dUlDQWdJQ0FnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oyWnNZV2N4Snl3Z1ppNW1iR0ZuTVN3Z0oxdGVPbDBxUHljcElDc2dKem9uSUN0Y2NseHVJQ0FnSUNBZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKMlpzWVdjeUp5d2daaTVtYkdGbk1pd2dKMXRlT2wwcVB5Y3BJQ3NnSnpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjJac1lXY3pKeXdnWmk1bWJHRm5NeXdnSjF0ZU9sMHFQeWNwSUNzZ0p6b25JQ3RjY2x4dUlDQWdJQ0FnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oyWnNZV2MwSnl3Z1ppNW1iR0ZuTkN3Z0oxdGVPbDBxUHljcElDc2dKem9uSUN0Y2NseHVJQ0FnSUNBZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKMlpzWVdjMUp5d2daaTVtYkdGbk5Td2dKMXRlT2wwcVB5Y3BJQ3NnSnpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjJac1lXYzJKeXdnWmk1bWJHRm5OaXdnSjF0ZU9sMHFQeWNwSUNzZ0p6b25JQ3RjY2x4dUlDQWdJQ0FnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oyWnNZV2MzSnl3Z1ppNW1iR0ZuTnl3Z0oxdGVPbDBxUHljcElDc2dKem9uSUN0Y2NseHVJQ0FnSUNBZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKMlpzWVdjNEp5d2daaTVtYkdGbk9Dd2dKMXRlT2wwcVB5Y3BJQ3NnSnpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjJac1lXYzVKeXdnWmk1bWJHRm5PU3dnSjF0ZU9sMHFQeWNwSUNzZ0p6b25JQ3RjY2x4dUlDQWdJQ0FnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oyWnNZV2N4TUNjc0lHWXVabXhoWnpFd0xDQW5XMTQ2WFNvL0p5a2dLeUFuT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuWm14aFp6RXhKeXdnWmk1bWJHRm5NVEVzSUNkYlhqcGRLajhuS1NBcklDYzZKeUFyWEhKY2JpQWdJQ0FnSUZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZG1iR0ZuTVRJbkxDQm1MbVpzWVdjeE1pd2dKMXRlT2wwcVB5Y3BJQ3NnSnpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjJac1lXY3hNeWNzSUdZdVpteGhaekV6TENBblcxNDZYU28vSnlrZ0t5QW5PaWNnSzF4eVhHNGdJQ0FnSUNCU1pXZGxlR1Z6TG0xaGVXSmxRMkZ3ZEhWeVpTaGpZWEIwZFhKbExDQW5abXhoWnpFMEp5d2daaTVtYkdGbk1UTXNJQ2RiWGpwZEtqOG5LU0FySUNjNkp5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViM0IwYVc5dVlXd29VbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjNSaGNtZGxkRWh3Snl3Z1ppNTBZWEpuWlhSSWNDd2dKMXhjWEZ4NWUwWnNiMkYwZlNjcEtTQXJJQ2M2SnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWIzQjBhVzl1WVd3b1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKM1JoY21kbGRFMWhlRWh3Snl3Z1ppNTBZWEpuWlhSTllYaEljQ3dnSjF4Y1hGeDVlMFpzYjJGMGZTY3BLU0FySUNjNkp5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViM0IwYVc5dVlXd29VbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjNSaGNtZGxkRTF3Snl3Z1ppNTBZWEpuWlhSTmNDd2dKMXhjWEZ4NWUwWnNiMkYwZlNjcEtTQXJJQ2M2SnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWIzQjBhVzl1WVd3b1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKM1JoY21kbGRFMWhlRTF3Snl3Z1ppNTBZWEpuWlhSTllYaE5jQ3dnSjF4Y1hGeDVlMFpzYjJGMGZTY3BLU0FySUNjNkp5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViM0IwYVc5dVlXd29KMXhjWEZ4NWUwWnNiMkYwZlNjcElDc2dKem9uSUNzZ0x5OGdWR0Z5WjJWMElGUlFYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViM0IwYVc5dVlXd29KMXhjWEZ4NWUwWnNiMkYwZlNjcElDc2dKem9uSUNzZ0x5OGdWR0Z5WjJWMElFMWhlQ0JVVUZ4eVhHNGdJQ0FnSUNCU1pXZGxlR1Z6TG05d2RHbHZibUZzS0ZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZDBZWEpuWlhSWUp5d2daaTUwWVhKblpYUllMQ0FuWEZ4Y1hIbDdSbXh2WVhSOUp5a3BJQ3NnSnpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXZjSFJwYjI1aGJDaFNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuZEdGeVoyVjBXU2NzSUdZdWRHRnlaMlYwV1N3Z0oxeGNYRng1ZTBac2IyRjBmU2NwS1NBcklDYzZKeUFyWEhKY2JpQWdJQ0FnSUZKbFoyVjRaWE11YjNCMGFXOXVZV3dvVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0ozUmhjbWRsZEZvbkxDQm1MblJoY21kbGRGb3NJQ2RjWEZ4Y2VYdEdiRzloZEgwbktTa2dLeUFuT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtOXdkR2x2Ym1Gc0tGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2QwWVhKblpYUklaV0ZrYVc1bkp5d2daaTUwWVhKblpYUklaV0ZrYVc1bkxDQW5YRnhjWEhsN1JteHZZWFI5SnlrcElDc2dKem9uSUN0Y2NseHVJQ0FnSUNBZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKMmh3Snl3Z1ppNW9jQ3dnSjF4Y1hGeDVlMFpzYjJGMGZTY3BJQ3NnSnpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjIxaGVFaHdKeXdnWmk1dFlYaEljQ3dnSjF4Y1hGeDVlMFpzYjJGMGZTY3BJQ3NnSnpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjIxd0p5d2daaTV0Y0N3Z0oxeGNYRng1ZTBac2IyRjBmU2NwSUNzZ0p6b25JQ3RjY2x4dUlDQWdJQ0FnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oyMWhlRTF3Snl3Z1ppNXRZWGhOY0N3Z0oxeGNYRng1ZTBac2IyRjBmU2NwSUNzZ0p6b25JQ3RjY2x4dUlDQWdJQ0FnSjF4Y1hGeDVlMFpzYjJGMGZUb25JQ3NnTHk4Z1UyOTFjbU5sSUZSUVhISmNiaUFnSUNBZ0lDZGNYRnhjZVh0R2JHOWhkSDA2SnlBcklDOHZJRk52ZFhKalpTQk5ZWGdnVkZCY2NseHVJQ0FnSUNBZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKM2duTENCbUxuZ3NJQ2RjWEZ4Y2VYdEdiRzloZEgwbktTQXJJQ2M2SnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2Q1Snl3Z1ppNTVMQ0FuWEZ4Y1hIbDdSbXh2WVhSOUp5a2dLeUFuT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuZWljc0lHWXVlaXdnSjF4Y1hGeDVlMFpzYjJGMGZTY3BJQ3NnSnpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjJobFlXUnBibWNuTENCbUxtaGxZV1JwYm1jc0lDZGNYRnhjZVh0R2JHOWhkSDBuS1NBcklDYzZKeUFyWEhKY2JpQWdJQ0FnSUNjdUtqOGtKenNnTHk4Z1ZXNXJibTkzYmlCc1lYTjBJR1pwWld4a1hISmNiaUFnSUNCeVpYUjFjbTRnVW1WblpYaGxjeTV3WVhKelpTaHpkSElwTzF4eVhHNGdJSDFjY2x4dVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJR1pwWld4a2N6b2dkR0Z5WjJWMFNXUXNJSFJoY21kbGRDd2dhV1FzSUdOaGNIUjFjbVZjY2x4dUlDQWdLaUJ0WVhSamFHVnpPaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y1hWcGMzRjFiM1Z6TDJOaFkzUmliM1F2WW14dllpOXRZV2x1TDJSdlkzTXZURzluUjNWcFpHVXViV1FqTVdJdGJtVjBkMjl5YTNSaGNtZGxkR2xqYjI0dGFHVmhaQzF0WVhKclpYSnpYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUdobFlXUk5ZWEpyWlhJb1pqODZJRkJoY21GdGN6eElaV0ZrVFdGeWEyVnlVR0Z5WVcxelBpazZJRkpsWjJWNFBFaGxZV1JOWVhKclpYSlFZWEpoYlhNK0lIdGNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BYSEpjYmlBZ0lDQWdJR1lnUFNCN2ZUdGNjbHh1SUNBZ0lGSmxaMlY0WlhNdWRtRnNhV1JoZEdWUVlYSmhiWE1vWml3Z0oyaGxZV1JOWVhKclpYSW5MQ0JvWldGa1RXRnlhMlZ5VUdGeVlXMXpLVHRjY2x4dUlDQWdJR052Ym5OMElHTmhjSFIxY21VZ1BTQlNaV2RsZUdWekxuUnlkV1ZKWmxWdVpHVm1hVzVsWkNobUxtTmhjSFIxY21VcE8xeHlYRzRnSUNBZ1kyOXVjM1FnYzNSeUlEMGdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjNScGJXVnpkR0Z0Y0Njc0lDZGNYRnhjZVh0VWFXMWxjM1JoYlhCOUp5a2dLMXh5WEc0Z0lDQWdJQ0FuSURGQ09pY2dLMXh5WEc0Z0lDQWdJQ0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBbmRHRnlaMlYwU1dRbkxDQm1MblJoY21kbGRFbGtMQ0FuWEZ4Y1hIbDdUMkpxWldOMFNXUjlKeWtnS3lBbk9pY2dLMXh5WEc0Z0lDQWdJQ0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBbmRHRnlaMlYwSnl3Z1ppNTBZWEpuWlhRc0lDZGJYanBkS2o4bktTQXJJQ2M2TGk0dUxqb3VMaTR1T2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuYVdRbkxDQm1MbWxrTENBbkxpNHVMaWNwSUNzZ0p6b25PMXh5WEc0Z0lDQWdjbVYwZFhKdUlGSmxaMlY0WlhNdWNHRnljMlVvYzNSeUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHZJR1pwWld4a2N6b2dibUZ0WlN3Z1kyRndkSFZ5WlZ4eVhHNGdJQzh2SUcxaGRHTm9aWE02SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eGRXbHpjWFZ2ZFhNdlkyRmpkR0p2ZEM5aWJHOWlMMjFoYVc0dlpHOWpjeTlNYjJkSGRXbGtaUzV0WkNNd015MWhaR1JqYjIxaVlYUmhiblJjY2x4dUlDQnpkR0YwYVdNZ1lXUmtaV1JEYjIxaVlYUmhiblFvWmo4NklGQmhjbUZ0Y3p4QlpHUmxaRU52YldKaGRHRnVkRkJoY21GdGN6NHBPaUJTWldkbGVEeEJaR1JsWkVOdmJXSmhkR0Z1ZEZCaGNtRnRjejRnZTF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbUlEMDlQU0FuZFc1a1pXWnBibVZrSnlsY2NseHVJQ0FnSUNBZ1ppQTlJSHQ5TzF4eVhHNGdJQ0FnVW1WblpYaGxjeTUyWVd4cFpHRjBaVkJoY21GdGN5aG1MQ0FuWVdSa1pXUkRiMjFpWVhSaGJuUW5MQ0JoWkdSbFpFTnZiV0poZEdGdWRGQmhjbUZ0Y3lrN1hISmNiaUFnSUNCamIyNXpkQ0JqWVhCMGRYSmxJRDBnVW1WblpYaGxjeTUwY25WbFNXWlZibVJsWm1sdVpXUW9aaTVqWVhCMGRYSmxLVHRjY2x4dUlDQWdJR052Ym5OMElITjBjaUE5SUZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZDBhVzFsYzNSaGJYQW5MQ0FuWEZ4Y1hIbDdWR2x0WlhOMFlXMXdmU2NwSUN0Y2NseHVJQ0FnSUNBZ0p5QXdNenBjWEZ4Y2VYdFBZbXBsWTNSSlpIMDZRV1JrWldRZ2JtVjNJR052YldKaGRHRnVkQ0FuSUN0Y2NseHVJQ0FnSUNBZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKMjVoYldVbkxDQm1MbTVoYldVc0lDY3VLajhuS1NBcklDZGNYRnhjTGljN1hISmNiaUFnSUNCeVpYUjFjbTRnVW1WblpYaGxjeTV3WVhKelpTaHpkSElwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1ptbGxiR1J6T2lCcFpDd2dibUZ0WlN3Z2FIQXNJSGdzSUhrc0lIb3NJRzV3WTBsa0xDQmpZWEIwZFhKbFhISmNiaUFnSUNvZ2JXRjBZMmhsY3pvZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzRjFhWE54ZFc5MWN5OWpZV04wWW05MEwySnNiMkl2YldGcGJpOWtiMk56TDB4dlowZDFhV1JsTG0xa0l6QXpMV0ZrWkdOdmJXSmhkR0Z1ZEZ4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5QmhaR1JsWkVOdmJXSmhkR0Z1ZEVaMWJHd29YSEpjYmlBZ0lDQWdJR1kvT2lCUVlYSmhiWE04UVdSa1pXUkRiMjFpWVhSaGJuUkdkV3hzVUdGeVlXMXpQaXhjY2x4dUlDQXBPaUJTWldkbGVEeEJaR1JsWkVOdmJXSmhkR0Z1ZEVaMWJHeFFZWEpoYlhNK0lIdGNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BYSEpjYmlBZ0lDQWdJR1lnUFNCN2ZUdGNjbHh1SUNBZ0lGSmxaMlY0WlhNdWRtRnNhV1JoZEdWUVlYSmhiWE1vWml3Z0oyRmtaR1ZrUTI5dFltRjBZVzUwUm5Wc2JDY3NJR0ZrWkdWa1EyOXRZbUYwWVc1MFJuVnNiRkJoY21GdGN5azdYSEpjYmlBZ0lDQmpiMjV6ZENCallYQjBkWEpsSUQwZ1VtVm5aWGhsY3k1MGNuVmxTV1pWYm1SbFptbHVaV1FvWmk1allYQjBkWEpsS1R0Y2NseHVJQ0FnSUdOdmJuTjBJSE4wY2lBOUlGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2QwYVcxbGMzUmhiWEFuTENBblhGeGNYSGw3VkdsdFpYTjBZVzF3ZlNjcElDdGNjbHh1SUNBZ0lDQWdKeUF3TXpvbklDc2dVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjJsa0p5d2daaTVwWkN3Z0oxeGNYRng1ZTA5aWFtVmpkRWxrZlNjcElDdGNjbHh1SUNBZ0lDQWdKenBCWkdSbFpDQnVaWGNnWTI5dFltRjBZVzUwSUNjZ0t5QlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuYm1GdFpTY3NJR1l1Ym1GdFpTd2dKMXRlT2wwcVB5Y3BJQ3RjY2x4dUlDQWdJQ0FnSjF4Y1hGd3VJSHN5ZlVwdllqb2dKeUFySUZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZHFiMkluTENCbUxtcHZZaXdnSjF0ZU9sMHFQeWNwSUN0Y2NseHVJQ0FnSUNBZ0p5Qk1aWFpsYkRvZ0p5QXJJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkc1pYWmxiQ2NzSUdZdWJHVjJaV3dzSUNkYlhqcGRLajhuS1NBclhISmNiaUFnSUNBZ0lDY2dUV0Y0SUVoUU9pQW5JQ3NnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oyaHdKeXdnWmk1b2NDd2dKMXN3TFRsZEt5Y3BJQ3NnSjF4Y0xpY2dLMXh5WEc0Z0lDQWdJQ0FuTGlvL1VHOXpPaUJjWEZ4Y0tDY2dLMXh5WEc0Z0lDQWdJQ0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBbmVDY3NJR1l1ZUN3Z0oxeGNYRng1ZTBac2IyRjBmU2NwSUNzZ0p5d25JQ3RjY2x4dUlDQWdJQ0FnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oza25MQ0JtTG5rc0lDZGNYRnhjZVh0R2JHOWhkSDBuS1NBcklDY3NKeUFyWEhKY2JpQWdJQ0FnSUZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZDZKeXdnWmk1NkxDQW5YRnhjWEhsN1JteHZZWFI5SnlrZ0t5QW5YRnhjWENrbklDdGNjbHh1SUNBZ0lDQWdKeWcvT2lCY1hGeGNLQ2NnS3lCU1pXZGxlR1Z6TG0xaGVXSmxRMkZ3ZEhWeVpTaGpZWEIwZFhKbExDQW5ibkJqU1dRbkxDQm1MbTV3WTBsa0xDQW5MaW8vSnlrZ0t5QW5YRnhjWENrcFAxeGNYRnd1Snp0Y2NseHVJQ0FnSUhKbGRIVnliaUJTWldkbGVHVnpMbkJoY25ObEtITjBjaWs3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCbWFXVnNaSE02SUdsa0xDQnVZVzFsTENCb2NDd2dZMkZ3ZEhWeVpWeHlYRzRnSUNBcUlHMWhkR05vWlhNNklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXhkV2x6Y1hWdmRYTXZZMkZqZEdKdmRDOWliRzlpTDIxaGFXNHZaRzlqY3k5TWIyZEhkV2xrWlM1dFpDTXdOQzF5WlcxdmRtVmpiMjFpWVhSaGJuUmNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nY21WdGIzWnBibWREYjIxaVlYUmhiblFvWmo4NklGQmhjbUZ0Y3p4U1pXMXZkbWx1WjBOdmJXSmhkR0Z1ZEZCaGNtRnRjejRwT2lCU1pXZGxlRHhTWlcxdmRtbHVaME52YldKaGRHRnVkRkJoY21GdGN6NGdlMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJtSUQwOVBTQW5kVzVrWldacGJtVmtKeWxjY2x4dUlDQWdJQ0FnWmlBOUlIdDlPMXh5WEc0Z0lDQWdVbVZuWlhobGN5NTJZV3hwWkdGMFpWQmhjbUZ0Y3lobUxDQW5jbVZ0YjNacGJtZERiMjFpWVhSaGJuUW5MQ0J5WlcxdmRtbHVaME52YldKaGRHRnVkRkJoY21GdGN5azdYSEpjYmlBZ0lDQmpiMjV6ZENCallYQjBkWEpsSUQwZ1VtVm5aWGhsY3k1MGNuVmxTV1pWYm1SbFptbHVaV1FvWmk1allYQjBkWEpsS1R0Y2NseHVJQ0FnSUdOdmJuTjBJSE4wY2lBOUlGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2QwYVcxbGMzUmhiWEFuTENBblhGeGNYSGw3VkdsdFpYTjBZVzF3ZlNjcElDdGNjbHh1SUNBZ0lDQWdKeUF3TkRvbklDc2dVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjJsa0p5d2dKMXhjWEZ4NWUwOWlhbVZqZEVsa2ZTY3BJQ3RjY2x4dUlDQWdJQ0FnSnpwU1pXMXZkbWx1WnlCamIyMWlZWFJoYm5RZ0p5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkdVlXMWxKeXdnWmk1dVlXMWxMQ0FuTGlvL0p5a2dLeUFuWEZ4Y1hDNG5JQ3RjY2x4dUlDQWdJQ0FnSnk0cVAwMWhlQ0JJVURvZ0p5QXJJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkb2NDY3NJR1l1YUhBc0lDZGJNQzA1WFNzbktTQXJJQ2RjWEM0bklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXZjSFJwYjI1aGJDZ25MaW8vVUc5ek9pQmNYRnhjS0NjZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuZUNjc0lHWXVlQ3dnSjF4Y1hGeDVlMFpzYjJGMGZTY3BJQ3NnSnl3bklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjNrbkxDQm1MbmtzSUNkY1hGeGNlWHRHYkc5aGRIMG5LU0FySUNjc0p5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkNkp5d2daaTU2TENBblhGeGNYSGw3Um14dllYUjlKeWtnS3lBblhGeGNYQ2tuS1R0Y2NseHVJQ0FnSUhKbGRIVnliaUJTWldkbGVHVnpMbkJoY25ObEtITjBjaWs3WEhKY2JpQWdmVnh5WEc1Y2NseHVYSEpjYmlBZ0x5OGdabWxsYkdSek9pQjBZWEpuWlhSSlpDd2dkR0Z5WjJWMExDQmxabVpsWTNRc0lITnZkWEpqWlN3Z1pIVnlZWFJwYjI0c0lHTmhjSFIxY21WY2NseHVJQ0F2THlCdFlYUmphR1Z6T2lCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNYVnBjM0YxYjNWekwyTmhZM1JpYjNRdllteHZZaTl0WVdsdUwyUnZZM012VEc5blIzVnBaR1V1YldRak1XRXRibVYwZDI5eWEySjFabVpjY2x4dUlDQnpkR0YwYVdNZ1oyRnBibk5GWm1abFkzUW9aajg2SUZCaGNtRnRjenhIWVdsdWMwVm1abVZqZEZCaGNtRnRjejRwT2lCU1pXZGxlRHhIWVdsdWMwVm1abVZqZEZCaGNtRnRjejRnZTF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbUlEMDlQU0FuZFc1a1pXWnBibVZrSnlsY2NseHVJQ0FnSUNBZ1ppQTlJSHQ5TzF4eVhHNGdJQ0FnVW1WblpYaGxjeTUyWVd4cFpHRjBaVkJoY21GdGN5aG1MQ0FuWjJGcGJuTkZabVpsWTNRbkxDQm5ZV2x1YzBWbVptVmpkRkJoY21GdGN5azdYSEpjYmlBZ0lDQmpiMjV6ZENCallYQjBkWEpsSUQwZ1VtVm5aWGhsY3k1MGNuVmxTV1pWYm1SbFptbHVaV1FvWmk1allYQjBkWEpsS1R0Y2NseHVJQ0FnSUdOdmJuTjBJSE4wY2lBOUlGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2QwYVcxbGMzUmhiWEFuTENBblhGeGNYSGw3VkdsdFpYTjBZVzF3ZlNjcElDdGNjbHh1SUNBZ0lDQWdKeUF4UVRvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjNSaGNtZGxkRWxrSnl3Z1ppNTBZWEpuWlhSSlpDd2dKMXhjWEZ4NWUwOWlhbVZqZEVsa2ZTY3BJQ3NnSnpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjNSaGNtZGxkQ2NzSUdZdWRHRnlaMlYwTENBbkxpby9KeWtnSzF4eVhHNGdJQ0FnSUNBbklHZGhhVzV6SUhSb1pTQmxabVpsWTNRZ2IyWWdKeUFyWEhKY2JpQWdJQ0FnSUZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZGxabVpsWTNRbkxDQm1MbVZtWm1WamRDd2dKeTRxUHljcElDdGNjbHh1SUNBZ0lDQWdKeUJtY205dElDY2dLMXh5WEc0Z0lDQWdJQ0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBbmMyOTFjbU5sSnl3Z1ppNXpiM1Z5WTJVc0lDY3VLajhuS1NBclhISmNiaUFnSUNBZ0lDY2dabTl5SUNjZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuWkhWeVlYUnBiMjRuTENCbUxtUjFjbUYwYVc5dUxDQW5YRnhjWEhsN1JteHZZWFI5SnlrZ0sxeHlYRzRnSUNBZ0lDQW5JRk5sWTI5dVpITmNYRnhjTGljN1hISmNiaUFnSUNCeVpYUjFjbTRnVW1WblpYaGxjeTV3WVhKelpTaHpkSElwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1VISmxabVZ5SUdkaGFXNXpSV1ptWldOMElHOTJaWElnZEdocGN5Qm1kVzVqZEdsdmJpQjFibXhsYzNNZ2VXOTFJSEpsWVd4c2VTQnVaV1ZrSUdWNGRISmhJR1JoZEdFdVhISmNiaUFnSUNvZ1ptbGxiR1J6T2lCMFlYSm5aWFJKWkN3Z2RHRnlaMlYwTENCcWIySXNJR2h3TENCdFlYaEljQ3dnYlhBc0lHMWhlRTF3TENCNExDQjVMQ0I2TENCb1pXRmthVzVuTEZ4eVhHNGdJQ0FxSUNBZ0lDQWdJQ0FnWkdGMFlUQXNJR1JoZEdFeExDQmtZWFJoTWl3Z1pHRjBZVE1zSUdSaGRHRTBYSEpjYmlBZ0lDb2diV0YwWTJobGN6b2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0YxYVhOeGRXOTFjeTlqWVdOMFltOTBMMkpzYjJJdmJXRnBiaTlrYjJOekwweHZaMGQxYVdSbExtMWtJekkyTFc1bGRIZHZjbXR6ZEdGMGRYTmxabVpsWTNSelhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJSE4wWVhSMWMwVm1abVZqZEVWNGNHeHBZMmwwS0Z4eVhHNGdJQ0FnSUNCbVB6b2dVR0Z5WVcxelBGTjBZWFIxYzBWbVptVmpkRVY0Y0d4cFkybDBVR0Z5WVcxelBpeGNjbHh1SUNBcE9pQlNaV2RsZUR4VGRHRjBkWE5GWm1abFkzUkZlSEJzYVdOcGRGQmhjbUZ0Y3o0Z2UxeHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQm1JRDA5UFNBbmRXNWtaV1pwYm1Wa0p5bGNjbHh1SUNBZ0lDQWdaaUE5SUh0OU8xeHlYRzRnSUNBZ1VtVm5aWGhsY3k1MllXeHBaR0YwWlZCaGNtRnRjeWhtTENBbmMzUmhkSFZ6UldabVpXTjBSWGh3YkdsamFYUW5MQ0J6ZEdGMGRYTkZabVpsWTNSRmVIQnNhV05wZEZCaGNtRnRjeWs3WEhKY2JpQWdJQ0JqYjI1emRDQmpZWEIwZFhKbElEMGdVbVZuWlhobGN5NTBjblZsU1daVmJtUmxabWx1WldRb1ppNWpZWEIwZFhKbEtUdGNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQnJSbWxsYkdRZ1BTQW5MaW8vT2ljN1hISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ2MzUnlJRDBnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0ozUnBiV1Z6ZEdGdGNDY3NJQ2RjWEZ4Y2VYdFVhVzFsYzNSaGJYQjlKeWtnSzF4eVhHNGdJQ0FnSUNBbklESTJPaWNnSzF4eVhHNGdJQ0FnSUNCU1pXZGxlR1Z6TG0xaGVXSmxRMkZ3ZEhWeVpTaGpZWEIwZFhKbExDQW5kR0Z5WjJWMFNXUW5MQ0JtTG5SaGNtZGxkRWxrTENBblhGeGNYSGw3VDJKcVpXTjBTV1I5SnlrZ0t5QW5PaWNnSzF4eVhHNGdJQ0FnSUNCU1pXZGxlR1Z6TG0xaGVXSmxRMkZ3ZEhWeVpTaGpZWEIwZFhKbExDQW5kR0Z5WjJWMEp5d2daaTUwWVhKblpYUXNJQ2RiWGpwZEtqOG5LU0FySUNjNkp5QXJYSEpjYmlBZ0lDQWdJQ2RiTUMwNVFTMUdYWHN3TERaOUp5QXJJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkcWIySW5MQ0JtTG1wdllpd2dKMXN3TFRsQkxVWmRlekFzTW4wbktTQXJJQ2M2SnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2RvY0Njc0lHWXVhSEFzSUNkY1hGeGNlWHRHYkc5aGRIMG5LU0FySUNjNkp5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkdFlYaEljQ2NzSUdZdWJXRjRTSEFzSUNkY1hGeGNlWHRHYkc5aGRIMG5LU0FySUNjNkp5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkdGNDY3NJR1l1YlhBc0lDZGNYRnhjZVh0R2JHOWhkSDBuS1NBcklDYzZKeUFyWEhKY2JpQWdJQ0FnSUZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZHRZWGhOY0Njc0lHWXViV0Y0VFhBc0lDZGNYRnhjZVh0R2JHOWhkSDBuS1NBcklDYzZKeUFyWEhKY2JpQWdJQ0FnSUd0R2FXVnNaQ0FySUM4dklIUndJR3h2YkZ4eVhHNGdJQ0FnSUNCclJtbGxiR1FnS3lBdkx5QnRZWGdnZEhBZ1pYaDBjbUVnYkc5c1hISmNiaUFnSUNBZ0lDOHZJSGdzSUhrc0lIb2dhR1ZoWkdsdVp5QnRZWGtnWW1VZ1lteGhibXRjY2x4dUlDQWdJQ0FnVW1WblpYaGxjeTV2Y0hScGIyNWhiQ2hTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBbmVDY3NJR1l1ZUN3Z0oxeGNYRng1ZTBac2IyRjBmU2NwS1NBcklDYzZKeUFyWEhKY2JpQWdJQ0FnSUZKbFoyVjRaWE11YjNCMGFXOXVZV3dvVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oza25MQ0JtTG5rc0lDZGNYRnhjZVh0R2JHOWhkSDBuS1NrZ0t5QW5PaWNnSzF4eVhHNGdJQ0FnSUNCU1pXZGxlR1Z6TG05d2RHbHZibUZzS0ZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZDZKeXdnWmk1NkxDQW5YRnhjWEhsN1JteHZZWFI5SnlrcElDc2dKem9uSUN0Y2NseHVJQ0FnSUNBZ1VtVm5aWGhsY3k1dmNIUnBiMjVoYkNoU1pXZGxlR1Z6TG0xaGVXSmxRMkZ3ZEhWeVpTaGpZWEIwZFhKbExDQW5hR1ZoWkdsdVp5Y3NJR1l1YUdWaFpHbHVaeXdnSjF4Y1hGeDVlMFpzYjJGMGZTY3BLU0FySUNjNkp5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNka1lYUmhNQ2NzSUdZdVpHRjBZVEFzSUNkYlhqcGRLajhuS1NBcklDYzZKeUFyWEhKY2JpQWdJQ0FnSUZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZGtZWFJoTVNjc0lHWXVaR0YwWVRFc0lDZGJYanBkS2o4bktTQXJJQ2M2SnlBclhISmNiaUFnSUNBZ0lDOHZJR1JoZEdFeUxDQXpMQ0EwSUcxaGVTQnViM1FnWlhocGMzUWdZVzVrSUhSb1pTQnNhVzVsSUcxaGVTQjBaWEp0YVc1aGRHVXVYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViM0IwYVc5dVlXd29VbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjJSaGRHRXlKeXdnWmk1a1lYUmhNaXdnSjF0ZU9sMHFQeWNwSUNzZ0p6b25LU0FyWEhKY2JpQWdJQ0FnSUZKbFoyVjRaWE11YjNCMGFXOXVZV3dvVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oyUmhkR0V6Snl3Z1ppNWtZWFJoTXl3Z0oxdGVPbDBxUHljcElDc2dKem9uS1NBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWIzQjBhVzl1WVd3b1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKMlJoZEdFMEp5d2daaTVrWVhSaE5Dd2dKMXRlT2wwcVB5Y3BJQ3NnSnpvbktUdGNjbHh1SUNBZ0lISmxkSFZ5YmlCU1pXZGxlR1Z6TG5CaGNuTmxLSE4wY2lrN1hISmNiaUFnZlZ4eVhHNWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nWm1sbGJHUnpPaUIwWVhKblpYUkpaQ3dnZEdGeVoyVjBMQ0JsWm1abFkzUXNJSE52ZFhKalpTd2dZMkZ3ZEhWeVpWeHlYRzRnSUNBcUlHMWhkR05vWlhNNklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXhkV2x6Y1hWdmRYTXZZMkZqZEdKdmRDOWliRzlpTDIxaGFXNHZaRzlqY3k5TWIyZEhkV2xrWlM1dFpDTXhaUzF1WlhSM2IzSnJZblZtWm5KbGJXOTJaVnh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBZWFJwWXlCc2IzTmxjMFZtWm1WamRDaG1Qem9nVUdGeVlXMXpQRXh2YzJWelJXWm1aV04wVUdGeVlXMXpQaWs2SUZKbFoyVjRQRXh2YzJWelJXWm1aV04wVUdGeVlXMXpQaUI3WEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdZZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1Z4eVhHNGdJQ0FnSUNCbUlEMGdlMzA3WEhKY2JpQWdJQ0JTWldkbGVHVnpMblpoYkdsa1lYUmxVR0Z5WVcxektHWXNJQ2RzYjNObGMwVm1abVZqZENjc0lHeHZjMlZ6UldabVpXTjBVR0Z5WVcxektUdGNjbHh1SUNBZ0lHTnZibk4wSUdOaGNIUjFjbVVnUFNCU1pXZGxlR1Z6TG5SeWRXVkpabFZ1WkdWbWFXNWxaQ2htTG1OaGNIUjFjbVVwTzF4eVhHNGdJQ0FnWTI5dWMzUWdjM1J5SUQwZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKM1JwYldWemRHRnRjQ2NzSUNkY1hGeGNlWHRVYVcxbGMzUmhiWEI5SnlrZ0sxeHlYRzRnSUNBZ0lDQW5JREZGT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuZEdGeVoyVjBTV1FuTENCbUxuUmhjbWRsZEVsa0xDQW5YRnhjWEhsN1QySnFaV04wU1dSOUp5a2dLeUFuT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuZEdGeVoyVjBKeXdnWmk1MFlYSm5aWFFzSUNjdUtqOG5LU0FyWEhKY2JpQWdJQ0FnSUNjZ2JHOXpaWE1nZEdobElHVm1abVZqZENCdlppQW5JQ3RjY2x4dUlDQWdJQ0FnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oyVm1abVZqZENjc0lHWXVaV1ptWldOMExDQW5MaW8vSnlrZ0sxeHlYRzRnSUNBZ0lDQW5JR1p5YjIwZ0p5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkemIzVnlZMlVuTENCbUxuTnZkWEpqWlN3Z0p5NHFQeWNwSUNzZ0oxeGNYRnd1Snp0Y2NseHVJQ0FnSUhKbGRIVnliaUJTWldkbGVHVnpMbkJoY25ObEtITjBjaWs3WEhKY2JpQWdmVnh5WEc1Y2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dabWxsYkdSek9pQnpiM1Z5WTJVc0lITnZkWEpqWlVsa0xDQjBZWEpuWlhRc0lIUmhjbWRsZEVsa0xDQnBaQ3dnWTJGd2RIVnlaVnh5WEc0Z0lDQXFJRzFoZEdOb1pYTTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl4ZFdsemNYVnZkWE12WTJGamRHSnZkQzlpYkc5aUwyMWhhVzR2Wkc5amN5OU1iMmRIZFdsa1pTNXRaQ015TXkxdVpYUjNiM0pyZEdWMGFHVnlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUhSbGRHaGxjaWhtUHpvZ1VHRnlZVzF6UEZSbGRHaGxjbEJoY21GdGN6NHBPaUJTWldkbGVEeFVaWFJvWlhKUVlYSmhiWE0rSUh0Y2NseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1ppQTlQVDBnSjNWdVpHVm1hVzVsWkNjcFhISmNiaUFnSUNBZ0lHWWdQU0I3ZlR0Y2NseHVJQ0FnSUZKbFoyVjRaWE11ZG1Gc2FXUmhkR1ZRWVhKaGJYTW9aaXdnSjNSbGRHaGxjaWNzSUhSbGRHaGxjbEJoY21GdGN5azdYSEpjYmlBZ0lDQmpiMjV6ZENCallYQjBkWEpsSUQwZ1VtVm5aWGhsY3k1MGNuVmxTV1pWYm1SbFptbHVaV1FvWmk1allYQjBkWEpsS1R0Y2NseHVJQ0FnSUdOdmJuTjBJSE4wY2lBOUlGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2QwYVcxbGMzUmhiWEFuTENBblhGeGNYSGw3VkdsdFpYTjBZVzF3ZlNjcElDdGNjbHh1SUNBZ0lDQWdKeUF5TXpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjNOdmRYSmpaVWxrSnl3Z1ppNXpiM1Z5WTJWSlpDd2dKMXhjWEZ4NWUwOWlhbVZqZEVsa2ZTY3BJQ3NnSnpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjNOdmRYSmpaU2NzSUdZdWMyOTFjbU5sTENBblcxNDZYU28vSnlrZ0t5QW5PaWNnSzF4eVhHNGdJQ0FnSUNCU1pXZGxlR1Z6TG0xaGVXSmxRMkZ3ZEhWeVpTaGpZWEIwZFhKbExDQW5kR0Z5WjJWMFNXUW5MQ0JtTG5SaGNtZGxkRWxrTENBblhGeGNYSGw3VDJKcVpXTjBTV1I5SnlrZ0t5QW5PaWNnSzF4eVhHNGdJQ0FnSUNCU1pXZGxlR1Z6TG0xaGVXSmxRMkZ3ZEhWeVpTaGpZWEIwZFhKbExDQW5kR0Z5WjJWMEp5d2daaTUwWVhKblpYUXNJQ2RiWGpwZEtqOG5LU0FyWEhKY2JpQWdJQ0FnSUNjNkxpNHVMam91TGk0dU9pY2dLMXh5WEc0Z0lDQWdJQ0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBbmFXUW5MQ0JtTG1sa0xDQW5MaTR1TGljcElDc2dKem9uTzF4eVhHNGdJQ0FnY21WMGRYSnVJRkpsWjJWNFpYTXVjR0Z5YzJVb2MzUnlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQW5kR0Z5WjJWMEp5QjNZWE1nWkdWbVpXRjBaV1FnWW5rZ0ozTnZkWEpqWlNkY2NseHVJQ0FnS2lCbWFXVnNaSE02SUhSaGNtZGxkQ3dnYzI5MWNtTmxMQ0JqWVhCMGRYSmxYSEpjYmlBZ0lDb2diV0YwWTJobGN6b2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0YxYVhOeGRXOTFjeTlqWVdOMFltOTBMMkpzYjJJdmJXRnBiaTlrYjJOekwweHZaMGQxYVdSbExtMWtJekU1TFc1bGRIZHZjbXRrWldGMGFGeHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUIzWVhORVpXWmxZWFJsWkNobVB6b2dVR0Z5WVcxelBGZGhjMFJsWm1WaGRHVmtVR0Z5WVcxelBpazZJRkpsWjJWNFBGZGhjMFJsWm1WaGRHVmtVR0Z5WVcxelBpQjdYSEpjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1lnUFQwOUlDZDFibVJsWm1sdVpXUW5LVnh5WEc0Z0lDQWdJQ0JtSUQwZ2UzMDdYSEpjYmlBZ0lDQlNaV2RsZUdWekxuWmhiR2xrWVhSbFVHRnlZVzF6S0dZc0lDZDNZWE5FWldabFlYUmxaQ2NzSUhkaGMwUmxabVZoZEdWa1VHRnlZVzF6S1R0Y2NseHVJQ0FnSUdOdmJuTjBJR05oY0hSMWNtVWdQU0JTWldkbGVHVnpMblJ5ZFdWSlpsVnVaR1ZtYVc1bFpDaG1MbU5oY0hSMWNtVXBPMXh5WEc0Z0lDQWdZMjl1YzNRZ2MzUnlJRDBnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0ozUnBiV1Z6ZEdGdGNDY3NJQ2RjWEZ4Y2VYdFVhVzFsYzNSaGJYQjlKeWtnSzF4eVhHNGdJQ0FnSUNBbklERTVPaWNnSzF4eVhHNGdJQ0FnSUNCU1pXZGxlR1Z6TG0xaGVXSmxRMkZ3ZEhWeVpTaGpZWEIwZFhKbExDQW5kR0Z5WjJWMEp5d2daaTUwWVhKblpYUXNJQ2N1S2o4bktTQXJYSEpjYmlBZ0lDQWdJQ2NnZDJGeklHUmxabVZoZEdWa0lHSjVJQ2NnSzF4eVhHNGdJQ0FnSUNCU1pXZGxlR1Z6TG0xaGVXSmxRMkZ3ZEhWeVpTaGpZWEIwZFhKbExDQW5jMjkxY21ObEp5d2daaTV6YjNWeVkyVXNJQ2N1S2o4bktTQXJJQ2RjWEZ4Y0xpYzdYSEpjYmlBZ0lDQnlaWFIxY200Z1VtVm5aWGhsY3k1d1lYSnpaU2h6ZEhJcE8xeHlYRzRnSUgxY2NseHVYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUdacFpXeGtjem9nYm1GdFpTd2dhSEFzSUdOaGNIUjFjbVZjY2x4dUlDQWdLaUJ0WVhSamFHVnpPaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y1hWcGMzRjFiM1Z6TDJOaFkzUmliM1F2WW14dllpOXRZV2x1TDJSdlkzTXZURzluUjNWcFpHVXViV1FqTUdRdFkyOXRZbUYwWVc1MGFIQmNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nYUdGelNGQW9aajg2SUZCaGNtRnRjenhJWVhOSVVGQmhjbUZ0Y3o0cE9pQlNaV2RsZUR4SVlYTklVRkJoY21GdGN6NGdlMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJtSUQwOVBTQW5kVzVrWldacGJtVmtKeWxjY2x4dUlDQWdJQ0FnWmlBOUlIdDlPMXh5WEc0Z0lDQWdVbVZuWlhobGN5NTJZV3hwWkdGMFpWQmhjbUZ0Y3lobUxDQW5hR0Z6U0ZBbkxDQm9ZWE5JVUZCaGNtRnRjeWs3WEhKY2JpQWdJQ0JqYjI1emRDQmpZWEIwZFhKbElEMGdVbVZuWlhobGN5NTBjblZsU1daVmJtUmxabWx1WldRb1ppNWpZWEIwZFhKbEtUdGNjbHh1SUNBZ0lHTnZibk4wSUhOMGNpQTlJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkMGFXMWxjM1JoYlhBbkxDQW5YRnhjWEhsN1ZHbHRaWE4wWVcxd2ZTY3BJQ3RjY2x4dUlDQWdJQ0FnSnlBd1JEb25JQ3RjY2x4dUlDQWdJQ0FnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0oyNWhiV1VuTENCbUxtNWhiV1VzSUNjdUtqOG5LU0FyWEhKY2JpQWdJQ0FnSUNjZ1NGQWdZWFFnSnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2RvY0Njc0lHWXVhSEFzSUNkY1hGeGNaQ3NuS1NBcklDY2xKenRjY2x4dUlDQWdJSEpsZEhWeWJpQlNaV2RsZUdWekxuQmhjbk5sS0hOMGNpazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1ptbGxiR1J6T2lCamIyUmxMQ0JzYVc1bExDQmpZWEIwZFhKbFhISmNiaUFnSUNvZ2JXRjBZMmhsY3pvZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzRjFhWE54ZFc5MWN5OWpZV04wWW05MEwySnNiMkl2YldGcGJpOWtiMk56TDB4dlowZDFhV1JsTG0xa0l6QXdMV3h2WjJ4cGJtVmNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nWldOb2J5aG1Qem9nVUdGeVlXMXpQRVZqYUc5UVlYSmhiWE0rS1RvZ1VtVm5aWGc4UldOb2IxQmhjbUZ0Y3o0Z2UxeHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQm1JRDA5UFNBbmRXNWtaV1pwYm1Wa0p5bGNjbHh1SUNBZ0lDQWdaaUE5SUh0OU8xeHlYRzRnSUNBZ1VtVm5aWGhsY3k1MllXeHBaR0YwWlZCaGNtRnRjeWhtTENBblpXTm9ieWNzSUdWamFHOVFZWEpoYlhNcE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUZKbFoyVjRaWE11WjJGdFpVeHZaeWg3WEhKY2JpQWdJQ0FnSUd4cGJtVTZJR1l1YkdsdVpTeGNjbHh1SUNBZ0lDQWdZMkZ3ZEhWeVpUb2daaTVqWVhCMGRYSmxMRnh5WEc0Z0lDQWdJQ0JqYjJSbE9pQW5NREF6T0Njc1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCbWFXVnNaSE02SUdOdlpHVXNJR3hwYm1Vc0lHNWhiV1VzSUdOaGNIUjFjbVZjY2x4dUlDQWdLaUJ0WVhSamFHVnpPaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y1hWcGMzRjFiM1Z6TDJOaFkzUmliM1F2WW14dllpOXRZV2x1TDJSdlkzTXZURzluUjNWcFpHVXViV1FqTURBdGJHOW5iR2x1WlZ4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5QmthV0ZzYjJjb1pqODZJRkJoY21GdGN6eEVhV0ZzYjJkUVlYSmhiWE0rS1RvZ1VtVm5aWGc4UkdsaGJHOW5VR0Z5WVcxelBpQjdYSEpjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1lnUFQwOUlDZDFibVJsWm1sdVpXUW5LVnh5WEc0Z0lDQWdJQ0JtSUQwZ2UzMDdYSEpjYmlBZ0lDQlNaV2RsZUdWekxuWmhiR2xrWVhSbFVHRnlZVzF6S0dZc0lDZGthV0ZzYjJjbkxDQmthV0ZzYjJkUVlYSmhiWE1wTzF4eVhHNGdJQ0FnWTI5dWMzUWdZMkZ3ZEhWeVpTQTlJRkpsWjJWNFpYTXVkSEoxWlVsbVZXNWtaV1pwYm1Wa0tHWXVZMkZ3ZEhWeVpTazdYSEpjYmlBZ0lDQmpiMjV6ZENCemRISWdQU0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBbmRHbHRaWE4wWVcxd0p5d2dKMXhjWEZ4NWUxUnBiV1Z6ZEdGdGNIMG5LU0FyWEhKY2JpQWdJQ0FnSUNjZ01EQTZKeUFyWEhKY2JpQWdJQ0FnSUZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZGpiMlJsSnl3Z0p6QXdORFFuS1NBcklDYzZKeUFyWEhKY2JpQWdJQ0FnSUZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZHVZVzFsSnl3Z1ppNXVZVzFsTENBbkxpby9KeWtnS3lBbk9pY2dLMXh5WEc0Z0lDQWdJQ0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBbmJHbHVaU2NzSUdZdWJHbHVaU3dnSnk0cUp5a2dLeUFuSkNjN1hISmNiaUFnSUNCeVpYUjFjbTRnVW1WblpYaGxjeTV3WVhKelpTaHpkSElwTzF4eVhHNGdJSDFjY2x4dVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJR1pwWld4a2N6b2dZMjlrWlN3Z2JHbHVaU3dnWTJGd2RIVnlaVnh5WEc0Z0lDQXFJRzFoZEdOb1pYTTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl4ZFdsemNYVnZkWE12WTJGamRHSnZkQzlpYkc5aUwyMWhhVzR2Wkc5amN5OU1iMmRIZFdsa1pTNXRaQ013TUMxc2IyZHNhVzVsWEhKY2JpQWdJQ292WEhKY2JpQWdjM1JoZEdsaklHMWxjM05oWjJVb1pqODZJRkJoY21GdGN6eE5aWE56WVdkbFVHRnlZVzF6UGlrNklGSmxaMlY0UEUxbGMzTmhaMlZRWVhKaGJYTStJSHRjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnWmlBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwWEhKY2JpQWdJQ0FnSUdZZ1BTQjdmVHRjY2x4dUlDQWdJRkpsWjJWNFpYTXVkbUZzYVdSaGRHVlFZWEpoYlhNb1ppd2dKMjFsYzNOaFoyVW5MQ0J0WlhOellXZGxVR0Z5WVcxektUdGNjbHh1SUNBZ0lISmxkSFZ5YmlCU1pXZGxlR1Z6TG1kaGJXVk1iMmNvZTF4eVhHNGdJQ0FnSUNCc2FXNWxPaUJtTG14cGJtVXNYSEpjYmlBZ0lDQWdJR05oY0hSMWNtVTZJR1l1WTJGd2RIVnlaU3hjY2x4dUlDQWdJQ0FnWTI5a1pUb2dKekE0TXprbkxGeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJtYVdWc1pITTZJR052WkdVc0lHeHBibVVzSUdOaGNIUjFjbVZjY2x4dUlDQWdLaUJ0WVhSamFHVnpPaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y1hWcGMzRjFiM1Z6TDJOaFkzUmliM1F2WW14dllpOXRZV2x1TDJSdlkzTXZURzluUjNWcFpHVXViV1FqTURBdGJHOW5iR2x1WlZ4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5Qm5ZVzFsVEc5bktHWS9PaUJRWVhKaGJYTThSMkZ0WlV4dloxQmhjbUZ0Y3o0cE9pQlNaV2RsZUR4SFlXMWxURzluVUdGeVlXMXpQaUI3WEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdZZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1Z4eVhHNGdJQ0FnSUNCbUlEMGdlMzA3WEhKY2JpQWdJQ0JTWldkbGVHVnpMblpoYkdsa1lYUmxVR0Z5WVcxektHWXNJQ2RuWVcxbFRHOW5KeXdnWjJGdFpVeHZaMUJoY21GdGN5azdYSEpjYmlBZ0lDQmpiMjV6ZENCallYQjBkWEpsSUQwZ1VtVm5aWGhsY3k1MGNuVmxTV1pWYm1SbFptbHVaV1FvWmk1allYQjBkWEpsS1R0Y2NseHVJQ0FnSUdOdmJuTjBJSE4wY2lBOUlGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2QwYVcxbGMzUmhiWEFuTENBblhGeGNYSGw3VkdsdFpYTjBZVzF3ZlNjcElDdGNjbHh1SUNBZ0lDQWdKeUF3TURvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjJOdlpHVW5MQ0JtTG1OdlpHVXNJQ2N1TGk0dUp5a2dLeUFuT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuYkdsdVpTY3NJR1l1YkdsdVpTd2dKeTRxSnlrZ0t5QW5KQ2M3WEhKY2JpQWdJQ0J5WlhSMWNtNGdVbVZuWlhobGN5NXdZWEp6WlNoemRISXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlHWnBaV3hrY3pvZ1kyOWtaU3dnYm1GdFpTd2diR2x1WlN3Z1kyRndkSFZ5WlZ4eVhHNGdJQ0FxSUcxaGRHTm9aWE02SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eGRXbHpjWFZ2ZFhNdlkyRmpkR0p2ZEM5aWJHOWlMMjFoYVc0dlpHOWpjeTlNYjJkSGRXbGtaUzV0WkNNd01DMXNiMmRzYVc1bFhISmNiaUFnSUNvZ1UyOXRaU0JuWVcxbElHeHZaeUJzYVc1bGN5Qm9ZWFpsSUc1aGJXVnpJR2x1SUhSb1pXMHNJR0oxZENCdWIzUWdZV3hzTGlBZ1FXeHNJRzVsZEhkdmNtc2diRzluSUd4cGJtVnpJR1p2Y2lCMGFHVnpaVnh5WEc0Z0lDQXFJR2hoZG1VZ1pXMXdkSGtnWm1sbGJHUnpMQ0JpZFhRZ2RHaGxjMlVnWjJWMElHUnliM0J3WldRZ1lua2dkR2hsSUVGRFZDQkdSbGhXSUhCc2RXZHBiaTVjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1oyRnRaVTVoYldWTWIyY29aajg2SUZCaGNtRnRjenhIWVcxbFRtRnRaVXh2WjFCaGNtRnRjejRwT2lCU1pXZGxlRHhIWVcxbFRtRnRaVXh2WjFCaGNtRnRjejRnZTF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbUlEMDlQU0FuZFc1a1pXWnBibVZrSnlsY2NseHVJQ0FnSUNBZ1ppQTlJSHQ5TzF4eVhHNGdJQ0FnVW1WblpYaGxjeTUyWVd4cFpHRjBaVkJoY21GdGN5aG1MQ0FuWjJGdFpVNWhiV1ZNYjJjbkxDQm5ZVzFsVG1GdFpVeHZaMUJoY21GdGN5azdYSEpjYmlBZ0lDQmpiMjV6ZENCallYQjBkWEpsSUQwZ1VtVm5aWGhsY3k1MGNuVmxTV1pWYm1SbFptbHVaV1FvWmk1allYQjBkWEpsS1R0Y2NseHVJQ0FnSUdOdmJuTjBJSE4wY2lBOUlGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2QwYVcxbGMzUmhiWEFuTENBblhGeGNYSGw3VkdsdFpYTjBZVzF3ZlNjcElDdGNjbHh1SUNBZ0lDQWdKeUF3TURvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjJOdlpHVW5MQ0JtTG1OdlpHVXNJQ2N1TGk0dUp5a2dLeUFuT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuYm1GdFpTY3NJR1l1Ym1GdFpTd2dKMXRlT2wwcUp5a2dLeUFuT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuYkdsdVpTY3NJR1l1YkdsdVpTd2dKeTRxSnlrZ0t5QW5KQ2M3WEhKY2JpQWdJQ0J5WlhSMWNtNGdVbVZuWlhobGN5NXdZWEp6WlNoemRISXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nWm1sbGJHUnpPaUJxYjJJc0lITjBjbVZ1WjNSb0xDQmtaWGgwWlhKcGRIa3NJSFpwZEdGc2FYUjVMQ0JwYm5SbGJHeHBaMlZ1WTJVc0lHMXBibVFzSUhCcFpYUjVMQ0JoZEhSaFkydFFiM2RsY2l4Y2NseHVJQ0FnS2lBZ0lDQWdJQ0FnSUdScGNtVmpkRWhwZEN3Z1kzSnBkR2xqWVd4SWFYUXNJR0YwZEdGamEwMWhaMmxqVUc5MFpXNWplU3dnYUdWaGJFMWhaMmxqVUc5MFpXNWplU3dnWkdWMFpYSnRhVzVoZEdsdmJpeGNjbHh1SUNBZ0tpQWdJQ0FnSUNBZ0lITnJhV3hzVTNCbFpXUXNJSE53Wld4c1UzQmxaV1FzSUhSbGJtRmphWFI1TENCallYQjBkWEpsWEhKY2JpQWdJQ29nYldGMFkyaGxjem9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNGMWFYTnhkVzkxY3k5allXTjBZbTkwTDJKc2IySXZiV0ZwYmk5a2IyTnpMMHh2WjBkMWFXUmxMbTFrSXpCakxYQnNZWGxsY25OMFlYUnpYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUhOMFlYUkRhR0Z1WjJVb1pqODZJRkJoY21GdGN6eFRkR0YwUTJoaGJtZGxVR0Z5WVcxelBpazZJRkpsWjJWNFBGTjBZWFJEYUdGdVoyVlFZWEpoYlhNK0lIdGNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BYSEpjYmlBZ0lDQWdJR1lnUFNCN2ZUdGNjbHh1SUNBZ0lGSmxaMlY0WlhNdWRtRnNhV1JoZEdWUVlYSmhiWE1vWml3Z0ozTjBZWFJEYUdGdVoyVW5MQ0J6ZEdGMFEyaGhibWRsVUdGeVlXMXpLVHRjY2x4dUlDQWdJR052Ym5OMElHTmhjSFIxY21VZ1BTQlNaV2RsZUdWekxuUnlkV1ZKWmxWdVpHVm1hVzVsWkNobUxtTmhjSFIxY21VcE8xeHlYRzRnSUNBZ1kyOXVjM1FnYzNSeUlEMGdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjNScGJXVnpkR0Z0Y0Njc0lDZGNYRnhjZVh0VWFXMWxjM1JoYlhCOUp5a2dLMXh5WEc0Z0lDQWdJQ0FuSURCRE9sQnNZWGxsY2lCVGRHRjBjem9nSnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2RxYjJJbkxDQm1MbXB2WWl3Z0oxeGNYRnhrS3ljcElDc2dKem9uSUN0Y2NseHVJQ0FnSUNBZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKM04wY21WdVozUm9KeXdnWmk1emRISmxibWQwYUN3Z0oxeGNYRnhrS3ljcElDc2dKem9uSUN0Y2NseHVJQ0FnSUNBZ1VtVm5aWGhsY3k1dFlYbGlaVU5oY0hSMWNtVW9ZMkZ3ZEhWeVpTd2dKMlJsZUhSbGNtbDBlU2NzSUdZdVpHVjRkR1Z5YVhSNUxDQW5YRnhjWEdRckp5a2dLeUFuT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuZG1sMFlXeHBkSGtuTENCbUxuWnBkR0ZzYVhSNUxDQW5YRnhjWEdRckp5a2dLeUFuT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuYVc1MFpXeHNhV2RsYm1ObEp5d2daaTVwYm5SbGJHeHBaMlZ1WTJVc0lDZGNYRnhjWkNzbktTQXJJQ2M2SnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2R0YVc1a0p5d2daaTV0YVc1a0xDQW5YRnhjWEdRckp5a2dLeUFuT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuY0dsbGRIa25MQ0JtTG5CcFpYUjVMQ0FuWEZ4Y1hHUXJKeWtnS3lBbk9pY2dLMXh5WEc0Z0lDQWdJQ0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBbllYUjBZV05yVUc5M1pYSW5MQ0JtTG1GMGRHRmphMUJ2ZDJWeUxDQW5YRnhjWEdRckp5a2dLeUFuT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuWkdseVpXTjBTR2wwSnl3Z1ppNWthWEpsWTNSSWFYUXNJQ2RjWEZ4Y1pDc25LU0FySUNjNkp5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkamNtbDBhV05oYkVocGRDY3NJR1l1WTNKcGRHbGpZV3hJYVhRc0lDZGNYRnhjWkNzbktTQXJJQ2M2SnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2RoZEhSaFkydE5ZV2RwWTFCdmRHVnVZM2tuTENCbUxtRjBkR0ZqYTAxaFoybGpVRzkwWlc1amVTd2dKMXhjWEZ4a0t5Y3BJQ3NnSnpvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjJobFlXeE5ZV2RwWTFCdmRHVnVZM2tuTENCbUxtaGxZV3hOWVdkcFkxQnZkR1Z1WTNrc0lDZGNYRnhjWkNzbktTQXJJQ2M2SnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2RrWlhSbGNtMXBibUYwYVc5dUp5d2daaTVrWlhSbGNtMXBibUYwYVc5dUxDQW5YRnhjWEdRckp5a2dLeUFuT2ljZ0sxeHlYRzRnSUNBZ0lDQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuYzJ0cGJHeFRjR1ZsWkNjc0lHWXVjMnRwYkd4VGNHVmxaQ3dnSjF4Y1hGeGtLeWNwSUNzZ0p6b25JQ3RjY2x4dUlDQWdJQ0FnVW1WblpYaGxjeTV0WVhsaVpVTmhjSFIxY21Vb1kyRndkSFZ5WlN3Z0ozTndaV3hzVTNCbFpXUW5MQ0JtTG5Od1pXeHNVM0JsWldRc0lDZGNYRnhjWkNzbktTQXJYSEpjYmlBZ0lDQWdJQ2M2TURvbklDdGNjbHh1SUNBZ0lDQWdVbVZuWlhobGN5NXRZWGxpWlVOaGNIUjFjbVVvWTJGd2RIVnlaU3dnSjNSbGJtRmphWFI1Snl3Z1ppNTBaVzVoWTJsMGVTd2dKMXhjWEZ4a0t5Y3BPMXh5WEc0Z0lDQWdjbVYwZFhKdUlGSmxaMlY0WlhNdWNHRnljMlVvYzNSeUtUdGNjbHh1SUNCOVhISmNibHh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCbWFXVnNaSE02SUc1aGJXVXNJR05oY0hSMWNtVmNjbHh1SUNBZ0tpQnRZWFJqYUdWek9pQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjWFZwYzNGMWIzVnpMMk5oWTNSaWIzUXZZbXh2WWk5dFlXbHVMMlJ2WTNNdlRHOW5SM1ZwWkdVdWJXUWpNREV0WTJoaGJtZGxlbTl1WlZ4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5QmphR0Z1WjJWYWIyNWxLR1kvT2lCUVlYSmhiWE04UTJoaGJtZGxXbTl1WlZCaGNtRnRjejRwT2lCU1pXZGxlRHhEYUdGdVoyVmFiMjVsVUdGeVlXMXpQaUI3WEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdZZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1Z4eVhHNGdJQ0FnSUNCbUlEMGdlMzA3WEhKY2JpQWdJQ0JTWldkbGVHVnpMblpoYkdsa1lYUmxVR0Z5WVcxektHWXNJQ2RqYUdGdVoyVmFiMjVsSnl3Z1kyaGhibWRsV205dVpWQmhjbUZ0Y3lrN1hISmNiaUFnSUNCamIyNXpkQ0JqWVhCMGRYSmxJRDBnVW1WblpYaGxjeTUwY25WbFNXWlZibVJsWm1sdVpXUW9aaTVqWVhCMGRYSmxLVHRjY2x4dUlDQWdJR052Ym5OMElITjBjaUE5SUZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZDBhVzFsYzNSaGJYQW5MQ0FuWEZ4Y1hIbDdWR2x0WlhOMFlXMXdmU2NwSUN0Y2NseHVJQ0FnSUNBZ0p5QXdNVHBEYUdGdVoyVmtJRnB2Ym1VZ2RHOGdKeUFyWEhKY2JpQWdJQ0FnSUZKbFoyVjRaWE11YldGNVltVkRZWEIwZFhKbEtHTmhjSFIxY21Vc0lDZHVZVzFsSnl3Z1ppNXVZVzFsTENBbkxpby9KeWtnS3lBblhGeGNYQzRuTzF4eVhHNGdJQ0FnY21WMGRYSnVJRkpsWjJWNFpYTXVjR0Z5YzJVb2MzUnlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQm1hV1ZzWkhNNklHbHVjM1JoYm1ObExDQmpiMjF0WVc1a0xDQmtZWFJoTUN3Z1pHRjBZVEVzSUdSaGRHRXlMQ0JrWVhSaE0xeHlYRzRnSUNBcUlHMWhkR05vWlhNNklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXhkV2x6Y1hWdmRYTXZZMkZqZEdKdmRDOWliRzlpTDIxaGFXNHZaRzlqY3k5TWIyZEhkV2xrWlM1dFpDTXlNUzF1WlhSM2IzSnJObVF0WVdOMGIzSXRZMjl1ZEhKdmJDMXNhVzVsYzF4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5QnVaWFIzYjNKck5tUW9aajg2SUZCaGNtRnRjenhPWlhSM2IzSnJObVJRWVhKaGJYTStLVG9nVW1WblpYZzhUbVYwZDI5eWF6WmtVR0Z5WVcxelBpQjdYSEpjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1lnUFQwOUlDZDFibVJsWm1sdVpXUW5LVnh5WEc0Z0lDQWdJQ0JtSUQwZ2UzMDdYSEpjYmlBZ0lDQlNaV2RsZUdWekxuWmhiR2xrWVhSbFVHRnlZVzF6S0dZc0lDZHVaWFIzYjNKck5tUW5MQ0J1WlhSM2IzSnJObVJRWVhKaGJYTXBPMXh5WEc0Z0lDQWdZMjl1YzNRZ1kyRndkSFZ5WlNBOUlGSmxaMlY0WlhNdWRISjFaVWxtVlc1a1pXWnBibVZrS0dZdVkyRndkSFZ5WlNrN1hISmNiaUFnSUNCamIyNXpkQ0J6ZEhJZ1BTQlNaV2RsZUdWekxtMWhlV0psUTJGd2RIVnlaU2hqWVhCMGRYSmxMQ0FuZEdsdFpYTjBZVzF3Snl3Z0oxeGNYRng1ZTFScGJXVnpkR0Z0Y0gwbktTQXJYSEpjYmlBZ0lDQWdJQ2NnTWpFNkp5QXJYSEpjYmlBZ0lDQWdJRkpsWjJWNFpYTXViV0Y1WW1WRFlYQjBkWEpsS0dOaGNIUjFjbVVzSUNkcGJuTjBZVzVqWlNjc0lHWXVhVzV6ZEdGdVkyVXNJQ2N1S2o4bktTQXJJQ2M2SnlBclhISmNiaUFnSUNBZ0lGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLR05oY0hSMWNtVXNJQ2RqYjIxdFlXNWtKeXdnWmk1amIyMXRZVzVrTENBbkxpby9KeWtnS3lBbk9pY2dLMXh5WEc0Z0lDQWdJQ0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBblpHRjBZVEFuTENCbUxtUmhkR0V3TENBbkxpby9KeWtnS3lBbk9pY2dLMXh5WEc0Z0lDQWdJQ0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBblpHRjBZVEVuTENCbUxtUmhkR0V4TENBbkxpby9KeWtnS3lBbk9pY2dLMXh5WEc0Z0lDQWdJQ0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBblpHRjBZVEluTENCbUxtUmhkR0V5TENBbkxpby9KeWtnS3lBbk9pY2dLMXh5WEc0Z0lDQWdJQ0JTWldkbGVHVnpMbTFoZVdKbFEyRndkSFZ5WlNoallYQjBkWEpsTENBblpHRjBZVE1uTENCbUxtUmhkR0V6TENBbkxpby9KeWtnS3lBbkpDYzdYSEpjYmlBZ0lDQnlaWFIxY200Z1VtVm5aWGhsY3k1d1lYSnpaU2h6ZEhJcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dTR1ZzY0dWeUlHWjFibU4wYVc5dUlHWnZjaUJpZFdsc1pHbHVaeUJ1WVcxbFpDQmpZWEIwZFhKbElHZHliM1Z3WEhKY2JpQWdJQ292WEhKY2JpQWdjM1JoZEdsaklHMWhlV0psUTJGd2RIVnlaU2hjY2x4dUlDQWdJQ0FnWTJGd2RIVnlaVG9nWW05dmJHVmhiaXhjY2x4dUlDQWdJQ0FnYm1GdFpUb2djM1J5YVc1bkxGeHlYRzRnSUNBZ0lDQjJZV3gxWlRvZ2MzUnlhVzVuSUh3Z2MzUnlhVzVuVzEwZ2ZDQjFibVJsWm1sdVpXUXNYSEpjYmlBZ0lDQWdJR1JsWm1GMWJIUldZV3gxWlQ4NklITjBjbWx1Wnl4Y2NseHVJQ0FwT2lCemRISnBibWNnZTF4eVhHNGdJQ0FnYVdZZ0tDRjJZV3gxWlNsY2NseHVJQ0FnSUNBZ2RtRnNkV1VnUFNCa1pXWmhkV3gwVm1Gc2RXVTdYSEpjYmlBZ0lDQjJZV3gxWlNBOUlGSmxaMlY0WlhNdVlXNTVUMllvZG1Gc2RXVWdZWE1nVm1Gc2FXUlRkSEpwYm1kUGNrRnljbUY1S1R0Y2NseHVJQ0FnSUhKbGRIVnliaUJqWVhCMGRYSmxJRDhnVW1WblpYaGxjeTV1WVcxbFpFTmhjSFIxY21Vb2JtRnRaU3dnZG1Gc2RXVXBJRG9nZG1Gc2RXVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnpkR0YwYVdNZ2IzQjBhVzl1WVd3b2MzUnlPaUJ6ZEhKcGJtY3BPaUJ6ZEhKcGJtY2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlHQW9Qem9rZTNOMGNuMHBQMkE3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2THlCRGNtVmhkR1Z6SUdFZ2JtRnRaV1FnY21WblpYZ2dZMkZ3ZEhWeVpTQm5jbTkxY0NCdVlXMWxaQ0I4Ym1GdFpYd2dabTl5SUhSb1pTQnRZWFJqYUNCOGRtRnNkV1Y4TGx4eVhHNGdJSE4wWVhScFl5QnVZVzFsWkVOaGNIUjFjbVVvYm1GdFpUb2djM1J5YVc1bkxDQjJZV3gxWlRvZ2MzUnlhVzVuS1RvZ2MzUnlhVzVuSUh0Y2NseHVJQ0FnSUdsbUlDaHVZVzFsTG1sdVkyeDFaR1Z6S0NjK0p5a3BYSEpjYmlBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0oxd2lKeUFySUc1aGJXVWdLeUFuWENJZ1kyOXVkR0ZwYm5NZ1hDSStYQ0l1SnlrN1hISmNiaUFnSUNCcFppQW9ibUZ0WlM1cGJtTnNkV1JsY3lnblBDY3BLVnh5WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZGNJaWNnS3lCdVlXMWxJQ3NnSjF3aUlHTnZiblJoYVc1eklGd2lQbHdpTGljcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQW5LRDg4SnlBcklHNWhiV1VnS3lBblBpY2dLeUIyWVd4MVpTQXJJQ2NwSnp0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFTnZiblpsYm1sbGJtTmxJR1p2Y2lCMGRYSnVhVzVuSUcxMWJIUnBjR3hsSUdGeVozTWdhVzUwYnlCaElIVnVhVzl1WldRZ2NtVm5kV3hoY2lCbGVIQnlaWE56YVc5dUxseHlYRzRnSUNBcUlHRnVlVTltS0hnc0lIa3NJSG9wSUc5eUlHRnVlVTltS0Z0NExDQjVMQ0I2WFNrZ1pHOGdkR2hsSUhOaGJXVWdkR2hwYm1jc0lHRnVaQ0J5WlhSMWNtNGdLRDg2ZUh4NWZIb3BMbHh5WEc0Z0lDQXFJR0Z1ZVU5bUtIZ3BJRzl5SUdGdWVVOW1LSGdwSUc5dUlHbDBjeUJ2ZDI0Z2MybHRjR3hwWm1sbGN5QjBieUJxZFhOMElIZ3VYSEpjYmlBZ0lDb2dZWEpuY3lCdFlYa2dZbVVnYzNSeWFXNW5jeUJ2Y2lCU1pXZEZlSEFzSUdGc2RHaHZkV2RvSUdGdWVTQmhaR1JwZEdsdmJtRnNJRzFoY210bGNuTWdkRzhnVW1WblJYaHdYSEpjYmlBZ0lDb2diR2xyWlNBdmFXNXpaVzV6YVhScGRtVXZhU0JoY21VZ1pISnZjSEJsWkM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdZVzU1VDJZb0xpNHVZWEpuY3pvZ0tITjBjbWx1WjN4emRISnBibWRiWFh4U1pXZEZlSEFwVzEwcE9pQnpkSEpwYm1jZ2UxeHlYRzRnSUNBZ1kyOXVjM1FnWVc1NVQyWkJjbkpoZVNBOUlDaGhjbkpoZVRvZ0tITjBjbWx1WjN4U1pXZEZlSEFwVzEwcE9pQnpkSEpwYm1jZ1BUNGdlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZQ2cvT2lSN1lYSnlZWGt1YldGd0tDaGxiR1Z0S1NBOVBpQmxiR1Z0SUdsdWMzUmhibU5sYjJZZ1VtVm5SWGh3SUQ4Z1pXeGxiUzV6YjNWeVkyVWdPaUJsYkdWdEtTNXFiMmx1S0NkOEp5bDlLV0E3WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnYkdWMElHRnljbUY1T2lBb2MzUnlhVzVuZkZKbFowVjRjQ2xiWFNBOUlGdGRPMXh5WEc0Z0lDQWdhV1lnS0dGeVozTXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hISmNiaUFnSUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHRnlaM05iTUYwcEtWeHlYRzRnSUNBZ0lDQWdJR0Z5Y21GNUlEMGdZWEpuYzFzd1hUdGNjbHh1SUNBZ0lDQWdaV3h6WlNCcFppQW9ZWEpuYzFzd1hTbGNjbHh1SUNBZ0lDQWdJQ0JoY25KaGVTQTlJRnRoY21keld6QmRYVHRjY2x4dUlDQWdJQ0FnWld4elpWeHlYRzRnSUNBZ0lDQWdJR0Z5Y21GNUlEMGdXMTA3WEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0F2THlCVVQwUlBPaUJ0YjNKbElHRmpZM1Z5WVhSbElIUjVjR1VnYVc1emRHVmhaQ0J2WmlCZ1lYTmdJR05oYzNSY2NseHVJQ0FnSUNBZ1lYSnlZWGtnUFNCaGNtZHpJR0Z6SUhOMGNtbHVaMXRkTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJR0Z1ZVU5bVFYSnlZWGtvWVhKeVlYa3BPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdjM1JoZEdsaklIQmhjbk5sS0hKbFoyVjRjRk4wY21sdVp6b2dVbVZuUlhod0lId2djM1J5YVc1bktUb2dVbVZuUlhod0lIdGNjbHh1SUNBZ0lHTnZibk4wSUd0RFlXTjBZbTkwUTJGMFpXZHZjbWxsY3lBOUlIdGNjbHh1SUNBZ0lDQWdWR2x0WlhOMFlXMXdPaUFuWGk1N01UUjlKeXhjY2x4dUlDQWdJQ0FnVG1WMFZHbHRaWE4wWVcxd09pQW5MbnN6TTMwbkxGeHlYRzRnSUNBZ0lDQk9aWFJHYVdWc1pEb2dKeWcvT2x0ZWZGMHFYRnhjWEh3cEp5eGNjbHh1SUNBZ0lDQWdURzluVkhsd1pUb2dKMXN3TFRsQkxVWmhMV1pkZXpKOUp5eGNjbHh1SUNBZ0lDQWdRV0pwYkdsMGVVTnZaR1U2SUNkYk1DMDVRUzFHWVMxbVhYc3hMRGg5Snl4Y2NseHVJQ0FnSUNBZ1QySnFaV04wU1dRNklDZGJNQzA1UVMxR1hYczRmU2NzWEhKY2JpQWdJQ0FnSUM4dklFMWhkR05vWlhNZ1lXNTVJR05vWVhKaFkzUmxjaUJ1WVcxbElDaHBibU5zZFdScGJtY2daVzF3ZEhrZ2MzUnlhVzVuY3lCM2FHbGphQ0IwYUdVZ1JrWllTVlpjY2x4dUlDQWdJQ0FnTHk4Z1FVTlVJSEJzZFdkcGJpQmpZVzRnWjJWdVpYSmhkR1VnZDJobGJpQjFibXR1YjNkdUtTNWNjbHh1SUNBZ0lDQWdUbUZ0WlRvZ0p5Zy9PbHRlWEZ4Y1hITTZmRjByS0Q4NklGdGVYRnhjWEhNNmZGMHJLVDk4S1Njc1hISmNiaUFnSUNBZ0lDOHZJRVpzYjJGMGN5QmpZVzRnYUdGMlpTQmpiMjF0WVNCaGN5QnpaWEJoY21GMGIzSWdhVzRnUmtaWVNWWWdjR3gxWjJsdUlHOTFkSEIxZERvZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzSmhkbUZvYmk5R1JsaEpWbDlCUTFSZlVHeDFaMmx1TDJsemMzVmxjeTh4TXpkY2NseHVJQ0FnSUNBZ1JteHZZWFE2SUNjdFAxc3dMVGxkS3lnL09sc3VMRjFiTUMwNVhTc3BQeWcvT2tVdFAxc3dMVGxkS3lrL0p5eGNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1FXeHNJSEpsWjJWNFpYTWdhVzRnWTJGamRHSnZkQ0JoY21VZ1kyRnpaU0JwYm5ObGJuTnBkR2wyWlM1Y2NseHVJQ0FnSUM4dklGUm9hWE1nWVhadmFXUnpJR2hsWVdSaFkyaGxjeUJoY3lCMGFHbHVaM01nYkdsclpTQmdWbWxqWlNCaGJtUWdWbUZ1YVhSNVlDQjBkWEp1Y3lCcGJuUnZYSEpjYmlBZ0lDQXZMeUJnVm1salpTQkJibVFnVm1GdWFYUjVZQ3dnWlhOd1pXTnBZV3hzZVNCbWIzSWdSbkpsYm1Ob0lHRnVaQ0JIWlhKdFlXNHVJQ0JKZENCaGNIQmxZWEp6SUhSdlhISmNiaUFnSUNBdkx5Qm9ZWFpsSUdFZ2ZqSXdKU0J5WldkbGVDQndZWEp6YVc1bklHOTJaWEpvWldGa0xDQmlkWFFnWVhRZ2JHVmhjM1FnZEdobGVTQjNiM0pyTGx4eVhHNGdJQ0FnYkdWMElHMXZaR2xtYVdWeWN5QTlJQ2RwSnp0Y2NseHVJQ0FnSUdsbUlDaHlaV2RsZUhCVGRISnBibWNnYVc1emRHRnVZMlZ2WmlCU1pXZEZlSEFwSUh0Y2NseHVJQ0FnSUNBZ2JXOWthV1pwWlhKeklDczlJQ2h5WldkbGVIQlRkSEpwYm1jdVoyeHZZbUZzSUQ4Z0oyY25JRG9nSnljcElDdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2NtVm5aWGh3VTNSeWFXNW5MbTExYkhScGJHbHVaU0EvSUNkdEp5QTZJQ2NuS1R0Y2NseHVJQ0FnSUNBZ2NtVm5aWGh3VTNSeWFXNW5JRDBnY21WblpYaHdVM1J5YVc1bkxuTnZkWEpqWlR0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhKbFoyVjRjRk4wY21sdVp5QTlJSEpsWjJWNGNGTjBjbWx1Wnk1eVpYQnNZV05sS0M5Y1hGeGNlVnhjZXlndUtqOHBYRng5TDJjc0lDaHRZWFJqYUN3Z1ozSnZkWEFwSUQwK0lIdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlHdERZV04wWW05MFEyRjBaV2R2Y21sbGMxdG5jbTkxY0NCaGN5QnJaWGx2WmlCMGVYQmxiMllnYTBOaFkzUmliM1JEWVhSbFoyOXlhV1Z6WFNCOGZDQnRZWFJqYUR0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlNaV2RGZUhBb2NtVm5aWGh3VTNSeWFXNW5MQ0J0YjJScFptbGxjbk1wTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHk4Z1RHbHJaU0JTWldkbGVDNVNaV2RsZUdWekxuQmhjbk5sTENCaWRYUWdabTl5WTJVZ1oyeHZZbUZzSUdac1lXY3VYSEpjYmlBZ2MzUmhkR2xqSUhCaGNuTmxSMnh2WW1Gc0tISmxaMlY0Y0ZOMGNtbHVaem9nVW1WblJYaHdJSHdnYzNSeWFXNW5LVG9nVW1WblJYaHdJSHRjY2x4dUlDQWdJR052Ym5OMElISmxaMlY0SUQwZ1VtVm5aWGhsY3k1d1lYSnpaU2h5WldkbGVIQlRkSEpwYm1jcE8xeHlYRzRnSUNBZ2JHVjBJRzF2WkdsbWFXVnljeUE5SUNkbmFTYzdYSEpjYmlBZ0lDQnBaaUFvY21WblpYaHdVM1J5YVc1bklHbHVjM1JoYm1ObGIyWWdVbVZuUlhod0tWeHlYRzRnSUNBZ0lDQnRiMlJwWm1sbGNuTWdLejBnS0hKbFoyVjRjRk4wY21sdVp5NXRkV3gwYVd4cGJtVWdQeUFuYlNjZ09pQW5KeWs3WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZKbFowVjRjQ2h5WldkbGVDNXpiM1Z5WTJVc0lHMXZaR2xtYVdWeWN5azdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnpkR0YwYVdNZ2RISjFaVWxtVlc1a1pXWnBibVZrS0haaGJIVmxQem9nWW05dmJHVmhiaWs2SUdKdmIyeGxZVzRnZTF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlBb2RtRnNkV1VwSUQwOVBTQW5kVzVrWldacGJtVmtKeWxjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hISmNiaUFnSUNCeVpYUjFjbTRnSVNGMllXeDFaVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSE4wWVhScFl5QjJZV3hwWkdGMFpWQmhjbUZ0Y3loY2NseHVJQ0FnSUNBZ1pqb2dVbVZoWkc5dWJIazhleUJiY3pvZ2MzUnlhVzVuWFRvZ2RXNXJibTkzYmlCOVBpeGNjbHh1SUNBZ0lDQWdablZ1WTA1aGJXVTZJSE4wY21sdVp5eGNjbHh1SUNBZ0lDQWdjR0Z5WVcxek9pQlNaV0ZrYjI1c2VUeHpkSEpwYm1kYlhUNHNYSEpjYmlBZ0tUb2dkbTlwWkNCN1hISmNiaUFnSUNCcFppQW9aaUE5UFQwZ2JuVnNiQ2xjY2x4dUlDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJtSUNFOVBTQW5iMkpxWldOMEp5bGNjbHh1SUNBZ0lDQWdjbVYwZFhKdU8xeHlYRzRnSUNBZ1kyOXVjM1FnYTJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0dZcE8xeHlYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2F5QTlJREE3SUdzZ1BDQnJaWGx6TG14bGJtZDBhRHNnS3l0cktTQjdYSEpjYmlBZ0lDQWdJR052Ym5OMElHdGxlU0E5SUd0bGVYTmJhMTA3WEhKY2JpQWdJQ0FnSUdsbUlDaHJaWGtnSmlZZ0lYQmhjbUZ0Y3k1cGJtTnNkV1JsY3loclpYa3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dBa2UyWjFibU5PWVcxbGZUb2dhVzUyWVd4cFpDQndZWEpoYldWMFpYSWdKeVI3YTJWNWZTY3VJQ0JnSUN0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWUZaaGJHbGtJSEJoY21GdGN6b2dKSHRLVTA5T0xuTjBjbWx1WjJsbWVTaHdZWEpoYlhNcGZXQXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1OVhISmNiaUlzSW1sdGNHOXlkQ0I3SUVKaGMyVlNaV2RGZUhBZ2ZTQm1jbTl0SUNjdUxpOTBlWEJsY3k5MGNtbG5aMlZ5Snp0Y2NseHVhVzF3YjNKMElGSmxaMlY0WlhNc0lIc2dVR0Z5WVcxeklIMGdabkp2YlNBbkxpOXlaV2RsZUdWekp6dGNjbHh1WEhKY2JtbHVkR1Z5Wm1GalpTQkdhV1ZzWkhNZ2UxeHlYRzRnSUdacFpXeGtPaUJ6ZEhKcGJtYzdYSEpjYmlBZ2RtRnNkV1UvT2lCemRISnBibWM3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCMGVYQmxJRTVsZEZKbFoyVjRQRlFnWlhoMFpXNWtjeUJ6ZEhKcGJtYytJRDBnUW1GelpWSmxaMFY0Y0R4RmVHTnNkV1JsUEZRc0lDZGpZWEIwZFhKbEp6NCtPMXh5WEc1Y2NseHVMeThnUkdsbVptVnlaVzVqWlhNZ1puSnZiU0JTWldkbGVHVnpPbHh5WEc0dkx5QXFJRzFoZVNCb1lYWmxJRzF2Y21VZ1ptbGxiR1J6WEhKY2JpOHZJQ29nUVdSa1pXUkRiMjFpWVhSaGJuUWdibkJqSUdsa0lHbHpJR0p5YjJ0bGJpQjFjQ0JwYm5SdklHNXdZMDVoYldWSlpDQmhibVFnYm5CalFtRnpaVWxrWEhKY2JpOHZJQ29nWjJGdFpVeHZaeUJoYkhkaGVYTWdjM0JzYVhSeklHNWhiV1VnYVc1MGJ5QnBkSE1nYjNkdUlHWnBaV3hrSUNoaWRYUWdjSEpsZG1sdmRYTnNlU0IzYjNWc1pHNG5kQ2xjY2x4dVhISmNibU52Ym5OMElITmxjR0Z5WVhSdmNpQTlJQ2RjWEZ4Y2ZDYzdYSEpjYm1OdmJuTjBJRzFoZEdOb1JHVm1ZWFZzZENBOUlDZGJYbnhkS2ljN1hISmNibHh5WEc1amIyNXpkQ0J6ZEdGeWRITlZjMmx1WjFCaGNtRnRjeUE5SUZzbmRHbHRaWE4wWVcxd0p5d2dKM052ZFhKalpVbGtKeXdnSjNOdmRYSmpaU2NzSUNkcFpDY3NJQ2RoWW1sc2FYUjVKeXdnSjNSaGNtZGxkRWxrSnl3Z0ozUmhjbWRsZENjc0lDZGpZWE4wVkdsdFpTZGRJR0Z6SUdOdmJuTjBPMXh5WEc1amIyNXpkQ0JoWW1sc2FYUjVVR0Z5WVcxeklEMGdXeWR6YjNWeVkyVkpaQ2NzSUNkemIzVnlZMlVuTENBbmFXUW5MQ0FuWVdKcGJHbDBlU2NzSUNkMFlYSm5aWFJKWkNjc0lDZDBZWEpuWlhRblhTQmhjeUJqYjI1emREdGNjbHh1WTI5dWMzUWdZV0pwYkdsMGVVWjFiR3hRWVhKaGJYTWdQU0JiSjNOdmRYSmpaVWxrSnl3Z0ozTnZkWEpqWlNjc0lDZHBaQ2NzSUNkaFltbHNhWFI1Snl3Z0ozUmhjbWRsZEVsa0p5d2dKM1JoY21kbGRDY3NJQ2RtYkdGbmN5Y3NJQ2RrWVcxaFoyVW5MQ0FuZEdGeVoyVjBRM1Z5Y21WdWRFaHdKeXdnSjNSaGNtZGxkRTFoZUVod0p5d2dKM2duTENBbmVTY3NJQ2Q2Snl3Z0oyaGxZV1JwYm1jblhTQmhjeUJqYjI1emREdGNjbHh1WTI5dWMzUWdhR1ZoWkUxaGNtdGxjbEJoY21GdGN5QTlJRnNuZEdGeVoyVjBTV1FuTENBbmRHRnlaMlYwSnl3Z0oybGtKMTBnWVhNZ1kyOXVjM1E3WEhKY2JtTnZibk4wSUdGa1pHVmtRMjl0WW1GMFlXNTBVR0Z5WVcxeklEMGdXeWRwWkNjc0lDZHVZVzFsSjEwZ1lYTWdZMjl1YzNRN1hISmNibU52Ym5OMElHRmtaR1ZrUTI5dFltRjBZVzUwUm5Wc2JGQmhjbUZ0Y3lBOUlGc25hV1FuTENBbmJtRnRaU2NzSUNkcWIySW5MQ0FuYkdWMlpXd25MQ0FuYjNkdVpYSkpaQ2NzSUNkM2IzSnNaQ2NzSUNkdWNHTk9ZVzFsU1dRbkxDQW5ibkJqUW1GelpVbGtKeXdnSjJOMWNuSmxiblJJY0Njc0lDZG9jQ2NzSUNkNEp5d2dKM2tuTENBbmVpY3NJQ2RvWldGa2FXNW5KMTBnWVhNZ1kyOXVjM1E3WEhKY2JtTnZibk4wSUhKbGJXOTJhVzVuUTI5dFltRjBZVzUwVUdGeVlXMXpJRDBnV3lkcFpDY3NJQ2R1WVcxbEp5d2dKMmh3SjEwZ1lYTWdZMjl1YzNRN1hISmNibU52Ym5OMElHZGhhVzV6UldabVpXTjBVR0Z5WVcxeklEMGdXeWRsWm1abFkzUkpaQ2NzSUNkbFptWmxZM1FuTENBblpIVnlZWFJwYjI0bkxDQW5jMjkxY21ObFNXUW5MQ0FuYzI5MWNtTmxKeXdnSjNSaGNtZGxkRWxrSnl3Z0ozUmhjbWRsZENjc0lDZGpiM1Z1ZENkZElHRnpJR052Ym5OME8xeHlYRzVqYjI1emRDQnpkR0YwZFhORlptWmxZM1JGZUhCc2FXTnBkRkJoY21GdGN5QTlJRnNuZEdGeVoyVjBTV1FuTENBbmRHRnlaMlYwSnl3Z0oyaHdKeXdnSjIxaGVFaHdKeXdnSjNnbkxDQW5lU2NzSUNkNkp5d2dKMmhsWVdScGJtY25MQ0FuWkdGMFlUQW5MQ0FuWkdGMFlURW5MQ0FuWkdGMFlUSW5MQ0FuWkdGMFlUTW5MQ0FuWkdGMFlUUW5YU0JoY3lCamIyNXpkRHRjY2x4dVkyOXVjM1FnYkc5elpYTkZabVpsWTNSUVlYSmhiWE1nUFNCYkoyVm1abVZqZEVsa0p5d2dKMlZtWm1WamRDY3NJQ2R6YjNWeVkyVkpaQ2NzSUNkemIzVnlZMlVuTENBbmRHRnlaMlYwU1dRbkxDQW5kR0Z5WjJWMEp5d2dKMk52ZFc1MEoxMGdZWE1nWTI5dWMzUTdYSEpjYm1OdmJuTjBJSFJsZEdobGNsQmhjbUZ0Y3lBOUlGc25jMjkxY21ObFNXUW5MQ0FuYzI5MWNtTmxKeXdnSjNSaGNtZGxkRWxrSnl3Z0ozUmhjbWRsZENjc0lDZHBaQ2RkSUdGeklHTnZibk4wTzF4eVhHNWpiMjV6ZENCM1lYTkVaV1psWVhSbFpGQmhjbUZ0Y3lBOUlGc25kR0Z5WjJWMFNXUW5MQ0FuZEdGeVoyVjBKeXdnSjNOdmRYSmpaVWxrSnl3Z0ozTnZkWEpqWlNkZElHRnpJR052Ym5OME8xeHlYRzVqYjI1emRDQmxZMmh2VUdGeVlXMXpJRDBnV3lkamIyUmxKeXdnSjI1aGJXVW5MQ0FuYkdsdVpTZGRJR0Z6SUdOdmJuTjBPMXh5WEc1amIyNXpkQ0JrYVdGc2IyZFFZWEpoYlhNZ1BTQmJKMk52WkdVbkxDQW5ibUZ0WlNjc0lDZHNhVzVsSjEwZ1lYTWdZMjl1YzNRN1hISmNibU52Ym5OMElHMWxjM05oWjJWUVlYSmhiWE1nUFNCYkoyTnZaR1VuTENBbmJtRnRaU2NzSUNkc2FXNWxKMTBnWVhNZ1kyOXVjM1E3WEhKY2JtTnZibk4wSUdkaGJXVk1iMmRRWVhKaGJYTWdQU0JiSjJOdlpHVW5MQ0FuYm1GdFpTY3NJQ2RzYVc1bEoxMGdZWE1nWTI5dWMzUTdYSEpjYm1OdmJuTjBJR2RoYldWT1lXMWxURzluVUdGeVlXMXpJRDBnV3lkamIyUmxKeXdnSjI1aGJXVW5MQ0FuYkdsdVpTZGRJR0Z6SUdOdmJuTjBPMXh5WEc1amIyNXpkQ0J6ZEdGMFEyaGhibWRsVUdGeVlXMXpJRDBnV3lkcWIySW5MQ0FuYzNSeVpXNW5kR2duTENBblpHVjRkR1Z5YVhSNUp5d2dKM1pwZEdGc2FYUjVKeXdnSjJsdWRHVnNiR2xuWlc1alpTY3NJQ2R0YVc1a0p5d2dKM0JwWlhSNUp5d2dKMkYwZEdGamExQnZkMlZ5Snl3Z0oyUnBjbVZqZEVocGRDY3NJQ2RqY21sMGFXTmhiRWhwZENjc0lDZGhkSFJoWTJ0TllXZHBZMUJ2ZEdWdVkza25MQ0FuYUdWaGJFMWhaMmxqVUc5MFpXNWplU2NzSUNka1pYUmxjbTFwYm1GMGFXOXVKeXdnSjNOcmFXeHNVM0JsWldRbkxDQW5jM0JsYkd4VGNHVmxaQ2NzSUNkMFpXNWhZMmwwZVNkZElHRnpJR052Ym5OME8xeHlYRzVqYjI1emRDQmphR0Z1WjJWYWIyNWxVR0Z5WVcxeklEMGdXeWRwWkNjc0lDZHVZVzFsSjEwZ1lYTWdZMjl1YzNRN1hISmNibU52Ym5OMElHNWxkSGR2Y21zMlpGQmhjbUZ0Y3lBOUlGc25hVzV6ZEdGdVkyVW5MQ0FuWTI5dGJXRnVaQ2NzSUNka1lYUmhNQ2NzSUNka1lYUmhNU2NzSUNka1lYUmhNaWNzSUNka1lYUmhNeWRkSUdGeklHTnZibk4wTzF4eVhHNWpiMjV6ZENCdVlXMWxWRzluWjJ4bFVHRnlZVzF6SUQwZ1d5ZHBaQ2NzSUNkdVlXMWxKeXdnSjNSdloyZHNaU2RkSUdGeklHTnZibk4wTzF4eVhHNWNjbHh1Wlhod2IzSjBJSFI1Y0dVZ1UzUmhjblJ6VlhOcGJtZFFZWEpoYlhNZ1BTQjBlWEJsYjJZZ2MzUmhjblJ6VlhOcGJtZFFZWEpoYlhOYmJuVnRZbVZ5WFR0Y2NseHVaWGh3YjNKMElIUjVjR1VnUVdKcGJHbDBlVkJoY21GdGN5QTlJSFI1Y0dWdlppQmhZbWxzYVhSNVVHRnlZVzF6VzI1MWJXSmxjbDA3WEhKY2JtVjRjRzl5ZENCMGVYQmxJRUZpYVd4cGRIbEdkV3hzVUdGeVlXMXpJRDBnZEhsd1pXOW1JR0ZpYVd4cGRIbEdkV3hzVUdGeVlXMXpXMjUxYldKbGNsMDdYSEpjYm1WNGNHOXlkQ0IwZVhCbElFaGxZV1JOWVhKclpYSlFZWEpoYlhNZ1BTQjBlWEJsYjJZZ2FHVmhaRTFoY210bGNsQmhjbUZ0YzF0dWRXMWlaWEpkTzF4eVhHNWxlSEJ2Y25RZ2RIbHdaU0JCWkdSbFpFTnZiV0poZEdGdWRGQmhjbUZ0Y3lBOUlIUjVjR1Z2WmlCaFpHUmxaRU52YldKaGRHRnVkRkJoY21GdGMxdHVkVzFpWlhKZE8xeHlYRzVsZUhCdmNuUWdkSGx3WlNCQlpHUmxaRU52YldKaGRHRnVkRVoxYkd4UVlYSmhiWE1nUFNCMGVYQmxiMllnWVdSa1pXUkRiMjFpWVhSaGJuUkdkV3hzVUdGeVlXMXpXMjUxYldKbGNsMDdYSEpjYm1WNGNHOXlkQ0IwZVhCbElGSmxiVzkyYVc1blEyOXRZbUYwWVc1MFVHRnlZVzF6SUQwZ2RIbHdaVzltSUhKbGJXOTJhVzVuUTI5dFltRjBZVzUwVUdGeVlXMXpXMjUxYldKbGNsMDdYSEpjYm1WNGNHOXlkQ0IwZVhCbElFZGhhVzV6UldabVpXTjBVR0Z5WVcxeklEMGdkSGx3Wlc5bUlHZGhhVzV6UldabVpXTjBVR0Z5WVcxelcyNTFiV0psY2wwN1hISmNibVY0Y0c5eWRDQjBlWEJsSUZOMFlYUjFjMFZtWm1WamRFVjRjR3hwWTJsMFVHRnlZVzF6SUQwZ2RIbHdaVzltSUhOMFlYUjFjMFZtWm1WamRFVjRjR3hwWTJsMFVHRnlZVzF6VzI1MWJXSmxjbDA3WEhKY2JtVjRjRzl5ZENCMGVYQmxJRXh2YzJWelJXWm1aV04wVUdGeVlXMXpJRDBnZEhsd1pXOW1JR3h2YzJWelJXWm1aV04wVUdGeVlXMXpXMjUxYldKbGNsMDdYSEpjYm1WNGNHOXlkQ0IwZVhCbElGUmxkR2hsY2xCaGNtRnRjeUE5SUhSNWNHVnZaaUIwWlhSb1pYSlFZWEpoYlhOYmJuVnRZbVZ5WFR0Y2NseHVaWGh3YjNKMElIUjVjR1VnVjJGelJHVm1aV0YwWldSUVlYSmhiWE1nUFNCMGVYQmxiMllnZDJGelJHVm1aV0YwWldSUVlYSmhiWE5iYm5WdFltVnlYVHRjY2x4dVpYaHdiM0owSUhSNWNHVWdSV05vYjFCaGNtRnRjeUE5SUhSNWNHVnZaaUJsWTJodlVHRnlZVzF6VzI1MWJXSmxjbDA3WEhKY2JtVjRjRzl5ZENCMGVYQmxJRVJwWVd4dloxQmhjbUZ0Y3lBOUlIUjVjR1Z2WmlCa2FXRnNiMmRRWVhKaGJYTmJiblZ0WW1WeVhUdGNjbHh1Wlhod2IzSjBJSFI1Y0dVZ1RXVnpjMkZuWlZCaGNtRnRjeUE5SUhSNWNHVnZaaUJ0WlhOellXZGxVR0Z5WVcxelcyNTFiV0psY2wwN1hISmNibVY0Y0c5eWRDQjBlWEJsSUVkaGJXVk1iMmRRWVhKaGJYTWdQU0IwZVhCbGIyWWdaMkZ0WlV4dloxQmhjbUZ0YzF0dWRXMWlaWEpkTzF4eVhHNWxlSEJ2Y25RZ2RIbHdaU0JIWVcxbFRtRnRaVXh2WjFCaGNtRnRjeUE5SUhSNWNHVnZaaUJuWVcxbFRtRnRaVXh2WjFCaGNtRnRjMXR1ZFcxaVpYSmRPMXh5WEc1bGVIQnZjblFnZEhsd1pTQlRkR0YwUTJoaGJtZGxVR0Z5WVcxeklEMGdkSGx3Wlc5bUlITjBZWFJEYUdGdVoyVlFZWEpoYlhOYmJuVnRZbVZ5WFR0Y2NseHVaWGh3YjNKMElIUjVjR1VnUTJoaGJtZGxXbTl1WlZCaGNtRnRjeUE5SUhSNWNHVnZaaUJqYUdGdVoyVmFiMjVsVUdGeVlXMXpXMjUxYldKbGNsMDdYSEpjYm1WNGNHOXlkQ0IwZVhCbElFNWxkSGR2Y21zMlpGQmhjbUZ0Y3lBOUlIUjVjR1Z2WmlCdVpYUjNiM0pyTm1SUVlYSmhiWE5iYm5WdFltVnlYVHRjY2x4dVpYaHdiM0owSUhSNWNHVWdUbUZ0WlZSdloyZHNaVkJoY21GdGN5QTlJSFI1Y0dWdlppQnVZVzFsVkc5bloyeGxVR0Z5WVcxelcyNTFiV0psY2wwN1hISmNibHh5WEc0dkx5QkpaaUJPWlhSU1pXZGxlR1Z6TG5ObGRFWnNZV2RVY21GdWMyeGhkR2x2Ym5OT1pXVmtaV1FnYVhNZ2MyVjBJSFJ2SUhSeWRXVXNJSFJvWlc0Z1lXNTVYSEpjYmk4dklISmxaMlY0SUdOeVpXRjBaV1FnZEdoaGRDQnlaWEYxYVhKbGN5QmhJSFJ5WVc1emJHRjBhVzl1SUhkcGJHd2dZbVZuYVc0Z2QybDBhQ0IwYUdseklITjBjbWx1WjF4eVhHNHZMeUJoYm1RZ2JXRjBZMmdnZEdobElHMWhaMmxqVTNSeWFXNW5VbVZuWlhndUlDQlVhR2x6SUdseklHMWhlV0psSUdFZ1ltbDBJR2R2YjJaNUxDQmlkWFFnYVhOY2NseHVMeThnWVNCd2NtVjBkSGtnYzNSeVlXbG5hSFJtYjNKM1lYSmtJSGRoZVNCMGJ5QnRZWEpySUhKbFoyVjRaWE1nWm05eUlIUnlZVzV6YkdGMGFXOXVjeTVjY2x4dUx5OGdTV1lnYVhOemRXVWdJekV6TURZZ2FYTWdaWFpsY2lCeVpYTnZiSFpsWkN3Z2QyVWdZMkZ1SUhKbGJXOTJaU0IwYUdsekxseHlYRzVqYjI1emRDQnRZV2RwWTFSeVlXNXpiR0YwYVc5dVUzUnlhVzVuSUQwZ1lGNWVZRHRjY2x4dVkyOXVjM1FnYldGbmFXTlRkSEpwYm1kU1pXZGxlQ0E5SUM5ZVhGeGVYRnhlTHp0Y2NseHVZMjl1YzNRZ2EyVjVjMVJvWVhSU1pYRjFhWEpsVkhKaGJuTnNZWFJwYjI0Z1BTQmJYSEpjYmlBZ0oyRmlhV3hwZEhrbkxGeHlYRzRnSUNkdVlXMWxKeXhjY2x4dUlDQW5jMjkxY21ObEp5eGNjbHh1SUNBbmRHRnlaMlYwSnl4Y2NseHVJQ0FuYkdsdVpTY3NYSEpjYmwwN1hISmNibHh5WEc1amIyNXpkQ0J3WVhKelpVaGxiSEJsY2lBOUlDaGNjbHh1SUNBZ0lIQmhjbUZ0Y3pvZ2V5QjBhVzFsYzNSaGJYQS9PaUJ6ZEhKcGJtYzdJR05oY0hSMWNtVS9PaUJpYjI5c1pXRnVJSDBnZkNCMWJtUmxabWx1WldRc1hISmNiaUFnSUNCbWRXNWpUbUZ0WlRvZ2MzUnlhVzVuTEZ4eVhHNGdJQ0FnWm1sbGJHUnpPaUI3SUZ0ek9pQnpkSEpwYm1kZE9pQkdhV1ZzWkhNZ2ZTeGNjbHh1S1RvZ1VtVm5SWGh3SUQwK0lIdGNjbHh1SUNCd1lYSmhiWE1nUFNCd1lYSmhiWE1nUHo4Z2UzMDdYSEpjYmlBZ1kyOXVjM1FnZG1Gc2FXUkdhV1ZzWkhNNklITjBjbWx1WjF0ZElEMGdXMTA3WEhKY2JpQWdabTl5SUNoamIyNXpkQ0IyWVd4MVpTQnZaaUJQWW1wbFkzUXVkbUZzZFdWektHWnBaV3hrY3lrcElIdGNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdkbUZzZFdVZ0lUMDlJQ2R2WW1wbFkzUW5LVnh5WEc0Z0lDQWdJQ0JqYjI1MGFXNTFaVHRjY2x4dUlDQWdJSFpoYkdsa1JtbGxiR1J6TG5CMWMyZ29kbUZzZFdVdVptbGxiR1FwTzF4eVhHNGdJSDFjY2x4dUlDQlNaV2RsZUdWekxuWmhiR2xrWVhSbFVHRnlZVzF6S0hCaGNtRnRjeXdnWm5WdVkwNWhiV1VzSUZzblkyRndkSFZ5WlNjc0lDNHVMblpoYkdsa1JtbGxiR1J6WFNrN1hISmNibHh5WEc0Z0lDOHZJRVpwYm1RZ2RHaGxJR3hoYzNRZ2EyVjVJSGRsSUdOaGNtVWdZV0p2ZFhRc0lITnZJSGRsSUdOaGJpQnphRzl5ZEdWdUlIUm9aU0J5WldkbGVDQnBaaUJ1WldWa1pXUXVYSEpjYmlBZ1kyOXVjM1FnWTJGd2RIVnlaU0E5SUZKbFoyVjRaWE11ZEhKMVpVbG1WVzVrWldacGJtVmtLSEJoY21GdGN5NWpZWEIwZFhKbEtUdGNjbHh1SUNCamIyNXpkQ0JtYVdWc1pFdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aG1hV1ZzWkhNcE8xeHlYRzRnSUd4bGRDQnRZWGhMWlhrN1hISmNiaUFnYVdZZ0tHTmhjSFIxY21VcElIdGNjbHh1SUNBZ0lHMWhlRXRsZVNBOUlHWnBaV3hrUzJWNWMxdG1hV1ZzWkV0bGVYTXViR1Z1WjNSb0lDMGdNVjA3WEhKY2JpQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lHMWhlRXRsZVNBOUlEQTdYSEpjYmlBZ0lDQm1iM0lnS0dOdmJuTjBJR3RsZVNCdlppQm1hV1ZzWkV0bGVYTXBJSHRjY2x4dUlDQWdJQ0FnWTI5dWMzUWdkbUZzZFdVZ1BTQm1hV1ZzWkhOYmEyVjVYU0EvUHlCN2ZUdGNjbHh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIyWVd4MVpTQWhQVDBnSjI5aWFtVmpkQ2NwWEhKY2JpQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hISmNiaUFnSUNBZ0lHTnZibk4wSUdacFpXeGtUbUZ0WlNBOUlHWnBaV3hrYzF0clpYbGRQeTVtYVdWc1pEdGNjbHh1SUNBZ0lDQWdhV1lnS0dacFpXeGtUbUZ0WlNBbUppQm1hV1ZzWkU1aGJXVWdhVzRnY0dGeVlXMXpLVnh5WEc0Z0lDQWdJQ0FnSUcxaGVFdGxlU0E5SUd0bGVUdGNjbHh1SUNBZ0lIMWNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHZJRVp2Y2lCMFpYTjBhVzVuTENCcGRDZHpJSFZ6WldaMWJDQjBieUJyYm05M0lHbG1JSFJvYVhNZ2FYTWdZU0J5WldkbGVDQjBhR0YwSUhKbGNYVnBjbVZ6WEhKY2JpQWdMeThnZEhKaGJuTnNZWFJwYjI0dUlDQlhaU0IwWlhOMElIUm9hWE1nWW5rZ2MyVmxhVzVuSUdsbUlIUm9aWEpsSUdGeVpTQmhibmtnYzNCbFkybG1hV1ZrWEhKY2JpQWdMeThnWm1sbGJHUnpMQ0JoYm1RZ2FXWWdjMjhzSUdsdWMyVnlkR2x1WnlCaElHMWhaMmxqSUhOMGNtbHVaeUIwYUdGMElIZGxJR05oYmlCa1pYUmxZM1F1WEhKY2JpQWdMeThnVkdocGN5QnNaWFJ6SUhWeklHUnBabVpsY21WdWRHbGhkR1VnWW1WMGQyVmxiaUJjSW5KbFoyVjRJSFJvWVhRZ2MyaHZkV3hrSUdKbElIUnlZVzV6YkdGMFpXUmNJbHh5WEc0Z0lDOHZJR1V1Wnk0Z1lTQnlaV2RsZUNCM2FYUm9JR0IwWVhKblpYUmdJSE53WldOcFptbGxaQ3dnWVc1a0lGd2ljbVZuWlhnZ2RHaGhkQ0J6YUc5MWJHUnVKM1JjSWx4eVhHNGdJQzh2SUdVdVp5NGdZU0JuWVdsdWN5QmxabVpsWTNRZ2QybDBhQ0JxZFhOMElHVm1abVZqZEVsa0lITndaV05wWm1sbFpDNWNjbHh1SUNCamIyNXpkQ0IwY21GdWMxQmhjbUZ0Y3lBOUlFOWlhbVZqZEM1clpYbHpLSEJoY21GdGN5a3VabWxzZEdWeUtDaHJLU0E5UGlCclpYbHpWR2hoZEZKbGNYVnBjbVZVY21GdWMyeGhkR2x2Ymk1cGJtTnNkV1JsY3locktTazdYSEpjYmlBZ1kyOXVjM1FnYm1WbFpITlVjbUZ1YzJ4aGRHbHZibk1nUFNCT1pYUlNaV2RsZUdWekxtWnNZV2RVY21GdWMyeGhkR2x2Ym5OT1pXVmtaV1FnSmlZZ2RISmhibk5RWVhKaGJYTXViR1Z1WjNSb0lENGdNRHRjY2x4dVhISmNiaUFnTHk4Z1FuVnBiR1FnZEdobElISmxaMlY0SUdaeWIyMGdkR2hsSUdacFpXeGtjeTVjY2x4dUlDQnNaWFFnYzNSeUlEMGdibVZsWkhOVWNtRnVjMnhoZEdsdmJuTWdQeUJ0WVdkcFkxUnlZVzV6YkdGMGFXOXVVM1J5YVc1bklEb2dKMTRuTzF4eVhHNGdJR3hsZENCc1lYTjBTMlY1SUQwZ0xURTdYSEpjYmlBZ1ptOXlJQ2hqYjI1emRDQmZhMlY1SUdsdUlHWnBaV3hrY3lrZ2UxeHlYRzRnSUNBZ1kyOXVjM1FnYTJWNUlEMGdjR0Z5YzJWSmJuUW9YMnRsZVNrN1hISmNiaUFnSUNBdkx5QkdhV3hzSUdsdUlHSnNZVzVyY3k1Y2NseHVJQ0FnSUdOdmJuTjBJRzFwYzNOcGJtZEdhV1ZzWkhNZ1BTQnJaWGtnTFNCc1lYTjBTMlY1SUMwZ01UdGNjbHh1SUNBZ0lHbG1JQ2h0YVhOemFXNW5SbWxsYkdSeklEMDlQU0F4S1Z4eVhHNGdJQ0FnSUNCemRISWdLejBnSjF4Y1hGeDVlMDVsZEVacFpXeGtmU2M3WEhKY2JpQWdJQ0JsYkhObElHbG1JQ2h0YVhOemFXNW5SbWxsYkdSeklENGdNU2xjY2x4dUlDQWdJQ0FnYzNSeUlDczlJR0JjWEZ4Y2VYdE9aWFJHYVdWc1pIMTdKSHR0YVhOemFXNW5SbWxsYkdSemZYMWdPMXh5WEc0Z0lDQWdiR0Z6ZEV0bGVTQTlJR3RsZVR0Y2NseHVYSEpjYmlBZ0lDQmpiMjV6ZENCMllXeDFaU0E5SUdacFpXeGtjMXRyWlhsZE8xeHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQjJZV3gxWlNBaFBUMGdKMjlpYW1WamRDY3BYSEpjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdKSHRtZFc1alRtRnRaWDA2SUdsdWRtRnNhV1FnZG1Gc2RXVTZJQ1I3U2xOUFRpNXpkSEpwYm1kcFpua29kbUZzZFdVcGZXQXBPMXh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBJR1pwWld4a1RtRnRaU0E5SUdacFpXeGtjMXRyWlhsZFB5NW1hV1ZzWkR0Y2NseHVJQ0FnSUdOdmJuTjBJR1pwWld4a1ZtRnNkV1VnUFNCbWFXVnNaSE5iYTJWNVhUOHVkbUZzZFdVL0xuUnZVM1J5YVc1bktDa2dQejhnYldGMFkyaEVaV1poZFd4ME8xeHlYRzVjY2x4dUlDQWdJR2xtSUNobWFXVnNaRTVoYldVcElIdGNjbHh1SUNBZ0lDQWdjM1J5SUNzOUlGSmxaMlY0WlhNdWJXRjVZbVZEWVhCMGRYSmxLRnh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdiVzl5WlNCaFkyTjFjbUYwWlNCMGVYQmxJR2x1YzNSbFlXUWdiMllnWUdGellDQmpZWE4wWEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJ0WVhsaVpTQjBhR2x6SUdaMWJtTjBhVzl1SUc1bFpXUnpJR0VnY21WbVlXTjBiM0pwYm1kY2NseHVJQ0FnSUNBZ0lDQWdJR05oY0hSMWNtVXNJR1pwWld4a1RtRnRaU3dnS0hCaGNtRnRjeUJoY3lCN0lGdHpPaUJ6ZEhKcGJtZGRPaUJ6ZEhKcGJtY2dmU2xiWm1sbGJHUk9ZVzFsWFN3Z1ptbGxiR1JXWVd4MVpTa2dLMXh5WEc0Z0lDQWdJQ0FnSUhObGNHRnlZWFJ2Y2p0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUhOMGNpQXJQU0JtYVdWc1pGWmhiSFZsSUNzZ2MyVndZWEpoZEc5eU8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dVhISmNiaUFnSUNBdkx5QlRkRzl3SUdsbUlIZGxKM0psSUc1dmRDQmpZWEIwZFhKcGJtY2dZVzVrSUdSdmJpZDBJR05oY21VZ1lXSnZkWFFnWm5WMGRYSmxJR1pwWld4a2N5NWNjbHh1SUNBZ0lHbG1JQ2hyWlhrZ1BqMGdLRzFoZUV0bGVTQS9QeUF3SUdGeklHNTFiV0psY2lrcFhISmNiaUFnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJSDFjY2x4dUlDQnlaWFIxY200Z1VtVm5aWGhsY3k1d1lYSnpaU2h6ZEhJcE8xeHlYRzU5TzF4eVhHNWNjbHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1RtVjBVbVZuWlhobGN5QjdYSEpjYmlBZ2MzUmhkR2xqSUdac1lXZFVjbUZ1YzJ4aGRHbHZibk5PWldWa1pXUWdQU0JtWVd4elpUdGNjbHh1SUNCemRHRjBhV01nYzJWMFJteGhaMVJ5WVc1emJHRjBhVzl1YzA1bFpXUmxaQ2gyWVd4MVpUb2dZbTl2YkdWaGJpazZJSFp2YVdRZ2UxeHlYRzRnSUNBZ1RtVjBVbVZuWlhobGN5NW1iR0ZuVkhKaGJuTnNZWFJwYjI1elRtVmxaR1ZrSUQwZ2RtRnNkV1U3WEhKY2JpQWdmVnh5WEc0Z0lITjBZWFJwWXlCa2IyVnpUbVYwVW1WblpYaE9aV1ZrVkhKaGJuTnNZWFJwYjI0b2NtVm5aWGc2SUZKbFowVjRjQ0I4SUhOMGNtbHVaeWs2SUdKdmIyeGxZVzRnZTF4eVhHNGdJQ0FnTHk4Z1RtVmxaQ0IwYnlCZ2MyVjBSbXhoWjFSeVlXNXpiR0YwYVc5dWMwNWxaV1JsWkdBZ1ltVm1iM0psSUdOaGJHeHBibWNnZEdocGN5Qm1kVzVqZEdsdmJpNWNjbHh1SUNBZ0lHTnZibk52YkdVdVlYTnpaWEowS0U1bGRGSmxaMlY0WlhNdVpteGhaMVJ5WVc1emJHRjBhVzl1YzA1bFpXUmxaQ2s3WEhKY2JpQWdJQ0JqYjI1emRDQnpkSElnUFNCMGVYQmxiMllnY21WblpYZ2dQVDA5SUNkemRISnBibWNuSUQ4Z2NtVm5aWGdnT2lCeVpXZGxlQzV6YjNWeVkyVTdYSEpjYmlBZ0lDQnlaWFIxY200Z0lTRnRZV2RwWTFOMGNtbHVaMUpsWjJWNExtVjRaV01vYzNSeUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRzFoZEdOb1pYTTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl4ZFdsemNYVnZkWE12WTJGamRHSnZkQzlpYkc5aUwyMWhhVzR2Wkc5amN5OU1iMmRIZFdsa1pTNXRaQ014TkMxdVpYUjNiM0pyYzNSaGNuUnpZMkZ6ZEdsdVoxeHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUJ6ZEdGeWRITlZjMmx1Wnlod1lYSmhiWE0vT2lCUVlYSmhiWE04VTNSaGNuUnpWWE5wYm1kUVlYSmhiWE0rS1RvZ1RtVjBVbVZuWlhnOFUzUmhjblJ6VlhOcGJtZFFZWEpoYlhNK0lIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCd1lYSnpaVWhsYkhCbGNpaHdZWEpoYlhNc0lDZHpkR0Z5ZEhOVmMybHVaeWNzSUh0Y2NseHVJQ0FnSUNBZ01Eb2dleUJtYVdWc1pEb2dKM1I1Y0dVbkxDQjJZV3gxWlRvZ0p6SXdKeUI5TEZ4eVhHNGdJQ0FnSUNBeE9pQjdJR1pwWld4a09pQW5kR2x0WlhOMFlXMXdKeUI5TEZ4eVhHNGdJQ0FnSUNBeU9pQjdJR1pwWld4a09pQW5jMjkxY21ObFNXUW5JSDBzWEhKY2JpQWdJQ0FnSURNNklIc2dabWxsYkdRNklDZHpiM1Z5WTJVbklIMHNYSEpjYmlBZ0lDQWdJRFE2SUhzZ1ptbGxiR1E2SUNkcFpDY2dmU3hjY2x4dUlDQWdJQ0FnTlRvZ2V5Qm1hV1ZzWkRvZ0oyRmlhV3hwZEhrbklIMHNYSEpjYmlBZ0lDQWdJRFk2SUhzZ1ptbGxiR1E2SUNkMFlYSm5aWFJKWkNjZ2ZTeGNjbHh1SUNBZ0lDQWdOem9nZXlCbWFXVnNaRG9nSjNSaGNtZGxkQ2NnZlN4Y2NseHVJQ0FnSUNBZ09Eb2dleUJtYVdWc1pEb2dKMk5oYzNSVWFXMWxKeUI5TEZ4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nYldGMFkyaGxjem9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNGMWFYTnhkVzkxY3k5allXTjBZbTkwTDJKc2IySXZiV0ZwYmk5a2IyTnpMMHh2WjBkMWFXUmxMbTFrSXpFMUxXNWxkSGR2Y210aFltbHNhWFI1WEhKY2JpQWdJQ29nYldGMFkyaGxjem9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNGMWFYTnhkVzkxY3k5allXTjBZbTkwTDJKc2IySXZiV0ZwYmk5a2IyTnpMMHh2WjBkMWFXUmxMbTFrSXpFMkxXNWxkSGR2Y210aGIyVmhZbWxzYVhSNVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJR0ZpYVd4cGRIa29jR0Z5WVcxelB6b2dVR0Z5WVcxelBFRmlhV3hwZEhsUVlYSmhiWE0rS1RvZ1RtVjBVbVZuWlhnOFFXSnBiR2wwZVZCaGNtRnRjejRnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSEJoY25ObFNHVnNjR1Z5S0hCaGNtRnRjeXdnSjJGaWFXeHBkSGtuTENCN1hISmNiaUFnSUNBZ0lEQTZJSHNnWm1sbGJHUTZJQ2QwZVhCbEp5d2dkbUZzZFdVNklDY3lXekV5WFNjZ2ZTeGNjbHh1SUNBZ0lDQWdNVG9nZXlCbWFXVnNaRG9nSjNScGJXVnpkR0Z0Y0NjZ2ZTeGNjbHh1SUNBZ0lDQWdNam9nZXlCbWFXVnNaRG9nSjNOdmRYSmpaVWxrSnlCOUxGeHlYRzRnSUNBZ0lDQXpPaUI3SUdacFpXeGtPaUFuYzI5MWNtTmxKeUI5TEZ4eVhHNGdJQ0FnSUNBME9pQjdJR1pwWld4a09pQW5hV1FuSUgwc1hISmNiaUFnSUNBZ0lEVTZJSHNnWm1sbGJHUTZJQ2RoWW1sc2FYUjVKeUI5TEZ4eVhHNGdJQ0FnSUNBMk9pQjdJR1pwWld4a09pQW5kR0Z5WjJWMFNXUW5JSDBzWEhKY2JpQWdJQ0FnSURjNklIc2dabWxsYkdRNklDZDBZWEpuWlhRbklIMHNYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQnRZWFJqYUdWek9pQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjWFZwYzNGMWIzVnpMMk5oWTNSaWIzUXZZbXh2WWk5dFlXbHVMMlJ2WTNNdlRHOW5SM1ZwWkdVdWJXUWpNVFV0Ym1WMGQyOXlhMkZpYVd4cGRIbGNjbHh1SUNBZ0tpQnRZWFJqYUdWek9pQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjWFZwYzNGMWIzVnpMMk5oWTNSaWIzUXZZbXh2WWk5dFlXbHVMMlJ2WTNNdlRHOW5SM1ZwWkdVdWJXUWpNVFl0Ym1WMGQyOXlhMkZ2WldGaWFXeHBkSGxjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1lXSnBiR2wwZVVaMWJHd29jR0Z5WVcxelB6b2dVR0Z5WVcxelBFRmlhV3hwZEhsR2RXeHNVR0Z5WVcxelBpazZJRTVsZEZKbFoyVjRQRUZpYVd4cGRIbEdkV3hzVUdGeVlXMXpQaUI3WEhKY2JpQWdJQ0J5WlhSMWNtNGdjR0Z5YzJWSVpXeHdaWElvY0dGeVlXMXpMQ0FuWVdKcGJHbDBlVVoxYkd3bkxDQjdYSEpjYmlBZ0lDQWdJREE2SUhzZ1ptbGxiR1E2SUNkMGVYQmxKeXdnZG1Gc2RXVTZJQ2N5V3pFeVhTY2dmU3hjY2x4dUlDQWdJQ0FnTVRvZ2V5Qm1hV1ZzWkRvZ0ozUnBiV1Z6ZEdGdGNDY2dmU3hjY2x4dUlDQWdJQ0FnTWpvZ2V5Qm1hV1ZzWkRvZ0ozTnZkWEpqWlVsa0p5QjlMRnh5WEc0Z0lDQWdJQ0F6T2lCN0lHWnBaV3hrT2lBbmMyOTFjbU5sSnlCOUxGeHlYRzRnSUNBZ0lDQTBPaUI3SUdacFpXeGtPaUFuYVdRbklIMHNYSEpjYmlBZ0lDQWdJRFU2SUhzZ1ptbGxiR1E2SUNkaFltbHNhWFI1SnlCOUxGeHlYRzRnSUNBZ0lDQTJPaUI3SUdacFpXeGtPaUFuZEdGeVoyVjBTV1FuSUgwc1hISmNiaUFnSUNBZ0lEYzZJSHNnWm1sbGJHUTZJQ2QwWVhKblpYUW5JSDBzWEhKY2JpQWdJQ0FnSURnNklIc2dabWxsYkdRNklDZG1iR0ZuY3ljZ2ZTeGNjbHh1SUNBZ0lDQWdPVG9nZXlCbWFXVnNaRG9nSjJSaGJXRm5aU2NnZlN4Y2NseHVJQ0FnSUNBZ01qUTZJSHNnWm1sbGJHUTZJQ2QwWVhKblpYUkRkWEp5Wlc1MFNIQW5JSDBzWEhKY2JpQWdJQ0FnSURJMU9pQjdJR1pwWld4a09pQW5kR0Z5WjJWMFRXRjRTSEFuSUgwc1hISmNiaUFnSUNBZ0lEUXdPaUI3SUdacFpXeGtPaUFuZUNjZ2ZTeGNjbHh1SUNBZ0lDQWdOREU2SUhzZ1ptbGxiR1E2SUNkNUp5QjlMRnh5WEc0Z0lDQWdJQ0EwTWpvZ2V5Qm1hV1ZzWkRvZ0ozb25JSDBzWEhKY2JpQWdJQ0FnSURRek9pQjdJR1pwWld4a09pQW5hR1ZoWkdsdVp5Y2dmU3hjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRzFoZEdOb1pYTTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl4ZFdsemNYVnZkWE12WTJGamRHSnZkQzlpYkc5aUwyMWhhVzR2Wkc5amN5OU1iMmRIZFdsa1pTNXRaQ014WWkxdVpYUjNiM0pyZEdGeVoyVjBhV052Ymkxb1pXRmtMVzFoY210bGNuTmNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nYUdWaFpFMWhjbXRsY2lod1lYSmhiWE0vT2lCUVlYSmhiWE04U0dWaFpFMWhjbXRsY2xCaGNtRnRjejRwT2lCT1pYUlNaV2RsZUR4SVpXRmtUV0Z5YTJWeVVHRnlZVzF6UGlCN1hISmNiaUFnSUNCeVpYUjFjbTRnY0dGeWMyVklaV3h3WlhJb2NHRnlZVzF6TENBbmFHVmhaRTFoY210bGNpY3NJSHRjY2x4dUlDQWdJQ0FnTURvZ2V5Qm1hV1ZzWkRvZ0ozUjVjR1VuTENCMllXeDFaVG9nSnpJM0p5QjlMRnh5WEc0Z0lDQWdJQ0F4T2lCN0lHWnBaV3hrT2lBbmRHbHRaWE4wWVcxd0p5QjlMRnh5WEc0Z0lDQWdJQ0F5T2lCN0lHWnBaV3hrT2lBbmRHRnlaMlYwU1dRbklIMHNYSEpjYmlBZ0lDQWdJRE02SUhzZ1ptbGxiR1E2SUNkMFlYSm5aWFFuSUgwc1hISmNiaUFnSUNBZ0lEWTZJSHNnWm1sbGJHUTZJQ2RwWkNjZ2ZTeGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlHMWhkR05vWlhNNklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXhkV2x6Y1hWdmRYTXZZMkZqZEdKdmRDOWliRzlpTDIxaGFXNHZaRzlqY3k5TWIyZEhkV2xrWlM1dFpDTXdNeTFoWkdSamIyMWlZWFJoYm5SY2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdZV1JrWldSRGIyMWlZWFJoYm5Rb2NHRnlZVzF6UHpvZ1VHRnlZVzF6UEVGa1pHVmtRMjl0WW1GMFlXNTBVR0Z5WVcxelBpazZJRTVsZEZKbFoyVjRQRUZrWkdWa1EyOXRZbUYwWVc1MFVHRnlZVzF6UGlCN1hISmNiaUFnSUNCeVpYUjFjbTRnY0dGeWMyVklaV3h3WlhJb2NHRnlZVzF6TENBbllXUmtaV1JEYjIxaVlYUmhiblFuTENCN1hISmNiaUFnSUNBZ0lEQTZJSHNnWm1sbGJHUTZJQ2QwZVhCbEp5d2dkbUZzZFdVNklDY3dNeWNnZlN4Y2NseHVJQ0FnSUNBZ01Ub2dleUJtYVdWc1pEb2dKM1JwYldWemRHRnRjQ2NnZlN4Y2NseHVJQ0FnSUNBZ01qb2dleUJtYVdWc1pEb2dKMmxrSnlCOUxGeHlYRzRnSUNBZ0lDQXpPaUI3SUdacFpXeGtPaUFuYm1GdFpTY2dmU3hjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRzFoZEdOb1pYTTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl4ZFdsemNYVnZkWE12WTJGamRHSnZkQzlpYkc5aUwyMWhhVzR2Wkc5amN5OU1iMmRIZFdsa1pTNXRaQ013TXkxaFpHUmpiMjFpWVhSaGJuUmNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nWVdSa1pXUkRiMjFpWVhSaGJuUkdkV3hzS0Z4eVhHNGdJQ0FnSUNCd1lYSmhiWE0vT2lCUVlYSmhiWE04UVdSa1pXUkRiMjFpWVhSaGJuUkdkV3hzVUdGeVlXMXpQaXhjY2x4dUlDQXBPaUJPWlhSU1pXZGxlRHhCWkdSbFpFTnZiV0poZEdGdWRFWjFiR3hRWVhKaGJYTStJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQndZWEp6WlVobGJIQmxjaWh3WVhKaGJYTXNJQ2RoWkdSbFpFTnZiV0poZEdGdWRFWjFiR3duTENCN1hISmNiaUFnSUNBZ0lEQTZJSHNnWm1sbGJHUTZJQ2QwZVhCbEp5d2dkbUZzZFdVNklDY3dNeWNnZlN4Y2NseHVJQ0FnSUNBZ01Ub2dleUJtYVdWc1pEb2dKM1JwYldWemRHRnRjQ2NnZlN4Y2NseHVJQ0FnSUNBZ01qb2dleUJtYVdWc1pEb2dKMmxrSnlCOUxGeHlYRzRnSUNBZ0lDQXpPaUI3SUdacFpXeGtPaUFuYm1GdFpTY2dmU3hjY2x4dUlDQWdJQ0FnTkRvZ2V5Qm1hV1ZzWkRvZ0oycHZZaWNnZlN4Y2NseHVJQ0FnSUNBZ05Ub2dleUJtYVdWc1pEb2dKMnhsZG1Wc0p5QjlMRnh5WEc0Z0lDQWdJQ0EyT2lCN0lHWnBaV3hrT2lBbmIzZHVaWEpKWkNjZ2ZTeGNjbHh1SUNBZ0lDQWdPRG9nZXlCbWFXVnNaRG9nSjNkdmNteGtKeUI5TEZ4eVhHNGdJQ0FnSUNBNU9pQjdJR1pwWld4a09pQW5ibkJqVG1GdFpVbGtKeUI5TEZ4eVhHNGdJQ0FnSUNBeE1Eb2dleUJtYVdWc1pEb2dKMjV3WTBKaGMyVkpaQ2NnZlN4Y2NseHVJQ0FnSUNBZ01URTZJSHNnWm1sbGJHUTZJQ2RqZFhKeVpXNTBTSEFuSUgwc1hISmNiaUFnSUNBZ0lERXlPaUI3SUdacFpXeGtPaUFuYUhBbklIMHNYSEpjYmlBZ0lDQWdJREUzT2lCN0lHWnBaV3hrT2lBbmVDY2dmU3hjY2x4dUlDQWdJQ0FnTVRnNklIc2dabWxsYkdRNklDZDVKeUI5TEZ4eVhHNGdJQ0FnSUNBeE9Ub2dleUJtYVdWc1pEb2dKM29uSUgwc1hISmNiaUFnSUNBZ0lESXdPaUI3SUdacFpXeGtPaUFuYUdWaFpHbHVaeWNnZlN4Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUcxaGRHTm9aWE02SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eGRXbHpjWFZ2ZFhNdlkyRmpkR0p2ZEM5aWJHOWlMMjFoYVc0dlpHOWpjeTlNYjJkSGRXbGtaUzV0WkNNd05DMXlaVzF2ZG1WamIyMWlZWFJoYm5SY2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdjbVZ0YjNacGJtZERiMjFpWVhSaGJuUW9YSEpjYmlBZ0lDQWdJSEJoY21GdGN6ODZJRkJoY21GdGN6eFNaVzF2ZG1sdVowTnZiV0poZEdGdWRGQmhjbUZ0Y3o0c1hISmNiaUFnS1RvZ1RtVjBVbVZuWlhnOFVtVnRiM1pwYm1kRGIyMWlZWFJoYm5SUVlYSmhiWE0rSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJ3WVhKelpVaGxiSEJsY2lod1lYSmhiWE1zSUNkeVpXMXZkbWx1WjBOdmJXSmhkR0Z1ZENjc0lIdGNjbHh1SUNBZ0lDQWdNRG9nZXlCbWFXVnNaRG9nSjNSNWNHVW5MQ0IyWVd4MVpUb2dKekEwSnlCOUxGeHlYRzRnSUNBZ0lDQXhPaUI3SUdacFpXeGtPaUFuZEdsdFpYTjBZVzF3SnlCOUxGeHlYRzRnSUNBZ0lDQXlPaUI3SUdacFpXeGtPaUFuYVdRbklIMHNYSEpjYmlBZ0lDQWdJRE02SUhzZ1ptbGxiR1E2SUNkdVlXMWxKeUI5TEZ4eVhHNGdJQ0FnSUNBeE1qb2dleUJtYVdWc1pEb2dKMmh3SnlCOUxGeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ2JXRjBZMmhsY3pvZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzRjFhWE54ZFc5MWN5OWpZV04wWW05MEwySnNiMkl2YldGcGJpOWtiMk56TDB4dlowZDFhV1JsTG0xa0l6RmhMVzVsZEhkdmNtdGlkV1ptWEhKY2JpQWdJQ292WEhKY2JpQWdjM1JoZEdsaklHZGhhVzV6UldabVpXTjBLSEJoY21GdGN6ODZJRkJoY21GdGN6eEhZV2x1YzBWbVptVmpkRkJoY21GdGN6NHBPaUJPWlhSU1pXZGxlRHhIWVdsdWMwVm1abVZqZEZCaGNtRnRjejRnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSEJoY25ObFNHVnNjR1Z5S0hCaGNtRnRjeXdnSjJkaGFXNXpSV1ptWldOMEp5d2dlMXh5WEc0Z0lDQWdJQ0F3T2lCN0lHWnBaV3hrT2lBbmRIbHdaU2NzSUhaaGJIVmxPaUFuTWpZbklIMHNYSEpjYmlBZ0lDQWdJREU2SUhzZ1ptbGxiR1E2SUNkMGFXMWxjM1JoYlhBbklIMHNYSEpjYmlBZ0lDQWdJREk2SUhzZ1ptbGxiR1E2SUNkbFptWmxZM1JKWkNjZ2ZTeGNjbHh1SUNBZ0lDQWdNem9nZXlCbWFXVnNaRG9nSjJWbVptVmpkQ2NnZlN4Y2NseHVJQ0FnSUNBZ05Eb2dleUJtYVdWc1pEb2dKMlIxY21GMGFXOXVKeUI5TEZ4eVhHNGdJQ0FnSUNBMU9pQjdJR1pwWld4a09pQW5jMjkxY21ObFNXUW5JSDBzWEhKY2JpQWdJQ0FnSURZNklIc2dabWxsYkdRNklDZHpiM1Z5WTJVbklIMHNYSEpjYmlBZ0lDQWdJRGM2SUhzZ1ptbGxiR1E2SUNkMFlYSm5aWFJKWkNjZ2ZTeGNjbHh1SUNBZ0lDQWdPRG9nZXlCbWFXVnNaRG9nSjNSaGNtZGxkQ2NnZlN4Y2NseHVJQ0FnSUNBZ09Ub2dleUJtYVdWc1pEb2dKMk52ZFc1MEp5QjlMRnh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVSEpsWm1WeUlHZGhhVzV6UldabVpXTjBJRzkyWlhJZ2RHaHBjeUJtZFc1amRHbHZiaUIxYm14bGMzTWdlVzkxSUhKbFlXeHNlU0J1WldWa0lHVjRkSEpoSUdSaGRHRXVYSEpjYmlBZ0lDb2diV0YwWTJobGN6b2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0YxYVhOeGRXOTFjeTlqWVdOMFltOTBMMkpzYjJJdmJXRnBiaTlrYjJOekwweHZaMGQxYVdSbExtMWtJekkyTFc1bGRIZHZjbXR6ZEdGMGRYTmxabVpsWTNSelhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJSE4wWVhSMWMwVm1abVZqZEVWNGNHeHBZMmwwS0Z4eVhHNGdJQ0FnSUNCd1lYSmhiWE0vT2lCUVlYSmhiWE04VTNSaGRIVnpSV1ptWldOMFJYaHdiR2xqYVhSUVlYSmhiWE0rTEZ4eVhHNGdJQ2s2SUU1bGRGSmxaMlY0UEZOMFlYUjFjMFZtWm1WamRFVjRjR3hwWTJsMFVHRnlZVzF6UGlCN1hISmNiaUFnSUNCeVpYUjFjbTRnY0dGeWMyVklaV3h3WlhJb2NHRnlZVzF6TENBbmMzUmhkSFZ6UldabVpXTjBSWGh3YkdsamFYUW5MQ0I3WEhKY2JpQWdJQ0FnSURBNklIc2dabWxsYkdRNklDZDBlWEJsSnl3Z2RtRnNkV1U2SUNjek9DY2dmU3hjY2x4dUlDQWdJQ0FnTVRvZ2V5Qm1hV1ZzWkRvZ0ozUnBiV1Z6ZEdGdGNDY2dmU3hjY2x4dUlDQWdJQ0FnTWpvZ2V5Qm1hV1ZzWkRvZ0ozUmhjbWRsZEVsa0p5QjlMRnh5WEc0Z0lDQWdJQ0F6T2lCN0lHWnBaV3hrT2lBbmRHRnlaMlYwSnlCOUxGeHlYRzRnSUNBZ0lDQTFPaUI3SUdacFpXeGtPaUFuYUhBbklIMHNYSEpjYmlBZ0lDQWdJRFk2SUhzZ1ptbGxiR1E2SUNkdFlYaEljQ2NnZlN4Y2NseHVJQ0FnSUNBZ01URTZJSHNnWm1sbGJHUTZJQ2Q0SnlCOUxGeHlYRzRnSUNBZ0lDQXhNam9nZXlCbWFXVnNaRG9nSjNrbklIMHNYSEpjYmlBZ0lDQWdJREV6T2lCN0lHWnBaV3hrT2lBbmVpY2dmU3hjY2x4dUlDQWdJQ0FnTVRRNklIc2dabWxsYkdRNklDZG9aV0ZrYVc1bkp5QjlMRnh5WEc0Z0lDQWdJQ0F4TlRvZ2V5Qm1hV1ZzWkRvZ0oyUmhkR0V3SnlCOUxGeHlYRzRnSUNBZ0lDQXhOam9nZXlCbWFXVnNaRG9nSjJSaGRHRXhKeUI5TEZ4eVhHNGdJQ0FnSUNBeE56b2dleUJtYVdWc1pEb2dKMlJoZEdFeUp5QjlMRnh5WEc0Z0lDQWdJQ0F4T0RvZ2V5Qm1hV1ZzWkRvZ0oyUmhkR0V6SnlCOUxGeHlYRzRnSUNBZ0lDQXhPVG9nZXlCbWFXVnNaRG9nSjJSaGRHRTBKeUI5TEZ4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nYldGMFkyaGxjem9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNGMWFYTnhkVzkxY3k5allXTjBZbTkwTDJKc2IySXZiV0ZwYmk5a2IyTnpMMHh2WjBkMWFXUmxMbTFrSXpGbExXNWxkSGR2Y210aWRXWm1jbVZ0YjNabFhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJR3h2YzJWelJXWm1aV04wS0hCaGNtRnRjejg2SUZCaGNtRnRjenhNYjNObGMwVm1abVZqZEZCaGNtRnRjejRwT2lCT1pYUlNaV2RsZUR4TWIzTmxjMFZtWm1WamRGQmhjbUZ0Y3o0Z2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhCaGNuTmxTR1ZzY0dWeUtIQmhjbUZ0Y3l3Z0oyeHZjMlZ6UldabVpXTjBKeXdnZTF4eVhHNGdJQ0FnSUNBd09pQjdJR1pwWld4a09pQW5kSGx3WlNjc0lIWmhiSFZsT2lBbk16QW5JSDBzWEhKY2JpQWdJQ0FnSURFNklIc2dabWxsYkdRNklDZDBhVzFsYzNSaGJYQW5JSDBzWEhKY2JpQWdJQ0FnSURJNklIc2dabWxsYkdRNklDZGxabVpsWTNSSlpDY2dmU3hjY2x4dUlDQWdJQ0FnTXpvZ2V5Qm1hV1ZzWkRvZ0oyVm1abVZqZENjZ2ZTeGNjbHh1SUNBZ0lDQWdOVG9nZXlCbWFXVnNaRG9nSjNOdmRYSmpaVWxrSnlCOUxGeHlYRzRnSUNBZ0lDQTJPaUI3SUdacFpXeGtPaUFuYzI5MWNtTmxKeUI5TEZ4eVhHNGdJQ0FnSUNBM09pQjdJR1pwWld4a09pQW5kR0Z5WjJWMFNXUW5JSDBzWEhKY2JpQWdJQ0FnSURnNklIc2dabWxsYkdRNklDZDBZWEpuWlhRbklIMHNYSEpjYmlBZ0lDQWdJRGs2SUhzZ1ptbGxiR1E2SUNkamIzVnVkQ2NnZlN4Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUcxaGRHTm9aWE02SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eGRXbHpjWFZ2ZFhNdlkyRmpkR0p2ZEM5aWJHOWlMMjFoYVc0dlpHOWpjeTlNYjJkSGRXbGtaUzV0WkNNeU15MXVaWFIzYjNKcmRHVjBhR1Z5WEhKY2JpQWdJQ292WEhKY2JpQWdjM1JoZEdsaklIUmxkR2hsY2lod1lYSmhiWE0vT2lCUVlYSmhiWE04VkdWMGFHVnlVR0Z5WVcxelBpazZJRTVsZEZKbFoyVjRQRlJsZEdobGNsQmhjbUZ0Y3o0Z2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhCaGNuTmxTR1ZzY0dWeUtIQmhjbUZ0Y3l3Z0ozUmxkR2hsY2ljc0lIdGNjbHh1SUNBZ0lDQWdNRG9nZXlCbWFXVnNaRG9nSjNSNWNHVW5MQ0IyWVd4MVpUb2dKek0xSnlCOUxGeHlYRzRnSUNBZ0lDQXhPaUI3SUdacFpXeGtPaUFuZEdsdFpYTjBZVzF3SnlCOUxGeHlYRzRnSUNBZ0lDQXlPaUI3SUdacFpXeGtPaUFuYzI5MWNtTmxTV1FuSUgwc1hISmNiaUFnSUNBZ0lETTZJSHNnWm1sbGJHUTZJQ2R6YjNWeVkyVW5JSDBzWEhKY2JpQWdJQ0FnSURRNklIc2dabWxsYkdRNklDZDBZWEpuWlhSSlpDY2dmU3hjY2x4dUlDQWdJQ0FnTlRvZ2V5Qm1hV1ZzWkRvZ0ozUmhjbWRsZENjZ2ZTeGNjbHh1SUNBZ0lDQWdPRG9nZXlCbWFXVnNaRG9nSjJsa0p5QjlMRnh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dKM1JoY21kbGRDY2dkMkZ6SUdSbFptVmhkR1ZrSUdKNUlDZHpiM1Z5WTJVblhISmNiaUFnSUNvZ2JXRjBZMmhsY3pvZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzRjFhWE54ZFc5MWN5OWpZV04wWW05MEwySnNiMkl2YldGcGJpOWtiMk56TDB4dlowZDFhV1JsTG0xa0l6RTVMVzVsZEhkdmNtdGtaV0YwYUZ4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5QjNZWE5FWldabFlYUmxaQ2h3WVhKaGJYTS9PaUJRWVhKaGJYTThWMkZ6UkdWbVpXRjBaV1JRWVhKaGJYTStLVG9nVG1WMFVtVm5aWGc4VjJGelJHVm1aV0YwWldSUVlYSmhiWE0rSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJ3WVhKelpVaGxiSEJsY2lod1lYSmhiWE1zSUNkM1lYTkVaV1psWVhSbFpDY3NJSHRjY2x4dUlDQWdJQ0FnTURvZ2V5Qm1hV1ZzWkRvZ0ozUjVjR1VuTENCMllXeDFaVG9nSnpJMUp5QjlMRnh5WEc0Z0lDQWdJQ0F4T2lCN0lHWnBaV3hrT2lBbmRHbHRaWE4wWVcxd0p5QjlMRnh5WEc0Z0lDQWdJQ0F5T2lCN0lHWnBaV3hrT2lBbmRHRnlaMlYwU1dRbklIMHNYSEpjYmlBZ0lDQWdJRE02SUhzZ1ptbGxiR1E2SUNkMFlYSm5aWFFuSUgwc1hISmNiaUFnSUNBZ0lEUTZJSHNnWm1sbGJHUTZJQ2R6YjNWeVkyVkpaQ2NnZlN4Y2NseHVJQ0FnSUNBZ05Ub2dleUJtYVdWc1pEb2dKM052ZFhKalpTY2dmU3hjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRzFoZEdOb1pYTTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl4ZFdsemNYVnZkWE12WTJGamRHSnZkQzlpYkc5aUwyMWhhVzR2Wkc5amN5OU1iMmRIZFdsa1pTNXRaQ013TUMxc2IyZHNhVzVsWEhKY2JpQWdJQ292WEhKY2JpQWdjM1JoZEdsaklHVmphRzhvY0dGeVlXMXpQem9nVUdGeVlXMXpQRVZqYUc5UVlYSmhiWE0rS1RvZ1RtVjBVbVZuWlhnOFJXTm9iMUJoY21GdGN6NGdlMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ3WVhKaGJYTWdQVDA5SUNkMWJtUmxabWx1WldRbktWeHlYRzRnSUNBZ0lDQndZWEpoYlhNZ1BTQjdmVHRjY2x4dUlDQWdJRkpsWjJWNFpYTXVkbUZzYVdSaGRHVlFZWEpoYlhNb2NHRnlZVzF6TENBblpXTm9ieWNzSUZzbmRIbHdaU2NzSUNkMGFXMWxjM1JoYlhBbkxDQW5ZMjlrWlNjc0lDZHVZVzFsSnl3Z0oyeHBibVVuTENBblkyRndkSFZ5WlNkZEtUdGNjbHh1SUNBZ0lIQmhjbUZ0Y3k1amIyUmxJRDBnSnpBd016Z25PMXh5WEc0Z0lDQWdjbVYwZFhKdUlFNWxkRkpsWjJWNFpYTXVaMkZ0WlV4dlp5aHdZWEpoYlhNcE8xeHlYRzRnSUgxY2NseHVYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUcxaGRHTm9aWE02SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eGRXbHpjWFZ2ZFhNdlkyRmpkR0p2ZEM5aWJHOWlMMjFoYVc0dlpHOWpjeTlNYjJkSGRXbGtaUzV0WkNNd01DMXNiMmRzYVc1bFhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJR1JwWVd4dlp5aHdZWEpoYlhNL09pQlFZWEpoYlhNOFJHbGhiRzluVUdGeVlXMXpQaWs2SUU1bGRGSmxaMlY0UEVScFlXeHZaMUJoY21GdGN6NGdlMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ3WVhKaGJYTWdQVDA5SUNkMWJtUmxabWx1WldRbktWeHlYRzRnSUNBZ0lDQndZWEpoYlhNZ1BTQjdmVHRjY2x4dUlDQWdJRkpsWjJWNFpYTXVkbUZzYVdSaGRHVlFZWEpoYlhNb2NHRnlZVzF6TENBblpHbGhiRzluSnl3Z1d5ZDBlWEJsSnl3Z0ozUnBiV1Z6ZEdGdGNDY3NJQ2RqYjJSbEp5d2dKMjVoYldVbkxDQW5iR2x1WlNjc0lDZGpZWEIwZFhKbEoxMHBPMXh5WEc0Z0lDQWdjR0Z5WVcxekxtTnZaR1VnUFNBbk1EQTBOQ2M3WEhKY2JpQWdJQ0J5WlhSMWNtNGdUbVYwVW1WblpYaGxjeTVuWVcxbFRHOW5LSEJoY21GdGN5azdYSEpjYmlBZ2ZWeHlYRzVjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ2JXRjBZMmhsY3pvZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzRjFhWE54ZFc5MWN5OWpZV04wWW05MEwySnNiMkl2YldGcGJpOWtiMk56TDB4dlowZDFhV1JsTG0xa0l6QXdMV3h2WjJ4cGJtVmNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nYldWemMyRm5aU2h3WVhKaGJYTS9PaUJRWVhKaGJYTThUV1Z6YzJGblpWQmhjbUZ0Y3o0cE9pQk9aWFJTWldkbGVEeE5aWE56WVdkbFVHRnlZVzF6UGlCN1hISmNiaUFnSUNCcFppQW9kSGx3Wlc5bUlIQmhjbUZ0Y3lBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwWEhKY2JpQWdJQ0FnSUhCaGNtRnRjeUE5SUh0OU8xeHlYRzRnSUNBZ1VtVm5aWGhsY3k1MllXeHBaR0YwWlZCaGNtRnRjeWh3WVhKaGJYTXNJQ2R0WlhOellXZGxKeXdnV3lkMGVYQmxKeXdnSjNScGJXVnpkR0Z0Y0Njc0lDZGpiMlJsSnl3Z0oyNWhiV1VuTENBbmJHbHVaU2NzSUNkallYQjBkWEpsSjEwcE8xeHlYRzRnSUNBZ2NHRnlZVzF6TG1OdlpHVWdQU0FuTURnek9TYzdYSEpjYmlBZ0lDQnlaWFIxY200Z1RtVjBVbVZuWlhobGN5NW5ZVzFsVEc5bktIQmhjbUZ0Y3lrN1hISmNiaUFnZlZ4eVhHNWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nWm1sbGJHUnpPaUJqYjJSbExDQnVZVzFsTENCc2FXNWxMQ0JqWVhCMGRYSmxYSEpjYmlBZ0lDb2diV0YwWTJobGN6b2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0YxYVhOeGRXOTFjeTlqWVdOMFltOTBMMkpzYjJJdmJXRnBiaTlrYjJOekwweHZaMGQxYVdSbExtMWtJekF3TFd4dloyeHBibVZjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1oyRnRaVXh2Wnlod1lYSmhiWE0vT2lCUVlYSmhiWE04UjJGdFpVeHZaMUJoY21GdGN6NHBPaUJPWlhSU1pXZGxlRHhIWVcxbFRHOW5VR0Z5WVcxelBpQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2NHRnljMlZJWld4d1pYSW9jR0Z5WVcxekxDQW5aMkZ0WlV4dlp5Y3NJSHRjY2x4dUlDQWdJQ0FnTURvZ2V5Qm1hV1ZzWkRvZ0ozUjVjR1VuTENCMllXeDFaVG9nSnpBd0p5QjlMRnh5WEc0Z0lDQWdJQ0F4T2lCN0lHWnBaV3hrT2lBbmRHbHRaWE4wWVcxd0p5QjlMRnh5WEc0Z0lDQWdJQ0F5T2lCN0lHWnBaV3hrT2lBblkyOWtaU2NnZlN4Y2NseHVJQ0FnSUNBZ016b2dleUJtYVdWc1pEb2dKMjVoYldVbklIMHNYSEpjYmlBZ0lDQWdJRFE2SUhzZ1ptbGxiR1E2SUNkc2FXNWxKeUI5TEZ4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nYldGMFkyaGxjem9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNGMWFYTnhkVzkxY3k5allXTjBZbTkwTDJKc2IySXZiV0ZwYmk5a2IyTnpMMHh2WjBkMWFXUmxMbTFrSXpBd0xXeHZaMnhwYm1WY2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdaMkZ0WlU1aGJXVk1iMmNvY0dGeVlXMXpQem9nVUdGeVlXMXpQRWRoYldWT1lXMWxURzluVUdGeVlXMXpQaWs2SUU1bGRGSmxaMlY0UEVkaGJXVk9ZVzFsVEc5blVHRnlZVzF6UGlCN1hISmNiaUFnSUNBdkx5Qm1iM0lnWTI5dGNHRjBJSGRwZEdnZ1VtVm5aWGhsY3k1Y2NseHVJQ0FnSUhKbGRIVnliaUJPWlhSU1pXZGxlR1Z6TG1kaGJXVk1iMmNvY0dGeVlXMXpLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQnRZWFJqYUdWek9pQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjWFZwYzNGMWIzVnpMMk5oWTNSaWIzUXZZbXh2WWk5dFlXbHVMMlJ2WTNNdlRHOW5SM1ZwWkdVdWJXUWpNR010Y0d4aGVXVnljM1JoZEhOY2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdjM1JoZEVOb1lXNW5aU2h3WVhKaGJYTS9PaUJRWVhKaGJYTThVM1JoZEVOb1lXNW5aVkJoY21GdGN6NHBPaUJPWlhSU1pXZGxlRHhUZEdGMFEyaGhibWRsVUdGeVlXMXpQaUI3WEhKY2JpQWdJQ0J5WlhSMWNtNGdjR0Z5YzJWSVpXeHdaWElvY0dGeVlXMXpMQ0FuYzNSaGRFTm9ZVzVuWlNjc0lIdGNjbHh1SUNBZ0lDQWdNRG9nZXlCbWFXVnNaRG9nSjNSNWNHVW5MQ0IyWVd4MVpUb2dKekV5SnlCOUxGeHlYRzRnSUNBZ0lDQXhPaUI3SUdacFpXeGtPaUFuZEdsdFpYTjBZVzF3SnlCOUxGeHlYRzRnSUNBZ0lDQXlPaUI3SUdacFpXeGtPaUFuYW05aUp5QjlMRnh5WEc0Z0lDQWdJQ0F6T2lCN0lHWnBaV3hrT2lBbmMzUnlaVzVuZEdnbklIMHNYSEpjYmlBZ0lDQWdJRFE2SUhzZ1ptbGxiR1E2SUNka1pYaDBaWEpwZEhrbklIMHNYSEpjYmlBZ0lDQWdJRFU2SUhzZ1ptbGxiR1E2SUNkMmFYUmhiR2wwZVNjZ2ZTeGNjbHh1SUNBZ0lDQWdOam9nZXlCbWFXVnNaRG9nSjJsdWRHVnNiR2xuWlc1alpTY2dmU3hjY2x4dUlDQWdJQ0FnTnpvZ2V5Qm1hV1ZzWkRvZ0oyMXBibVFuSUgwc1hISmNiaUFnSUNBZ0lEZzZJSHNnWm1sbGJHUTZJQ2R3YVdWMGVTY2dmU3hjY2x4dUlDQWdJQ0FnT1RvZ2V5Qm1hV1ZzWkRvZ0oyRjBkR0ZqYTFCdmQyVnlKeUI5TEZ4eVhHNGdJQ0FnSUNBeE1Eb2dleUJtYVdWc1pEb2dKMlJwY21WamRFaHBkQ2NnZlN4Y2NseHVJQ0FnSUNBZ01URTZJSHNnWm1sbGJHUTZJQ2RqY21sMGFXTmhiRWhwZENjZ2ZTeGNjbHh1SUNBZ0lDQWdNVEk2SUhzZ1ptbGxiR1E2SUNkaGRIUmhZMnROWVdkcFkxQnZkR1Z1WTNrbklIMHNYSEpjYmlBZ0lDQWdJREV6T2lCN0lHWnBaV3hrT2lBbmFHVmhiRTFoWjJsalVHOTBaVzVqZVNjZ2ZTeGNjbHh1SUNBZ0lDQWdNVFE2SUhzZ1ptbGxiR1E2SUNka1pYUmxjbTFwYm1GMGFXOXVKeUI5TEZ4eVhHNGdJQ0FnSUNBeE5Ub2dleUJtYVdWc1pEb2dKM05yYVd4c1UzQmxaV1FuSUgwc1hISmNiaUFnSUNBZ0lERTJPaUI3SUdacFpXeGtPaUFuYzNCbGJHeFRjR1ZsWkNjZ2ZTeGNjbHh1SUNBZ0lDQWdNVGc2SUhzZ1ptbGxiR1E2SUNkMFpXNWhZMmwwZVNjZ2ZTeGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlHMWhkR05vWlhNNklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXhkV2x6Y1hWdmRYTXZZMkZqZEdKdmRDOWliRzlpTDIxaGFXNHZaRzlqY3k5TWIyZEhkV2xrWlM1dFpDTXdNUzFqYUdGdVoyVjZiMjVsWEhKY2JpQWdJQ292WEhKY2JpQWdjM1JoZEdsaklHTm9ZVzVuWlZwdmJtVW9jR0Z5WVcxelB6b2dVR0Z5WVcxelBFTm9ZVzVuWlZwdmJtVlFZWEpoYlhNK0tUb2dUbVYwVW1WblpYZzhRMmhoYm1kbFdtOXVaVkJoY21GdGN6NGdlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIQmhjbk5sU0dWc2NHVnlLSEJoY21GdGN5d2dKMk5vWVc1blpWcHZibVVuTENCN1hISmNiaUFnSUNBZ0lEQTZJSHNnWm1sbGJHUTZJQ2QwZVhCbEp5d2dkbUZzZFdVNklDY3dNU2NnZlN4Y2NseHVJQ0FnSUNBZ01Ub2dleUJtYVdWc1pEb2dKM1JwYldWemRHRnRjQ2NnZlN4Y2NseHVJQ0FnSUNBZ01qb2dleUJtYVdWc1pEb2dKMmxrSnlCOUxGeHlYRzRnSUNBZ0lDQXpPaUI3SUdacFpXeGtPaUFuYm1GdFpTY2dmU3hjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRzFoZEdOb1pYTTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl4ZFdsemNYVnZkWE12WTJGamRHSnZkQzlpYkc5aUwyMWhhVzR2Wkc5amN5OU1iMmRIZFdsa1pTNXRaQ015TVMxdVpYUjNiM0pyTm1RdFlXTjBiM0l0WTI5dWRISnZiQzFzYVc1bGMxeHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUJ1WlhSM2IzSnJObVFvY0dGeVlXMXpQem9nVUdGeVlXMXpQRTVsZEhkdmNtczJaRkJoY21GdGN6NHBPaUJPWlhSU1pXZGxlRHhPWlhSM2IzSnJObVJRWVhKaGJYTStJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQndZWEp6WlVobGJIQmxjaWh3WVhKaGJYTXNJQ2R1WlhSM2IzSnJObVFuTENCN1hISmNiaUFnSUNBZ0lEQTZJSHNnWm1sbGJHUTZJQ2QwZVhCbEp5d2dkbUZzZFdVNklDY3pNeWNnZlN4Y2NseHVJQ0FnSUNBZ01Ub2dleUJtYVdWc1pEb2dKM1JwYldWemRHRnRjQ2NnZlN4Y2NseHVJQ0FnSUNBZ01qb2dleUJtYVdWc1pEb2dKMmx1YzNSaGJtTmxKeUI5TEZ4eVhHNGdJQ0FnSUNBek9pQjdJR1pwWld4a09pQW5ZMjl0YldGdVpDY2dmU3hjY2x4dUlDQWdJQ0FnTkRvZ2V5Qm1hV1ZzWkRvZ0oyUmhkR0V3SnlCOUxGeHlYRzRnSUNBZ0lDQTFPaUI3SUdacFpXeGtPaUFuWkdGMFlURW5JSDBzWEhKY2JpQWdJQ0FnSURZNklIc2dabWxsYkdRNklDZGtZWFJoTWljZ2ZTeGNjbHh1SUNBZ0lDQWdOem9nZXlCbWFXVnNaRG9nSjJSaGRHRXpKeUI5TEZ4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQnRZWFJqYUdWek9pQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjWFZwYzNGMWIzVnpMMk5oWTNSaWIzUXZZbXh2WWk5dFlXbHVMMlJ2WTNNdlRHOW5SM1ZwWkdVdWJXUWpNakl0Ym1WMGQyOXlhMjVoYldWMGIyZG5iR1ZjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ2JtRnRaVlJ2WjJkc1pTaHdZWEpoYlhNL09pQlFZWEpoYlhNOFRtRnRaVlJ2WjJkc1pWQmhjbUZ0Y3o0cE9pQk9aWFJTWldkbGVEeE9ZVzFsVkc5bloyeGxVR0Z5WVcxelBpQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2NHRnljMlZJWld4d1pYSW9jR0Z5WVcxekxDQW5ibUZ0WlZSdloyZHNaU2NzSUh0Y2NseHVJQ0FnSUNBZ01Eb2dleUJtYVdWc1pEb2dKM1I1Y0dVbkxDQjJZV3gxWlRvZ0p6TTBKeUI5TEZ4eVhHNGdJQ0FnSUNBeE9pQjdJR1pwWld4a09pQW5kR2x0WlhOMFlXMXdKeUI5TEZ4eVhHNGdJQ0FnSUNBeU9pQjdJR1pwWld4a09pQW5hV1FuSUgwc1hISmNiaUFnSUNBZ0lETTZJSHNnWm1sbGJHUTZJQ2R1WVcxbEp5QjlMRnh5WEc0Z0lDQWdJQ0EyT2lCN0lHWnBaV3hrT2lBbmRHOW5aMnhsSnlCOUxGeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JpSXNJbWx0Y0c5eWRDQjdJRXhoYm1jZ2ZTQm1jbTl0SUNjdUwyeGhibWQxWVdkbGN5YzdYSEpjYm1sdGNHOXlkQ0JTWldkbGVHVnpJR1p5YjIwZ0p5NHZjbVZuWlhobGN5YzdYSEpjYm1sdGNHOXlkQ0JPWlhSU1pXZGxlR1Z6SUdaeWIyMGdKeTR2Ym1WMGNtVm5aWGhsY3ljN1hISmNibHh5WEc0dkx5QkdhV3hzSUdsdUlFeHZZMkZzWlZKbFoyVjRJSE52SUhSb1lYUWdkR2hwYm1keklHeHBhMlVnVEc5allXeGxVbVZuWlhndVkyOTFiblJrYjNkdVUzUmhjblF1WkdVZ2FYTWdZU0IyWVd4cFpDQnlaV2RsZUM1Y2NseHVZMjl1YzNRZ2JHOWpZV3hsVEdsdVpYTWdQU0I3WEhKY2JpQWdZMjkxYm5Sa2IzZHVVM1JoY25RNklIdGNjbHh1SUNBZ0lHVnVPaUFuUW1GMGRHeGxJR052YlcxbGJtTnBibWNnYVc0Z0tEODhkR2x0WlQ1Y1hGeGNlWHRHYkc5aGRIMHBJSE5sWTI5dVpITWhJRnhjWEZ3b0tEODhjR3hoZVdWeVBpNHFQeWxjWEZ4Y0tTY3NYSEpjYmlBZ0lDQmtaVG9nSjA1dlkyZ2dLRDg4ZEdsdFpUNWNYRnhjZVh0R2JHOWhkSDBwSUZObGEzVnVaR1Z1SUdKcGN5QkxZVzF3Wm1KbFoybHViaUVnWEZ4Y1hDZ29Qenh3YkdGNVpYSStMaW8vS1Z4Y1hGd3BKeXhjY2x4dUlDQWdJR1p5T2lBblJNT3BZblYwSUdSMUlHTnZiV0poZENCa1lXNXpJQ2cvUEhScGJXVStYRnhjWEhsN1JteHZZWFI5S1NCelpXTnZibVJsYzFzZ1hUOGhJRnhjWEZ3b0tEODhjR3hoZVdWeVBpNHFQeWxjWEZ4Y0tTY3NYSEpjYmlBZ0lDQnFZVG9nSithSXB1bVhtT21XaStXbmkrT0J2dU9CcHlnL1BIUnBiV1UrWEZ4Y1hIbDdSbXh2WVhSOUtlZW5rdSs4Z1NCY1hGeGNLQ2cvUEhCc1lYbGxjajR1S2o4cFhGeGNYQ2tuTEZ4eVhHNGdJQ0FnWTI0NklDZm90NTNucHJ2bWlKam1scGZsdklEbHA0dm92NWptbklrb1B6eDBhVzFsUGx4Y1hGeDVlMFpzYjJGMGZTbm5wNUx2dklFZzc3eUlLRDg4Y0d4aGVXVnlQaTRxUHludnZJa25MRnh5WEc0Z0lDQWdhMjg2SUNmc29JVHRpS3dnN0l1YzdKNlJJQ2cvUEhScGJXVStYRnhjWEhsN1JteHZZWFI5S2V5MGlDRHNvSVFoSUZ4Y1hGd29LRDg4Y0d4aGVXVnlQaTRxUHlsY1hGeGNLU2NzWEhKY2JpQWdmU3hjY2x4dUlDQmpiM1Z1ZEdSdmQyNUZibWRoWjJVNklIdGNjbHh1SUNBZ0lHVnVPaUFuUlc1bllXZGxJU2NzWEhKY2JpQWdJQ0JrWlRvZ0oxTjBZWEowSVNjc1hISmNiaUFnSUNCbWNqb2dKOE9BSUd4Y1hDZGhkSFJoY1hWbFd5QmRQeUVuTEZ4eVhHNGdJQ0FnYW1FNklDZm1pS2JwbDVqcGxvdmxwNHZ2dklFbkxGeHlYRzRnSUNBZ1kyNDZJQ2ZtaUpqbWxwZmx2SURscDR2dnZJRW5MRnh5WEc0Z0lDQWdhMjg2SUNmc29JVHRpS3dnN0l1YzdKNlJJU2NzWEhKY2JpQWdmU3hjY2x4dUlDQmpiM1Z1ZEdSdmQyNURZVzVqWld3NklIdGNjbHh1SUNBZ0lHVnVPaUFuUTI5MWJuUmtiM2R1SUdOaGJtTmxiR1ZrSUdKNUlDZy9QSEJzWVhsbGNqNWNYRnhjZVh0T1lXMWxmU2tuTEZ4eVhHNGdJQ0FnWkdVNklDY29Qenh3YkdGNVpYSStYRnhjWEhsN1RtRnRaWDBwSUdoaGRDQmtaVzRnUTI5MWJuUmtiM2R1SUdGaVoyVmljbTlqYUdWdUp5eGNjbHh1SUNBZ0lHWnlPaUFuVEdVZ1kyOXRjSFJsSU1PZ0lISmxZbTkxY25NZ1lTRERxWFREcVNCcGJuUmxjbkp2YlhCMUlIQmhjaUFvUHp4d2JHRjVaWEkrWEZ4Y1hIbDdUbUZ0WlgwcFd5QmRQMXhjWEZ3dUp5eGNjbHh1SUNBZ0lHcGhPaUFuS0Q4OGNHeGhlV1Z5UGx4Y1hGeDVlMDVoYldWOUtlT0JxK09DaU9PQ2l1T0FnZWFJcHVtWG1PbVdpK1duaStPQ3ErT0NwdU9EcytPRGlPT0JqT09DcmVPRG8rT0RzK09DdStPRHErT0JsZU9Dak9PQnZ1T0JsK09CbitPQWdpY3NYSEpjYmlBZ0lDQmpiam9nSnlnL1BIQnNZWGxsY2o1Y1hGeGNlWHRPWVcxbGZTbmxqNWJtdG9qa3VvYm1pSmptbHBmbHZJRGxwNHZsZ0pMb3JxSG1sN2JqZ0lJbkxGeHlYRzRnSUNBZ2EyODZJQ2NvUHp4d2JHRjVaWEkrWEZ4Y1hIbDdUbUZ0WlgwcElPdUxtT3lkdENEc3RJanNuYjNxdUxEcnBid2c3TGVvN0lhTTdaYUk3SXExNjR1STY0dWtYRnhjWEM0bkxGeHlYRzRnSUgwc1hISmNiaUFnWVhKbFlWTmxZV3c2SUh0Y2NseHVJQ0FnSUdWdU9pQW5LRDg4WVhKbFlUNHVLajhwSUhkcGJHd2dZbVVnYzJWaGJHVmtJRzltWmlCcGJpQW9QengwYVcxbFBseGNYRng1ZTBac2IyRjBmU2tnYzJWamIyNWtjeUVuTEZ4eVhHNGdJQ0FnWkdVNklDZE9iMk5vSUNnL1BIUnBiV1UrWEZ4Y1hIbDdSbXh2WVhSOUtTQlRaV3QxYm1SbGJpd2dZbWx6SUhOcFkyZ2dLRDg4WVhKbFlUNHVLajhwSUhOamFHeHBaY09mZENjc1hISmNiaUFnSUNCbWNqb2dKMFpsY20xbGRIVnlaU0FvUHp4aGNtVmhQaTRxUHlrZ1pHRnVjeUFvUHp4MGFXMWxQbHhjWEZ4NWUwWnNiMkYwZlNrZ2MyVmpiMjVrWlhOYklGMC9YRnhjWEM0bkxGeHlYRzRnSUNBZ2FtRTZJQ2NvUHp4aGNtVmhQaTRxUHluamdhN2xzSUhwanBiamdiN2pnYWZqZ1lMamdhZ29QengwYVcxbFBseGNYRng1ZTBac2IyRjBmU25ucDVJbkxGeHlYRzRnSUNBZ1kyNDZJQ2ZvdDUwb1B6eGhjbVZoUGk0cVB5bm9vcXZsc0lIcGxJSG92NWptbklrb1B6eDBhVzFsUGx4Y1hGeDVlMFpzYjJGMGZTbm5wNUluTEZ4eVhHNGdJQ0FnYTI4NklDY29QengwYVcxbFBseGNYRng1ZTBac2IyRjBmU25zdElnZzdadUU3SmVRSUNnL1BHRnlaV0UrTGlvL0tTanNuYlI4NnJDQUtTRHJ0SW5zaDRUcmtLbnJpNGpyaTZSY1hGeGNMaWNzWEhKY2JpQWdmU3hjY2x4dUlDQmhjbVZoVlc1elpXRnNPaUI3WEhKY2JpQWdJQ0JsYmpvZ0p5Zy9QR0Z5WldFK0xpby9LU0JwY3lCdWJ5QnNiMjVuWlhJZ2MyVmhiR1ZrTGljc1hISmNiaUFnSUNCa1pUb2dKeWcvUEdGeVpXRStMaW8vS1NERHRtWm1ibVYwSUhOcFkyZ2daWEp1WlhWMExpY3NYSEpjYmlBZ0lDQm1jam9nSjA5MWRtVnlkSFZ5WlNBb1B6eGhjbVZoUGk0cVB5bGJJRjAvSVNjc1hISmNiaUFnSUNCcVlUb2dKeWcvUEdGeVpXRStMaW8vS2VPQnJ1V3dnZW1PbHVPQmpPaW5vK09CaStPQ2pPT0JuK0tBcHVLQXBpY3NYSEpjYmlBZ0lDQmpiam9nSnlnL1BHRnlaV0UrTGlvL0tlZWFoT1d3Z2VtVWdlaW5vK21acE9TNmhpY3NYSEpjYmlBZ0lDQnJiem9nSnlnL1BHRnlaV0UrTGlvL0tleWRtQ0RydEluc2g0VHFzSUFnN1pXMDdLQ2M2NUNZN0plSTdJcTE2NHVJNjR1a1hGeGNYQzRuTEZ4eVhHNGdJSDBzWEhKY2JpQWdMeThnVW1WamFYQmxJRzVoYldVZ1lXeDNZWGx6SUhOMFlYSjBJSGRwZEdnZ1hGeDFaVEJpWWx4eVhHNGdJQzh2SUVoUklHbGpiMjRnYVhNZ1hGeDFaVEF6WTF4eVhHNGdJR055WVdaMGFXNW5VM1JoY25RNklIdGNjbHh1SUNBZ0lHVnVPaUFuV1c5MUlHSmxaMmx1SUhONWJuUm9aWE5wZW1sdVp5QW9QenhqYjNWdWRENG9ZVzQvZkZ4Y1hGeGtLeWtnS1Q5Y1hIVmxNR0ppS0Q4OGNtVmphWEJsUGk0cUtWeGNYRnd1Snl4Y2NseHVJQ0FnSUdSbE9pQW5SSFVnYUdGemRDQmlaV2R2Ym01bGJpd2daSFZ5WTJnZ1UzbHVkR2hsYzJVZ0tEODhZMjkxYm5RK0tHVnBiaWhsZkdWemZHVnRmR1Z5S1Q5OFhGeGNYR1FyS1NBcFAxeGNkV1V3WW1Jb1B6eHlaV05wY0dVK0xpb3BJR2hsY25wMWMzUmxiR3hsYmx4Y1hGd3VKeXhjY2x4dUlDQWdJR1p5T2lBblZtOTFjeUJqYjIxdFpXNWpaWG9ndzZBZ1ptRmljbWx4ZFdWeUlDZy9QR052ZFc1MFBpaDFibVUvZkZ4Y1hGeGtLeWtnS1Q5Y1hIVmxNR0ppS0Q4OGNtVmphWEJsUGk0cUtWeGNYRnd1Snl4Y2NseHVJQ0FnSUdwaE9pQW5LRDg4Y0d4aGVXVnlQbHhjWEZ4NWUwNWhiV1Y5S2VPQnIxeGNkV1V3WW1Jb1B6eHlaV05wY0dVK0xpb3BLTU9YS0Q4OFkyOTFiblErWEZ4Y1hHUXJLU2svNDRHdTZLTzk1TDJjNDRLUzZaYUw1YWVMNDRHWDQ0R2Y0NENDSnl4Y2NseHVJQ0FnSUdOdU9pQW5LRDg4Y0d4aGVXVnlQbHhjWEZ4NWUwNWhiV1Y5S2VXOGdPV25pK1dJdHVTOW5PS0FuRnhjZFdVd1ltSW9Qenh5WldOcGNHVStMaW9wNG9DZEtNT1hLRDg4WTI5MWJuUStYRnhjWEdRcktTay80NENDSnl4Y2NseHVJQ0FnSUd0dk9pQW5YRngxWlRCaVlpZy9QSEpsWTJsd1pUNHVLaWtvdzVjb1B6eGpiM1Z1ZEQ1Y1hGeGNaQ3NwNnJDY0tUOGc3S0NjN0o2UjdKMkVJT3lMbk95ZWtlMlZxZXVMaU91THBGeGNYRnd1Snl4Y2NseHVJQ0I5TEZ4eVhHNGdJSFJ5YVdGc1EzSmhablJwYm1kVGRHRnlkRG9nZTF4eVhHNGdJQ0FnWlc0NklDZFpiM1VnWW1WbmFXNGdkSEpwWVd3Z2MzbHVkR2hsYzJseklHOW1JRnhjZFdVd1ltSW9Qenh5WldOcGNHVStMaW9wWEZ4Y1hDNG5MRnh5WEc0Z0lDQWdaR1U2SUNkRWRTQm9ZWE4wSUcxcGRDQmtaWElnVkdWemRITjViblJvWlhObElIWnZiaUJjWEhWbE1HSmlLRDg4Y21WamFYQmxQaTRxS1NCaVpXZHZibTVsYmx4Y1hGd3VKeXhjY2x4dUlDQWdJR1p5T2lBblZtOTFjeUJqYjIxdFpXNWpaWG9nZFc1bElITjViblJvdzZoelpTQmtYRnduWlhOellXa2djRzkxY2lCMWJtVS9JRnhjZFdVd1ltSW9Qenh5WldOcGNHVStMaW9wWEZ4Y1hDNG5MRnh5WEc0Z0lDQWdhbUU2SUNjb1B6eHdiR0Y1WlhJK1hGeGNYSGw3VG1GdFpYMHA0NEd2WEZ4MVpUQmlZaWcvUEhKbFkybHdaVDR1S2luamdhN29vNzNrdlp6bnQ3VG52NUxqZ3BMcGxvdmxwNHZqZ1pmamdaL2pnSUluTEZ4eVhHNGdJQ0FnWTI0NklDY29Qenh3YkdGNVpYSStYRnhjWEhsN1RtRnRaWDBwNWJ5QTVhZUw1N3VENUxtZzVZaTI1TDJjWEZ4MVpUQmlZaWcvUEhKbFkybHdaVDR1S2luamdJSW5MRnh5WEc0Z0lDQWdhMjg2SUNkY1hIVmxNR0ppS0Q4OGNtVmphWEJsUGk0cUtTRHNvSnpzbnBFZzdKZXc3SXExN0oyRUlPeUxuT3lla2UyVnFldUxpT3VMcEZ4Y1hGd3VKeXhjY2x4dUlDQjlMRnh5WEc0Z0lHTnlZV1owYVc1blJtbHVhWE5vT2lCN1hISmNiaUFnSUNCbGJqb2dKMWx2ZFNCemVXNTBhR1Z6YVhwbElDZy9QR052ZFc1MFBpaGhiajk4WEZ4Y1hHUXJLU0FwUDF4Y2RXVXdZbUlvUHp4eVpXTnBjR1UrTGlvcEtGeGNkV1V3TTJNcFAxeGNYRnd1Snl4Y2NseHVJQ0FnSUdSbE9pQW5SSFVnYUdGemRDQmxjbVp2YkdkeVpXbGphQ0FvUHp4amIzVnVkRDRvWldsdUtHVjhaWE44WlcxOFpYSXBQM3hjWEZ4Y1pDc3BJQ2svS0Q4OGNtVmphWEJsUGk0cUtTaGNYSFZsTUROaktUOGdhR1Z5WjJWemRHVnNiSFJjWEZ4Y0xpY3NYSEpjYmlBZ0lDQm1jam9nSjFadmRYTWdabUZpY21seGRXVjZJQ2cvUEdOdmRXNTBQaWgxYm1VL2ZGeGNYRnhrS3lrZ0tUOWNYSFZsTUdKaUtEODhjbVZqYVhCbFBpNHFLU2hjWEhWbE1ETmpLVDljWEZ4Y0xpY3NYSEpjYmlBZ0lDQnFZVG9nSnlnL1BIQnNZWGxsY2o1Y1hGeGNlWHRPWVcxbGZTbmpnYTljWEhWbE1HSmlLRDg4Y21WamFYQmxQaTRxS1NoY1hIVmxNRE5qS1Q4b3c1Y29QenhqYjNWdWRENWNYRnhjWkNzcEtUL2pncExscm96bWlKRGpnWlhqZ1p2amdaL3Z2SUVuTEZ4eVhHNGdJQ0FnWTI0NklDY29Qenh3YkdGNVpYSStYRnhjWEhsN1RtRnRaWDBwNVlpMjVMMmM0b0NjWEZ4MVpUQmlZaWcvUEhKbFkybHdaVDR1S2lrb1hGeDFaVEF6WXlrLzRvQ2RLTU9YS0Q4OFkyOTFiblErWEZ4Y1hHUXJLU2svNW9pUTVZcWY3N3lCSnl4Y2NseHVJQ0FnSUd0dk9pQW5LRDg4Y0d4aGVXVnlQbHhjWEZ4NWUwNWhiV1Y5S1NEcmk1anNuYlFnWEZ4MVpUQmlZaWcvUEhKbFkybHdaVDR1S2lrb1hGeDFaVEF6WXlrL0tNT1hLRDg4WTI5MWJuUStYRnhjWEdRcktlcXduQ2svS095ZGhIenJwYndwSU95WmhPeUVzZTJXaU95S3RldUxpT3VMcENFbkxGeHlYRzRnSUgwc1hISmNiaUFnZEhKcFlXeERjbUZtZEdsdVowWnBibWx6YURvZ2UxeHlYRzRnSUNBZ1pXNDZJQ2RaYjNWeUlIUnlhV0ZzSUhONWJuUm9aWE5wY3lCdlppQmNYSFZsTUdKaUtEODhjbVZqYVhCbFBpNHFLU0J3Y205MlpXUWdZU0J6ZFdOalpYTnpJU2NzWEhKY2JpQWdJQ0JrWlRvZ0owUnBaU0JVWlhOMGMzbHVkR2hsYzJVZ2RtOXVJRnhjZFdVd1ltSW9Qenh5WldOcGNHVStMaW9wSUhkaGNpQmxjbVp2YkdkeVpXbGphQ0VuTEZ4eVhHNGdJQ0FnWm5JNklDZFdiM1J5WlNCemVXNTBhTU9vYzJVZ1pGeGNKMlZ6YzJGcElIQnZkWElnWm1GaWNtbHhkV1Z5SUZ4Y2RXVXdZbUlvUHp4eVpXTnBjR1UrTGlvcElHRWd3NmwwdzZrZ1kyOTFjbTl1YnNPcFpTQmtaU0J6ZFdOanc2aHpJU2NzWEhKY2JpQWdJQ0JxWVRvZ0p5Zy9QSEJzWVhsbGNqNWNYRnhjZVh0T1lXMWxmU25qZ2E5Y1hIVmxNR0ppS0Q4OGNtVmphWEJsUGk0cUtlT0JydWlqdmVTOW5PZTN0T2Uva3VPQnErYUlrT1dLbitPQmwrT0JuKys4Z1Njc1hISmNiaUFnSUNCamJqb2dKeWcvUEhCc1lYbGxjajVjWEZ4Y2VYdE9ZVzFsZlNubnU0UGt1YURsaUxia3ZaeGNYSFZsTUdKaUtEODhjbVZqYVhCbFBpNHFLZWFJa09XS24rUzZodSs4Z1Njc1hISmNiaUFnSUNCcmJ6b2dKMXhjZFdVd1ltSW9Qenh5WldOcGNHVStMaW9wSU95Z25PeWVrU0RzbDdEc2lyWHNsNUFnN0lTeDZyTzE3WmFJN0lxMTY0dUk2NHVrSVNjc1hISmNiaUFnZlN4Y2NseHVJQ0JqY21GbWRHbHVaMFpoYVd3NklIdGNjbHh1SUNBZ0lHVnVPaUFuV1c5MWNpQnplVzUwYUdWemFYTWdabUZwYkhNaEp5eGNjbHh1SUNBZ0lHUmxPaUFuUkdWcGJtVWdVM2x1ZEdobGMyVWdhWE4wSUdabGFHeG5aWE5qYUd4aFoyVnVJU2NzWEhKY2JpQWdJQ0JtY2pvZ0oweGhJSE41Ym5Sb3c2aHpaU0REcVdOb2IzVmxYRnhjWEM1N00zMG5MRnh5WEc0Z0lDQWdhbUU2SUNjb1B6eHdiR0Y1WlhJK1hGeGNYSGw3VG1GdFpYMHA0NEd2NktPOTVMMmM0NEdyNWFTeDVwV1g0NEdYNDRHZjRvQ200b0NtSnl4Y2NseHVJQ0FnSUdOdU9pQW5LRDg4Y0d4aGVXVnlQbHhjWEZ4NWUwNWhiV1Y5S2VXSXR1UzluT1drc2VpMHBlUzZodUtBcHVLQXBpY3NYSEpjYmlBZ0lDQnJiem9nSit5Z25PeWVrZXlYa0NEc2k2VHRqS2p0bG9qc2lyWHJpNGpyaTZUaWdLYmlnS1pjWEZ4Y0xpY3NYSEpjYmlBZ2ZTeGNjbHh1SUNCMGNtbGhiRU55WVdaMGFXNW5SbUZwYkRvZ2UxeHlYRzRnSUNBZ1pXNDZJQ2RaYjNWeUlIUnlhV0ZzSUhONWJuUm9aWE5wY3lCdlppQmNYSFZsTUdKaUtEODhjbVZqYVhCbFBpNHFLU0JtWVdsc1pXUmNYRnhjTG5zemZTY3NYSEpjYmlBZ0lDQmtaVG9nSjBScFpTQlVaWE4wYzNsdWRHaGxjMlVnZG05dUlGeGNkV1V3WW1Jb1B6eHlaV05wY0dVK0xpb3BJR2x6ZENCbVpXaHNaMlZ6WTJoc1lXZGxibHhjWEZ3dWV6TjlKeXhjY2x4dUlDQWdJR1p5T2lBblZtOTBjbVVnYzNsdWRHakRxSE5sSUdSY1hDZGxjM05oYVNCd2IzVnlJR1poWW5KcGNYVmxjaUJjWEhWbE1HSmlLRDg4Y21WamFYQmxQaTRxS1NCelhGd25aWE4wSUhOdmJHVERxV1VnY0dGeUlIVnVJTU9wWTJobFkxeGNYRnd1ZXpOOUp5eGNjbHh1SUNBZ0lHcGhPaUFuS0Q4OGNHeGhlV1Z5UGx4Y1hGeDVlMDVoYldWOUtlT0JyMXhjZFdVd1ltSW9Qenh5WldOcGNHVStMaW9wNDRHdTZLTzk1TDJjNTdlMDU3K1M0NEdyNWFTeDVwV1g0NEdYNDRHZjRvQ200b0NtSnl4Y2NseHVJQ0FnSUdOdU9pQW5LRDg4Y0d4aGVXVnlQbHhjWEZ4NWUwNWhiV1Y5S2VlN2crUzVvT1dJdHVTOW5GeGNkV1V3WW1Jb1B6eHlaV05wY0dVK0xpb3A1YVN4NkxTbDVMcUc0b0NtNG9DbUp5eGNjbHh1SUNBZ0lHdHZPaUFuWEZ4MVpUQmlZaWcvUEhKbFkybHdaVDR1S2lrZzdLQ2M3SjZSSU95WHNPeUt0ZXlYa0NEc2k2VHRqS2p0bG9qc2lyWHJpNGpyaTZUaWdLYmlnS1pjWEZ4Y0xpY3NYSEpjYmlBZ2ZTeGNjbHh1SUNCamNtRm1kR2x1WjBOaGJtTmxiRG9nZTF4eVhHNGdJQ0FnWlc0NklDZFpiM1VnWTJGdVkyVnNJSFJvWlNCemVXNTBhR1Z6YVhOY1hGeGNMaWNzWEhKY2JpQWdJQ0JrWlRvZ0owUjFJR2hoYzNRZ1pHbGxJRk41Ym5Sb1pYTmxJR0ZpWjJWaWNtOWphR1Z1WEZ4Y1hDNG5MRnh5WEc0Z0lDQWdabkk2SUNkTVlTQnplVzUwYU1Pb2MyVWdaWE4wSUdGdWJuVnN3NmxsWEZ4Y1hDNG5MRnh5WEc0Z0lDQWdhbUU2SUNjb1B6eHdiR0Y1WlhJK1hGeGNYSGw3VG1GdFpYMHA0NEd2NktPOTVMMmM0NEtTNUxpdDVxMmk0NEdYNDRHZjQ0Q0NKeXhjY2x4dUlDQWdJR051T2lBbktEODhjR3hoZVdWeVBseGNYRng1ZTA1aGJXVjlLZVM0cmVhdG91UzZodVdJdHVTOW5PUzluT1M0bXVPQWdpY3NYSEpjYmlBZ0lDQnJiem9nSit5Z25PeWVrZXlkaENEc3BKSHNwNER0bG9qc2lyWHJpNGpyaTZSY1hGeGNMaWNzWEhKY2JpQWdmU3hjY2x4dUlDQjBjbWxoYkVOeVlXWjBhVzVuUTJGdVkyVnNPaUI3WEhKY2JpQWdJQ0JsYmpvZ0oxbHZkU0JoWW1GdVpHOXVaV1FnZEhKcFlXd2djM2x1ZEdobGMybHpYRnhjWEM0bkxGeHlYRzRnSUNBZ1pHVTZJQ2RVWlhOMGMzbHVkR2hsYzJVZ1lXSm5aV0p5YjJOb1pXNWNYRnhjTGljc1hISmNiaUFnSUNCbWNqb2dKMVp2ZFhNZ1lYWmxlaUJwYm5SbGNuSnZiWEIxSUd4aElITjViblJvdzZoelpTQmtYRnduWlhOellXbGNYRnhjTGljc1hISmNiaUFnSUNCcVlUb2dKeWcvUEhCc1lYbGxjajVjWEZ4Y2VYdE9ZVzFsZlNuamdhL29vNzNrdlp6bnQ3VG52NUxqZ3BMa3VLM21yYUxqZ1pmamdaL2pnSUluTEZ4eVhHNGdJQ0FnWTI0NklDY29Qenh3YkdGNVpYSStYRnhjWEhsN1RtRnRaWDBwNVlHYzVxMmk1THFHNTd1RDVMbWc0NENDSnl4Y2NseHVJQ0FnSUd0dk9pQW43S0NjN0o2UklPeVhzT3lLdGV5ZGhDRHNwSkhzcDREdGxvanNpclhyaTRqcmk2UmNYRnhjTGljc1hISmNiaUFnZlN4Y2NseHVmU0JoY3lCamIyNXpkRHRjY2x4dVhISmNiblI1Y0dVZ1RHOWpZV3hsVEdsdVpTQTlJSHNnWlc0NklITjBjbWx1WnlCOUlDWWdVR0Z5ZEdsaGJEeFNaV052Y21ROFJYaGpiSFZrWlR4TVlXNW5MQ0FuWlc0blBpd2djM1J5YVc1blBqNDdYSEpjYmx4eVhHNTBlWEJsSUV4dlkyRnNaVkpsWjJWNFpYTlBZbW9nUFNCU1pXTnZjbVE4YTJWNWIyWWdkSGx3Wlc5bUlHeHZZMkZzWlV4cGJtVnpMQ0JTWldOdmNtUThUR0Z1Wnl3Z1VtVm5SWGh3UGo0N1hISmNibHh5WEc1amJHRnpjeUJTWldkbGVGTmxkQ0I3WEhKY2JpQWdjbVZuWlhobGN6ODZJRXh2WTJGc1pWSmxaMlY0WlhOUFltbzdYSEpjYmlBZ2JtVjBVbVZuWlhobGN6ODZJRXh2WTJGc1pWSmxaMlY0WlhOUFltbzdYSEpjYmx4eVhHNGdJR2RsZENCc2IyTmhiR1ZTWldkbGVDZ3BPaUJNYjJOaGJHVlNaV2RsZUdWelQySnFJSHRjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbkpsWjJWNFpYTXBYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbFoyVjRaWE03WEhKY2JpQWdJQ0IwYUdsekxuSmxaMlY0WlhNZ1BTQjBhR2x6TG1KMWFXeGtURzlqWVd4bFVtVm5aWGhsY3loc2IyTmhiR1ZNYVc1bGN5d2dLSE02SUhOMGNtbHVaeWtnUFQ0Z1VtVm5aWGhsY3k1bllXMWxURzluS0hzZ2JHbHVaVG9nY3lBcklDY3VLajhuSUgwcEtUdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsWjJWNFpYTTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQm5aWFFnYkc5allXeGxUbVYwVW1WblpYZ29LVG9nVEc5allXeGxVbVZuWlhobGMwOWlhaUI3WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTV1WlhSU1pXZGxlR1Z6S1Z4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXVaWFJTWldkbGVHVnpPMXh5WEc0Z0lDQWdkR2hwY3k1dVpYUlNaV2RsZUdWeklEMGdkR2hwY3k1aWRXbHNaRXh2WTJGc1pWSmxaMlY0WlhNb2JHOWpZV3hsVEdsdVpYTXNJQ2h6T2lCemRISnBibWNwSUQwK0lFNWxkRkpsWjJWNFpYTXVaMkZ0WlV4dlp5aDdJR3hwYm1VNklITWdLeUFuVzE1OFhTby9KeUI5S1NrN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXVaWFJTWldkbGVHVnpPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdZblZwYkdSTWIyTmhiR1ZTWldkbGVHVnpLRnh5WEc0Z0lDQWdJQ0JzYjJOaGJHVnpPaUIwZVhCbGIyWWdiRzlqWVd4bFRHbHVaWE1zWEhKY2JpQWdJQ0FnSUdKMWFXeGtaWEk2SUNoek9pQnpkSEpwYm1jcElEMCtJRkpsWjBWNGNDeGNjbHh1SUNBcE9pQk1iMk5oYkdWU1pXZGxlR1Z6VDJKcUlIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCUFltcGxZM1F1Wm5KdmJVVnVkSEpwWlhNb1hISmNiaUFnSUNBZ0lDQWdUMkpxWldOMFhISmNiaUFnSUNBZ0lDQWdJQ0F1Wlc1MGNtbGxjeWhzYjJOaGJHVnpLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0xtMWhjQ2dvVzJ0bGVTd2diR2x1WlhOZEtTQTlQaUJiYTJWNUxDQjBhR2x6TG1KMWFXeGtURzlqWVd4bFVtVm5aWGdvYkdsdVpYTXNJR0oxYVd4a1pYSXBYU2tzWEhKY2JpQWdJQ0FwSUdGeklFeHZZMkZzWlZKbFoyVjRaWE5QWW1vN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCaWRXbHNaRXh2WTJGc1pWSmxaMlY0S0d4cGJtVnpPaUJNYjJOaGJHVk1hVzVsTENCaWRXbHNaR1Z5T2lBb2N6b2djM1J5YVc1bktTQTlQaUJTWldkRmVIQXBPaUJTWldOdmNtUThUR0Z1Wnl3Z1VtVm5SWGh3UGlCN1hISmNiaUFnSUNCamIyNXpkQ0J5WldkbGVFVnVJRDBnWW5WcGJHUmxjaWhzYVc1bGN5NWxiaWs3WEhKY2JpQWdJQ0J5WlhSMWNtNGdlMXh5WEc0Z0lDQWdJQ0JsYmpvZ2NtVm5aWGhGYml4Y2NseHVJQ0FnSUNBZ1pHVTZJR3hwYm1WekxtUmxJRDhnWW5WcGJHUmxjaWhzYVc1bGN5NWtaU2tnT2lCeVpXZGxlRVZ1TEZ4eVhHNGdJQ0FnSUNCbWNqb2diR2x1WlhNdVpuSWdQeUJpZFdsc1pHVnlLR3hwYm1WekxtWnlLU0E2SUhKbFoyVjRSVzRzWEhKY2JpQWdJQ0FnSUdwaE9pQnNhVzVsY3k1cVlTQS9JR0oxYVd4a1pYSW9iR2x1WlhNdWFtRXBJRG9nY21WblpYaEZiaXhjY2x4dUlDQWdJQ0FnWTI0NklHeHBibVZ6TG1OdUlEOGdZblZwYkdSbGNpaHNhVzVsY3k1amJpa2dPaUJ5WldkbGVFVnVMRnh5WEc0Z0lDQWdJQ0JyYnpvZ2JHbHVaWE11YTI4Z1B5QmlkV2xzWkdWeUtHeHBibVZ6TG10dktTQTZJSEpsWjJWNFJXNHNYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNWNjbHh1WTI5dWMzUWdjbVZuWlhoVFpYUWdQU0J1WlhjZ1VtVm5aWGhUWlhRb0tUdGNjbHh1WEhKY2JtVjRjRzl5ZENCamIyNXpkQ0JNYjJOaGJHVlNaV2RsZUNBOUlISmxaMlY0VTJWMExteHZZMkZzWlZKbFoyVjRPMXh5WEc1bGVIQnZjblFnWTI5dWMzUWdURzlqWVd4bFRtVjBVbVZuWlhnZ1BTQnlaV2RsZUZObGRDNXNiMk5oYkdWT1pYUlNaV2RsZUR0Y2NseHVJaXdpYVcxd2IzSjBJSHNnVEc5allXeGxUbVYwVW1WblpYZ2dmU0JtY205dElDY3VMaTh1TGk4dUxpOXlaWE52ZFhKalpYTXZkSEpoYm5Oc1lYUnBiMjV6Snp0Y2NseHVhVzF3YjNKMElFNWxkRkpsWjJWNFpYTWdabkp2YlNBbkxpNHZMaTR2TGk0dmNtVnpiM1Z5WTJWekwyNWxkSEpsWjJWNFpYTW5PMXh5WEc1cGJYQnZjblFnZXlCTVlXNW5JSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZjbVZ6YjNWeVkyVnpMMnhoYm1kMVlXZGxjeWM3WEhKY2JtbHRjRzl5ZENCN0lFeHZaMFYyWlc1MElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dmRIbHdaWE12WlhabGJuUW5PMXh5WEc1cGJYQnZjblFnVEdsdVpVVjJaVzUwSUdaeWIyMGdKeTR2WkdGMFlTOXVaWFIzYjNKclgyeHZaMTlqYjI1MlpYSjBaWEl2VEdsdVpVVjJaVzUwSnp0Y2NseHVYSEpjYmk4dklFUnBjMkZpYkdVZ2JtOHRaWGh3YkdsamFYUXRZVzU1SUdadmNpQmpiRzl1WlVSaGRHRWdZWE1nYVhRZ2JtVmxaSE1nZEc4Z2QyOXlheUJ2YmlCeVlYY2diMkpxWldOMGN5Qm1iM0lnY0dWeVptOXliV0Z1WTJVZ2NtVmhjMjl1Y3k1Y2NseHVMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxbGVIQnNhV05wZEMxaGJubGNjbHh1Wlhod2IzSjBJSFI1Y0dVZ1JHRjBZVlI1Y0dVZ1BTQjdJRnRyWlhrNklITjBjbWx1WjEwNklHRnVlU0I5SUh3Z2JuVnNiRHRjY2x4dVhISmNibVY0Y0c5eWRDQjBlWEJsSUVWdGRXeGhkRzl5VEc5blJYWmxiblFnUFNCTWIyZEZkbVZ1ZENBbUlIdGNjbHh1SUNCa1pYUmhhV3c2SUh0Y2NseHVJQ0FnSUd4dlozTTZJRXhwYm1WRmRtVnVkRnRkTzF4eVhHNGdJSDA3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRVZ0ZFd4aGRHOXlRMjl0Ylc5dUlIdGNjbHh1SUNCemRHRjBhV01nWTJ4dmJtVkVZWFJoS0dSaGRHRTZJRVJoZEdGVWVYQmxMQ0JsZUdOc2RXUmxJRDBnV3lkdmNIUnBiMjV6Snl3Z0ozQmhjblI1SjEwcE9pQkVZWFJoVkhsd1pTQjdYSEpjYmlBZ0lDQmpiMjV6ZENCeVpYUTZJRVJoZEdGVWVYQmxJRDBnZTMwN1hISmNibHh5WEc0Z0lDQWdMeThnVlhObElHVjRkSEpoSUd4dloybGpJR1p2Y2lCMGIzQXRiR1YyWld3Z1pYaDBaVzVrSUdadmNpQndjbTl3WlhKMGVTQmxlR05zZFhOcGIyNWNjbHh1SUNBZ0lDOHZJRlJvYVhNZ1kzVjBJSFJvWlNCbGVHVmpkWFJwYjI0Z2RHbHRaU0J2WmlCMGFHbHpJR052WkdVZ1puSnZiU0EwTVN3d01EQnRjeUIwYnlBMU1HMXpJSGRvWlc0Z2NHRnljMmx1WnlCaElERXlJRzFwYm5WMFpTQndkV3hzWEhKY2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUdrZ2FXNGdaR0YwWVNrZ2UxeHlYRzRnSUNBZ0lDQnBaaUFvWlhoamJIVmtaUzVwYm1Oc2RXUmxjeWhwS1NsY2NseHVJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNjbHh1WEhKY2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pHRjBZVnRwWFNBOVBUMGdKMjlpYW1WamRDY3BYSEpjYmlBZ0lDQWdJQ0FnY21WMFcybGRJRDBnUlcxMWJHRjBiM0pEYjIxdGIyNHVYMk5zYjI1bFJHRjBZU2hrWVhSaFcybGRLVHRjY2x4dUlDQWdJQ0FnWld4elpWeHlYRzRnSUNBZ0lDQWdJQzh2SUVGemMybG5ibTFsYm5RZ2IyWWdZVzU1SUhSdklHRnVlUzRnVTJWbElFUmhkR0ZVZVhCbElHUmxabWx1YVhScGIyNGdZV0p2ZG1VZ1ptOXlJSEpsWVhOdmJtbHVaeTVjY2x4dUlDQWdJQ0FnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ1FIUjVjR1Z6WTNKcGNIUXRaWE5zYVc1MEwyNXZMWFZ1YzJGbVpTMWhjM05wWjI1dFpXNTBYSEpjYmlBZ0lDQWdJQ0FnY21WMFcybGRJRDBnWkdGMFlWdHBYVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQnlaWFE3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J6ZEdGMGFXTWdYMk5zYjI1bFJHRjBZU2hrWVhSaE9pQkVZWFJoVkhsd1pTazZJRVJoZEdGVWVYQmxJSHRjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnWkdGMFlTQTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2NseHVJQ0FnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb1pHRjBZU2twSUh0Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYUWdQU0JiWFR0Y2NseHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR1JoZEdFdWJHVnVaM1JvT3lBcksya3BYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYUmJhVjBnUFNCRmJYVnNZWFJ2Y2tOdmJXMXZiaTVmWTJ4dmJtVkVZWFJoS0dSaGRHRmJhVjBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVYwTzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0JwWmlBb1pHRjBZU0E5UFQwZ2JuVnNiQ2xjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNjbHh1WEhKY2JpQWdJQ0FnSUdsbUlDaGtZWFJoSUdsdWMzUmhibU5sYjJZZ1VtVm5SWGh3S1Z4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVbVZuUlhod0tHUmhkR0VwTzF4eVhHNWNjbHh1SUNBZ0lDQWdZMjl1YzNRZ2NtVjBPaUJFWVhSaFZIbHdaU0E5SUh0OU8xeHlYRzRnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJR2tnYVc0Z1pHRjBZU2xjY2x4dUlDQWdJQ0FnSUNCeVpYUmJhVjBnUFNCRmJYVnNZWFJ2Y2tOdmJXMXZiaTVmWTJ4dmJtVkVZWFJoS0dSaGRHRmJhVjBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlISmxkRHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQmtZWFJoTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnYzNSaGRHbGpJSFJwYldWVWIxTjBjbWx1WnloMGFXMWxPaUJ1ZFcxaVpYSXNJR2x1WTJ4MVpHVk5hV3hzYVhNZ1BTQjBjblZsS1RvZ2MzUnlhVzVuSUh0Y2NseHVJQ0FnSUdOdmJuTjBJRzVsWjJGMGFYWmxJRDBnZEdsdFpTQThJREFnUHlBbkxTY2dPaUFuSnp0Y2NseHVJQ0FnSUhScGJXVWdQU0JOWVhSb0xtRmljeWgwYVcxbEtUdGNjbHh1SUNBZ0lHTnZibk4wSUcxcGJHeHBjMDUxYlNBOUlIUnBiV1VnSlNBeE1EQXdPMXh5WEc0Z0lDQWdZMjl1YzNRZ2MyVmpjMDUxYlNBOUlDZ29kR2x0WlNBbElDZzJNQ0FxSURFd01EQXBLU0F0SUcxcGJHeHBjMDUxYlNrZ0x5QXhNREF3TzF4eVhHNGdJQ0FnTHk4Z1RXbHNiR2x6WldOdmJtUnpYSEpjYmlBZ0lDQmpiMjV6ZENCdGFXeHNhWE1nUFNCZ01EQWtlMjFwYkd4cGMwNTFiWDFnTG5OMVluTjBjaWd0TXlrN1hISmNiaUFnSUNCamIyNXpkQ0J6WldOeklEMGdZREFrZTNObFkzTk9kVzE5WUM1emRXSnpkSElvTFRJcE8xeHlYRzRnSUNBZ1kyOXVjM1FnYldsdWN5QTlJR0F3Skhzb0tDZ29kR2x0WlNBbElDZzJNQ0FxSURZd0lDb2dNVEF3TUNrcElDMGdiV2xzYkdselRuVnRLU0F2SURFd01EQXBJQzBnYzJWamMwNTFiU2tnTHlBMk1IMWdMbk4xWW5OMGNpZ3RNaWs3WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVZuWVhScGRtVWdLeUJ0YVc1eklDc2dKem9uSUNzZ2MyVmpjeUFySUNocGJtTnNkV1JsVFdsc2JHbHpJRDhnSnk0bklDc2diV2xzYkdseklEb2dKeWNwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnYzNSaGRHbGpJSFJwYldWVWIwUmhkR1ZUZEhKcGJtY29kR2x0WlRvZ2JuVnRZbVZ5S1RvZ2MzUnlhVzVuSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtUmhkR1ZQWW1wbFkzUlViMFJoZEdWVGRISnBibWNvYm1WM0lFUmhkR1VvZEdsdFpTa3BPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdjM1JoZEdsaklHUmhkR1ZQWW1wbFkzUlViMFJoZEdWVGRISnBibWNvWkdGMFpUb2dSR0YwWlNrNklITjBjbWx1WnlCN1hISmNiaUFnSUNCamIyNXpkQ0I1WldGeUlEMGdaR0YwWlM1blpYUkdkV3hzV1dWaGNpZ3BPMXh5WEc0Z0lDQWdZMjl1YzNRZ2JXOXVkR2dnUFNCRmJYVnNZWFJ2Y2tOdmJXMXZiaTU2WlhKdlVHRmtLQ2hrWVhSbExtZGxkRTF2Ym5Sb0tDa2dLeUF4S1M1MGIxTjBjbWx1WnlncEtUdGNjbHh1SUNBZ0lHTnZibk4wSUdSaGVTQTlJRVZ0ZFd4aGRHOXlRMjl0Ylc5dUxucGxjbTlRWVdRb1pHRjBaUzVuWlhSRVlYUmxLQ2t1ZEc5VGRISnBibWNvS1NrN1hISmNiaUFnSUNCeVpYUjFjbTRnWUNSN2VXVmhjbjB0Skh0dGIyNTBhSDB0Skh0a1lYbDlZRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSE4wWVhScFl5QjBhVzFsVkc5VWFXMWxVM1J5YVc1bktIUnBiV1U2SUc1MWJXSmxjaXdnYVc1amJIVmtaVTFwYkd4cGN5QTlJR1poYkhObEtUb2djM1J5YVc1bklIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJoZEdWUFltcGxZM1JVYjFScGJXVlRkSEpwYm1jb2JtVjNJRVJoZEdVb2RHbHRaU2tzSUdsdVkyeDFaR1ZOYVd4c2FYTXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdjM1JoZEdsaklHUmhkR1ZQWW1wbFkzUlViMVJwYldWVGRISnBibWNvWkdGMFpUb2dSR0YwWlN3Z2FXNWpiSFZrWlUxcGJHeHBjeUE5SUdaaGJITmxLVG9nYzNSeWFXNW5JSHRjY2x4dUlDQWdJR052Ym5OMElHaHZkWElnUFNCRmJYVnNZWFJ2Y2tOdmJXMXZiaTU2WlhKdlVHRmtLR1JoZEdVdVoyVjBTRzkxY25Nb0tTNTBiMU4wY21sdVp5Z3BLVHRjY2x4dUlDQWdJR052Ym5OMElHMXBiblYwWlNBOUlFVnRkV3hoZEc5eVEyOXRiVzl1TG5wbGNtOVFZV1FvWkdGMFpTNW5aWFJOYVc1MWRHVnpLQ2t1ZEc5VGRISnBibWNvS1NrN1hISmNiaUFnSUNCamIyNXpkQ0J6WldOdmJtUWdQU0JGYlhWc1lYUnZja052YlcxdmJpNTZaWEp2VUdGa0tHUmhkR1V1WjJWMFUyVmpiMjVrY3lncExuUnZVM1J5YVc1bktDa3BPMXh5WEc0Z0lDQWdiR1YwSUhKbGRDQTlJR0FrZTJodmRYSjlPaVI3YldsdWRYUmxmVG9rZTNObFkyOXVaSDFnTzF4eVhHNGdJQ0FnYVdZZ0tHbHVZMngxWkdWTmFXeHNhWE1wWEhKY2JpQWdJQ0FnSUhKbGRDQTlJSEpsZENBcklHQXVKSHRrWVhSbExtZGxkRTFwYkd4cGMyVmpiMjVrY3lncGZXQTdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSEpsZER0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhOMFlYUnBZeUJ0YzFSdlJIVnlZWFJwYjI0b2JYTTZJRzUxYldKbGNpazZJSE4wY21sdVp5QjdYSEpjYmlBZ0lDQmpiMjV6ZENCMGJYQWdQU0JGYlhWc1lYUnZja052YlcxdmJpNTBhVzFsVkc5VGRISnBibWNvYlhNc0lHWmhiSE5sS1R0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYlhBdWNtVndiR0ZqWlNnbk9pY3NJQ2R0SnlrZ0t5QW5jeWM3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J6ZEdGMGFXTWdaR0YwWlZScGJXVlViMU4wY21sdVp5aDBhVzFsT2lCdWRXMWlaWElzSUdsdVkyeDFaR1ZOYVd4c2FYTWdQU0JtWVd4elpTazZJSE4wY21sdVp5QjdYSEpjYmlBZ0lDQmpiMjV6ZENCa1lYUmxJRDBnYm1WM0lFUmhkR1VvZEdsdFpTazdYSEpjYmlBZ0lDQnlaWFIxY200Z1lDUjdkR2hwY3k1a1lYUmxUMkpxWldOMFZHOUVZWFJsVTNSeWFXNW5LR1JoZEdVcGZTQWtlM1JvYVhNdVpHRjBaVTlpYW1WamRGUnZWR2x0WlZOMGNtbHVaeWhrWVhSbExDQnBibU5zZFdSbFRXbHNiR2x6S1gxZ08xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2MzUmhkR2xqSUhwbGNtOVFZV1FvYzNSeU9pQnpkSEpwYm1jc0lHeGxiaUE5SURJcE9pQnpkSEpwYm1jZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUNnbkp5QXJJSE4wY2lrdWNHRmtVM1JoY25Rb2JHVnVMQ0FuTUNjcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2MzUmhkR2xqSUhCeWIzQmxja05oYzJVb2MzUnlPaUJ6ZEhKcGJtY3BPaUJ6ZEhKcGJtY2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlITjBjaTV5WlhCc1lXTmxLQzhvVzE1Y1hGZGZYU3RiWGx4Y2N5MWRLaWtnS2k5bkxDQW9kSGgwS1NBOVBpQjdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQjBlSFF1WTJoaGNrRjBLREFwTG5SdlZYQndaWEpEWVhObEtDa2dLeUIwZUhRdWMzVmljM1J5S0RFcExuUnZURzkzWlhKRFlYTmxLQ2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhOMFlYUnBZeUJ6Y0dGalpWQmhaRXhsWm5Rb2MzUnlPaUJ6ZEhKcGJtY3NJR3hsYmpvZ2JuVnRZbVZ5S1RvZ2MzUnlhVzVuSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJ6ZEhJdWNHRmtVM1JoY25Rb2JHVnVMQ0FuSUNjcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2MzUmhkR2xqSUdSdlpYTk1hVzVsVFdGMFkyZ29iR2x1WlRvZ2MzUnlhVzVuTEZ4eVhHNGdJQ0FnSUNCeVpXZGxlR1Z6T2lCU1pXTnZjbVE4VEdGdVp5d2dVbVZuUlhod1BpQjhJRkpsWjBWNGNDazZJRkpsWjBWNGNFVjRaV05CY25KaGVTQjhJRzUxYkd3Z2UxeHlYRzRnSUNBZ2FXWWdLSEpsWjJWNFpYTWdhVzV6ZEdGdVkyVnZaaUJTWldkRmVIQXBYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaV2RsZUdWekxtVjRaV01vYkdsdVpTazdYSEpjYmx4eVhHNGdJQ0FnWm05eUlDaGpiMjV6ZENCc1lXNW5VM1J5SUdsdUlISmxaMlY0WlhNcElIdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ2JHRnVaeUE5SUd4aGJtZFRkSElnWVhNZ2EyVjViMllnZEhsd1pXOW1JSEpsWjJWNFpYTTdYSEpjYmlBZ0lDQWdJR052Ym5OMElISmxjeUE5SUhKbFoyVjRaWE5iYkdGdVoxMHVaWGhsWXloc2FXNWxLVHRjY2x4dUlDQWdJQ0FnYVdZZ0tISmxjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h5WlhNdVozSnZkWEJ6S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6TG1keWIzVndjeTVzWVc1bmRXRm5aU0E5SUd4aGJtYzdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsY3p0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnpkR0YwYVdNZ2JXRjBZMmhUZEdGeWRDaHNhVzVsT2lCemRISnBibWNwT2lCU1pXZEZlSEJOWVhSamFFRnljbUY1SUh3Z2RXNWtaV1pwYm1Wa0lIdGNjbHh1SUNBZ0lHeGxkQ0J5WlhNN1hISmNiaUFnSUNBdkx5QkRkWEp5Wlc1MGJIa2dZV3hzSUc5bUlIUm9aWE5sSUhKbFoyVjRaWE1nYUdGMlpTQm5jbTkxY0hNZ2FXWWdkR2hsZVNCdFlYUmphQ0JoZENCaGJHd3NYSEpjYmlBZ0lDQXZMeUJpZFhRZ1ltVWdjbTlpZFhOMElIUnZJSFJvWVhRZ1kyaGhibWRwYm1jZ2FXNGdkR2hsSUdaMWRIVnlaUzVjY2x4dUlDQWdJSEpsY3lBOUlFVnRkV3hoZEc5eVEyOXRiVzl1TG1SdlpYTk1hVzVsVFdGMFkyZ29iR2x1WlN3Z1JXMTFiR0YwYjNKRGIyMXRiMjR1WTI5MWJuUmtiM2R1VW1WblpYaGxjeWs3WEhKY2JpQWdJQ0JwWmlBb2NtVnpLU0I3WEhKY2JpQWdJQ0FnSUhKbGN5NW5jbTkxY0hNZ1B6ODlJSHQ5TzF4eVhHNGdJQ0FnSUNCeVpYTXVaM0p2ZFhCekxsTjBZWEowU1c0Z1BTQW9jR0Z5YzJWSmJuUW9jbVZ6TG1keWIzVndjeTUwYVcxbElEOC9JQ2N3SnlrZ0tpQXhNREF3S1M1MGIxTjBjbWx1WnlncE8xeHlYRzRnSUNBZ0lDQnlaWE11WjNKdmRYQnpMbE4wWVhKMFZIbHdaU0E5SUNkRGIzVnVkR1J2ZDI0bk8xeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnpPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVZ6SUQwZ1JXMTFiR0YwYjNKRGIyMXRiMjR1Wkc5bGMweHBibVZOWVhSamFDaHNhVzVsTENCRmJYVnNZWFJ2Y2tOdmJXMXZiaTV6WldGc1VtVm5aWGhsY3lrN1hISmNiaUFnSUNCcFppQW9jbVZ6S1NCN1hISmNiaUFnSUNBZ0lISmxjeTVuY205MWNITWdQejg5SUh0OU8xeHlYRzRnSUNBZ0lDQnlaWE11WjNKdmRYQnpMbE4wWVhKMFNXNGdQU0FuTUNjN1hISmNiaUFnSUNBZ0lISmxjeTVuY205MWNITXVVM1JoY25SVWVYQmxJRDBnSjFObFlXd25PMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ6TzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WeklEMGdSVzExYkdGMGIzSkRiMjF0YjI0dVpHOWxjMHhwYm1WTllYUmphQ2hzYVc1bExDQkZiWFZzWVhSdmNrTnZiVzF2Ymk1bGJtZGhaMlZTWldkbGVHVnpLVHRjY2x4dUlDQWdJR2xtSUNoeVpYTXBJSHRjY2x4dUlDQWdJQ0FnY21WekxtZHliM1Z3Y3lBL1B6MGdlMzA3WEhKY2JpQWdJQ0FnSUhKbGN5NW5jbTkxY0hNdVUzUmhjblJKYmlBOUlDY3dKenRjY2x4dUlDQWdJQ0FnY21WekxtZHliM1Z3Y3k1VGRHRnlkRlI1Y0dVZ1BTQW5SVzVuWVdkbEp6dGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlISmxjenRjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSE4wWVhScFl5QnRZWFJqYUVWdVpDaHNhVzVsT2lCemRISnBibWNwT2lCU1pXZEZlSEJOWVhSamFFRnljbUY1SUh3Z2RXNWtaV1pwYm1Wa0lIdGNjbHh1SUNBZ0lHeGxkQ0J5WlhNN1hISmNiaUFnSUNBdkx5QkRkWEp5Wlc1MGJIa2dZV3hzSUc5bUlIUm9aWE5sSUhKbFoyVjRaWE1nYUdGMlpTQm5jbTkxY0hNZ2FXWWdkR2hsZVNCdFlYUmphQ0JoZENCaGJHd3NYSEpjYmlBZ0lDQXZMeUJpZFhRZ1ltVWdjbTlpZFhOMElIUnZJSFJvWVhRZ1kyaGhibWRwYm1jZ2FXNGdkR2hsSUdaMWRIVnlaUzVjY2x4dUlDQWdJSEpsY3lBOUlFVnRkV3hoZEc5eVEyOXRiVzl1TG1SdlpYTk1hVzVsVFdGMFkyZ29iR2x1WlN3Z1JXMTFiR0YwYjNKRGIyMXRiMjR1ZDJsdVVtVm5aWGdwTzF4eVhHNGdJQ0FnYVdZZ0tISmxjeWtnZTF4eVhHNGdJQ0FnSUNCeVpYTXVaM0p2ZFhCeklEOC9QU0I3ZlR0Y2NseHVJQ0FnSUNBZ2NtVnpMbWR5YjNWd2N5NUZibVJVZVhCbElEMGdKMWRwYmljN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpYTTdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWE1nUFNCRmJYVnNZWFJ2Y2tOdmJXMXZiaTVrYjJWelRHbHVaVTFoZEdOb0tHeHBibVVzSUVWdGRXeGhkRzl5UTI5dGJXOXVMbmRwY0dWU1pXZGxlQ2s3WEhKY2JpQWdJQ0JwWmlBb2NtVnpLU0I3WEhKY2JpQWdJQ0FnSUhKbGN5NW5jbTkxY0hNZ1B6ODlJSHQ5TzF4eVhHNGdJQ0FnSUNCeVpYTXVaM0p2ZFhCekxrVnVaRlI1Y0dVZ1BTQW5WMmx3WlNjN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpYTTdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWE1nUFNCRmJYVnNZWFJ2Y2tOdmJXMXZiaTVrYjJWelRHbHVaVTFoZEdOb0tHeHBibVVzSUVWdGRXeGhkRzl5UTI5dGJXOXVMbU5oWTNSaWIzUlhhWEJsVW1WblpYZ3BPMXh5WEc0Z0lDQWdhV1lnS0hKbGN5a2dlMXh5WEc0Z0lDQWdJQ0J5WlhNdVozSnZkWEJ6SUQ4L1BTQjdmVHRjY2x4dUlDQWdJQ0FnY21WekxtZHliM1Z3Y3k1RmJtUlVlWEJsSUQwZ0owTmhZM1JpYjNRZ1YybHdaU2M3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJ5WlhNN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYTWdQU0JGYlhWc1lYUnZja052YlcxdmJpNWtiMlZ6VEdsdVpVMWhkR05vS0d4cGJtVXNJRVZ0ZFd4aGRHOXlRMjl0Ylc5dUxuVnVjMlZoYkZKbFoyVjRaWE1wTzF4eVhHNGdJQ0FnYVdZZ0tISmxjeWtnZTF4eVhHNGdJQ0FnSUNCeVpYTXVaM0p2ZFhCeklEOC9QU0I3ZlR0Y2NseHVJQ0FnSUNBZ2NtVnpMbWR5YjNWd2N5NUZibVJVZVhCbElEMGdKMVZ1YzJWaGJDYzdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWE03WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J6ZEdGMGFXTWdjMlZoYkZKbFoyVjRaWE1nUFNCTWIyTmhiR1ZPWlhSU1pXZGxlQzVoY21WaFUyVmhiRHRjY2x4dUlDQnpkR0YwYVdNZ1pXNW5ZV2RsVW1WblpYaGxjeUE5SUV4dlkyRnNaVTVsZEZKbFoyVjRMbU52ZFc1MFpHOTNia1Z1WjJGblpUdGNjbHh1SUNCemRHRjBhV01nWTI5MWJuUmtiM2R1VW1WblpYaGxjeUE5SUV4dlkyRnNaVTVsZEZKbFoyVjRMbU52ZFc1MFpHOTNibE4wWVhKME8xeHlYRzRnSUhOMFlYUnBZeUIxYm5ObFlXeFNaV2RsZUdWeklEMGdURzlqWVd4bFRtVjBVbVZuWlhndVlYSmxZVlZ1YzJWaGJEdGNjbHh1SUNCemRHRjBhV01nZDJsd1pWSmxaMlY0SUQwZ1RtVjBVbVZuWlhobGN5NXVaWFIzYjNKck5tUW9leUJqYjIxdFlXNWtPaUFuTkRBd01EQXdNVEFuSUgwcE8xeHlYRzRnSUhOMFlYUnBZeUIzYVc1U1pXZGxlQ0E5SUU1bGRGSmxaMlY0WlhNdWJtVjBkMjl5YXpaa0tIc2dZMjl0YldGdVpEb2dKelF3TURBd01EQXpKeUI5S1R0Y2NseHVJQ0J6ZEdGMGFXTWdZMkZqZEdKdmRGZHBjR1ZTWldkbGVDQTlJRTVsZEZKbFoyVjRaWE11WldOb2J5aDdJR3hwYm1VNklDZGpZV04wWW05MElIZHBjR1V1S2o4bklIMHBPMXh5WEc1OVhISmNiaUlzSWk4dklFaGxiSEJsY2lCRmNuSnZjaUJtYjNJZ1ZIbHdaVk5qY21sd2RDQnphWFIxWVhScGIyNXpJSGRvWlhKbElIUm9aU0J3Y205bmNtRnRiV1Z5SUhSb2FXNXJjeUIwYUdWNVhISmNiaTh2SUd0dWIzY2dZbVYwZEdWeUlIUm9ZVzRnVkhsd1pWTmpjbWx3ZENCMGFHRjBJSE52YldVZ2MybDBkV0YwYVc5dUlIZHBiR3dnYm1WMlpYSWdiMk5qZFhJdVhISmNibHh5WEc0dkx5QlVhR1VnYVc1MFpXNTBhVzl1SUdobGNtVWdhWE1nZEdoaGRDQjBhR1VnY0hKdlozSmhiVzFsY2lCa2IyVnpJRzV2ZENCbGVIQmxZM1FnWVNCd1lYSjBhV04xYkdGeVhISmNiaTh2SUdKcGRDQnZaaUJqYjJSbElIUnZJR2hoY0hCbGJpd2dZVzVrSUhOdklHaGhjeUJ1YjNRZ2QzSnBkSFJsYmlCallYSmxablZzSUdWeWNtOXlJR2hoYm1Sc2FXNW5MbHh5WEc0dkx5QkpaaUJwZENCa2IyVnpJRzlqWTNWeUxDQmhkQ0JzWldGemRDQjBhR1Z5WlNCM2FXeHNJR0psSUdGdUlHVnljbTl5SUdGdVpDQjNaU0JqWVc0Z1ptbG5kWEpsSUc5MWRDQjNhSGt1WEhKY2JpOHZJRlJvYVhNZ2FYTWdjSEpsWm1WeVlXSnNaU0IwYnlCallYTjBhVzVuSUc5eUlHUnBjMkZpYkdsdVp5QlVlWEJsVTJOeWFYQjBJR0ZzZEc5blpYUm9aWElnYVc0Z2IzSmtaWElnZEc5Y2NseHVMeThnWVhadmFXUWdjM2x1ZEdGNElHVnljbTl5Y3k1Y2NseHVYSEpjYmk4dklFOXVaU0JqYjIxdGIyNGdaWGhoYlhCc1pTQnBjeUJoSUhKbFoyVjRMQ0IzYUdWeVpTQnBaaUIwYUdVZ2NtVm5aWGdnYldGMFkyaGxjeUIwYUdWdUlHRnNiQ0J2WmlCMGFHVmNjbHh1THk4Z0tHNXZiaTF2Y0hScGIyNWhiQ2tnY21WblpYZ2daM0p2ZFhCeklIZHBiR3dnWVd4emJ5QmlaU0IyWVd4cFpDd2dZblYwSUZSNWNHVlRZM0pwY0hRZ1pHOWxjMjRuZENCcmJtOTNMbHh5WEc1bGVIQnZjblFnWTJ4aGMzTWdWVzV5WldGamFHRmliR1ZEYjJSbElHVjRkR1Z1WkhNZ1JYSnliM0lnZTF4eVhHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHlYRzRnSUNBZ2MzVndaWElvSjFSb2FYTWdZMjlrWlNCemFHOTFiR1J1WEZ3bmRDQmlaU0J5WldGamFHVmtKeWs3WEhKY2JpQWdmVnh5WEc1OVhISmNiaUlzSW1sdGNHOXlkQ0I3SUZWdWNtVmhZMmhoWW14bFEyOWtaU0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNKbGMyOTFjbU5sY3k5dWIzUmZjbVZoWTJobFpDYzdYSEpjYm1sdGNHOXlkQ0I3SUVwdllpQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM1I1Y0dWekwycHZZaWM3WEhKY2JtbHRjRzl5ZENCRGIyMWlZWFJoYm5SVGRHRjBaU0JtY205dElDY3VMME52YldKaGRHRnVkRk4wWVhSbEp6dGNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRU52YldKaGRHRnVkQ0I3WEhKY2JpQWdhV1E2SUhOMGNtbHVaenRjY2x4dUlDQnVZVzFsSUQwZ0p5YzdYSEpjYmlBZ2MyVnlkbVZ5SUQwZ0p5YzdYSEpjYmlBZ2MzUmhkR1Z6T2lCN0lGdDBhVzFsYzNSaGJYQTZJRzUxYldKbGNsMDZJRU52YldKaGRHRnVkRk4wWVhSbElIMGdQU0I3ZlR0Y2NseHVJQ0J6YVdkdWFXWnBZMkZ1ZEZOMFlYUmxjem9nYm5WdFltVnlXMTBnUFNCYlhUdGNjbHh1SUNCc1lYUmxjM1JVYVcxbGMzUmhiWEFnUFNBdE1UdGNjbHh1SUNCcWIySS9PaUJLYjJJN1hISmNiaUFnYW05aVNXUS9PaUJ1ZFcxaVpYSTdYSEpjYmlBZ2JHVjJaV3cvT2lCdWRXMWlaWEk3WEhKY2JseHlYRzRnSUdOdmJuTjBjblZqZEc5eUtHbGtPaUJ6ZEhKcGJtY3NJRzVoYldVNklITjBjbWx1WnlrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVwWkNBOUlHbGtPMXh5WEc0Z0lDQWdkR2hwY3k1elpYUk9ZVzFsS0c1aGJXVXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdjMlYwVG1GdFpTaHVZVzFsT2lCemRISnBibWNwT2lCMmIybGtJSHRjY2x4dUlDQWdJQzh2SUZOdmJXVjBhVzFsY3lCdVpYUjNiM0pySUd4cGJtVnpJR0Z5Y21sMlpTQmhablJsY2lCMGFHVWdZMjl0WW1GMFlXNTBJR2hoY3lCaVpXVnVJR05zWldGeVpXUmNjbHh1SUNBZ0lDOHZJR1p5YjIwZ2JXVnRiM0o1SUdsdUlIUm9aU0JqYkdsbGJuUXNJSE52SUhSb1pTQnVaWFIzYjNKcklHeHBibVVnZDJsc2JDQm9ZWFpsSUdFZ2RtRnNhV1FnU1VSY2NseHVJQ0FnSUM4dklHSjFkQ0IwYUdVZ2JtRnRaU0IzYVd4c0lHSmxJR0pzWVc1ckxpQlRhVzVqWlNCM1pTZHlaU0IwY21GamEybHVaeUIwYUdVZ2JtRnRaU0JtYjNJZ2RHaGxYSEpjYmlBZ0lDQXZMeUJsYm5ScGNtVWdabWxuYUhRZ1lXNWtJRzV2ZENCdmJpQmhJSE4wWVhSbExXSjVMWE4wWVhSbElHSmhjMmx6TENCM1pTQmtiMjRuZENCM1lXNTBJSFJ2WEhKY2JpQWdJQ0F2THlCaWJHRnVheUJ2ZFhRZ1lTQnVZVzFsSUdsdUlIUm9hWE1nWTJGelpTNWNjbHh1SUNBZ0lDOHZJRWxtSUdFZ1kyOXRZbUYwWVc1MElHRmpkSFZoYkd4NUlHaGhjeUJoSUdKc1lXNXJJRzVoYldVc0lIUm9ZWFFuY3lCemRHbHNiQ0JoYkd4dmQyVmtJR0o1WEhKY2JpQWdJQ0F2THlCMGFHVWdZMjl1YzNSeWRXTjBiM0l1WEhKY2JpQWdJQ0JwWmlBb2JtRnRaU0E5UFQwZ0p5Y3BYSEpjYmlBZ0lDQWdJSEpsZEhWeWJqdGNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQndZWEowY3lBOUlHNWhiV1V1YzNCc2FYUW9KeWduS1R0Y2NseHVJQ0FnSUhSb2FYTXVibUZ0WlNBOUlIQmhjblJ6V3pCZElEOC9JQ2NuTzF4eVhHNGdJQ0FnYVdZZ0tIQmhjblJ6TG14bGJtZDBhQ0ErSURFcFhISmNiaUFnSUNBZ0lIUm9hWE11YzJWeWRtVnlJRDBnY0dGeWRITmJNVjAvTG5KbGNHeGhZMlVvTDF4Y0tTUXZMQ0FuSnlrZ1B6OGdKeWM3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JvWVhOVGRHRjBaU2gwYVcxbGMzUmhiWEE2SUc1MWJXSmxjaWs2SUdKdmIyeGxZVzRnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzUmhkR1Z6VzNScGJXVnpkR0Z0Y0YwZ0lUMDlJSFZ1WkdWbWFXNWxaRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSEIxYzJoVGRHRjBaU2gwYVcxbGMzUmhiWEE2SUc1MWJXSmxjaXdnYzNSaGRHVTZJRU52YldKaGRHRnVkRk4wWVhSbEtUb2dkbTlwWkNCN1hISmNiaUFnSUNCMGFHbHpMbk4wWVhSbGMxdDBhVzFsYzNSaGJYQmRJRDBnYzNSaGRHVTdYSEpjYmlBZ0lDQjBhR2x6TG14aGRHVnpkRlJwYldWemRHRnRjQ0E5SUhScGJXVnpkR0Z0Y0R0Y2NseHVJQ0FnSUdsbUlDZ2hkR2hwY3k1emFXZHVhV1pwWTJGdWRGTjBZWFJsY3k1cGJtTnNkV1JsY3loMGFXMWxjM1JoYlhBcEtWeHlYRzRnSUNBZ0lDQjBhR2x6TG5OcFoyNXBabWxqWVc1MFUzUmhkR1Z6TG5CMWMyZ29kR2x0WlhOMFlXMXdLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJRzVsZUhSVGFXZHVhV1pwWTJGdWRGTjBZWFJsS0hScGJXVnpkR0Z0Y0RvZ2JuVnRZbVZ5S1RvZ1EyOXRZbUYwWVc1MFUzUmhkR1VnZTF4eVhHNGdJQ0FnTHk4Z1UyaHZjblJqZFhRZ2IzVjBJR2xtSUhSb2FYTWdhWE1nYzJsbmJtbG1hV05oYm5RZ2IzSWdhV1lnZEdobGNtVW5jeUJ1YnlCb2FXZG9aWElnYzJsbmJtbG1hV05oYm5RZ2MzUmhkR1ZjY2x4dUlDQWdJR052Ym5OMElHbHVaR1Y0SUQwZ2RHaHBjeTV6YVdkdWFXWnBZMkZ1ZEZOMFlYUmxjeTVwYm1SbGVFOW1LSFJwYldWemRHRnRjQ2s3WEhKY2JpQWdJQ0JqYjI1emRDQnNZWE4wVTJsbmJtbG1hV05oYm5SVGRHRjBaVWx1WkdWNElEMGdkR2hwY3k1emFXZHVhV1pwWTJGdWRGTjBZWFJsY3k1c1pXNW5kR2dnTFNBeE8xeHlYRzRnSUNBZ0x5OGdTV1lnZEdsdFpYTjBZVzF3SUdseklHRWdjMmxuYm1sbWFXTmhiblFnYzNSaGRHVWdZV3h5WldGa2VTd2dZVzVrSUdsMEozTWdibTkwSUhSb1pTQnNZWE4wSUc5dVpTd2djbVYwZFhKdUlIUm9aU0J1WlhoMFhISmNiaUFnSUNCcFppQW9hVzVrWlhnZ1BqMGdNQ0FtSmlCcGJtUmxlQ0E4SUd4aGMzUlRhV2R1YVdacFkyRnVkRk4wWVhSbFNXNWtaWGdwWEhKY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRk4wWVhSbFFubEpibVJsZUNocGJtUmxlQ0FySURFcE8xeHlYRzRnSUNBZ0x5OGdTV1lnZEdsdFpYTjBZVzF3SUdseklIUm9aU0JzWVhOMElITnBaMjVwWm1sallXNTBJSE4wWVhSbElHOXlJSFJvWlNCMGFXMWxjM1JoYlhBZ2FYTWdjR0Z6ZENCMGFHVWdiR0Z6ZENCemFXZHVhV1pwWTJGdWRGeHlYRzRnSUNBZ0x5OGdjM1JoZEdVc0lISmxkSFZ5YmlCMGFHVWdiR0Z6ZENCemFXZHVhV1pwWTJGdWRDQnpkR0YwWlZ4eVhHNGdJQ0FnWld4elpTQnBaaUFvYVc1a1pYZ2dQVDA5SUd4aGMzUlRhV2R1YVdacFkyRnVkRk4wWVhSbFNXNWtaWGdnZkh4Y2NseHVJQ0FnSUNBZ0lDQjBhVzFsYzNSaGJYQWdQaUFvZEdocGN5NXphV2R1YVdacFkyRnVkRk4wWVhSbGMxdHNZWE4wVTJsbmJtbG1hV05oYm5SVGRHRjBaVWx1WkdWNFhTQS9QeUF3S1NsY2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwVTNSaGRHVkNlVWx1WkdWNEtHeGhjM1JUYVdkdWFXWnBZMkZ1ZEZOMFlYUmxTVzVrWlhncE8xeHlYRzVjY2x4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnZEdocGN5NXphV2R1YVdacFkyRnVkRk4wWVhSbGN5NXNaVzVuZEdnN0lDc3JhU2tnZTF4eVhHNGdJQ0FnSUNCamIyNXpkQ0J6ZEdGMFpVbHVaR1Y0SUQwZ2RHaHBjeTV6YVdkdWFXWnBZMkZ1ZEZOMFlYUmxjMXRwWFR0Y2NseHVJQ0FnSUNBZ2FXWWdLSE4wWVhSbFNXNWtaWGdnSmlZZ2MzUmhkR1ZKYm1SbGVDQStJSFJwYldWemRHRnRjQ2xjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJUZEdGMFpVSjVTVzVrWlhnb2FTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBVM1JoZEdWQ2VVbHVaR1Y0S0hSb2FYTXVjMmxuYm1sbWFXTmhiblJUZEdGMFpYTXViR1Z1WjNSb0lDMGdNU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J3ZFhOb1VHRnlkR2xoYkZOMFlYUmxLSFJwYldWemRHRnRjRG9nYm5WdFltVnlMQ0J3Y205d2N6b2dVR0Z5ZEdsaGJEeERiMjFpWVhSaGJuUlRkR0YwWlQ0cE9pQjJiMmxrSUh0Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TG5OMFlYUmxjMXQwYVcxbGMzUmhiWEJkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnTHk4Z1EyeHZibVVnZEdobElHeGhjM1FnYzNSaGRHVWdZbVZtYjNKbElIUm9hWE1nZEdsdFpYTjBZVzF3WEhKY2JpQWdJQ0FnSUdOdmJuTjBJSE4wWVhSbFZHbHRaWE4wWVcxd0lEMGdkR2hwY3k1emFXZHVhV1pwWTJGdWRGTjBZWFJsYzF4eVhHNGdJQ0FnSUNBZ0lDNW1hV3gwWlhJb0tITXBJRDArSUhNZ1BDQjBhVzFsYzNSaGJYQXBYSEpjYmlBZ0lDQWdJQ0FnTG5OdmNuUW9LR0VzSUdJcElEMCtJR0lnTFNCaEtWc3dYU0EvUHlCMGFHbHpMbk5wWjI1cFptbGpZVzUwVTNSaGRHVnpXekJkTzF4eVhHNGdJQ0FnSUNCcFppQW9jM1JoZEdWVWFXMWxjM1JoYlhBZ1BUMDlJSFZ1WkdWbWFXNWxaQ2xjY2x4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZXNXlaV0ZqYUdGaWJHVkRiMlJsS0NrN1hISmNiaUFnSUNBZ0lHTnZibk4wSUhOMFlYUmxJRDBnZEdocGN5NXpkR0YwWlhOYmMzUmhkR1ZVYVcxbGMzUmhiWEJkTzF4eVhHNGdJQ0FnSUNCcFppQW9JWE4wWVhSbEtWeHlYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJWYm5KbFlXTm9ZV0pzWlVOdlpHVW9LVHRjY2x4dUlDQWdJQ0FnZEdocGN5NXpkR0YwWlhOYmRHbHRaWE4wWVcxd1hTQTlJSE4wWVhSbExuQmhjblJwWVd4RGJHOXVaU2h3Y205d2N5azdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQmpiMjV6ZENCemRHRjBaU0E5SUhSb2FYTXVjM1JoZEdWelczUnBiV1Z6ZEdGdGNGMDdYSEpjYmlBZ0lDQWdJR2xtSUNnaGMzUmhkR1VwWEhKY2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGVnVjbVZoWTJoaFlteGxRMjlrWlNncE8xeHlYRzRnSUNBZ0lDQjBhR2x6TG5OMFlYUmxjMXQwYVcxbGMzUmhiWEJkSUQwZ2MzUmhkR1V1Y0dGeWRHbGhiRU5zYjI1bEtIQnliM0J6S1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhSb2FYTXViR0YwWlhOMFZHbHRaWE4wWVcxd0lEMGdUV0YwYUM1dFlYZ29kR2hwY3k1c1lYUmxjM1JVYVcxbGMzUmhiWEFzSUhScGJXVnpkR0Z0Y0NrN1hISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ2JHRnpkRk5wWjI1cFptbGpZVzUwVTNSaGRHVlVhVzFsYzNSaGJYQWdQVnh5WEc0Z0lDQWdJQ0IwYUdsekxuTnBaMjVwWm1sallXNTBVM1JoZEdWelczUm9hWE11YzJsbmJtbG1hV05oYm5SVGRHRjBaWE11YkdWdVozUm9JQzBnTVYwN1hISmNiaUFnSUNCcFppQW9JV3hoYzNSVGFXZHVhV1pwWTJGdWRGTjBZWFJsVkdsdFpYTjBZVzF3S1Z4eVhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZXNXlaV0ZqYUdGaWJHVkRiMlJsS0NrN1hISmNiaUFnSUNCamIyNXpkQ0J2YkdSVGRHRjBaVXBUVDA0Z1BTQktVMDlPTG5OMGNtbHVaMmxtZVNoMGFHbHpMbk4wWVhSbGMxdHNZWE4wVTJsbmJtbG1hV05oYm5SVGRHRjBaVlJwYldWemRHRnRjRjBwTzF4eVhHNGdJQ0FnWTI5dWMzUWdibVYzVTNSaGRHVktVMDlPSUQwZ1NsTlBUaTV6ZEhKcGJtZHBabmtvZEdocGN5NXpkR0YwWlhOYmRHbHRaWE4wWVcxd1hTazdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tHeGhjM1JUYVdkdWFXWnBZMkZ1ZEZOMFlYUmxWR2x0WlhOMFlXMXdJQ0U5UFNCMGFXMWxjM1JoYlhBZ0ppWWdibVYzVTNSaGRHVktVMDlPSUNFOVBTQnZiR1JUZEdGMFpVcFRUMDRwWEhKY2JpQWdJQ0FnSUhSb2FYTXVjMmxuYm1sbWFXTmhiblJUZEdGMFpYTXVjSFZ6YUNoMGFXMWxjM1JoYlhBcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1oyVjBVM1JoZEdVb2RHbHRaWE4wWVcxd09pQnVkVzFpWlhJcE9pQkRiMjFpWVhSaGJuUlRkR0YwWlNCN1hISmNiaUFnSUNCamIyNXpkQ0J6ZEdGMFpVSjVWR2x0WlhOMFlXMXdJRDBnZEdocGN5NXpkR0YwWlhOYmRHbHRaWE4wWVcxd1hUdGNjbHh1SUNBZ0lHbG1JQ2h6ZEdGMFpVSjVWR2x0WlhOMFlXMXdLVnh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjM1JoZEdWQ2VWUnBiV1Z6ZEdGdGNEdGNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQnBibWwwYVdGc1ZHbHRaWE4wWVcxd0lEMGdkR2hwY3k1emFXZHVhV1pwWTJGdWRGTjBZWFJsYzFzd1hUdGNjbHh1SUNBZ0lHbG1JQ2hwYm1sMGFXRnNWR2x0WlhOMFlXMXdJRDA5UFNCMWJtUmxabWx1WldRcFhISmNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QlZibkpsWVdOb1lXSnNaVU52WkdVb0tUdGNjbHh1SUNBZ0lHbG1JQ2gwYVcxbGMzUmhiWEFnUENCcGJtbDBhV0ZzVkdsdFpYTjBZVzF3S1Z4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJUZEdGMFpVSjVTVzVrWlhnb01DazdYSEpjYmx4eVhHNGdJQ0FnYkdWMElHa2dQU0F3TzF4eVhHNGdJQ0FnWm05eUlDZzdJR2tnUENCMGFHbHpMbk5wWjI1cFptbGpZVzUwVTNSaGRHVnpMbXhsYm1kMGFEc2dLeXRwS1NCN1hISmNiaUFnSUNBZ0lHTnZibk4wSUhCeVpYWlVhVzFsYzNSaGJYQWdQU0IwYUdsekxuTnBaMjVwWm1sallXNTBVM1JoZEdWelcybGRPMXh5WEc0Z0lDQWdJQ0JwWmlBb2NISmxkbFJwYldWemRHRnRjQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tWeHlYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJWYm5KbFlXTm9ZV0pzWlVOdlpHVW9LVHRjY2x4dUlDQWdJQ0FnYVdZZ0tIQnlaWFpVYVcxbGMzUmhiWEFnUGlCMGFXMWxjM1JoYlhBcFhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFUzUmhkR1ZDZVVsdVpHVjRLR2tnTFNBeEtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUlRkR0YwWlVKNVNXNWtaWGdvYVNBdElERXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeThnVTJodmRXeGtJRzl1YkhrZ1ltVWdZMkZzYkdWa0lIZG9aVzRnWUdsdVpHVjRZQ0JwY3lCMllXeHBaQzVjY2x4dUlDQndjbWwyWVhSbElHZGxkRk4wWVhSbFFubEpibVJsZUNocGJtUmxlRG9nYm5WdFltVnlLVG9nUTI5dFltRjBZVzUwVTNSaGRHVWdlMXh5WEc0Z0lDQWdZMjl1YzNRZ2MzUmhkR1ZKYm1SbGVDQTlJSFJvYVhNdWMybG5ibWxtYVdOaGJuUlRkR0YwWlhOYmFXNWtaWGhkTzF4eVhHNGdJQ0FnYVdZZ0tITjBZWFJsU1c1a1pYZ2dQVDA5SUhWdVpHVm1hVzVsWkNsY2NseHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGVnVjbVZoWTJoaFlteGxRMjlrWlNncE8xeHlYRzRnSUNBZ1kyOXVjM1FnYzNSaGRHVWdQU0IwYUdsekxuTjBZWFJsYzF0emRHRjBaVWx1WkdWNFhUdGNjbHh1SUNBZ0lHbG1JQ2h6ZEdGMFpTQTlQVDBnZFc1a1pXWnBibVZrS1Z4eVhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZXNXlaV0ZqYUdGaWJHVkRiMlJsS0NrN1hISmNiaUFnSUNCeVpYUjFjbTRnYzNSaGRHVTdYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JpSXNJbWx0Y0c5eWRDQjdJRXB2WWlCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzUjVjR1Z6TDJwdllpYzdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJEYjIxaVlYUmhiblJLYjJKVFpXRnlZMmdnZTF4eVhHNGdJSE4wWVhScFl5Qm5aWFJLYjJJb1lXSnBiR2wwZVVsa09pQnVkVzFpWlhJcE9pQktiMklnZkNCMWJtUmxabWx1WldRZ2UxeHlYRzRnSUNBZ1ptOXlJQ2hqYjI1emRDQmJhMlY1TENCMllXeDFaVjBnYjJZZ1QySnFaV04wTG1WdWRISnBaWE1vUTI5dFltRjBZVzUwU205aVUyVmhjbU5vTG1GaWFXeHBkR2xsY3lrcElIdGNjbHh1SUNBZ0lDQWdhV1lnS0haaGJIVmxQeTVwYm1Oc2RXUmxjeWhoWW1sc2FYUjVTV1FwS1Z4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCclpYa2dZWE1nYTJWNWIyWWdkSGx3Wlc5bUlFTnZiV0poZEdGdWRFcHZZbE5sWVhKamFDNWhZbWxzYVhScFpYTTdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnpkR0YwYVdNZ2NtVmhaRzl1YkhrZ1lXSnBiR2wwZVUxaGRHTm9VbVZuWlhnZ1BTQXZXMkV0WmtFdFJqQXRPVjE3TVN3MGZTOXBPMXh5WEc1Y2NseHVJQ0J6ZEdGMGFXTWdjbVZoWkc5dWJIa2dZV0pwYkdsMGFXVnpPaUI3SUZ0cWIySWdhVzRnU205aVhUODZJRzUxYldKbGNsdGRJSDBnUFNCN1hISmNiaUFnSUNCUVRFUTZJRnRjY2x4dUlDQWdJQ0FnTVRJNU5Ua3NJREV5T1RZeExDQXhNamsyTkN3Z01USTVOamNzSURFeU9UWTRMQ0F4TWprMk9Td2dNVEk1TnpBc0lERXlPVGN4TENBeE1qazNNaXdnTVRJNU56TXNJREV5T1RjMExDQXhNamszTlN4Y2NseHVJQ0FnSUNBZ01USTVOellzSURFeU9UYzRMQ0F4TWprNE1Dd2dNVEk1T0RFc0lERXlPVGd5TENBeE1qazRNeXdnTVRJNU9EUXNJREV5T1RnMUxDQXhNams0Tml3Z01USTVPRGNzSURFeU9UZzRMQ0F4TWprNE9TeGNjbHh1SUNBZ0lDQWdNVEk1T1RFc0lERXlPVGt5TENBeE1qazVNeXdnTVRJNU9UUXNJREV5T1RrMkxDQXhNekF3TUN3Z01UTXdNREVzSURFek1EQTJMQ0F4TkRRNE1Dd2dNVFkwTlRjc0lERTJORFU0TENBeE5qUTFPU3hjY2x4dUlDQWdJQ0FnTVRZME5qQXNJREUyTkRZeExDQXhOelkyT1N3Z01UYzJOekVzSURFM05qY3lMQ0F4TnpZNU1Td2dNVGMyT1RJc0lERTNOamt6TENBeE56WTVOQ3dnTVRjNE5qWXNJREU0TURVd0xDQXlOeXdnTWprc1hISmNiaUFnSUNBZ0lETXdMQ0F6TlRNNExDQXpOVE01TENBek5UUXdMQ0F6TlRReExDQXpOVFF5TENBME1qZzBMQ0EwTWpnMUxDQTBNamcyTENBMU1ESXdOeXdnTlRBeU1Ea3NJRFV3TWpRMkxDQTFNREkyTUN3Z05UQXlOakVzWEhKY2JpQWdJQ0FnSURVd01qWXlMQ0ExTURJMk15d2dOVEF5TmpRc0lEY3pPRElzSURjek9ETXNJRGN6T0RRc0lEY3pPRFVzSURnM05EWXNJRGczTkRrc0lEZzNOVEFzSURnM05URXNJRGczTlRJc0lEZzNOVFFzSURnM05UVXNYSEpjYmlBZ0lDQWdJRGczTlRZc1hISmNiaUFnSUNCZExGeHlYRzRnSUNBZ1YwRlNPaUJiWEhKY2JpQWdJQ0FnSURFMk5EWXlMQ0F4TmpRMk15d2dNVFkwTmpRc0lERTJORFkxTENBeE56WTVOU3dnTVRjMk9UWXNJREUzTmprM0xDQXhOelk1T0N3Z01UYzRPRGtzSURNMU5Ea3NJRE0xTlRBc0lETTFOVEVzSURNMU5USXNYSEpjYmlBZ0lDQWdJRFF5T0Rrc0lEUXlPVEFzSURReU9URXNJRFE1TENBMU1ERTFOeXdnTlRBeU1UZ3NJRFV3TWpRNUxDQTFNREkyTlN3Z05UQXlOallzSURVd01qWTNMQ0ExTURJMk9Dd2dOVEF5Tmprc0lEVXhMQ0ExTWl4Y2NseHVJQ0FnSUNBZ056TTROaXdnTnpNNE55d2dOek00T0N3Z056TTRPU3dnT0RjMU9Dd2dPRGMyTVN3Z09EYzJNaXdnT0RjMk15d2dPRGMyTkN3Z09EYzJOU3dnT0RjMk55d2dPRGMyT0N4Y2NseHVJQ0FnSUYwc1hISmNiaUFnSUNCRVVrczZJRnRjY2x4dUlDQWdJQ0FnTVRZME5qWXNJREUyTkRZM0xDQXhOalEyT0N3Z01UWTBOamtzSURFMk5EY3dMQ0F4TmpRM01Td2dNVFkwTnpJc0lERTNOekF3TENBeE56Y3dNU3dnTVRjM01ESXNJRE0yTVRjc0lETTJNakVzSURNMk1qTXNYSEpjYmlBZ0lDQWdJRE0yTWpRc0lETTJNalVzSURNMk1qa3NJRE0yTXpJc0lETTJNelFzSURNMk16WXNJRE0yTXpnc0lETTJNemtzSURNMk5EQXNJRE0yTkRFc0lETTJORE1zSURRek1ETXNJRFF6TURRc0lEUXpNRFVzSURRek1EWXNYSEpjYmlBZ0lDQWdJRFF6TURjc0lEUXpNRGdzSURRek1Ea3NJRFF6TVRBc0lEUXpNVEVzSURRek1USXNJRFEyT0RBc0lEVXdNVFU0TENBMU1ERTFPU3dnTlRBeU56RXNJRFV3TWpjeUxDQTFNRE14T1N3Z056TTVNQ3dnTnpNNU1TeGNjbHh1SUNBZ0lDQWdOek01TWl3Z056TTVNeXdnT0RjMk9Td2dPRGMzTWl3Z09EYzNNeXdnT0RjM05Td2dPRGMzTml3Z09EYzNOeXdnT0RjM09Dd2dPRGMzT1N4Y2NseHVJQ0FnSUYwc1hISmNiaUFnSUNCSFRrSTZJRnRjY2x4dUlDQWdJQ0FnTVRjM01ETXNJREUzTnpBMExDQXhOemN3TlN3Z01UYzNNRFlzSURFM056QTNMQ0F4Tnpjd09Dd2dNVGMzTURrc0lERTNOekV3TENBeE56Y3hNU3dnTVRjM01USXNJREUzTnpFekxDQXhOemN4TkN4Y2NseHVJQ0FnSUNBZ01UYzNNVFlzSURFM056RTNMQ0F4TnpnNU1Dd2dNVGM0T1RFc0lERTJNVE0zTENBMU1ETXlNQ3dnTVRZeE16Z3NJREUyTVRNNUxDQXhOakUwTUN3Z01UWXhOREVzSURFMk1UUXlMQ0F4TmpFME15eGNjbHh1SUNBZ0lDQWdNVFl4TkRRc0lERTJNVFExTENBeE5qRTJNaXdnTlRBeU5UY3NJREUyTVRRNExDQXhOakUwT1N3Z01UWXhOVEVzSURFMk1UVXlMQ0ExTURJMU9Dd2dNVFl4TlRNc0lERTJNVFUwTENBeE5qRTBOaXhjY2x4dUlDQWdJQ0FnTVRZeE5EY3NJREUyTVRVd0xDQXhOakUxT1N3Z01UWXhOakFzSURFMk1UWXhMQ0F4TmpFMU5Td2dNVFl4TlRZc0lERTJNVFUzTENBeE5qRTFPQ3dnTVRZeE5qTXNJREUyTVRZMExDQXhOakUyTlN4Y2NseHVJQ0FnSUNBZ05UQXlOVGtzWEhKY2JpQWdJQ0JkTEZ4eVhHNGdJQ0FnVjBoTk9pQmJYSEpjYmlBZ0lDQWdJREV5T1RVNExDQXhNamsyTWl3Z01USTVOalVzSURFeU9UazNMQ0F4TXpBd01pd2dNVE13TURNc0lERXpNREEwTENBeE16QXdOU3dnTVRNeExDQXhNellzSURFek55d2dNVE01TENBeE5EQXNJREUwTkRneExGeHlYRzRnSUNBZ0lDQXhOVGcwTENBeE5qVXpNU3dnTVRZMU16SXNJREUyTlRNekxDQXhOalV6TkN3Z01UWTFNelVzSURFMk5UTTJMQ0F4TnpZNE9Dd2dNVGMyT0Rrc0lERTNOamt3TENBeE56YzRPU3dnTVRjM09UQXNJREUzTnpreExGeHlYRzRnSUNBZ0lDQXhOemM1TXl3Z01UYzNPVFFzSURFM09ETXlMQ0F6TlRZNExDQXpOVFk1TENBek5UY3dMQ0F6TlRjeExDQTBNamsyTENBME1qazNMQ0ExTURFNE1Td2dOVEF4T0RJc0lEVXdNVGsyTENBMU1ETXdOeXhjY2x4dUlDQWdJQ0FnTlRBek1EZ3NJRFV3TXpBNUxDQTFNRE14TUN3Z056UXpNQ3dnTnpRek1Td2dOelF6TWl3Z056UXpNeXdnT0RnNU5Td2dPRGc1Tml3Z09Ea3dNQ3dnT1RZeU1Td2dNVEkzTENBeE16TXNYSEpjYmlBZ0lDQmRMRnh5WEc0Z0lDQWdVME5JT2lCYlhISmNiaUFnSUNBZ0lERTJOVE0zTENBeE5qVXpPQ3dnTVRZMU16a3NJREUyTlRRd0xDQXhOalUwTVN3Z01UWTFORElzSURFMk5UUXpMQ0F4TmpVME5Dd2dNVFkxTkRVc0lERTJOVFEyTENBeE5qVTBOeXdnTVRZMU5EZ3NJREUyTlRVd0xGeHlYRzRnSUNBZ0lDQXhOalUxTVN3Z01UWTJMQ0F4Tmpjc0lERTNNakUxTENBeE56SXhOaXdnTVRjM09UVXNJREUzTnprMkxDQXhOemM1Tnl3Z01UYzNPVGdzSURFM09EQXlMQ0F4TnpnMk5Dd2dNVGM0TmpVc0lERTNPRFk1TEZ4eVhHNGdJQ0FnSUNBeE56ZzNNQ3dnTVRjNU9UQXNJREU0TlN3Z01UZzJMQ0F4T0Rnc0lERTRPU3dnTVRrd0xDQXpOVGd6TENBek5UZzBMQ0F6TlRnMUxDQXpOVGcyTENBek5UZzNMQ0EwTXpBd0xDQTFNREU0TkN3Z05UQXlNVFFzWEhKY2JpQWdJQ0FnSURVd016RXhMQ0ExTURNeE1pd2dOVEF6TVRNc0lEVXdNekkwTENBM05ETTBMQ0EzTkRNMUxDQTNORE0yTENBM05ETTNMQ0EzTkRNNExDQTNPRFk1TENBNE1ESXNJRGd3TXl3Z09EQTFMQ0E0T1RBMExDQTRPVEExTEZ4eVhHNGdJQ0FnSUNBNE9UQTVMQ0E1TmpJeUxGeHlYRzRnSUNBZ1hTeGNjbHh1SUNBZ0lFRlRWRG9nVzF4eVhHNGdJQ0FnSUNBeE1EQXlOeXdnTVRBd01qZ3NJREV3TURJNUxDQXhOalUxTWl3Z01UWTFOVE1zSURFMk5UVTBMQ0F4TmpVMU5Td2dNVFkxTlRZc0lERTJOVFUzTENBeE5qVTFPQ3dnTVRZMU5Ua3NJREUzTURVMUxDQXhOekUxTVN4Y2NseHVJQ0FnSUNBZ01UY3hOVElzSURFM09EQTBMQ0F4Tnpnd05Td2dNVGM0TURZc0lERTNPREEzTENBeE56Z3dPU3dnTVRjNU9URXNJRE0xT1RBc0lETTFPVE1zSURNMU9UUXNJRE0xT1RVc0lETTFPVFlzSURNMU9UZ3NJRE0xT1Rrc1hISmNiaUFnSUNBZ0lETTJNREFzSURNMk1ERXNJRE0yTURNc0lETTJNRFFzSURNMk1EVXNJRE0yTURZc0lETTJNRGdzSURNMk1UQXNJRE0yTVRJc0lETTJNVE1zSURNMk1UUXNJRE0yTVRVc0lEUXpNREVzSURRek1ESXNJRFEwTURFc1hISmNiaUFnSUNBZ0lEUTBNRElzSURRME1ETXNJRFEwTURRc0lEUTBNRFVzSURRME1EWXNJRFEyTnpjc0lEUTJOemdzSURRMk56a3NJRFV3TVRJeUxDQTFNREV5TkN3Z05UQXhNalVzSURVd01UZzJMQ0ExTURFNE55d2dOVEF4T0Rnc1hISmNiaUFnSUNBZ0lEVXdNVGc1TENBMU1ETXhOQ3dnTlRBek1UVXNJRFV3TXpFMkxDQTNORE01TENBM05EUXdMQ0EzTkRReExDQTNORFF5TENBM05EUXpMQ0EzTkRRMExDQTNORFExTENBM05EUTRMQ0E0TXpJMExDQTRPVEV6TEZ4eVhHNGdJQ0FnSUNBNE9URTBMQ0E0T1RFMkxDQTVOakk1TEZ4eVhHNGdJQ0FnWFN4Y2NseHVJQ0FnSUUxT1N6b2dXMXh5WEc0Z0lDQWdJQ0F4TWprMk1Dd2dNVEk1TmpNc0lERXlPVFkyTENBeE1qazNOeXdnTVRJNU56a3NJREV5T1Rrd0xDQXhNams1TlN3Z01USTVPVGdzSURFeU9UazVMQ0F4TkRRM05pd2dNVFEwTnpnc0lERTJORGN6TENBeE5qUTNOQ3hjY2x4dUlDQWdJQ0FnTVRZME56VXNJREUyTkRjMkxDQXhOelkzTkN3Z01UYzJOelVzSURFM05qYzJMQ0F4TnpZM055d2dNVGMzTVRrc0lERTNOekl3TENBeE56Y3lNU3dnTVRjM01qSXNJREUzTnpJekxDQXhOemN5TkN3Z01UYzNNalVzWEhKY2JpQWdJQ0FnSURFM056STJMQ0F6TlRRekxDQXpOVFExTENBek5UUTJMQ0F6TlRRM0xDQTBNall5TENBME1qZzNMQ0EwTWpnNExDQTFNREUyTUN3Z05UQXhOakVzSURVd01qUTFMQ0ExTURJM015d2dOVEF5TnpRc0lEWXpMQ0EzTUN4Y2NseHVJQ0FnSUNBZ056RXNJRGN6T1RRc0lEY3pPVFVzSURjek9UWXNJRGMwTENBNE56Z3dMQ0E0TnpneExDQTROemd5TENBNE56Z3pMQ0E0TnpnMExDQTROemcxTENBNE56ZzNMQ0E0TnpnNUxDQTRPVEkxTEZ4eVhHNGdJQ0FnWFN4Y2NseHVJQ0FnSUVSU1J6b2dXMXh5WEc0Z0lDQWdJQ0F4TmpRM055d2dNVFkwTnpnc0lERTJORGM1TENBeE5qUTRNQ3dnTVRjM01qZ3NJREUzTnpJNUxDQXpOVFV6TENBek5UVTBMQ0F6TlRVMUxDQXpOVFUyTENBek5UVTNMQ0EwTWpreUxDQTBNamt6TENBMU1ERTJNaXhjY2x4dUlDQWdJQ0FnTlRBeE5qTXNJRFV3TWpRM0xDQTFNREkzTlN3Z05UQXlOellzSURjek9UY3NJRGN6T1Rnc0lEY3pPVGtzSURjME1EQXNJRGcyTENBNE56a3hMQ0E0TnpreUxDQTROemt6TENBNE56azBMQ0E0TnprMUxGeHlYRzRnSUNBZ0lDQTROemsyTENBNE56azNMQ0E0TnprNExDQTROems1TENBNE9EQXlMQ0E0T0RBekxDQTRPREEwTENBNE9EQTFMQ0E0T0RBMkxDQTVNaXdnT1RRc0lEazFMQ0E1Tml3Z09UWTBNQ3dnTnpVc0lEYzRMRnh5WEc0Z0lDQWdYU3hjY2x4dUlDQWdJRTVKVGpvZ1cxeHlYRzRnSUNBZ0lDQXhOalE0T0N3Z01UWTBPRGtzSURFMk5Ea3hMQ0F4TmpRNU1pd2dNVFkwT1RNc0lERTNOREV6TENBeE56UXhOQ3dnTVRjME1UVXNJREUzTkRFMkxDQXhOelF4Tnl3Z01UYzBNVGdzSURFM05ERTVMQ0F4TnpReU1DeGNjbHh1SUNBZ0lDQWdNVGMzTXpJc0lERTNOek16TENBeE56Y3pOQ3dnTVRjM016VXNJREUzTnpNMkxDQXhOemN6Tnl3Z01UYzNNemdzSURFM056TTVMQ0F5TWpRMkxDQXlNalU1TENBeU1qWXdMQ0F5TWpZeExDQXlNall5TEZ4eVhHNGdJQ0FnSUNBeU1qWXpMQ0F5TWpZMExDQXlNalkxTENBeU1qWTJMQ0F5TWpZM0xDQXlNalk0TENBeU1qWTVMQ0F5TWpjd0xDQXlNamN4TENBeU1qY3lMQ0F6TlRZekxDQXpOVFkyTENBME1qazFMQ0ExTURFMk5TeGNjbHh1SUNBZ0lDQWdOVEF4TmpZc0lEVXdNVFkzTENBMU1ESTFNQ3dnTlRBeU56a3NJRFV3TWpnd0xDQTNOREF4TENBM05EQXlMQ0EzTkRBekxDQTRPREEzTENBNE9EQTRMQ0E0T0RBNUxDQTRPREV3TENBNE9ERXlMQ0E0T0RFMExGeHlYRzRnSUNBZ0lDQTRPREUxTENBNE9ERTJMQ0E0T0RJd0xDQTVORFl4TEZ4eVhHNGdJQ0FnWFN4Y2NseHVJQ0FnSUZOQlRUb2dXMXh5WEc0Z0lDQWdJQ0F4TmpRNE1Td2dNVFkwT0RJc0lERTJORGd6TENBeE5qUTROQ3dnTVRZME9EVXNJREUyTkRnMkxDQXhOalE0Tnl3Z01UYzNOREFzSURFM056UXhMQ0F4TnpjME1pd2dNVGMzTkRNc0lERTNOelEwTENBMU1ESXdPQ3hjY2x4dUlDQWdJQ0FnTlRBeU1UVXNJRFV3TWpjM0xDQTFNREkzT0N3Z056UTNOeXdnTnpRM09Dd2dOelEzT1N3Z056UTRNQ3dnTnpRNE1Td2dOelE0TWl3Z056UTRNeXdnTnpRNE5Dd2dOelE0TlN3Z056UTROaXdnTnpRNE55eGNjbHh1SUNBZ0lDQWdOelE0T0N3Z056UTRPU3dnTnpRNU1Dd2dOelE1TVN3Z056UTVNaXdnTnpRNU15d2dOelE1TkN3Z056UTVOU3dnTnpRNU5pd2dOelE1Tnl3Z056UTVPQ3dnTnpRNU9Td2dOelV3TVN3Z056VXdNaXdnTnpnMU5TeGNjbHh1SUNBZ0lDQWdOemcxTnl3Z056ZzJOeXdnT0RneU1Td2dPRGd5TWl3Z09EZ3lNeXdnT0RneU5Dd2dPRGd5TlN3Z09EZ3lOaXdnT0RneU9Dd2dPRGd5T1N3Z09EZ3pNQ3dnT0Rnek1Td2dPRGd6TXl4Y2NseHVJQ0FnSUYwc1hISmNiaUFnSUNCQ1VrUTZJRnRjY2x4dUlDQWdJQ0FnTVRBd01qTXNJREV4TkN3Z01URTJMQ0F4TVRjc0lERXhPQ3dnTVRNd01EY3NJREUwTkRjNUxDQXhOalE1TkN3Z01UWTBPVFVzSURFMk5EazJMQ0F4TnpZM09Dd2dNVGMyTnprc0lERTNOamd3TENBeE56WTRNU3hjY2x4dUlDQWdJQ0FnTVRjMk9ESXNJREUzTnpRMUxDQXhOemMwTnl3Z016VTFPQ3dnTXpVMU9Td2dNelUyTUN3Z016VTJNU3dnTXpVMk1pd2dOREk1TkN3Z05UQXhOamdzSURVd01UWTVMQ0ExTURJNE1pd2dOVEF5T0RNc0lEVXdNamcwTEZ4eVhHNGdJQ0FnSUNBMU1ESTROU3dnTlRBeU9EWXNJRFV3TWpnM0xDQTNOREEwTENBM05EQTFMQ0EzTkRBMkxDQTNOREEzTENBM05EQTRMQ0EzTkRBNUxDQTRPRE0yTENBNE9ETTNMQ0E0T0RNNExDQTRPRE01TENBNE9EUXhMRnh5WEc0Z0lDQWdJQ0E0T0RReUxDQTRPRFF6TENBNE9EUTBMQ0E1TmpJMUxDQXhNRFlzWEhKY2JpQWdJQ0JkTEZ4eVhHNGdJQ0FnVFVOSU9pQmJYSEpjYmlBZ0lDQWdJREUyTkRrM0xDQXhOalE1T0N3Z01UWTBPVGtzSURFMk5UQXdMQ0F4TmpVd01Td2dNVFkxTURJc0lERTJOVEF6TENBeE5qVXdOQ3dnTVRZM05qWXNJREUyT0RnNUxDQXhOekl3Tml3Z01UY3lNRGtzSURFM056UTVMRnh5WEc0Z0lDQWdJQ0F4TnpjMU1Dd2dNVGMzTlRFc0lERTNOelV5TENBeE56YzFNeXdnTVRjM05UUXNJREk0TmpRc0lESTROallzSURJNE5qZ3NJREk0TnpBc0lESTROeklzSURJNE56TXNJREk0TnpRc0lESTROellzSURJNE56Z3NYSEpjYmlBZ0lDQWdJREk0T1RBc0lEUXlOellzSURRMk56VXNJRFEyTnpZc0lEVXdNVEUzTENBMU1ERXhPU3dnTlRBeU9EZ3NJRFV3TWpnNUxDQTFNREk1TUN3Z05UQXlPVEVzSURVd01qa3lMQ0ExTURJNU15d2dOVEF5T1RRc1hISmNiaUFnSUNBZ0lEYzBNVEFzSURjME1URXNJRGMwTVRJc0lEYzBNVE1zSURjME1UUXNJRGMwTVRVc0lEYzBNVFlzSURjME1UZ3NJRGc0TkRnc0lEZzRORGtzSURnNE5UQXNJRGc0TlRFc0lEZzROVE1zSURnNE5UVXNYSEpjYmlBZ0lDQmRMRnh5WEc0Z0lDQWdSRTVET2lCYlhISmNiaUFnSUNBZ0lERTNOelUyTENBeE56YzFOeXdnTVRjM05UZ3NJREUzTnpVNUxDQXhOemMyTUN3Z01UYzNOakVzSURFM056WXlMQ0F4TnpjMk15d2dNVGMzTmpRc0lERTNOelkxTENBeE56YzJOaXdnTVRjM05qY3NYSEpjYmlBZ0lDQWdJREUzTnpZNExDQXhOemMyT1N3Z01UYzNOekFzSURFM056Y3hMQ0F4TnpjM01pd2dNVGMzTnpNc0lERTNPREkwTENBeE56Z3lOU3dnTVRjNE1qWXNJREUzT0RJM0xDQXhOemd5T0N3Z01UYzRNamtzWEhKY2JpQWdJQ0FnSURFNE1EYzJMQ0F4TlRrNE9Td2dNVFU1T1RBc0lERTFPVGt6TENBeE5UazVOeXdnTVRVNU9Ua3NJREUyTURBd0xDQXhOakF3TVN3Z01UWXdNRElzSURFMk1EQXpMQ0F4TmpFNU1Td2dNVFl4T1RJc1hISmNiaUFnSUNBZ0lERTFPVGt4TENBeE5UazVOQ3dnTVRZd01EY3NJRFV3TWpVeUxDQXhOVGs1TlN3Z01UVTVPVElzSURFMU9UazJMQ0F4TmpBd09Dd2dNVFl3TVRBc0lEVXdNalV4TENBeE5qQXhOU3dnTVRZd01USXNYSEpjYmlBZ0lDQWdJREUyTURBMkxDQXhPREEzTXl3Z05UQXlOVE1zSURFMk1ERXhMQ0F4TmpBd09Td2dOVEF5TlRRc0lERTFPVGs0TENBeE5qQXdOQ3dnTVRZeE9UTXNJREUyTVRrMExDQXhOakU1TlN3Z01UWXhPVFlzWEhKY2JpQWdJQ0FnSURFMk1ERXpMQ0F4TmpBd05Td2dOVEF5TlRVc0lEVXdNalUyTENBeE5qQXhOQ3hjY2x4dUlDQWdJRjBzWEhKY2JpQWdJQ0JDVEUwNklGdGNjbHh1SUNBZ0lDQWdNVFEwTnpjc0lERTFNeXdnTVRVMExDQXhOVGdzSURFMU9Td2dNVFl5TENBeE5qVXdOU3dnTVRZMU1EWXNJREUyTlRBM0xDQXhOelk0TXl3Z01UYzJPRFFzSURFM05qZzFMQ0F4TnpZNE5pd2dNVGMyT0Rjc1hISmNiaUFnSUNBZ0lERTNOemMwTENBeE56YzNOU3dnTXpVM015d2dNelUzTkN3Z016VTNOU3dnTXpVM05pd2dNelUzTnl3Z05ESTVPQ3dnTlRBeE56RXNJRFV3TVRjeUxDQTFNREUzTXl3Z05UQXhOelFzSURVd01qazFMRnh5WEc0Z0lDQWdJQ0ExTURJNU5pd2dOVEF5T1Rjc0lEVXdNekl4TENBMU1ETXlNaXdnTnpReE9Td2dOelF5TUN3Z056UXlNU3dnTnpReU1pd2dPRGcxT0N3Z09EZzFPU3dnT0RnMk1Dd2dPRGcyTVN3Z09EZzJNaXdnT0RnMk15eGNjbHh1SUNBZ0lDQWdPRGcyTkN3Z09EZzJOU3dnT0RnMk5pd2dPRGcyTnl3Z09EZzJPU3dnT1RZek55d2dNVFE1TENBeE5UVXNJREUwTVN3Z01UVXlMRnh5WEc0Z0lDQWdYU3hjY2x4dUlDQWdJRk5OVGpvZ1cxeHlYRzRnSUNBZ0lDQXhOalV4TUN3Z01UWTFNVEVzSURFMk5URXpMQ0F4TmpVeE5Dd2dNVFkxTVRVc0lERTJOVEUyTENBeE5qVXhOeXdnTVRZMU1UZ3NJREUyTlRFNUxDQXhOalV5TWl3Z01UWTFNak1zSURFMk5UUTVMRnh5WEc0Z0lDQWdJQ0F4TmpjNU5Td2dNVFkzT1RZc0lERTJOemszTENBeE5qYzVPQ3dnTVRZM09Ua3NJREUyT0RBd0xDQXhOamd3TVN3Z01UWTRNRElzSURFMk9EQXpMQ0F4TnpjM055d2dNVGMzTnpnc0lERTNOemM1TEZ4eVhHNGdJQ0FnSUNBeE56YzRNQ3dnTVRjM09ERXNJREUzTnpneUxDQXhOemM0TXl3Z01UYzNPRFFzSURFM056ZzFMQ0F4T0RBc0lERTROQ3dnTXpVM09Dd2dNelUzT1N3Z016VTRNQ3dnTXpVNE1Td2dNelU0TWl3Z05ESTVPU3hjY2x4dUlDQWdJQ0FnTlRBeE56WXNJRFV3TVRjM0xDQTFNREUzT0N3Z05UQXlNVE1zSURVd01qRTNMQ0ExTURJNU9Dd2dOVEF5T1Rrc0lEVXdNekF3TENBMU1ETXdNU3dnTlRBek1ESXNJRGMwTWpNc0lEYzBNalFzSURjME1qVXNYSEpjYmlBZ0lDQWdJRGMwTWpZc0lEYzBNamNzSURjME1qZ3NJRGMwTWprc0lEYzBORGtzSURjME5UQXNJRGM0Tnl3Z056ZzRMQ0EzT1RFc0lEYzVNaXdnTnprMExDQTNPVFlzSURjNU55d2dOems0TENBNE1EQXNJRGd3TVN4Y2NseHVJQ0FnSUNBZ09EZzNNaXdnT0RnM015d2dPRGczTkN3Z09EZzNOeXdnT0RnM09Dd2dPRGczT1N3Z09EZzRNQ3dnT0RnNE1Td2dPVEF4TkN3Z09UUXpNaXhjY2x4dUlDQWdJRjBzWEhKY2JpQWdJQ0JTUkUwNklGdGNjbHh1SUNBZ0lDQWdNVEF3TWpVc0lERTJOVEkwTENBeE5qVXlOU3dnTVRZMU1qWXNJREUyTlRJM0xDQXhOalV5T0N3Z01UWTFNamtzSURFMk5UTXdMQ0F4TnpjNE5pd2dNVGMzT0Rjc0lERTNOemc0TENBMU1ERTVOU3hjY2x4dUlDQWdJQ0FnTlRBeU1EQXNJRFV3TWpBeExDQTFNREl4Tml3Z05UQXpNRE1zSURVd016QTBMQ0ExTURNd05Td2dOVEF6TURZc0lEYzFNRE1zSURjMU1EUXNJRGMxTURVc0lEYzFNRFlzSURjMU1EY3NJRGMxTURrc1hISmNiaUFnSUNBZ0lEYzFNVEFzSURjMU1URXNJRGMxTVRJc0lEYzFNVE1zSURjMU1UUXNJRGMxTVRVc0lEYzFNVFlzSURjMU1UY3NJRGMxTVRnc0lEYzFNVGtzSURjMU1qQXNJRGMxTWpFc0lEYzFNak1zSURjMU1qUXNYSEpjYmlBZ0lDQWdJRGMxTWpVc0lEYzFNallzSURjMU1qY3NJRGMxTWpnc0lEYzFNamtzSURjMU16QXNJRGc0T0RJc0lEZzRPRE1zSURnNE9EUXNJRGc0T0RVc0lEZzRPRGNzSURnNE9EZ3NJRGc0T0Rrc0lEZzRPVEFzWEhKY2JpQWdJQ0FnSURnNE9URXNJRGc0T1RJc0lEazBNek1zSURrME16UXNYSEpjYmlBZ0lDQmRMRnh5WEc0Z0lDQWdRa3hWT2lCYlhISmNiaUFnSUNBZ0lERXhOekUxTENBeE1UTTRNeXdnTVRFek9EUXNJREV4TXpnMUxDQXhNVE00Tml3Z01URXpPRGNzSURFeE16ZzRMQ0F4TVRNNE9Td2dNVEV6T1RBc0lERXhNemt4TENBeE1UTTVNaXdnTVRFek9UTXNYSEpjYmlBZ0lDQWdJREV4TXprMExDQXhNVE01TlN3Z01URXpPVFlzSURFeE16azNMQ0F4TVRNNU9Dd2dNVEV6T1Rrc0lERXhOREF3TENBeE1UUXdNU3dnTVRFME1ESXNJREV4TkRBekxDQXhNVFF3TkN3Z01URTBNRFVzWEhKY2JpQWdJQ0FnSURFeE5EQTJMQ0F4TVRRd055d2dNVEUwTURnc0lERXhOREE1TENBeE1UUXhNQ3dnTVRFME1URXNJREV4TkRFeUxDQXhNVFF4TXl3Z01URTBNVFFzSURFeE5ERTFMQ0F4TVRReE5pd2dNVEUwTVRjc1hISmNiaUFnSUNBZ0lERXhOREU0TENBeE1UUXhPU3dnTVRFME1qQXNJREV4TkRJeExDQXhNVFF5TWl3Z01URTBNak1zSURFeE5ESTBMQ0F4TVRReU5Td2dNVEUwTWpZc0lERXhOREkzTENBeE1UUXlPQ3dnTVRFME1qa3NYSEpjYmlBZ0lDQWdJREV4TkRNd0xDQXhNVFF6TVN3Z05UQXlNVGtzSURVd01qSXdMQ0ExTURJeU1Td2dOVEF5TWpJc0lEVXdNakl6TENBMU1ESXlOQ3hjY2x4dUlDQWdJRjBzWEhKY2JpQWdmVHRjY2x4dWZWeHlYRzRpTENJdkx5Qk5aVzFpWlhJZ2JtRnRaWE1nZEdGclpXNGdabkp2YlNCUGRtVnliR0Y1VUd4MVoybHVKM01nVFdsdWFWQmhjbk5sTG1OelhISmNiaTh2SUZSNWNHVnpJSFJoYTJWdUlHWnliMjBnUmtaWVNWWWdjR0Z5YzJWeUlIQnNkV2RwYmx4eVhHNWxlSEJ2Y25RZ2FXNTBaWEptWVdObElGQnNkV2RwYmxOMFlYUmxJSHRjY2x4dUlDQkRkWEp5Wlc1MFYyOXliR1JKUkQ4NklHNTFiV0psY2p0Y2NseHVJQ0JYYjNKc1pFbEVQem9nYm5WdFltVnlPMXh5WEc0Z0lGZHZjbXhrVG1GdFpUODZJSE4wY21sdVp6dGNjbHh1SUNCQ1RuQmpTVVEvT2lCdWRXMWlaWEk3WEhKY2JpQWdRazV3WTA1aGJXVkpSRDg2SUc1MWJXSmxjanRjY2x4dUlDQlFZWEowZVZSNWNHVS9PaUJ1ZFcxaVpYSTdYSEpjYmlBZ1NVUS9PaUJ1ZFcxaVpYSTdYSEpjYmlBZ1QzZHVaWEpKUkQ4NklHNTFiV0psY2p0Y2NseHVJQ0IwZVhCbFB6b2diblZ0WW1WeU8xeHlYRzRnSUVwdllqODZJRzUxYldKbGNqdGNjbHh1SUNCTVpYWmxiRDg2SUc1MWJXSmxjanRjY2x4dUlDQk9ZVzFsUHpvZ2MzUnlhVzVuTzF4eVhHNGdJRU4xY25KbGJuUklVRG9nYm5WdFltVnlPMXh5WEc0Z0lFMWhlRWhRT2lCdWRXMWlaWEk3WEhKY2JpQWdRM1Z5Y21WdWRFMVFPaUJ1ZFcxaVpYSTdYSEpjYmlBZ1RXRjRUVkE2SUc1MWJXSmxjanRjY2x4dUlDQlFiM05ZT2lCdWRXMWlaWEk3WEhKY2JpQWdVRzl6V1RvZ2JuVnRZbVZ5TzF4eVhHNGdJRkJ2YzFvNklHNTFiV0psY2p0Y2NseHVJQ0JJWldGa2FXNW5PaUJ1ZFcxaVpYSTdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFTnZiV0poZEdGdWRGTjBZWFJsSUh0Y2NseHVJQ0J3YjNOWU9pQnVkVzFpWlhJN1hISmNiaUFnY0c5eldUb2diblZ0WW1WeU8xeHlYRzRnSUhCdmMxbzZJRzUxYldKbGNqdGNjbHh1SUNCb1pXRmthVzVuT2lCdWRXMWlaWEk3WEhKY2JpQWdkR0Z5WjJWMFlXSnNaVG9nWW05dmJHVmhianRjY2x4dUlDQm9jRG9nYm5WdFltVnlPMXh5WEc0Z0lHMWhlRWh3T2lCdWRXMWlaWEk3WEhKY2JpQWdiWEE2SUc1MWJXSmxjanRjY2x4dUlDQnRZWGhOY0RvZ2JuVnRZbVZ5TzF4eVhHNWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaHdiM05ZT2lCdWRXMWlaWElzSUhCdmMxazZJRzUxYldKbGNpd2djRzl6V2pvZ2JuVnRZbVZ5TENCb1pXRmthVzVuT2lCdWRXMWlaWElzWEhKY2JpQWdJQ0FnSUhSaGNtZGxkR0ZpYkdVNklHSnZiMnhsWVc0c1hISmNiaUFnSUNBZ0lHaHdPaUJ1ZFcxaVpYSXNJRzFoZUVod09pQnVkVzFpWlhJc0lHMXdPaUJ1ZFcxaVpYSXNJRzFoZUUxd09pQnVkVzFpWlhJcElIdGNjbHh1SUNBZ0lIUm9hWE11Y0c5eldDQTlJSEJ2YzFnN1hISmNiaUFnSUNCMGFHbHpMbkJ2YzFrZ1BTQndiM05aTzF4eVhHNGdJQ0FnZEdocGN5NXdiM05hSUQwZ2NHOXpXanRjY2x4dUlDQWdJSFJvYVhNdWFHVmhaR2x1WnlBOUlHaGxZV1JwYm1jN1hISmNiaUFnSUNCMGFHbHpMblJoY21kbGRHRmliR1VnUFNCMFlYSm5aWFJoWW14bE8xeHlYRzRnSUNBZ2RHaHBjeTVvY0NBOUlHaHdPMXh5WEc0Z0lDQWdkR2hwY3k1dFlYaEljQ0E5SUcxaGVFaHdPMXh5WEc0Z0lDQWdkR2hwY3k1dGNDQTlJRzF3TzF4eVhHNGdJQ0FnZEdocGN5NXRZWGhOY0NBOUlHMWhlRTF3TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnY0dGeWRHbGhiRU5zYjI1bEtIQnliM0J6T2lCUVlYSjBhV0ZzUEVOdmJXSmhkR0Z1ZEZOMFlYUmxQaWs2SUVOdmJXSmhkR0Z1ZEZOMFlYUmxJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnUTI5dFltRjBZVzUwVTNSaGRHVW9YSEpjYmlBZ0lDQWdJQ0FnY0hKdmNITXVjRzl6V0NBL1B5QjBhR2x6TG5CdmMxZ3NYSEpjYmlBZ0lDQWdJQ0FnY0hKdmNITXVjRzl6V1NBL1B5QjBhR2x6TG5CdmMxa3NYSEpjYmlBZ0lDQWdJQ0FnY0hKdmNITXVjRzl6V2lBL1B5QjBhR2x6TG5CdmMxb3NYSEpjYmlBZ0lDQWdJQ0FnY0hKdmNITXVhR1ZoWkdsdVp5QS9QeUIwYUdsekxtaGxZV1JwYm1jc1hISmNiaUFnSUNBZ0lDQWdjSEp2Y0hNdWRHRnlaMlYwWVdKc1pTQS9QeUIwYUdsekxuUmhjbWRsZEdGaWJHVXNYSEpjYmlBZ0lDQWdJQ0FnY0hKdmNITXVhSEFnUHo4Z2RHaHBjeTVvY0N4Y2NseHVJQ0FnSUNBZ0lDQndjbTl3Y3k1dFlYaEljQ0EvUHlCMGFHbHpMbTFoZUVod0xGeHlYRzRnSUNBZ0lDQWdJSEJ5YjNCekxtMXdJRDgvSUhSb2FYTXViWEFzWEhKY2JpQWdJQ0FnSUNBZ2NISnZjSE11YldGNFRYQWdQejhnZEdocGN5NXRZWGhOY0NrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCMGIxQnNkV2RwYmxOMFlYUmxLQ2s2SUZCc2RXZHBibE4wWVhSbElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCN1hISmNiaUFnSUNBZ0lGQnZjMWc2SUhSb2FYTXVjRzl6V0N4Y2NseHVJQ0FnSUNBZ1VHOXpXVG9nZEdocGN5NXdiM05aTEZ4eVhHNGdJQ0FnSUNCUWIzTmFPaUIwYUdsekxuQnZjMW9zWEhKY2JpQWdJQ0FnSUVobFlXUnBibWM2SUhSb2FYTXVhR1ZoWkdsdVp5eGNjbHh1SUNBZ0lDQWdRM1Z5Y21WdWRFaFFPaUIwYUdsekxtaHdMRnh5WEc0Z0lDQWdJQ0JOWVhoSVVEb2dkR2hwY3k1dFlYaEljQ3hjY2x4dUlDQWdJQ0FnUTNWeWNtVnVkRTFRT2lCMGFHbHpMbTF3TEZ4eVhHNGdJQ0FnSUNCTllYaE5VRG9nZEdocGN5NXRZWGhOY0N4Y2NseHVJQ0FnSUgwN1hISmNiaUFnZlZ4eVhHNTlYSEpjYmlJc0lpOHZJRUYxZEc4dFoyVnVaWEpoZEdWa0lHWnliMjBnWjJWdVgzQmxkRjl1WVcxbGN5NXdlVnh5WEc0dkx5QkVUeUJPVDFRZ1JVUkpWQ0JVU0VsVElFWkpURVVnUkVsU1JVTlVURmxjY2x4dVhISmNibWx0Y0c5eWRDQjdJRXhoYm1jZ2ZTQm1jbTl0SUNjdUwyeGhibWQxWVdkbGN5YzdYSEpjYmx4eVhHNTBlWEJsSUZCbGRFUmhkR0VnUFNCN1hISmNiaUFnVzI1aGJXVWdhVzRnVEdGdVoxMDZJSEpsWVdSdmJteDVJSE4wY21sdVoxdGRPMXh5WEc1OU8xeHlYRzVjY2x4dVkyOXVjM1FnWkdGMFlUb2dVR1YwUkdGMFlTQTlJSHRjY2x4dUlDQW5ZMjRuT2lCYlhISmNiaUFnSUNBbjU3dS81YTZkNTUrejVZVzlKeXhjY2x4dUlDQWdJQ2ZwdTRUbHJwM25uN1BsaGIwbkxGeHlYRzRnSUNBZ0orUzhpdVc4bCtXSXFlZUp1ZVM1aStlQnRTY3NYSEpjYmlBZ0lDQW41ck93NVoybTVMbUw1NEcxSnl4Y2NseHVJQ0FnSUNmb3Y2Ym1wYnpudlpma3VZdm5nYlVuTEZ4eVhHNGdJQ0FnSithY25lYVhwZVd3aitTN21lV2xzeWNzWEhKY2JpQWdJQ0FuNWFTVjVweUk1YkNQNUx1WjVhV3pKeXhjY2x4dUlDQWdJQ2ZvdmFibHZJL210YTducWJybmdxN2xvWlFuTEZ4eVhHNGdJQ0FnSitpeG9lVzhqK2ExcnVlcHV1ZUNydVdobENjc1hISmNiaUFnSUNBbjVMcWE1NEcxNTZXZTViZTA1Wk9JNWFlRzU0bTVKeXhjY2x4dUlDQWdJQ2ZrdXBybmdiWG5wWjdrdUkzbXJidnB1SjhuTEZ4eVhHNGdJQ0FnSitlQ3ZlV2txZVM5dnljc1hISmNiaUFnSUNBbjVweUk2WlcvNWE2ZDU1K3o1WVc5Snl4Y2NseHVJQ0FnSUNmb2k3SHBtNFRubW9UbWpxRGx2YkVuTEZ4eVhHNGdJQ0FnSitXUWp1VzhqK2lIcXVpMXNPUzZ1dVdCdGljc1hISmNiaUFnSUNBbjVZaUc2THFySnl4Y2NseHVJQ0JkTEZ4eVhHNGdJQ2RrWlNjNklGdGNjbHh1SUNBZ0lDZFRiV0Z5WVdka0xVdGhjbVoxYm10bGJDY3NYSEpjYmlBZ0lDQW5WRzl3WVhNdFMyRnlablZ1YTJWc0p5eGNjbHh1SUNBZ0lDZEpabkpwZEMxRloya25MRnh5WEc0Z0lDQWdKMVJwZEdGdUxVVm5hU2NzWEhKY2JpQWdJQ0FuUjJGeWRXUmhMVVZuYVNjc1hISmNiaUFnSUNBblJXOXpKeXhjY2x4dUlDQWdJQ2RUWld4bGJtVW5MRnh5WEc0Z0lDQWdKMU5sYkdKemRITmphSFZ6Y3kxSGVYSnZZMjl3ZEdWeUlGUlZVazBuTEZ4eVhHNGdJQ0FnSjFObGJHSnpkSE5qYUhWemN5MUhlWEp2WTI5d2RHVnlJRXpEaEZWR1JWSW5MRnh5WEc0Z0lDQWdKMFJsYldrdFFtRm9ZVzExZENjc1hISmNiaUFnSUNBblJHVnRhUzFRYU1PMmJtbDRKeXhjY2x4dUlDQWdJQ2RUWlhKaGNHZ25MRnh5WEc0Z0lDQWdKMDF2Ym1SemRHVnBiaTFMWVhKbWRXNXJaV3duTEZ4eVhHNGdJQ0FnSjFOamFHRjBkR1Z1YzJOb1pXMWxiaWNzWEhKY2JpQWdJQ0FuUVhWMGIyMWhkRzl1SUVSQlRVVW5MRnh5WEc0Z0lDQWdKMGRsWkc5d2NHVnNkR1Z6SUVsamFDY3NYSEpjYmlBZ1hTeGNjbHh1SUNBblpXNG5PaUJiWEhKY2JpQWdJQ0FuUlcxbGNtRnNaQ0JEWVhKaWRXNWpiR1VuTEZ4eVhHNGdJQ0FnSjFSdmNHRjZJRU5oY21KMWJtTnNaU2NzWEhKY2JpQWdJQ0FuU1daeWFYUXRSV2RwSnl4Y2NseHVJQ0FnSUNkVWFYUmhiaTFGWjJrbkxGeHlYRzRnSUNBZ0owZGhjblZrWVMxRloya25MRnh5WEc0Z0lDQWdKMFZ2Y3ljc1hISmNiaUFnSUNBblUyVnNaVzVsSnl4Y2NseHVJQ0FnSUNkU2IyOXJJRUYxZEc5MGRYSnlaWFFuTEZ4eVhHNGdJQ0FnSjBKcGMyaHZjQ0JCZFhSdmRIVnljbVYwSnl4Y2NseHVJQ0FnSUNkRVpXMXBMVUpoYUdGdGRYUW5MRnh5WEc0Z0lDQWdKMFJsYldrdFVHaHZaVzVwZUNjc1hISmNiaUFnSUNBblUyVnlZWEJvSnl4Y2NseHVJQ0FnSUNkTmIyOXVjM1J2Ym1VZ1EyRnlZblZ1WTJ4bEp5eGNjbHh1SUNBZ0lDZEZjM1JsWlcwbkxGeHlYRzRnSUNBZ0owRjFkRzl0WVhSdmJpQlJkV1ZsYmljc1hISmNiaUFnSUNBblFuVnVjMmhwYmljc1hISmNiaUFnWFN4Y2NseHVJQ0FuWm5Jbk9pQmJYSEpjYmlBZ0lDQW5RMkZ5WW5WdVkyeGxJTU9wYldWeVlYVmtaU2NzWEhKY2JpQWdJQ0FuUTJGeVluVnVZMnhsSUhSdmNHRjZaU2NzWEhKY2JpQWdJQ0FuU1daeWFYUXRSV2RwSnl4Y2NseHVJQ0FnSUNkVWFYUmhiaTFGWjJrbkxGeHlYRzRnSUNBZ0owZGhjblZrWVMxRloya25MRnh5WEc0Z0lDQWdKMFZ2Y3ljc1hISmNiaUFnSUNBblUyVnNaVzVsSnl4Y2NseHVJQ0FnSUNkQmRYUnZMWFJ2ZFhKbGJHeGxJRlJ2ZFhJbkxGeHlYRzRnSUNBZ0owRjFkRzh0ZEc5MWNtVnNiR1VnUm05MUp5eGNjbHh1SUNBZ0lDZEVaVzFwTFVKaGFHRnRkWFFuTEZ4eVhHNGdJQ0FnSjBSbGJXa3RVR2pEcVc1cGVDY3NYSEpjYmlBZ0lDQW5VOE9wY21Gd2FHbHVKeXhjY2x4dUlDQWdJQ2REWVhKaWRXNWpiR1VnYU1PcFkyRjBiMnhwZEdVbkxGeHlYRzRnSUNBZ0owVnpkR2x0WlNjc1hISmNiaUFnSUNBblFYVjBiMjFoZEdVZ1VtVnBibVVuTEZ4eVhHNGdJQ0FnSjA5dFluSmxKeXhjY2x4dUlDQmRMRnh5WEc0Z0lDZHFZU2M2SUZ0Y2NseHVJQ0FnSUNmamdxdmpnN3pqZzVEamc3UGpncS9qZzZ2amc3dmpncWpqZzZIamc2bmpnNnZqZzRrbkxGeHlYRzRnSUNBZ0orT0NxK09Edk9PRGtPT0RzK09DcitPRHErT0R1K09EaU9PRGtlT0R2T09DdWljc1hISmNiaUFnSUNBbjQ0S2s0NE9WNDRPcTQ0Tzg0NE9JNDRPNzQ0S280NEt1Snl4Y2NseHVJQ0FnSUNmamdyL2pncVRqZ3Ivamc3UGpnN3ZqZ3FqamdxNG5MRnh5WEc0Z0lDQWdKK09Dck9PRHErT0R2T09EZ09PRHUrT0NxT09Dcmljc1hISmNiaUFnSUNBbjQ0T1Y0NEtuNDRLaTQ0T3E0NE84NDRPNzQ0S280NEtxNDRLNUp5eGNjbHh1SUNBZ0lDZmpnNVhqZ3FmamdxTGpnNnJqZzd6amc3dmpncnZqZzZ6amc0MG5MRnh5WEc0Z0lDQWdKK09DcXVPRHZPT0RpT09DditPRHJPT0RnK09EaU9PRHUrT0RxK09Edk9PQ3J5Y3NYSEpjYmlBZ0lDQW40NEtxNDRPODQ0T0k0NEsvNDRPczQ0T0Q0NE9JNDRPNzQ0T1Q0NEszNDRPbjQ0T0Q0NE9YSnl4Y2NseHVJQ0FnSUNmamc0ZmpnNS9qZzd2amc1RGpnNC9qZzZEamc3empnNGduTEZ4eVhHNGdJQ0FnSitPRGgrT0RuK09EdStPRGxlT0NwK09EaStPRGcrT0NyK09DdVNjc1hISmNiaUFnSUNBbjQ0Szc0NE9wNDRPVjQ0S2o0NE9nSnl4Y2NseHVJQ0FnSUNmamdxdmpnN3pqZzVEamc3UGpncS9qZzZ2amc3dmpnNkRqZzd6amc3UGpncm5qZzRqamc3empnN01uTEZ4eVhHNGdJQ0FnSitpTHNlbWJoT09CcnVXOXNlaTZxeWNzWEhKY2JpQWdJQ0FuNDRLcTQ0Tzg0NE9JNDRPZTQ0T0k0NE96NDRPNzQ0S3Y0NEtrNDRPODQ0T3pKeXhjY2x4dUlDQWdJQ2ZsaUlib3Vxc25MRnh5WEc0Z0lGMHNYSEpjYmlBZ0oydHZKem9nVzF4eVhHNGdJQ0FnSit5NXRPdXltZTJCdENEc2w1RHJxWlRybm9Ucms1d25MRnh5WEc0Z0lDQWdKK3k1dE91eW1lMkJ0Q0R0aHFEdGpJenNwb2duTEZ4eVhHNGdJQ0FnSit5ZHRPMlVoT3Vtck8yS3VDRHNsNURxdUxBbkxGeHlYRzRnSUNBZ0orMkRnT3lkdE8yRGhDRHNsNURxdUxBbkxGeHlYRzRnSUNBZ0orcXdnT3VqcU91THBDRHNsNURxdUxBbkxGeHlYRzRnSUNBZ0oreWFsT3lnbFNEc2w1RHNtS1RzaXFRbkxGeHlYRzRnSUNBZ0oreWFsT3lnbFNEc2hZRHJvSWpyaEtRbkxGeHlYRzRnSUNBZ0oreWVrT3VQbWUyUHJPMkRrU0RybzZrbkxGeHlYRzRnSUNBZ0oreWVrT3VQbWUyUHJPMkRrU0RydVlUc2lJMG5MRnh5WEc0Z0lDQWdKK3VOc091dnVPdXdsTzJWbU91c3RPMkt1Q2NzWEhKY2JpQWdJQ0FuNjQydzY2KzQ3WlM4NjR1SjdJcWtKeXhjY2x4dUlDQWdJQ2ZzaExqcm5ienRsWXduTEZ4eVhHNGdJQ0FnSit5NXRPdXltZTJCdENEcnJManNpcVR0aHFRbkxGeHlYRzRnSUNBZ0oreVlnZXliaGV5ZG1DRHRtWmpzbUlFbkxGeHlYRzRnSUNBZ0oreWVrT3VQbWV5ZHVPMllsU0R0Z0xnbkxGeHlYRzRnSUNBZ0ordTJoT3lMb0Njc1hISmNiaUFnWFN4Y2NseHVmVHRjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElHUmhkR0U3WEhKY2JpSXNJbWx0Y0c5eWRDQjdJRXB2WWlCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUx5NHVMM1I1Y0dWekwycHZZaWM3WEhKY2JtbHRjRzl5ZENCRmJYVnNZWFJ2Y2tOdmJXMXZiaUJtY205dElDY3VMaTh1TGk5RmJYVnNZWFJ2Y2tOdmJXMXZiaWM3WEhKY2JtbHRjRzl5ZENCTWIyZFNaWEJ2YzJsMGIzSjVJR1p5YjIwZ0p5NHZURzluVW1Wd2IzTnBkRzl5ZVNjN1hISmNibHh5WEc1amIyNXpkQ0JtYVdWc1pITWdQU0I3WEhKY2JpQWdaWFpsYm5RNklEQXNYSEpjYmlBZ2RHbHRaWE4wWVcxd09pQXhMRnh5WEc1OUlHRnpJR052Ym5OME8xeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFZGxibVZ5YVdNZ1kyeGhjM01nZEc4Z2RISmhZMnNnWVc0Z1JrWllTVllnYkc5bklHeHBibVZjY2x4dUlDb3ZYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFeHBibVZGZG1WdWRDQjdYSEpjYmlBZ2NIVmliR2xqSUc5bVpuTmxkQ0E5SURBN1hISmNiaUFnY0hWaWJHbGpJR052Ym5abGNuUmxaRXhwYm1VNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdhVzUyWVd4cFpDQTlJR1poYkhObE8xeHlYRzRnSUhCMVlteHBZeUJwYm1SbGVDQTlJREE3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHUmxZMFYyWlc1ME9pQnVkVzFpWlhJN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR2hsZUVWMlpXNTBPaUJ6ZEhKcGJtYzdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhScGJXVnpkR0Z0Y0RvZ2JuVnRZbVZ5TzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQmphR1ZqYTNOMWJUb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J3Y205d1pYSkRZWE5sUTI5dWRtVnlkR1ZrVEdsdVpUODZJSE4wY21sdVp6dGNjbHh1WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvY21Wd2J6b2dURzluVW1Wd2IzTnBkRzl5ZVN3Z2NIVmliR2xqSUc1bGRIZHZjbXRNYVc1bE9pQnpkSEpwYm1jc0lIQmhjblJ6T2lCemRISnBibWRiWFNrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVrWldORmRtVnVkQ0E5SUhCaGNuTmxTVzUwS0hCaGNuUnpXMlpwWld4a2N5NWxkbVZ1ZEYwZ1B6OGdKekFuS1R0Y2NseHVJQ0FnSUhSb2FYTXVhR1Y0UlhabGJuUWdQU0JGYlhWc1lYUnZja052YlcxdmJpNTZaWEp2VUdGa0tIUm9hWE11WkdWalJYWmxiblF1ZEc5VGRISnBibWNvTVRZcExuUnZWWEJ3WlhKRFlYTmxLQ2twTzF4eVhHNGdJQ0FnZEdocGN5NTBhVzFsYzNSaGJYQWdQU0J1WlhjZ1JHRjBaU2h3WVhKMGMxdG1hV1ZzWkhNdWRHbHRaWE4wWVcxd1hTQS9QeUFuTUNjcExtZGxkRlJwYldVb0tUdGNjbHh1SUNBZ0lIUm9hWE11WTJobFkydHpkVzBnUFNCd1lYSjBjeTV6YkdsalpTZ3RNU2xiTUYwZ1B6OGdKeWM3WEhKY2JpQWdJQ0J5WlhCdkxuVndaR0YwWlZScGJXVnpkR0Z0Y0NoMGFHbHpMblJwYldWemRHRnRjQ2s3WEhKY2JpQWdJQ0IwYUdsekxtTnZiblpsY25SbFpFeHBibVVnUFNCMGFHbHpMbkJ5WldacGVDZ3BJQ3NnS0hCaGNuUnpMbXB2YVc0b0p6b25LU2t1Y21Wd2JHRmpaU2duZkNjc0lDYzZKeWs3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J3Y21WbWFYZ29LVG9nYzNSeWFXNW5JSHRjY2x4dUlDQWdJSEpsZEhWeWJpQW5XeWNnS3lCRmJYVnNZWFJ2Y2tOdmJXMXZiaTUwYVcxbFZHOVVhVzFsVTNSeWFXNW5LSFJvYVhNdWRHbHRaWE4wWVcxd0xDQjBjblZsS1NBcklDZGRJQ2NnS3lCMGFHbHpMbWhsZUVWMlpXNTBJQ3NnSnpvbk8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2MzUmhkR2xqSUdselJHRnRZV2RsU0dGc2JHOTNaV1FvWkdGdFlXZGxPaUJ6ZEhKcGJtY3BPaUJpYjI5c1pXRnVJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQW9jR0Z5YzJWSmJuUW9aR0Z0WVdkbExDQXhOaWtnSmlCd1lYSnpaVWx1ZENnbk1UQXdNQ2NzSURFMktTa2dQaUF3TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnYzNSaGRHbGpJR2x6UkdGdFlXZGxRbWxuS0dSaGJXRm5aVG9nYzNSeWFXNW5LVG9nWW05dmJHVmhiaUI3WEhKY2JpQWdJQ0J5WlhSMWNtNGdLSEJoY25ObFNXNTBLR1JoYldGblpTd2dNVFlwSUNZZ2NHRnljMlZKYm5Rb0p6UXdNREFuTENBeE5pa3BJRDRnTUR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhOMFlYUnBZeUJqWVd4amRXeGhkR1ZFWVcxaFoyVW9aR0Z0WVdkbE9pQnpkSEpwYm1jcE9pQnVkVzFpWlhJZ2UxeHlYRzRnSUNBZ2FXWWdLRXhwYm1WRmRtVnVkQzVwYzBSaGJXRm5aVWhoYkd4dmQyVmtLR1JoYldGblpTa3BYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQXdPMXh5WEc1Y2NseHVJQ0FnSUdSaGJXRm5aU0E5SUVWdGRXeGhkRzl5UTI5dGJXOXVMbnBsY205UVlXUW9aR0Z0WVdkbExDQTRLVHRjY2x4dUlDQWdJR052Ym5OMElIQmhjblJ6SUQwZ1cxeHlYRzRnSUNBZ0lDQmtZVzFoWjJVdWMzVmljM1J5S0RBc0lESXBMRnh5WEc0Z0lDQWdJQ0JrWVcxaFoyVXVjM1ZpYzNSeUtESXNJRElwTEZ4eVhHNGdJQ0FnSUNCa1lXMWhaMlV1YzNWaWMzUnlLRFFzSURJcExGeHlYRzRnSUNBZ0lDQmtZVzFoWjJVdWMzVmljM1J5S0RZc0lESXBMRnh5WEc0Z0lDQWdYU0JoY3lCamIyNXpkRHRjY2x4dVhISmNiaUFnSUNCcFppQW9JVXhwYm1WRmRtVnVkQzVwYzBSaGJXRm5aVUpwWnloa1lXMWhaMlVwS1Z4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnY0dGeWMyVkpiblFvY0dGeWRITXVjMnhwWTJVb01Dd2dNaWt1Y21WMlpYSnpaU2dwTG1wdmFXNG9KeWNwTENBeE5pazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSEJoY25ObFNXNTBLRnh5WEc0Z0lDQWdJQ0FnSUNod1lYSjBjMXN6WFNBcklIQmhjblJ6V3pCZEtTQXJYSEpjYmlBZ0lDQWdJQ2h3WVhKelpVbHVkQ2h3WVhKMGMxc3hYU3dnTVRZcElDMGdjR0Z5YzJWSmJuUW9jR0Z5ZEhOYk0xMHNJREUyS1Z4eVhHNGdJQ0FnSUNBcExuUnZVM1J5YVc1bktERTJLU3dnTVRZcE8xeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVMeThnVkhsd1pTQm5kV0Z5WkhNZ1ptOXlJSFJvWlhObElHbHVkR1Z5Wm1GalpYTWdjbVZ4ZFdseVpTQjBhR1ZwY2lCdmQyNGdaR1Z6WTNKcGNIUnZjaUJ3Y205d1pYSjBlVnh5WEc0dkx5QmlaV05oZFhObElIZGxJR1J2YmlkMElIZGhiblFnWlhabGNua2diR2x1WlNCbGRtVnVkQ0IzYVhSb0lHRnVJR2xrTDI1aGJXVmNjbHh1THk4Z2RHOGdkWEJrWVhSbElHTnZiV0poZEdGdWRDQnpkR0YwWlN3Z1ptOXlJR1Y0WVcxd2JHVmNjbHh1Wlhod2IzSjBJR2x1ZEdWeVptRmpaU0JNYVc1bFJYWmxiblJUYjNWeVkyVWdaWGgwWlc1a2N5Qk1hVzVsUlhabGJuUWdlMXh5WEc0Z0lISmxZV1J2Ym14NUlHbHpVMjkxY21ObE9pQjBjblZsTzF4eVhHNGdJSEpsWVdSdmJteDVJR2xrT2lCemRISnBibWM3WEhKY2JpQWdjbVZoWkc5dWJIa2dibUZ0WlRvZ2MzUnlhVzVuTzF4eVhHNGdJSEpsWVdSdmJteDVJSGcvT2lCdWRXMWlaWEk3WEhKY2JpQWdjbVZoWkc5dWJIa2dlVDg2SUc1MWJXSmxjanRjY2x4dUlDQnlaV0ZrYjI1c2VTQjZQem9nYm5WdFltVnlPMXh5WEc0Z0lISmxZV1J2Ym14NUlHaGxZV1JwYm1jL09pQnVkVzFpWlhJN1hISmNiaUFnY21WaFpHOXViSGtnZEdGeVoyVjBZV0pzWlQ4NklHSnZiMnhsWVc0N1hISmNiaUFnY21WaFpHOXViSGtnYUhBL09pQnVkVzFpWlhJN1hISmNiaUFnY21WaFpHOXViSGtnYldGNFNIQS9PaUJ1ZFcxaVpYSTdYSEpjYmlBZ2NtVmhaRzl1YkhrZ2JYQS9PaUJ1ZFcxaVpYSTdYSEpjYmlBZ2NtVmhaRzl1YkhrZ2JXRjRUWEEvT2lCdWRXMWlaWEk3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCamIyNXpkQ0JwYzB4cGJtVkZkbVZ1ZEZOdmRYSmpaU0E5SUNoc2FXNWxPaUJNYVc1bFJYWmxiblFwT2lCc2FXNWxJR2x6SUV4cGJtVkZkbVZ1ZEZOdmRYSmpaU0E5UGlCN1hISmNiaUFnY21WMGRYSnVJQ2RwYzFOdmRYSmpaU2NnYVc0Z2JHbHVaVHRjY2x4dWZUdGNjbHh1WEhKY2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1RHbHVaVVYyWlc1MFZHRnlaMlYwSUdWNGRHVnVaSE1nVEdsdVpVVjJaVzUwSUh0Y2NseHVJQ0J5WldGa2IyNXNlU0JwYzFSaGNtZGxkRG9nZEhKMVpUdGNjbHh1SUNCeVpXRmtiMjVzZVNCMFlYSm5aWFJKWkRvZ2MzUnlhVzVuTzF4eVhHNGdJSEpsWVdSdmJteDVJSFJoY21kbGRFNWhiV1U2SUhOMGNtbHVaenRjY2x4dUlDQnlaV0ZrYjI1c2VTQjBZWEpuWlhSWVB6b2diblZ0WW1WeU8xeHlYRzRnSUhKbFlXUnZibXg1SUhSaGNtZGxkRmsvT2lCdWRXMWlaWEk3WEhKY2JpQWdjbVZoWkc5dWJIa2dkR0Z5WjJWMFdqODZJRzUxYldKbGNqdGNjbHh1SUNCeVpXRmtiMjVzZVNCMFlYSm5aWFJJWldGa2FXNW5Qem9nYm5WdFltVnlPMXh5WEc0Z0lISmxZV1J2Ym14NUlIUmhjbWRsZEVod1B6b2diblZ0WW1WeU8xeHlYRzRnSUhKbFlXUnZibXg1SUhSaGNtZGxkRTFoZUVod1B6b2diblZ0WW1WeU8xeHlYRzRnSUhKbFlXUnZibXg1SUhSaGNtZGxkRTF3UHpvZ2JuVnRZbVZ5TzF4eVhHNGdJSEpsWVdSdmJteDVJSFJoY21kbGRFMWhlRTF3UHpvZ2JuVnRZbVZ5TzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyOXVjM1FnYVhOTWFXNWxSWFpsYm5SVVlYSm5aWFFnUFNBb2JHbHVaVG9nVEdsdVpVVjJaVzUwS1RvZ2JHbHVaU0JwY3lCTWFXNWxSWFpsYm5SVVlYSm5aWFFnUFQ0Z2UxeHlYRzRnSUhKbGRIVnliaUFuYVhOVVlYSm5aWFFuSUdsdUlHeHBibVU3WEhKY2JuMDdYSEpjYmx4eVhHNWxlSEJ2Y25RZ2FXNTBaWEptWVdObElFeHBibVZGZG1WdWRFcHZZa3hsZG1Wc0lHVjRkR1Z1WkhNZ1RHbHVaVVYyWlc1MElIdGNjbHh1SUNCeVpXRmtiMjVzZVNCcGMwcHZZa3hsZG1Wc09pQjBjblZsTzF4eVhHNGdJSEpsWVdSdmJteDVJR3B2WWpvZ1NtOWlPMXh5WEc0Z0lISmxZV1J2Ym14NUlHcHZZa2xrT2lCdWRXMWlaWEk3WEhKY2JpQWdjbVZoWkc5dWJIa2diR1YyWld3NklHNTFiV0psY2p0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHTnZibk4wSUdselRHbHVaVVYyWlc1MFNtOWlUR1YyWld3Z1BTQW9iR2x1WlRvZ1RHbHVaVVYyWlc1MEtUb2diR2x1WlNCcGN5Qk1hVzVsUlhabGJuUktiMkpNWlhabGJDQTlQaUI3WEhKY2JpQWdjbVYwZFhKdUlDZHBjMHB2WWt4bGRtVnNKeUJwYmlCc2FXNWxPMXh5WEc1OU8xeHlYRzVjY2x4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCTWFXNWxSWFpsYm5SQlltbHNhWFI1SUdWNGRHVnVaSE1nVEdsdVpVVjJaVzUwSUh0Y2NseHVJQ0J5WldGa2IyNXNlU0JwYzBGaWFXeHBkSGs2SUhSeWRXVTdYSEpjYmlBZ2NtVmhaRzl1YkhrZ1lXSnBiR2wwZVVsa09pQnVkVzFpWlhJN1hISmNiaUFnY21WaFpHOXViSGtnWVdKcGJHbDBlVTVoYldVNklITjBjbWx1Wnp0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHTnZibk4wSUdselRHbHVaVVYyWlc1MFFXSnBiR2wwZVNBOUlDaHNhVzVsT2lCTWFXNWxSWFpsYm5RcE9pQnNhVzVsSUdseklFeHBibVZGZG1WdWRFRmlhV3hwZEhrZ1BUNGdlMXh5WEc0Z0lISmxkSFZ5YmlBbmFYTkJZbWxzYVhSNUp5QnBiaUJzYVc1bE8xeHlYRzU5TzF4eVhHNGlMQ0pwYlhCdmNuUWdRMjl0WW1GMFlXNTBJR1p5YjIwZ0p5NHZRMjl0WW1GMFlXNTBKenRjY2x4dWFXMXdiM0owSUVOdmJXSmhkR0Z1ZEVwdllsTmxZWEpqYUNCbWNtOXRJQ2N1TDBOdmJXSmhkR0Z1ZEVwdllsTmxZWEpqYUNjN1hISmNibWx0Y0c5eWRDQkRiMjFpWVhSaGJuUlRkR0YwWlNCbWNtOXRJQ2N1TDBOdmJXSmhkR0Z1ZEZOMFlYUmxKenRjY2x4dWFXMXdiM0owSUZCbGRFNWhiV1Z6UW5sTVlXNW5JR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM0psYzI5MWNtTmxjeTl3WlhSZmJtRnRaWE1uTzF4eVhHNXBiWEJ2Y25RZ1RHbHVaVVYyWlc1MExDQjdJR2x6VEdsdVpVVjJaVzUwU205aVRHVjJaV3dzSUdselRHbHVaVVYyWlc1MFFXSnBiR2wwZVN3Z2FYTk1hVzVsUlhabGJuUlRiM1Z5WTJVc0lHbHpUR2x1WlVWMlpXNTBWR0Z5WjJWMExDQk1hVzVsUlhabGJuUlRiM1Z5WTJVc0lFeHBibVZGZG1WdWRGUmhjbWRsZENCOUlHWnliMjBnSnk0dmJtVjBkMjl5YTE5c2IyZGZZMjl1ZG1WeWRHVnlMMHhwYm1WRmRtVnVkQ2M3WEhKY2JtbHRjRzl5ZENCN0lFeGhibWNnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5eVpYTnZkWEpqWlhNdmJHRnVaM1ZoWjJWekp6dGNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRU52YldKaGRHRnVkRlJ5WVdOclpYSWdlMXh5WEc0Z0lHeGhibWQxWVdkbE9pQk1ZVzVuTzF4eVhHNGdJR1pwY25OMFZHbHRaWE4wWVcxd09pQnVkVzFpWlhJN1hISmNiaUFnYkdGemRGUnBiV1Z6ZEdGdGNEb2diblZ0WW1WeU8xeHlYRzRnSUdOdmJXSmhkR0Z1ZEhNNklIc2dXMmxrT2lCemRISnBibWRkT2lCRGIyMWlZWFJoYm5RZ2ZTQTlJSHQ5TzF4eVhHNGdJSEJoY25SNVRXVnRZbVZ5Y3pvZ2MzUnlhVzVuVzEwZ1BTQmJYVHRjY2x4dUlDQmxibVZ0YVdWek9pQnpkSEpwYm1kYlhTQTlJRnRkTzF4eVhHNGdJRzkwYUdWeWN6b2djM1J5YVc1blcxMGdQU0JiWFR0Y2NseHVJQ0J3WlhSek9pQnpkSEpwYm1kYlhTQTlJRnRkTzF4eVhHNGdJRzFoYVc1RGIyMWlZWFJoYm5SSlJEODZJSE4wY21sdVp6dGNjbHh1SUNCcGJtbDBhV0ZzVTNSaGRHVnpPaUI3SUZ0cFpEb2djM1J5YVc1blhUb2dVR0Z5ZEdsaGJEeERiMjFpWVhSaGJuUlRkR0YwWlQ0Z2ZTQTlJSHQ5TzF4eVhHNGdJR052Ym5OMGNuVmpkRzl5S0d4dloweHBibVZ6T2lCTWFXNWxSWFpsYm5SYlhTd2diR0Z1WjNWaFoyVTZJRXhoYm1jcElIdGNjbHh1SUNBZ0lIUm9hWE11YkdGdVozVmhaMlVnUFNCc1lXNW5kV0ZuWlR0Y2NseHVJQ0FnSUhSb2FYTXVabWx5YzNSVWFXMWxjM1JoYlhBZ1BTQk9kVzFpWlhJdVRVRllYMU5CUmtWZlNVNVVSVWRGVWp0Y2NseHVJQ0FnSUhSb2FYTXViR0Z6ZEZScGJXVnpkR0Z0Y0NBOUlEQTdYSEpjYmlBZ0lDQjBhR2x6TG1sdWFYUnBZV3hwZW1Vb2JHOW5UR2x1WlhNcE8xeHlYRzRnSUNBZ0x5OGdRMnhsWVhJZ2FXNXBkR2xoYkZOMFlYUmxjeUJoWm5SbGNpQjNaU0JwYm1sMGFXRnNhWHBsTENCM1pTQmtiMjRuZENCdVpXVmtJR2wwSUdGdWVXMXZjbVZjY2x4dUlDQWdJSFJvYVhNdWFXNXBkR2xoYkZOMFlYUmxjeUE5SUh0OU8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2FXNXBkR2xoYkdsNlpTaHNiMmRNYVc1bGN6b2dUR2x1WlVWMlpXNTBXMTBwT2lCMmIybGtJSHRjY2x4dUlDQWdJQzh2SUVacGNuTjBJSEJoYzNNNklFZGxkQ0JzYVhOMElHOW1JR052YldKaGRHRnVkSE1zSUdacFozVnlaU0J2ZFhRZ2QyaGxjbVVnZEdobGVWeHlYRzRnSUNBZ0x5OGdjM1JoY25RZ1lYUWdhV1lnY0c5emMybGliR1ZjY2x4dUlDQWdJR1p2Y2lBb1kyOXVjM1FnYkdsdVpTQnZaaUJzYjJkTWFXNWxjeWtnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbVpwY25OMFZHbHRaWE4wWVcxd0lEMGdUV0YwYUM1dGFXNG9kR2hwY3k1bWFYSnpkRlJwYldWemRHRnRjQ3dnYkdsdVpTNTBhVzFsYzNSaGJYQXBPMXh5WEc0Z0lDQWdJQ0IwYUdsekxteGhjM1JVYVcxbGMzUmhiWEFnUFNCTllYUm9MbTFoZUNoMGFHbHpMbXhoYzNSVWFXMWxjM1JoYlhBc0lHeHBibVV1ZEdsdFpYTjBZVzF3S1R0Y2NseHVYSEpjYmlBZ0lDQWdJR2xtSUNocGMweHBibVZGZG1WdWRGTnZkWEpqWlNoc2FXNWxLU2xjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbUZrWkVOdmJXSmhkR0Z1ZEVaeWIyMU1hVzVsS0d4cGJtVXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLR2x6VEdsdVpVVjJaVzUwVkdGeVoyVjBLR3hwYm1VcEtWeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVlXUmtRMjl0WW1GMFlXNTBSbkp2YlZSaGNtZGxkRXhwYm1Vb2JHbHVaU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5OGdRbVYwZDJWbGJpQndZWE56WlhNNklFTnlaV0YwWlNCdmRYSWdhVzVwZEdsaGJDQmpiMjFpWVhSaGJuUWdjM1JoZEdWelhISmNiaUFnSUNCbWIzSWdLR052Ym5OMElHbGtJR2x1SUhSb2FYTXVhVzVwZEdsaGJGTjBZWFJsY3lrZ2UxeHlYRzRnSUNBZ0lDQmpiMjV6ZENCemRHRjBaU0E5SUhSb2FYTXVhVzVwZEdsaGJGTjBZWFJsYzF0cFpGMGdQejhnZTMwN1hISmNiaUFnSUNBZ0lIUm9hWE11WTI5dFltRjBZVzUwYzF0cFpGMC9MbkIxYzJoVGRHRjBaU2gwYUdsekxtWnBjbk4wVkdsdFpYTjBZVzF3TENCdVpYY2dRMjl0WW1GMFlXNTBVM1JoZEdVb1hISmNiaUFnSUNBZ0lDQWdJQ0JPZFcxaVpYSW9jM1JoZEdVdWNHOXpXQ2tzWEhKY2JpQWdJQ0FnSUNBZ0lDQk9kVzFpWlhJb2MzUmhkR1V1Y0c5eldTa3NYSEpjYmlBZ0lDQWdJQ0FnSUNCT2RXMWlaWElvYzNSaGRHVXVjRzl6V2lrc1hISmNiaUFnSUNBZ0lDQWdJQ0JPZFcxaVpYSW9jM1JoZEdVdWFHVmhaR2x1Wnlrc1hISmNiaUFnSUNBZ0lDQWdJQ0J6ZEdGMFpTNTBZWEpuWlhSaFlteGxJRDgvSUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ1RuVnRZbVZ5S0hOMFlYUmxMbWh3S1N4Y2NseHVJQ0FnSUNBZ0lDQWdJRTUxYldKbGNpaHpkR0YwWlM1dFlYaEljQ2tzWEhKY2JpQWdJQ0FnSUNBZ0lDQk9kVzFpWlhJb2MzUmhkR1V1YlhBcExGeHlYRzRnSUNBZ0lDQWdJQ0FnVG5WdFltVnlLSE4wWVhSbExtMWhlRTF3S1N4Y2NseHVJQ0FnSUNBZ0tTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1UyVmpiMjVrSUhCaGMzTTZJRUZ1WVd4NWVtVWdZMjl0WW1GMFlXNTBJR2x1Wm05eWJXRjBhVzl1SUdadmNpQjBjbUZqYTJsdVoxeHlYRzRnSUNBZ1kyOXVjM1FnWlhabGJuUlVjbUZqYTJWeU9pQjdJRnRyWlhrNklITjBjbWx1WjEwNklHNTFiV0psY2lCOUlEMGdlMzA3WEhKY2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUd4cGJtVWdiMllnYkc5blRHbHVaWE1wSUh0Y2NseHVJQ0FnSUNBZ2FXWWdLR2x6VEdsdVpVVjJaVzUwVTI5MWNtTmxLR3hwYm1VcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjM1JoZEdVZ1BTQjBhR2x6TG1WNGRISmhZM1JUZEdGMFpVWnliMjFNYVc1bEtHeHBibVVwTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1pYWmxiblJVY21GamEyVnlXMnhwYm1VdWFXUmRJRDBnWlhabGJuUlVjbUZqYTJWeVcyeHBibVV1YVdSZElEOC9JREE3WEhKY2JpQWdJQ0FnSUNBZ0lDQXJLMlYyWlc1MFZISmhZMnRsY2x0c2FXNWxMbWxrWFR0Y2NseHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXRZbUYwWVc1MGMxdHNhVzVsTG1sa1hUOHVjSFZ6YUZCaGNuUnBZV3hUZEdGMFpTaHNhVzVsTG5ScGJXVnpkR0Z0Y0N3Z2MzUmhkR1VwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0JwWmlBb2FYTk1hVzVsUlhabGJuUlVZWEpuWlhRb2JHbHVaU2twSUh0Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCemRHRjBaU0E5SUhSb2FYTXVaWGgwY21GamRGTjBZWFJsUm5KdmJWUmhjbWRsZEV4cGJtVW9iR2x1WlNrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hOMFlYUmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQmxkbVZ1ZEZSeVlXTnJaWEpiYkdsdVpTNTBZWEpuWlhSSlpGMGdQU0JsZG1WdWRGUnlZV05yWlhKYmJHbHVaUzUwWVhKblpYUkpaRjBnUHo4Z01EdGNjbHh1SUNBZ0lDQWdJQ0FnSUNzclpYWmxiblJVY21GamEyVnlXMnhwYm1VdWRHRnlaMlYwU1dSZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjFpWVhSaGJuUnpXMnhwYm1VdWRHRnlaMlYwU1dSZFB5NXdkWE5vVUdGeWRHbGhiRk4wWVhSbEtHeHBibVV1ZEdsdFpYTjBZVzF3TENCemRHRjBaU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1JtbG5kWEpsSUc5MWRDQndZWEowZVM5bGJtVnRlUzl2ZEdobGNpQnpkR0YwZFhOY2NseHVJQ0FnSUdOdmJuTjBJSEJsZEU1aGJXVnpJRDBnVUdWMFRtRnRaWE5DZVV4aGJtZGJkR2hwY3k1c1lXNW5kV0ZuWlYwN1hISmNiaUFnSUNCMGFHbHpMbTkwYUdWeWN5QTlJSFJvYVhNdWIzUm9aWEp6TG1acGJIUmxjaWdvU1VRcElEMCtJSHRjY2x4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WTI5dFltRjBZVzUwYzF0SlJGMC9MbXB2WWlBaFBUMGdkVzVrWldacGJtVmtJQ1ltWEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjIxaVlYUmhiblJ6VzBsRVhUOHVhbTlpSUNFOVBTQW5UazlPUlNjZ0ppWmNjbHh1SUNBZ0lDQWdJQ0JKUkM1emRHRnlkSE5YYVhSb0tDY3hKeWtwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5CaGNuUjVUV1Z0WW1WeWN5NXdkWE5vS0VsRUtUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hISmNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jR1YwVG1GdFpYTXVhVzVqYkhWa1pYTW9kR2hwY3k1amIyMWlZWFJoYm5SelcwbEVYVDh1Ym1GdFpTQS9QeUFuSnlrcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuQmxkSE11Y0hWemFDaEpSQ2s3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NobGRtVnVkRlJ5WVdOclpYSmJTVVJkSUQ4L0lEQXBJRDRnTUNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXNWxiV2xsY3k1d2RYTm9LRWxFS1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBdkx5Qk5ZV2x1SUdOdmJXSmhkR0Z1ZENCcGN5QjBhR1VnYjI1bElIUm9ZWFFnZEc5dmF5QjBhR1VnYlc5emRDQmhZM1JwYjI1elhISmNiaUFnSUNCMGFHbHpMbTFoYVc1RGIyMWlZWFJoYm5SSlJDQTlJSFJvYVhNdVpXNWxiV2xsY3k1emIzSjBLQ2hzTENCeUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUFvWlhabGJuUlVjbUZqYTJWeVczSmRJRDgvSURBcElDMGdLR1YyWlc1MFZISmhZMnRsY2x0c1hTQS9QeUF3S1R0Y2NseHVJQ0FnSUgwcFd6QmRPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdZV1JrUTI5dFltRjBZVzUwUm5KdmJVeHBibVVvYkdsdVpUb2dUR2x1WlVWMlpXNTBVMjkxY21ObEtUb2dkbTlwWkNCN1hISmNiaUFnSUNCamIyNXpkQ0JqYjIxaVlYUmhiblFnUFNCMGFHbHpMbWx1YVhSRGIyMWlZWFJoYm5Rb2JHbHVaUzVwWkN3Z2JHbHVaUzV1WVcxbEtUdGNjbHh1SUNBZ0lHTnZibk4wSUdsdWFYUlRkR0YwWlNBOUlIUm9hWE11YVc1cGRHbGhiRk4wWVhSbGMxdHNhVzVsTG1sa1hTQS9QeUI3ZlR0Y2NseHVYSEpjYmlBZ0lDQmpiMjV6ZENCbGVIUnlZV04wWldSVGRHRjBaU0E5SUhSb2FYTXVaWGgwY21GamRGTjBZWFJsUm5KdmJVeHBibVVvYkdsdVpTa2dQejhnZTMwN1hISmNibHh5WEc0Z0lDQWdhVzVwZEZOMFlYUmxMbkJ2YzFnZ1BTQnBibWwwVTNSaGRHVXVjRzl6V0NBL1B5QmxlSFJ5WVdOMFpXUlRkR0YwWlM1d2IzTllPMXh5WEc0Z0lDQWdhVzVwZEZOMFlYUmxMbkJ2YzFrZ1BTQnBibWwwVTNSaGRHVXVjRzl6V1NBL1B5QmxlSFJ5WVdOMFpXUlRkR0YwWlM1d2IzTlpPMXh5WEc0Z0lDQWdhVzVwZEZOMFlYUmxMbkJ2YzFvZ1BTQnBibWwwVTNSaGRHVXVjRzl6V2lBL1B5QmxlSFJ5WVdOMFpXUlRkR0YwWlM1d2IzTmFPMXh5WEc0Z0lDQWdhVzVwZEZOMFlYUmxMbWhsWVdScGJtY2dQU0JwYm1sMFUzUmhkR1V1YUdWaFpHbHVaeUEvUHlCbGVIUnlZV04wWldSVGRHRjBaUzVvWldGa2FXNW5PMXh5WEc0Z0lDQWdhVzVwZEZOMFlYUmxMblJoY21kbGRHRmliR1VnUFNCcGJtbDBVM1JoZEdVdWRHRnlaMlYwWVdKc1pTQS9QeUJsZUhSeVlXTjBaV1JUZEdGMFpTNTBZWEpuWlhSaFlteGxPMXh5WEc0Z0lDQWdhVzVwZEZOMFlYUmxMbWh3SUQwZ2FXNXBkRk4wWVhSbExtaHdJRDgvSUdWNGRISmhZM1JsWkZOMFlYUmxMbWh3TzF4eVhHNGdJQ0FnYVc1cGRGTjBZWFJsTG0xaGVFaHdJRDBnYVc1cGRGTjBZWFJsTG0xaGVFaHdJRDgvSUdWNGRISmhZM1JsWkZOMFlYUmxMbTFoZUVod08xeHlYRzRnSUNBZ2FXNXBkRk4wWVhSbExtMXdJRDBnYVc1cGRGTjBZWFJsTG0xd0lEOC9JR1Y0ZEhKaFkzUmxaRk4wWVhSbExtMXdPMXh5WEc0Z0lDQWdhVzVwZEZOMFlYUmxMbTFoZUUxd0lEMGdhVzVwZEZOMFlYUmxMbTFoZUUxd0lEOC9JR1Y0ZEhKaFkzUmxaRk4wWVhSbExtMWhlRTF3TzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hwYzB4cGJtVkZkbVZ1ZEVwdllreGxkbVZzS0d4cGJtVXBLU0I3WEhKY2JpQWdJQ0FnSUdOdmJXSmhkR0Z1ZEM1cWIySWdQU0IwYUdsekxtTnZiV0poZEdGdWRITmJiR2x1WlM1cFpGMC9MbXB2WWlBL1B5QnNhVzVsTG1wdllqdGNjbHh1SUNBZ0lDQWdZMjl0WW1GMFlXNTBMbXhsZG1Wc0lEMGdkR2hwY3k1amIyMWlZWFJoYm5SelcyeHBibVV1YVdSZFB5NXNaWFpsYkNBL1B5QnNhVzVsTG14bGRtVnNPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdsbUlDaHBjMHhwYm1WRmRtVnVkRUZpYVd4cGRIa29iR2x1WlNrcElIdGNjbHh1SUNBZ0lDQWdhV1lnS0NGamIyMWlZWFJoYm5RdWFtOWlJQ1ltSUNGc2FXNWxMbWxrTG5OMFlYSjBjMWRwZEdnb0p6UW5LU0FtSmlCc2FXNWxMbUZpYVd4cGRIbEpaQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tWeHlYRzRnSUNBZ0lDQWdJR052YldKaGRHRnVkQzVxYjJJZ1BTQkRiMjFpWVhSaGJuUktiMkpUWldGeVkyZ3VaMlYwU205aUtHeHBibVV1WVdKcGJHbDBlVWxrS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUdGa1pFTnZiV0poZEdGdWRFWnliMjFVWVhKblpYUk1hVzVsS0d4cGJtVTZJRXhwYm1WRmRtVnVkRlJoY21kbGRDazZJSFp2YVdRZ2UxeHlYRzRnSUNBZ2RHaHBjeTVwYm1sMFEyOXRZbUYwWVc1MEtHeHBibVV1ZEdGeVoyVjBTV1FzSUd4cGJtVXVkR0Z5WjJWMFRtRnRaU2s3WEhKY2JpQWdJQ0JqYjI1emRDQnBibWwwVTNSaGRHVWdQU0IwYUdsekxtbHVhWFJwWVd4VGRHRjBaWE5iYkdsdVpTNTBZWEpuWlhSSlpGMGdQejhnZTMwN1hISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ1pYaDBjbUZqZEdWa1UzUmhkR1VnUFNCMGFHbHpMbVY0ZEhKaFkzUlRkR0YwWlVaeWIyMVVZWEpuWlhSTWFXNWxLR3hwYm1VcElEOC9JSHQ5TzF4eVhHNWNjbHh1SUNBZ0lHbHVhWFJUZEdGMFpTNXdiM05ZSUQwZ2FXNXBkRk4wWVhSbExuQnZjMWdnUHo4Z1pYaDBjbUZqZEdWa1UzUmhkR1V1Y0c5eldEdGNjbHh1SUNBZ0lHbHVhWFJUZEdGMFpTNXdiM05aSUQwZ2FXNXBkRk4wWVhSbExuQnZjMWtnUHo4Z1pYaDBjbUZqZEdWa1UzUmhkR1V1Y0c5eldUdGNjbHh1SUNBZ0lHbHVhWFJUZEdGMFpTNXdiM05hSUQwZ2FXNXBkRk4wWVhSbExuQnZjMW9nUHo4Z1pYaDBjbUZqZEdWa1UzUmhkR1V1Y0c5eldqdGNjbHh1SUNBZ0lHbHVhWFJUZEdGMFpTNW9aV0ZrYVc1bklEMGdhVzVwZEZOMFlYUmxMbWhsWVdScGJtY2dQejhnWlhoMGNtRmpkR1ZrVTNSaGRHVXVhR1ZoWkdsdVp6dGNjbHh1SUNBZ0lHbHVhWFJUZEdGMFpTNW9jQ0E5SUdsdWFYUlRkR0YwWlM1b2NDQS9QeUJsZUhSeVlXTjBaV1JUZEdGMFpTNW9jRHRjY2x4dUlDQWdJR2x1YVhSVGRHRjBaUzV0WVhoSWNDQTlJR2x1YVhSVGRHRjBaUzV0WVhoSWNDQS9QeUJsZUhSeVlXTjBaV1JUZEdGMFpTNXRZWGhJY0R0Y2NseHVJQ0FnSUdsdWFYUlRkR0YwWlM1dGNDQTlJR2x1YVhSVGRHRjBaUzV0Y0NBL1B5QmxlSFJ5WVdOMFpXUlRkR0YwWlM1dGNEdGNjbHh1SUNBZ0lHbHVhWFJUZEdGMFpTNXRZWGhOY0NBOUlHbHVhWFJUZEdGMFpTNXRZWGhOY0NBL1B5QmxlSFJ5WVdOMFpXUlRkR0YwWlM1dFlYaE5jRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR1Y0ZEhKaFkzUlRkR0YwWlVaeWIyMU1hVzVsS0d4cGJtVTZJRXhwYm1WRmRtVnVkRk52ZFhKalpTazZJRkJoY25ScFlXdzhRMjl0WW1GMFlXNTBVM1JoZEdVK0lIdGNjbHh1SUNBZ0lHTnZibk4wSUhOMFlYUmxPaUJRWVhKMGFXRnNQRU52YldKaGRHRnVkRk4wWVhSbFBpQTlJSHQ5TzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hzYVc1bExuZ2dJVDA5SUhWdVpHVm1hVzVsWkNsY2NseHVJQ0FnSUNBZ2MzUmhkR1V1Y0c5eldDQTlJR3hwYm1VdWVEdGNjbHh1SUNBZ0lHbG1JQ2hzYVc1bExua2dJVDA5SUhWdVpHVm1hVzVsWkNsY2NseHVJQ0FnSUNBZ2MzUmhkR1V1Y0c5eldTQTlJR3hwYm1VdWVUdGNjbHh1SUNBZ0lHbG1JQ2hzYVc1bExub2dJVDA5SUhWdVpHVm1hVzVsWkNsY2NseHVJQ0FnSUNBZ2MzUmhkR1V1Y0c5eldpQTlJR3hwYm1VdWVqdGNjbHh1SUNBZ0lHbG1JQ2hzYVc1bExtaGxZV1JwYm1jZ0lUMDlJSFZ1WkdWbWFXNWxaQ2xjY2x4dUlDQWdJQ0FnYzNSaGRHVXVhR1ZoWkdsdVp5QTlJR3hwYm1VdWFHVmhaR2x1Wnp0Y2NseHVJQ0FnSUdsbUlDaHNhVzVsTG5SaGNtZGxkR0ZpYkdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ2xjY2x4dUlDQWdJQ0FnYzNSaGRHVXVkR0Z5WjJWMFlXSnNaU0E5SUd4cGJtVXVkR0Z5WjJWMFlXSnNaVHRjY2x4dUlDQWdJR2xtSUNoc2FXNWxMbWh3SUNFOVBTQjFibVJsWm1sdVpXUXBYSEpjYmlBZ0lDQWdJSE4wWVhSbExtaHdJRDBnYkdsdVpTNW9jRHRjY2x4dUlDQWdJR2xtSUNoc2FXNWxMbTFoZUVod0lDRTlQU0IxYm1SbFptbHVaV1FwWEhKY2JpQWdJQ0FnSUhOMFlYUmxMbTFoZUVod0lEMGdiR2x1WlM1dFlYaEljRHRjY2x4dUlDQWdJR2xtSUNoc2FXNWxMbTF3SUNFOVBTQjFibVJsWm1sdVpXUXBYSEpjYmlBZ0lDQWdJSE4wWVhSbExtMXdJRDBnYkdsdVpTNXRjRHRjY2x4dUlDQWdJR2xtSUNoc2FXNWxMbTFoZUUxd0lDRTlQU0IxYm1SbFptbHVaV1FwWEhKY2JpQWdJQ0FnSUhOMFlYUmxMbTFoZUUxd0lEMGdiR2x1WlM1dFlYaE5jRHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYzNSaGRHVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmxlSFJ5WVdOMFUzUmhkR1ZHY205dFZHRnlaMlYwVEdsdVpTaHNhVzVsT2lCTWFXNWxSWFpsYm5SVVlYSm5aWFFwT2lCUVlYSjBhV0ZzUEVOdmJXSmhkR0Z1ZEZOMFlYUmxQaUI3WEhKY2JpQWdJQ0JqYjI1emRDQnpkR0YwWlRvZ1VHRnlkR2xoYkR4RGIyMWlZWFJoYm5SVGRHRjBaVDRnUFNCN2ZUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2JHbHVaUzUwWVhKblpYUllJQ0U5UFNCMWJtUmxabWx1WldRcFhISmNiaUFnSUNBZ0lITjBZWFJsTG5CdmMxZ2dQU0JzYVc1bExuUmhjbWRsZEZnN1hISmNiaUFnSUNCcFppQW9iR2x1WlM1MFlYSm5aWFJaSUNFOVBTQjFibVJsWm1sdVpXUXBYSEpjYmlBZ0lDQWdJSE4wWVhSbExuQnZjMWtnUFNCc2FXNWxMblJoY21kbGRGazdYSEpjYmlBZ0lDQnBaaUFvYkdsdVpTNTBZWEpuWlhSYUlDRTlQU0IxYm1SbFptbHVaV1FwWEhKY2JpQWdJQ0FnSUhOMFlYUmxMbkJ2YzFvZ1BTQnNhVzVsTG5SaGNtZGxkRm83WEhKY2JpQWdJQ0JwWmlBb2JHbHVaUzUwWVhKblpYUklaV0ZrYVc1bklDRTlQU0IxYm1SbFptbHVaV1FwWEhKY2JpQWdJQ0FnSUhOMFlYUmxMbWhsWVdScGJtY2dQU0JzYVc1bExuUmhjbWRsZEVobFlXUnBibWM3WEhKY2JpQWdJQ0JwWmlBb2JHbHVaUzUwWVhKblpYUkljQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tWeHlYRzRnSUNBZ0lDQnpkR0YwWlM1b2NDQTlJR3hwYm1VdWRHRnlaMlYwU0hBN1hISmNiaUFnSUNCcFppQW9iR2x1WlM1MFlYSm5aWFJOWVhoSWNDQWhQVDBnZFc1a1pXWnBibVZrS1Z4eVhHNGdJQ0FnSUNCemRHRjBaUzV0WVhoSWNDQTlJR3hwYm1VdWRHRnlaMlYwVFdGNFNIQTdYSEpjYmlBZ0lDQnBaaUFvYkdsdVpTNTBZWEpuWlhSTmNDQWhQVDBnZFc1a1pXWnBibVZrS1Z4eVhHNGdJQ0FnSUNCemRHRjBaUzV0Y0NBOUlHeHBibVV1ZEdGeVoyVjBUWEE3WEhKY2JpQWdJQ0JwWmlBb2JHbHVaUzUwWVhKblpYUk5ZWGhOY0NBaFBUMGdkVzVrWldacGJtVmtLVnh5WEc0Z0lDQWdJQ0J6ZEdGMFpTNXRZWGhOY0NBOUlHeHBibVV1ZEdGeVoyVjBUV0Y0VFhBN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlITjBZWFJsTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnYVc1cGRFTnZiV0poZEdGdWRDaHBaRG9nYzNSeWFXNW5MQ0J1WVcxbE9pQnpkSEpwYm1jcE9pQkRiMjFpWVhSaGJuUWdlMXh5WEc0Z0lDQWdiR1YwSUdOdmJXSmhkR0Z1ZENBOUlIUm9hWE11WTI5dFltRjBZVzUwYzF0cFpGMDdYSEpjYmlBZ0lDQnBaaUFvWTI5dFltRjBZVzUwSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnWTI5dFltRjBZVzUwSUQwZ2RHaHBjeTVqYjIxaVlYUmhiblJ6VzJsa1hTQTlJRzVsZHlCRGIyMWlZWFJoYm5Rb2FXUXNJRzVoYldVcE8xeHlYRzRnSUNBZ0lDQjBhR2x6TG05MGFHVnljeTV3ZFhOb0tHbGtLVHRjY2x4dUlDQWdJQ0FnZEdocGN5NXBibWwwYVdGc1UzUmhkR1Z6VzJsa1hTQTlJSHRjY2x4dUlDQWdJQ0FnSUNCMFlYSm5aWFJoWW14bE9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNCOU8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGpiMjFpWVhSaGJuUXVibUZ0WlNBOVBUMGdKeWNwSUh0Y2NseHVJQ0FnSUNBZ1kyOXRZbUYwWVc1MExuTmxkRTVoYldVb2JtRnRaU2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdZMjl0WW1GMFlXNTBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdaMlYwVFdGcGJrTnZiV0poZEdGdWRFNWhiV1VvS1RvZ2MzUnlhVzVuSUh0Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TG0xaGFXNURiMjFpWVhSaGJuUkpSQ2xjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyOXRZbUYwWVc1MGMxdDBhR2x6TG0xaGFXNURiMjFpWVhSaGJuUkpSRjAvTG01aGJXVWdQejhnSjFWdWEyNXZkMjRuTzF4eVhHNGdJQ0FnY21WMGRYSnVJQ2RWYm10dWIzZHVKenRjY2x4dUlDQjlYSEpjYm4xY2NseHVJaXdpWlhod2IzSjBJSFI1Y0dVZ1EyOXRZbUYwWVc1MElEMGdlMXh5WEc0Z0lHNWhiV1UvT2lCemRISnBibWM3WEhKY2JpQWdhbTlpUHpvZ2MzUnlhVzVuTzF4eVhHNGdJSE53WVhkdU9pQnVkVzFpWlhJN1hISmNiaUFnWkdWemNHRjNiam9nYm5WdFltVnlPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5Qk1iMmRTWlhCdmMybDBiM0o1SUh0Y2NseHVJQ0JEYjIxaVlYUmhiblJ6T2lCN0lGdHBaRG9nYzNSeWFXNW5YVG9nUTI5dFltRjBZVzUwSUgwZ1BTQjdmVHRjY2x4dUlDQm1hWEp6ZEZScGJXVnpkR0Z0Y0NBOUlFNTFiV0psY2k1TlFWaGZVMEZHUlY5SlRsUkZSMFZTTzF4eVhHNWNjbHh1SUNCMWNHUmhkR1ZVYVcxbGMzUmhiWEFvZEdsdFpYTjBZVzF3T2lCdWRXMWlaWElwT2lCMmIybGtJSHRjY2x4dUlDQWdJSFJvYVhNdVptbHljM1JVYVcxbGMzUmhiWEFnUFNCTllYUm9MbTFwYmloMGFHbHpMbVpwY25OMFZHbHRaWE4wWVcxd0xDQjBhVzFsYzNSaGJYQXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdkWEJrWVhSbFEyOXRZbUYwWVc1MEtHbGtPaUJ6ZEhKcGJtY3NJR002SUVOdmJXSmhkR0Z1ZENrNklIWnZhV1FnZTF4eVhHNGdJQ0FnYVdRZ1BTQnBaQzUwYjFWd2NHVnlRMkZ6WlNncE8xeHlYRzRnSUNBZ2FXWWdLR2xrSUNZbUlHbGtMbXhsYm1kMGFDa2dlMXh5WEc0Z0lDQWdJQ0JzWlhRZ1kyOXRZbUYwWVc1MElEMGdkR2hwY3k1RGIyMWlZWFJoYm5SelcybGtYVHRjY2x4dUlDQWdJQ0FnYVdZZ0tHTnZiV0poZEdGdWRDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lDQWdZMjl0WW1GMFlXNTBJRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdibUZ0WlRvZ1l5NXVZVzFsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdhbTlpT2lCakxtcHZZaXhjY2x4dUlDQWdJQ0FnSUNBZ0lITndZWGR1T2lCakxuTndZWGR1TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdaR1Z6Y0dGM2Jqb2dZeTVrWlhOd1lYZHVMRnh5WEc0Z0lDQWdJQ0FnSUgwN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyMWlZWFJoYm5SelcybGtYU0E5SUdOdmJXSmhkR0Z1ZER0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQmpiMjFpWVhSaGJuUXVibUZ0WlNBOUlHTXVibUZ0WlNCOGZDQmpiMjFpWVhSaGJuUXVibUZ0WlR0Y2NseHVJQ0FnSUNBZ0lDQmpiMjFpWVhSaGJuUXVhbTlpSUQwZ1l5NXFiMklnZkh3Z1kyOXRZbUYwWVc1MExtcHZZanRjY2x4dUlDQWdJQ0FnSUNCamIyMWlZWFJoYm5RdWMzQmhkMjRnUFNCTllYUm9MbTFwYmloamIyMWlZWFJoYm5RdWMzQmhkMjRzSUdNdWMzQmhkMjRwTzF4eVhHNGdJQ0FnSUNBZ0lHTnZiV0poZEdGdWRDNWtaWE53WVhkdUlEMGdUV0YwYUM1dFlYZ29ZMjl0WW1GMFlXNTBMbVJsYzNCaGQyNHNJR011WkdWemNHRjNiaWs3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUhKbGMyOXNkbVZPWVcxbEtGeHlYRzRnSUNBZ0lDQnBaRG9nYzNSeWFXNW5MRnh5WEc0Z0lDQWdJQ0J1WVcxbE9pQnpkSEpwYm1jc1hISmNiaUFnSUNBZ0lHWmhiR3hpWVdOclNXUTZJSE4wY21sdVp5QjhJRzUxYkd3Z1BTQnVkV3hzTEZ4eVhHNGdJQ0FnSUNCbVlXeHNZbUZqYTA1aGJXVTZJSE4wY21sdVp5QjhJRzUxYkd3Z1BTQnVkV3hzS1RvZ2MzUnlhVzVuSUh0Y2NseHVJQ0FnSUd4bGRDQnlaWFFnUFNCdVlXMWxPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaG1ZV3hzWW1GamEwbGtJQ0U5UFNCdWRXeHNLU0I3WEhKY2JpQWdJQ0FnSUdsbUlDaHBaQ0E5UFQwZ0owVXdNREF3TURBd0p5QW1KaUJ5WlhRZ1BUMDlJQ2NuS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0daaGJHeGlZV05yU1dRdWMzUmhjblJ6VjJsMGFDZ25OQ2NwS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdjbVYwSUQwZ1ptRnNiR0poWTJ0T1lXMWxJRDgvSUNjbk8xeHlYRzRnSUNBZ0lDQWdJR1ZzYzJWY2NseHVJQ0FnSUNBZ0lDQWdJSEpsZENBOUlDZFZibXR1YjNkdUp6dGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdsbUlDaHlaWFFnUFQwOUlDY25LVnh5WEc0Z0lDQWdJQ0J5WlhRZ1BTQjBhR2x6TGtOdmJXSmhkR0Z1ZEhOYmFXUmRQeTV1WVcxbElEOC9JQ2NuTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCeVpYUTdYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JpSXNJaTh2SUVWMlpXNTBRblZ6SUdKNUlHUmxabWx1YVhScGIyNGdjbVZ4ZFdseVpYTWdaMlZ1WlhKcFl5QndZWEpoYldWMFpYSnpMbHh5WEc0dkx5Qk5ZWEFnYjNWeUlITjBZVzVrTFdsdUlHZGxibVZ5YVdOeklIUnZJR0ZqZEhWaGJDQm5aVzVsY21samN5Qm9aWEpsTGx4eVhHNHZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdRSFI1Y0dWelkzSnBjSFF0WlhOc2FXNTBMMkpoYmkxMGVYQmxjMXh5WEc1MGVYQmxJRk5qYjNCbElEMGdiMkpxWldOME8xeHlYRzR2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxXVjRjR3hwWTJsMExXRnVlVnh5WEc1MGVYQmxJRkJoY21GdElEMGdZVzU1TzF4eVhHNWNjbHh1ZEhsd1pTQkRZV3hzWW1GamEwWjFibU4wYVc5dUlEMGdLQzR1TG1GeVozTTZJRkJoY21GdEtTQTlQaUIyYjJsa08xeHlYRzUwZVhCbElFVjJaVzUwVFdGd1JXNTBjbmtnUFNCN1hISmNiaUFnWlhabGJuUTZJSE4wY21sdVp6dGNjbHh1SUNCelkyOXdaVG9nVTJOdmNHVTdYSEpjYmlBZ1kyRnNiR0poWTJzNklFTmhiR3hpWVdOclJuVnVZM1JwYjI0N1hISmNibjA3WEhKY2JuUjVjR1VnUlhabGJuUk5ZWEFnUFNCN0lGdGxkbVZ1ZERvZ2MzUnlhVzVuWFRvZ1JYWmxiblJOWVhCRmJuUnllVnRkSUgwN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1ZHaHBjeUJwY3lCaElHSmhjMlVnWTJ4aGMzTWdkR2hoZENCamJHRnpjMlZ6SUdOaGJpQmxlSFJsYm1RZ2RHOGdhVzVvWlhKcGRDQmxkbVZ1ZENCaWRYTWdZMkZ3WVdKcGJHbDBhV1Z6TGx4eVhHNGdLaUJVYUdseklHRnNiRzkzY3lCdmRHaGxjaUJqYkdGemMyVnpJSFJ2SUd4cGMzUmxiaUJtYjNJZ1pYWmxiblJ6SUhkcGRHZ2dkR2hsSUdCdmJtQWdablZ1WTNScGIyNHVYSEpjYmlBcUlGUm9aU0JwYm1obGNtbDBhVzVuSUdOc1lYTnpJR05oYmlCbWFYSmxJSFJvYjNObElHVjJaVzUwY3lCM2FYUm9JSFJvWlNCZ1pHbHpjR0YwWTJoZ0lHWjFibU4wYVc5dUxseHlYRzRnS2k5Y2NseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUlhabGJuUkNkWE1nZTF4eVhHNGdJSEJ5YVhaaGRHVWdiR2x6ZEdWdVpYSnpPaUJGZG1WdWRFMWhjQ0E5SUh0OU8xeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGTjFZbk5qY21saVpTQjBieUJoYmlCbGRtVnVkRnh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElHVjJaVzUwSUZSb1pTQmxkbVZ1ZENoektTQjBieUJ6ZFdKelkzSnBZbVVnZEc4c0lITndZV05sSUhObGNHRnlZWFJsWkZ4eVhHNGdJQ0FxSUVCd1lYSmhiU0JqWVd4c1ltRmpheUJVYUdVZ1kyRnNiR0poWTJzZ2RHOGdhVzUyYjJ0bFhISmNiaUFnSUNvZ1FIQmhjbUZ0SUhOamIzQmxJRTl3ZEdsdmJtRnNMaUJVYUdVZ2MyTnZjR1VnZEc4Z1lYQndiSGtnZEdobElHWjFibU4wYVc5dUlHRm5ZV2x1YzNSY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCVWFHVWdZMkZzYkdKaFkydHpJSEpsWjJsemRHVnlaV1FnZEc4Z2RHaGxJR1YyWlc1MEtITXBYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2IyNG9aWFpsYm5RNklITjBjbWx1Wnl3Z1kyRnNiR0poWTJzL09pQkRZV3hzWW1GamEwWjFibU4wYVc5dUxDQnpZMjl3WlQ4NklGTmpiM0JsS1RvZ1JYWmxiblJOWVhCRmJuUnllVnRkSUh0Y2NseHVJQ0FnSUdOdmJuTjBJR1YyWlc1MGN5QTlJR1YyWlc1MExuTndiR2wwS0NjZ0p5azdYSEpjYmlBZ0lDQmpiMjV6ZENCeVpYUTZJRVYyWlc1MFRXRndSVzUwY25sYlhTQTlJRnRkTzF4eVhHNGdJQ0FnYzJOdmNHVWdQU0J6WTI5d1pTQS9QeUFvZEhsd1pXOW1JSGRwYm1SdmR5QTlQVDBnSjNWdVpHVm1hVzVsWkNjZ1B5QjdmU0E2SUhkcGJtUnZkeWs3WEhKY2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUdWMlpXNTBJRzltSUdWMlpXNTBjeWtnZTF4eVhHNGdJQ0FnSUNCamIyNXpkQ0JsZG1WdWRITTZJRVYyWlc1MFRXRndSVzUwY25sYlhTQTlJSFJvYVhNdWJHbHpkR1Z1WlhKelcyVjJaVzUwWFNBL1B6MGdXMTA3WEhKY2JpQWdJQ0FnSUdsbUlDaGpZV3hzWW1GamF5QWhQVDBnZFc1a1pXWnBibVZrS1Z4eVhHNGdJQ0FnSUNBZ0lHVjJaVzUwY3k1d2RYTm9LSHNnWlhabGJuUTZJR1YyWlc1MExDQnpZMjl3WlRvZ2MyTnZjR1VzSUdOaGJHeGlZV05yT2lCallXeHNZbUZqYXlCOUtUdGNjbHh1SUNBZ0lDQWdjbVYwTG5CMWMyZ29MaTR1S0hSb2FYTXViR2x6ZEdWdVpYSnpXMlYyWlc1MFhTQS9QeUJiWFNrcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUhKbGREdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRVJwYzNCaGRHTm9JR0Z1SUdWMlpXNTBJSFJ2SUdGdWVTQnpkV0p6WTNKcFltVnljMXh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElHVjJaVzUwSUZSb1pTQmxkbVZ1ZENCMGJ5QmthWE53WVhSamFGeHlYRzRnSUNBcUlFQndZWEpoYlNCbGRtVnVkRUZ5WjNWdFpXNTBjeUJVYUdVZ1pYWmxiblFnWVhKbmRXMWxiblJ6SUhSdklIQmhjM01nZEc4Z2JHbHpkR1Z1WlhKelhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ1FTQndjbTl0YVhObElIUm9ZWFFnWTJGdUlHSmxJR0YzWVdsMEoyUWdiM0lnYVdkdWIzSmxaRnh5WEc0Z0lDQXFMMXh5WEc0Z0lHRnplVzVqSUdScGMzQmhkR05vS0dWMlpXNTBPaUJ6ZEhKcGJtY3NJQzR1TG1WMlpXNTBRWEpuZFcxbGJuUnpPaUJRWVhKaGJTazZJRkJ5YjIxcGMyVThkbTlwWkQ0Z2UxeHlYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHbHpkR1Z1WlhKelcyVjJaVzUwWFNBOVBUMGdkVzVrWldacGJtVmtLVnh5WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYSEpjYmx4eVhHNGdJQ0FnWm05eUlDaGpiMjV6ZENCc0lHOW1JSFJvYVhNdWJHbHpkR1Z1WlhKelcyVjJaVzUwWFNBL1B5QmJYU2tnZTF4eVhHNGdJQ0FnSUNCamIyNXpkQ0J5WlhNZ1BTQnNMbU5oYkd4aVlXTnJMbUZ3Y0d4NUtHd3VjMk52Y0dVc0lHVjJaVzUwUVhKbmRXMWxiblJ6S1R0Y2NseHVJQ0FnSUNBZ1lYZGhhWFFnVUhKdmJXbHpaUzV5WlhOdmJIWmxLSEpsY3lrN1hISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNTlYSEpjYmlJc0ltbHRjRzl5ZENCTWFXNWxSWFpsYm5RZ1puSnZiU0FuTGk5TWFXNWxSWFpsYm5Rbk8xeHlYRzVwYlhCdmNuUWdURzluVW1Wd2IzTnBkRzl5ZVNCbWNtOXRJQ2N1TDB4dloxSmxjRzl6YVhSdmNua25PMXh5WEc1Y2NseHVZMjl1YzNRZ1ptbGxiR1J6SUQwZ2UxeHlYRzRnSUhSNWNHVTZJRElzWEhKY2JpQWdjM0JsWVd0bGNqb2dNeXhjY2x4dWZTQmhjeUJqYjI1emREdGNjbHh1WEhKY2JpOHZJRU5vWVhRZ1pYWmxiblJjY2x4dVpYaHdiM0owSUdOc1lYTnpJRXhwYm1WRmRtVnVkREI0TURBZ1pYaDBaVzVrY3lCTWFXNWxSWFpsYm5RZ2UxeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0IwZVhCbE9pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSE53WldGclpYSTZJSE4wY21sdVp6dGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYldWemMyRm5aVG9nYzNSeWFXNW5PMXh5WEc1Y2NseHVJQ0JqYjI1emRISjFZM1J2Y2loeVpYQnZPaUJNYjJkU1pYQnZjMmwwYjNKNUxDQnNhVzVsT2lCemRISnBibWNzSUhCaGNuUnpPaUJ6ZEhKcGJtZGJYU2tnZTF4eVhHNGdJQ0FnYzNWd1pYSW9jbVZ3Ynl3Z2JHbHVaU3dnY0dGeWRITXBPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVkSGx3WlNBOUlIQmhjblJ6VzJacFpXeGtjeTUwZVhCbFhTQS9QeUFuSnp0Y2NseHVJQ0FnSUhSb2FYTXVjM0JsWVd0bGNpQTlJSEJoY25SelcyWnBaV3hrY3k1emNHVmhhMlZ5WFNBL1B5QW5KenRjY2x4dUlDQWdJSFJvYVhNdWJXVnpjMkZuWlNBOUlIQmhjblJ6TG5Oc2FXTmxLRFFzSUMweEtTNXFiMmx1S0NkOEp5azdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1ZHaGxJR1Y0WVdOMElISmxZWE52YmlCbWIzSWdkR2hwY3lCamFHVmpheUJwYzI0bmRDQmpiR1ZoY2lCaGJubHRiM0psSUdKMWRDQnRZWGtnWW1VZ2NtVnNZWFJsWkNCMGIxeHlYRzRnSUNBZ0x5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0poZG1Gb2JpOUdSbGhKVmw5QlExUmZVR3gxWjJsdUwybHpjM1ZsY3k4eU5UQmNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxtMWxjM05oWjJVdWMzQnNhWFFvSjF4Y2RUQXdNV1pjWEhVd01ERm1KeWt1YkdWdVozUm9JRDRnTVNsY2NseHVJQ0FnSUNBZ2RHaHBjeTVwYm5aaGJHbGtJRDBnZEhKMVpUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxtTnZiblpsY25SbFpFeHBibVVnUFZ4eVhHNGdJQ0FnSUNCMGFHbHpMbkJ5WldacGVDZ3BJQ3NnZEdocGN5NTBlWEJsSUNzZ0p6b25JQ3RjY2x4dUlDQWdJQ0FnSUNBdkx5QkpaaUJ6Y0dWaGEyVnlJR2x6SUdKc1lXNXJMQ0JwZENkeklHVjRZMngxWkdWa0lHWnliMjBnZEdobElHTnZiblpsY25SbFpDQnNhVzVsWEhKY2JpQWdJQ0FnSUNBZ0tIUm9hWE11YzNCbFlXdGxjaUFoUFQwZ0p5Y2dQeUIwYUdsekxuTndaV0ZyWlhJZ0t5QW5PaWNnT2lBbkp5a2dLMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViV1Z6YzJGblpTNTBjbWx0S0NrN1hISmNiaUFnSUNCMGFHbHpMbU52Ym5abGNuUmxaRXhwYm1VZ1BTQk1hVzVsUlhabGJuUXdNQzV5WlhCc1lXTmxRMmhoZEZONWJXSnZiSE1vZEdocGN5NWpiMjUyWlhKMFpXUk1hVzVsS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhOMFlYUnBZeUJ5WlhCc1lXTmxRMmhoZEZONWJXSnZiSE1vYkdsdVpUb2djM1J5YVc1bktUb2djM1J5YVc1bklIdGNjbHh1SUNBZ0lHWnZjaUFvWTI5dWMzUWdjbVZ3SUc5bUlFeHBibVZGZG1WdWREQXdMbU5vWVhSVGVXMWliMnhTWlhCc1lXTmxiV1Z1ZEhNcFhISmNiaUFnSUNBZ0lHeHBibVVnUFNCc2FXNWxMbkpsY0d4aFkyVW9jbVZ3TGxObFlYSmphQ3dnY21Wd0xsSmxjR3hoWTJVcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnNhVzVsTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnYzNSaGRHbGpJR05vWVhSVGVXMWliMnhTWlhCc1lXTmxiV1Z1ZEhNZ1BTQmJYSEpjYmlBZ0lDQjdYSEpjYmlBZ0lDQWdJRk5sWVhKamFEb2dMenBjWEhWRk1EWkdMMmNzWEhKY2JpQWdJQ0FnSUZKbGNHeGhZMlU2SUNjNjRvZVNKeXhjY2x4dUlDQWdJQ0FnVkhsd1pUb2dKMU41YldKdmJDY3NYSEpjYmlBZ0lDQjlMRnh5WEc0Z0lDQWdlMXh5WEc0Z0lDQWdJQ0JUWldGeVkyZzZJQzhnWEZ4MVJUQkNRbHhjZFVVd05VTXZaeXhjY2x4dUlDQWdJQ0FnVW1Wd2JHRmpaVG9nSnlBbkxGeHlYRzRnSUNBZ0lDQlVlWEJsT2lBblVHOXphWFJwZG1VZ1JXWm1aV04wSnl4Y2NseHVJQ0FnSUgwc1hISmNiaUFnSUNCN1hISmNiaUFnSUNBZ0lGTmxZWEpqYURvZ0x5QmNYSFZGTUVKQ1hGeDFSVEExUWk5bkxGeHlYRzRnSUNBZ0lDQlNaWEJzWVdObE9pQW5JQ2NzWEhKY2JpQWdJQ0FnSUZSNWNHVTZJQ2RPWldkaGRHbDJaU0JGWm1abFkzUW5MRnh5WEc0Z0lDQWdmU3hjY2x4dUlDQmRPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWTJ4aGMzTWdUR2x1WlVWMlpXNTBNREFnWlhoMFpXNWtjeUJNYVc1bFJYWmxiblF3ZURBd0lIdDlYSEpjYmlJc0ltbHRjRzl5ZENCTWFXNWxSWFpsYm5RZ1puSnZiU0FuTGk5TWFXNWxSWFpsYm5Rbk8xeHlYRzVwYlhCdmNuUWdSVzExYkdGMGIzSkRiMjF0YjI0Z1puSnZiU0FuTGk0dkxpNHZSVzExYkdGMGIzSkRiMjF0YjI0bk8xeHlYRzVwYlhCdmNuUWdURzluVW1Wd2IzTnBkRzl5ZVNCbWNtOXRJQ2N1TDB4dloxSmxjRzl6YVhSdmNua25PMXh5WEc1Y2NseHVZMjl1YzNRZ1ptbGxiR1J6SUQwZ2UxeHlYRzRnSUhwdmJtVkpaRG9nTWl4Y2NseHVJQ0I2YjI1bFRtRnRaVG9nTXl4Y2NseHVmU0JoY3lCamIyNXpkRHRjY2x4dVhISmNiaTh2SUZwdmJtVWdZMmhoYm1kbElHVjJaVzUwWEhKY2JtVjRjRzl5ZENCamJHRnpjeUJNYVc1bFJYWmxiblF3ZURBeElHVjRkR1Z1WkhNZ1RHbHVaVVYyWlc1MElIdGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnY0hKdmNHVnlRMkZ6WlVOdmJuWmxjblJsWkV4cGJtVTZJSE4wY21sdVp6dGNjbHh1WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIcHZibVZKWkRvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQjZiMjVsVG1GdFpUb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0I2YjI1bFRtRnRaVkJ5YjNCbGNrTmhjMlU2SUhOMGNtbHVaenRjY2x4dVhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2NtVndiem9nVEc5blVtVndiM05wZEc5eWVTd2dibVYwZDI5eWEweHBibVU2SUhOMGNtbHVaeXdnY0dGeWRITTZJSE4wY21sdVoxdGRLU0I3WEhKY2JpQWdJQ0J6ZFhCbGNpaHlaWEJ2TENCdVpYUjNiM0pyVEdsdVpTd2djR0Z5ZEhNcE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdWVtOXVaVWxrSUQwZ2NHRnlkSE5iWm1sbGJHUnpMbnB2Ym1WSlpGMGdQejhnSnljN1hISmNiaUFnSUNCMGFHbHpMbnB2Ym1WT1lXMWxJRDBnY0dGeWRITmJabWxsYkdSekxucHZibVZPWVcxbFhTQS9QeUFuSnp0Y2NseHVJQ0FnSUhSb2FYTXVlbTl1WlU1aGJXVlFjbTl3WlhKRFlYTmxJRDBnUlcxMWJHRjBiM0pEYjIxdGIyNHVjSEp2Y0dWeVEyRnpaU2gwYUdsekxucHZibVZPWVcxbEtUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxtTnZiblpsY25SbFpFeHBibVVnUFNCMGFHbHpMbkJ5WldacGVDZ3BJQ3RjY2x4dUlDQWdJQ0FnSjBOb1lXNW5aV1FnV205dVpTQjBieUFuSUNzZ2RHaHBjeTU2YjI1bFRtRnRaU0FySUNjdUp6dGNjbHh1SUNBZ0lIUm9hWE11Y0hKdmNHVnlRMkZ6WlVOdmJuWmxjblJsWkV4cGJtVWdQU0IwYUdsekxuQnlaV1pwZUNncElDdGNjbHh1SUNBZ0lDQWdKME5vWVc1blpXUWdXbTl1WlNCMGJ5QW5JQ3NnZEdocGN5NTZiMjVsVG1GdFpWQnliM0JsY2tOaGMyVWdLeUFuTGljN1hISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nVEdsdVpVVjJaVzUwTURFZ1pYaDBaVzVrY3lCTWFXNWxSWFpsYm5Rd2VEQXhJSHQ5WEhKY2JpSXNJbWx0Y0c5eWRDQk1hVzVsUlhabGJuUWdabkp2YlNBbkxpOU1hVzVsUlhabGJuUW5PMXh5WEc1cGJYQnZjblFnVEc5blVtVndiM05wZEc5eWVTQm1jbTl0SUNjdUwweHZaMUpsY0c5emFYUnZjbmtuTzF4eVhHNWNjbHh1WTI5dWMzUWdabWxsYkdSeklEMGdlMXh5WEc0Z0lHbGtPaUF5TEZ4eVhHNGdJRzVoYldVNklETXNYSEpjYm4wZ1lYTWdZMjl1YzNRN1hISmNibHh5WEc0dkx5QlFiR0Y1WlhJZ1kyaGhibWRsSUdWMlpXNTBYSEpjYm1WNGNHOXlkQ0JqYkdGemN5Qk1hVzVsUlhabGJuUXdlREF5SUdWNGRHVnVaSE1nVEdsdVpVVjJaVzUwSUh0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dhV1E2SUhOMGNtbHVaenRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2JtRnRaVG9nYzNSeWFXNW5PMXh5WEc1Y2NseHVJQ0JqYjI1emRISjFZM1J2Y2loeVpYQnZPaUJNYjJkU1pYQnZjMmwwYjNKNUxDQnNhVzVsT2lCemRISnBibWNzSUhCaGNuUnpPaUJ6ZEhKcGJtZGJYU2tnZTF4eVhHNGdJQ0FnYzNWd1pYSW9jbVZ3Ynl3Z2JHbHVaU3dnY0dGeWRITXBPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVhV1FnUFNCd1lYSjBjMXRtYVdWc1pITXVhV1JkUHk1MGIxVndjR1Z5UTJGelpTZ3BJRDgvSUNjbk8xeHlYRzRnSUNBZ2RHaHBjeTV1WVcxbElEMGdjR0Z5ZEhOYlptbGxiR1J6TG01aGJXVmRJRDgvSUNjbk8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVkyOXVkbVZ5ZEdWa1RHbHVaU0E5SUhSb2FYTXVjSEpsWm1sNEtDa2dLeUFuUTJoaGJtZGxaQ0J3Y21sdFlYSjVJSEJzWVhsbGNpQjBieUFuSUNzZ2RHaHBjeTV1WVcxbElDc2dKeTRuTzF4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdOc1lYTnpJRXhwYm1WRmRtVnVkREF5SUdWNGRHVnVaSE1nVEdsdVpVVjJaVzUwTUhnd01pQjdmVnh5WEc0aUxDSnBiWEJ2Y25RZ2V5QktiMklzSUZKdmJHVWdmU0JtY205dElDY3VMaTkwZVhCbGN5OXFiMkluTzF4eVhHNWNjbHh1THk4Z1ZFOUVUem9nYVhRblpDQmlaU0J1YVdObElIUnZJRzV2ZENCeVpYQmxZWFFnYW05aUlHNWhiV1Z6TENCaWRYUWdZWFFnYkdWaGMzUWdVbVZqYjNKa0lHVnVabTl5WTJWeklIUm9ZWFFnWVd4c0lHRnlaU0J6WlhRdVhISmNibU52Ym5OMElHNWhiV1ZVYjBwdllrVnVkVzA2SUZKbFkyOXlaRHhLYjJJc0lHNTFiV0psY2o0Z1BTQjdYSEpjYmlBZ1RrOU9SVG9nTUN4Y2NseHVJQ0JIVEVFNklERXNYSEpjYmlBZ1VFZE1PaUF5TEZ4eVhHNGdJRTFTUkRvZ015eGNjbHh1SUNCTVRrTTZJRFFzWEhKY2JpQWdRVkpET2lBMUxGeHlYRzRnSUVOT1Nqb2dOaXhjY2x4dUlDQlVTRTA2SURjc1hISmNiaUFnUTFKUU9pQTRMRnh5WEc0Z0lFSlRUVG9nT1N4Y2NseHVJQ0JCVWswNklERXdMRnh5WEc0Z0lFZFRUVG9nTVRFc1hISmNiaUFnVEZSWE9pQXhNaXhjY2x4dUlDQlhWbEk2SURFekxGeHlYRzRnSUVGTVF6b2dNVFFzWEhKY2JpQWdRMVZNT2lBeE5TeGNjbHh1SUNCTlNVNDZJREUyTEZ4eVhHNGdJRUpVVGpvZ01UY3NYSEpjYmlBZ1JsTklPaUF4T0N4Y2NseHVJQ0JRVEVRNklERTVMRnh5WEc0Z0lFMU9Tem9nTWpBc1hISmNiaUFnVjBGU09pQXlNU3hjY2x4dUlDQkVVa2M2SURJeUxGeHlYRzRnSUVKU1JEb2dNak1zWEhKY2JpQWdWMGhOT2lBeU5DeGNjbHh1SUNCQ1RFMDZJREkxTEZ4eVhHNGdJRUZEVGpvZ01qWXNYSEpjYmlBZ1UwMU9PaUF5Tnl4Y2NseHVJQ0JUUTBnNklESTRMRnh5WEc0Z0lGSlBSem9nTWprc1hISmNiaUFnVGtsT09pQXpNQ3hjY2x4dUlDQk5RMGc2SURNeExGeHlYRzRnSUVSU1N6b2dNeklzWEhKY2JpQWdRVk5VT2lBek15eGNjbHh1SUNCVFFVMDZJRE0wTEZ4eVhHNGdJRkpFVFRvZ016VXNYSEpjYmlBZ1FreFZPaUF6Tml4Y2NseHVJQ0JIVGtJNklETTNMRnh5WEc0Z0lFUk9Rem9nTXpnc1hISmNibjA3WEhKY2JseHlYRzVqYjI1emRDQmhiR3hLYjJKeklEMGdUMkpxWldOMExtdGxlWE1vYm1GdFpWUnZTbTlpUlc1MWJTa2dZWE1nU205aVcxMDdYSEpjYm1OdmJuTjBJR0ZzYkZKdmJHVnpJRDBnV3lkMFlXNXJKeXdnSjJobFlXeGxjaWNzSUNka2NITW5MQ0FuWTNKaFpuUmxjaWNzSUNkbllYUm9aWEpsY2ljc0lDZHViMjVsSjEwZ1lYTWdVbTlzWlZ0ZE8xeHlYRzVjY2x4dVkyOXVjM1FnZEdGdWEwcHZZbk02SUVwdllsdGRJRDBnV3lkSFRFRW5MQ0FuVUV4RUp5d2dKMDFTUkNjc0lDZFhRVkluTENBblJGSkxKeXdnSjBkT1FpZGRPMXh5WEc1amIyNXpkQ0JvWldGc1pYSktiMkp6T2lCS2IySmJYU0E5SUZzblEwNUtKeXdnSjFkSVRTY3NJQ2RUUTBnbkxDQW5RVk5VSjEwN1hISmNibU52Ym5OMElHMWxiR1ZsUkhCelNtOWljem9nU205aVcxMGdQU0JiSjFCSFRDY3NJQ2ROVGtzbkxDQW5URTVESnl3Z0owUlNSeWNzSUNkU1QwY25MQ0FuVGtsT0p5d2dKMU5CVFNkZE8xeHlYRzVqYjI1emRDQnlZVzVuWldSRWNITktiMkp6T2lCS2IySmJYU0E5SUZzblFWSkRKeXdnSjBKU1JDY3NJQ2RFVGtNbkxDQW5UVU5JSjEwN1hISmNibU52Ym5OMElHTmhjM1JsY2tSd2MwcHZZbk02SUVwdllsdGRJRDBnV3lkQ1RGVW5MQ0FuVWtSTkp5d2dKMEpNVFNjc0lDZFRUVTRuTENBblFVTk9KeXdnSjFSSVRTZGRPMXh5WEc1amIyNXpkQ0JrY0hOS2IySnpPaUJLYjJKYlhTQTlJRnN1TGk1dFpXeGxaVVJ3YzBwdlluTXNJQzR1TG5KaGJtZGxaRVJ3YzBwdlluTXNJQzR1TG1OaGMzUmxja1J3YzBwdlluTmRPMXh5WEc1amIyNXpkQ0JqY21GbWRHbHVaMHB2WW5NNklFcHZZbHRkSUQwZ1d5ZERVbEFuTENBblFsTk5KeXdnSjBGU1RTY3NJQ2RIVTAwbkxDQW5URlJYSnl3Z0oxZFdVaWNzSUNkQlRFTW5MQ0FuUTFWTUoxMDdYSEpjYm1OdmJuTjBJR2RoZEdobGNtbHVaMHB2WW5NNklFcHZZbHRkSUQwZ1d5ZE5TVTRuTENBblFsUk9KeXdnSjBaVFNDZGRPMXh5WEc1Y2NseHVZMjl1YzNRZ2MzUjFia3B2WW5NNklFcHZZbHRkSUQwZ1d5ZENURlVuTENBdUxpNTBZVzVyU205aWN5d2dMaTR1YldWc1pXVkVjSE5LYjJKelhUdGNjbHh1WTI5dWMzUWdjMmxzWlc1alpVcHZZbk02SUVwdllsdGRJRDBnV3lkQ1RGVW5MQ0F1TGk1MFlXNXJTbTlpY3l3Z0xpNHVjbUZ1WjJWa1JIQnpTbTlpYzEwN1hISmNibU52Ym5OMElITnNaV1Z3U205aWN6b2dTbTlpVzEwZ1BTQmJKMEpNVFNjc0lDZENURlVuTENBdUxpNW9aV0ZzWlhKS2IySnpYVHRjY2x4dVkyOXVjM1FnWm1WcGJuUktiMkp6T2lCS2IySmJYU0E5SUZzdUxpNXRaV3hsWlVSd2MwcHZZbk5kTzF4eVhHNWpiMjV6ZENCaFpHUnNaVXB2WW5NNklFcHZZbHRkSUQwZ1d5NHVMbU5oYzNSbGNrUndjMHB2WW5OZE8xeHlYRzVqYjI1emRDQmpiR1ZoYm5ObFNtOWljem9nU205aVcxMGdQU0JiSjBKTVZTY3NJQ2RDVWtRbkxDQXVMaTVvWldGc1pYSktiMkp6WFR0Y2NseHVYSEpjYm1OdmJuTjBJR3B2WWxSdlVtOXNaVTFoY0RvZ1RXRndQRXB2WWl3Z1VtOXNaVDRnUFNBb0tDa2dQVDRnZTF4eVhHNGdJR052Ym5OMElHRmtaRlJ2VFdGd0lEMGdLRzFoY0RvZ1RXRndQRXB2WWl3Z1VtOXNaVDRzSUdwdlluTTZJRXB2WWx0ZExDQnliMnhsT2lCU2IyeGxLU0E5UGlCN1hISmNiaUFnSUNCcWIySnpMbVp2Y2tWaFkyZ29LR3B2WWlrZ1BUNGdiV0Z3TG5ObGRDaHFiMklzSUhKdmJHVXBLVHRjY2x4dUlDQjlPMXh5WEc1Y2NseHVJQ0JqYjI1emRDQnRZWEE2SUUxaGNEeEtiMklzSUZKdmJHVStJRDBnYm1WM0lFMWhjQ2hiV3lkT1QwNUZKeXdnSjI1dmJtVW5YVjBwTzF4eVhHNGdJR0ZrWkZSdlRXRndLRzFoY0N3Z2RHRnVhMHB2WW5Nc0lDZDBZVzVySnlrN1hISmNiaUFnWVdSa1ZHOU5ZWEFvYldGd0xDQm9aV0ZzWlhKS2IySnpMQ0FuYUdWaGJHVnlKeWs3WEhKY2JpQWdZV1JrVkc5TllYQW9iV0Z3TENCa2NITktiMkp6TENBblpIQnpKeWs3WEhKY2JpQWdZV1JrVkc5TllYQW9iV0Z3TENCamNtRm1kR2x1WjBwdlluTXNJQ2RqY21GbWRHVnlKeWs3WEhKY2JpQWdZV1JrVkc5TllYQW9iV0Z3TENCbllYUm9aWEpwYm1kS2IySnpMQ0FuWjJGMGFHVnlaWEluS1R0Y2NseHVYSEpjYmlBZ2NtVjBkWEp1SUcxaGNEdGNjbHh1ZlNrb0tUdGNjbHh1WEhKY2JtTnZibk4wSUZWMGFXd2dQU0I3WEhKY2JpQWdhbTlpUlc1MWJWUnZTbTlpT2lBb2FXUTZJRzUxYldKbGNpa2dQVDRnZTF4eVhHNGdJQ0FnWTI5dWMzUWdhbTlpSUQwZ1lXeHNTbTlpY3k1bWFXNWtLQ2hxYjJJNklFcHZZaWtnUFQ0Z2JtRnRaVlJ2U205aVJXNTFiVnRxYjJKZElEMDlQU0JwWkNrN1hISmNiaUFnSUNCeVpYUjFjbTRnYW05aUlEOC9JQ2RPVDA1Rkp6dGNjbHh1SUNCOUxGeHlYRzRnSUdwdllsUnZTbTlpUlc1MWJUb2dLR3B2WWpvZ1NtOWlLU0E5UGlCdVlXMWxWRzlLYjJKRmJuVnRXMnB2WWwwc1hISmNiaUFnYW05aVZHOVNiMnhsT2lBb2FtOWlPaUJLYjJJcElEMCtJSHRjY2x4dUlDQWdJR052Ym5OMElISnZiR1VnUFNCcWIySlViMUp2YkdWTllYQXVaMlYwS0dwdllpazdYSEpjYmlBZ0lDQnlaWFIxY200Z2NtOXNaU0EvUHlBbmJtOXVaU2M3WEhKY2JpQWdmU3hjY2x4dUlDQm5aWFJCYkd4U2IyeGxjem9nS0NrNklISmxZV1J2Ym14NUlGSnZiR1ZiWFNBOVBpQmhiR3hTYjJ4bGN5eGNjbHh1SUNCcGMxUmhibXRLYjJJNklDaHFiMkk2SUVwdllpa2dQVDRnZEdGdWEwcHZZbk11YVc1amJIVmtaWE1vYW05aUtTeGNjbHh1SUNCcGMwaGxZV3hsY2twdllqb2dLR3B2WWpvZ1NtOWlLU0E5UGlCb1pXRnNaWEpLYjJKekxtbHVZMngxWkdWektHcHZZaWtzWEhKY2JpQWdhWE5OWld4bFpVUndjMHB2WWpvZ0tHcHZZam9nU205aUtTQTlQaUJ0Wld4bFpVUndjMHB2WW5NdWFXNWpiSFZrWlhNb2FtOWlLU3hjY2x4dUlDQnBjMUpoYm1kbFpFUndjMHB2WWpvZ0tHcHZZam9nU205aUtTQTlQaUJ5WVc1blpXUkVjSE5LYjJKekxtbHVZMngxWkdWektHcHZZaWtzWEhKY2JpQWdhWE5EWVhOMFpYSkVjSE5LYjJJNklDaHFiMkk2SUVwdllpa2dQVDRnWTJGemRHVnlSSEJ6U205aWN5NXBibU5zZFdSbGN5aHFiMklwTEZ4eVhHNGdJR2x6UkhCelNtOWlPaUFvYW05aU9pQktiMklwSUQwK0lHUndjMHB2WW5NdWFXNWpiSFZrWlhNb2FtOWlLU3hjY2x4dUlDQnBjME55WVdaMGFXNW5TbTlpT2lBb2FtOWlPaUJLYjJJcElEMCtJR055WVdaMGFXNW5TbTlpY3k1cGJtTnNkV1JsY3locWIySXBMRnh5WEc0Z0lHbHpSMkYwYUdWeWFXNW5TbTlpT2lBb2FtOWlPaUJLYjJJcElEMCtJR2RoZEdobGNtbHVaMHB2WW5NdWFXNWpiSFZrWlhNb2FtOWlLU3hjY2x4dUlDQnBjME52YldKaGRFcHZZam9nS0dwdllqb2dTbTlpS1NBOVBpQjdYSEpjYmlBZ0lDQnlaWFIxY200Z0lXTnlZV1owYVc1blNtOWljeTVwYm1Oc2RXUmxjeWhxYjJJcElDWW1JQ0ZuWVhSb1pYSnBibWRLYjJKekxtbHVZMngxWkdWektHcHZZaWs3WEhKY2JpQWdmU3hjY2x4dUlDQmpZVzVUZEhWdU9pQW9hbTlpT2lCS2IySXBJRDArSUhOMGRXNUtiMkp6TG1sdVkyeDFaR1Z6S0dwdllpa3NYSEpjYmlBZ1kyRnVVMmxzWlc1alpUb2dLR3B2WWpvZ1NtOWlLU0E5UGlCemFXeGxibU5sU205aWN5NXBibU5zZFdSbGN5aHFiMklwTEZ4eVhHNGdJR05oYmxOc1pXVndPaUFvYW05aU9pQktiMklwSUQwK0lITnNaV1Z3U205aWN5NXBibU5zZFdSbGN5aHFiMklwTEZ4eVhHNGdJR05oYmtOc1pXRnVjMlU2SUNocWIySTZJRXB2WWlrZ1BUNGdZMnhsWVc1elpVcHZZbk11YVc1amJIVmtaWE1vYW05aUtTeGNjbHh1SUNCallXNUdaV2x1ZERvZ0tHcHZZam9nU205aUtTQTlQaUJtWldsdWRFcHZZbk11YVc1amJIVmtaWE1vYW05aUtTeGNjbHh1SUNCallXNUJaR1JzWlRvZ0tHcHZZam9nU205aUtTQTlQaUJoWkdSc1pVcHZZbk11YVc1amJIVmtaWE1vYW05aUtTeGNjbHh1ZlNCaGN5QmpiMjV6ZER0Y2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRlYwYVd3N1hISmNiaUlzSW1sdGNHOXlkQ0JNYVc1bFJYWmxiblFzSUhzZ1RHbHVaVVYyWlc1MFNtOWlUR1YyWld3c0lFeHBibVZGZG1WdWRGTnZkWEpqWlNCOUlHWnliMjBnSnk0dlRHbHVaVVYyWlc1MEp6dGNjbHh1YVcxd2IzSjBJRVZ0ZFd4aGRHOXlRMjl0Ylc5dUlHWnliMjBnSnk0dUx5NHVMMFZ0ZFd4aGRHOXlRMjl0Ylc5dUp6dGNjbHh1YVcxd2IzSjBJRlYwYVd3Z1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZjbVZ6YjNWeVkyVnpMM1YwYVd3bk8xeHlYRzVwYlhCdmNuUWdURzluVW1Wd2IzTnBkRzl5ZVNCbWNtOXRJQ2N1TDB4dloxSmxjRzl6YVhSdmNua25PMXh5WEc1cGJYQnZjblFnZXlCS2IySWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTh1TGk5MGVYQmxjeTlxYjJJbk8xeHlYRzVjY2x4dVkyOXVjM1FnWm1sbGJHUnpJRDBnZTF4eVhHNGdJR2xrT2lBeUxGeHlYRzRnSUc1aGJXVTZJRE1zWEhKY2JpQWdhbTlpU1dSSVpYZzZJRFFzWEhKY2JpQWdiR1YyWld4VGRISnBibWM2SURVc1hISmNiaUFnYjNkdVpYSkpaRG9nTml4Y2NseHVJQ0IzYjNKc1pFbGtPaUEzTEZ4eVhHNGdJSGR2Y214a1RtRnRaVG9nT0N4Y2NseHVJQ0J1Y0dOT1lXMWxTV1E2SURrc1hISmNiaUFnYm5CalFtRnpaVWxrT2lBeE1DeGNjbHh1SUNCamRYSnlaVzUwU0hBNklERXhMRnh5WEc0Z0lHMWhlRWh3VTNSeWFXNW5PaUF4TkN4Y2NseHVJQ0JqZFhKeVpXNTBUWEE2SURFekxGeHlYRzRnSUcxaGVFMXdVM1J5YVc1bk9pQXhOQ3hjY2x4dUlDQmpkWEp5Wlc1MFZIQTZJREUxTEZ4eVhHNGdJRzFoZUZSd09pQXhOaXhjY2x4dUlDQjRVM1J5YVc1bk9pQXhOeXhjY2x4dUlDQjVVM1J5YVc1bk9pQXhPQ3hjY2x4dUlDQjZVM1J5YVc1bk9pQXhPU3hjY2x4dUlDQm9aV0ZrYVc1bk9pQXlNQ3hjY2x4dWZTQmhjeUJqYjI1emREdGNjbHh1WEhKY2JpOHZJRUZrWkdWa0lHTnZiV0poZEdGdWRDQmxkbVZ1ZEZ4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nVEdsdVpVVjJaVzUwTUhnd015QmxlSFJsYm1SeklFeHBibVZGZG1WdWRDQnBiWEJzWlcxbGJuUnpJRXhwYm1WRmRtVnVkRk52ZFhKalpTd2dUR2x1WlVWMlpXNTBTbTlpVEdWMlpXd2dlMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCcFpEb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J1WVcxbE9pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR3B2WWtsa1NHVjRPaUJ6ZEhKcGJtYzdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdwdllrbGtPaUJ1ZFcxaVpYSTdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdwdllqb2dTbTlpTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQnNaWFpsYkZOMGNtbHVaem9nYzNSeWFXNW5PMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCc1pYWmxiRG9nYm5WdFltVnlPMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCdmQyNWxja2xrT2lCemRISnBibWM3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIZHZjbXhrU1dRNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dkMjl5YkdST1lXMWxPaUJ6ZEhKcGJtYzdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUc1d1kwNWhiV1ZKWkRvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQnVjR05DWVhObFNXUTZJSE4wY21sdVp6dGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYUhBNklHNTFiV0psY2p0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2diV0Y0U0hCVGRISnBibWM2SUhOMGNtbHVaenRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2JXRjRTSEE2SUc1MWJXSmxjanRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2JYQTZJRzUxYldKbGNqdGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYldGNFRYQlRkSEpwYm1jNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2diV0Y0VFhBNklHNTFiV0psY2p0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dkSEE2SUc1MWJXSmxjanRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2JXRjRWSEE2SUc1MWJXSmxjanRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2VGTjBjbWx1WnpvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQjRPaUJ1ZFcxaVpYSTdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhsVGRISnBibWM2SUhOMGNtbHVaenRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2VUb2diblZ0WW1WeU8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0I2VTNSeWFXNW5PaUJ6ZEhKcGJtYzdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhvNklHNTFiV0psY2p0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dhR1ZoWkdsdVp6b2diblZ0WW1WeU8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0JwYzFOdmRYSmpaU0E5SUhSeWRXVTdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdselNtOWlUR1YyWld3Z1BTQjBjblZsTzF4eVhHNWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaHlaWEJ2T2lCTWIyZFNaWEJ2YzJsMGIzSjVMQ0JzYVc1bE9pQnpkSEpwYm1jc0lIQmhjblJ6T2lCemRISnBibWRiWFNrZ2UxeHlYRzRnSUNBZ2MzVndaWElvY21Wd2J5d2diR2x1WlN3Z2NHRnlkSE1wTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11YVdRZ1BTQndZWEowYzF0bWFXVnNaSE11YVdSZFB5NTBiMVZ3Y0dWeVEyRnpaU2dwSUQ4L0lDY25PMXh5WEc0Z0lDQWdkR2hwY3k1dVlXMWxJRDBnY0dGeWRITmJabWxsYkdSekxtNWhiV1ZkSUQ4L0lDY25PMXh5WEc0Z0lDQWdkR2hwY3k1cWIySkpaRWhsZUNBOUlIQmhjblJ6VzJacFpXeGtjeTVxYjJKSlpFaGxlRjAvTG5SdlZYQndaWEpEWVhObEtDa2dQejhnSnljN1hISmNiaUFnSUNCMGFHbHpMbXB2WWtsa0lEMGdjR0Z5YzJWSmJuUW9kR2hwY3k1cWIySkpaRWhsZUN3Z01UWXBPMXh5WEc0Z0lDQWdkR2hwY3k1cWIySWdQU0JWZEdsc0xtcHZZa1Z1ZFcxVWIwcHZZaWgwYUdsekxtcHZZa2xrS1R0Y2NseHVJQ0FnSUhSb2FYTXViR1YyWld4VGRISnBibWNnUFNCd1lYSjBjMXRtYVdWc1pITXViR1YyWld4VGRISnBibWRkSUQ4L0lDY25PMXh5WEc0Z0lDQWdkR2hwY3k1c1pYWmxiQ0E5SUhCaGNuTmxSbXh2WVhRb2RHaHBjeTVzWlhabGJGTjBjbWx1WnlrN1hISmNiaUFnSUNCMGFHbHpMbTkzYm1WeVNXUWdQU0J3WVhKMGMxdG1hV1ZzWkhNdWIzZHVaWEpKWkYwL0xuUnZWWEJ3WlhKRFlYTmxLQ2tnUHo4Z0p5YzdYSEpjYmlBZ0lDQjBhR2x6TG5kdmNteGtTV1FnUFNCd1lYSjBjMXRtYVdWc1pITXVkMjl5YkdSSlpGMGdQejhnSnljN1hISmNiaUFnSUNCMGFHbHpMbmR2Y214a1RtRnRaU0E5SUhCaGNuUnpXMlpwWld4a2N5NTNiM0pzWkU1aGJXVmRJRDgvSUNjbk8xeHlYRzRnSUNBZ2RHaHBjeTV1Y0dOT1lXMWxTV1FnUFNCd1lYSjBjMXRtYVdWc1pITXVibkJqVG1GdFpVbGtYU0EvUHlBbkp6dGNjbHh1SUNBZ0lIUm9hWE11Ym5CalFtRnpaVWxrSUQwZ2NHRnlkSE5iWm1sbGJHUnpMbTV3WTBKaGMyVkpaRjBnUHo4Z0p5YzdYSEpjYmlBZ0lDQjBhR2x6TG1od0lEMGdjR0Z5YzJWR2JHOWhkQ2h3WVhKMGMxdG1hV1ZzWkhNdVkzVnljbVZ1ZEVod1hTQS9QeUFuSnlrN1hISmNiaUFnSUNCMGFHbHpMbTFoZUVod1UzUnlhVzVuSUQwZ2NHRnlkSE5iWm1sbGJHUnpMbTFoZUVod1UzUnlhVzVuWFNBL1B5QW5KenRjY2x4dUlDQWdJSFJvYVhNdWJXRjRTSEFnUFNCd1lYSnpaVVpzYjJGMEtIUm9hWE11YldGNFNIQlRkSEpwYm1jcE8xeHlYRzRnSUNBZ2RHaHBjeTV0Y0NBOUlIQmhjbk5sUm14dllYUW9jR0Z5ZEhOYlptbGxiR1J6TG1OMWNuSmxiblJOY0YwZ1B6OGdKeWNwTzF4eVhHNGdJQ0FnZEdocGN5NXRZWGhOY0ZOMGNtbHVaeUE5SUhCaGNuUnpXMlpwWld4a2N5NXRZWGhOY0ZOMGNtbHVaMTBnUHo4Z0p5YzdYSEpjYmlBZ0lDQjBhR2x6TG0xaGVFMXdJRDBnY0dGeWMyVkdiRzloZENoMGFHbHpMbTFoZUUxd1UzUnlhVzVuS1R0Y2NseHVJQ0FnSUhSb2FYTXVkSEFnUFNCd1lYSnpaVVpzYjJGMEtIQmhjblJ6VzJacFpXeGtjeTVqZFhKeVpXNTBWSEJkSUQ4L0lDY25LVHRjY2x4dUlDQWdJSFJvYVhNdWJXRjRWSEFnUFNCd1lYSnpaVVpzYjJGMEtIQmhjblJ6VzJacFpXeGtjeTV0WVhoVWNGMGdQejhnSnljcE8xeHlYRzRnSUNBZ2RHaHBjeTU0VTNSeWFXNW5JRDBnY0dGeWRITmJabWxsYkdSekxuaFRkSEpwYm1kZElEOC9JQ2NuTzF4eVhHNGdJQ0FnZEdocGN5NTRJRDBnY0dGeWMyVkdiRzloZENoMGFHbHpMbmhUZEhKcGJtY3BPMXh5WEc0Z0lDQWdkR2hwY3k1NVUzUnlhVzVuSUQwZ2NHRnlkSE5iWm1sbGJHUnpMbmxUZEhKcGJtZGRJRDgvSUNjbk8xeHlYRzRnSUNBZ2RHaHBjeTU1SUQwZ2NHRnljMlZHYkc5aGRDaDBhR2x6TG5sVGRISnBibWNwTzF4eVhHNGdJQ0FnZEdocGN5NTZVM1J5YVc1bklEMGdjR0Z5ZEhOYlptbGxiR1J6TG5wVGRISnBibWRkSUQ4L0lDY25PMXh5WEc0Z0lDQWdkR2hwY3k1NklEMGdjR0Z5YzJWR2JHOWhkQ2gwYUdsekxucFRkSEpwYm1jcE8xeHlYRzRnSUNBZ2RHaHBjeTVvWldGa2FXNW5JRDBnY0dGeWMyVkdiRzloZENod1lYSjBjMXRtYVdWc1pITXVhR1ZoWkdsdVoxMGdQejhnSnljcE8xeHlYRzVjY2x4dUlDQWdJSEpsY0c4dWRYQmtZWFJsUTI5dFltRjBZVzUwS0hSb2FYTXVhV1FzSUh0Y2NseHVJQ0FnSUNBZ2JtRnRaVG9nZEdocGN5NXVZVzFsTEZ4eVhHNGdJQ0FnSUNCemNHRjNiam9nZEdocGN5NTBhVzFsYzNSaGJYQXNYSEpjYmlBZ0lDQWdJR1JsYzNCaGQyNDZJSFJvYVhNdWRHbHRaWE4wWVcxd0xGeHlYRzRnSUNBZ0lDQnFiMkk2SUhSb2FYTXVhbTlpU1dSSVpYZ3NYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCc1pYUWdZMjl0WW1GMFlXNTBUbUZ0WlNBOUlIUm9hWE11Ym1GdFpUdGNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxuZHZjbXhrVG1GdFpTQWhQVDBnSnljcFhISmNiaUFnSUNBZ0lHTnZiV0poZEdGdWRFNWhiV1VnUFNCamIyMWlZWFJoYm5ST1lXMWxJQ3NnSnlnbklDc2dkR2hwY3k1M2IzSnNaRTVoYldVZ0t5QW5LU2M3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVqYjI1MlpYSjBaV1JNYVc1bElEMGdkR2hwY3k1d2NtVm1hWGdvS1NBcklIUm9hWE11YVdRdWRHOVZjSEJsY2tOaGMyVW9LU0FyWEhKY2JpQWdJQ0FnSUNjNlFXUmtaV1FnYm1WM0lHTnZiV0poZEdGdWRDQW5JQ3NnWTI5dFltRjBZVzUwVG1GdFpTQXJYSEpjYmlBZ0lDQWdJQ2N1SUNCS2IySTZJQ2NnS3lCMGFHbHpMbXB2WWlBclhISmNiaUFnSUNBZ0lDY2dUR1YyWld3NklDY2dLeUIwYUdsekxteGxkbVZzVTNSeWFXNW5JQ3RjY2x4dUlDQWdJQ0FnSnlCTllYZ2dTRkE2SUNjZ0t5QjBhR2x6TG0xaGVFaHdVM1J5YVc1bklDdGNjbHh1SUNBZ0lDQWdKeUJOWVhnZ1RWQTZJQ2NnS3lCMGFHbHpMbTFoZUUxd1UzUnlhVzVuSUN0Y2NseHVJQ0FnSUNBZ0p5QlFiM002SUNnbklDc2dkR2hwY3k1NFUzUnlhVzVuSUNzZ0p5d25JQ3NnZEdocGN5NTVVM1J5YVc1bklDc2dKeXduSUNzZ2RHaHBjeTU2VTNSeWFXNW5JQ3NnSnlrbk8xeHlYRzVjY2x4dUlDQWdJQzh2SUZSb2FYTWdiR0Z6ZENCd1lYSjBJR2x6SUdkMVpYTnpkMjl5YXlCbWIzSWdkR2hsSUdGeVpXRWdZbVYwZDJWbGJpQTVJR0Z1WkNBeE1DNWNjbHh1SUNBZ0lHTnZibk4wSUhWdWEyNXZkMjVXWVd4MVpTQTlJSFJvYVhNdWJuQmpUbUZ0WlVsa0lDdGNjbHh1SUNBZ0lDQWdSVzExYkdGMGIzSkRiMjF0YjI0dWVtVnliMUJoWkNoMGFHbHpMbTV3WTBKaGMyVkpaQ3dnT0NBcklFMWhkR2d1YldGNEtEQXNJRFlnTFNCMGFHbHpMbTV3WTA1aGJXVkpaQzVzWlc1bmRHZ3BLVHRjY2x4dVhISmNiaUFnSUNCcFppQW9kVzVyYm05M2JsWmhiSFZsSUNFOVBTQW5NREF3TURBd01EQXdNREF3TURBbktWeHlYRzRnSUNBZ0lDQjBhR2x6TG1OdmJuWmxjblJsWkV4cGJtVWdLejBnSnlBb0p5QXJJSFZ1YTI1dmQyNVdZV3gxWlNBcklDY3BKenRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbU52Ym5abGNuUmxaRXhwYm1VZ0t6MGdKeTRuTzF4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdOc1lYTnpJRXhwYm1WRmRtVnVkREF6SUdWNGRHVnVaSE1nVEdsdVpVVjJaVzUwTUhnd015QjdJSDFjY2x4dUlpd2lhVzF3YjNKMElIc2dUR2x1WlVWMlpXNTBNSGd3TXlCOUlHWnliMjBnSnk0dlRHbHVaVVYyWlc1ME1IZ3dNeWM3WEhKY2JtbHRjRzl5ZENCTWIyZFNaWEJ2YzJsMGIzSjVJR1p5YjIwZ0p5NHZURzluVW1Wd2IzTnBkRzl5ZVNjN1hISmNibHh5WEc0dkx5QlNaVzF2ZG1Wa0lHTnZiV0poZEdGdWRDQmxkbVZ1ZEZ4eVhHNHZMeUJGZUhSbGJtUWdkR2hsSUdGa1pDQmpiMjFpWVhSaGJuUWdaWFpsYm5RZ2RHOGdjbVZrZFdObElHUjFjR3hwWTJGMFpTQmpiMlJsSUhOcGJtTmxJSFJvWlhrbmNtVmNjbHh1THk4Z2RHaGxJSE5oYldVZ1puSnZiU0JoSUdSaGRHRWdjR1Z5YzNCbFkzUnBkbVZjY2x4dVpYaHdiM0owSUdOc1lYTnpJRXhwYm1WRmRtVnVkREI0TURRZ1pYaDBaVzVrY3lCTWFXNWxSWFpsYm5Rd2VEQXpJSHRjY2x4dUlDQmpiMjV6ZEhKMVkzUnZjaWh5WlhCdk9pQk1iMmRTWlhCdmMybDBiM0o1TENCc2FXNWxPaUJ6ZEhKcGJtY3NJSEJoY25Sek9pQnpkSEpwYm1kYlhTa2dlMXh5WEc0Z0lDQWdjM1Z3WlhJb2NtVndieXdnYkdsdVpTd2djR0Z5ZEhNcE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVkyOXVkbVZ5ZEdWa1RHbHVaU0E5SUhSb2FYTXVjSEpsWm1sNEtDa2dLeUIwYUdsekxtbGtMblJ2VlhCd1pYSkRZWE5sS0NrZ0sxeHlYRzRnSUNBZ0lDQW5PbEpsYlc5MmFXNW5JR052YldKaGRHRnVkQ0FuSUNzZ2RHaHBjeTV1WVcxbElDdGNjbHh1SUNBZ0lDQWdKeTRnVFdGNElFMVFPaUFuSUNzZ2RHaHBjeTV0WVhoTmNGTjBjbWx1WnlBclhISmNiaUFnSUNBZ0lDY3VJRkJ2Y3pvZ0tDY2dLeUIwYUdsekxuaFRkSEpwYm1jZ0t5QW5MQ2NnS3lCMGFHbHpMbmxUZEhKcGJtY2dLeUFuTENjZ0t5QjBhR2x6TG5wVGRISnBibWNnS3lBbktTYzdYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1RHbHVaVVYyWlc1ME1EUWdaWGgwWlc1a2N5Qk1hVzVsUlhabGJuUXdlREEwSUhzZ2ZWeHlYRzRpTENKcGJYQnZjblFnVEdsdVpVVjJaVzUwSUdaeWIyMGdKeTR2VEdsdVpVVjJaVzUwSnp0Y2NseHVhVzF3YjNKMElFeHZaMUpsY0c5emFYUnZjbmtnWm5KdmJTQW5MaTlNYjJkU1pYQnZjMmwwYjNKNUp6dGNjbHh1WEhKY2JtTnZibk4wSUdacFpXeGtjeUE5SUh0Y2NseHVJQ0JqYkdGemN6b2dNaXhjY2x4dUlDQnpkSEpsYm1kMGFEb2dNeXhjY2x4dUlDQmtaWGgwWlhKcGRIazZJRFFzWEhKY2JpQWdkbWwwWVd4cGRIazZJRFVzWEhKY2JpQWdhVzUwWld4c2FXZGxibU5sT2lBMkxGeHlYRzRnSUcxcGJtUTZJRGNzWEhKY2JpQWdjR2xsZEhrNklEZ3NYSEpjYmlBZ1lYUjBZV05yVUc5M1pYSTZJRGtzWEhKY2JpQWdaR2x5WldOMFNHbDBPaUF4TUN4Y2NseHVJQ0JqY21sMGFXTmhiRWhwZERvZ01URXNYSEpjYmlBZ1lYUjBZV05yVFdGbmFXTlFiM1JsYm1ONU9pQXhNaXhjY2x4dUlDQm9aV0ZzVFdGbmFXTlFiM1JsYm1ONU9pQXhNeXhjY2x4dUlDQmtaWFJsY20xcGJtRjBhVzl1T2lBeE5DeGNjbHh1SUNCemEybHNiRk53WldWa09pQXhOU3hjY2x4dUlDQnpjR1ZzYkZOd1pXVmtPaUF4Tml4Y2NseHVJQ0IwWlc1aFkybDBlVG9nTVRnc1hISmNibjBnWVhNZ1kyOXVjM1E3WEhKY2JseHlYRzR2THlCUWJHRjVaWElnYzNSaGRITWdaWFpsYm5SY2NseHVaWGh3YjNKMElHTnNZWE56SUV4cGJtVkZkbVZ1ZERCNE1FTWdaWGgwWlc1a2N5Qk1hVzVsUlhabGJuUWdlMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCamJHRnpjem9nYzNSeWFXNW5PMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCemRISmxibWQwYURvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQmtaWGgwWlhKcGRIazZJSE4wY21sdVp6dGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnZG1sMFlXeHBkSGs2SUhOMGNtbHVaenRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2FXNTBaV3hzYVdkbGJtTmxPaUJ6ZEhKcGJtYzdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUcxcGJtUTZJSE4wY21sdVp6dGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnY0dsbGRIazZJSE4wY21sdVp6dGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnWVhSMFlXTnJVRzkzWlhJNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2daR2x5WldOMFNHbDBPaUJ6ZEhKcGJtYzdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdOeWFYUnBZMkZzU0dsME9pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR0YwZEdGamEwMWhaMmxqVUc5MFpXNWplVG9nYzNSeWFXNW5PMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCb1pXRnNUV0ZuYVdOUWIzUmxibU41T2lCemRISnBibWM3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHUmxkR1Z5YldsdVlYUnBiMjQ2SUhOMGNtbHVaenRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2MydHBiR3hUY0dWbFpEb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J6Y0dWc2JGTndaV1ZrT2lCemRISnBibWM3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIUmxibUZqYVhSNU9pQnpkSEpwYm1jN1hISmNibHh5WEc0Z0lHTnZibk4wY25WamRHOXlLSEpsY0c4NklFeHZaMUpsY0c5emFYUnZjbmtzSUd4cGJtVTZJSE4wY21sdVp5d2djR0Z5ZEhNNklITjBjbWx1WjF0ZEtTQjdYSEpjYmlBZ0lDQnpkWEJsY2loeVpYQnZMQ0JzYVc1bExDQndZWEowY3lrN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1amJHRnpjeUE5SUhCaGNuUnpXMlpwWld4a2N5NWpiR0Z6YzEwZ1B6OGdKeWM3WEhKY2JpQWdJQ0IwYUdsekxuTjBjbVZ1WjNSb0lEMGdjR0Z5ZEhOYlptbGxiR1J6TG5OMGNtVnVaM1JvWFNBL1B5QW5KenRjY2x4dUlDQWdJSFJvYVhNdVpHVjRkR1Z5YVhSNUlEMGdjR0Z5ZEhOYlptbGxiR1J6TG1SbGVIUmxjbWwwZVYwZ1B6OGdKeWM3WEhKY2JpQWdJQ0IwYUdsekxuWnBkR0ZzYVhSNUlEMGdjR0Z5ZEhOYlptbGxiR1J6TG5acGRHRnNhWFI1WFNBL1B5QW5KenRjY2x4dUlDQWdJSFJvYVhNdWFXNTBaV3hzYVdkbGJtTmxJRDBnY0dGeWRITmJabWxsYkdSekxtbHVkR1ZzYkdsblpXNWpaVjBnUHo4Z0p5YzdYSEpjYmlBZ0lDQjBhR2x6TG0xcGJtUWdQU0J3WVhKMGMxdG1hV1ZzWkhNdWJXbHVaRjBnUHo4Z0p5YzdYSEpjYmlBZ0lDQjBhR2x6TG5CcFpYUjVJRDBnY0dGeWRITmJabWxsYkdSekxuQnBaWFI1WFNBL1B5QW5KenRjY2x4dUlDQWdJSFJvYVhNdVlYUjBZV05yVUc5M1pYSWdQU0J3WVhKMGMxdG1hV1ZzWkhNdVlYUjBZV05yVUc5M1pYSmRJRDgvSUNjbk8xeHlYRzRnSUNBZ2RHaHBjeTVrYVhKbFkzUklhWFFnUFNCd1lYSjBjMXRtYVdWc1pITXVaR2x5WldOMFNHbDBYU0EvUHlBbkp6dGNjbHh1SUNBZ0lIUm9hWE11WTNKcGRHbGpZV3hJYVhRZ1BTQndZWEowYzF0bWFXVnNaSE11WTNKcGRHbGpZV3hJYVhSZElEOC9JQ2NuTzF4eVhHNGdJQ0FnZEdocGN5NWhkSFJoWTJ0TllXZHBZMUJ2ZEdWdVkza2dQU0J3WVhKMGMxdG1hV1ZzWkhNdVlYUjBZV05yVFdGbmFXTlFiM1JsYm1ONVhTQS9QeUFuSnp0Y2NseHVJQ0FnSUhSb2FYTXVhR1ZoYkUxaFoybGpVRzkwWlc1amVTQTlJSEJoY25SelcyWnBaV3hrY3k1b1pXRnNUV0ZuYVdOUWIzUmxibU41WFNBL1B5QW5KenRjY2x4dUlDQWdJSFJvYVhNdVpHVjBaWEp0YVc1aGRHbHZiaUE5SUhCaGNuUnpXMlpwWld4a2N5NWtaWFJsY20xcGJtRjBhVzl1WFNBL1B5QW5KenRjY2x4dUlDQWdJSFJvYVhNdWMydHBiR3hUY0dWbFpDQTlJSEJoY25SelcyWnBaV3hrY3k1emEybHNiRk53WldWa1hTQS9QeUFuSnp0Y2NseHVJQ0FnSUhSb2FYTXVjM0JsYkd4VGNHVmxaQ0E5SUhCaGNuUnpXMlpwWld4a2N5NXpjR1ZzYkZOd1pXVmtYU0EvUHlBbkp6dGNjbHh1SUNBZ0lIUm9hWE11ZEdWdVlXTnBkSGtnUFNCd1lYSjBjMXRtYVdWc1pITXVkR1Z1WVdOcGRIbGRJRDgvSUNjbk8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVkyOXVkbVZ5ZEdWa1RHbHVaU0E5SUhSb2FYTXVjSEpsWm1sNEtDa2dLMXh5WEc0Z0lDQWdJQ0FuVUd4aGVXVnlJRk4wWVhSek9pQW5JQ3NnY0dGeWRITXVjMnhwWTJVb01pd2djR0Z5ZEhNdWJHVnVaM1JvSUMwZ01Ta3VhbTlwYmlnbk9pY3BMbkpsY0d4aFkyVW9MMXhjZkM5bkxDQW5PaWNwTzF4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdOc1lYTnpJRXhwYm1WRmRtVnVkREV5SUdWNGRHVnVaSE1nVEdsdVpVVjJaVzUwTUhnd1F5QjdJSDFjY2x4dUlpd2lhVzF3YjNKMElFeHBibVZGZG1WdWRDd2dleUJNYVc1bFJYWmxiblJCWW1sc2FYUjVMQ0JNYVc1bFJYWmxiblJUYjNWeVkyVXNJRXhwYm1WRmRtVnVkRlJoY21kbGRDQjlJR1p5YjIwZ0p5NHZUR2x1WlVWMlpXNTBKenRjY2x4dWFXMXdiM0owSUVWdGRXeGhkRzl5UTI5dGJXOXVJR1p5YjIwZ0p5NHVMeTR1TDBWdGRXeGhkRzl5UTI5dGJXOXVKenRjY2x4dWFXMXdiM0owSUV4dloxSmxjRzl6YVhSdmNua2dabkp2YlNBbkxpOU1iMmRTWlhCdmMybDBiM0o1Snp0Y2NseHVYSEpjYm1OdmJuTjBJR1pwWld4a2N5QTlJSHRjY2x4dUlDQnBaRG9nTWl4Y2NseHVJQ0J1WVcxbE9pQXpMRnh5WEc0Z0lHRmlhV3hwZEhsSlpEb2dOQ3hjY2x4dUlDQmhZbWxzYVhSNVRtRnRaVG9nTlN4Y2NseHVJQ0IwWVhKblpYUkpaRG9nTml4Y2NseHVJQ0IwWVhKblpYUk9ZVzFsT2lBM0xGeHlYRzRnSUdSMWNtRjBhVzl1T2lBNExGeHlYRzU5SUdGeklHTnZibk4wTzF4eVhHNWNjbHh1THk4Z1FXSnBiR2wwZVNCMWMyVWdaWFpsYm5SY2NseHVaWGh3YjNKMElHTnNZWE56SUV4cGJtVkZkbVZ1ZERCNE1UUWdaWGgwWlc1a2N5Qk1hVzVsUlhabGJuUmNjbHh1SUNCcGJYQnNaVzFsYm5SeklFeHBibVZGZG1WdWRGTnZkWEpqWlN3Z1RHbHVaVVYyWlc1MFZHRnlaMlYwTENCTWFXNWxSWFpsYm5SQlltbHNhWFI1SUh0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2djSEp2Y0dWeVEyRnpaVU52Ym5abGNuUmxaRXhwYm1VNklITjBjbWx1Wnp0Y2NseHVYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdsa09pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJRzVoYldVNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dZV0pwYkdsMGVVbGtPaUJ1ZFcxaVpYSTdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdGaWFXeHBkSGxKWkVobGVEb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0JoWW1sc2FYUjVUbUZ0WlRvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQjBZWEpuWlhSSlpEb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0IwWVhKblpYUk9ZVzFsT2lCemRISnBibWM3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHUjFjbUYwYVc5dU9pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR2x6VTI5MWNtTmxJRDBnZEhKMVpUdGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYVhOVVlYSm5aWFFnUFNCMGNuVmxPMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCcGMwRmlhV3hwZEhrZ1BTQjBjblZsTzF4eVhHNWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaHlaWEJ2T2lCTWIyZFNaWEJ2YzJsMGIzSjVMQ0JzYVc1bE9pQnpkSEpwYm1jc0lIQmhjblJ6T2lCemRISnBibWRiWFNrZ2UxeHlYRzRnSUNBZ2MzVndaWElvY21Wd2J5d2diR2x1WlN3Z2NHRnlkSE1wTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11YVdRZ1BTQndZWEowYzF0bWFXVnNaSE11YVdSZFB5NTBiMVZ3Y0dWeVEyRnpaU2dwSUQ4L0lDY25PMXh5WEc0Z0lDQWdkR2hwY3k1dVlXMWxJRDBnY0dGeWRITmJabWxsYkdSekxtNWhiV1ZkSUQ4L0lDY25PMXh5WEc0Z0lDQWdkR2hwY3k1aFltbHNhWFI1U1dSSVpYZ2dQU0J3WVhKMGMxdG1hV1ZzWkhNdVlXSnBiR2wwZVVsa1hUOHVkRzlWY0hCbGNrTmhjMlVvS1NBL1B5QW5KenRjY2x4dUlDQWdJSFJvYVhNdVlXSnBiR2wwZVVsa0lEMGdjR0Z5YzJWSmJuUW9kR2hwY3k1aFltbHNhWFI1U1dSSVpYZ3BPMXh5WEc0Z0lDQWdkR2hwY3k1aFltbHNhWFI1VG1GdFpTQTlJSEJoY25SelcyWnBaV3hrY3k1aFltbHNhWFI1VG1GdFpWMGdQejhnSnljN1hISmNiaUFnSUNCMGFHbHpMblJoY21kbGRFbGtJRDBnY0dGeWRITmJabWxsYkdSekxuUmhjbWRsZEVsa1hUOHVkRzlWY0hCbGNrTmhjMlVvS1NBL1B5QW5KenRjY2x4dUlDQWdJSFJvYVhNdWRHRnlaMlYwVG1GdFpTQTlJSEJoY25SelcyWnBaV3hrY3k1MFlYSm5aWFJPWVcxbFhTQS9QeUFuSnp0Y2NseHVJQ0FnSUhSb2FYTXVaSFZ5WVhScGIyNGdQU0J3WVhKMGMxdG1hV1ZzWkhNdVpIVnlZWFJwYjI1ZElEOC9JQ2NuTzF4eVhHNWNjbHh1SUNBZ0lISmxjRzh1ZFhCa1lYUmxRMjl0WW1GMFlXNTBLSFJvYVhNdWFXUXNJSHRjY2x4dUlDQWdJQ0FnYW05aU9pQjFibVJsWm1sdVpXUXNYSEpjYmlBZ0lDQWdJRzVoYldVNklIUm9hWE11Ym1GdFpTeGNjbHh1SUNBZ0lDQWdjM0JoZDI0NklIUm9hWE11ZEdsdFpYTjBZVzF3TEZ4eVhHNGdJQ0FnSUNCa1pYTndZWGR1T2lCMGFHbHpMblJwYldWemRHRnRjQ3hjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lISmxjRzh1ZFhCa1lYUmxRMjl0WW1GMFlXNTBLSFJvYVhNdWRHRnlaMlYwU1dRc0lIdGNjbHh1SUNBZ0lDQWdhbTlpT2lCMWJtUmxabWx1WldRc1hISmNiaUFnSUNBZ0lHNWhiV1U2SUhSb2FYTXVkR0Z5WjJWMFRtRnRaU3hjY2x4dUlDQWdJQ0FnYzNCaGQyNDZJSFJvYVhNdWRHbHRaWE4wWVcxd0xGeHlYRzRnSUNBZ0lDQmtaWE53WVhkdU9pQjBhR2x6TG5ScGJXVnpkR0Z0Y0N4Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJR052Ym5OMElIUmhjbWRsZENBOUlIUm9hWE11ZEdGeVoyVjBUbUZ0WlM1c1pXNW5kR2dnUFQwOUlEQWdQeUFuVlc1cmJtOTNiaWNnT2lCMGFHbHpMblJoY21kbGRFNWhiV1U3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVqYjI1MlpYSjBaV1JNYVc1bElEMGdkR2hwY3k1d2NtVm1hWGdvS1NBcklIUm9hWE11WVdKcGJHbDBlVWxrU0dWNElDdGNjbHh1SUNBZ0lDQWdKem9uSUNzZ2RHaHBjeTV1WVcxbElDdGNjbHh1SUNBZ0lDQWdKeUJ6ZEdGeWRITWdkWE5wYm1jZ0p5QXJJSFJvYVhNdVlXSnBiR2wwZVU1aGJXVWdLMXh5WEc0Z0lDQWdJQ0FuSUc5dUlDY2dLeUIwWVhKblpYUWdLeUFuTGljN1hISmNiaUFnSUNCMGFHbHpMbkJ5YjNCbGNrTmhjMlZEYjI1MlpYSjBaV1JNYVc1bElEMGdkR2hwY3k1d2NtVm1hWGdvS1NBcklIUm9hWE11WVdKcGJHbDBlVWxrU0dWNElDdGNjbHh1SUNBZ0lDQWdKem9uSUNzZ1JXMTFiR0YwYjNKRGIyMXRiMjR1Y0hKdmNHVnlRMkZ6WlNoMGFHbHpMbTVoYldVcElDdGNjbHh1SUNBZ0lDQWdKeUJ6ZEdGeWRITWdkWE5wYm1jZ0p5QXJJSFJvYVhNdVlXSnBiR2wwZVU1aGJXVWdLMXh5WEc0Z0lDQWdJQ0FuSUc5dUlDY2dLeUJGYlhWc1lYUnZja052YlcxdmJpNXdjbTl3WlhKRFlYTmxLSFJoY21kbGRDa2dLeUFuTGljN1hISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nVEdsdVpVVjJaVzUwTWpBZ1pYaDBaVzVrY3lCTWFXNWxSWFpsYm5Rd2VERTBJSHNnZlZ4eVhHNGlMQ0pwYlhCdmNuUWdUR2x1WlVWMlpXNTBMQ0I3SUV4cGJtVkZkbVZ1ZEVGaWFXeHBkSGtzSUV4cGJtVkZkbVZ1ZEZOdmRYSmpaU3dnVEdsdVpVVjJaVzUwVkdGeVoyVjBJSDBnWm5KdmJTQW5MaTlNYVc1bFJYWmxiblFuTzF4eVhHNXBiWEJ2Y25RZ1RHOW5VbVZ3YjNOcGRHOXllU0JtY205dElDY3VMMHh2WjFKbGNHOXphWFJ2Y25rbk8xeHlYRzVjY2x4dVkyOXVjM1FnWm1sbGJHUnpJRDBnZTF4eVhHNGdJR2xrT2lBeUxGeHlYRzRnSUc1aGJXVTZJRE1zWEhKY2JpQWdabXhoWjNNNklEZ3NYSEpjYmlBZ1pHRnRZV2RsT2lBNUxGeHlYRzRnSUdGaWFXeHBkSGxKWkRvZ05DeGNjbHh1SUNCaFltbHNhWFI1VG1GdFpUb2dOU3hjY2x4dUlDQjBZWEpuWlhSSlpEb2dOaXhjY2x4dUlDQjBZWEpuWlhST1lXMWxPaUEzTEZ4eVhHNGdJSFJoY21kbGRFaHdPaUF5TkN4Y2NseHVJQ0IwWVhKblpYUk5ZWGhJY0RvZ01qVXNYSEpjYmlBZ2RHRnlaMlYwVFhBNklESTJMRnh5WEc0Z0lIUmhjbWRsZEUxaGVFMXdPaUF5Tnl4Y2NseHVJQ0IwWVhKblpYUllPaUF6TUN4Y2NseHVJQ0IwWVhKblpYUlpPaUF6TVN4Y2NseHVJQ0IwWVhKblpYUmFPaUF6TWl4Y2NseHVJQ0IwWVhKblpYUklaV0ZrYVc1bk9pQXpNeXhjY2x4dUlDQnpiM1Z5WTJWSWNEb2dNelFzWEhKY2JpQWdjMjkxY21ObFRXRjRTSEE2SURNMUxGeHlYRzRnSUhOdmRYSmpaVTF3T2lBek5peGNjbHh1SUNCemIzVnlZMlZOWVhoTmNEb2dNemNzWEhKY2JpQWdlRG9nTkRBc1hISmNiaUFnZVRvZ05ERXNYSEpjYmlBZ2Vqb2dORElzWEhKY2JpQWdhR1ZoWkdsdVp6b2dORE1zWEhKY2JuMGdZWE1nWTI5dWMzUTdYSEpjYmx4eVhHNHZMeUJCWW1sc2FYUjVJR2hwZENCemFXNW5iR1VnZEdGeVoyVjBJR1YyWlc1MFhISmNibVY0Y0c5eWRDQmpiR0Z6Y3lCTWFXNWxSWFpsYm5Rd2VERTFJR1Y0ZEdWdVpITWdUR2x1WlVWMlpXNTBYSEpjYmlBZ2FXMXdiR1Z0Wlc1MGN5Qk1hVzVsUlhabGJuUlRiM1Z5WTJVc0lFeHBibVZGZG1WdWRGUmhjbWRsZEN3Z1RHbHVaVVYyWlc1MFFXSnBiR2wwZVNCN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR1JoYldGblpUb2diblZ0WW1WeU8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0JwWkRvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQnVZVzFsT2lCemRISnBibWM3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHRmlhV3hwZEhsSlpEb2diblZ0WW1WeU8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0JoWW1sc2FYUjVUbUZ0WlRvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQjBZWEpuWlhSSlpEb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0IwWVhKblpYUk9ZVzFsT2lCemRISnBibWM3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHWnNZV2R6T2lCemRISnBibWM3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIUmhjbWRsZEVod09pQnVkVzFpWlhJN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSFJoY21kbGRFMWhlRWh3T2lCdWRXMWlaWEk3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIUmhjbWRsZEUxd09pQnVkVzFpWlhJN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSFJoY21kbGRFMWhlRTF3T2lCdWRXMWlaWEk3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIUmhjbWRsZEZnNklHNTFiV0psY2p0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dkR0Z5WjJWMFdUb2diblZ0WW1WeU8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0IwWVhKblpYUmFPaUJ1ZFcxaVpYSTdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhSaGNtZGxkRWhsWVdScGJtYzZJRzUxYldKbGNqdGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYUhBNklHNTFiV0psY2p0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2diV0Y0U0hBNklHNTFiV0psY2p0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2diWEE2SUc1MWJXSmxjanRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2JXRjRUWEE2SUc1MWJXSmxjanRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2VEb2diblZ0WW1WeU8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0I1T2lCdWRXMWlaWEk3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIbzZJRzUxYldKbGNqdGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYUdWaFpHbHVaem9nYm5WdFltVnlPMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCcGMxTnZkWEpqWlNBOUlIUnlkV1U3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHbHpWR0Z5WjJWMElEMGdkSEoxWlR0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dhWE5CWW1sc2FYUjVJRDBnZEhKMVpUdGNjbHh1WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvY21Wd2J6b2dURzluVW1Wd2IzTnBkRzl5ZVN3Z2JHbHVaVG9nYzNSeWFXNW5MQ0J3WVhKMGN6b2djM1J5YVc1blcxMHBJSHRjY2x4dUlDQWdJSE4xY0dWeUtISmxjRzhzSUd4cGJtVXNJSEJoY25SektUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxtbGtJRDBnY0dGeWRITmJabWxsYkdSekxtbGtYVDh1ZEc5VmNIQmxja05oYzJVb0tTQS9QeUFuSnp0Y2NseHVJQ0FnSUhSb2FYTXVibUZ0WlNBOUlIQmhjblJ6VzJacFpXeGtjeTV1WVcxbFhTQS9QeUFuSnp0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TG1ac1lXZHpJRDBnY0dGeWRITmJabWxsYkdSekxtWnNZV2R6WFNBL1B5QW5KenRjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0JtYVdWc1pFOW1abk5sZENBOUlIUm9hWE11Wm14aFozTWdQVDA5SUNjelJpY2dQeUF5SURvZ01EdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxtUmhiV0ZuWlNBOUlFeHBibVZGZG1WdWRDNWpZV3hqZFd4aGRHVkVZVzFoWjJVb2NHRnlkSE5iWm1sbGJHUnpMbVJoYldGblpTQXJJR1pwWld4a1QyWm1jMlYwWFNBL1B5QW5KeWs3WEhKY2JpQWdJQ0IwYUdsekxtRmlhV3hwZEhsSlpDQTlJSEJoY25ObFNXNTBLSEJoY25SelcyWnBaV3hrY3k1aFltbHNhWFI1U1dSZFB5NTBiMVZ3Y0dWeVEyRnpaU2dwSUQ4L0lDY25LVHRjY2x4dUlDQWdJSFJvYVhNdVlXSnBiR2wwZVU1aGJXVWdQU0J3WVhKMGMxdG1hV1ZzWkhNdVlXSnBiR2wwZVU1aGJXVmRJRDgvSUNjbk8xeHlYRzRnSUNBZ2RHaHBjeTUwWVhKblpYUkpaQ0E5SUhCaGNuUnpXMlpwWld4a2N5NTBZWEpuWlhSSlpGMC9MblJ2VlhCd1pYSkRZWE5sS0NrZ1B6OGdKeWM3WEhKY2JpQWdJQ0IwYUdsekxuUmhjbWRsZEU1aGJXVWdQU0J3WVhKMGMxdG1hV1ZzWkhNdWRHRnlaMlYwVG1GdFpWMGdQejhnSnljN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1MFlYSm5aWFJJY0NBOUlIQmhjbk5sU1c1MEtIQmhjblJ6VzJacFpXeGtjeTUwWVhKblpYUkljQ0FySUdacFpXeGtUMlptYzJWMFhTQS9QeUFuSnlrN1hISmNiaUFnSUNCMGFHbHpMblJoY21kbGRFMWhlRWh3SUQwZ2NHRnljMlZKYm5Rb2NHRnlkSE5iWm1sbGJHUnpMblJoY21kbGRFMWhlRWh3SUNzZ1ptbGxiR1JQWm1aelpYUmRJRDgvSUNjbktUdGNjbHh1SUNBZ0lIUm9hWE11ZEdGeVoyVjBUWEFnUFNCd1lYSnpaVWx1ZENod1lYSjBjMXRtYVdWc1pITXVkR0Z5WjJWMFRYQWdLeUJtYVdWc1pFOW1abk5sZEYwZ1B6OGdKeWNwTzF4eVhHNGdJQ0FnZEdocGN5NTBZWEpuWlhSTllYaE5jQ0E5SUhCaGNuTmxTVzUwS0hCaGNuUnpXMlpwWld4a2N5NTBZWEpuWlhSTllYaE5jQ0FySUdacFpXeGtUMlptYzJWMFhTQS9QeUFuSnlrN1hISmNiaUFnSUNCMGFHbHpMblJoY21kbGRGZ2dQU0J3WVhKelpVWnNiMkYwS0hCaGNuUnpXMlpwWld4a2N5NTBZWEpuWlhSWUlDc2dabWxsYkdSUFptWnpaWFJkSUQ4L0lDY25LVHRjY2x4dUlDQWdJSFJvYVhNdWRHRnlaMlYwV1NBOUlIQmhjbk5sUm14dllYUW9jR0Z5ZEhOYlptbGxiR1J6TG5SaGNtZGxkRmtnS3lCbWFXVnNaRTltWm5ObGRGMGdQejhnSnljcE8xeHlYRzRnSUNBZ2RHaHBjeTUwWVhKblpYUmFJRDBnY0dGeWMyVkdiRzloZENod1lYSjBjMXRtYVdWc1pITXVkR0Z5WjJWMFdpQXJJR1pwWld4a1QyWm1jMlYwWFNBL1B5QW5KeWs3WEhKY2JpQWdJQ0IwYUdsekxuUmhjbWRsZEVobFlXUnBibWNnUFNCd1lYSnpaVVpzYjJGMEtIQmhjblJ6VzJacFpXeGtjeTUwWVhKblpYUklaV0ZrYVc1bklDc2dabWxsYkdSUFptWnpaWFJkSUQ4L0lDY25LVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbWh3SUQwZ2NHRnljMlZKYm5Rb2NHRnlkSE5iWm1sbGJHUnpMbk52ZFhKalpVaHdJQ3NnWm1sbGJHUlBabVp6WlhSZElEOC9JQ2NuS1R0Y2NseHVJQ0FnSUhSb2FYTXViV0Y0U0hBZ1BTQndZWEp6WlVsdWRDaHdZWEowYzF0bWFXVnNaSE11YzI5MWNtTmxUV0Y0U0hBZ0t5Qm1hV1ZzWkU5bVpuTmxkRjBnUHo4Z0p5Y3BPMXh5WEc0Z0lDQWdkR2hwY3k1dGNDQTlJSEJoY25ObFNXNTBLSEJoY25SelcyWnBaV3hrY3k1emIzVnlZMlZOY0NBcklHWnBaV3hrVDJabWMyVjBYU0EvUHlBbkp5azdYSEpjYmlBZ0lDQjBhR2x6TG0xaGVFMXdJRDBnY0dGeWMyVkpiblFvY0dGeWRITmJabWxsYkdSekxuTnZkWEpqWlUxaGVFMXdJQ3NnWm1sbGJHUlBabVp6WlhSZElEOC9JQ2NuS1R0Y2NseHVJQ0FnSUhSb2FYTXVlQ0E5SUhCaGNuTmxSbXh2WVhRb2NHRnlkSE5iWm1sbGJHUnpMbmdnS3lCbWFXVnNaRTltWm5ObGRGMGdQejhnSnljcE8xeHlYRzRnSUNBZ2RHaHBjeTU1SUQwZ2NHRnljMlZHYkc5aGRDaHdZWEowYzF0bWFXVnNaSE11ZVNBcklHWnBaV3hrVDJabWMyVjBYU0EvUHlBbkp5azdYSEpjYmlBZ0lDQjBhR2x6TG5vZ1BTQndZWEp6WlVac2IyRjBLSEJoY25SelcyWnBaV3hrY3k1NklDc2dabWxsYkdSUFptWnpaWFJkSUQ4L0lDY25LVHRjY2x4dUlDQWdJSFJvYVhNdWFHVmhaR2x1WnlBOUlIQmhjbk5sUm14dllYUW9jR0Z5ZEhOYlptbGxiR1J6TG1obFlXUnBibWNnS3lCbWFXVnNaRTltWm5ObGRGMGdQejhnSnljcE8xeHlYRzVjY2x4dVhISmNiaUFnSUNCeVpYQnZMblZ3WkdGMFpVTnZiV0poZEdGdWRDaDBhR2x6TG1sa0xDQjdYSEpjYmlBZ0lDQWdJR3B2WWpvZ2RXNWtaV1pwYm1Wa0xGeHlYRzRnSUNBZ0lDQnVZVzFsT2lCMGFHbHpMbTVoYldVc1hISmNiaUFnSUNBZ0lITndZWGR1T2lCMGFHbHpMblJwYldWemRHRnRjQ3hjY2x4dUlDQWdJQ0FnWkdWemNHRjNiam9nZEdocGN5NTBhVzFsYzNSaGJYQXNYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCeVpYQnZMblZ3WkdGMFpVTnZiV0poZEdGdWRDaDBhR2x6TG5SaGNtZGxkRWxrTENCN1hISmNiaUFnSUNBZ0lHcHZZam9nZFc1a1pXWnBibVZrTEZ4eVhHNGdJQ0FnSUNCdVlXMWxPaUIwYUdsekxuUmhjbWRsZEU1aGJXVXNYSEpjYmlBZ0lDQWdJSE53WVhkdU9pQjBhR2x6TG5ScGJXVnpkR0Z0Y0N4Y2NseHVJQ0FnSUNBZ1pHVnpjR0YzYmpvZ2RHaHBjeTUwYVcxbGMzUmhiWEFzWEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCamJHRnpjeUJNYVc1bFJYWmxiblF5TVNCbGVIUmxibVJ6SUV4cGJtVkZkbVZ1ZERCNE1UVWdlMzFjY2x4dUlpd2lhVzF3YjNKMElIc2dUR2x1WlVWMlpXNTBNSGd4TlNCOUlHWnliMjBnSnk0dlRHbHVaVVYyWlc1ME1IZ3hOU2M3WEhKY2JtbHRjRzl5ZENCTWIyZFNaWEJ2YzJsMGIzSjVJR1p5YjIwZ0p5NHZURzluVW1Wd2IzTnBkRzl5ZVNjN1hISmNibHh5WEc0dkx5QkJZbWxzYVhSNUlHaHBkQ0J0ZFd4MGFYQnNaUzl1YnlCMFlYSm5aWFFnWlhabGJuUmNjbHh1THk4Z1JIVndiR2xqWVhSbElHOW1JREI0TVRVZ1lYTWdabUZ5SUdGeklHUmhkR0ZjY2x4dVpYaHdiM0owSUdOc1lYTnpJRXhwYm1WRmRtVnVkREI0TVRZZ1pYaDBaVzVrY3lCTWFXNWxSWFpsYm5Rd2VERTFJSHRjY2x4dUlDQmpiMjV6ZEhKMVkzUnZjaWh5WlhCdk9pQk1iMmRTWlhCdmMybDBiM0o1TENCc2FXNWxPaUJ6ZEhKcGJtY3NJSEJoY25Sek9pQnpkSEpwYm1kYlhTa2dlMXh5WEc0Z0lDQWdjM1Z3WlhJb2NtVndieXdnYkdsdVpTd2djR0Z5ZEhNcE8xeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHTnNZWE56SUV4cGJtVkZkbVZ1ZERJeUlHVjRkR1Z1WkhNZ1RHbHVaVVYyWlc1ME1IZ3hOaUI3ZlZ4eVhHNGlMQ0pwYlhCdmNuUWdUR2x1WlVWMlpXNTBMQ0I3SUV4cGJtVkZkbVZ1ZEVGaWFXeHBkSGtzSUV4cGJtVkZkbVZ1ZEZOdmRYSmpaU0I5SUdaeWIyMGdKeTR2VEdsdVpVVjJaVzUwSnp0Y2NseHVhVzF3YjNKMElFeHZaMUpsY0c5emFYUnZjbmtnWm5KdmJTQW5MaTlNYjJkU1pYQnZjMmwwYjNKNUp6dGNjbHh1WEhKY2JtTnZibk4wSUdacFpXeGtjeUE5SUh0Y2NseHVJQ0JwWkRvZ01peGNjbHh1SUNCdVlXMWxPaUF6TEZ4eVhHNGdJR0ZpYVd4cGRIbEpaRG9nTkN4Y2NseHVJQ0JoWW1sc2FYUjVUbUZ0WlRvZ05TeGNjbHh1SUNCeVpXRnpiMjQ2SURZc1hISmNibjBnWVhNZ1kyOXVjM1E3WEhKY2JseHlYRzR2THlCRFlXNWpaV3dnWVdKcGJHbDBlU0JsZG1WdWRGeHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1RHbHVaVVYyWlc1ME1IZ3hOeUJsZUhSbGJtUnpJRXhwYm1WRmRtVnVkRnh5WEc0Z0lHbHRjR3hsYldWdWRITWdUR2x1WlVWMlpXNTBVMjkxY21ObExDQk1hVzVsUlhabGJuUkJZbWxzYVhSNUlIdGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYVdRNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dibUZ0WlRvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQmhZbWxzYVhSNVNXUTZJRzUxYldKbGNqdGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnWVdKcGJHbDBlVTVoYldVNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2djbVZoYzI5dU9pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR2x6VTI5MWNtTmxJRDBnZEhKMVpUdGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYVhOQlltbHNhWFI1SUQwZ2RISjFaVHRjY2x4dVhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2NtVndiem9nVEc5blVtVndiM05wZEc5eWVTd2diR2x1WlRvZ2MzUnlhVzVuTENCd1lYSjBjem9nYzNSeWFXNW5XMTBwSUh0Y2NseHVJQ0FnSUhOMWNHVnlLSEpsY0c4c0lHeHBibVVzSUhCaGNuUnpLVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbWxrSUQwZ2NHRnlkSE5iWm1sbGJHUnpMbWxrWFQ4dWRHOVZjSEJsY2tOaGMyVW9LU0EvUHlBbkp6dGNjbHh1SUNBZ0lIUm9hWE11Ym1GdFpTQTlJSEJoY25SelcyWnBaV3hrY3k1dVlXMWxYU0EvUHlBbkp6dGNjbHh1SUNBZ0lIUm9hWE11WVdKcGJHbDBlVWxrSUQwZ2NHRnljMlZKYm5Rb2NHRnlkSE5iWm1sbGJHUnpMbUZpYVd4cGRIbEpaRjAvTG5SdlZYQndaWEpEWVhObEtDa2dQejhnSnljcE8xeHlYRzRnSUNBZ2RHaHBjeTVoWW1sc2FYUjVUbUZ0WlNBOUlIQmhjblJ6VzJacFpXeGtjeTVoWW1sc2FYUjVUbUZ0WlYwZ1B6OGdKeWM3WEhKY2JpQWdJQ0IwYUdsekxuSmxZWE52YmlBOUlIQmhjblJ6VzJacFpXeGtjeTV5WldGemIyNWRJRDgvSUNjbk8xeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHTnNZWE56SUV4cGJtVkZkbVZ1ZERJeklHVjRkR1Z1WkhNZ1RHbHVaVVYyWlc1ME1IZ3hOeUI3ZlZ4eVhHNGlMQ0pwYlhCdmNuUWdUR2x1WlVWMlpXNTBMQ0I3SUV4cGJtVkZkbVZ1ZEZOdmRYSmpaU0I5SUdaeWIyMGdKeTR2VEdsdVpVVjJaVzUwSnp0Y2NseHVhVzF3YjNKMElFVnRkV3hoZEc5eVEyOXRiVzl1SUdaeWIyMGdKeTR1THk0dUwwVnRkV3hoZEc5eVEyOXRiVzl1Snp0Y2NseHVhVzF3YjNKMElFeHZaMUpsY0c5emFYUnZjbmtnWm5KdmJTQW5MaTlNYjJkU1pYQnZjMmwwYjNKNUp6dGNjbHh1WEhKY2JtTnZibk4wSUdacFpXeGtjeUE5SUh0Y2NseHVJQ0JwWkRvZ01peGNjbHh1SUNCdVlXMWxPaUF6TEZ4eVhHNGdJSFI1Y0dVNklEUXNYSEpjYmlBZ1pXWm1aV04wU1dRNklEVXNYSEpjYmlBZ1pHRnRZV2RsT2lBMkxGeHlYRzRnSUdOMWNuSmxiblJJY0RvZ055eGNjbHh1SUNCdFlYaEljRG9nT0N4Y2NseHVJQ0JqZFhKeVpXNTBUWEE2SURrc1hISmNiaUFnYldGNFRYQTZJREV3TEZ4eVhHNGdJR04xY25KbGJuUlVjRG9nTVRFc1hISmNiaUFnYldGNFZIQTZJREV5TEZ4eVhHNGdJSGc2SURFekxGeHlYRzRnSUhrNklERTBMRnh5WEc0Z0lIbzZJREUxTEZ4eVhHNGdJR2hsWVdScGJtYzZJREUyTEZ4eVhHNTlJR0Z6SUdOdmJuTjBPMXh5WEc1Y2NseHVMeThnUkc5VUwwaHZWQ0JsZG1WdWRGeHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1RHbHVaVVYyWlc1ME1IZ3hPQ0JsZUhSbGJtUnpJRXhwYm1WRmRtVnVkQ0JwYlhCc1pXMWxiblJ6SUV4cGJtVkZkbVZ1ZEZOdmRYSmpaU0I3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIQnliM0JsY2tOaGMyVkRiMjUyWlhKMFpXUk1hVzVsT2lCemRISnBibWM3WEhKY2JseHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0JwWkRvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQnVZVzFsT2lCemRISnBibWM3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIUjVjR1U2SUhOMGNtbHVaenRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ1pXWm1aV04wU1dRNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2daR0Z0WVdkbE9pQnVkVzFpWlhJN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR2h3T2lCdWRXMWlaWEk3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHMWhlRWh3T2lCdWRXMWlaWEk3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHMXdPaUJ1ZFcxaVpYSTdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUcxaGVFMXdPaUJ1ZFcxaVpYSTdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhSd09pQnVkVzFpWlhJN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJRzFoZUZSd09pQnVkVzFpWlhJN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSGc2SUc1MWJXSmxjanRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2VUb2diblZ0WW1WeU8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0I2T2lCdWRXMWlaWEk3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHaGxZV1JwYm1jNklHNTFiV0psY2p0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dhWE5UYjNWeVkyVWdQU0IwY25WbE8xeHlYRzVjY2x4dUlDQmpiMjV6ZEhKMVkzUnZjaWh5WlhCdk9pQk1iMmRTWlhCdmMybDBiM0o1TENCc2FXNWxPaUJ6ZEhKcGJtY3NJSEJoY25Sek9pQnpkSEpwYm1kYlhTa2dlMXh5WEc0Z0lDQWdjM1Z3WlhJb2NtVndieXdnYkdsdVpTd2djR0Z5ZEhNcE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdWFXUWdQU0J3WVhKMGMxdG1hV1ZzWkhNdWFXUmRQeTUwYjFWd2NHVnlRMkZ6WlNncElEOC9JQ2NuTzF4eVhHNGdJQ0FnZEdocGN5NXVZVzFsSUQwZ2NHRnlkSE5iWm1sbGJHUnpMbTVoYldWZElEOC9JQ2NuTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11ZEhsd1pTQTlJSEJoY25SelcyWnBaV3hrY3k1MGVYQmxYU0EvUHlBbkp6dGNjbHh1SUNBZ0lIUm9hWE11WldabVpXTjBTV1FnUFNCd1lYSjBjMXRtYVdWc1pITXVaV1ptWldOMFNXUmRQeTUwYjFWd2NHVnlRMkZ6WlNncElEOC9JQ2NuTzF4eVhHNGdJQ0FnZEdocGN5NWtZVzFoWjJVZ1BTQndZWEp6WlVsdWRDaHdZWEowYzF0bWFXVnNaSE11WkdGdFlXZGxYU0EvUHlBbkp5d2dNVFlwTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11YUhBZ1BTQndZWEp6WlVsdWRDaHdZWEowYzF0bWFXVnNaSE11WTNWeWNtVnVkRWh3WFNBL1B5QW5KeWs3WEhKY2JpQWdJQ0IwYUdsekxtMWhlRWh3SUQwZ2NHRnljMlZKYm5Rb2NHRnlkSE5iWm1sbGJHUnpMbTFoZUVod1hTQS9QeUFuSnlrN1hISmNiaUFnSUNCMGFHbHpMbTF3SUQwZ2NHRnljMlZKYm5Rb2NHRnlkSE5iWm1sbGJHUnpMbU4xY25KbGJuUk5jRjBnUHo4Z0p5Y3BPMXh5WEc0Z0lDQWdkR2hwY3k1dFlYaE5jQ0E5SUhCaGNuTmxTVzUwS0hCaGNuUnpXMlpwWld4a2N5NXRZWGhOY0YwZ1B6OGdKeWNwTzF4eVhHNGdJQ0FnZEdocGN5NTBjQ0E5SUhCaGNuTmxTVzUwS0hCaGNuUnpXMlpwWld4a2N5NWpkWEp5Wlc1MFZIQmRJRDgvSUNjbktUdGNjbHh1SUNBZ0lIUm9hWE11YldGNFZIQWdQU0J3WVhKelpVbHVkQ2h3WVhKMGMxdG1hV1ZzWkhNdWJXRjRWSEJkSUQ4L0lDY25LVHRjY2x4dUlDQWdJSFJvYVhNdWVDQTlJSEJoY25ObFJteHZZWFFvY0dGeWRITmJabWxsYkdSekxuaGRJRDgvSUNjbktUdGNjbHh1SUNBZ0lIUm9hWE11ZVNBOUlIQmhjbk5sUm14dllYUW9jR0Z5ZEhOYlptbGxiR1J6TG5sZElEOC9JQ2NuS1R0Y2NseHVJQ0FnSUhSb2FYTXVlaUE5SUhCaGNuTmxSbXh2WVhRb2NHRnlkSE5iWm1sbGJHUnpMbnBkSUQ4L0lDY25LVHRjY2x4dUlDQWdJSFJvYVhNdWFHVmhaR2x1WnlBOUlIQmhjbk5sUm14dllYUW9jR0Z5ZEhOYlptbGxiR1J6TG1obFlXUnBibWRkSUQ4L0lDY25LVHRjY2x4dVhISmNiaUFnSUNCeVpYQnZMblZ3WkdGMFpVTnZiV0poZEdGdWRDaDBhR2x6TG1sa0xDQjdYSEpjYmlBZ0lDQWdJR3B2WWpvZ2RXNWtaV1pwYm1Wa0xGeHlYRzRnSUNBZ0lDQnVZVzFsT2lCMGFHbHpMbTVoYldVc1hISmNiaUFnSUNBZ0lITndZWGR1T2lCMGFHbHpMblJwYldWemRHRnRjQ3hjY2x4dUlDQWdJQ0FnWkdWemNHRjNiam9nZEdocGN5NTBhVzFsYzNSaGJYQXNYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCc1pYUWdaV1ptWldOMFRtRnRaU0E5SUNjbk8xeHlYRzRnSUNBZ1kyOXVjM1FnY21WemIyeDJaV1JPWVcxbElEMGdjbVZ3Ynk1eVpYTnZiSFpsVG1GdFpTaDBhR2x6TG1sa0xDQjBhR2x6TG01aGJXVXBPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TG1WbVptVmpkRWxrSUdsdUlFeHBibVZGZG1WdWREQjRNVGd1YzJodmQwVm1abVZqZEU1aGJXVnpSbTl5S1Z4eVhHNGdJQ0FnSUNCbFptWmxZM1JPWVcxbElEMGdUR2x1WlVWMlpXNTBNSGd4T0M1emFHOTNSV1ptWldOMFRtRnRaWE5HYjNKYmRHaHBjeTVsWm1abFkzUkpaRjBnUHo4Z0p5YzdYSEpjYmx4eVhHNGdJQ0FnYkdWMElHVm1abVZqZEZCaGNuUWdQU0FuSnp0Y2NseHVJQ0FnSUdsbUlDaGxabVpsWTNST1lXMWxLVnh5WEc0Z0lDQWdJQ0JsWm1abFkzUlFZWEowSUQwZ1pXWm1aV04wVG1GdFpTQXJJQ2NnSnp0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TG1OdmJuWmxjblJsWkV4cGJtVWdQU0IwYUdsekxuQnlaV1pwZUNncElDc2daV1ptWldOMFVHRnlkQ0FySUhSb2FYTXVkSGx3WlNBclhISmNiaUFnSUNBZ0lDY2dWR2xqYXlCdmJpQW5JQ3NnY21WemIyeDJaV1JPWVcxbElDdGNjbHh1SUNBZ0lDQWdKeUJtYjNJZ0p5QXJJSFJvYVhNdVpHRnRZV2RsTG5SdlUzUnlhVzVuS0NrZ0t5QW5JR1JoYldGblpTNG5PMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVjSEp2Y0dWeVEyRnpaVU52Ym5abGNuUmxaRXhwYm1VZ1BTQjBhR2x6TG5CeVpXWnBlQ2dwSUNzZ1pXWm1aV04wVUdGeWRDQXJJSFJvYVhNdWRIbHdaU0FyWEhKY2JpQWdJQ0FnSUNjZ1ZHbGpheUJ2YmlBbklDc2dSVzExYkdGMGIzSkRiMjF0YjI0dWNISnZjR1Z5UTJGelpTaHlaWE52YkhabFpFNWhiV1VwSUN0Y2NseHVJQ0FnSUNBZ0p5Qm1iM0lnSnlBcklIUm9hWE11WkdGdFlXZGxMblJ2VTNSeWFXNW5LQ2tnS3lBbklHUmhiV0ZuWlM0bk8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2MzUmhkR2xqSUhOb2IzZEZabVpsWTNST1lXMWxjMFp2Y2pvZ2V5QmJaV1ptWldOMFNXUTZJSE4wY21sdVoxMDZJSE4wY21sdVp5QjlJRDBnZTF4eVhHNGdJQ0FnSnpSRE5DYzZJQ2RGZUdOdloyNXBkR2x2Ymljc1hISmNiaUFnSUNBbk16VkVKem9nSjFkcGJHUm1hWEpsSnl4Y2NseHVJQ0FnSUNjeFJqVW5PaUFuUkc5MGIyNG5MRnh5WEc0Z0lDQWdKekpGUkNjNklDZFRZV3gwWldRZ1JXRnlkR2duTEZ4eVhHNGdJQ0FnSnpSQ05TYzZJQ2RHYkdGdFpYUm9jbTkzWlhJbkxGeHlYRzRnSUNBZ0p6SkZNeWM2SUNkQmMzbHNkVzBuTEZ4eVhHNGdJQ0FnSnpjM055YzZJQ2RCYzNsc2RXMG5MRnh5WEc0Z0lDQWdKemM1T0NjNklDZFRZV055WldRZ1UyOXBiQ2NzWEhKY2JpQWdJQ0FuTkVNM0p6b2dKMFpsZVNCVmJtbHZiaWNzWEhKY2JpQWdJQ0FuTnpReUp6b2dKMDVoYzJObGJuUWdSMnhwYm5RbkxGeHlYRzRnSUgwN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmpiR0Z6Y3lCTWFXNWxSWFpsYm5ReU5DQmxlSFJsYm1SeklFeHBibVZGZG1WdWREQjRNVGdnZXlCOVhISmNiaUlzSW1sdGNHOXlkQ0JNYVc1bFJYWmxiblFnWm5KdmJTQW5MaTlNYVc1bFJYWmxiblFuTzF4eVhHNXBiWEJ2Y25RZ1JXMTFiR0YwYjNKRGIyMXRiMjRnWm5KdmJTQW5MaTR2TGk0dlJXMTFiR0YwYjNKRGIyMXRiMjRuTzF4eVhHNXBiWEJ2Y25RZ1RHOW5VbVZ3YjNOcGRHOXllU0JtY205dElDY3VMMHh2WjFKbGNHOXphWFJ2Y25rbk8xeHlYRzVjY2x4dVkyOXVjM1FnWm1sbGJHUnpJRDBnZTF4eVhHNGdJR2xrT2lBeUxGeHlYRzRnSUc1aGJXVTZJRE1zWEhKY2JpQWdkR0Z5WjJWMFNXUTZJRFFzWEhKY2JpQWdkR0Z5WjJWMFRtRnRaVG9nTlN4Y2NseHVmU0JoY3lCamIyNXpkRHRjY2x4dVhISmNiaTh2SUVOdmJXSmhkR0Z1ZENCa1pXWmxZWFJsWkNCbGRtVnVkRnh5WEc1bGVIQnZjblFnWTJ4aGMzTWdUR2x1WlVWMlpXNTBNSGd4T1NCbGVIUmxibVJ6SUV4cGJtVkZkbVZ1ZENCN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSEJ5YjNCbGNrTmhjMlZEYjI1MlpYSjBaV1JNYVc1bE9pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR2xrT2lCemRISnBibWM3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHNWhiV1U2SUhOMGNtbHVaenRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2RHRnlaMlYwU1dRNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dkR0Z5WjJWMFRtRnRaVG9nYzNSeWFXNW5PMXh5WEc1Y2NseHVJQ0JqYjI1emRISjFZM1J2Y2loeVpYQnZPaUJNYjJkU1pYQnZjMmwwYjNKNUxDQnNhVzVsT2lCemRISnBibWNzSUhCaGNuUnpPaUJ6ZEhKcGJtZGJYU2tnZTF4eVhHNGdJQ0FnYzNWd1pYSW9jbVZ3Ynl3Z2JHbHVaU3dnY0dGeWRITXBPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVhV1FnUFNCd1lYSjBjMXRtYVdWc1pITXVhV1JkUHk1MGIxVndjR1Z5UTJGelpTZ3BJRDgvSUNjbk8xeHlYRzRnSUNBZ2RHaHBjeTV1WVcxbElEMGdjR0Z5ZEhOYlptbGxiR1J6TG01aGJXVmRJRDgvSUNjbk8xeHlYRzRnSUNBZ2RHaHBjeTUwWVhKblpYUkpaQ0E5SUhCaGNuUnpXMlpwWld4a2N5NTBZWEpuWlhSSlpGMC9MblJ2VlhCd1pYSkRZWE5sS0NrZ1B6OGdKeWM3WEhKY2JpQWdJQ0IwYUdsekxuUmhjbWRsZEU1aGJXVWdQU0J3WVhKMGMxdG1hV1ZzWkhNdWRHRnlaMlYwVG1GdFpWMGdQejhnSnljN1hISmNibHh5WEc0Z0lDQWdjbVZ3Ynk1MWNHUmhkR1ZEYjIxaVlYUmhiblFvZEdocGN5NXBaQ3dnZTF4eVhHNGdJQ0FnSUNCcWIySTZJSFZ1WkdWbWFXNWxaQ3hjY2x4dUlDQWdJQ0FnYm1GdFpUb2dkR2hwY3k1dVlXMWxMRnh5WEc0Z0lDQWdJQ0J6Y0dGM2Jqb2dkR2hwY3k1MGFXMWxjM1JoYlhBc1hISmNiaUFnSUNBZ0lHUmxjM0JoZDI0NklIUm9hWE11ZEdsdFpYTjBZVzF3TEZ4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdjbVZ3Ynk1MWNHUmhkR1ZEYjIxaVlYUmhiblFvZEdocGN5NTBZWEpuWlhSSlpDd2dlMXh5WEc0Z0lDQWdJQ0JxYjJJNklIVnVaR1ZtYVc1bFpDeGNjbHh1SUNBZ0lDQWdibUZ0WlRvZ2RHaHBjeTUwWVhKblpYUk9ZVzFsTEZ4eVhHNGdJQ0FnSUNCemNHRjNiam9nZEdocGN5NTBhVzFsYzNSaGJYQXNYSEpjYmlBZ0lDQWdJR1JsYzNCaGQyNDZJSFJvYVhNdWRHbHRaWE4wWVcxd0xGeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnYkdWMElISmxjMjlzZG1Wa1RtRnRaVG9nYzNSeWFXNW5JSHdnZFc1a1pXWnBibVZrSUQwZ2RXNWtaV1pwYm1Wa08xeHlYRzRnSUNBZ2JHVjBJSEpsYzI5c2RtVmtWR0Z5WjJWMFRtRnRaVG9nYzNSeWFXNW5JSHdnZFc1a1pXWnBibVZrSUQwZ2RXNWtaV1pwYm1Wa08xeHlYRzVjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbWxrSUNFOVBTQW5NREFuS1Z4eVhHNGdJQ0FnSUNCeVpYTnZiSFpsWkU1aGJXVWdQU0J5WlhCdkxuSmxjMjlzZG1WT1lXMWxLSFJvYVhNdWFXUXNJSFJvYVhNdWJtRnRaU2s3WEhKY2JseHlYRzRnSUNBZ2FXWWdLSFJvYVhNdWRHRnlaMlYwU1dRZ0lUMDlJQ2N3TUNjcFhISmNiaUFnSUNBZ0lISmxjMjlzZG1Wa1ZHRnlaMlYwVG1GdFpTQTlJSEpsY0c4dWNtVnpiMngyWlU1aGJXVW9kR2hwY3k1MFlYSm5aWFJKWkN3Z2RHaHBjeTUwWVhKblpYUk9ZVzFsS1R0Y2NseHVYSEpjYmlBZ0lDQmpiMjV6ZENCa1pXWmxZWFJsWkU1aGJXVWdQU0FvY21WemIyeDJaV1JPWVcxbElEOC9JSFJvYVhNdWJtRnRaU2s3WEhKY2JpQWdJQ0JqYjI1emRDQnJhV3hzWlhKT1lXMWxJRDBnS0hKbGMyOXNkbVZrVkdGeVoyVjBUbUZ0WlNBL1B5QjBhR2x6TG5SaGNtZGxkRTVoYldVcE8xeHlYRzRnSUNBZ2RHaHBjeTVqYjI1MlpYSjBaV1JNYVc1bElEMGdkR2hwY3k1d2NtVm1hWGdvS1NBcklHUmxabVZoZEdWa1RtRnRaU0FyWEhKY2JpQWdJQ0FnSUNjZ2QyRnpJR1JsWm1WaGRHVmtJR0o1SUNjZ0t5QnJhV3hzWlhKT1lXMWxJQ3NnSnk0bk8xeHlYRzRnSUNBZ2RHaHBjeTV3Y205d1pYSkRZWE5sUTI5dWRtVnlkR1ZrVEdsdVpTQTlJSFJvYVhNdWNISmxabWw0S0NrZ0t5QkZiWFZzWVhSdmNrTnZiVzF2Ymk1d2NtOXdaWEpEWVhObEtHUmxabVZoZEdWa1RtRnRaU2tnSzF4eVhHNGdJQ0FnSUNBbklIZGhjeUJrWldabFlYUmxaQ0JpZVNBbklDc2dSVzExYkdGMGIzSkRiMjF0YjI0dWNISnZjR1Z5UTJGelpTaHJhV3hzWlhKT1lXMWxLU0FySUNjdUp6dGNjbHh1SUNCOVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmpiR0Z6Y3lCTWFXNWxSWFpsYm5ReU5TQmxlSFJsYm1SeklFeHBibVZGZG1WdWREQjRNVGtnZXlCOVhISmNiaUlzSW1sdGNHOXlkQ0JNYVc1bFJYWmxiblFzSUhzZ1RHbHVaVVYyWlc1MFFXSnBiR2wwZVNCOUlHWnliMjBnSnk0dlRHbHVaVVYyWlc1MEp6dGNjbHh1YVcxd2IzSjBJRVZ0ZFd4aGRHOXlRMjl0Ylc5dUlHWnliMjBnSnk0dUx5NHVMMFZ0ZFd4aGRHOXlRMjl0Ylc5dUp6dGNjbHh1YVcxd2IzSjBJRXh2WjFKbGNHOXphWFJ2Y25rZ1puSnZiU0FuTGk5TWIyZFNaWEJ2YzJsMGIzSjVKenRjY2x4dVhISmNibU52Ym5OMElHWnBaV3hrY3lBOUlIdGNjbHh1SUNCaFltbHNhWFI1U1dRNklESXNYSEpjYmlBZ1lXSnBiR2wwZVU1aGJXVTZJRE1zWEhKY2JpQWdaSFZ5WVhScGIyNVRkSEpwYm1jNklEUXNYSEpjYmlBZ2FXUTZJRFVzWEhKY2JpQWdibUZ0WlRvZ05peGNjbHh1SUNCMFlYSm5aWFJKWkRvZ055eGNjbHh1SUNCMFlYSm5aWFJPWVcxbE9pQTRMRnh5WEc0Z0lITjBZV05yY3pvZ09TeGNjbHh1SUNCMFlYSm5aWFJJY0RvZ01UQXNYSEpjYmlBZ2MyOTFjbU5sU0hBNklERXhMRnh5WEc1OUlHRnpJR052Ym5OME8xeHlYRzVjY2x4dUx5OGdSMkZwYmlCemRHRjBkWE1nWldabVpXTjBJR1YyWlc1MFhISmNiaTh2SUVSbGJHbGlaWEpoZEdWc2VTQmtiMjRuZENCbWJHRm5JSFJvYVhNZ1lYTWdUR2x1WlVWMlpXNTBVMjkxY21ObElHOXlJRXhwYm1WRmRtVnVkRlJoY21kbGRGeHlYRzR2THlCaVpXTmhkWE5sSURCNE1VRWdiR2x1WlNCMllXeDFaWE1nWVhKbGJpZDBJR0ZqWTNWeVlYUmxYSEpjYm1WNGNHOXlkQ0JqYkdGemN5Qk1hVzVsUlhabGJuUXdlREZCSUdWNGRHVnVaSE1nVEdsdVpVVjJaVzUwSUdsdGNHeGxiV1Z1ZEhNZ1RHbHVaVVYyWlc1MFFXSnBiR2wwZVNCN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSEpsYzI5c2RtVmtUbUZ0WlRvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQnlaWE52YkhabFpGUmhjbWRsZEU1aGJXVTZJSE4wY21sdVp6dGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnWm1Gc2JHSmhZMnRTWlhOdmJIWmxaRlJoY21kbGRFNWhiV1U2SUhOMGNtbHVaenRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2NISnZjR1Z5UTJGelpVTnZiblpsY25SbFpFeHBibVU2SUhOMGNtbHVaenRjY2x4dVhISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR0ZpYVd4cGRIbEpaRG9nYm5WdFltVnlPMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCaFltbHNhWFI1VG1GdFpUb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0JrZFhKaGRHbHZia1pzYjJGME9pQnVkVzFpWlhJN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR1IxY21GMGFXOXVVM1J5YVc1bk9pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR2xrT2lCemRISnBibWM3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHNWhiV1U2SUhOMGNtbHVaenRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2RHRnlaMlYwU1dRNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dkR0Z5WjJWMFRtRnRaVG9nYzNSeWFXNW5PMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCemRHRmphM002SUc1MWJXSmxjanRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2RHRnlaMlYwU0hBNklHNTFiV0psY2p0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dhSEE2SUc1MWJXSmxjanRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2FYTkJZbWxzYVhSNUlEMGdkSEoxWlR0Y2NseHVYSEpjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jbVZ3YnpvZ1RHOW5VbVZ3YjNOcGRHOXllU3dnYkdsdVpUb2djM1J5YVc1bkxDQndZWEowY3pvZ2MzUnlhVzVuVzEwcElIdGNjbHh1SUNBZ0lITjFjR1Z5S0hKbGNHOHNJR3hwYm1Vc0lIQmhjblJ6S1R0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TG1GaWFXeHBkSGxKWkNBOUlIQmhjbk5sU1c1MEtIQmhjblJ6VzJacFpXeGtjeTVoWW1sc2FYUjVTV1JkUHk1MGIxVndjR1Z5UTJGelpTZ3BJRDgvSUNjbktUdGNjbHh1SUNBZ0lIUm9hWE11WVdKcGJHbDBlVTVoYldVZ1BTQndZWEowYzF0bWFXVnNaSE11WVdKcGJHbDBlVTVoYldWZElEOC9JQ2NuTzF4eVhHNGdJQ0FnZEdocGN5NWtkWEpoZEdsdmJsTjBjbWx1WnlBOUlIQmhjblJ6VzJacFpXeGtjeTVrZFhKaGRHbHZibE4wY21sdVoxMGdQejhnSnljN1hISmNiaUFnSUNCMGFHbHpMbVIxY21GMGFXOXVSbXh2WVhRZ1BTQndZWEp6WlVac2IyRjBLSFJvYVhNdVpIVnlZWFJwYjI1VGRISnBibWNwTzF4eVhHNGdJQ0FnZEdocGN5NXBaQ0E5SUhCaGNuUnpXMlpwWld4a2N5NXBaRjAvTG5SdlZYQndaWEpEWVhObEtDa2dQejhnSnljN1hISmNiaUFnSUNCMGFHbHpMbTVoYldVZ1BTQndZWEowYzF0bWFXVnNaSE11Ym1GdFpWMGdQejhnSnljN1hISmNiaUFnSUNCMGFHbHpMblJoY21kbGRFbGtJRDBnY0dGeWRITmJabWxsYkdSekxuUmhjbWRsZEVsa1hUOHVkRzlWY0hCbGNrTmhjMlVvS1NBL1B5QW5KenRjY2x4dUlDQWdJSFJvYVhNdWRHRnlaMlYwVG1GdFpTQTlJSEJoY25SelcyWnBaV3hrY3k1MFlYSm5aWFJPWVcxbFhTQS9QeUFuSnp0Y2NseHVJQ0FnSUhSb2FYTXVjM1JoWTJ0eklEMGdjR0Z5YzJWSmJuUW9jR0Z5ZEhOYlptbGxiR1J6TG5OMFlXTnJjMTBnUHo4Z0p6QW5LVHRjY2x4dUlDQWdJSFJvYVhNdWRHRnlaMlYwU0hBZ1BTQndZWEp6WlVsdWRDaHdZWEowYzF0bWFXVnNaSE11ZEdGeVoyVjBTSEJkSUQ4L0lDY25LVHRjY2x4dUlDQWdJSFJvYVhNdWFIQWdQU0J3WVhKelpVbHVkQ2h3WVhKMGMxdG1hV1ZzWkhNdWMyOTFjbU5sU0hCZElEOC9JQ2NuS1R0Y2NseHVYSEpjYmlBZ0lDQnlaWEJ2TG5Wd1pHRjBaVU52YldKaGRHRnVkQ2gwYUdsekxtbGtMQ0I3WEhKY2JpQWdJQ0FnSUc1aGJXVTZJSFJvYVhNdWJtRnRaU3hjY2x4dUlDQWdJQ0FnYzNCaGQyNDZJSFJvYVhNdWRHbHRaWE4wWVcxd0xGeHlYRzRnSUNBZ0lDQmtaWE53WVhkdU9pQjBhR2x6TG5ScGJXVnpkR0Z0Y0N4Y2NseHVJQ0FnSUNBZ2FtOWlPaUIxYm1SbFptbHVaV1FzWEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQnlaWEJ2TG5Wd1pHRjBaVU52YldKaGRHRnVkQ2gwYUdsekxuUmhjbWRsZEVsa0xDQjdYSEpjYmlBZ0lDQWdJRzVoYldVNklIUm9hWE11ZEdGeVoyVjBUbUZ0WlN4Y2NseHVJQ0FnSUNBZ2MzQmhkMjQ2SUhSb2FYTXVkR2x0WlhOMFlXMXdMRnh5WEc0Z0lDQWdJQ0JrWlhOd1lYZHVPaUIwYUdsekxuUnBiV1Z6ZEdGdGNDeGNjbHh1SUNBZ0lDQWdhbTlpT2lCMWJtUmxabWx1WldRc1hISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxuSmxjMjlzZG1Wa1RtRnRaU0E5SUhKbGNHOHVjbVZ6YjJ4MlpVNWhiV1VvZEdocGN5NXBaQ3dnZEdocGN5NXVZVzFsS1R0Y2NseHVJQ0FnSUhSb2FYTXVjbVZ6YjJ4MlpXUlVZWEpuWlhST1lXMWxJRDBnY21Wd2J5NXlaWE52YkhabFRtRnRaU2gwYUdsekxuUmhjbWRsZEVsa0xDQjBhR2x6TG5SaGNtZGxkRTVoYldVcE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVptRnNiR0poWTJ0U1pYTnZiSFpsWkZSaGNtZGxkRTVoYldVZ1BWeHlYRzRnSUNBZ0lDQnlaWEJ2TG5KbGMyOXNkbVZPWVcxbEtIUm9hWE11YVdRc0lIUm9hWE11Ym1GdFpTd2dkR2hwY3k1MFlYSm5aWFJKWkN3Z2RHaHBjeTUwWVhKblpYUk9ZVzFsS1R0Y2NseHVYSEpjYmlBZ0lDQnNaWFFnYzNSaFkydERiM1Z1ZEZSbGVIUWdQU0FuSnp0Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TG5OMFlXTnJjeUErSURBZ0ppWWdkR2hwY3k1emRHRmphM01nUENBeU1DQW1KbHh5WEc0Z0lDQWdJQ0JNYVc1bFJYWmxiblF3ZURGQkxuTm9iM2RUZEdGamEwTnZkVzUwUm05eUxtbHVZMngxWkdWektIUm9hWE11WVdKcGJHbDBlVWxrS1NsY2NseHVJQ0FnSUNBZ2MzUmhZMnREYjNWdWRGUmxlSFFnUFNBbklDZ25JQ3NnZEdocGN5NXpkR0ZqYTNNdWRHOVRkSEpwYm1jb0tTQXJJQ2NwSnp0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TG1OdmJuWmxjblJsWkV4cGJtVWdQU0IwYUdsekxuQnlaV1pwZUNncElDc2dkR2hwY3k1MFlYSm5aWFJKWkNBclhISmNiaUFnSUNBZ0lDYzZKeUFySUhSb2FYTXVkR0Z5WjJWMFRtRnRaU0FyWEhKY2JpQWdJQ0FnSUNjZ1oyRnBibk1nZEdobElHVm1abVZqZENCdlppQW5JQ3NnZEdocGN5NWhZbWxzYVhSNVRtRnRaU0FyWEhKY2JpQWdJQ0FnSUNjZ1puSnZiU0FuSUNzZ2RHaHBjeTVtWVd4c1ltRmphMUpsYzI5c2RtVmtWR0Z5WjJWMFRtRnRaU0FyWEhKY2JpQWdJQ0FnSUNjZ1ptOXlJQ2NnS3lCMGFHbHpMbVIxY21GMGFXOXVVM1J5YVc1bklDc2dKeUJUWldOdmJtUnpMaWNnS3lCemRHRmphME52ZFc1MFZHVjRkRHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbkJ5YjNCbGNrTmhjMlZEYjI1MlpYSjBaV1JNYVc1bElEMGdkR2hwY3k1d2NtVm1hWGdvS1NBcklIUm9hWE11ZEdGeVoyVjBTV1FnSzF4eVhHNGdJQ0FnSUNBbk9pY2dLeUJGYlhWc1lYUnZja052YlcxdmJpNXdjbTl3WlhKRFlYTmxLSFJvYVhNdWRHRnlaMlYwVG1GdFpTa2dLMXh5WEc0Z0lDQWdJQ0FuSUdkaGFXNXpJSFJvWlNCbFptWmxZM1FnYjJZZ0p5QXJJSFJvYVhNdVlXSnBiR2wwZVU1aGJXVWdLMXh5WEc0Z0lDQWdJQ0FuSUdaeWIyMGdKeUFySUVWdGRXeGhkRzl5UTI5dGJXOXVMbkJ5YjNCbGNrTmhjMlVvZEdocGN5NW1ZV3hzWW1GamExSmxjMjlzZG1Wa1ZHRnlaMlYwVG1GdFpTa2dLMXh5WEc0Z0lDQWdJQ0FuSUdadmNpQW5JQ3NnZEdocGN5NWtkWEpoZEdsdmJsTjBjbWx1WnlBcklDY2dVMlZqYjI1a2N5NG5JQ3NnYzNSaFkydERiM1Z1ZEZSbGVIUTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnpkR0YwYVdNZ2MyaHZkMU4wWVdOclEyOTFiblJHYjNJNklISmxZV1J2Ym14NUlHNTFiV0psY2x0ZElEMGdXMXh5WEc0Z0lDQWdNekEwTENBdkx5QkJaWFJvWlhKbWJHOTNYSEpjYmlBZ0lDQTBNRFlzSUM4dklGWjFiRzVsY21GaWFXeHBkSGtnUkc5M2JseHlYRzRnSUNBZ016VXdMQ0F2THlCV2RXeHVaWEpoWW1sc2FYUjVJRVJ2ZDI1Y2NseHVJQ0FnSURjeE5Dd2dMeThnVm5Wc2JtVnlZV0pwYkdsMGVTQlZjRnh5WEc0Z0lDQWdOVEExTENBdkx5QkVZVzFoWjJVZ1ZYQmNjbHh1SUNBZ0lERXlNemtzSUM4dklFVnRZbTlzWkdWdVhISmNiaUFnSUNBeE1qazNMQ0F2THlCRmJXSnZiR1JsYmx4eVhHNGdJRjBnWVhNZ1kyOXVjM1E3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCamJHRnpjeUJNYVc1bFJYWmxiblF5TmlCbGVIUmxibVJ6SUV4cGJtVkZkbVZ1ZERCNE1VRWdlMzFjY2x4dUlpd2lhVzF3YjNKMElFeHBibVZGZG1WdWRDd2dleUJNYVc1bFJYWmxiblJUYjNWeVkyVWdmU0JtY205dElDY3VMMHhwYm1WRmRtVnVkQ2M3WEhKY2JtbHRjRzl5ZENCTWIyZFNaWEJ2YzJsMGIzSjVJR1p5YjIwZ0p5NHZURzluVW1Wd2IzTnBkRzl5ZVNjN1hISmNibHh5WEc1amIyNXpkQ0JtYVdWc1pITWdQU0I3WEhKY2JpQWdkR0Z5WjJWMFNXUTZJRElzWEhKY2JpQWdkR0Z5WjJWMFRtRnRaVG9nTXl4Y2NseHVJQ0JvWldGa2JXRnlhMlZ5U1dRNklEWXNYSEpjYm4wZ1lYTWdZMjl1YzNRN1hISmNibHh5WEc0dkx5QklaV0ZrSUcxaGNtdGxjaUJsZG1WdWRGeHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1RHbHVaVVYyWlc1ME1IZ3hRaUJsZUhSbGJtUnpJRXhwYm1WRmRtVnVkQ0JwYlhCc1pXMWxiblJ6SUV4cGJtVkZkbVZ1ZEZOdmRYSmpaU0I3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHbGtPaUJ6ZEhKcGJtYzdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUc1aGJXVTZJSE4wY21sdVp6dGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYUdWaFpHMWhjbXRsY2tsa09pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR2x6VTI5MWNtTmxJRDBnZEhKMVpUdGNjbHh1WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvY21Wd2J6b2dURzluVW1Wd2IzTnBkRzl5ZVN3Z2JHbHVaVG9nYzNSeWFXNW5MQ0J3WVhKMGN6b2djM1J5YVc1blcxMHBJSHRjY2x4dUlDQWdJSE4xY0dWeUtISmxjRzhzSUd4cGJtVXNJSEJoY25SektUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxtbGtJRDBnY0dGeWRITmJabWxsYkdSekxuUmhjbWRsZEVsa1hUOHVkRzlWY0hCbGNrTmhjMlVvS1NBL1B5QW5KenRjY2x4dUlDQWdJSFJvYVhNdWJtRnRaU0E5SUhCaGNuUnpXMlpwWld4a2N5NTBZWEpuWlhST1lXMWxYU0EvUHlBbkp6dGNjbHh1SUNBZ0lIUm9hWE11YUdWaFpHMWhjbXRsY2tsa0lEMGdjR0Z5ZEhOYlptbGxiR1J6TG1obFlXUnRZWEpyWlhKSlpGMGdQejhnSnljN1hISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nVEdsdVpVVjJaVzUwTWpjZ1pYaDBaVzVrY3lCTWFXNWxSWFpsYm5Rd2VERkNJSHQ5WEhKY2JpSXNJbWx0Y0c5eWRDQk1hVzVsUlhabGJuUWdabkp2YlNBbkxpOU1hVzVsUlhabGJuUW5PMXh5WEc1cGJYQnZjblFnVEc5blVtVndiM05wZEc5eWVTQm1jbTl0SUNjdUwweHZaMUpsY0c5emFYUnZjbmtuTzF4eVhHNWNjbHh1WTI5dWMzUWdabWxsYkdSeklEMGdlMXh5WEc0Z0lHOXdaWEpoZEdsdmJqb2dNaXhjY2x4dUlDQjNZWGx0WVhKck9pQXpMRnh5WEc0Z0lHbGtPaUEwTEZ4eVhHNGdJRzVoYldVNklEVXNYSEpjYmlBZ2VEb2dOaXhjY2x4dUlDQjVPaUEzTEZ4eVhHNGdJSG82SURnc1hISmNibjBnWVhNZ1kyOXVjM1E3WEhKY2JseHlYRzR2THlCR2JHOXZjaUIzWVhsdFlYSnJaWElnWlhabGJuUmNjbHh1Wlhod2IzSjBJR05zWVhOeklFeHBibVZGZG1WdWREQjRNVU1nWlhoMFpXNWtjeUJNYVc1bFJYWmxiblFnZTF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQnZjR1Z5WVhScGIyNDZJSE4wY21sdVp6dGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnZDJGNWJXRnlhem9nYzNSeWFXNW5PMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCcFpEb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J1WVcxbE9pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSGc2SUhOMGNtbHVaenRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2VUb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0I2T2lCemRISnBibWM3WEhKY2JseHlYRzRnSUdOdmJuTjBjblZqZEc5eUtISmxjRzg2SUV4dloxSmxjRzl6YVhSdmNua3NJR3hwYm1VNklITjBjbWx1Wnl3Z2NHRnlkSE02SUhOMGNtbHVaMXRkS1NCN1hISmNiaUFnSUNCemRYQmxjaWh5WlhCdkxDQnNhVzVsTENCd1lYSjBjeWs3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTV2Y0dWeVlYUnBiMjRnUFNCd1lYSjBjMXRtYVdWc1pITXViM0JsY21GMGFXOXVYU0EvUHlBbkp6dGNjbHh1SUNBZ0lIUm9hWE11ZDJGNWJXRnlheUE5SUhCaGNuUnpXMlpwWld4a2N5NTNZWGx0WVhKclhTQS9QeUFuSnp0Y2NseHVJQ0FnSUhSb2FYTXVhV1FnUFNCd1lYSjBjMXRtYVdWc1pITXVhV1JkUHk1MGIxVndjR1Z5UTJGelpTZ3BJRDgvSUNjbk8xeHlYRzRnSUNBZ2RHaHBjeTV1WVcxbElEMGdjR0Z5ZEhOYlptbGxiR1J6TG01aGJXVmRJRDgvSUNjbk8xeHlYRzRnSUNBZ2RHaHBjeTU0SUQwZ2NHRnlkSE5iWm1sbGJHUnpMbmhkSUQ4L0lDY25PMXh5WEc0Z0lDQWdkR2hwY3k1NUlEMGdjR0Z5ZEhOYlptbGxiR1J6TG5sZElEOC9JQ2NuTzF4eVhHNGdJQ0FnZEdocGN5NTZJRDBnY0dGeWRITmJabWxsYkdSekxucGRJRDgvSUNjbk8xeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHTnNZWE56SUV4cGJtVkZkbVZ1ZERJNElHVjRkR1Z1WkhNZ1RHbHVaVVYyWlc1ME1IZ3hReUI3ZlZ4eVhHNGlMQ0pwYlhCdmNuUWdUR2x1WlVWMlpXNTBJR1p5YjIwZ0p5NHZUR2x1WlVWMlpXNTBKenRjY2x4dWFXMXdiM0owSUV4dloxSmxjRzl6YVhSdmNua2dabkp2YlNBbkxpOU1iMmRTWlhCdmMybDBiM0o1Snp0Y2NseHVYSEpjYm1OdmJuTjBJR1pwWld4a2N5QTlJSHRjY2x4dUlDQnZjR1Z5WVhScGIyNDZJRElzWEhKY2JpQWdkMkY1YldGeWF6b2dNeXhjY2x4dUlDQnBaRG9nTkN4Y2NseHVJQ0J1WVcxbE9pQTFMRnh5WEc0Z0lIUmhjbWRsZEVsa09pQTJMRnh5WEc0Z0lIUmhjbWRsZEU1aGJXVTZJRGNzWEhKY2JuMGdZWE1nWTI5dWMzUTdYSEpjYmx4eVhHNHZMeUJYWVhsdFlYSnJaWEpjY2x4dVpYaHdiM0owSUdOc1lYTnpJRXhwYm1WRmRtVnVkREI0TVVRZ1pYaDBaVzVrY3lCTWFXNWxSWFpsYm5RZ2UxeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J2Y0dWeVlYUnBiMjQ2SUhOMGNtbHVaenRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2QyRjViV0Z5YXpvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQnBaRG9nYzNSeWFXNW5PMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCdVlXMWxPaUJ6ZEhKcGJtYzdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhSaGNtZGxkRWxrT2lCemRISnBibWM3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIUmhjbWRsZEU1aGJXVTZJSE4wY21sdVp6dGNjbHh1WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvY21Wd2J6b2dURzluVW1Wd2IzTnBkRzl5ZVN3Z2JHbHVaVG9nYzNSeWFXNW5MQ0J3WVhKMGN6b2djM1J5YVc1blcxMHBJSHRjY2x4dUlDQWdJSE4xY0dWeUtISmxjRzhzSUd4cGJtVXNJSEJoY25SektUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxtOXdaWEpoZEdsdmJpQTlJSEJoY25SelcyWnBaV3hrY3k1dmNHVnlZWFJwYjI1ZElEOC9JQ2NuTzF4eVhHNGdJQ0FnZEdocGN5NTNZWGx0WVhKcklEMGdjR0Z5ZEhOYlptbGxiR1J6TG5kaGVXMWhjbXRkSUQ4L0lDY25PMXh5WEc0Z0lDQWdkR2hwY3k1cFpDQTlJSEJoY25SelcyWnBaV3hrY3k1cFpGMC9MblJ2VlhCd1pYSkRZWE5sS0NrZ1B6OGdKeWM3WEhKY2JpQWdJQ0IwYUdsekxtNWhiV1VnUFNCd1lYSjBjMXRtYVdWc1pITXVibUZ0WlYwZ1B6OGdKeWM3WEhKY2JpQWdJQ0IwYUdsekxuUmhjbWRsZEVsa0lEMGdjR0Z5ZEhOYlptbGxiR1J6TG5SaGNtZGxkRWxrWFQ4dWRHOVZjSEJsY2tOaGMyVW9LU0EvUHlBbkp6dGNjbHh1SUNBZ0lIUm9hWE11ZEdGeVoyVjBUbUZ0WlNBOUlIQmhjblJ6VzJacFpXeGtjeTUwWVhKblpYUk9ZVzFsWFNBL1B5QW5KenRjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JqYkdGemN5Qk1hVzVsUlhabGJuUXlPU0JsZUhSbGJtUnpJRXhwYm1WRmRtVnVkREI0TVVRZ2UzMWNjbHh1SWl3aWFXMXdiM0owSUhzZ1RHbHVaVVYyWlc1ME1IZ3hRU0I5SUdaeWIyMGdKeTR2VEdsdVpVVjJaVzUwTUhneFFTYzdYSEpjYm1sdGNHOXlkQ0JGYlhWc1lYUnZja052YlcxdmJpQm1jbTl0SUNjdUxpOHVMaTlGYlhWc1lYUnZja052YlcxdmJpYzdYSEpjYm1sdGNHOXlkQ0JNYjJkU1pYQnZjMmwwYjNKNUlHWnliMjBnSnk0dlRHOW5VbVZ3YjNOcGRHOXllU2M3WEhKY2JseHlYRzR2THlCTWIzTmxJSE4wWVhSMWN5QmxabVpsWTNRZ1pYWmxiblJjY2x4dUx5OGdSWGgwWlc1a0lIUm9aU0JuWVdsdUlITjBZWFIxY3lCbGRtVnVkQ0IwYnlCeVpXUjFZMlVnWkhWd2JHbGpZWFJsSUdOdlpHVWdjMmx1WTJVZ2RHaGxlU2R5WlZ4eVhHNHZMeUIwYUdVZ2MyRnRaU0JtY205dElHRWdaR0YwWVNCd1pYSnpjR1ZqZEdsMlpWeHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1RHbHVaVVYyWlc1ME1IZ3hSU0JsZUhSbGJtUnpJRXhwYm1WRmRtVnVkREI0TVVFZ2UxeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J3Y205d1pYSkRZWE5sUTI5dWRtVnlkR1ZrVEdsdVpUb2djM1J5YVc1bk8xeHlYRzVjY2x4dUlDQmpiMjV6ZEhKMVkzUnZjaWh5WlhCdk9pQk1iMmRTWlhCdmMybDBiM0o1TENCc2FXNWxPaUJ6ZEhKcGJtY3NJSEJoY25Sek9pQnpkSEpwYm1kYlhTa2dlMXh5WEc0Z0lDQWdjM1Z3WlhJb2NtVndieXdnYkdsdVpTd2djR0Z5ZEhNcE8xeHlYRzVjY2x4dUlDQWdJR3hsZENCemRHRmphME52ZFc1MFZHVjRkQ0E5SUNjbk8xeHlYRzRnSUNBZ2FXWWdLSFJvYVhNdWMzUmhZMnR6SUQ0Z01DQW1KaUIwYUdsekxuTjBZV05yY3lBOElESXdJQ1ltWEhKY2JpQWdJQ0FnSUV4cGJtVkZkbVZ1ZERCNE1VRXVjMmh2ZDFOMFlXTnJRMjkxYm5SR2IzSXVhVzVqYkhWa1pYTW9kR2hwY3k1aFltbHNhWFI1U1dRcEtWeHlYRzRnSUNBZ0lDQnpkR0ZqYTBOdmRXNTBWR1Y0ZENBOUlDY2dLQ2NnS3lCMGFHbHpMbk4wWVdOcmN5NTBiMU4wY21sdVp5Z3BJQ3NnSnlrbk8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVkyOXVkbVZ5ZEdWa1RHbHVaU0E5SUhSb2FYTXVjSEpsWm1sNEtDa2dLeUIwYUdsekxuUmhjbWRsZEVsa0lDdGNjbHh1SUNBZ0lDQWdKem9uSUNzZ2RHaHBjeTUwWVhKblpYUk9ZVzFsSUN0Y2NseHVJQ0FnSUNBZ0p5QnNiM05sY3lCMGFHVWdaV1ptWldOMElHOW1JQ2NnS3lCMGFHbHpMbUZpYVd4cGRIbE9ZVzFsSUN0Y2NseHVJQ0FnSUNBZ0p5Qm1jbTl0SUNjZ0t5QjBhR2x6TG1aaGJHeGlZV05yVW1WemIyeDJaV1JVWVhKblpYUk9ZVzFsSUN0Y2NseHVJQ0FnSUNBZ0p5Qm1iM0lnSnlBcklIUm9hWE11WkhWeVlYUnBiMjVUZEhKcGJtY2dLeUFuSUZObFkyOXVaSE11SnlBcklITjBZV05yUTI5MWJuUlVaWGgwTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11Y0hKdmNHVnlRMkZ6WlVOdmJuWmxjblJsWkV4cGJtVWdQU0IwYUdsekxuQnlaV1pwZUNncElDc2dkR2hwY3k1MFlYSm5aWFJKWkNBclhISmNiaUFnSUNBZ0lDYzZKeUFySUVWdGRXeGhkRzl5UTI5dGJXOXVMbkJ5YjNCbGNrTmhjMlVvZEdocGN5NTBZWEpuWlhST1lXMWxLU0FyWEhKY2JpQWdJQ0FnSUNjZ2JHOXpaWE1nZEdobElHVm1abVZqZENCdlppQW5JQ3NnZEdocGN5NWhZbWxzYVhSNVRtRnRaU0FyWEhKY2JpQWdJQ0FnSUNjZ1puSnZiU0FuSUNzZ1JXMTFiR0YwYjNKRGIyMXRiMjR1Y0hKdmNHVnlRMkZ6WlNoMGFHbHpMbVpoYkd4aVlXTnJVbVZ6YjJ4MlpXUlVZWEpuWlhST1lXMWxLU0FyWEhKY2JpQWdJQ0FnSUNjZ1ptOXlJQ2NnS3lCMGFHbHpMbVIxY21GMGFXOXVVM1J5YVc1bklDc2dKeUJUWldOdmJtUnpMaWNnS3lCemRHRmphME52ZFc1MFZHVjRkRHRjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JqYkdGemN5Qk1hVzVsUlhabGJuUXpNQ0JsZUhSbGJtUnpJRXhwYm1WRmRtVnVkREI0TVVVZ2V5QjlYSEpjYmlJc0ltbHRjRzl5ZENCTWFXNWxSWFpsYm5RZ1puSnZiU0FuTGk5TWFXNWxSWFpsYm5Rbk8xeHlYRzVwYlhCdmNuUWdSVzExYkdGMGIzSkRiMjF0YjI0Z1puSnZiU0FuTGk0dkxpNHZSVzExYkdGMGIzSkRiMjF0YjI0bk8xeHlYRzVwYlhCdmNuUWdURzluVW1Wd2IzTnBkRzl5ZVNCbWNtOXRJQ2N1TDB4dloxSmxjRzl6YVhSdmNua25PMXh5WEc1Y2NseHVZMjl1YzNRZ2MzQnNhWFJHZFc1aklEMGdLSE02SUhOMGNtbHVaeWtnUFQ0Z1cxeHlYRzRnSUhNdWMzVmljM1J5S0RZc0lESXBMRnh5WEc0Z0lITXVjM1ZpYzNSeUtEUXNJRElwTEZ4eVhHNGdJSE11YzNWaWMzUnlLRElzSURJcExGeHlYRzRnSUhNdWMzVmljM1J5S0RBc0lESXBMRnh5WEc1ZE8xeHlYRzVjY2x4dVkyOXVjM1FnWm1sbGJHUnpJRDBnZTF4eVhHNGdJR2xrT2lBeUxGeHlYRzRnSUdSaGRHRkNlWFJsY3pFNklETXNYSEpjYmlBZ1pHRjBZVUo1ZEdWek1qb2dOQ3hjY2x4dUlDQmtZWFJoUW5sMFpYTXpPaUExTEZ4eVhHNGdJR1JoZEdGQ2VYUmxjelE2SURZc1hISmNibjBnWVhNZ1kyOXVjM1E3WEhKY2JseHlYRzR2THlCS2IySWdaMkYxWjJVZ1pYWmxiblJjY2x4dVpYaHdiM0owSUdOc1lYTnpJRXhwYm1WRmRtVnVkREI0TVVZZ1pYaDBaVzVrY3lCTWFXNWxSWFpsYm5RZ2UxeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0JxYjJKSFlYVm5aVUo1ZEdWek9pQnpkSEpwYm1kYlhUdGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYm1GdFpUb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J3Y205d1pYSkRZWE5sUTI5dWRtVnlkR1ZrVEdsdVpUb2djM1J5YVc1bk8xeHlYRzVjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2FXUTZJSE4wY21sdVp6dGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnWkdGMFlVSjVkR1Z6TVRvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQmtZWFJoUW5sMFpYTXlPaUJ6ZEhKcGJtYzdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdSaGRHRkNlWFJsY3pNNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2daR0YwWVVKNWRHVnpORG9nYzNSeWFXNW5PMXh5WEc1Y2NseHVJQ0JqYjI1emRISjFZM1J2Y2loeVpYQnZPaUJNYjJkU1pYQnZjMmwwYjNKNUxDQnNhVzVsT2lCemRISnBibWNzSUhCaGNuUnpPaUJ6ZEhKcGJtZGJYU2tnZTF4eVhHNGdJQ0FnYzNWd1pYSW9jbVZ3Ynl3Z2JHbHVaU3dnY0dGeWRITXBPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVhV1FnUFNCd1lYSjBjMXRtYVdWc1pITXVhV1JkUHk1MGIxVndjR1Z5UTJGelpTZ3BJRDgvSUNjbk8xeHlYRzRnSUNBZ2RHaHBjeTVrWVhSaFFubDBaWE14SUQwZ1JXMTFiR0YwYjNKRGIyMXRiMjR1ZW1WeWIxQmhaQ2h3WVhKMGMxdG1hV1ZzWkhNdVpHRjBZVUo1ZEdWek1WMGdQejhnSnljcE8xeHlYRzRnSUNBZ2RHaHBjeTVrWVhSaFFubDBaWE15SUQwZ1JXMTFiR0YwYjNKRGIyMXRiMjR1ZW1WeWIxQmhaQ2h3WVhKMGMxdG1hV1ZzWkhNdVpHRjBZVUo1ZEdWek1sMGdQejhnSnljcE8xeHlYRzRnSUNBZ2RHaHBjeTVrWVhSaFFubDBaWE16SUQwZ1JXMTFiR0YwYjNKRGIyMXRiMjR1ZW1WeWIxQmhaQ2h3WVhKMGMxdG1hV1ZzWkhNdVpHRjBZVUo1ZEdWek0xMGdQejhnSnljcE8xeHlYRzRnSUNBZ2RHaHBjeTVrWVhSaFFubDBaWE0wSUQwZ1JXMTFiR0YwYjNKRGIyMXRiMjR1ZW1WeWIxQmhaQ2h3WVhKMGMxdG1hV1ZzWkhNdVpHRjBZVUo1ZEdWek5GMGdQejhnSnljcE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdWFtOWlSMkYxWjJWQ2VYUmxjeUE5SUZ0Y2NseHVJQ0FnSUNBZ0xpNHVjM0JzYVhSR2RXNWpLSFJvYVhNdVpHRjBZVUo1ZEdWek1Ta3NYSEpjYmlBZ0lDQWdJQzR1TG5Od2JHbDBSblZ1WXloMGFHbHpMbVJoZEdGQ2VYUmxjeklwTEZ4eVhHNGdJQ0FnSUNBdUxpNXpjR3hwZEVaMWJtTW9kR2hwY3k1a1lYUmhRbmwwWlhNektTeGNjbHh1SUNBZ0lDQWdMaTR1YzNCc2FYUkdkVzVqS0hSb2FYTXVaR0YwWVVKNWRHVnpOQ2tzWEhKY2JpQWdJQ0JkTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11Ym1GdFpTQTlJSEpsY0c4dVEyOXRZbUYwWVc1MGMxdDBhR2x6TG1sa1hUOHVibUZ0WlNCOGZDQW5KenRjY2x4dVhISmNiaUFnSUNCeVpYQnZMblZ3WkdGMFpVTnZiV0poZEdGdWRDaDBhR2x6TG1sa0xDQjdYSEpjYmlBZ0lDQWdJRzVoYldVNklISmxjRzh1UTI5dFltRjBZVzUwYzF0MGFHbHpMbWxrWFQ4dWJtRnRaU3hjY2x4dUlDQWdJQ0FnYzNCaGQyNDZJSFJvYVhNdWRHbHRaWE4wWVcxd0xGeHlYRzRnSUNBZ0lDQmtaWE53WVhkdU9pQjBhR2x6TG5ScGJXVnpkR0Z0Y0N4Y2NseHVJQ0FnSUNBZ2FtOWlPaUIwYUdsekxtcHZZa2RoZFdkbFFubDBaWE5iTUYwL0xuUnZWWEJ3WlhKRFlYTmxLQ2tzWEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TG1OdmJuWmxjblJsWkV4cGJtVWdQU0IwYUdsekxuQnlaV1pwZUNncElDdGNjbHh1SUNBZ0lDQWdkR2hwY3k1cFpDQXJJQ2M2SnlBcklIUm9hWE11Ym1GdFpTQXJYSEpjYmlBZ0lDQWdJQ2M2SnlBcklIUm9hWE11WkdGMFlVSjVkR1Z6TVNBclhISmNiaUFnSUNBZ0lDYzZKeUFySUhSb2FYTXVaR0YwWVVKNWRHVnpNaUFyWEhKY2JpQWdJQ0FnSUNjNkp5QXJJSFJvYVhNdVpHRjBZVUo1ZEdWek15QXJYSEpjYmlBZ0lDQWdJQ2M2SnlBcklIUm9hWE11WkdGMFlVSjVkR1Z6TkR0Y2NseHVJQ0FnSUhSb2FYTXVjSEp2Y0dWeVEyRnpaVU52Ym5abGNuUmxaRXhwYm1VZ1BTQjBhR2x6TG5CeVpXWnBlQ2dwSUN0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVwWkNBcklDYzZKeUFySUNoRmJYVnNZWFJ2Y2tOdmJXMXZiaTV3Y205d1pYSkRZWE5sS0hSb2FYTXVibUZ0WlNrcElDdGNjbHh1SUNBZ0lDQWdKem9uSUNzZ2RHaHBjeTVrWVhSaFFubDBaWE14SUN0Y2NseHVJQ0FnSUNBZ0p6b25JQ3NnZEdocGN5NWtZWFJoUW5sMFpYTXlJQ3RjY2x4dUlDQWdJQ0FnSnpvbklDc2dkR2hwY3k1a1lYUmhRbmwwWlhNeklDdGNjbHh1SUNBZ0lDQWdKem9uSUNzZ2RHaHBjeTVrWVhSaFFubDBaWE0wTzF4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdOc1lYTnpJRXhwYm1WRmRtVnVkRE14SUdWNGRHVnVaSE1nVEdsdVpVVjJaVzUwTUhneFJpQjdmVnh5WEc0aUxDSnBiWEJ2Y25RZ1RHbHVaVVYyWlc1MExDQjdJRXhwYm1WRmRtVnVkRk52ZFhKalpTQjlJR1p5YjIwZ0p5NHZUR2x1WlVWMlpXNTBKenRjY2x4dWFXMXdiM0owSUV4dloxSmxjRzl6YVhSdmNua2dabkp2YlNBbkxpOU1iMmRTWlhCdmMybDBiM0o1Snp0Y2NseHVYSEpjYm1OdmJuTjBJR1pwWld4a2N5QTlJSHRjY2x4dUlDQnBaRG9nTWl4Y2NseHVJQ0J1WVcxbE9pQXpMRnh5WEc0Z0lIUmhjbWRsZEVsa09pQTBMRnh5WEc0Z0lIUmhjbWRsZEU1aGJXVTZJRFVzWEhKY2JpQWdkR0Z5WjJWMFlXSnNaVG9nTml4Y2NseHVmU0JoY3lCamIyNXpkRHRjY2x4dVhISmNiaTh2SUU1aGJXVndiR0YwWlNCMGIyZG5iR1ZjY2x4dVpYaHdiM0owSUdOc1lYTnpJRXhwYm1WRmRtVnVkREI0TWpJZ1pYaDBaVzVrY3lCTWFXNWxSWFpsYm5RZ2FXMXdiR1Z0Wlc1MGN5Qk1hVzVsUlhabGJuUlRiM1Z5WTJVZ2UxeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0JwWkRvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQnVZVzFsT2lCemRISnBibWM3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlIUmhjbWRsZEVsa09pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSFJoY21kbGRFNWhiV1U2SUhOMGNtbHVaenRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2RHRnlaMlYwWVdKc1pUb2dZbTl2YkdWaGJqdGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYVhOVGIzVnlZMlVnUFNCMGNuVmxPMXh5WEc1Y2NseHVJQ0JqYjI1emRISjFZM1J2Y2loeVpYQnZPaUJNYjJkU1pYQnZjMmwwYjNKNUxDQnNhVzVsT2lCemRISnBibWNzSUhCaGNuUnpPaUJ6ZEhKcGJtZGJYU2tnZTF4eVhHNGdJQ0FnYzNWd1pYSW9jbVZ3Ynl3Z2JHbHVaU3dnY0dGeWRITXBPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVhV1FnUFNCd1lYSjBjMXRtYVdWc1pITXVhV1JkUHk1MGIxVndjR1Z5UTJGelpTZ3BJRDgvSUNjbk8xeHlYRzRnSUNBZ2RHaHBjeTV1WVcxbElEMGdjR0Z5ZEhOYlptbGxiR1J6TG01aGJXVmRJRDgvSUNjbk8xeHlYRzRnSUNBZ2RHaHBjeTUwWVhKblpYUkpaQ0E5SUhCaGNuUnpXMlpwWld4a2N5NTBZWEpuWlhSSlpGMC9MblJ2VlhCd1pYSkRZWE5sS0NrZ1B6OGdKeWM3WEhKY2JpQWdJQ0IwYUdsekxuUmhjbWRsZEU1aGJXVWdQU0J3WVhKMGMxdG1hV1ZzWkhNdWRHRnlaMlYwVG1GdFpWMGdQejhnSnljN1hISmNiaUFnSUNCMGFHbHpMblJoY21kbGRHRmliR1VnUFNBaElYQmhjbk5sU1c1MEtIQmhjblJ6VzJacFpXeGtjeTUwWVhKblpYUmhZbXhsWFNBL1B5QW5KeXdnTVRZcE8xeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHTnNZWE56SUV4cGJtVkZkbVZ1ZERNMElHVjRkR1Z1WkhNZ1RHbHVaVVYyWlc1ME1IZ3lNaUI3ZlZ4eVhHNGlMQ0pwYlhCdmNuUWdUR2x1WlVWMlpXNTBJR1p5YjIwZ0p5NHZUR2x1WlVWMlpXNTBKenRjY2x4dWFXMXdiM0owSUV4dloxSmxjRzl6YVhSdmNua2dabkp2YlNBbkxpOU1iMmRTWlhCdmMybDBiM0o1Snp0Y2NseHVYSEpjYm1OdmJuTjBJR1pwWld4a2N5QTlJSHRjY2x4dUlDQnBaRG9nTWl4Y2NseHVJQ0J1WVcxbE9pQXpMRnh5WEc0Z0lIUmhjbWRsZEVsa09pQTBMRnh5WEc0Z0lIUmhjbWRsZEU1aGJXVTZJRFVzWEhKY2JpQWdkR1YwYUdWeVNXUTZJRGdzWEhKY2JuMGdZWE1nWTI5dWMzUTdYSEpjYmx4eVhHNHZMeUJVWlhSb1pYSWdaWFpsYm5SY2NseHVaWGh3YjNKMElHTnNZWE56SUV4cGJtVkZkbVZ1ZERCNE1qTWdaWGgwWlc1a2N5Qk1hVzVsUlhabGJuUWdlMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCcFpEb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J1WVcxbE9pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSFJoY21kbGRFbGtPaUJ6ZEhKcGJtYzdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhSaGNtZGxkRTVoYldVNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dkR1YwYUdWeVNXUTZJSE4wY21sdVp6dGNjbHh1WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvY21Wd2J6b2dURzluVW1Wd2IzTnBkRzl5ZVN3Z2JHbHVaVG9nYzNSeWFXNW5MQ0J3WVhKMGN6b2djM1J5YVc1blcxMHBJSHRjY2x4dUlDQWdJSE4xY0dWeUtISmxjRzhzSUd4cGJtVXNJSEJoY25SektUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxtbGtJRDBnY0dGeWRITmJabWxsYkdSekxtbGtYVDh1ZEc5VmNIQmxja05oYzJVb0tTQS9QeUFuSnp0Y2NseHVJQ0FnSUhSb2FYTXVibUZ0WlNBOUlIQmhjblJ6VzJacFpXeGtjeTV1WVcxbFhTQS9QeUFuSnp0Y2NseHVJQ0FnSUhSb2FYTXVkR0Z5WjJWMFNXUWdQU0J3WVhKMGMxdG1hV1ZzWkhNdWRHRnlaMlYwU1dSZFB5NTBiMVZ3Y0dWeVEyRnpaU2dwSUQ4L0lDY25PMXh5WEc0Z0lDQWdkR2hwY3k1MFlYSm5aWFJPWVcxbElEMGdjR0Z5ZEhOYlptbGxiR1J6TG5SaGNtZGxkRTVoYldWZElEOC9JQ2NuTzF4eVhHNGdJQ0FnZEdocGN5NTBaWFJvWlhKSlpDQTlJSEJoY25SelcyWnBaV3hrY3k1MFpYUm9aWEpKWkYwZ1B6OGdKeWM3WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWTJ4aGMzTWdUR2x1WlVWMlpXNTBNelVnWlhoMFpXNWtjeUJNYVc1bFJYWmxiblF3ZURJeklIdDlYSEpjYmlJc0ltbHRjRzl5ZENCTWFXNWxSWFpsYm5RZ1puSnZiU0FuTGk5TWFXNWxSWFpsYm5Rbk8xeHlYRzVwYlhCdmNuUWdURzluVW1Wd2IzTnBkRzl5ZVNCbWNtOXRJQ2N1TDB4dloxSmxjRzl6YVhSdmNua25PMXh5WEc1Y2NseHVZMjl1YzNRZ1ptbGxiR1J6SUQwZ2UxeHlYRzRnSUhaaGJIVmxTR1Y0T2lBeUxGeHlYRzRnSUdKaGNuTTZJRE1zWEhKY2JuMGdZWE1nWTI5dWMzUTdYSEpjYmx4eVhHNHZMeUJNYVcxcGRDQm5ZWFZuWlNCbGRtVnVkRnh5WEc1bGVIQnZjblFnWTJ4aGMzTWdUR2x1WlVWMlpXNTBNSGd5TkNCbGVIUmxibVJ6SUV4cGJtVkZkbVZ1ZENCN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSFpoYkhWbFNHVjRPaUJ6ZEhKcGJtYzdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhaaGJIVmxSR1ZqT2lCdWRXMWlaWEk3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHSmhjbk02SUhOMGNtbHVaenRjY2x4dVhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2NtVndiem9nVEc5blVtVndiM05wZEc5eWVTd2diR2x1WlRvZ2MzUnlhVzVuTENCd1lYSjBjem9nYzNSeWFXNW5XMTBwSUh0Y2NseHVJQ0FnSUhOMWNHVnlLSEpsY0c4c0lHeHBibVVzSUhCaGNuUnpLVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMblpoYkhWbFNHVjRJRDBnY0dGeWRITmJabWxsYkdSekxuWmhiSFZsU0dWNFhTQS9QeUFuSnp0Y2NseHVJQ0FnSUhSb2FYTXVkbUZzZFdWRVpXTWdQU0J3WVhKelpVbHVkQ2gwYUdsekxuWmhiSFZsU0dWNExDQXhOaWs3WEhKY2JpQWdJQ0IwYUdsekxtSmhjbk1nUFNCd1lYSjBjMXRtYVdWc1pITXVZbUZ5YzEwZ1B6OGdKeWM3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVqYjI1MlpYSjBaV1JNYVc1bElEMGdkR2hwY3k1d2NtVm1hWGdvS1NBcklDZE1hVzFwZENCQ2NtVmhhem9nSnlBcklIUm9hWE11ZG1Gc2RXVklaWGc3WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWTJ4aGMzTWdUR2x1WlVWMlpXNTBNellnWlhoMFpXNWtjeUJNYVc1bFJYWmxiblF3ZURJMElIdDlYSEpjYmlJc0ltbHRjRzl5ZENCTWFXNWxSWFpsYm5Rc0lIc2dUR2x1WlVWMlpXNTBVMjkxY21ObElIMGdabkp2YlNBbkxpOU1hVzVsUlhabGJuUW5PMXh5WEc1cGJYQnZjblFnVEc5blVtVndiM05wZEc5eWVTQm1jbTl0SUNjdUwweHZaMUpsY0c5emFYUnZjbmtuTzF4eVhHNWNjbHh1WTI5dWMzUWdabWxsYkdSeklEMGdlMXh5WEc0Z0lHbGtPaUF5TEZ4eVhHNGdJRzVoYldVNklETXNYSEpjYmlBZ2MyVnhkV1Z1WTJWSlpEb2dOQ3hjY2x4dUlDQmpkWEp5Wlc1MFNIQTZJRFVzWEhKY2JpQWdiV0Y0U0hBNklEWXNYSEpjYmlBZ1kzVnljbVZ1ZEUxd09pQTNMRnh5WEc0Z0lHMWhlRTF3T2lBNExGeHlYRzRnSUdOMWNuSmxiblJVY0RvZ09TeGNjbHh1SUNCdFlYaFVjRG9nTVRBc1hISmNiaUFnZURvZ01URXNYSEpjYmlBZ2VUb2dNVElzWEhKY2JpQWdlam9nTVRNc1hISmNiaUFnYUdWaFpHbHVaem9nTVRRc1hISmNibjBnWVhNZ1kyOXVjM1E3WEhKY2JseHlYRzR2THlCQlkzUnBiMjRnYzNsdVl5QmxkbVZ1ZEZ4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nVEdsdVpVVjJaVzUwTUhneU5TQmxlSFJsYm1SeklFeHBibVZGZG1WdWRDQnBiWEJzWlcxbGJuUnpJRXhwYm1WRmRtVnVkRk52ZFhKalpTQjdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdsa09pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJRzVoYldVNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2djMlZ4ZFdWdVkyVkpaRG9nYzNSeWFXNW5PMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCb2NEb2diblZ0WW1WeU8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J0WVhoSWNEb2diblZ0WW1WeU8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J0Y0RvZ2JuVnRZbVZ5TzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQnRZWGhOY0RvZ2JuVnRZbVZ5TzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQjBjRG9nYm5WdFltVnlPMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCdFlYaFVjRG9nYm5WdFltVnlPMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCNE9pQnVkVzFpWlhJN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSGs2SUc1MWJXSmxjanRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2Vqb2diblZ0WW1WeU8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0JvWldGa2FXNW5PaUJ1ZFcxaVpYSTdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdselUyOTFjbU5sSUQwZ2RISjFaVHRjY2x4dVhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2NtVndiem9nVEc5blVtVndiM05wZEc5eWVTd2diR2x1WlRvZ2MzUnlhVzVuTENCd1lYSjBjem9nYzNSeWFXNW5XMTBwSUh0Y2NseHVJQ0FnSUhOMWNHVnlLSEpsY0c4c0lHeHBibVVzSUhCaGNuUnpLVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbWxrSUQwZ2NHRnlkSE5iWm1sbGJHUnpMbWxrWFQ4dWRHOVZjSEJsY2tOaGMyVW9LU0EvUHlBbkp6dGNjbHh1SUNBZ0lIUm9hWE11Ym1GdFpTQTlJSEJoY25SelcyWnBaV3hrY3k1dVlXMWxYU0EvUHlBbkp6dGNjbHh1SUNBZ0lIUm9hWE11YzJWeGRXVnVZMlZKWkNBOUlIQmhjblJ6VzJacFpXeGtjeTV6WlhGMVpXNWpaVWxrWFNBL1B5QW5KenRjY2x4dUlDQWdJSFJvYVhNdWFIQWdQU0J3WVhKelpVbHVkQ2h3WVhKMGMxdG1hV1ZzWkhNdVkzVnljbVZ1ZEVod1hTQS9QeUFuSnlrN1hISmNiaUFnSUNCMGFHbHpMbTFoZUVod0lEMGdjR0Z5YzJWSmJuUW9jR0Z5ZEhOYlptbGxiR1J6TG0xaGVFaHdYU0EvUHlBbkp5azdYSEpjYmlBZ0lDQjBhR2x6TG0xd0lEMGdjR0Z5YzJWSmJuUW9jR0Z5ZEhOYlptbGxiR1J6TG1OMWNuSmxiblJOY0YwZ1B6OGdKeWNwTzF4eVhHNGdJQ0FnZEdocGN5NXRZWGhOY0NBOUlIQmhjbk5sU1c1MEtIQmhjblJ6VzJacFpXeGtjeTV0WVhoTmNGMGdQejhnSnljcE8xeHlYRzRnSUNBZ2RHaHBjeTUwY0NBOUlIQmhjbk5sU1c1MEtIQmhjblJ6VzJacFpXeGtjeTVqZFhKeVpXNTBWSEJkSUQ4L0lDY25LVHRjY2x4dUlDQWdJSFJvYVhNdWJXRjRWSEFnUFNCd1lYSnpaVWx1ZENod1lYSjBjMXRtYVdWc1pITXViV0Y0VkhCZElEOC9JQ2NuS1R0Y2NseHVJQ0FnSUhSb2FYTXVlQ0E5SUhCaGNuTmxSbXh2WVhRb2NHRnlkSE5iWm1sbGJHUnpMbmhkSUQ4L0lDY25LVHRjY2x4dUlDQWdJSFJvYVhNdWVTQTlJSEJoY25ObFJteHZZWFFvY0dGeWRITmJabWxsYkdSekxubGRJRDgvSUNjbktUdGNjbHh1SUNBZ0lIUm9hWE11ZWlBOUlIQmhjbk5sUm14dllYUW9jR0Z5ZEhOYlptbGxiR1J6TG5wZElEOC9JQ2NuS1R0Y2NseHVJQ0FnSUhSb2FYTXVhR1ZoWkdsdVp5QTlJSEJoY25ObFJteHZZWFFvY0dGeWRITmJabWxsYkdSekxtaGxZV1JwYm1kZElEOC9JQ2NuS1R0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCamJHRnpjeUJNYVc1bFJYWmxiblF6TnlCbGVIUmxibVJ6SUV4cGJtVkZkbVZ1ZERCNE1qVWdlMzFjY2x4dUlpd2lhVzF3YjNKMElFeHBibVZGZG1WdWRDd2dleUJNYVc1bFJYWmxiblJLYjJKTVpYWmxiQ3dnVEdsdVpVVjJaVzUwVTI5MWNtTmxJSDBnWm5KdmJTQW5MaTlNYVc1bFJYWmxiblFuTzF4eVhHNXBiWEJ2Y25RZ1JXMTFiR0YwYjNKRGIyMXRiMjRnWm5KdmJTQW5MaTR2TGk0dlJXMTFiR0YwYjNKRGIyMXRiMjRuTzF4eVhHNXBiWEJ2Y25RZ1ZYUnBiQ0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTh1TGk5eVpYTnZkWEpqWlhNdmRYUnBiQ2M3WEhKY2JtbHRjRzl5ZENCTWIyZFNaWEJ2YzJsMGIzSjVJR1p5YjIwZ0p5NHZURzluVW1Wd2IzTnBkRzl5ZVNjN1hISmNibWx0Y0c5eWRDQjdJRXB2WWlCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUx5NHVMM1I1Y0dWekwycHZZaWM3WEhKY2JseHlYRzVqYjI1emRDQm1hV1ZzWkhNZ1BTQjdYSEpjYmlBZ2FXUTZJRElzWEhKY2JpQWdibUZ0WlRvZ015eGNjbHh1SUNCcWIySk1aWFpsYkVSaGRHRTZJRFFzWEhKY2JpQWdZM1Z5Y21WdWRFaHdPaUExTEZ4eVhHNGdJRzFoZUVod09pQTJMRnh5WEc0Z0lHTjFjbkpsYm5STmNEb2dOeXhjY2x4dUlDQnRZWGhOY0RvZ09DeGNjbHh1SUNCamRYSnlaVzUwVkhBNklEa3NYSEpjYmlBZ2JXRjRWSEE2SURFd0xGeHlYRzRnSUhnNklERXhMRnh5WEc0Z0lIazZJREV5TEZ4eVhHNGdJSG82SURFekxGeHlYRzRnSUdobFlXUnBibWM2SURFMExGeHlYRzU5SUdGeklHTnZibk4wTzF4eVhHNWNjbHh1THk4Z1RtVjBkMjl5YXlCemRHRjBkWE1nWldabVpXTjBJR1YyWlc1MFhISmNibVY0Y0c5eWRDQmpiR0Z6Y3lCTWFXNWxSWFpsYm5Rd2VESTJJR1Y0ZEdWdVpITWdUR2x1WlVWMlpXNTBJR2x0Y0d4bGJXVnVkSE1nVEdsdVpVVjJaVzUwVTI5MWNtTmxMQ0JNYVc1bFJYWmxiblJLYjJKTVpYWmxiQ0I3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHcHZZa2xrU0dWNE9pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR3B2WWtsa09pQnVkVzFpWlhJN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR3B2WWpvZ1NtOWlPMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCc1pYWmxiRG9nYm5WdFltVnlPMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCcFpEb2djM1J5YVc1bk8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J1WVcxbE9pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJR3B2WWt4bGRtVnNSR0YwWVRvZ2MzUnlhVzVuTzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQm9jRG9nYm5WdFltVnlPMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCdFlYaEljRG9nYm5WdFltVnlPMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCdGNEb2diblZ0WW1WeU8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0J0WVhoTmNEb2diblZ0WW1WeU8xeHlYRzRnSUhCMVlteHBZeUJ5WldGa2IyNXNlU0IwY0RvZ2JuVnRZbVZ5TzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQnRZWGhVY0RvZ2JuVnRZbVZ5TzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQjRPaUJ1ZFcxaVpYSTdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUhrNklHNTFiV0psY2p0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dlam9nYm5WdFltVnlPMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCb1pXRmthVzVuT2lCdWRXMWlaWEk3WEhKY2JpQWdjSFZpYkdsaklISmxZV1J2Ym14NUlHbHpVMjkxY21ObElEMGdkSEoxWlR0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dhWE5LYjJKTVpYWmxiQ0E5SUhSeWRXVTdYSEpjYmx4eVhHNGdJR052Ym5OMGNuVmpkRzl5S0hKbGNHODZJRXh2WjFKbGNHOXphWFJ2Y25rc0lHeHBibVU2SUhOMGNtbHVaeXdnY0dGeWRITTZJSE4wY21sdVoxdGRLU0I3WEhKY2JpQWdJQ0J6ZFhCbGNpaHlaWEJ2TENCc2FXNWxMQ0J3WVhKMGN5azdYSEpjYmx4eVhHNGdJQ0FnZEdocGN5NXBaQ0E5SUhCaGNuUnpXMlpwWld4a2N5NXBaRjAvTG5SdlZYQndaWEpEWVhObEtDa2dQejhnSnljN1hISmNiaUFnSUNCMGFHbHpMbTVoYldVZ1BTQndZWEowYzF0bWFXVnNaSE11Ym1GdFpWMGdQejhnSnljN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1cWIySk1aWFpsYkVSaGRHRWdQU0J3WVhKMGMxdG1hV1ZzWkhNdWFtOWlUR1YyWld4RVlYUmhYU0EvUHlBbkp6dGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxtaHdJRDBnY0dGeWMyVkpiblFvY0dGeWRITmJabWxsYkdSekxtTjFjbkpsYm5SSWNGMGdQejhnSnljcE8xeHlYRzRnSUNBZ2RHaHBjeTV0WVhoSWNDQTlJSEJoY25ObFNXNTBLSEJoY25SelcyWnBaV3hrY3k1dFlYaEljRjBnUHo4Z0p5Y3BPMXh5WEc0Z0lDQWdkR2hwY3k1dGNDQTlJSEJoY25ObFNXNTBLSEJoY25SelcyWnBaV3hrY3k1amRYSnlaVzUwVFhCZElEOC9JQ2NuS1R0Y2NseHVJQ0FnSUhSb2FYTXViV0Y0VFhBZ1BTQndZWEp6WlVsdWRDaHdZWEowYzF0bWFXVnNaSE11YldGNFRYQmRJRDgvSUNjbktUdGNjbHh1SUNBZ0lIUm9hWE11ZEhBZ1BTQndZWEp6WlVsdWRDaHdZWEowYzF0bWFXVnNaSE11WTNWeWNtVnVkRlJ3WFNBL1B5QW5KeWs3WEhKY2JpQWdJQ0IwYUdsekxtMWhlRlJ3SUQwZ2NHRnljMlZKYm5Rb2NHRnlkSE5iWm1sbGJHUnpMbTFoZUZSd1hTQS9QeUFuSnlrN1hISmNiaUFnSUNCMGFHbHpMbmdnUFNCd1lYSnpaVVpzYjJGMEtIQmhjblJ6VzJacFpXeGtjeTU0WFNBL1B5QW5KeWs3WEhKY2JpQWdJQ0IwYUdsekxua2dQU0J3WVhKelpVWnNiMkYwS0hCaGNuUnpXMlpwWld4a2N5NTVYU0EvUHlBbkp5azdYSEpjYmlBZ0lDQjBhR2x6TG5vZ1BTQndZWEp6WlVac2IyRjBLSEJoY25SelcyWnBaV3hrY3k1NlhTQS9QeUFuSnlrN1hISmNiaUFnSUNCMGFHbHpMbWhsWVdScGJtY2dQU0J3WVhKelpVWnNiMkYwS0hCaGNuUnpXMlpwWld4a2N5NW9aV0ZrYVc1blhTQS9QeUFuSnlrN1hISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ2NHRmtaR1ZrSUQwZ1JXMTFiR0YwYjNKRGIyMXRiMjR1ZW1WeWIxQmhaQ2gwYUdsekxtcHZZa3hsZG1Wc1JHRjBZU3dnT0NrN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1cWIySkpaRWhsZUNBOUlIQmhaR1JsWkM1emRXSnpkSElvTml3Z01pa3VkRzlWY0hCbGNrTmhjMlVvS1R0Y2NseHVJQ0FnSUhSb2FYTXVhbTlpU1dRZ1BTQndZWEp6WlVsdWRDaDBhR2x6TG1wdllrbGtTR1Y0TENBeE5pazdYSEpjYmlBZ0lDQjBhR2x6TG1wdllpQTlJRlYwYVd3dWFtOWlSVzUxYlZSdlNtOWlLSFJvYVhNdWFtOWlTV1FwTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11YkdWMlpXd2dQU0J3WVhKelpVbHVkQ2h3WVdSa1pXUXVjM1ZpYzNSeUtEUXNJRElwTENBeE5pazdYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1RHbHVaVVYyWlc1ME16Z2daWGgwWlc1a2N5Qk1hVzVsUlhabGJuUXdlREkySUh0OVhISmNiaUlzSW1sdGNHOXlkQ0JNYVc1bFJYWmxiblFzSUhzZ1RHbHVaVVYyWlc1MFUyOTFjbU5sSUgwZ1puSnZiU0FuTGk5TWFXNWxSWFpsYm5Rbk8xeHlYRzVwYlhCdmNuUWdURzluVW1Wd2IzTnBkRzl5ZVNCbWNtOXRJQ2N1TDB4dloxSmxjRzl6YVhSdmNua25PMXh5WEc1Y2NseHVZMjl1YzNRZ1ptbGxiR1J6SUQwZ2UxeHlYRzRnSUdsa09pQXlMRnh5WEc0Z0lHNWhiV1U2SURNc1hISmNiaUFnWTNWeWNtVnVkRWh3T2lBMExGeHlYRzRnSUcxaGVFaHdPaUExTEZ4eVhHNGdJR04xY25KbGJuUk5jRG9nTml4Y2NseHVJQ0J0WVhoTmNEb2dOeXhjY2x4dUlDQmpkWEp5Wlc1MFZIQTZJRGdzWEhKY2JpQWdiV0Y0VkhBNklEa3NYSEpjYmlBZ2VEb2dNVEFzWEhKY2JpQWdlVG9nTVRFc1hISmNiaUFnZWpvZ01USXNYSEpjYmlBZ2FHVmhaR2x1WnpvZ01UTXNYSEpjYm4wZ1lYTWdZMjl1YzNRN1hISmNibHh5WEc0dkx5Qk9aWFIzYjNKcklIVndaR0YwWlNCb2NDQmxkbVZ1ZEZ4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nVEdsdVpVVjJaVzUwTUhneU55QmxlSFJsYm1SeklFeHBibVZGZG1WdWRDQnBiWEJzWlcxbGJuUnpJRXhwYm1WRmRtVnVkRk52ZFhKalpTQjdYSEpjYmlBZ2NIVmliR2xqSUhKbFlXUnZibXg1SUdsa09pQnpkSEpwYm1jN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJRzVoYldVNklITjBjbWx1Wnp0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dhSEE2SUc1MWJXSmxjanRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2JXRjRTSEE2SUc1MWJXSmxjanRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2JYQTZJRzUxYldKbGNqdGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnYldGNFRYQTZJRzUxYldKbGNqdGNjbHh1SUNCd2RXSnNhV01nY21WaFpHOXViSGtnZEhBNklHNTFiV0psY2p0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2diV0Y0VkhBNklHNTFiV0psY2p0Y2NseHVJQ0J3ZFdKc2FXTWdjbVZoWkc5dWJIa2dlRG9nYm5WdFltVnlPMXh5WEc0Z0lIQjFZbXhwWXlCeVpXRmtiMjVzZVNCNU9pQnVkVzFpWlhJN1hISmNiaUFnY0hWaWJHbGpJSEpsWVdSdmJteDVJSG82SUc1MWJXSmxjanRjY2x4dUlDQndkV0pzYVdNZ2NtVmhaRzl1YkhrZ2FHVmhaR2x1WnpvZ2JuVnRZbVZ5TzF4eVhHNGdJSEIxWW14cFl5QnlaV0ZrYjI1c2VTQnBjMU52ZFhKalpTQTlJSFJ5ZFdVN1hISmNibHh5WEc0Z0lHTnZibk4wY25WamRHOXlLSEpsY0c4NklFeHZaMUpsY0c5emFYUnZjbmtzSUd4cGJtVTZJSE4wY21sdVp5d2djR0Z5ZEhNNklITjBjbWx1WjF0ZEtTQjdYSEpjYmlBZ0lDQnpkWEJsY2loeVpYQnZMQ0JzYVc1bExDQndZWEowY3lrN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1cFpDQTlJSEJoY25SelcyWnBaV3hrY3k1cFpGMC9MblJ2VlhCd1pYSkRZWE5sS0NrZ1B6OGdKeWM3WEhKY2JpQWdJQ0IwYUdsekxtNWhiV1VnUFNCd1lYSjBjMXRtYVdWc1pITXVibUZ0WlYwZ1B6OGdKeWM3WEhKY2JpQWdJQ0IwYUdsekxtaHdJRDBnY0dGeWMyVkpiblFvY0dGeWRITmJabWxsYkdSekxtTjFjbkpsYm5SSWNGMGdQejhnSnljcE8xeHlYRzRnSUNBZ2RHaHBjeTV0WVhoSWNDQTlJSEJoY25ObFNXNTBLSEJoY25SelcyWnBaV3hrY3k1dFlYaEljRjBnUHo4Z0p5Y3BPMXh5WEc0Z0lDQWdkR2hwY3k1dGNDQTlJSEJoY25ObFNXNTBLSEJoY25SelcyWnBaV3hrY3k1amRYSnlaVzUwVFhCZElEOC9JQ2NuS1R0Y2NseHVJQ0FnSUhSb2FYTXViV0Y0VFhBZ1BTQndZWEp6WlVsdWRDaHdZWEowYzF0bWFXVnNaSE11YldGNFRYQmRJRDgvSUNjbktUdGNjbHh1SUNBZ0lIUm9hWE11ZEhBZ1BTQndZWEp6WlVsdWRDaHdZWEowYzF0bWFXVnNaSE11WTNWeWNtVnVkRlJ3WFNBL1B5QW5KeWs3WEhKY2JpQWdJQ0IwYUdsekxtMWhlRlJ3SUQwZ2NHRnljMlZKYm5Rb2NHRnlkSE5iWm1sbGJHUnpMbTFoZUZSd1hTQS9QeUFuSnlrN1hISmNiaUFnSUNCMGFHbHpMbmdnUFNCd1lYSnpaVVpzYjJGMEtIQmhjblJ6VzJacFpXeGtjeTU0WFNBL1B5QW5KeWs3WEhKY2JpQWdJQ0IwYUdsekxua2dQU0J3WVhKelpVWnNiMkYwS0hCaGNuUnpXMlpwWld4a2N5NTVYU0EvUHlBbkp5azdYSEpjYmlBZ0lDQjBhR2x6TG5vZ1BTQndZWEp6WlVac2IyRjBLSEJoY25SelcyWnBaV3hrY3k1NlhTQS9QeUFuSnlrN1hISmNiaUFnSUNCMGFHbHpMbWhsWVdScGJtY2dQU0J3WVhKelpVWnNiMkYwS0hCaGNuUnpXMlpwWld4a2N5NW9aV0ZrYVc1blhTQS9QeUFuSnlrN1hISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nVEdsdVpVVjJaVzUwTXprZ1pYaDBaVzVrY3lCTWFXNWxSWFpsYm5Rd2VESTNJSHQ5WEhKY2JpSXNJbWx0Y0c5eWRDQk1hVzVsUlhabGJuUWdabkp2YlNBbkxpOU1hVzVsUlhabGJuUW5PMXh5WEc1cGJYQnZjblFnZXlCTWFXNWxSWFpsYm5Rd01DQjlJR1p5YjIwZ0p5NHZUR2x1WlVWMlpXNTBNSGd3TUNjN1hISmNibWx0Y0c5eWRDQjdJRXhwYm1WRmRtVnVkREF4SUgwZ1puSnZiU0FuTGk5TWFXNWxSWFpsYm5Rd2VEQXhKenRjY2x4dWFXMXdiM0owSUhzZ1RHbHVaVVYyWlc1ME1ESWdmU0JtY205dElDY3VMMHhwYm1WRmRtVnVkREI0TURJbk8xeHlYRzVwYlhCdmNuUWdleUJNYVc1bFJYWmxiblF3TXlCOUlHWnliMjBnSnk0dlRHbHVaVVYyWlc1ME1IZ3dNeWM3WEhKY2JtbHRjRzl5ZENCN0lFeHBibVZGZG1WdWREQTBJSDBnWm5KdmJTQW5MaTlNYVc1bFJYWmxiblF3ZURBMEp6dGNjbHh1YVcxd2IzSjBJSHNnVEdsdVpVVjJaVzUwTVRJZ2ZTQm1jbTl0SUNjdUwweHBibVZGZG1WdWREQjRNRU1uTzF4eVhHNXBiWEJ2Y25RZ2V5Qk1hVzVsUlhabGJuUXlNQ0I5SUdaeWIyMGdKeTR2VEdsdVpVVjJaVzUwTUhneE5DYzdYSEpjYm1sdGNHOXlkQ0I3SUV4cGJtVkZkbVZ1ZERJeElIMGdabkp2YlNBbkxpOU1hVzVsUlhabGJuUXdlREUxSnp0Y2NseHVhVzF3YjNKMElIc2dUR2x1WlVWMlpXNTBNaklnZlNCbWNtOXRJQ2N1TDB4cGJtVkZkbVZ1ZERCNE1UWW5PMXh5WEc1cGJYQnZjblFnZXlCTWFXNWxSWFpsYm5ReU15QjlJR1p5YjIwZ0p5NHZUR2x1WlVWMlpXNTBNSGd4TnljN1hISmNibWx0Y0c5eWRDQjdJRXhwYm1WRmRtVnVkREkwSUgwZ1puSnZiU0FuTGk5TWFXNWxSWFpsYm5Rd2VERTRKenRjY2x4dWFXMXdiM0owSUhzZ1RHbHVaVVYyWlc1ME1qVWdmU0JtY205dElDY3VMMHhwYm1WRmRtVnVkREI0TVRrbk8xeHlYRzVwYlhCdmNuUWdleUJNYVc1bFJYWmxiblF5TmlCOUlHWnliMjBnSnk0dlRHbHVaVVYyWlc1ME1IZ3hRU2M3WEhKY2JtbHRjRzl5ZENCN0lFeHBibVZGZG1WdWRESTNJSDBnWm5KdmJTQW5MaTlNYVc1bFJYWmxiblF3ZURGQ0p6dGNjbHh1YVcxd2IzSjBJSHNnVEdsdVpVVjJaVzUwTWpnZ2ZTQm1jbTl0SUNjdUwweHBibVZGZG1WdWREQjRNVU1uTzF4eVhHNXBiWEJ2Y25RZ2V5Qk1hVzVsUlhabGJuUXlPU0I5SUdaeWIyMGdKeTR2VEdsdVpVVjJaVzUwTUhneFJDYzdYSEpjYm1sdGNHOXlkQ0I3SUV4cGJtVkZkbVZ1ZERNd0lIMGdabkp2YlNBbkxpOU1hVzVsUlhabGJuUXdlREZGSnp0Y2NseHVhVzF3YjNKMElIc2dUR2x1WlVWMlpXNTBNekVnZlNCbWNtOXRJQ2N1TDB4cGJtVkZkbVZ1ZERCNE1VWW5PMXh5WEc1cGJYQnZjblFnZXlCTWFXNWxSWFpsYm5Rek5DQjlJR1p5YjIwZ0p5NHZUR2x1WlVWMlpXNTBNSGd5TWljN1hISmNibWx0Y0c5eWRDQjdJRXhwYm1WRmRtVnVkRE0xSUgwZ1puSnZiU0FuTGk5TWFXNWxSWFpsYm5Rd2VESXpKenRjY2x4dWFXMXdiM0owSUhzZ1RHbHVaVVYyWlc1ME16WWdmU0JtY205dElDY3VMMHhwYm1WRmRtVnVkREI0TWpRbk8xeHlYRzVwYlhCdmNuUWdleUJNYVc1bFJYWmxiblF6TnlCOUlHWnliMjBnSnk0dlRHbHVaVVYyWlc1ME1IZ3lOU2M3WEhKY2JtbHRjRzl5ZENCN0lFeHBibVZGZG1WdWRETTRJSDBnWm5KdmJTQW5MaTlNYVc1bFJYWmxiblF3ZURJMkp6dGNjbHh1YVcxd2IzSjBJSHNnVEdsdVpVVjJaVzUwTXprZ2ZTQm1jbTl0SUNjdUwweHBibVZGZG1WdWREQjRNamNuTzF4eVhHNXBiWEJ2Y25RZ1RHOW5VbVZ3YjNOcGRHOXllU0JtY205dElDY3VMMHh2WjFKbGNHOXphWFJ2Y25rbk8xeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVR0Z5YzJWTWFXNWxJSHRjY2x4dUlDQnpkR0YwYVdNZ2NHRnljMlVvY21Wd2J6b2dURzluVW1Wd2IzTnBkRzl5ZVN3Z2JHbHVaVG9nYzNSeWFXNW5LVG9nVEdsdVpVVjJaVzUwSUh3Z2RXNWtaV1pwYm1Wa0lIdGNjbHh1SUNBZ0lHeGxkQ0J5WlhRN1hISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ2NHRnlkSE1nUFNCc2FXNWxMbk53YkdsMEtDZDhKeWs3WEhKY2JpQWdJQ0JqYjI1emRDQmxkbVZ1ZENBOUlIQmhjblJ6V3pCZE8xeHlYRzVjY2x4dUlDQWdJQzh2SUVSdmJpZDBJSEJoY25ObElISmhkeUJ1WlhSM2IzSnJJSEJoWTJ0bGRDQnNhVzVsYzF4eVhHNGdJQ0FnYVdZZ0tDRmxkbVZ1ZENCOGZDQmxkbVZ1ZENBOVBUMGdKekkxTWljcFhISmNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2NseHVYSEpjYmlBZ0lDQXZMeUJVYUdseklHbHpJSFZuYkhrc0lHSjFkQ0JYWldKd1lXTnJJSEJ5WldabGNuTWdZbVZwYm1jZ1pYaHdiR2xqYVhSY2NseHVJQ0FnSUhOM2FYUmphQ0FvSjB4cGJtVkZkbVZ1ZENjZ0t5QmxkbVZ1ZENrZ2UxeHlYRzRnSUNBZ1kyRnpaU0FuVEdsdVpVVjJaVzUwTURBbk9seHlYRzRnSUNBZ0lDQnlaWFFnUFNCdVpYY2dUR2x1WlVWMlpXNTBNREFvY21Wd2J5d2diR2x1WlN3Z2NHRnlkSE1wTzF4eVhHNGdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJR05oYzJVZ0oweHBibVZGZG1WdWREQXhKenBjY2x4dUlDQWdJQ0FnY21WMElEMGdibVYzSUV4cGJtVkZkbVZ1ZERBeEtISmxjRzhzSUd4cGJtVXNJSEJoY25SektUdGNjbHh1SUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNCallYTmxJQ2RNYVc1bFJYWmxiblF3TWljNlhISmNiaUFnSUNBZ0lISmxkQ0E5SUc1bGR5Qk1hVzVsUlhabGJuUXdNaWh5WlhCdkxDQnNhVzVsTENCd1lYSjBjeWs3WEhKY2JpQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdZMkZ6WlNBblRHbHVaVVYyWlc1ME1ETW5PbHh5WEc0Z0lDQWdJQ0J5WlhRZ1BTQnVaWGNnVEdsdVpVVjJaVzUwTURNb2NtVndieXdnYkdsdVpTd2djR0Z5ZEhNcE8xeHlYRzRnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUdOaGMyVWdKMHhwYm1WRmRtVnVkREEwSnpwY2NseHVJQ0FnSUNBZ2NtVjBJRDBnYm1WM0lFeHBibVZGZG1WdWREQTBLSEpsY0c4c0lHeHBibVVzSUhCaGNuUnpLVHRjY2x4dUlDQWdJQ0FnWW5KbFlXczdYSEpjYmlBZ0lDQmpZWE5sSUNkTWFXNWxSWFpsYm5ReE1pYzZYSEpjYmlBZ0lDQWdJSEpsZENBOUlHNWxkeUJNYVc1bFJYWmxiblF4TWloeVpYQnZMQ0JzYVc1bExDQndZWEowY3lrN1hISmNiaUFnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnWTJGelpTQW5UR2x1WlVWMlpXNTBNakFuT2x4eVhHNGdJQ0FnSUNCeVpYUWdQU0J1WlhjZ1RHbHVaVVYyWlc1ME1qQW9jbVZ3Ynl3Z2JHbHVaU3dnY0dGeWRITXBPMXh5WEc0Z0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lHTmhjMlVnSjB4cGJtVkZkbVZ1ZERJeEp6cGNjbHh1SUNBZ0lDQWdjbVYwSUQwZ2JtVjNJRXhwYm1WRmRtVnVkREl4S0hKbGNHOHNJR3hwYm1Vc0lIQmhjblJ6S1R0Y2NseHVJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0JqWVhObElDZE1hVzVsUlhabGJuUXlNaWM2WEhKY2JpQWdJQ0FnSUhKbGRDQTlJRzVsZHlCTWFXNWxSWFpsYm5ReU1paHlaWEJ2TENCc2FXNWxMQ0J3WVhKMGN5azdYSEpjYmlBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ1kyRnpaU0FuVEdsdVpVVjJaVzUwTWpNbk9seHlYRzRnSUNBZ0lDQnlaWFFnUFNCdVpYY2dUR2x1WlVWMlpXNTBNak1vY21Wd2J5d2diR2x1WlN3Z2NHRnlkSE1wTzF4eVhHNGdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJR05oYzJVZ0oweHBibVZGZG1WdWRESTBKenBjY2x4dUlDQWdJQ0FnY21WMElEMGdibVYzSUV4cGJtVkZkbVZ1ZERJMEtISmxjRzhzSUd4cGJtVXNJSEJoY25SektUdGNjbHh1SUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNCallYTmxJQ2RNYVc1bFJYWmxiblF5TlNjNlhISmNiaUFnSUNBZ0lISmxkQ0E5SUc1bGR5Qk1hVzVsUlhabGJuUXlOU2h5WlhCdkxDQnNhVzVsTENCd1lYSjBjeWs3WEhKY2JpQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdZMkZ6WlNBblRHbHVaVVYyWlc1ME1qWW5PbHh5WEc0Z0lDQWdJQ0J5WlhRZ1BTQnVaWGNnVEdsdVpVVjJaVzUwTWpZb2NtVndieXdnYkdsdVpTd2djR0Z5ZEhNcE8xeHlYRzRnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUdOaGMyVWdKMHhwYm1WRmRtVnVkREkzSnpwY2NseHVJQ0FnSUNBZ2NtVjBJRDBnYm1WM0lFeHBibVZGZG1WdWRESTNLSEpsY0c4c0lHeHBibVVzSUhCaGNuUnpLVHRjY2x4dUlDQWdJQ0FnWW5KbFlXczdYSEpjYmlBZ0lDQmpZWE5sSUNkTWFXNWxSWFpsYm5ReU9DYzZYSEpjYmlBZ0lDQWdJSEpsZENBOUlHNWxkeUJNYVc1bFJYWmxiblF5T0NoeVpYQnZMQ0JzYVc1bExDQndZWEowY3lrN1hISmNiaUFnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnWTJGelpTQW5UR2x1WlVWMlpXNTBNamtuT2x4eVhHNGdJQ0FnSUNCeVpYUWdQU0J1WlhjZ1RHbHVaVVYyWlc1ME1qa29jbVZ3Ynl3Z2JHbHVaU3dnY0dGeWRITXBPMXh5WEc0Z0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lHTmhjMlVnSjB4cGJtVkZkbVZ1ZERNd0p6cGNjbHh1SUNBZ0lDQWdjbVYwSUQwZ2JtVjNJRXhwYm1WRmRtVnVkRE13S0hKbGNHOHNJR3hwYm1Vc0lIQmhjblJ6S1R0Y2NseHVJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0JqWVhObElDZE1hVzVsUlhabGJuUXpNU2M2WEhKY2JpQWdJQ0FnSUhKbGRDQTlJRzVsZHlCTWFXNWxSWFpsYm5Rek1TaHlaWEJ2TENCc2FXNWxMQ0J3WVhKMGN5azdYSEpjYmlBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ1kyRnpaU0FuVEdsdVpVVjJaVzUwTXpRbk9seHlYRzRnSUNBZ0lDQnlaWFFnUFNCdVpYY2dUR2x1WlVWMlpXNTBNelFvY21Wd2J5d2diR2x1WlN3Z2NHRnlkSE1wTzF4eVhHNGdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJR05oYzJVZ0oweHBibVZGZG1WdWRETTFKenBjY2x4dUlDQWdJQ0FnY21WMElEMGdibVYzSUV4cGJtVkZkbVZ1ZERNMUtISmxjRzhzSUd4cGJtVXNJSEJoY25SektUdGNjbHh1SUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNCallYTmxJQ2RNYVc1bFJYWmxiblF6TmljNlhISmNiaUFnSUNBZ0lISmxkQ0E5SUc1bGR5Qk1hVzVsUlhabGJuUXpOaWh5WlhCdkxDQnNhVzVsTENCd1lYSjBjeWs3WEhKY2JpQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdZMkZ6WlNBblRHbHVaVVYyWlc1ME16Y25PbHh5WEc0Z0lDQWdJQ0J5WlhRZ1BTQnVaWGNnVEdsdVpVVjJaVzUwTXpjb2NtVndieXdnYkdsdVpTd2djR0Z5ZEhNcE8xeHlYRzRnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUdOaGMyVWdKMHhwYm1WRmRtVnVkRE00SnpwY2NseHVJQ0FnSUNBZ2NtVjBJRDBnYm1WM0lFeHBibVZGZG1WdWRETTRLSEpsY0c4c0lHeHBibVVzSUhCaGNuUnpLVHRjY2x4dUlDQWdJQ0FnWW5KbFlXczdYSEpjYmlBZ0lDQmpZWE5sSUNkTWFXNWxSWFpsYm5Rek9TYzZYSEpjYmlBZ0lDQWdJSEpsZENBOUlHNWxkeUJNYVc1bFJYWmxiblF6T1NoeVpYQnZMQ0JzYVc1bExDQndZWEowY3lrN1hISmNiaUFnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnWkdWbVlYVnNkRHBjY2x4dUlDQWdJQ0FnY21WMElEMGdibVYzSUV4cGJtVkZkbVZ1ZENoeVpYQnZMQ0JzYVc1bExDQndZWEowY3lrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeThnUVd4emJ5QmtiMjRuZENCd1lYSnpaU0JzYVc1bGN5QjNhWFJvSUdFZ2JtOXVMWE5oYm1VZ1pHRjBaUzRnVkdocGN5QnBjeUF5TURBd0xUQXhMVEF4SURBd09qQXdPakF3WEhKY2JpQWdJQ0JwWmlBb2NtVjBJQ1ltSUhKbGRDNTBhVzFsYzNSaGJYQWdQQ0E1TkRZMk9EUTRNREFwWEhKY2JpQWdJQ0FnSUhKbGRIVnlianRjY2x4dVhISmNiaUFnSUNBdkx5QkdhVzVoYkd4NUxDQnBaaUIwYUdVZ2IySnFaV04wSUcxaGNtdHpJR2wwYzJWc1ppQmhjeUJwYm5aaGJHbGtMQ0J6YTJsd0lHbDBYSEpjYmlBZ0lDQnBaaUFvY21WMElDWW1JSEpsZEM1cGJuWmhiR2xrS1Z4eVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUhKbGREdGNjbHh1SUNCOVhISmNibjFjY2x4dUlpd2lhVzF3YjNKMElFVjJaVzUwUW5WeklHWnliMjBnSnk0dUwwVjJaVzUwUW5Wekp6dGNjbHh1YVcxd2IzSjBJRXhwYm1WRmRtVnVkQ0JtY205dElDY3VMMjVsZEhkdmNtdGZiRzluWDJOdmJuWmxjblJsY2k5TWFXNWxSWFpsYm5Rbk8xeHlYRzVwYlhCdmNuUWdURzluVW1Wd2IzTnBkRzl5ZVNCbWNtOXRJQ2N1TDI1bGRIZHZjbXRmYkc5blgyTnZiblpsY25SbGNpOU1iMmRTWlhCdmMybDBiM0o1Snp0Y2NseHVhVzF3YjNKMElGQmhjbk5sVEdsdVpTQm1jbTl0SUNjdUwyNWxkSGR2Y210ZmJHOW5YMk52Ym5abGNuUmxjaTlRWVhKelpVeHBibVVuTzF4eVhHNWNjbHh1WTI5dWMzUWdhWE5NYVc1bFJYWmxiblFnUFNBb2JHbHVaVDg2SUV4cGJtVkZkbVZ1ZENrNklHeHBibVVnYVhNZ1RHbHVaVVYyWlc1MElEMCtJSHRjY2x4dUlDQnlaWFIxY200Z0lTRnNhVzVsTzF4eVhHNTlPMXh5WEc1Y2NseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVG1WMGQyOXlhMHh2WjBOdmJuWmxjblJsY2lCbGVIUmxibVJ6SUVWMlpXNTBRblZ6SUh0Y2NseHVJQ0JqYjI1MlpYSjBSbWxzWlNoa1lYUmhPaUJ6ZEhKcGJtY3BPaUJNYVc1bFJYWmxiblJiWFNCN1hISmNiaUFnSUNCamIyNXpkQ0J5WlhCdklEMGdibVYzSUV4dloxSmxjRzl6YVhSdmNua29LVHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdmJuWmxjblJNYVc1bGN5aGNjbHh1SUNBZ0lDQWdJQ0F2THlCVGNHeHBkQ0JrWVhSaElHbHVkRzhnWVc0Z1lYSnlZWGtnYjJZZ2MyVndZWEpoZEdVZ2JHbHVaWE1zSUhKbGJXOTJhVzVuSUdGdWVTQmliR0Z1YXlCc2FXNWxjeTVjY2x4dUlDQWdJQ0FnSUNCa1lYUmhMbk53YkdsMEtFNWxkSGR2Y210TWIyZERiMjUyWlhKMFpYSXViR2x1WlZOd2JHbDBVbVZuWlhncExtWnBiSFJsY2lnb2JDa2dQVDRnYkNBaFBUMGdKeWNwTEZ4eVhHNGdJQ0FnSUNBZ0lISmxjRzhzWEhKY2JpQWdJQ0FwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWTI5dWRtVnlkRXhwYm1WektHeHBibVZ6T2lCemRISnBibWRiWFN3Z2NtVndiem9nVEc5blVtVndiM05wZEc5eWVTazZJRXhwYm1WRmRtVnVkRnRkSUh0Y2NseHVJQ0FnSUd4bGRDQnNhVzVsUlhabGJuUnpJRDBnYkdsdVpYTXViV0Z3S0Noc0tTQTlQaUJRWVhKelpVeHBibVV1Y0dGeWMyVW9jbVZ3Ynl3Z2JDa3BMbVpwYkhSbGNpaHBjMHhwYm1WRmRtVnVkQ2s3WEhKY2JpQWdJQ0F2THlCRFlXeHNJR0JqYjI1MlpYSjBZQ0IwYnlCamIyNTJaWEowSUhSb1pTQnVaWFIzYjNKcklHeHBibVVnZEc4Z2JtOXVMVzVsZEhkdmNtc2dabTl5YldGMElHRnVaQ0IxY0dSaGRHVWdhVzVrWlhocGJtY2dkbUZzZFdWelhISmNiaUFnSUNCc2FXNWxSWFpsYm5SeklEMGdiR2x1WlVWMlpXNTBjeTV0WVhBb0tHd3NJR2twSUQwK0lIdGNjbHh1SUNBZ0lDQWdiQzVwYm1SbGVDQTlJR2s3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJzTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnSUNBdkx5QlRiM0owSUhSb1pTQnNhVzVsY3lCaVlYTmxaQ0J2YmlCZ0pIdDBhVzFsYzNSaGJYQjlYeVI3YVc1a1pYaDlZQ0IwYnlCb1lXNWtiR1VnYjNWMExXOW1MVzl5WkdWeUlHeHBibVZ6SUhCeWIzQmxjbXg1WEhKY2JpQWdJQ0F2THlCQVZFOUVUem9nVW1WdGIzWmxJSFJvYVhNZ2IyNWpaU0IxYm1SbGNteDVhVzVuSUVOdmJXSmhkR0Z1ZEZSeVlXTnJaWElnZFhCa1lYUmxJR2x6YzNWbGN5QmhjbVVnY21WemIyeDJaV1JjY2x4dUlDQWdJSEpsZEhWeWJpQnNhVzVsUlhabGJuUnpMbk52Y25Rb0tHd3NJSElwSUQwK0lDaGdKSHRzTG5ScGJXVnpkR0Z0Y0gxZkpIdHNMbWx1WkdWNGZXQXBMbXh2WTJGc1pVTnZiWEJoY21Vb1lDUjdjaTUwYVcxbGMzUmhiWEI5WHlSN2NpNXBibVJsZUgxZ0tTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnpkR0YwYVdNZ2JHbHVaVk53YkdsMFVtVm5aWGdnUFNBdlhGeHlQMXhjYmk5bmJUdGNjbHh1ZlZ4eVhHNGlMQ0psZUhCdmNuUWdZMjl1YzNRZ2JHRnVaM1ZoWjJWeklEMGdXeWRsYmljc0lDZGtaU2NzSUNkbWNpY3NJQ2RxWVNjc0lDZGpiaWNzSUNkcmJ5ZGRJR0Z6SUdOdmJuTjBPMXh5WEc1Y2NseHVaWGh3YjNKMElIUjVjR1VnVEdGdVp5QTlJSFI1Y0dWdlppQnNZVzVuZFdGblpYTmJiblZ0WW1WeVhUdGNjbHh1WEhKY2JtVjRjRzl5ZENCMGVYQmxJRTV2YmtWdVRHRnVaeUE5SUVWNFkyeDFaR1U4VEdGdVp5d2dKMlZ1Sno0N1hISmNibHh5WEc1bGVIQnZjblFnWTI5dWMzUWdhWE5NWVc1bklEMGdLR3hoYm1jL09pQnpkSEpwYm1jcE9pQnNZVzVuSUdseklFeGhibWNnUFQ0Z2UxeHlYRzRnSUdOdmJuTjBJR3hoYm1kVGRISnpPaUJ5WldGa2IyNXNlU0J6ZEhKcGJtZGJYU0E5SUd4aGJtZDFZV2RsY3p0Y2NseHVJQ0JwWmlBb0lXeGhibWNwWEhKY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hISmNiaUFnY21WMGRYSnVJR3hoYm1kVGRISnpMbWx1WTJ4MVpHVnpLR3hoYm1jcE8xeHlYRzU5TzF4eVhHNGlMQ0pwYlhCdmNuUWdRMjl0WW1GMFlXNTBWSEpoWTJ0bGNpQm1jbTl0SUNjdUwwTnZiV0poZEdGdWRGUnlZV05yWlhJbk8xeHlYRzVwYlhCdmNuUWdVR1YwVG1GdFpYTkNlVXhoYm1jZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmNtVnpiM1Z5WTJWekwzQmxkRjl1WVcxbGN5YzdYSEpjYm1sdGNHOXlkQ0JGYlhWc1lYUnZja052YlcxdmJpQm1jbTl0SUNjdUxpOUZiWFZzWVhSdmNrTnZiVzF2YmljN1hISmNibWx0Y0c5eWRDQk1iMmRTWlhCdmMybDBiM0o1SUdaeWIyMGdKeTR2Ym1WMGQyOXlhMTlzYjJkZlkyOXVkbVZ5ZEdWeUwweHZaMUpsY0c5emFYUnZjbmtuTzF4eVhHNXBiWEJ2Y25RZ1RtVjBkMjl5YTB4dlowTnZiblpsY25SbGNpQm1jbTl0SUNjdUwwNWxkSGR2Y210TWIyZERiMjUyWlhKMFpYSW5PMXh5WEc1cGJYQnZjblFnZXlCTVlXNW5MQ0JwYzB4aGJtY2dmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl5WlhOdmRYSmpaWE12YkdGdVozVmhaMlZ6Snp0Y2NseHVhVzF3YjNKMElFeHBibVZGZG1WdWRDd2dleUJwYzB4cGJtVkZkbVZ1ZEZOdmRYSmpaU3dnYVhOTWFXNWxSWFpsYm5SVVlYSm5aWFFnZlNCbWNtOXRJQ2N1TDI1bGRIZHZjbXRmYkc5blgyTnZiblpsY25SbGNpOU1hVzVsUlhabGJuUW5PMXh5WEc1cGJYQnZjblFnZXlCVmJuSmxZV05vWVdKc1pVTnZaR1VnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5eVpYTnZkWEpqWlhNdmJtOTBYM0psWVdOb1pXUW5PMXh5WEc1Y2NseHVZMjl1YzNRZ2FYTlFaWFJPWVcxbElEMGdLRzVoYldVNklITjBjbWx1Wnl3Z2JHRnVaM1ZoWjJVL09pQk1ZVzVuS1NBOVBpQjdYSEpjYmlBZ2FXWWdLR3hoYm1kMVlXZGxLVnh5WEc0Z0lDQWdjbVYwZFhKdUlGQmxkRTVoYldWelFubE1ZVzVuVzJ4aGJtZDFZV2RsWFM1cGJtTnNkV1JsY3lodVlXMWxLVHRjY2x4dVhISmNiaUFnWm05eUlDaGpiMjV6ZENCc1lXNW5JR2x1SUZCbGRFNWhiV1Z6UW5sTVlXNW5LU0I3WEhKY2JpQWdJQ0JwWmlBb0lXbHpUR0Z1Wnloc1lXNW5LU2xjY2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZWdWNtVmhZMmhoWW14bFEyOWtaU2dwTzF4eVhHNGdJQ0FnYVdZZ0tGQmxkRTVoYldWelFubE1ZVzVuVzJ4aGJtZGRMbWx1WTJ4MVpHVnpLRzVoYldVcEtWeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVmVHRjY2x4dVhISmNibU52Ym5OMElHbHpWbUZzYVdSVWFXMWxjM1JoYlhBZ1BTQW9kR2x0WlhOMFlXMXdPaUJ1ZFcxaVpYSXBJRDArSUh0Y2NseHVJQ0J5WlhSMWNtNGdkR2x0WlhOMFlXMXdJRDRnTUNBbUppQjBhVzFsYzNSaGJYQWdQQ0JPZFcxaVpYSXVUVUZZWDFOQlJrVmZTVTVVUlVkRlVqdGNjbHh1ZlR0Y2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFVnVZMjkxYm5SbGNpQjdYSEpjYmlBZ2NISnBkbUYwWlNCemRHRjBhV01nY21WaFpHOXViSGtnWlc1amIzVnVkR1Z5Vm1WeWMybHZiaUE5SURFN1hISmNiaUFnY0hWaWJHbGpJR2xrUHpvZ2JuVnRZbVZ5TzF4eVhHNGdJSFpsY25OcGIyNDZJRzUxYldKbGNqdGNjbHh1SUNCcGJtbDBhV0ZzVDJabWMyVjBJRDBnVG5WdFltVnlMazFCV0Y5VFFVWkZYMGxPVkVWSFJWSTdYSEpjYmlBZ1pXNWtVM1JoZEhWeklEMGdKMVZ1YTI1dmQyNG5PMXh5WEc0Z0lITjBZWEowVTNSaGRIVnpJRDBnSjFWdWEyNXZkMjRuTzF4eVhHNGdJSEJ5YVhaaGRHVWdaVzVuWVdkbFFYUWdQU0JPZFcxaVpYSXVUVUZZWDFOQlJrVmZTVTVVUlVkRlVqdGNjbHh1SUNCd2NtbDJZWFJsSUdacGNuTjBVR3hoZVdWeVFXSnBiR2wwZVNBOUlFNTFiV0psY2k1TlFWaGZVMEZHUlY5SlRsUkZSMFZTTzF4eVhHNGdJSEJ5YVhaaGRHVWdabWx5YzNSRmJtVnRlVUZpYVd4cGRIa2dQU0JPZFcxaVpYSXVUVUZZWDFOQlJrVmZTVTVVUlVkRlVqdGNjbHh1SUNCbWFYSnpkRXhwYm1WSmJtUmxlQ0E5SURBN1hISmNiaUFnWTI5dFltRjBZVzUwVkhKaFkydGxjajg2SUVOdmJXSmhkR0Z1ZEZSeVlXTnJaWEk3WEhKY2JpQWdjM1JoY25SVWFXMWxjM1JoYlhBZ1BTQXdPMXh5WEc0Z0lHVnVaRlJwYldWemRHRnRjQ0E5SURBN1hISmNiaUFnWkhWeVlYUnBiMjRnUFNBd08xeHlYRzRnSUhCc1lYbGlZV05yVDJabWMyVjBJRDBnTUR0Y2NseHVJQ0JzWVc1bmRXRm5aVG9nVEdGdVp5QTlJQ2RsYmljN1hISmNibHh5WEc0Z0lHTnZibk4wY25WamRHOXlLRnh5WEc0Z0lDQWdjSFZpYkdsaklHVnVZMjkxYm5SbGNrUmhlVG9nYzNSeWFXNW5MRnh5WEc0Z0lDQWdjSFZpYkdsaklHVnVZMjkxYm5SbGNscHZibVZKWkRvZ2MzUnlhVzVuTEZ4eVhHNGdJQ0FnY0hWaWJHbGpJR1Z1WTI5MWJuUmxjbHB2Ym1WT1lXMWxPaUJ6ZEhKcGJtY3NYSEpjYmlBZ0lDQndkV0pzYVdNZ2JHOW5UR2x1WlhNNklFeHBibVZGZG1WdWRGdGRLU0I3WEhKY2JpQWdJQ0IwYUdsekxuWmxjbk5wYjI0Z1BTQkZibU52ZFc1MFpYSXVaVzVqYjNWdWRHVnlWbVZ5YzJsdmJqdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHbHVhWFJwWVd4cGVtVW9LVG9nZG05cFpDQjdYSEpjYmlBZ0lDQmpiMjV6ZENCemRHRnlkRk4wWVhSMWMyVnpJRDBnYm1WM0lGTmxkRHh6ZEhKcGJtYytLQ2s3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVzYjJkTWFXNWxjeTVtYjNKRllXTm9LQ2hzYVc1bExDQnBLU0E5UGlCN1hISmNiaUFnSUNBZ0lHbG1JQ2doYkdsdVpTbGNjbHh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVlc1eVpXRmphR0ZpYkdWRGIyUmxLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQnNaWFFnY21WeklEMGdSVzExYkdGMGIzSkRiMjF0YjI0dWJXRjBZMmhUZEdGeWRDaHNhVzVsTG01bGRIZHZjbXRNYVc1bEtUdGNjbHh1SUNBZ0lDQWdhV1lnS0hKbGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabWx5YzNSTWFXNWxTVzVrWlhnZ1BTQnBPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaWE11WjNKdmRYQnpQeTVUZEdGeWRGUjVjR1VwWEhKY2JpQWdJQ0FnSUNBZ0lDQnpkR0Z5ZEZOMFlYUjFjMlZ6TG1Ga1pDaHlaWE11WjNKdmRYQnpMbE4wWVhKMFZIbHdaU2s3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSEpsY3k1bmNtOTFjSE0vTGxOMFlYSjBTVzRwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElITjBZWEowU1c0Z1BTQndZWEp6WlVsdWRDaHlaWE11WjNKdmRYQnpMbE4wWVhKMFNXNHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSE4wWVhKMFNXNGdQajBnTUNsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxibWRoWjJWQmRDQTlJRTFoZEdndWJXbHVLR3hwYm1VdWRHbHRaWE4wWVcxd0lDc2djM1JoY25SSmJpd2dkR2hwY3k1bGJtZGhaMlZCZENrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUhKbGN5QTlJRVZ0ZFd4aGRHOXlRMjl0Ylc5dUxtMWhkR05vUlc1a0tHeHBibVV1Ym1WMGQyOXlhMHhwYm1VcE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNoeVpYTXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhNdVozSnZkWEJ6UHk1RmJtUlVlWEJsS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnVaRk4wWVhSMWN5QTlJSEpsY3k1bmNtOTFjSE11Ulc1a1ZIbHdaVHRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHbHpUR2x1WlVWMlpXNTBVMjkxY21ObEtHeHBibVVwSUNZbUlHbHpUR2x1WlVWMlpXNTBWR0Z5WjJWMEtHeHBibVVwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2JHbHVaUzVwWkM1emRHRnlkSE5YYVhSb0tDY3hKeWtnZkh4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnS0d4cGJtVXVhV1F1YzNSaGNuUnpWMmwwYUNnbk5DY3BJQ1ltSUdselVHVjBUbUZ0WlNoc2FXNWxMbTVoYldVc0lIUm9hWE11YkdGdVozVmhaMlVwS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlFiR0Y1WlhJZ2IzSWdjR1YwSUdGaWFXeHBkSGxjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4cGJtVXVkR0Z5WjJWMFNXUXVjM1JoY25SelYybDBhQ2duTkNjcElDWW1JQ0ZwYzFCbGRFNWhiV1VvYkdsdVpTNTBZWEpuWlhST1lXMWxMQ0IwYUdsekxteGhibWQxWVdkbEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZSaGNtZGxkSFJwYm1jZ2JtOXVJSEJzWVhsbGNpQnZjaUJ3WlhSY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVpwY25OMFVHeGhlV1Z5UVdKcGJHbDBlU0E5SUUxaGRHZ3ViV2x1S0hSb2FYTXVabWx5YzNSUWJHRjVaWEpCWW1sc2FYUjVMQ0JzYVc1bExuUnBiV1Z6ZEdGdGNDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JHbHVaUzVwWkM1emRHRnlkSE5YYVhSb0tDYzBKeWtnSmlZZ0lXbHpVR1YwVG1GdFpTaHNhVzVsTG01aGJXVXNJSFJvYVhNdWJHRnVaM1ZoWjJVcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRTV2Ymkxd2JHRjVaWElnWVdKcGJHbDBlVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkdsdVpTNTBZWEpuWlhSSlpDNXpkR0Z5ZEhOWGFYUm9LQ2N4SnlrZ2ZId2dhWE5RWlhST1lXMWxLR3hwYm1VdWRHRnlaMlYwVG1GdFpTd2dkR2hwY3k1c1lXNW5kV0ZuWlNrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJVWVhKblpYUjBhVzVuSUhCc1lYbGxjaUJ2Y2lCd1pYUmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1acGNuTjBSVzVsYlhsQlltbHNhWFI1SUQwZ1RXRjBhQzV0YVc0b2RHaHBjeTVtYVhKemRFVnVaVzE1UVdKcGJHbDBlU3dnYkdsdVpTNTBhVzFsYzNSaGJYQXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUdOdmJuTjBJRzFoZEdOb1pXUk1ZVzVuSUQwZ2NtVnpQeTVuY205MWNITS9MbXhoYm1kMVlXZGxPMXh5WEc0Z0lDQWdJQ0JwWmlBb2FYTk1ZVzVuS0cxaGRHTm9aV1JNWVc1bktTbGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxteGhibWQxWVdkbElEMGdiV0YwWTJobFpFeGhibWM3WEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TG1OdmJXSmhkR0Z1ZEZSeVlXTnJaWElnUFNCdVpYY2dRMjl0WW1GMFlXNTBWSEpoWTJ0bGNpaDBhR2x6TG14dloweHBibVZ6TENCMGFHbHpMbXhoYm1kMVlXZGxLVHRjY2x4dUlDQWdJSFJvYVhNdWMzUmhjblJVYVcxbGMzUmhiWEFnUFNCMGFHbHpMbU52YldKaGRHRnVkRlJ5WVdOclpYSXVabWx5YzNSVWFXMWxjM1JoYlhBN1hISmNiaUFnSUNCMGFHbHpMbVZ1WkZScGJXVnpkR0Z0Y0NBOUlIUm9hWE11WTI5dFltRjBZVzUwVkhKaFkydGxjaTVzWVhOMFZHbHRaWE4wWVcxd08xeHlYRzRnSUNBZ2RHaHBjeTVrZFhKaGRHbHZiaUE5SUhSb2FYTXVaVzVrVkdsdFpYTjBZVzF3SUMwZ2RHaHBjeTV6ZEdGeWRGUnBiV1Z6ZEdGdGNEdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTVwYm1sMGFXRnNUMlptYzJWMElEMDlQU0JPZFcxaVpYSXVUVUZZWDFOQlJrVmZTVTVVUlVkRlVpa2dlMXh5WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVsYm1kaFoyVkJkQ0E4SUU1MWJXSmxjaTVOUVZoZlUwRkdSVjlKVGxSRlIwVlNLVnh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzVwZEdsaGJFOW1abk5sZENBOUlIUm9hWE11Wlc1bllXZGxRWFFnTFNCMGFHbHpMbk4wWVhKMFZHbHRaWE4wWVcxd08xeHlYRzRnSUNBZ0lDQmxiSE5sSUdsbUlDaDBhR2x6TG1acGNuTjBVR3hoZVdWeVFXSnBiR2wwZVNBOElFNTFiV0psY2k1TlFWaGZVMEZHUlY5SlRsUkZSMFZTS1Z4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YVc1cGRHbGhiRTltWm5ObGRDQTlJSFJvYVhNdVptbHljM1JRYkdGNVpYSkJZbWxzYVhSNUlDMGdkR2hwY3k1emRHRnlkRlJwYldWemRHRnRjRHRjY2x4dUlDQWdJQ0FnWld4elpTQnBaaUFvZEdocGN5NW1hWEp6ZEVWdVpXMTVRV0pwYkdsMGVTQThJRTUxYldKbGNpNU5RVmhmVTBGR1JWOUpUbFJGUjBWU0tWeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWFXNXBkR2xoYkU5bVpuTmxkQ0E5SUhSb2FYTXVabWx5YzNSRmJtVnRlVUZpYVd4cGRIa2dMU0IwYUdsekxuTjBZWEowVkdsdFpYTjBZVzF3TzF4eVhHNGdJQ0FnSUNCbGJITmxYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXBibWwwYVdGc1QyWm1jMlYwSUQwZ01EdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQm1hWEp6ZEV4cGJtVWdQU0IwYUdsekxteHZaMHhwYm1WelczUm9hWE11Wm1seWMzUk1hVzVsU1c1a1pYaGRPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaG1hWEp6ZEV4cGJtVWdKaVlnWm1seWMzUk1hVzVsTG05bVpuTmxkQ2xjY2x4dUlDQWdJQ0FnZEdocGN5NXdiR0Y1WW1GamEwOW1abk5sZENBOUlHWnBjbk4wVEdsdVpTNXZabVp6WlhRN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1emRHRnlkRk4wWVhSMWN5QTlJRnN1TGk1emRHRnlkRk4wWVhSMWMyVnpYUzV6YjNKMEtDa3VhbTlwYmlnbkxDQW5LVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSEIxWW14cFl5Qm5aWFFnYVc1cGRHbGhiRlJwYldWemRHRnRjQ2dwSURvZ2JuVnRZbVZ5SUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuTjBZWEowVkdsdFpYTjBZVzF3SUNzZ2RHaHBjeTVwYm1sMGFXRnNUMlptYzJWME8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2MyaHZkV3hrVUdWeWMybHpkRVpwWjJoMEtDazZJR0p2YjJ4bFlXNGdlMXh5WEc0Z0lDQWdjbVYwZFhKdUlHbHpWbUZzYVdSVWFXMWxjM1JoYlhBb2RHaHBjeTVtYVhKemRGQnNZWGxsY2tGaWFXeHBkSGtwSUNZbUlHbHpWbUZzYVdSVWFXMWxjM1JoYlhBb2RHaHBjeTVtYVhKemRFVnVaVzE1UVdKcGJHbDBlU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0IxY0dkeVlXUmxLSFpsY25OcGIyNDZJRzUxYldKbGNpazZJR0p2YjJ4bFlXNGdlMXh5WEc0Z0lDQWdhV1lnS0VWdVkyOTFiblJsY2k1bGJtTnZkVzUwWlhKV1pYSnphVzl1SUR3OUlIWmxjbk5wYjI0cFhISmNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0J5WlhCdklEMGdibVYzSUV4dloxSmxjRzl6YVhSdmNua29LVHRjY2x4dUlDQWdJR052Ym5OMElHTnZiblpsY25SbGNpQTlJRzVsZHlCT1pYUjNiM0pyVEc5blEyOXVkbVZ5ZEdWeUtDazdYSEpjYmlBZ0lDQjBhR2x6TG14dloweHBibVZ6SUQwZ1kyOXVkbVZ5ZEdWeUxtTnZiblpsY25STWFXNWxjeWhjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbXh2WjB4cGJtVnpMbTFoY0Nnb2JDa2dQVDRnYkM1dVpYUjNiM0pyVEdsdVpTa3NYSEpjYmlBZ0lDQWdJQ0FnY21Wd2J5eGNjbHh1SUNBZ0lDazdYSEpjYmlBZ0lDQjBhR2x6TG5abGNuTnBiMjRnUFNCRmJtTnZkVzUwWlhJdVpXNWpiM1Z1ZEdWeVZtVnljMmx2Ymp0Y2NseHVJQ0FnSUhSb2FYTXVhVzVwZEdsaGJHbDZaU2dwTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNGlMQ0pwYlhCdmNuUWdSVzExYkdGMGIzSkRiMjF0YjI0Z1puSnZiU0FuTGk0dlJXMTFiR0YwYjNKRGIyMXRiMjRuTzF4eVhHNXBiWEJ2Y25RZ1JYWmxiblJDZFhNZ1puSnZiU0FuTGk0dlJYWmxiblJDZFhNbk8xeHlYRzVwYlhCdmNuUWdUR2x1WlVWMlpXNTBJR1p5YjIwZ0p5NHZibVYwZDI5eWExOXNiMmRmWTI5dWRtVnlkR1Z5TDB4cGJtVkZkbVZ1ZENjN1hISmNibWx0Y0c5eWRDQjdJRXhwYm1WRmRtVnVkREI0TURFZ2ZTQm1jbTl0SUNjdUwyNWxkSGR2Y210ZmJHOW5YMk52Ym5abGNuUmxjaTlNYVc1bFJYWmxiblF3ZURBeEp6dGNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRXh2WjBWMlpXNTBTR0Z1Wkd4bGNpQmxlSFJsYm1SeklFVjJaVzUwUW5WeklIdGNjbHh1SUNCd2RXSnNhV01nWTNWeWNtVnVkRVpwWjJoME9pQk1hVzVsUlhabGJuUmJYU0E5SUZ0ZE8xeHlYRzRnSUhCMVlteHBZeUJqZFhKeVpXNTBXbTl1WlU1aGJXVWdQU0FuVlc1cmJtOTNiaWM3WEhKY2JpQWdjSFZpYkdsaklHTjFjbkpsYm5SYWIyNWxTV1FnUFNBbkxURW5PMXh5WEc1Y2NseHVJQ0J3WVhKelpVeHZaM01vYkc5bmN6b2dUR2x1WlVWMlpXNTBXMTBwT2lCMmIybGtJSHRjY2x4dUlDQWdJR1p2Y2lBb1kyOXVjM1FnYkdsdVpVOWlhaUJ2WmlCc2IyZHpLU0I3WEhKY2JpQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRFWnBaMmgwTG5CMWMyZ29iR2x1WlU5aWFpazdYSEpjYmx4eVhHNGdJQ0FnSUNCc2FXNWxUMkpxTG05bVpuTmxkQ0E5SUd4cGJtVlBZbW91ZEdsdFpYTjBZVzF3SUMwZ2RHaHBjeTVqZFhKeVpXNTBSbWxuYUhSVGRHRnlkRHRjY2x4dVhISmNiaUFnSUNBZ0lHTnZibk4wSUhKbGN5QTlJRVZ0ZFd4aGRHOXlRMjl0Ylc5dUxtMWhkR05vUlc1a0tHeHBibVZQWW1vdWJtVjBkMjl5YTB4cGJtVXBPMXh5WEc0Z0lDQWdJQ0JwWmlBb2NtVnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYm1SR2FXZG9kQ2dwTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHeHBibVZQWW1vZ2FXNXpkR0Z1WTJWdlppQk1hVzVsUlhabGJuUXdlREF4S1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1amRYSnlaVzUwV205dVpVbGtJRDBnYkdsdVpVOWlhaTU2YjI1bFNXUTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWpkWEp5Wlc1MFdtOXVaVTVoYldVZ1BTQnNhVzVsVDJKcUxucHZibVZPWVcxbE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXNWtSbWxuYUhRb0tUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdjSEpwZG1GMFpTQm5aWFFnWTNWeWNtVnVkRVpwWjJoMFUzUmhjblFvS1RvZ2JuVnRZbVZ5SUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTjFjbkpsYm5SR2FXZG9kRnN3WFQ4dWRHbHRaWE4wWVcxd0lEOC9JREE3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J3Y21sMllYUmxJR2RsZENCamRYSnlaVzUwUm1sbmFIUkZibVFvS1RvZ2JuVnRZbVZ5SUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTjFjbkpsYm5SR2FXZG9kQzV6YkdsalpTZ3RNU2xiTUYwL0xuUnBiV1Z6ZEdGdGNDQS9QeUF3TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWlc1a1JtbG5hSFFvS1RvZ2RtOXBaQ0I3WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTVqZFhKeVpXNTBSbWxuYUhRdWJHVnVaM1JvSUR3Z01pbGNjbHh1SUNBZ0lDQWdjbVYwZFhKdU8xeHlYRzVjY2x4dUlDQWdJR052Ym5OMElITjBZWEowSUQwZ2JtVjNJRVJoZEdVb2RHaHBjeTVqZFhKeVpXNTBSbWxuYUhSVGRHRnlkQ2t1ZEc5SlUwOVRkSEpwYm1jb0tUdGNjbHh1SUNBZ0lHTnZibk4wSUdWdVpDQTlJRzVsZHlCRVlYUmxLSFJvYVhNdVkzVnljbVZ1ZEVacFoyaDBSVzVrS1M1MGIwbFRUMU4wY21sdVp5Z3BPMXh5WEc1Y2NseHVJQ0FnSUdOdmJuTnZiR1V1WkdWaWRXY29ZRVJwYzNCaGRHTm9hVzVuSUc1bGR5Qm1hV2RvZEZ4eVhHNVRkR0Z5ZERvZ0pIdHpkR0Z5ZEgxY2NseHVSVzVrT2lBa2UyVnVaSDFjY2x4dVdtOXVaVG9nSkh0MGFHbHpMbU4xY25KbGJuUmFiMjVsVG1GdFpYMWNjbHh1VEdsdVpTQkRiM1Z1ZERvZ0pIdDBhR2x6TG1OMWNuSmxiblJHYVdkb2RDNXNaVzVuZEdoOVhISmNibUFwTzF4eVhHNGdJQ0FnZG05cFpDQjBhR2x6TG1ScGMzQmhkR05vS0NkbWFXZG9kQ2NzSUhOMFlYSjBMbk4xWW5OMGNpZ3dMQ0F4TUNrc0lIUm9hWE11WTNWeWNtVnVkRnB2Ym1WSlpDd2dkR2hwY3k1amRYSnlaVzUwV205dVpVNWhiV1VzSUhSb2FYTXVZM1Z5Y21WdWRFWnBaMmgwS1R0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TG1OMWNuSmxiblJHYVdkb2RDQTlJRnRkTzF4eVhHNGdJSDFjY2x4dWZWeHlYRzRpTENKcGJYQnZjblFnUlcxMWJHRjBiM0pEYjIxdGIyNGdabkp2YlNBbkxpNHZSVzExYkdGMGIzSkRiMjF0YjI0bk8xeHlYRzVwYlhCdmNuUWdSVzVqYjNWdWRHVnlJR1p5YjIwZ0p5NHZSVzVqYjNWdWRHVnlKenRjY2x4dWFXMXdiM0owSUV4dlowVjJaVzUwU0dGdVpHeGxjaUJtY205dElDY3VMMHh2WjBWMlpXNTBTR0Z1Wkd4bGNpYzdYSEpjYm1sdGNHOXlkQ0JPWlhSM2IzSnJURzluUTI5dWRtVnlkR1Z5SUdaeWIyMGdKeTR2VG1WMGQyOXlhMHh2WjBOdmJuWmxjblJsY2ljN1hISmNibWx0Y0c5eWRDQk1iMmRTWlhCdmMybDBiM0o1SUdaeWIyMGdKeTR2Ym1WMGQyOXlhMTlzYjJkZlkyOXVkbVZ5ZEdWeUwweHZaMUpsY0c5emFYUnZjbmtuTzF4eVhHNWNjbHh1YjI1dFpYTnpZV2RsSUQwZ1lYTjVibU1nS0cxelp5a2dQVDRnZTF4eVhHNGdJR052Ym5OMElHeHZaME52Ym5abGNuUmxjaUE5SUc1bGR5Qk9aWFIzYjNKclRHOW5RMjl1ZG1WeWRHVnlLQ2s3WEhKY2JpQWdZMjl1YzNRZ2JHOWpZV3hNYjJkSVlXNWtiR1Z5SUQwZ2JtVjNJRXh2WjBWMlpXNTBTR0Z1Wkd4bGNpZ3BPMXh5WEc0Z0lHTnZibk4wSUhKbGNHOGdQU0J1WlhjZ1RHOW5VbVZ3YjNOcGRHOXllU2dwTzF4eVhHNWNjbHh1SUNBdkx5Qk1hWE4wWlc0Z1ptOXlJRXh2WjBWMlpXNTBTR0Z1Wkd4bGNpQjBieUJrYVhOd1lYUmphQ0JtYVdkb2RITWdZVzVrSUhCbGNuTnBjM1FnZEdobGJWeHlYRzRnSUd4dlkyRnNURzluU0dGdVpHeGxjaTV2YmlnblptbG5hSFFuTENCaGMzbHVZeUFvWkdGNUxDQjZiMjVsU1dRc0lIcHZibVZPWVcxbExDQnNhVzVsY3lrZ1BUNGdlMXh5WEc0Z0lDQWdZMjl1YzNRZ1pXNWpJRDBnYm1WM0lFVnVZMjkxYm5SbGNpaGtZWGtzSUhwdmJtVkpaQ3dnZW05dVpVNWhiV1VzSUd4cGJtVnpLVHRjY2x4dUlDQWdJR1Z1WXk1cGJtbDBhV0ZzYVhwbEtDazdYSEpjYmlBZ0lDQnBaaUFvWlc1akxuTm9iM1ZzWkZCbGNuTnBjM1JHYVdkb2RDZ3BLU0I3WEhKY2JpQWdJQ0FnSUhCdmMzUk5aWE56WVdkbEtIdGNjbHh1SUNBZ0lDQWdJQ0IwZVhCbE9pQW5aVzVqYjNWdWRHVnlKeXhjY2x4dUlDQWdJQ0FnSUNCbGJtTnZkVzUwWlhJNklHVnVZeXhjY2x4dUlDQWdJQ0FnSUNCdVlXMWxPaUJsYm1NdVkyOXRZbUYwWVc1MFZISmhZMnRsY2k1blpYUk5ZV2x1UTI5dFltRjBZVzUwVG1GdFpTZ3BMRnh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5S1R0Y2NseHVYSEpjYmlBZ0x5OGdRMjl1ZG1WeWRDQjBhR1VnYldWemMyRm5aU0J0WVc1MVlXeHNlU0JrZFdVZ2RHOGdiV1Z0YjNKNUlHbHpjM1ZsY3lCM2FYUm9JR1Y0ZEhKbGJXVnNlU0JzWVhKblpTQm1hV3hsYzF4eVhHNGdJR052Ym5OMElHUmxZMjlrWlhJZ1BTQnVaWGNnVkdWNGRFUmxZMjlrWlhJb0oxVlVSaTA0SnlrN1hISmNiaUFnYkdWMElHSjFaaUE5SUc1bGR5QlZhVzUwT0VGeWNtRjVLRzF6Wnk1a1lYUmhLVHRjY2x4dUlDQnNaWFFnYm1WNGRFOW1abk5sZENBOUlEQTdYSEpjYmlBZ2JHVjBJR3hwYm1WeklEMGdXMTA3WEhKY2JpQWdiR1YwSUd4cGJtVkRiM1Z1ZENBOUlEQTdYSEpjYmlBZ1ptOXlJQ2hzWlhRZ1kzVnljbVZ1ZEU5bVpuTmxkQ0E5SUc1bGVIUlBabVp6WlhRN1hISmNiaUFnSUNCdVpYaDBUMlptYzJWMElEd2dZblZtTG14bGJtZDBhQ0FtSmlCdVpYaDBUMlptYzJWMElDRTlQU0F0TVR0Y2NseHVJQ0FnSUdOMWNuSmxiblJQWm1aelpYUWdQU0J1WlhoMFQyWm1jMlYwS1NCN1hISmNiaUFnSUNCdVpYaDBUMlptYzJWMElEMGdZblZtTG1sdVpHVjRUMllvTUhnd1FTd2dibVY0ZEU5bVpuTmxkQ0FySURFcE8xeHlYRzRnSUNBZ1kyOXVjM1FnYkdsdVpTQTlJR1JsWTI5a1pYSXVaR1ZqYjJSbEtHSjFaaTV6YkdsalpTaGpkWEp5Wlc1MFQyWm1jMlYwTENCdVpYaDBUMlptYzJWMEtTa3VkSEpwYlNncE8xeHlYRzRnSUNBZ2FXWWdLR3hwYm1VdWJHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lDc3JiR2x1WlVOdmRXNTBPMXh5WEc0Z0lDQWdJQ0JzYVc1bGN5NXdkWE5vS0d4cGJtVXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdsbUlDaHNhVzVsY3k1c1pXNW5kR2dnUGowZ01UQXdNQ2tnZTF4eVhHNGdJQ0FnSUNCc2FXNWxjeUE5SUd4dlowTnZiblpsY25SbGNpNWpiMjUyWlhKMFRHbHVaWE1vYkdsdVpYTXNJSEpsY0c4cE8xeHlYRzRnSUNBZ0lDQnNiMk5oYkV4dlowaGhibVJzWlhJdWNHRnljMlZNYjJkektHeHBibVZ6S1R0Y2NseHVJQ0FnSUNBZ2NHOXpkRTFsYzNOaFoyVW9lMXh5WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJQ2R3Y205bmNtVnpjeWNzWEhKY2JpQWdJQ0FnSUNBZ2JHbHVaWE02SUd4cGJtVkRiM1Z1ZEN4Y2NseHVJQ0FnSUNBZ0lDQmllWFJsY3pvZ2JtVjRkRTltWm5ObGRDeGNjbHh1SUNBZ0lDQWdJQ0IwYjNSaGJFSjVkR1Z6T2lCaWRXWXViR1Z1WjNSb0xGeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnYkdsdVpYTWdQU0JiWFR0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JpQWdhV1lnS0d4cGJtVnpMbXhsYm1kMGFDQStJREFwSUh0Y2NseHVJQ0FnSUd4cGJtVnpJRDBnYkc5blEyOXVkbVZ5ZEdWeUxtTnZiblpsY25STWFXNWxjeWhzYVc1bGN5d2djbVZ3YnlrN1hISmNiaUFnSUNCc2IyTmhiRXh2WjBoaGJtUnNaWEl1Y0dGeWMyVk1iMmR6S0d4cGJtVnpLVHRjY2x4dUlDQWdJR3hwYm1WeklEMGdXMTA3WEhKY2JpQWdmVnh5WEc0Z0lIQnZjM1JOWlhOellXZGxLSHRjY2x4dUlDQWdJSFI1Y0dVNklDZHdjbTluY21WemN5Y3NYSEpjYmlBZ0lDQnNhVzVsY3pvZ2JHbHVaVU52ZFc1MExGeHlYRzRnSUNBZ1lubDBaWE02SUdKMVppNXNaVzVuZEdnc1hISmNiaUFnSUNCMGIzUmhiRUo1ZEdWek9pQmlkV1l1YkdWdVozUm9MRnh5WEc0Z0lIMHBPMXh5WEc0Z0lHSjFaaUE5SUc1MWJHdzdYSEpjYmx4eVhHNGdJR3h2WTJGc1RHOW5TR0Z1Wkd4bGNpNWxibVJHYVdkb2RDZ3BPMXh5WEc1Y2NseHVJQ0J3YjNOMFRXVnpjMkZuWlNoN1hISmNiaUFnSUNCMGVYQmxPaUFuWkc5dVpTY3NYSEpjYmlBZ2ZTazdYSEpjYm4wN1hISmNiaUpkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XCIsIFwiV29ya2VyXCIsIHtcInR5cGVcIjpcImNsYXNzaWNcIixcIm5hbWVcIjpcIk5ldHdvcmtMb2dDb252ZXJ0ZXJXb3JrZXJcIn0sIF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJOZXR3b3JrTG9nQ29udmVydGVyV29ya2VyLmJ1bmRsZS53b3JrZXIuanNcIik7XG59XG4iLCJpbXBvcnQgJy4vcmFpZGJvc3NfY29uZmlnJztcclxuXHJcbmltcG9ydCBFbXVsYXRlZE1hcCBmcm9tICcuL2VtdWxhdG9yL3VpL0VtdWxhdGVkTWFwJztcclxuaW1wb3J0IEVtdWxhdGVkUGFydHlJbmZvIGZyb20gJy4vZW11bGF0b3IvdWkvRW11bGF0ZWRQYXJ0eUluZm8nO1xyXG5pbXBvcnQgRW11bGF0b3JDb21tb24gZnJvbSAnLi9lbXVsYXRvci9FbXVsYXRvckNvbW1vbic7XHJcbmltcG9ydCBFbmNvdW50ZXIgZnJvbSAnLi9lbXVsYXRvci9kYXRhL0VuY291bnRlcic7XHJcbmltcG9ydCBFbmNvdW50ZXJUYWIgZnJvbSAnLi9lbXVsYXRvci91aS9FbmNvdW50ZXJUYWInO1xyXG5pbXBvcnQgTG9nRXZlbnRIYW5kbGVyIGZyb20gJy4vZW11bGF0b3IvZGF0YS9Mb2dFdmVudEhhbmRsZXInO1xyXG5pbXBvcnQgUGVyc2lzdG9yIGZyb20gJy4vZW11bGF0b3IvZGF0YS9QZXJzaXN0b3InO1xyXG5pbXBvcnQgeyBQb3B1cFRleHRHZW5lcmF0b3IgfSBmcm9tICcuL3BvcHVwLXRleHQnO1xyXG5pbXBvcnQgUHJvZ3Jlc3NCYXIgZnJvbSAnLi9lbXVsYXRvci91aS9Qcm9ncmVzc0Jhcic7XHJcbmltcG9ydCBSYWlkRW11bGF0b3IgZnJvbSAnLi9lbXVsYXRvci9kYXRhL1JhaWRFbXVsYXRvcic7XHJcbmltcG9ydCBSYWlkRW11bGF0b3JPdmVybGF5QXBpSG9vayBmcm9tICcuL2VtdWxhdG9yL292ZXJyaWRlcy9SYWlkRW11bGF0b3JPdmVybGF5QXBpSG9vayc7XHJcbmltcG9ydCBSYWlkRW11bGF0b3JQb3B1cFRleHQgZnJvbSAnLi9lbXVsYXRvci9vdmVycmlkZXMvUmFpZEVtdWxhdG9yUG9wdXBUZXh0JztcclxuaW1wb3J0IFJhaWRFbXVsYXRvclRpbWVsaW5lQ29udHJvbGxlciBmcm9tICcuL2VtdWxhdG9yL292ZXJyaWRlcy9SYWlkRW11bGF0b3JUaW1lbGluZUNvbnRyb2xsZXInO1xyXG5pbXBvcnQgUmFpZEVtdWxhdG9yVGltZWxpbmVVSSBmcm9tICcuL2VtdWxhdG9yL292ZXJyaWRlcy9SYWlkRW11bGF0b3JUaW1lbGluZVVJJztcclxuaW1wb3J0IHsgVGltZWxpbmVMb2FkZXIgfSBmcm9tICcuL3RpbWVsaW5lJztcclxuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi9lbXVsYXRvci91aS9Ub29sdGlwJztcclxuaW1wb3J0IFVzZXJDb25maWcgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3VzZXJfY29uZmlnJztcclxuaW1wb3J0IHJhaWRib3NzRmlsZURhdGEgZnJvbSAnLi9kYXRhL3JhaWRib3NzX21hbmlmZXN0LnR4dCc7XHJcbi8vIGVzbGludCBjYW4ndCBkZXRlY3QgdGhlIGN1c3RvbSBsb2FkZXIgZm9yIHRoZSB3b3JrZXJcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9kZWZhdWx0XHJcbmltcG9ydCBOZXR3b3JrTG9nQ29udmVydGVyV29ya2VyIGZyb20gJy4vZW11bGF0b3IvZGF0YS9OZXR3b3JrTG9nQ29udmVydGVyV29ya2VyJztcclxuXHJcbmltcG9ydCBPcHRpb25zIGZyb20gJy4vcmFpZGJvc3Nfb3B0aW9ucyc7XHJcblxyXG5pbXBvcnQgJy4uLy4uL3Jlc291cmNlcy9kZWZhdWx0cy5jc3MnO1xyXG5pbXBvcnQgJy4vcmFpZGVtdWxhdG9yLmNzcyc7XHJcblxyXG4oKCkgPT4ge1xyXG4gIGxldCBlbXVsYXRvcjtcclxuICBsZXQgcHJvZ3Jlc3NCYXI7XHJcbiAgbGV0IHRpbWVsaW5lQ29udHJvbGxlcjtcclxuICBsZXQgcG9wdXBUZXh0O1xyXG4gIGxldCBwZXJzaXN0b3I7XHJcbiAgbGV0IGVuY291bnRlclRhYjtcclxuICBsZXQgZW11bGF0ZWRQYXJ0eUluZm87XHJcbiAgbGV0IGVtdWxhdGVkTWFwO1xyXG4gIGxldCBlbXVsYXRlZFdlYlNvY2tldDtcclxuICBsZXQgdGltZWxpbmVVSTtcclxuICBsZXQgbG9nQ29udmVydGVyV29ya2VyO1xyXG5cclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4gICAgZW11bGF0b3IgPSBuZXcgUmFpZEVtdWxhdG9yKE9wdGlvbnMpO1xyXG4gICAgcHJvZ3Jlc3NCYXIgPSBuZXcgUHJvZ3Jlc3NCYXIoZW11bGF0b3IpO1xyXG4gICAgcGVyc2lzdG9yID0gbmV3IFBlcnNpc3RvcigpO1xyXG4gICAgZW5jb3VudGVyVGFiID0gbmV3IEVuY291bnRlclRhYihwZXJzaXN0b3IpO1xyXG4gICAgZW11bGF0ZWRQYXJ0eUluZm8gPSBuZXcgRW11bGF0ZWRQYXJ0eUluZm8oZW11bGF0b3IpO1xyXG4gICAgZW11bGF0ZWRNYXAgPSBuZXcgRW11bGF0ZWRNYXAoZW11bGF0b3IpO1xyXG4gICAgZW11bGF0ZWRXZWJTb2NrZXQgPSBuZXcgUmFpZEVtdWxhdG9yT3ZlcmxheUFwaUhvb2soZW11bGF0b3IpO1xyXG4gICAgbG9nQ29udmVydGVyV29ya2VyID0gbmV3IE5ldHdvcmtMb2dDb252ZXJ0ZXJXb3JrZXIoKTtcclxuXHJcbiAgICAvLyBMaXN0ZW4gZm9yIHRoZSB1c2VyIHRvIGNsaWNrIGEgcGxheWVyIGluIHRoZSBwYXJ0eSBsaXN0IG9uIHRoZSByaWdodFxyXG4gICAgLy8gYW5kIHBlcnNpc3QgdGhhdCBvdmVyIHRvIHRoZSBlbXVsYXRvclxyXG4gICAgZW11bGF0ZWRQYXJ0eUluZm8ub24oJ3NlbGVjdFBlcnNwZWN0aXZlJywgKGlkKSA9PiB7XHJcbiAgICAgIGVtdWxhdG9yLnNlbGVjdFBlcnNwZWN0aXZlKGlkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGVtdWxhdG9yLm9uKCdjdXJyZW50RW5jb3VudGVyQ2hhbmdlZCcsIChlbmMpID0+IHtcclxuICAgICAgLy8gU3RvcmUgb3VyIGN1cnJlbnQgbG9hZGVkIGVuY291bnRlciB0byBhdXRvLWxvYWQgbmV4dCB0aW1lXHJcbiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY3VycmVudEVuY291bnRlcicsIGVuYy5lbmNvdW50ZXIuaWQpO1xyXG4gICAgICAvLyBPbmNlIHdlJ3ZlIGxvYWRlZCB0aGUgZW5jb3VudGVyLCBzZWVrIHRvIHRoZSBzdGFydCBvZiB0aGUgZW5jb3VudGVyXHJcbiAgICAgIGlmICghaXNOYU4oZW5jLmVuY291bnRlci5pbml0aWFsT2Zmc2V0KSlcclxuICAgICAgICBlbXVsYXRvci5zZWVrKGVuYy5lbmNvdW50ZXIuaW5pdGlhbE9mZnNldCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBMaXN0ZW4gZm9yIHRoZSB1c2VyIHRvIGF0dGVtcHQgdG8gbG9hZCBhbiBlbmNvdW50ZXIgZnJvbSB0aGUgZW5jb3VudGVycyBwYW5lXHJcbiAgICBlbmNvdW50ZXJUYWIub24oJ2xvYWQnLCAoaWQpID0+IHtcclxuICAgICAgLy8gQXR0ZW1wdCB0byBzZXQgdGhlIGN1cnJlbnQgZW11bGF0ZWQgZW5jb3VudGVyXHJcbiAgICAgIGlmICghZW11bGF0b3Iuc2V0Q3VycmVudEJ5SUQoaWQpKSB7XHJcbiAgICAgICAgLy8gSWYgdGhhdCBlbmNvdW50ZXIgaXNuJ3QgbG9hZGVkLCBsb2FkIGl0XHJcbiAgICAgICAgcGVyc2lzdG9yLmxvYWRFbmNvdW50ZXIoaWQpLnRoZW4oKGVuYykgPT4ge1xyXG4gICAgICAgICAgZW11bGF0b3IuYWRkRW5jb3VudGVyKGVuYyk7XHJcbiAgICAgICAgICBlbXVsYXRvci5zZXRDdXJyZW50QnlJRChpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIExpc3RlbiBmb3IgdGhlIHVzZXIgdG8gc2VsZWN0IHJlLXBhcnNlIG9uIHRoZSBlbmNvdW50ZXJzIHRhYiwgdGhlbiByZWZyZXNoIGl0IGluIHRoZSBEQlxyXG4gICAgZW5jb3VudGVyVGFiLm9uKCdwYXJzZScsIChpZCkgPT4ge1xyXG4gICAgICBwZXJzaXN0b3IubG9hZEVuY291bnRlcihpZCkudGhlbihhc3luYyAoZW5jKSA9PiB7XHJcbiAgICAgICAgZW5jLmluaXRpYWxpemUoKTtcclxuICAgICAgICBhd2FpdCBwZXJzaXN0b3IucGVyc2lzdEVuY291bnRlcihlbmMpO1xyXG4gICAgICAgIGVuY291bnRlclRhYi5yZWZyZXNoKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gTGlzdGVuIGZvciB0aGUgdXNlciB0byBzZWxlY3QgcHJ1bmUgb24gdGhlIGVuY291bnRlcnMgdGFiXHJcbiAgICBlbmNvdW50ZXJUYWIub24oJ3BydW5lJywgKGlkKSA9PiB7XHJcbiAgICAgIHBlcnNpc3Rvci5sb2FkRW5jb3VudGVyKGlkKS50aGVuKGFzeW5jIChlbmMpID0+IHtcclxuICAgICAgICAvLyBUcmltIGxvZyBsaW5lc1xyXG4gICAgICAgIGVuYy5sb2dMaW5lcyA9IGVuYy5sb2dMaW5lcy5zbGljZShlbmMuZmlyc3RMaW5lSW5kZXggLSAxKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIHByZWNhbGN1bGF0ZWQgb2Zmc2V0c1xyXG4gICAgICAgIGNvbnN0IGZpcnN0VGltZXN0YW1wID0gZW5jLmxvZ0xpbmVzWzBdLnRpbWVzdGFtcDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuYy5sb2dMaW5lcy5sZW5ndGg7ICsraSlcclxuICAgICAgICAgIGVuYy5sb2dMaW5lc1tpXS5vZmZzZXQgPSBlbmMubG9nTGluZXNbaV0udGltZXN0YW1wIC0gZmlyc3RUaW1lc3RhbXA7XHJcblxyXG5cclxuICAgICAgICBlbmMuZmlyc3RMaW5lSW5kZXggPSAwO1xyXG5cclxuICAgICAgICBlbmMuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIGF3YWl0IHBlcnNpc3Rvci5wZXJzaXN0RW5jb3VudGVyKGVuYyk7XHJcbiAgICAgICAgZW5jb3VudGVyVGFiLnJlZnJlc2goKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBMaXN0ZW4gZm9yIHRoZSB1c2VyIHRvIHNlbGVjdCBkZWxldGUgb24gdGhlIGVuY291bnRlcnMgdGFiLCB0aGVuIGRvIGl0LlxyXG4gICAgZW5jb3VudGVyVGFiLm9uKCdkZWxldGUnLCAoaWQpID0+IHtcclxuICAgICAgcGVyc2lzdG9yLmRlbGV0ZUVuY291bnRlcihpZCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgZW5jb3VudGVyVGFiLnJlZnJlc2goKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBMaXN0ZW4gZm9yIHRoZSBlbXVsYXRvciB0byBldmVudCBsb2cgbGluZXMsIHRoZW4gZGlzcGF0Y2ggdGhlbSB0byB0aGUgdGltZWxpbmUgY29udHJvbGxlclxyXG4gICAgLy8gQFRPRE86IFByb2JhYmx5IGEgYmV0dGVyIHBsYWNlIHRvIGxpc3RlbiBmb3IgdGhpcz9cclxuICAgIGVtdWxhdG9yLm9uKCdlbWl0TG9ncycsIChsb2dzKSA9PiB7XHJcbiAgICAgIHRpbWVsaW5lQ29udHJvbGxlci5PbkxvZ0V2ZW50KHtcclxuICAgICAgICB0eXBlOiAnb25Mb2dFdmVudCcsXHJcbiAgICAgICAgZGV0YWlsOiBsb2dzLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFdhaXQgZm9yIHRoZSBEQiB0byBiZSByZWFkeSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgdGhhdCBtaWdodCBpbnZva2UgdGhlIERCXHJcbiAgICBwZXJzaXN0b3Iub24oJ3JlYWR5JywgKCkgPT4ge1xyXG4gICAgICBVc2VyQ29uZmlnLmdldFVzZXJDb25maWdMb2NhdGlvbigncmFpZGJvc3MnLCBPcHRpb25zLCAoZSkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53ZWJzb2NrZXRDb25uZWN0ZWQnKS5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2Vic29ja2V0RGlzY29ubmVjdGVkJykuY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIFJhaWRib3NzIGNvbXBvbmVudHMsIGJpbmQgdGhlbSB0byB0aGUgZW11bGF0b3IgZm9yIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgICAgIHRpbWVsaW5lVUkgPSBuZXcgUmFpZEVtdWxhdG9yVGltZWxpbmVVSShPcHRpb25zKTtcclxuICAgICAgICB0aW1lbGluZVVJLmJpbmRUbyhlbXVsYXRvcik7XHJcbiAgICAgICAgdGltZWxpbmVDb250cm9sbGVyID1cclxuICAgICAgICAgICAgbmV3IFJhaWRFbXVsYXRvclRpbWVsaW5lQ29udHJvbGxlcihPcHRpb25zLCB0aW1lbGluZVVJLCByYWlkYm9zc0ZpbGVEYXRhKTtcclxuICAgICAgICB0aW1lbGluZUNvbnRyb2xsZXIuYmluZFRvKGVtdWxhdG9yKTtcclxuICAgICAgICBwb3B1cFRleHQgPSBuZXcgUmFpZEVtdWxhdG9yUG9wdXBUZXh0KFxyXG4gICAgICAgICAgICBPcHRpb25zLCBuZXcgVGltZWxpbmVMb2FkZXIodGltZWxpbmVDb250cm9sbGVyKSwgcmFpZGJvc3NGaWxlRGF0YSk7XHJcbiAgICAgICAgcG9wdXBUZXh0LmJpbmRUbyhlbXVsYXRvcik7XHJcblxyXG4gICAgICAgIHRpbWVsaW5lQ29udHJvbGxlci5TZXRQb3B1cFRleHRJbnRlcmZhY2UobmV3IFBvcHVwVGV4dEdlbmVyYXRvcihwb3B1cFRleHQpKTtcclxuXHJcbiAgICAgICAgZW11bGF0b3Iuc2V0UG9wdXBUZXh0KHBvcHVwVGV4dCk7XHJcblxyXG4gICAgICAgIC8vIExvYWQgdGhlIGVuY291bnRlciBtZXRhZGF0YSBmcm9tIHRoZSBEQlxyXG4gICAgICAgIGVuY291bnRlclRhYi5yZWZyZXNoKCk7XHJcblxyXG4gICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYW55IGVuY291bnRlcnMgc3RvcmVkLCBzaG93IHRoZSBpbnRybyBtb2RhbFxyXG4gICAgICAgIHBlcnNpc3Rvci5saXN0RW5jb3VudGVycygpLnRoZW4oKGVuY291bnRlcnMpID0+IHtcclxuICAgICAgICAgIGlmIChlbmNvdW50ZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBzaG93TW9kYWwoJy5pbnRyb01vZGFsJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgbGFzdEVuY291bnRlciA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY3VycmVudEVuY291bnRlcicpO1xyXG4gICAgICAgICAgICBpZiAobGFzdEVuY291bnRlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgbGFzdEVuY291bnRlciA9IHBhcnNlSW50KGxhc3RFbmNvdW50ZXIpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IG1hdGNoZWRFbmNvdW50ZXJzID0gZW5jb3VudGVycy5maWx0ZXIoKGUpID0+IGUuaWQgPT09IGxhc3RFbmNvdW50ZXIpO1xyXG4gICAgICAgICAgICAgIGlmIChtYXRjaGVkRW5jb3VudGVycy5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICBlbmNvdW50ZXJUYWIuZGlzcGF0Y2goJ2xvYWQnLCBsYXN0RW5jb3VudGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBjaGVja0ZpbGUgPSBhc3luYyAoZmlsZSkgPT4ge1xyXG4gICAgICAgICAgaWYgKGZpbGUudHlwZSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSB7XHJcbiAgICAgICAgICAgIC8vIEltcG9ydCBhIERCIGZpbGUgYnkgcGFzc2luZyBpdCB0byBQZXJzaXN0b3JcclxuICAgICAgICAgICAgLy8gREIgZmlsZXMgYXJlIGp1c3QganNvbiByZXByZXNlbnRhdGlvbnMgb2YgdGhlIERCXHJcbiAgICAgICAgICAgIGZpbGUudGV4dCgpLnRoZW4oKHR4dCkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IERCID0gSlNPTi5wYXJzZSh0eHQpO1xyXG4gICAgICAgICAgICAgIHBlcnNpc3Rvci5pbXBvcnREQihEQikudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbmNvdW50ZXJUYWIucmVmcmVzaCgpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEFzc3VtZSBpdCdzIGEgbG9nIGZpbGU/XHJcbiAgICAgICAgICAgIGNvbnN0IGltcG9ydE1vZGFsID0gc2hvd01vZGFsKCcuaW1wb3J0UHJvZ3Jlc3NNb2RhbCcpO1xyXG4gICAgICAgICAgICBjb25zdCBiYXIgPSBpbXBvcnRNb2RhbC5xdWVyeVNlbGVjdG9yKCcucHJvZ3Jlc3MtYmFyJyk7XHJcbiAgICAgICAgICAgIGJhci5zdHlsZS53aWR0aCA9ICcwcHgnO1xyXG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGltcG9ydE1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5sYWJlbCcpO1xyXG4gICAgICAgICAgICBsYWJlbC5pbm5lclRleHQgPSAnJztcclxuICAgICAgICAgICAgY29uc3QgZW5jTGFiZWwgPSBpbXBvcnRNb2RhbC5xdWVyeVNlbGVjdG9yKCcuZW5jb3VudGVyTGFiZWwnKTtcclxuICAgICAgICAgICAgZW5jTGFiZWwuaW5uZXJUZXh0ID0gJ04vQSc7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkb25lQnV0dG9uID0gaW1wb3J0TW9kYWwucXVlcnlTZWxlY3RvcignLmJ0bicpO1xyXG4gICAgICAgICAgICBkb25lQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRvbmVCdXR0b25UaW1lb3V0ID0gZG9uZUJ1dHRvbi5xdWVyeVNlbGVjdG9yKCcuZG9uZUJ0blRpbWVvdXQnKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XHJcblxyXG4gICAgICAgICAgICBsb2dDb252ZXJ0ZXJXb3JrZXIub25tZXNzYWdlID0gKG1zZykgPT4ge1xyXG4gICAgICAgICAgICAgIHN3aXRjaCAobXNnLmRhdGEudHlwZSkge1xyXG4gICAgICAgICAgICAgIGNhc2UgJ3Byb2dyZXNzJzpcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgcGVyY2VudCA9ICgobXNnLmRhdGEuYnl0ZXMgLyBtc2cuZGF0YS50b3RhbEJ5dGVzKSAqIDEwMCkudG9GaXhlZCgyKTtcclxuICAgICAgICAgICAgICAgICAgYmFyLnN0eWxlLndpZHRoID0gcGVyY2VudCArICclJztcclxuICAgICAgICAgICAgICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gYCR7bXNnLmRhdGEuYnl0ZXN9LyR7bXNnLmRhdGEudG90YWxCeXRlc30gYnl0ZXMsICR7bXNnLmRhdGEubGluZXN9IGxpbmVzICgke3BlcmNlbnR9JSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAnZW5jb3VudGVyJzpcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgZW5jID0gbXNnLmRhdGEuZW5jb3VudGVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgZW5jTGFiZWwuaW5uZXJUZXh0ID0gYFxyXG4gICAgICAgICAgICAgICAgICBab25lOiAke2VuYy5lbmNvdW50ZXJab25lTmFtZX1cclxuICAgICAgICAgICAgICAgICAgRW5jb3VudGVyOiAke21zZy5kYXRhLm5hbWV9XHJcbiAgICAgICAgICAgICAgICAgIFN0YXJ0OiAke25ldyBEYXRlKGVuYy5zdGFydFRpbWVzdGFtcCl9XHJcbiAgICAgICAgICAgICAgICAgIEVuZDogJHtuZXcgRGF0ZShlbmMuZW5kVGltZXN0YW1wKX1cclxuICAgICAgICAgICAgICAgICAgRHVyYXRpb246ICR7RW11bGF0b3JDb21tb24ubXNUb0R1cmF0aW9uKGVuYy5lbmRUaW1lc3RhbXAgLSBlbmMuc3RhcnRUaW1lc3RhbXApfVxyXG4gICAgICAgICAgICAgICAgICBQdWxsIER1cmF0aW9uOiAke0VtdWxhdG9yQ29tbW9uLm1zVG9EdXJhdGlvbihlbmMuZW5kVGltZXN0YW1wIC0gZW5jLmluaXRpYWxUaW1lc3RhbXApfVxyXG4gICAgICAgICAgICAgICAgICBTdGFydGVkIEJ5OiAke2VuYy5zdGFydFN0YXR1c31cclxuICAgICAgICAgICAgICAgICAgRW5kIFN0YXR1czogJHtlbmMuZW5kU3RhdHVzfVxyXG4gICAgICAgICAgICAgICAgICBMaW5lIENvdW50OiAke2VuYy5sb2dMaW5lcy5sZW5ndGh9XHJcbiAgICAgICAgICAgICAgICAgIGA7XHJcbiAgICAgICAgICAgICAgICAgIC8vIE9iamVjdHMgc2VudCB2aWEgbWVzc2FnZSBhcmUgcmF3IG9iamVjdHMsIG5vdCB0eXBlZC5cclxuICAgICAgICAgICAgICAgICAgLy8gTmVlZCB0byBnZXQgdGhlIG5hbWUgYW5vdGhlciB3YXkgYW5kIG92ZXJyaWRlIGZvciBQZXJzaXN0b3IuXHJcbiAgICAgICAgICAgICAgICAgIGVuYy5jb21iYXRhbnRUcmFja2VyLmdldE1haW5Db21iYXRhbnROYW1lID0gKCkgPT4gbXNnLmRhdGEubmFtZTtcclxuICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChwZXJzaXN0b3IucGVyc2lzdEVuY291bnRlcihlbmMpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgJ2RvbmUnOlxyXG4gICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBlbmNvdW50ZXJUYWIucmVmcmVzaCgpO1xyXG4gICAgICAgICAgICAgICAgICBkb25lQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgIGxldCBzZWNvbmRzID0gNTtcclxuICAgICAgICAgICAgICAgICAgZG9uZUJ1dHRvblRpbWVvdXQuaW5uZXJUZXh0ID0gYCAoJHtzZWNvbmRzfSlgO1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLS1zZWNvbmRzO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmVCdXR0b25UaW1lb3V0LmlubmVyVGV4dCA9IGAgKCR7c2Vjb25kc30pYDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vjb25kcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgaGlkZU1vZGFsKCcuaW1wb3J0UHJvZ3Jlc3NNb2RhbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZmlsZS5hcnJheUJ1ZmZlcigpLnRoZW4oKGIpID0+IHtcclxuICAgICAgICAgICAgICBsb2dDb252ZXJ0ZXJXb3JrZXIucG9zdE1lc3NhZ2UoYiwgW2JdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgaWdub3JlRXZlbnQgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBIYW5kbGUgZHJhZytkcm9wIG9mIGZpbGVzLiBIYXZlIHRvIGlnbm9yZSBkcmFnZW50ZXIvZHJhZ292ZXIgZm9yIGNvbXBhdGliaWxpdHkgcmVhc29ucy5cclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbnRlcicsIGlnbm9yZUV2ZW50KTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgaWdub3JlRXZlbnQpO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBhc3luYyAoZSkgPT4ge1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgIGNvbnN0IGR0ID0gZS5kYXRhVHJhbnNmZXI7XHJcbiAgICAgICAgICBjb25zdCBmaWxlcyA9IGR0LmZpbGVzO1xyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gZmlsZXNbaV07XHJcbiAgICAgICAgICAgIGF3YWl0IGNoZWNrRmlsZShmaWxlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgJGV4cG9ydEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5leHBvcnREQkJ1dHRvbicpO1xyXG5cclxuICAgICAgICBuZXcgVG9vbHRpcCgkZXhwb3J0QnV0dG9uLCAnYm90dG9tJyxcclxuICAgICAgICAgICAgJ0V4cG9ydCBEQiBpcyB2ZXJ5IHNsb3cgYW5kIHNob3dzIGEgMCBieXRlIGRvd25sb2FkLCBidXQgaXQgZG9lcyB3b3JrIGV2ZW50dWFsbHkuJyk7XHJcblxyXG4gICAgICAgIC8vIEF1dG8gaW5pdGlhbGl6ZSBhbGwgY29sbGFwc2UgZWxlbWVudHMgb24gdGhlIHBhZ2VcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXScpLmZvckVhY2goKG4pID0+IHtcclxuICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iobi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFyZ2V0JykpO1xyXG4gICAgICAgICAgbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKG4uZ2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJykgPT09ICdmYWxzZScpIHtcclxuICAgICAgICAgICAgICBuLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XHJcbiAgICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBuLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xyXG4gICAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBIYW5kbGUgREIgZXhwb3J0XHJcbiAgICAgICAgJGV4cG9ydEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICBwZXJzaXN0b3IuZXhwb3J0REIoKS50aGVuKChvYmopID0+IHtcclxuICAgICAgICAgICAgLy8gQ29udmVydCBlbmNvdW50ZXIgREIgdG8ganNvbiwgdGhlbiBiYXNlNjQgZW5jb2RlIGl0XHJcbiAgICAgICAgICAgIC8vIEVuY291bnRlcnMgY2FuIGhhdmUgdW5pY29kZSwgY2FuJ3QgdXNlIGJ0b2EgZm9yIGJhc2U2NCBlbmNvZGVcclxuICAgICAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShvYmopXSwgeyB0eXBlOiAnYXBwbGljYXRpb24vanNvbicgfSk7XHJcbiAgICAgICAgICAgIG9iaiA9IG51bGw7XHJcbiAgICAgICAgICAgIC8vIE9mZmVyIGRvd25sb2FkIHRvIHVzZXJcclxuICAgICAgICAgICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICAgICAgYS5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgJ1JhaWRFbXVsYXRvcl9EQkV4cG9ydF8nICsgKCtuZXcgRGF0ZSgpKSArICcuanNvbicpO1xyXG4gICAgICAgICAgICBhLmNsaWNrKCk7XHJcbiAgICAgICAgICAgIC8vIEFmdGVyIGEgc2Vjb25kIChzbyBhZnRlciB1c2VyIGFjY2VwdHMvZGVjbGluZXMpXHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgb2JqZWN0IFVSTCB0byBhdm9pZCBtZW1vcnkgaXNzdWVzXHJcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKGEuaHJlZik7XHJcbiAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0ICRmaWxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9hZEZpbGVJbnB1dCcpO1xyXG5cclxuICAgICAgICAvLyBIYW5kbGUgdGhlIGBMb2FkIE5ldHdvcmsgTG9nYCBidXR0b24gd2hlbiB1c2VyIHNlbGVjdHMgZmlsZXNcclxuICAgICAgICAkZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGFzeW5jIChlKSA9PiB7XHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGUudGFyZ2V0LmZpbGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBlLnRhcmdldC5maWxlc1tpXTtcclxuICAgICAgICAgICAgY2hlY2tGaWxlKGZpbGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBQcm9tcHQgdXNlciB0byBzZWxlY3QgZmlsZXMgaWYgdGhleSBjbGljayB0aGUgYExvYWQgTmV0d29yayBMb2dgIG9yIGBJbXBvcnQgREJgIGJ1dHRvbnMuXHJcbiAgICAgICAgLy8gVGhlc2UgYnV0dG9ucyByZWFsbHkgZG8gdGhlIHNhbWUgdGhpbmcuXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmltcG9ydERCQnV0dG9uLCAubG9hZE5ldHdvcmtMb2dCdXR0b24nKS5mb3JFYWNoKChuKSA9PiB7XHJcbiAgICAgICAgICBuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgJGZpbGVJbnB1dC5jbGljaygpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBhbGwgbW9kYWwgY2xvc2UgYnV0dG9uc1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbCBidXR0b24uY2xvc2UsIFtkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScpLmZvckVhY2goKG4pID0+IHtcclxuICAgICAgICAgIG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBwYXJlbnQgbW9kYWwgZnJvbSB0aGUgY2xvc2UgYnV0dG9uIGFuZCBjbG9zZSBpdFxyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0O1xyXG4gICAgICAgICAgICB3aGlsZSAoIXRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsJykgJiYgdGFyZ2V0ICE9PSBkb2N1bWVudC5ib2R5KVxyXG4gICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRhcmdldCAhPT0gZG9jdW1lbnQuYm9keSlcclxuICAgICAgICAgICAgICBoaWRlTW9kYWwoJy4nICsgWy4uLnRhcmdldC5jbGFzc0xpc3RdLmpvaW4oJy4nKSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIGNsb3NpbmcgYWxsIG1vZGFscyBpZiB0aGUgdXNlciBjbGlja3Mgb3V0c2lkZSB0aGUgbW9kYWxcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubW9kYWwnKS5mb3JFYWNoKChuKSA9PiB7XHJcbiAgICAgICAgICBuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgLy8gT25seSBjbG9zZSB0aGUgbW9kYWwgaWYgdGhlIHVzZXIgYWN0dWFsbHkgY2xpY2tlZCBvdXRzaWRlIGl0LCBub3QgY2hpbGQgY2xpY2tzXHJcbiAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gbilcclxuICAgICAgICAgICAgICBoaWRlTW9kYWwoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBc2sgdGhlIHVzZXIgaWYgdGhleSdyZSByZWFsbHkgc3VyZSB0aGV5IHdhbnQgdG8gY2xlYXIgdGhlIERCXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNsZWFyREJCdXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICBzaG93TW9kYWwoJy5kZWxldGVEQk1vZGFsJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSB1c2VyIHNheWluZyB0aGV5J3JlIHJlYWxseSBzdXJlIHRoZXkgd2FudCB0byBjbGVhciB0aGUgREIgYnkgd2lwaW5nIGl0IHRoZW5cclxuICAgICAgICAvLyByZWZyZXNoaW5nIHRoZSBlbmNvdW50ZXIgdGFiXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlbGV0ZURCTW9kYWwgLmJ0bi1wcmltYXJ5JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgcGVyc2lzdG9yLmNsZWFyREIoKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgZW5jb3VudGVyVGFiLnJlZnJlc2goKTtcclxuICAgICAgICAgICAgaGlkZU1vZGFsKCcuZGVsZXRlREJNb2RhbCcpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIE1ha2UgdGhlIGVtdWxhdG9yIHN0YXRlIGF2YWlsYWJsZSBmb3IgZGVidWdnaW5nXHJcbiAgICAgICAgd2luZG93LnJhaWRFbXVsYXRvciA9IHtcclxuICAgICAgICAgIGVtdWxhdG9yOiBlbXVsYXRvcixcclxuICAgICAgICAgIHByb2dyZXNzQmFyOiBwcm9ncmVzc0JhcixcclxuICAgICAgICAgIHRpbWVsaW5lQ29udHJvbGxlcjogdGltZWxpbmVDb250cm9sbGVyLFxyXG4gICAgICAgICAgcG9wdXBUZXh0OiBwb3B1cFRleHQsXHJcbiAgICAgICAgICBwZXJzaXN0b3I6IHBlcnNpc3RvcixcclxuICAgICAgICAgIGVuY291bnRlclRhYjogZW5jb3VudGVyVGFiLFxyXG4gICAgICAgICAgZW11bGF0ZWRQYXJ0eUluZm86IGVtdWxhdGVkUGFydHlJbmZvLFxyXG4gICAgICAgICAgZW11bGF0ZWRNYXA6IGVtdWxhdGVkTWFwLFxyXG4gICAgICAgICAgZW11bGF0ZWRXZWJTb2NrZXQ6IGVtdWxhdGVkV2ViU29ja2V0LFxyXG4gICAgICAgICAgdGltZWxpbmVVSTogdGltZWxpbmVVSSxcclxuICAgICAgICB9O1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KSgpO1xyXG5cclxuZnVuY3Rpb24gc2hvd01vZGFsKHNlbGVjdG9yKSB7XHJcbiAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcclxuICBjb25zdCBiYWNrZHJvcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC1iYWNrZHJvcCcpO1xyXG4gIGJvZHkuY2xhc3NMaXN0LmFkZCgnbW9kYWwtb3BlbicpO1xyXG4gIGJhY2tkcm9wLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcclxuICBiYWNrZHJvcC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XHJcbiAgbW9kYWwuY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xyXG4gIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gIHJldHVybiBtb2RhbDtcclxufVxyXG5cclxuZnVuY3Rpb24gaGlkZU1vZGFsKHNlbGVjdG9yID0gJy5tb2RhbC5zaG93Jykge1xyXG4gIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XHJcbiAgY29uc3QgYmFja2Ryb3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtYmFja2Ryb3AnKTtcclxuICBib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLW9wZW4nKTtcclxuICBiYWNrZHJvcC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XHJcbiAgYmFja2Ryb3AuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xyXG4gIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTtcclxuICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgcmV0dXJuIG1vZGFsO1xyXG59XHJcbiIsIi8vIEZvciBjb25zaXN0ZW5jeSB3aXRoIFJlc3BvbnNlcywgQ29uZGl0aW9uc1xyXG4vLyBhcmUgYWxzbyBmdW5jdGlvbnMuXHJcblxyXG5pbXBvcnQgeyBSYWlkYm9zc0RhdGEgYXMgRGF0YSB9IGZyb20gJy4uL3R5cGVzL2RhdGEnO1xyXG5pbXBvcnQgeyBUYXJnZXRlZE1hdGNoZXMgfSBmcm9tICcuLi90eXBlcy90cmlnZ2VyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICB0YXJnZXRJc1lvdSgpOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzKSA9PiBib29sZWFuIHtcclxuICAgIHJldHVybiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzKSA9PiBkYXRhLm1lID09PSBtYXRjaGVzPy50YXJnZXQ7XHJcbiAgfSxcclxuICB0YXJnZXRJc05vdFlvdSgpOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzKSA9PiBib29sZWFuIHtcclxuICAgIHJldHVybiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzKSA9PiBkYXRhLm1lICE9PSBtYXRjaGVzPy50YXJnZXQ7XHJcbiAgfSxcclxuICBjYXJlc0Fib3V0QU9FKCk6IChkYXRhOiBEYXRhKSA9PiBib29sZWFuIHtcclxuICAgIHJldHVybiAoZGF0YTogRGF0YSkgPT4gZGF0YS5yb2xlID09PSAndGFuaycgfHwgZGF0YS5yb2xlID09PSAnaGVhbGVyJyB8fCBkYXRhLkNhbkFkZGxlKCkgfHwgZGF0YS5qb2IgPT09ICdCTFUnO1xyXG4gIH0sXHJcbiAgY2FyZXNBYm91dE1hZ2ljYWwoKTogKGRhdGE6IERhdGEpID0+IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChkYXRhOiBEYXRhKSA9PiBkYXRhLnJvbGUgPT09ICd0YW5rJyB8fCBkYXRhLnJvbGUgPT09ICdoZWFsZXInIHx8IGRhdGEuQ2FuQWRkbGUoKSB8fCBkYXRhLmpvYiA9PT0gJ0JMVSc7XHJcbiAgfSxcclxuICBjYXJlc0Fib3V0UGh5c2ljYWwoKTogKGRhdGE6IERhdGEpID0+IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChkYXRhOiBEYXRhKSA9PiBkYXRhLnJvbGUgPT09ICd0YW5rJyB8fCBkYXRhLnJvbGUgPT09ICdoZWFsZXInIHx8IGRhdGEuQ2FuRmVpbnQoKSB8fCBkYXRhLmpvYiA9PT0gJ0JMVSc7XHJcbiAgfSxcclxufTtcclxuIiwiLy8gQXV0by1nZW5lcmF0ZWQgZnJvbSBnZW5fem9uZV9pZF9hbmRfaW5mby5weVxyXG4vLyBETyBOT1QgRURJVCBUSElTIEZJTEUgRElSRUNUTFlcclxuXHJcbmNvbnN0IGRhdGEgPSB7XHJcbiAgJ0JlYXN0VHJpYmVRdWVzdHMnOiAxMyxcclxuICAnQ29tcGFuaW9ucyc6IDEyLFxyXG4gICdDdXN0b21EZWxpdmVyaWVzJzogMjUsXHJcbiAgJ0RlZXBEdW5nZW9ucyc6IDIxLFxyXG4gICdEaXNjaXBsZXNPZlRoZUhhbmQnOiAxNyxcclxuICAnRGlzY2lwbGVzT2ZUaGVMYW5kJzogMTYsXHJcbiAgJ0R1bmdlb25zJzogMixcclxuICAnRHV0eVJvdWxldHRlJzogMSxcclxuICAnRXVyZWthJzogMjYsXHJcbiAgJ0ZhdGVzJzogOCxcclxuICAnR29sZFNhdWNlcic6IDE5LFxyXG4gICdHcmFuZENvbXBhbnknOiAxMSxcclxuICAnR3VpbGRoZXN0cyc6IDMsXHJcbiAgJ0xldmVxdWVzdHMnOiAxMCxcclxuICAnT3ZlcmFsbENvbXBsZXRpb24nOiAxNCxcclxuICAnUGxheWVyQ29tbWVuZGF0aW9uJzogMTUsXHJcbiAgJ1B2cCc6IDYsXHJcbiAgJ1F1ZXN0QmF0dGxlcyc6IDcsXHJcbiAgJ1JhaWRzJzogNSxcclxuICAnUmV0YWluZXJWZW50dXJlcyc6IDE4LFxyXG4gICdUcmVhc3VyZUh1bnQnOiA5LFxyXG4gICdUcmlhbHMnOiA0LFxyXG4gICdVbHRpbWF0ZVJhaWRzJzogMjgsXHJcbiAgJ1dvbmRyb3VzVGFpbHMnOiAyNCxcclxufSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRhdGE7XHJcbiIsImltcG9ydCB7IEJhc2VSZWdFeHAgfSBmcm9tICcuLi90eXBlcy90cmlnZ2VyJztcclxuaW1wb3J0IFJlZ2V4ZXMsIHsgUGFyYW1zIH0gZnJvbSAnLi9yZWdleGVzJztcclxuXHJcbmludGVyZmFjZSBGaWVsZHMge1xyXG4gIGZpZWxkOiBzdHJpbmc7XHJcbiAgdmFsdWU/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIE5ldFJlZ2V4PFQgZXh0ZW5kcyBzdHJpbmc+ID0gQmFzZVJlZ0V4cDxFeGNsdWRlPFQsICdjYXB0dXJlJz4+O1xyXG5cclxuLy8gRGlmZmVyZW5jZXMgZnJvbSBSZWdleGVzOlxyXG4vLyAqIG1heSBoYXZlIG1vcmUgZmllbGRzXHJcbi8vICogQWRkZWRDb21iYXRhbnQgbnBjIGlkIGlzIGJyb2tlbiB1cCBpbnRvIG5wY05hbWVJZCBhbmQgbnBjQmFzZUlkXHJcbi8vICogZ2FtZUxvZyBhbHdheXMgc3BsaXRzIG5hbWUgaW50byBpdHMgb3duIGZpZWxkIChidXQgcHJldmlvdXNseSB3b3VsZG4ndClcclxuXHJcbmNvbnN0IHNlcGFyYXRvciA9ICdcXFxcfCc7XHJcbmNvbnN0IG1hdGNoRGVmYXVsdCA9ICdbXnxdKic7XHJcblxyXG5jb25zdCBzdGFydHNVc2luZ1BhcmFtcyA9IFsndGltZXN0YW1wJywgJ3NvdXJjZUlkJywgJ3NvdXJjZScsICdpZCcsICdhYmlsaXR5JywgJ3RhcmdldElkJywgJ3RhcmdldCcsICdjYXN0VGltZSddIGFzIGNvbnN0O1xyXG5jb25zdCBhYmlsaXR5UGFyYW1zID0gWydzb3VyY2VJZCcsICdzb3VyY2UnLCAnaWQnLCAnYWJpbGl0eScsICd0YXJnZXRJZCcsICd0YXJnZXQnXSBhcyBjb25zdDtcclxuY29uc3QgYWJpbGl0eUZ1bGxQYXJhbXMgPSBbJ3NvdXJjZUlkJywgJ3NvdXJjZScsICdpZCcsICdhYmlsaXR5JywgJ3RhcmdldElkJywgJ3RhcmdldCcsICdmbGFncycsICdkYW1hZ2UnLCAndGFyZ2V0Q3VycmVudEhwJywgJ3RhcmdldE1heEhwJywgJ3gnLCAneScsICd6JywgJ2hlYWRpbmcnXSBhcyBjb25zdDtcclxuY29uc3QgaGVhZE1hcmtlclBhcmFtcyA9IFsndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ2lkJ10gYXMgY29uc3Q7XHJcbmNvbnN0IGFkZGVkQ29tYmF0YW50UGFyYW1zID0gWydpZCcsICduYW1lJ10gYXMgY29uc3Q7XHJcbmNvbnN0IGFkZGVkQ29tYmF0YW50RnVsbFBhcmFtcyA9IFsnaWQnLCAnbmFtZScsICdqb2InLCAnbGV2ZWwnLCAnb3duZXJJZCcsICd3b3JsZCcsICducGNOYW1lSWQnLCAnbnBjQmFzZUlkJywgJ2N1cnJlbnRIcCcsICdocCcsICd4JywgJ3knLCAneicsICdoZWFkaW5nJ10gYXMgY29uc3Q7XHJcbmNvbnN0IHJlbW92aW5nQ29tYmF0YW50UGFyYW1zID0gWydpZCcsICduYW1lJywgJ2hwJ10gYXMgY29uc3Q7XHJcbmNvbnN0IGdhaW5zRWZmZWN0UGFyYW1zID0gWydlZmZlY3RJZCcsICdlZmZlY3QnLCAnZHVyYXRpb24nLCAnc291cmNlSWQnLCAnc291cmNlJywgJ3RhcmdldElkJywgJ3RhcmdldCcsICdjb3VudCddIGFzIGNvbnN0O1xyXG5jb25zdCBzdGF0dXNFZmZlY3RFeHBsaWNpdFBhcmFtcyA9IFsndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ2hwJywgJ21heEhwJywgJ3gnLCAneScsICd6JywgJ2hlYWRpbmcnLCAnZGF0YTAnLCAnZGF0YTEnLCAnZGF0YTInLCAnZGF0YTMnLCAnZGF0YTQnXSBhcyBjb25zdDtcclxuY29uc3QgbG9zZXNFZmZlY3RQYXJhbXMgPSBbJ2VmZmVjdElkJywgJ2VmZmVjdCcsICdzb3VyY2VJZCcsICdzb3VyY2UnLCAndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ2NvdW50J10gYXMgY29uc3Q7XHJcbmNvbnN0IHRldGhlclBhcmFtcyA9IFsnc291cmNlSWQnLCAnc291cmNlJywgJ3RhcmdldElkJywgJ3RhcmdldCcsICdpZCddIGFzIGNvbnN0O1xyXG5jb25zdCB3YXNEZWZlYXRlZFBhcmFtcyA9IFsndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ3NvdXJjZUlkJywgJ3NvdXJjZSddIGFzIGNvbnN0O1xyXG5jb25zdCBlY2hvUGFyYW1zID0gWydjb2RlJywgJ25hbWUnLCAnbGluZSddIGFzIGNvbnN0O1xyXG5jb25zdCBkaWFsb2dQYXJhbXMgPSBbJ2NvZGUnLCAnbmFtZScsICdsaW5lJ10gYXMgY29uc3Q7XHJcbmNvbnN0IG1lc3NhZ2VQYXJhbXMgPSBbJ2NvZGUnLCAnbmFtZScsICdsaW5lJ10gYXMgY29uc3Q7XHJcbmNvbnN0IGdhbWVMb2dQYXJhbXMgPSBbJ2NvZGUnLCAnbmFtZScsICdsaW5lJ10gYXMgY29uc3Q7XHJcbmNvbnN0IGdhbWVOYW1lTG9nUGFyYW1zID0gWydjb2RlJywgJ25hbWUnLCAnbGluZSddIGFzIGNvbnN0O1xyXG5jb25zdCBzdGF0Q2hhbmdlUGFyYW1zID0gWydqb2InLCAnc3RyZW5ndGgnLCAnZGV4dGVyaXR5JywgJ3ZpdGFsaXR5JywgJ2ludGVsbGlnZW5jZScsICdtaW5kJywgJ3BpZXR5JywgJ2F0dGFja1Bvd2VyJywgJ2RpcmVjdEhpdCcsICdjcml0aWNhbEhpdCcsICdhdHRhY2tNYWdpY1BvdGVuY3knLCAnaGVhbE1hZ2ljUG90ZW5jeScsICdkZXRlcm1pbmF0aW9uJywgJ3NraWxsU3BlZWQnLCAnc3BlbGxTcGVlZCcsICd0ZW5hY2l0eSddIGFzIGNvbnN0O1xyXG5jb25zdCBjaGFuZ2Vab25lUGFyYW1zID0gWydpZCcsICduYW1lJ10gYXMgY29uc3Q7XHJcbmNvbnN0IG5ldHdvcms2ZFBhcmFtcyA9IFsnaW5zdGFuY2UnLCAnY29tbWFuZCcsICdkYXRhMCcsICdkYXRhMScsICdkYXRhMicsICdkYXRhMyddIGFzIGNvbnN0O1xyXG5jb25zdCBuYW1lVG9nZ2xlUGFyYW1zID0gWydpZCcsICduYW1lJywgJ3RvZ2dsZSddIGFzIGNvbnN0O1xyXG5cclxuZXhwb3J0IHR5cGUgU3RhcnRzVXNpbmdQYXJhbXMgPSB0eXBlb2Ygc3RhcnRzVXNpbmdQYXJhbXNbbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgQWJpbGl0eVBhcmFtcyA9IHR5cGVvZiBhYmlsaXR5UGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIEFiaWxpdHlGdWxsUGFyYW1zID0gdHlwZW9mIGFiaWxpdHlGdWxsUGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIEhlYWRNYXJrZXJQYXJhbXMgPSB0eXBlb2YgaGVhZE1hcmtlclBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBBZGRlZENvbWJhdGFudFBhcmFtcyA9IHR5cGVvZiBhZGRlZENvbWJhdGFudFBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBBZGRlZENvbWJhdGFudEZ1bGxQYXJhbXMgPSB0eXBlb2YgYWRkZWRDb21iYXRhbnRGdWxsUGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIFJlbW92aW5nQ29tYmF0YW50UGFyYW1zID0gdHlwZW9mIHJlbW92aW5nQ29tYmF0YW50UGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIEdhaW5zRWZmZWN0UGFyYW1zID0gdHlwZW9mIGdhaW5zRWZmZWN0UGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIFN0YXR1c0VmZmVjdEV4cGxpY2l0UGFyYW1zID0gdHlwZW9mIHN0YXR1c0VmZmVjdEV4cGxpY2l0UGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIExvc2VzRWZmZWN0UGFyYW1zID0gdHlwZW9mIGxvc2VzRWZmZWN0UGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIFRldGhlclBhcmFtcyA9IHR5cGVvZiB0ZXRoZXJQYXJhbXNbbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgV2FzRGVmZWF0ZWRQYXJhbXMgPSB0eXBlb2Ygd2FzRGVmZWF0ZWRQYXJhbXNbbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgRWNob1BhcmFtcyA9IHR5cGVvZiBlY2hvUGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIERpYWxvZ1BhcmFtcyA9IHR5cGVvZiBkaWFsb2dQYXJhbXNbbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgTWVzc2FnZVBhcmFtcyA9IHR5cGVvZiBtZXNzYWdlUGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIEdhbWVMb2dQYXJhbXMgPSB0eXBlb2YgZ2FtZUxvZ1BhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBHYW1lTmFtZUxvZ1BhcmFtcyA9IHR5cGVvZiBnYW1lTmFtZUxvZ1BhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBTdGF0Q2hhbmdlUGFyYW1zID0gdHlwZW9mIHN0YXRDaGFuZ2VQYXJhbXNbbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgQ2hhbmdlWm9uZVBhcmFtcyA9IHR5cGVvZiBjaGFuZ2Vab25lUGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIE5ldHdvcms2ZFBhcmFtcyA9IHR5cGVvZiBuZXR3b3JrNmRQYXJhbXNbbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgTmFtZVRvZ2dsZVBhcmFtcyA9IHR5cGVvZiBuYW1lVG9nZ2xlUGFyYW1zW251bWJlcl07XHJcblxyXG4vLyBJZiBOZXRSZWdleGVzLnNldEZsYWdUcmFuc2xhdGlvbnNOZWVkZWQgaXMgc2V0IHRvIHRydWUsIHRoZW4gYW55XHJcbi8vIHJlZ2V4IGNyZWF0ZWQgdGhhdCByZXF1aXJlcyBhIHRyYW5zbGF0aW9uIHdpbGwgYmVnaW4gd2l0aCB0aGlzIHN0cmluZ1xyXG4vLyBhbmQgbWF0Y2ggdGhlIG1hZ2ljU3RyaW5nUmVnZXguICBUaGlzIGlzIG1heWJlIGEgYml0IGdvb2Z5LCBidXQgaXNcclxuLy8gYSBwcmV0dHkgc3RyYWlnaHRmb3J3YXJkIHdheSB0byBtYXJrIHJlZ2V4ZXMgZm9yIHRyYW5zbGF0aW9ucy5cclxuLy8gSWYgaXNzdWUgIzEzMDYgaXMgZXZlciByZXNvbHZlZCwgd2UgY2FuIHJlbW92ZSB0aGlzLlxyXG5jb25zdCBtYWdpY1RyYW5zbGF0aW9uU3RyaW5nID0gYF5eYDtcclxuY29uc3QgbWFnaWNTdHJpbmdSZWdleCA9IC9eXFxeXFxeLztcclxuY29uc3Qga2V5c1RoYXRSZXF1aXJlVHJhbnNsYXRpb24gPSBbXHJcbiAgJ2FiaWxpdHknLFxyXG4gICduYW1lJyxcclxuICAnc291cmNlJyxcclxuICAndGFyZ2V0JyxcclxuICAnbGluZScsXHJcbl07XHJcblxyXG5jb25zdCBwYXJzZUhlbHBlciA9IChcclxuICAgIHBhcmFtczogeyB0aW1lc3RhbXA/OiBzdHJpbmc7IGNhcHR1cmU/OiBib29sZWFuIH0gfCB1bmRlZmluZWQsXHJcbiAgICBmdW5jTmFtZTogc3RyaW5nLFxyXG4gICAgZmllbGRzOiB7IFtzOiBzdHJpbmddOiBGaWVsZHMgfSxcclxuKTogUmVnRXhwID0+IHtcclxuICBwYXJhbXMgPSBwYXJhbXMgPz8ge307XHJcbiAgY29uc3QgdmFsaWRGaWVsZHM6IHN0cmluZ1tdID0gW107XHJcbiAgZm9yIChjb25zdCB2YWx1ZSBvZiBPYmplY3QudmFsdWVzKGZpZWxkcykpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKVxyXG4gICAgICBjb250aW51ZTtcclxuICAgIHZhbGlkRmllbGRzLnB1c2godmFsdWUuZmllbGQpO1xyXG4gIH1cclxuICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKHBhcmFtcywgZnVuY05hbWUsIFsnY2FwdHVyZScsIC4uLnZhbGlkRmllbGRzXSk7XHJcblxyXG4gIC8vIEZpbmQgdGhlIGxhc3Qga2V5IHdlIGNhcmUgYWJvdXQsIHNvIHdlIGNhbiBzaG9ydGVuIHRoZSByZWdleCBpZiBuZWVkZWQuXHJcbiAgY29uc3QgY2FwdHVyZSA9IFJlZ2V4ZXMudHJ1ZUlmVW5kZWZpbmVkKHBhcmFtcy5jYXB0dXJlKTtcclxuICBjb25zdCBmaWVsZEtleXMgPSBPYmplY3Qua2V5cyhmaWVsZHMpO1xyXG4gIGxldCBtYXhLZXk7XHJcbiAgaWYgKGNhcHR1cmUpIHtcclxuICAgIG1heEtleSA9IGZpZWxkS2V5c1tmaWVsZEtleXMubGVuZ3RoIC0gMV07XHJcbiAgfSBlbHNlIHtcclxuICAgIG1heEtleSA9IDA7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBmaWVsZEtleXMpIHtcclxuICAgICAgY29uc3QgdmFsdWUgPSBmaWVsZHNba2V5XSA/PyB7fTtcclxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGZpZWxkc1trZXldPy5maWVsZDtcclxuICAgICAgaWYgKGZpZWxkTmFtZSAmJiBmaWVsZE5hbWUgaW4gcGFyYW1zKVxyXG4gICAgICAgIG1heEtleSA9IGtleTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEZvciB0ZXN0aW5nLCBpdCdzIHVzZWZ1bCB0byBrbm93IGlmIHRoaXMgaXMgYSByZWdleCB0aGF0IHJlcXVpcmVzXHJcbiAgLy8gdHJhbnNsYXRpb24uICBXZSB0ZXN0IHRoaXMgYnkgc2VlaW5nIGlmIHRoZXJlIGFyZSBhbnkgc3BlY2lmaWVkXHJcbiAgLy8gZmllbGRzLCBhbmQgaWYgc28sIGluc2VydGluZyBhIG1hZ2ljIHN0cmluZyB0aGF0IHdlIGNhbiBkZXRlY3QuXHJcbiAgLy8gVGhpcyBsZXRzIHVzIGRpZmZlcmVudGlhdGUgYmV0d2VlbiBcInJlZ2V4IHRoYXQgc2hvdWxkIGJlIHRyYW5zbGF0ZWRcIlxyXG4gIC8vIGUuZy4gYSByZWdleCB3aXRoIGB0YXJnZXRgIHNwZWNpZmllZCwgYW5kIFwicmVnZXggdGhhdCBzaG91bGRuJ3RcIlxyXG4gIC8vIGUuZy4gYSBnYWlucyBlZmZlY3Qgd2l0aCBqdXN0IGVmZmVjdElkIHNwZWNpZmllZC5cclxuICBjb25zdCB0cmFuc1BhcmFtcyA9IE9iamVjdC5rZXlzKHBhcmFtcykuZmlsdGVyKChrKSA9PiBrZXlzVGhhdFJlcXVpcmVUcmFuc2xhdGlvbi5pbmNsdWRlcyhrKSk7XHJcbiAgY29uc3QgbmVlZHNUcmFuc2xhdGlvbnMgPSBOZXRSZWdleGVzLmZsYWdUcmFuc2xhdGlvbnNOZWVkZWQgJiYgdHJhbnNQYXJhbXMubGVuZ3RoID4gMDtcclxuXHJcbiAgLy8gQnVpbGQgdGhlIHJlZ2V4IGZyb20gdGhlIGZpZWxkcy5cclxuICBsZXQgc3RyID0gbmVlZHNUcmFuc2xhdGlvbnMgPyBtYWdpY1RyYW5zbGF0aW9uU3RyaW5nIDogJ14nO1xyXG4gIGxldCBsYXN0S2V5ID0gLTE7XHJcbiAgZm9yIChjb25zdCBfa2V5IGluIGZpZWxkcykge1xyXG4gICAgY29uc3Qga2V5ID0gcGFyc2VJbnQoX2tleSk7XHJcbiAgICAvLyBGaWxsIGluIGJsYW5rcy5cclxuICAgIGNvbnN0IG1pc3NpbmdGaWVsZHMgPSBrZXkgLSBsYXN0S2V5IC0gMTtcclxuICAgIGlmIChtaXNzaW5nRmllbGRzID09PSAxKVxyXG4gICAgICBzdHIgKz0gJ1xcXFx5e05ldEZpZWxkfSc7XHJcbiAgICBlbHNlIGlmIChtaXNzaW5nRmllbGRzID4gMSlcclxuICAgICAgc3RyICs9IGBcXFxceXtOZXRGaWVsZH17JHttaXNzaW5nRmllbGRzfX1gO1xyXG4gICAgbGFzdEtleSA9IGtleTtcclxuXHJcbiAgICBjb25zdCB2YWx1ZSA9IGZpZWxkc1trZXldO1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtmdW5jTmFtZX06IGludmFsaWQgdmFsdWU6ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xyXG5cclxuICAgIGNvbnN0IGZpZWxkTmFtZSA9IGZpZWxkc1trZXldPy5maWVsZDtcclxuICAgIGNvbnN0IGZpZWxkVmFsdWUgPSBmaWVsZHNba2V5XT8udmFsdWU/LnRvU3RyaW5nKCkgPz8gbWF0Y2hEZWZhdWx0O1xyXG5cclxuICAgIGlmIChmaWVsZE5hbWUpIHtcclxuICAgICAgc3RyICs9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKFxyXG4gICAgICAgICAgLy8gbW9yZSBhY2N1cmF0ZSB0eXBlIGluc3RlYWQgb2YgYGFzYCBjYXN0XHJcbiAgICAgICAgICAvLyBtYXliZSB0aGlzIGZ1bmN0aW9uIG5lZWRzIGEgcmVmYWN0b3JpbmdcclxuICAgICAgICAgIGNhcHR1cmUsIGZpZWxkTmFtZSwgKHBhcmFtcyBhcyB7IFtzOiBzdHJpbmddOiBzdHJpbmcgfSlbZmllbGROYW1lXSwgZmllbGRWYWx1ZSkgK1xyXG4gICAgICAgIHNlcGFyYXRvcjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN0ciArPSBmaWVsZFZhbHVlICsgc2VwYXJhdG9yO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBTdG9wIGlmIHdlJ3JlIG5vdCBjYXB0dXJpbmcgYW5kIGRvbid0IGNhcmUgYWJvdXQgZnV0dXJlIGZpZWxkcy5cclxuICAgIGlmIChrZXkgPj0gKG1heEtleSA/PyAwIGFzIG51bWJlcikpXHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxuICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV0UmVnZXhlcyB7XHJcbiAgc3RhdGljIGZsYWdUcmFuc2xhdGlvbnNOZWVkZWQgPSBmYWxzZTtcclxuICBzdGF0aWMgc2V0RmxhZ1RyYW5zbGF0aW9uc05lZWRlZCh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgTmV0UmVnZXhlcy5mbGFnVHJhbnNsYXRpb25zTmVlZGVkID0gdmFsdWU7XHJcbiAgfVxyXG4gIHN0YXRpYyBkb2VzTmV0UmVnZXhOZWVkVHJhbnNsYXRpb24ocmVnZXg6IFJlZ0V4cCB8IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgLy8gTmVlZCB0byBgc2V0RmxhZ1RyYW5zbGF0aW9uc05lZWRlZGAgYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cclxuICAgIGNvbnNvbGUuYXNzZXJ0KE5ldFJlZ2V4ZXMuZmxhZ1RyYW5zbGF0aW9uc05lZWRlZCk7XHJcbiAgICBjb25zdCBzdHIgPSB0eXBlb2YgcmVnZXggPT09ICdzdHJpbmcnID8gcmVnZXggOiByZWdleC5zb3VyY2U7XHJcbiAgICByZXR1cm4gISFtYWdpY1N0cmluZ1JlZ2V4LmV4ZWMoc3RyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxNC1uZXR3b3Jrc3RhcnRzY2FzdGluZ1xyXG4gICAqL1xyXG4gIHN0YXRpYyBzdGFydHNVc2luZyhwYXJhbXM/OiBQYXJhbXM8U3RhcnRzVXNpbmdQYXJhbXM+KTogTmV0UmVnZXg8U3RhcnRzVXNpbmdQYXJhbXM+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdzdGFydHNVc2luZycsIHtcclxuICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzIwJyB9LFxyXG4gICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxyXG4gICAgICAyOiB7IGZpZWxkOiAnc291cmNlSWQnIH0sXHJcbiAgICAgIDM6IHsgZmllbGQ6ICdzb3VyY2UnIH0sXHJcbiAgICAgIDQ6IHsgZmllbGQ6ICdpZCcgfSxcclxuICAgICAgNTogeyBmaWVsZDogJ2FiaWxpdHknIH0sXHJcbiAgICAgIDY6IHsgZmllbGQ6ICd0YXJnZXRJZCcgfSxcclxuICAgICAgNzogeyBmaWVsZDogJ3RhcmdldCcgfSxcclxuICAgICAgODogeyBmaWVsZDogJ2Nhc3RUaW1lJyB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzE1LW5ldHdvcmthYmlsaXR5XHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzE2LW5ldHdvcmthb2VhYmlsaXR5XHJcbiAgICovXHJcbiAgc3RhdGljIGFiaWxpdHkocGFyYW1zPzogUGFyYW1zPEFiaWxpdHlQYXJhbXM+KTogTmV0UmVnZXg8QWJpbGl0eVBhcmFtcz4ge1xyXG4gICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ2FiaWxpdHknLCB7XHJcbiAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICcyWzEyXScgfSxcclxuICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcclxuICAgICAgMjogeyBmaWVsZDogJ3NvdXJjZUlkJyB9LFxyXG4gICAgICAzOiB7IGZpZWxkOiAnc291cmNlJyB9LFxyXG4gICAgICA0OiB7IGZpZWxkOiAnaWQnIH0sXHJcbiAgICAgIDU6IHsgZmllbGQ6ICdhYmlsaXR5JyB9LFxyXG4gICAgICA2OiB7IGZpZWxkOiAndGFyZ2V0SWQnIH0sXHJcbiAgICAgIDc6IHsgZmllbGQ6ICd0YXJnZXQnIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMTUtbmV0d29ya2FiaWxpdHlcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMTYtbmV0d29ya2FvZWFiaWxpdHlcclxuICAgKi9cclxuICBzdGF0aWMgYWJpbGl0eUZ1bGwocGFyYW1zPzogUGFyYW1zPEFiaWxpdHlGdWxsUGFyYW1zPik6IE5ldFJlZ2V4PEFiaWxpdHlGdWxsUGFyYW1zPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnYWJpbGl0eUZ1bGwnLCB7XHJcbiAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICcyWzEyXScgfSxcclxuICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcclxuICAgICAgMjogeyBmaWVsZDogJ3NvdXJjZUlkJyB9LFxyXG4gICAgICAzOiB7IGZpZWxkOiAnc291cmNlJyB9LFxyXG4gICAgICA0OiB7IGZpZWxkOiAnaWQnIH0sXHJcbiAgICAgIDU6IHsgZmllbGQ6ICdhYmlsaXR5JyB9LFxyXG4gICAgICA2OiB7IGZpZWxkOiAndGFyZ2V0SWQnIH0sXHJcbiAgICAgIDc6IHsgZmllbGQ6ICd0YXJnZXQnIH0sXHJcbiAgICAgIDg6IHsgZmllbGQ6ICdmbGFncycgfSxcclxuICAgICAgOTogeyBmaWVsZDogJ2RhbWFnZScgfSxcclxuICAgICAgMjQ6IHsgZmllbGQ6ICd0YXJnZXRDdXJyZW50SHAnIH0sXHJcbiAgICAgIDI1OiB7IGZpZWxkOiAndGFyZ2V0TWF4SHAnIH0sXHJcbiAgICAgIDQwOiB7IGZpZWxkOiAneCcgfSxcclxuICAgICAgNDE6IHsgZmllbGQ6ICd5JyB9LFxyXG4gICAgICA0MjogeyBmaWVsZDogJ3onIH0sXHJcbiAgICAgIDQzOiB7IGZpZWxkOiAnaGVhZGluZycgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxYi1uZXR3b3JrdGFyZ2V0aWNvbi1oZWFkLW1hcmtlcnNcclxuICAgKi9cclxuICBzdGF0aWMgaGVhZE1hcmtlcihwYXJhbXM/OiBQYXJhbXM8SGVhZE1hcmtlclBhcmFtcz4pOiBOZXRSZWdleDxIZWFkTWFya2VyUGFyYW1zPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnaGVhZE1hcmtlcicsIHtcclxuICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzI3JyB9LFxyXG4gICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxyXG4gICAgICAyOiB7IGZpZWxkOiAndGFyZ2V0SWQnIH0sXHJcbiAgICAgIDM6IHsgZmllbGQ6ICd0YXJnZXQnIH0sXHJcbiAgICAgIDY6IHsgZmllbGQ6ICdpZCcgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMy1hZGRjb21iYXRhbnRcclxuICAgKi9cclxuICBzdGF0aWMgYWRkZWRDb21iYXRhbnQocGFyYW1zPzogUGFyYW1zPEFkZGVkQ29tYmF0YW50UGFyYW1zPik6IE5ldFJlZ2V4PEFkZGVkQ29tYmF0YW50UGFyYW1zPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnYWRkZWRDb21iYXRhbnQnLCB7XHJcbiAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICcwMycgfSxcclxuICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcclxuICAgICAgMjogeyBmaWVsZDogJ2lkJyB9LFxyXG4gICAgICAzOiB7IGZpZWxkOiAnbmFtZScgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMy1hZGRjb21iYXRhbnRcclxuICAgKi9cclxuICBzdGF0aWMgYWRkZWRDb21iYXRhbnRGdWxsKFxyXG4gICAgICBwYXJhbXM/OiBQYXJhbXM8QWRkZWRDb21iYXRhbnRGdWxsUGFyYW1zPixcclxuICApOiBOZXRSZWdleDxBZGRlZENvbWJhdGFudEZ1bGxQYXJhbXM+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdhZGRlZENvbWJhdGFudEZ1bGwnLCB7XHJcbiAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICcwMycgfSxcclxuICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcclxuICAgICAgMjogeyBmaWVsZDogJ2lkJyB9LFxyXG4gICAgICAzOiB7IGZpZWxkOiAnbmFtZScgfSxcclxuICAgICAgNDogeyBmaWVsZDogJ2pvYicgfSxcclxuICAgICAgNTogeyBmaWVsZDogJ2xldmVsJyB9LFxyXG4gICAgICA2OiB7IGZpZWxkOiAnb3duZXJJZCcgfSxcclxuICAgICAgODogeyBmaWVsZDogJ3dvcmxkJyB9LFxyXG4gICAgICA5OiB7IGZpZWxkOiAnbnBjTmFtZUlkJyB9LFxyXG4gICAgICAxMDogeyBmaWVsZDogJ25wY0Jhc2VJZCcgfSxcclxuICAgICAgMTE6IHsgZmllbGQ6ICdjdXJyZW50SHAnIH0sXHJcbiAgICAgIDEyOiB7IGZpZWxkOiAnaHAnIH0sXHJcbiAgICAgIDE3OiB7IGZpZWxkOiAneCcgfSxcclxuICAgICAgMTg6IHsgZmllbGQ6ICd5JyB9LFxyXG4gICAgICAxOTogeyBmaWVsZDogJ3onIH0sXHJcbiAgICAgIDIwOiB7IGZpZWxkOiAnaGVhZGluZycgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwNC1yZW1vdmVjb21iYXRhbnRcclxuICAgKi9cclxuICBzdGF0aWMgcmVtb3ZpbmdDb21iYXRhbnQoXHJcbiAgICAgIHBhcmFtcz86IFBhcmFtczxSZW1vdmluZ0NvbWJhdGFudFBhcmFtcz4sXHJcbiAgKTogTmV0UmVnZXg8UmVtb3ZpbmdDb21iYXRhbnRQYXJhbXM+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdyZW1vdmluZ0NvbWJhdGFudCcsIHtcclxuICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzA0JyB9LFxyXG4gICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxyXG4gICAgICAyOiB7IGZpZWxkOiAnaWQnIH0sXHJcbiAgICAgIDM6IHsgZmllbGQ6ICduYW1lJyB9LFxyXG4gICAgICAxMjogeyBmaWVsZDogJ2hwJyB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzFhLW5ldHdvcmtidWZmXHJcbiAgICovXHJcbiAgc3RhdGljIGdhaW5zRWZmZWN0KHBhcmFtcz86IFBhcmFtczxHYWluc0VmZmVjdFBhcmFtcz4pOiBOZXRSZWdleDxHYWluc0VmZmVjdFBhcmFtcz4ge1xyXG4gICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ2dhaW5zRWZmZWN0Jywge1xyXG4gICAgICAwOiB7IGZpZWxkOiAndHlwZScsIHZhbHVlOiAnMjYnIH0sXHJcbiAgICAgIDE6IHsgZmllbGQ6ICd0aW1lc3RhbXAnIH0sXHJcbiAgICAgIDI6IHsgZmllbGQ6ICdlZmZlY3RJZCcgfSxcclxuICAgICAgMzogeyBmaWVsZDogJ2VmZmVjdCcgfSxcclxuICAgICAgNDogeyBmaWVsZDogJ2R1cmF0aW9uJyB9LFxyXG4gICAgICA1OiB7IGZpZWxkOiAnc291cmNlSWQnIH0sXHJcbiAgICAgIDY6IHsgZmllbGQ6ICdzb3VyY2UnIH0sXHJcbiAgICAgIDc6IHsgZmllbGQ6ICd0YXJnZXRJZCcgfSxcclxuICAgICAgODogeyBmaWVsZDogJ3RhcmdldCcgfSxcclxuICAgICAgOTogeyBmaWVsZDogJ2NvdW50JyB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogUHJlZmVyIGdhaW5zRWZmZWN0IG92ZXIgdGhpcyBmdW5jdGlvbiB1bmxlc3MgeW91IHJlYWxseSBuZWVkIGV4dHJhIGRhdGEuXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzI2LW5ldHdvcmtzdGF0dXNlZmZlY3RzXHJcbiAgICovXHJcbiAgc3RhdGljIHN0YXR1c0VmZmVjdEV4cGxpY2l0KFxyXG4gICAgICBwYXJhbXM/OiBQYXJhbXM8U3RhdHVzRWZmZWN0RXhwbGljaXRQYXJhbXM+LFxyXG4gICk6IE5ldFJlZ2V4PFN0YXR1c0VmZmVjdEV4cGxpY2l0UGFyYW1zPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnc3RhdHVzRWZmZWN0RXhwbGljaXQnLCB7XHJcbiAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICczOCcgfSxcclxuICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcclxuICAgICAgMjogeyBmaWVsZDogJ3RhcmdldElkJyB9LFxyXG4gICAgICAzOiB7IGZpZWxkOiAndGFyZ2V0JyB9LFxyXG4gICAgICA1OiB7IGZpZWxkOiAnaHAnIH0sXHJcbiAgICAgIDY6IHsgZmllbGQ6ICdtYXhIcCcgfSxcclxuICAgICAgMTE6IHsgZmllbGQ6ICd4JyB9LFxyXG4gICAgICAxMjogeyBmaWVsZDogJ3knIH0sXHJcbiAgICAgIDEzOiB7IGZpZWxkOiAneicgfSxcclxuICAgICAgMTQ6IHsgZmllbGQ6ICdoZWFkaW5nJyB9LFxyXG4gICAgICAxNTogeyBmaWVsZDogJ2RhdGEwJyB9LFxyXG4gICAgICAxNjogeyBmaWVsZDogJ2RhdGExJyB9LFxyXG4gICAgICAxNzogeyBmaWVsZDogJ2RhdGEyJyB9LFxyXG4gICAgICAxODogeyBmaWVsZDogJ2RhdGEzJyB9LFxyXG4gICAgICAxOTogeyBmaWVsZDogJ2RhdGE0JyB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzFlLW5ldHdvcmtidWZmcmVtb3ZlXHJcbiAgICovXHJcbiAgc3RhdGljIGxvc2VzRWZmZWN0KHBhcmFtcz86IFBhcmFtczxMb3Nlc0VmZmVjdFBhcmFtcz4pOiBOZXRSZWdleDxMb3Nlc0VmZmVjdFBhcmFtcz4ge1xyXG4gICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ2xvc2VzRWZmZWN0Jywge1xyXG4gICAgICAwOiB7IGZpZWxkOiAndHlwZScsIHZhbHVlOiAnMzAnIH0sXHJcbiAgICAgIDE6IHsgZmllbGQ6ICd0aW1lc3RhbXAnIH0sXHJcbiAgICAgIDI6IHsgZmllbGQ6ICdlZmZlY3RJZCcgfSxcclxuICAgICAgMzogeyBmaWVsZDogJ2VmZmVjdCcgfSxcclxuICAgICAgNTogeyBmaWVsZDogJ3NvdXJjZUlkJyB9LFxyXG4gICAgICA2OiB7IGZpZWxkOiAnc291cmNlJyB9LFxyXG4gICAgICA3OiB7IGZpZWxkOiAndGFyZ2V0SWQnIH0sXHJcbiAgICAgIDg6IHsgZmllbGQ6ICd0YXJnZXQnIH0sXHJcbiAgICAgIDk6IHsgZmllbGQ6ICdjb3VudCcgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMyMy1uZXR3b3JrdGV0aGVyXHJcbiAgICovXHJcbiAgc3RhdGljIHRldGhlcihwYXJhbXM/OiBQYXJhbXM8VGV0aGVyUGFyYW1zPik6IE5ldFJlZ2V4PFRldGhlclBhcmFtcz4ge1xyXG4gICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ3RldGhlcicsIHtcclxuICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzM1JyB9LFxyXG4gICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxyXG4gICAgICAyOiB7IGZpZWxkOiAnc291cmNlSWQnIH0sXHJcbiAgICAgIDM6IHsgZmllbGQ6ICdzb3VyY2UnIH0sXHJcbiAgICAgIDQ6IHsgZmllbGQ6ICd0YXJnZXRJZCcgfSxcclxuICAgICAgNTogeyBmaWVsZDogJ3RhcmdldCcgfSxcclxuICAgICAgODogeyBmaWVsZDogJ2lkJyB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogJ3RhcmdldCcgd2FzIGRlZmVhdGVkIGJ5ICdzb3VyY2UnXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzE5LW5ldHdvcmtkZWF0aFxyXG4gICAqL1xyXG4gIHN0YXRpYyB3YXNEZWZlYXRlZChwYXJhbXM/OiBQYXJhbXM8V2FzRGVmZWF0ZWRQYXJhbXM+KTogTmV0UmVnZXg8V2FzRGVmZWF0ZWRQYXJhbXM+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICd3YXNEZWZlYXRlZCcsIHtcclxuICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzI1JyB9LFxyXG4gICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxyXG4gICAgICAyOiB7IGZpZWxkOiAndGFyZ2V0SWQnIH0sXHJcbiAgICAgIDM6IHsgZmllbGQ6ICd0YXJnZXQnIH0sXHJcbiAgICAgIDQ6IHsgZmllbGQ6ICdzb3VyY2VJZCcgfSxcclxuICAgICAgNTogeyBmaWVsZDogJ3NvdXJjZScgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMC1sb2dsaW5lXHJcbiAgICovXHJcbiAgc3RhdGljIGVjaG8ocGFyYW1zPzogUGFyYW1zPEVjaG9QYXJhbXM+KTogTmV0UmVnZXg8RWNob1BhcmFtcz4ge1xyXG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBwYXJhbXMgPSB7fTtcclxuICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMocGFyYW1zLCAnZWNobycsIFsndHlwZScsICd0aW1lc3RhbXAnLCAnY29kZScsICduYW1lJywgJ2xpbmUnLCAnY2FwdHVyZSddKTtcclxuICAgIHBhcmFtcy5jb2RlID0gJzAwMzgnO1xyXG4gICAgcmV0dXJuIE5ldFJlZ2V4ZXMuZ2FtZUxvZyhwYXJhbXMpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMC1sb2dsaW5lXHJcbiAgICovXHJcbiAgc3RhdGljIGRpYWxvZyhwYXJhbXM/OiBQYXJhbXM8RGlhbG9nUGFyYW1zPik6IE5ldFJlZ2V4PERpYWxvZ1BhcmFtcz4ge1xyXG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBwYXJhbXMgPSB7fTtcclxuICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMocGFyYW1zLCAnZGlhbG9nJywgWyd0eXBlJywgJ3RpbWVzdGFtcCcsICdjb2RlJywgJ25hbWUnLCAnbGluZScsICdjYXB0dXJlJ10pO1xyXG4gICAgcGFyYW1zLmNvZGUgPSAnMDA0NCc7XHJcbiAgICByZXR1cm4gTmV0UmVnZXhlcy5nYW1lTG9nKHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzAwLWxvZ2xpbmVcclxuICAgKi9cclxuICBzdGF0aWMgbWVzc2FnZShwYXJhbXM/OiBQYXJhbXM8TWVzc2FnZVBhcmFtcz4pOiBOZXRSZWdleDxNZXNzYWdlUGFyYW1zPiB7XHJcbiAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgIHBhcmFtcyA9IHt9O1xyXG4gICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhwYXJhbXMsICdtZXNzYWdlJywgWyd0eXBlJywgJ3RpbWVzdGFtcCcsICdjb2RlJywgJ25hbWUnLCAnbGluZScsICdjYXB0dXJlJ10pO1xyXG4gICAgcGFyYW1zLmNvZGUgPSAnMDgzOSc7XHJcbiAgICByZXR1cm4gTmV0UmVnZXhlcy5nYW1lTG9nKHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogZmllbGRzOiBjb2RlLCBuYW1lLCBsaW5lLCBjYXB0dXJlXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzAwLWxvZ2xpbmVcclxuICAgKi9cclxuICBzdGF0aWMgZ2FtZUxvZyhwYXJhbXM/OiBQYXJhbXM8R2FtZUxvZ1BhcmFtcz4pOiBOZXRSZWdleDxHYW1lTG9nUGFyYW1zPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnZ2FtZUxvZycsIHtcclxuICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzAwJyB9LFxyXG4gICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxyXG4gICAgICAyOiB7IGZpZWxkOiAnY29kZScgfSxcclxuICAgICAgMzogeyBmaWVsZDogJ25hbWUnIH0sXHJcbiAgICAgIDQ6IHsgZmllbGQ6ICdsaW5lJyB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzAwLWxvZ2xpbmVcclxuICAgKi9cclxuICBzdGF0aWMgZ2FtZU5hbWVMb2cocGFyYW1zPzogUGFyYW1zPEdhbWVOYW1lTG9nUGFyYW1zPik6IE5ldFJlZ2V4PEdhbWVOYW1lTG9nUGFyYW1zPiB7XHJcbiAgICAvLyBmb3IgY29tcGF0IHdpdGggUmVnZXhlcy5cclxuICAgIHJldHVybiBOZXRSZWdleGVzLmdhbWVMb2cocGFyYW1zKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMGMtcGxheWVyc3RhdHNcclxuICAgKi9cclxuICBzdGF0aWMgc3RhdENoYW5nZShwYXJhbXM/OiBQYXJhbXM8U3RhdENoYW5nZVBhcmFtcz4pOiBOZXRSZWdleDxTdGF0Q2hhbmdlUGFyYW1zPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnc3RhdENoYW5nZScsIHtcclxuICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzEyJyB9LFxyXG4gICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxyXG4gICAgICAyOiB7IGZpZWxkOiAnam9iJyB9LFxyXG4gICAgICAzOiB7IGZpZWxkOiAnc3RyZW5ndGgnIH0sXHJcbiAgICAgIDQ6IHsgZmllbGQ6ICdkZXh0ZXJpdHknIH0sXHJcbiAgICAgIDU6IHsgZmllbGQ6ICd2aXRhbGl0eScgfSxcclxuICAgICAgNjogeyBmaWVsZDogJ2ludGVsbGlnZW5jZScgfSxcclxuICAgICAgNzogeyBmaWVsZDogJ21pbmQnIH0sXHJcbiAgICAgIDg6IHsgZmllbGQ6ICdwaWV0eScgfSxcclxuICAgICAgOTogeyBmaWVsZDogJ2F0dGFja1Bvd2VyJyB9LFxyXG4gICAgICAxMDogeyBmaWVsZDogJ2RpcmVjdEhpdCcgfSxcclxuICAgICAgMTE6IHsgZmllbGQ6ICdjcml0aWNhbEhpdCcgfSxcclxuICAgICAgMTI6IHsgZmllbGQ6ICdhdHRhY2tNYWdpY1BvdGVuY3knIH0sXHJcbiAgICAgIDEzOiB7IGZpZWxkOiAnaGVhbE1hZ2ljUG90ZW5jeScgfSxcclxuICAgICAgMTQ6IHsgZmllbGQ6ICdkZXRlcm1pbmF0aW9uJyB9LFxyXG4gICAgICAxNTogeyBmaWVsZDogJ3NraWxsU3BlZWQnIH0sXHJcbiAgICAgIDE2OiB7IGZpZWxkOiAnc3BlbGxTcGVlZCcgfSxcclxuICAgICAgMTg6IHsgZmllbGQ6ICd0ZW5hY2l0eScgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMS1jaGFuZ2V6b25lXHJcbiAgICovXHJcbiAgc3RhdGljIGNoYW5nZVpvbmUocGFyYW1zPzogUGFyYW1zPENoYW5nZVpvbmVQYXJhbXM+KTogTmV0UmVnZXg8Q2hhbmdlWm9uZVBhcmFtcz4ge1xyXG4gICAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgJ2NoYW5nZVpvbmUnLCB7XHJcbiAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICcwMScgfSxcclxuICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcclxuICAgICAgMjogeyBmaWVsZDogJ2lkJyB9LFxyXG4gICAgICAzOiB7IGZpZWxkOiAnbmFtZScgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMyMS1uZXR3b3JrNmQtYWN0b3ItY29udHJvbC1saW5lc1xyXG4gICAqL1xyXG4gIHN0YXRpYyBuZXR3b3JrNmQocGFyYW1zPzogUGFyYW1zPE5ldHdvcms2ZFBhcmFtcz4pOiBOZXRSZWdleDxOZXR3b3JrNmRQYXJhbXM+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICduZXR3b3JrNmQnLCB7XHJcbiAgICAgIDA6IHsgZmllbGQ6ICd0eXBlJywgdmFsdWU6ICczMycgfSxcclxuICAgICAgMTogeyBmaWVsZDogJ3RpbWVzdGFtcCcgfSxcclxuICAgICAgMjogeyBmaWVsZDogJ2luc3RhbmNlJyB9LFxyXG4gICAgICAzOiB7IGZpZWxkOiAnY29tbWFuZCcgfSxcclxuICAgICAgNDogeyBmaWVsZDogJ2RhdGEwJyB9LFxyXG4gICAgICA1OiB7IGZpZWxkOiAnZGF0YTEnIH0sXHJcbiAgICAgIDY6IHsgZmllbGQ6ICdkYXRhMicgfSxcclxuICAgICAgNzogeyBmaWVsZDogJ2RhdGEzJyB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMjItbmV0d29ya25hbWV0b2dnbGVcclxuICAgKi9cclxuICBzdGF0aWMgbmFtZVRvZ2dsZShwYXJhbXM/OiBQYXJhbXM8TmFtZVRvZ2dsZVBhcmFtcz4pOiBOZXRSZWdleDxOYW1lVG9nZ2xlUGFyYW1zPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCAnbmFtZVRvZ2dsZScsIHtcclxuICAgICAgMDogeyBmaWVsZDogJ3R5cGUnLCB2YWx1ZTogJzM0JyB9LFxyXG4gICAgICAxOiB7IGZpZWxkOiAndGltZXN0YW1wJyB9LFxyXG4gICAgICAyOiB7IGZpZWxkOiAnaWQnIH0sXHJcbiAgICAgIDM6IHsgZmllbGQ6ICduYW1lJyB9LFxyXG4gICAgICA2OiB7IGZpZWxkOiAndG9nZ2xlJyB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsIi8vIEhlbHBlciBFcnJvciBmb3IgVHlwZVNjcmlwdCBzaXR1YXRpb25zIHdoZXJlIHRoZSBwcm9ncmFtbWVyIHRoaW5rcyB0aGV5XHJcbi8vIGtub3cgYmV0dGVyIHRoYW4gVHlwZVNjcmlwdCB0aGF0IHNvbWUgc2l0dWF0aW9uIHdpbGwgbmV2ZXIgb2NjdXIuXHJcblxyXG4vLyBUaGUgaW50ZW50aW9uIGhlcmUgaXMgdGhhdCB0aGUgcHJvZ3JhbW1lciBkb2VzIG5vdCBleHBlY3QgYSBwYXJ0aWN1bGFyXHJcbi8vIGJpdCBvZiBjb2RlIHRvIGhhcHBlbiwgYW5kIHNvIGhhcyBub3Qgd3JpdHRlbiBjYXJlZnVsIGVycm9yIGhhbmRsaW5nLlxyXG4vLyBJZiBpdCBkb2VzIG9jY3VyLCBhdCBsZWFzdCB0aGVyZSB3aWxsIGJlIGFuIGVycm9yIGFuZCB3ZSBjYW4gZmlndXJlIG91dCB3aHkuXHJcbi8vIFRoaXMgaXMgcHJlZmVyYWJsZSB0byBjYXN0aW5nIG9yIGRpc2FibGluZyBUeXBlU2NyaXB0IGFsdG9nZXRoZXIgaW4gb3JkZXIgdG9cclxuLy8gYXZvaWQgc3ludGF4IGVycm9ycy5cclxuXHJcbi8vIE9uZSBjb21tb24gZXhhbXBsZSBpcyBhIHJlZ2V4LCB3aGVyZSBpZiB0aGUgcmVnZXggbWF0Y2hlcyB0aGVuIGFsbCBvZiB0aGVcclxuLy8gKG5vbi1vcHRpb25hbCkgcmVnZXggZ3JvdXBzIHdpbGwgYWxzbyBiZSB2YWxpZCwgYnV0IFR5cGVTY3JpcHQgZG9lc24ndCBrbm93LlxyXG5leHBvcnQgY2xhc3MgVW5yZWFjaGFibGVDb2RlIGV4dGVuZHMgRXJyb3Ige1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoJ1RoaXMgY29kZSBzaG91bGRuXFwndCBiZSByZWFjaGVkJyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEZ1bGxMb2NhbGVUZXh0IH0gZnJvbSAnLi4vdHlwZXMvdHJpZ2dlcic7XHJcblxyXG4vLyBPdXRwdXQgc3RyaW5ncyBmb3Igbm93IHJlcXVpcmUgYSBmaWVsZCBmb3IgZXZlcnkgbGFuZ3VhZ2UsIHNvIHRoaXMgaXMgYVxyXG4vLyBoZWxwZXIgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgb25lIGZvciBsaXRlcmFsIG51bWJlcnMuXHJcbmNvbnN0IG51bWJlclRvT3V0cHV0U3RyaW5nID0gZnVuY3Rpb24objogbnVtYmVyKTogRnVsbExvY2FsZVRleHQge1xyXG4gIGNvbnN0IHN0ciA9IG4udG9TdHJpbmcoKTtcclxuICByZXR1cm4ge1xyXG4gICAgZW46IHN0cixcclxuICAgIGRlOiBzdHIsXHJcbiAgICBmcjogc3RyLFxyXG4gICAgamE6IHN0cixcclxuICAgIGNuOiBzdHIsXHJcbiAgICBrbzogc3RyLFxyXG4gIH07XHJcbn07XHJcblxyXG4vLyBHZW5lcmFsIGd1aWRlbGluZXM6XHJcbi8vICogcHJvcGVydHkgbmFtZXMgc2hvdWxkIGNsb3NlbHkgbWF0Y2ggRW5nbGlzaCB0ZXh0XHJcbi8vICogdXNlIE9uUGxheWVyIHN1ZmZpeCBmb3IgdGhpbmdzIHdpdGggYCR7cGxheWVyfWBcclxuLy8gKiB1c2UgT25UYXJnZXQgc3VmZml4IGZvciB0aGluZ3Mgd2l0aCBgJHtuYW1lfWBcclxuLy8gKiBhbnkgb3RoZXIgcGFyYW1ldGVycyAob2Ygd2hpY2ggdGhlcmUgYXJlIG5vbmUsIGN1cnJlbnRseSkgc2hvdWxkIHVzZSBjb25zaXN0ZW50IHN1ZmZpeGVzLlxyXG4vLyAqIHRoZSB2YWx1ZSBvZiBlYWNoIHByb3BlcnR5IHNob3VsZCBiZSBhIHNpbmdsZSBvYmplY3Qgd2l0aCBsb2NhbGl6ZWQga2V5c1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgYW9lOiB7XHJcbiAgICBlbjogJ2FvZScsXHJcbiAgICBkZTogJ0FvRScsXHJcbiAgICBmcjogJ0FvRScsXHJcbiAgICBqYTogJ0FvRScsXHJcbiAgICBjbjogJ0FvRScsXHJcbiAgICBrbzogJ+yghOyytCDqs7XqsqknLFxyXG4gIH0sXHJcbiAgYmlnQW9lOiB7XHJcbiAgICBlbjogJ2JpZyBhb2UhJyxcclxuICAgIGRlOiAnR3Jvw59lIEFvRSEnLFxyXG4gICAgZnI6ICdHcm9zc2UgQW9FICEnLFxyXG4gICAgamE6ICflpKfjg4Djg6Hjg7zjgrhBb0UnLFxyXG4gICAgY246ICflpKdBb0XkvKTlrrPvvIEnLFxyXG4gICAga286ICfqsJXtlZwg7KCE7LK0IOqzteqyqSEnLFxyXG4gIH0sXHJcbiAgdGFua0J1c3Rlcjoge1xyXG4gICAgZW46ICdUYW5rIEJ1c3RlcicsXHJcbiAgICBkZTogJ1RhbmsgYnVzdGVyJyxcclxuICAgIGZyOiAnVGFuayBidXN0ZXInLFxyXG4gICAgamE6ICfjgr/jg7Pjgq/jg5Djgrnjgr/jg7wnLFxyXG4gICAgY246ICflnablhYvmrbvliJEnLFxyXG4gICAga286ICftg7HrsoQnLFxyXG4gIH0sXHJcbiAgbWluaUJ1c3Rlcjoge1xyXG4gICAgZW46ICdNaW5pIEJ1c3RlcicsXHJcbiAgICBkZTogJ0tsZWluZXIgVGFua2J1c3RlcicsXHJcbiAgICBmcjogJ01pbmkgQnVzdGVyJyxcclxuICAgIGphOiAn44Of44OL44OQ44K544K/44O8JyxcclxuICAgIGNuOiAn5bCP5q275YiRJyxcclxuICAgIGtvOiAn7JW97ZWcIO2DseuyhCcsXHJcbiAgfSxcclxuICB0YW5rQnVzdGVyT25QbGF5ZXI6IHtcclxuICAgIGVuOiAnVGFuayBCdXN0ZXIgb24gJHtwbGF5ZXJ9JyxcclxuICAgIGRlOiAnVGFuayBidXN0ZXIgYXVmICR7cGxheWVyfScsXHJcbiAgICBmcjogJ1RhbmsgYnVzdGVyIHN1ciAke3BsYXllcn0nLFxyXG4gICAgamE6ICcke3BsYXllcn3jgavjgr/jg7Pjgq/jg5Djgrnjgr/jg7wnLFxyXG4gICAgY246ICfmrbvliJEg54K5ICR7cGxheWVyfScsXHJcbiAgICBrbzogJ1wiJHtwbGF5ZXJ9XCIg7YOx67KEJyxcclxuICB9LFxyXG4gIHRhbmtCdXN0ZXJPbllvdToge1xyXG4gICAgZW46ICdUYW5rIEJ1c3RlciBvbiBZT1UnLFxyXG4gICAgZGU6ICdUYW5rIGJ1c3RlciBhdWYgRElSJyxcclxuICAgIGZyOiAnVGFuayBidXN0ZXIgc3VyIFZPVVMnLFxyXG4gICAgamE6ICfoh6rliIbjgavjgr/jg7Pjgq/jg5Djgrnjgr/jg7wnLFxyXG4gICAgY246ICfmrbvliJHngrnlkI0nLFxyXG4gICAga286ICftg7HrsoQg64yA7IOB7J6QJyxcclxuICB9LFxyXG4gIC8vIHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIHRhbmtidXN0ZXJzIGdvaW5nIG91dFxyXG4gIHRhbmtCdXN0ZXJzOiB7XHJcbiAgICBlbjogJ1RhbmsgQnVzdGVycycsXHJcbiAgICBkZTogJ1RhbmsgYnVzdGVyJyxcclxuICAgIGZyOiAnVGFuayBidXN0ZXJzJyxcclxuICAgIGphOiAn44K/44Oz44Kv44OQ44K544K/44O8JyxcclxuICAgIGNuOiAn5Z2m5YWL5q275YiRJyxcclxuICAgIGtvOiAn7YOx67KEJyxcclxuICB9LFxyXG4gIHRhbmtDbGVhdmU6IHtcclxuICAgIGVuOiAnVGFuayBjbGVhdmUnLFxyXG4gICAgZGU6ICdUYW5rIENsZWF2ZScsXHJcbiAgICBmcjogJ1RhbmsgY2xlYXZlJyxcclxuICAgIGphOiAn5YmN5pa556+E5Zuy5pS75pKDJyxcclxuICAgIGNuOiAn6aG65YqIJyxcclxuICAgIGtvOiAn6rSR7JetIO2DseuyhCcsXHJcbiAgfSxcclxuICBhdm9pZFRhbmtDbGVhdmU6IHtcclxuICAgIGVuOiAnQXZvaWQgdGFuayBjbGVhdmUnLFxyXG4gICAgZGU6ICdUYW5rIENsZWF2ZSBhdXN3ZWljaGVuJyxcclxuICAgIGZyOiAnw4l2aXRleiBsZSB0YW5rIGNsZWF2ZScsXHJcbiAgICBqYTogJ+WJjeaWueevhOWbsuaUu+aSg+OCkumBv+OBkeOCiycsXHJcbiAgICBjbjogJ+i/nOemu+mhuuWKiCcsXHJcbiAgICBrbzogJ+q0keyXrSDtg7HrsoQg7ZS87ZWY6riwJyxcclxuICB9LFxyXG4gIHRhbmtDbGVhdmVPbllvdToge1xyXG4gICAgZW46ICdUYW5rIGNsZWF2ZSBvbiBZT1UnLFxyXG4gICAgZGU6ICdUYW5rIENsZWF2ZSBhdWQgRElSJyxcclxuICAgIGZyOiAnVGFuayBjbGVhdmUgc3VyIFZPVVMnLFxyXG4gICAgamE6ICfoh6rliIbjgavliY3mlrnnr4Tlm7LmlLvmkoMnLFxyXG4gICAgY246ICfpobrliojngrnlkI0nLFxyXG4gICAga286ICfrgpjsl5Dqsowg6rSR7JetIO2DseuyhCcsXHJcbiAgfSxcclxuICB0YW5rU3dhcDoge1xyXG4gICAgZW46ICdUYW5rIFN3YXAhJyxcclxuICAgIGRlOiAnVGFua3dlY2hzZWwhJyxcclxuICAgIGZyOiAnVGFuayBzd2FwICEnLFxyXG4gICAgamE6ICfjgr/jg7Pjgq/jgrnjgqTjg4Pjg4EhJyxcclxuICAgIGNuOiAn5o2iVO+8gScsXHJcbiAgICBrbzogJ+2DsSDqtZDrjIAnLFxyXG4gIH0sXHJcbiAgc3ByZWFkOiB7XHJcbiAgICBlbjogJ1NwcmVhZCcsXHJcbiAgICBkZTogJ1ZlcnRlaWxlbicsXHJcbiAgICBmcjogJ0Rpc3BlcnNlei12b3VzJyxcclxuICAgIGphOiAn5pWj6ZaLJyxcclxuICAgIGNuOiAn5YiG5pWjJyxcclxuICAgIGtvOiAn7IKw6rCcJyxcclxuICB9LFxyXG4gIHN0YWNrTWFya2VyOiB7XHJcbiAgICAvLyBmb3Igc3RhY2sgbWFya2VyIHNpdHVhdGlvbnNcclxuICAgIGVuOiAnU3RhY2snLFxyXG4gICAgZGU6ICdTYW1tZWxuJyxcclxuICAgIGZyOiAnUGFja2V6LXZvdXMnLFxyXG4gICAgamE6ICfpoK3libLjgoonLFxyXG4gICAgY246ICfliIbmkYonLFxyXG4gICAga286ICfsiZDslrTrjoAnLFxyXG4gIH0sXHJcbiAgZ2V0VG9nZXRoZXI6IHtcclxuICAgIC8vIGZvciBnZXR0aW5nIHRvZ2V0aGVyIHdpdGhvdXQgc3RhY2sgbWFya2VyXHJcbiAgICBlbjogJ1N0YWNrJyxcclxuICAgIGRlOiAnU2FtbWVsbicsXHJcbiAgICBmcjogJ1BhY2tlei12b3VzJyxcclxuICAgIGphOiAn6ZuG5ZCIJyxcclxuICAgIGNuOiAn6ZuG5ZCIJyxcclxuICAgIGtvOiAn7ImQ7Ja0646AJyxcclxuICB9LFxyXG4gIHN0YWNrT25Zb3U6IHtcclxuICAgIGVuOiAnU3RhY2sgb24gWU9VJyxcclxuICAgIGRlOiAnQXVmIERJUiBzYW1tZWxuJyxcclxuICAgIGZyOiAnUGFja2FnZSBzdXIgVk9VUycsXHJcbiAgICBqYTogJ+iHquWIhuOBq+mbhuWQiCcsXHJcbiAgICBjbjogJ+mbhuWQiOeCueWQjScsXHJcbiAgICBrbzogJ+yJkOyWtOynlSDrjIDsg4HsnpAnLFxyXG4gIH0sXHJcbiAgc3RhY2tPblBsYXllcjoge1xyXG4gICAgZW46ICdTdGFjayBvbiAke3BsYXllcn0nLFxyXG4gICAgZGU6ICdBdWYgJHtwbGF5ZXJ9IHNhbW1lbG4nLFxyXG4gICAgZnI6ICdQYWNrZXotdm91cyBzdXIgJHtwbGF5ZXJ9JyxcclxuICAgIGphOiAnJHtwbGF5ZXJ944Gr6ZuG5ZCIJyxcclxuICAgIGNuOiAn6Z2g6L+RICR7cGxheWVyfembhuWQiCcsXHJcbiAgICBrbzogJ1wiJHtwbGF5ZXJ9XCIg7ImQ7Ja07KeVJyxcclxuICB9LFxyXG4gIHN0YWNrTWlkZGxlOiB7XHJcbiAgICBlbjogJ1N0YWNrIGluIG1pZGRsZScsXHJcbiAgICBkZTogJ0luIGRlciBNaXR0ZSBzYW1tZWxuJyxcclxuICAgIGZyOiAnUGFja2V6LXZvdXMgYXUgbWlsaWV1JyxcclxuICAgIGphOiAn5Lit5aSu44Gn6ZuG5ZCIJyxcclxuICAgIGNuOiAn5Lit6Ze06ZuG5ZCIJyxcclxuICAgIGtvOiAn7KSR7JWZ7JeQ7IScIOuqqOydtOq4sCcsXHJcbiAgfSxcclxuICBkb3JpdG9TdGFjazoge1xyXG4gICAgZW46ICdEb3JpdG8gU3RhY2snLFxyXG4gICAgZGU6ICdNaXQgTWFya2VyIHNhbW1lbG4nLFxyXG4gICAgZnI6ICdQYWNrZXogbGVzIG1hcnF1YWdlcycsXHJcbiAgICBqYTogJ+ODnuODvOOCq+ODvOS7mOOBkeOBn+S6uuOBqOmbhuWQiCcsXHJcbiAgICBjbjogJ+eCueWQjembhuWQiCcsXHJcbiAgICBrbzogJ+ynleuBvOumrCDrqqjsnbTquLAnLFxyXG4gIH0sXHJcbiAgc3ByZWFkVGhlblN0YWNrOiB7XHJcbiAgICBlbjogJ1NwcmVhZCA9PiBTdGFjaycsXHJcbiAgICBkZTogJ1ZlcnRlaWxlbiA9PiBTYW1tZWxuJyxcclxuICAgIGZyOiAnRGlzcGVyc2lvbiA9PiBQYWNrYWdlJyxcclxuICAgIGphOiAn5pWj6ZaLID0+IOmbhuWQiCcsXHJcbiAgICBjbjogJ+WIhuaVoyA9PiDpm4blkIgnLFxyXG4gICAga286ICfsgrDqsJwgPT4g7KeR7ZWpJyxcclxuICB9LFxyXG4gIHN0YWNrVGhlblNwcmVhZDoge1xyXG4gICAgZW46ICdTdGFjayA9PiBTcHJlYWQnLFxyXG4gICAgZGU6ICdTYW1tZWxuID0+IFZlcnRlaWxlbicsXHJcbiAgICBmcjogJ1BhY2thZ2UgPT4gRGlzcGVyc2lvbicsXHJcbiAgICBqYTogJ+OCueOCv+ODg+OCryA9PiDmlaPplosnLFxyXG4gICAgY246ICfpm4blkIggPT4g5YiG5pWjJyxcclxuICAgIGtvOiAn7KeR7ZWpID0+IOyCsOqwnCcsXHJcbiAgfSxcclxuICBrbm9ja2JhY2s6IHtcclxuICAgIGVuOiAnS25vY2tiYWNrJyxcclxuICAgIGRlOiAnUsO8Y2tzdG/DnycsXHJcbiAgICBmcjogJ1BvdXNzw6llJyxcclxuICAgIGphOiAn44OO44OD44Kv44OQ44OD44KvJyxcclxuICAgIGNuOiAn5Ye76YCAJyxcclxuICAgIGtvOiAn64SJ67CxJyxcclxuICB9LFxyXG4gIGtub2NrYmFja09uWW91OiB7XHJcbiAgICBlbjogJ0tub2NrYmFjayBvbiBZT1UnLFxyXG4gICAgZGU6ICdSw7xja3N0b8OfIGF1ZiBESVInLFxyXG4gICAgZnI6ICdQb3Vzc8OpZSBzdXIgVk9VUycsXHJcbiAgICBqYTogJ+iHquWIhuOBq+ODjuODg+OCr+ODkOODg+OCrycsXHJcbiAgICBjbjogJ+WHu+mAgOeCueWQjScsXHJcbiAgICBrbzogJ+uEieuwseynlSDrjIDsg4HsnpAnLFxyXG4gIH0sXHJcbiAga25vY2tiYWNrT25QbGF5ZXI6IHtcclxuICAgIGVuOiAnS25vY2tiYWNrIG9uICR7cGxheWVyfScsXHJcbiAgICBkZTogJ1LDvGNrc3Rvw58gYXVmICR7cGxheWVyfScsXHJcbiAgICBmcjogJ1BvdXNzw6llIHN1ciAke3BsYXllcn0nLFxyXG4gICAgamE6ICcke3BsYXllcn3jgavjg47jg4Pjgq/jg5Djg4Pjgq8nLFxyXG4gICAgY246ICflh7vpgIDngrnlkI0ke3BsYXllcn0nLFxyXG4gICAga286ICdcIiR7cGxheWVyfVwiIOuEieuwseynlScsXHJcbiAgfSxcclxuICBsb29rVG93YXJkc0Jvc3M6IHtcclxuICAgIGVuOiAnTG9vayBUb3dhcmRzIEJvc3MnLFxyXG4gICAgZGU6ICdBbnNjaGF1ZW4gQm9zcycsXHJcbiAgICBmcjogJ1JlZ2FyZGV6IGxlIGJvc3MnLFxyXG4gICAgamE6ICfjg5zjgrnjgpLopovjgosnLFxyXG4gICAgY246ICfpnaLlkJFCb3NzJyxcclxuICAgIGtvOiAn7LOQ64uk67O06riwJyxcclxuICB9LFxyXG4gIGxvb2tBd2F5OiB7XHJcbiAgICBlbjogJ0xvb2sgQXdheScsXHJcbiAgICBkZTogJ1dlZ3NjaGF1ZW4nLFxyXG4gICAgZnI6ICdSZWdhcmRleiBhaWxsZXVycycsXHJcbiAgICBqYTogJ+ODnOOCueOCkuimi+OBquOBhCcsXHJcbiAgICBjbjogJ+iDjOWvuUJvc3MnLFxyXG4gICAga286ICfrkqTrj4zquLAnLFxyXG4gIH0sXHJcbiAgbG9va0F3YXlGcm9tUGxheWVyOiB7XHJcbiAgICBlbjogJ0xvb2sgQXdheSBmcm9tICR7cGxheWVyfScsXHJcbiAgICBkZTogJ1NjaGF1IHdlZyB2b24gJHtwbGF5ZXJ9JyxcclxuICAgIGZyOiAnTmUgcmVnYXJkZXogcGFzICR7cGxheWVyfScsXHJcbiAgICBqYTogJyR7cGxheWVyfeOCkuimi+OBquOBhCcsXHJcbiAgICBjbjogJ+iDjOWvuSR7cGxheWVyfScsXHJcbiAgICBrbzogJyR7cGxheWVyfeyXkOqyjOyEnCDrkqTrj4zquLAnLFxyXG4gIH0sXHJcbiAgbG9va0F3YXlGcm9tVGFyZ2V0OiB7XHJcbiAgICBlbjogJ0xvb2sgQXdheSBmcm9tICR7bmFtZX0nLFxyXG4gICAgZGU6ICdTY2hhdSB3ZWcgdm9uICR7bmFtZX0nLFxyXG4gICAgZnI6ICdOZSByZWdhcmRleiBwYXMgJHtuYW1lfScsXHJcbiAgICBqYTogJyR7bmFtZX3jgpLopovjgarjgYQnLFxyXG4gICAgY246ICfog4zlr7kke25hbWV9JyxcclxuICAgIGtvOiAnJHtuYW1lfeyXkOqyjOyEnCDrkqTrj4zquLAnLFxyXG4gIH0sXHJcbiAgZ2V0QmVoaW5kOiB7XHJcbiAgICBlbjogJ0dldCBCZWhpbmQnLFxyXG4gICAgZGU6ICdIaW50ZXIgaWhuJyxcclxuICAgIGZyOiAnUGFzc2V6IGRlcnJpw6hyZScsXHJcbiAgICBqYTogJ+iDjOmdouOBuCcsXHJcbiAgICBjbjogJ+WOu+iDjOWQjicsXHJcbiAgICBrbzogJ+uztOyKpCDrkqTroZwnLFxyXG4gIH0sXHJcbiAgZ29Gcm9udE9yU2lkZXM6IHtcclxuICAgIGVuOiAnR28gRnJvbnQgLyBTaWRlcycsXHJcbiAgICBkZTogJ0dlaGUgbmFjaCBWb3JuZS8genUgZGVuIFNlaXRlbicsXHJcbiAgICBmcjogJ0FsbGV6IERldmFudCAvIEPDtHTDqXMnLFxyXG4gICAgamE6ICfliY3vvI/mqKrjgbgnLFxyXG4gICAgY246ICfljrvliY3kvqfmlrknLFxyXG4gICAga286ICfrs7TsiqQg7ZuE67CpIO2UvO2VmOq4sCcsXHJcbiAgfSxcclxuICBnb0Zyb250OiB7XHJcbiAgICBlbjogJ0dvIEZyb250JyxcclxuICAgIGRlOiAnR2VoIG5hY2ggdm9ybicsXHJcbiAgICBmcjogJ0FsbGV6IERldmFudCcsXHJcbiAgICBqYTogJ+WJjeOBuCcsXHJcbiAgICBjbjogJ+WOu+WJjemdoicsXHJcbiAgICBrbzogJ+yVnuycvOuhnCcsXHJcbiAgfSxcclxuICAvLyBnZXRVbmRlciBpcyB1c2VkIHdoZW4geW91IGhhdmUgdG8gZ2V0IGludG8gdGhlIGJvc3NlcyBoaXRib3hcclxuICBnZXRVbmRlcjoge1xyXG4gICAgZW46ICdHZXQgVW5kZXInLFxyXG4gICAgZGU6ICdVbnRlciBpaG4nLFxyXG4gICAgZnI6ICdFbiBkZXNzb3VzJyxcclxuICAgIGphOiAn44Oc44K544Gr6LK844KK5LuY44GPJyxcclxuICAgIGNuOiAn5Y676ISa5LiLJyxcclxuICAgIGtvOiAn67O07IqkIOyVhOuemOuhnCcsXHJcbiAgfSxcclxuICAvLyBpbiBpcyBtb3JlIGxpa2UgXCJnZXQgY2xvc2UgYnV0IG1heWJlIGV2ZW4gbWVsZWUgcmFuZ2UgaXMgZmluZVwiXHJcbiAgaW46IHtcclxuICAgIGVuOiAnSW4nLFxyXG4gICAgZGU6ICdSZWluJyxcclxuICAgIGZyOiAnSW50w6lyaWV1cicsXHJcbiAgICBqYTogJ+S4reOBuCcsXHJcbiAgICBjbjogJ+mdoOi/kScsXHJcbiAgICBrbzogJ+yViOycvOuhnCcsXHJcbiAgfSxcclxuICAvLyBvdXQgbWVhbnMgZ2V0IGZhciBhd2F5XHJcbiAgb3V0OiB7XHJcbiAgICBlbjogJ091dCcsXHJcbiAgICBkZTogJ1JhdXMnLFxyXG4gICAgZnI6ICdFeHRlcmlldXInLFxyXG4gICAgamE6ICflpJbjgbgnLFxyXG4gICAgY246ICfov5znprsnLFxyXG4gICAga286ICfrsJbsnLzroZwnLFxyXG4gIH0sXHJcbiAgb3V0T2ZNZWxlZToge1xyXG4gICAgZW46ICdPdXQgb2YgbWVsZWUnLFxyXG4gICAgZGU6ICdSYXVzIGF1cyBOYWhrYW1wZicsXHJcbiAgICBmcjogJ1NvcnRleiBkZSBsYSBtw6psw6llJyxcclxuICAgIGphOiAn6L+R5o6l5pyA5aSn44Os44Oz44K4JyxcclxuICAgIGNuOiAn6L+R5oiY5pyA6L+c6Led56a75Zue6YG/JyxcclxuICAgIGtvOiAn6re87KCR67KU7JyEIOuwluycvOuhnCcsXHJcbiAgfSxcclxuICBpblRoZW5PdXQ6IHtcclxuICAgIGVuOiAnSW4sIHRoZW4gb3V0JyxcclxuICAgIGRlOiAnUmVpbiwgZGFubiByYXVzJyxcclxuICAgIGZyOiAnSW50w6lyaWV1ciwgcHVpcyBleHTDqXJpZXVyJyxcclxuICAgIGphOiAn5LitID0+IOWklicsXHJcbiAgICBjbjogJ+WFiOmdoOi/ke+8jOWGjei/nOemuycsXHJcbiAgICBrbzogJ+yViOycvOuhnCA9PiDrsJbsnLzroZwnLFxyXG4gIH0sXHJcbiAgb3V0VGhlbkluOiB7XHJcbiAgICBlbjogJ091dCwgdGhlbiBpbicsXHJcbiAgICBkZTogJ1JhdXMsIGRhbm4gcmVpbicsXHJcbiAgICBmcjogJ0V4dMOpcmlldXIsIHB1aXMgaW50w6lyaWV1cicsXHJcbiAgICBqYTogJ+WkliA9PiDkuK0nLFxyXG4gICAgY246ICflhYjov5znprvvvIzlho3pnaDov5EnLFxyXG4gICAga286ICfrsJbsnLzroZwgPT4g7JWI7Jy866GcJyxcclxuICB9LFxyXG4gIGJhY2tUaGVuRnJvbnQ6IHtcclxuICAgIGVuOiAnQmFjayBUaGVuIEZyb250JyxcclxuICAgIGRlOiAnTmFjaCBIaW50ZW4sIGRhbmFjaCBuYWNoIFZvcm5lJyxcclxuICAgIGZyOiAnRGVycmnDqHJlIHB1aXMgZGV2YW50JyxcclxuICAgIGphOiAn5b6M44KNID0+IOWJjScsXHJcbiAgICBjbjogJ+WQjiA9PiDliY0nLFxyXG4gICAga286ICfrkqTroZwgPT4g7JWe7Jy866GcJyxcclxuICB9LFxyXG4gIGZyb250VGhlbkJhY2s6IHtcclxuICAgIGVuOiAnRnJvbnQgVGhlbiBCYWNrJyxcclxuICAgIGRlOiAnTmFjaCBWb3JuZSwgZGFuYWNoIG5hY2ggSGludGVuJyxcclxuICAgIGZyOiAnRGV2YW50IHB1aXMgZGVycmnDqHJlJyxcclxuICAgIGphOiAn5YmNID0+IOW+jOOCjScsXHJcbiAgICBjbjogJ+WJjSA9PiDlkI4nLFxyXG4gICAga286ICfslZ7snLzroZwgPT4g65Kk66GcJyxcclxuICB9LFxyXG4gIGdvSW50b01pZGRsZToge1xyXG4gICAgZW46ICdnbyBpbnRvIG1pZGRsZScsXHJcbiAgICBkZTogJ2luIGRpZSBNaXR0ZSBnZWhlbicsXHJcbiAgICBmcjogJ0FsbGV6IGF1IG1pbGlldScsXHJcbiAgICBqYTogJ+S4reOBuCcsXHJcbiAgICBjbjogJ+WOu+S4remXtCcsXHJcbiAgICBrbzogJ+ykkeyVmeycvOuhnCcsXHJcbiAgfSxcclxuICByaWdodDoge1xyXG4gICAgZW46ICdSaWdodCcsXHJcbiAgICBkZTogJ1JlY2h0cycsXHJcbiAgICBmcjogJ8OAIGRyb2l0ZScsXHJcbiAgICBqYTogJ+WPs+OBuCcsXHJcbiAgICBjbjogJ+WPsycsXHJcbiAgICBrbzogJ+yYpOuluOyqvScsXHJcbiAgfSxcclxuICBsZWZ0OiB7XHJcbiAgICBlbjogJ0xlZnQnLFxyXG4gICAgZGU6ICdMaW5rcycsXHJcbiAgICBmcjogJ8OAIGdhdWNoZScsXHJcbiAgICBqYTogJ+W3puOBuCcsXHJcbiAgICBjbjogJ+W3picsXHJcbiAgICBrbzogJ+yZvOyqvScsXHJcbiAgfSxcclxuICBnZXRMZWZ0QW5kV2VzdDoge1xyXG4gICAgZW46ICc8PSBHZXQgTGVmdC9XZXN0JyxcclxuICAgIGRlOiAnPD0gTmFjaCBMaW5rcy9XZXN0ZW4nLFxyXG4gICAgZnI6ICc8PSBBbGxleiDDoCBHYXVjaGUvT3Vlc3QnLFxyXG4gICAgamE6ICc8PSDlt6Yv6KW/44G4JyxcclxuICAgIGNuOiAnPD0g5Y675bemL+ilv+i+uScsXHJcbiAgICBrbzogJzw9IOyZvOyqveycvOuhnCcsXHJcbiAgfSxcclxuICBnZXRSaWdodEFuZEVhc3Q6IHtcclxuICAgIGVuOiAnR2V0IFJpZ2h0L0Vhc3QgPT4nLFxyXG4gICAgZGU6ICdOYWNoIFJlY2h0cy9Pc3RlbiA9PicsXHJcbiAgICBmcjogJ0FsbGV6IMOgIERyb2l0ZS9Fc3QgPT4nLFxyXG4gICAgamE6ICflj7Mv5p2x44G4ID0+JyxcclxuICAgIGNuOiAn5Y675Y+zL+S4nOi+uSA9PicsXHJcbiAgICBrbzogJ+yYpOuluOyqveycvOuhnCA9PicsXHJcbiAgfSxcclxuICBnb0Zyb250QmFjazoge1xyXG4gICAgZW46ICdHbyBGcm9udC9CYWNrJyxcclxuICAgIGRlOiAnR2VoIG5hY2ggVm9ybmUvSGludGVuJyxcclxuICAgIGZyOiAnQWxsZXogRGV2YW50L0RlcnJpw6hyZScsXHJcbiAgICBqYTogJ+e4puOBuCcsXHJcbiAgICBjbjogJ+WOu+WJjeWQjicsXHJcbiAgICBrbzogJ+yVni/rkqTroZwnLFxyXG4gIH0sXHJcbiAgc2lkZXM6IHtcclxuICAgIGVuOiAnU2lkZXMnLFxyXG4gICAgZGU6ICdTZWl0ZW4nLFxyXG4gICAgZnI6ICdDw7R0w6lzJyxcclxuICAgIGphOiAn5qiq44G4JyxcclxuICAgIGNuOiAn5Y675L6n6Z2iJyxcclxuICAgIGtvOiAn7JaR7JiG7Jy866GcJyxcclxuICB9LFxyXG4gIG1pZGRsZToge1xyXG4gICAgZW46ICdNaWRkbGUnLFxyXG4gICAgZGU6ICdNaXR0ZScsXHJcbiAgICBmcjogJ01pbGlldScsXHJcbiAgICBqYTogJ+S4reOBuCcsXHJcbiAgICBjbjogJ+S4remXtCcsXHJcbiAgICBrbzogJ+ykkeyVmScsXHJcbiAgfSxcclxuICAvLyBraWxsQWRkcyBpcyB1c2VkIGZvciBhZGRzIHRoYXQgd2lsbCBhbHdheXMgYmUgYXZhaWxhYmxlXHJcbiAga2lsbEFkZHM6IHtcclxuICAgIGVuOiAnS2lsbCBhZGRzJyxcclxuICAgIGRlOiAnQWRkcyBiZXNpZWdlbicsXHJcbiAgICBmcjogJ1R1ZXogbGVzIGFkZHMnLFxyXG4gICAgamE6ICfpm5HprZrjgpLlh6bnkIYnLFxyXG4gICAgY246ICflh7vmnYDlsI/mgKonLFxyXG4gICAga286ICfsq4Qg7J6h6riwJyxcclxuICB9LFxyXG4gIC8vIGtpbGxFeHRyYUFkZCBpcyB1c2VkIGZvciBhZGRzIHRoYXQgYXBwZWFyIGlmIGEgbWVjaGFuaWMgd2FzIG5vdCBwbGF5ZWQgY29ycmVjdGx5XHJcbiAga2lsbEV4dHJhQWRkOiB7XHJcbiAgICBlbjogJ0tpbGwgRXh0cmEgQWRkJyxcclxuICAgIGRlOiAnQWRkIGJlc2llZ2VuJyxcclxuICAgIGZyOiAnVHVleiBsXFwnYWRkJyxcclxuICAgIGphOiAn6ZuR6a2a44KS5YCS44GZJyxcclxuICAgIGNuOiAn5Ye75p2A5bCP5oCqJyxcclxuICAgIGtvOiAn7KuEIOyeoeq4sCcsXHJcbiAgfSxcclxuICBhd2F5RnJvbUZyb250OiB7XHJcbiAgICBlbjogJ0F3YXkgRnJvbSBGcm9udCcsXHJcbiAgICBkZTogJ1dlZyB2b24gVm9ybmUnLFxyXG4gICAgZnI6ICfDiWxvaWduZXotdm91cyBkdSBkZXZhbnQnLFxyXG4gICAgamE6ICfliY3mlrnjgYvjgonpm6LjgozjgosnLFxyXG4gICAgY246ICfov5znprvmraPpnaInLFxyXG4gICAga286ICfrs7TsiqQg7KCE67CpIO2UvO2VmOq4sCcsXHJcbiAgfSxcclxuICBzbGVlcFRhcmdldDoge1xyXG4gICAgZW46ICdTbGVlcCAke25hbWV9JyxcclxuICAgIGRlOiAnU2NobGFmIGF1ZiAke25hbWV9JyxcclxuICAgIGZyOiAnU29tbWVpbCBzdXIgJHtuYW1lfScsXHJcbiAgICBqYTogJyR7bmFtZX0g44Gr44K544Oq44OX44OrJyxcclxuICAgIGNuOiAn5YKs55ygICR7bmFtZX0nLFxyXG4gICAga286ICcke25hbWV9IOyKrOumrO2UjCcsXHJcbiAgfSxcclxuICBzdHVuVGFyZ2V0OiB7XHJcbiAgICBlbjogJ1N0dW4gJHtuYW1lfScsXHJcbiAgICBkZTogJ0JldMOkdWJ1bmcgYXVmICR7bmFtZX0nLFxyXG4gICAgZnI6ICfDiXRvdXJkaXNzZXogJHtuYW1lfScsXHJcbiAgICBqYTogJyR7bmFtZX0g44Gr44K544K/44OzJyxcclxuICAgIGNuOiAn55yp5pmVICR7bmFtZX0nLFxyXG4gICAga286ICcke25hbWV96riw7KCIJyxcclxuICB9LFxyXG4gIGludGVycnVwdFRhcmdldDoge1xyXG4gICAgZW46ICdpbnRlcnJ1cHQgJHtuYW1lfScsXHJcbiAgICBkZTogJ3VudGVyYnJlY2hlICR7bmFtZX0nLFxyXG4gICAgZnI6ICdJbnRlcnJvbXBleiAke25hbWV9JyxcclxuICAgIGphOiAnJHtuYW1lfSDjgavmsojpu5knLFxyXG4gICAgY246ICfmiZPmlq0ke25hbWV9JyxcclxuICAgIGtvOiAnJHtuYW1lfeq4sOyIoCDsi5zsoIQg64GK6riwJyxcclxuICB9LFxyXG4gIHByZXlPbllvdToge1xyXG4gICAgZW46ICdQcmV5IG9uIFlPVScsXHJcbiAgICBkZTogJ01hcmtlciBhdWYgRElSJyxcclxuICAgIGZyOiAnTWFycXVhZ2Ugc3VyIFZPVVMnLFxyXG4gICAgamE6ICfoh6rliIbjgavmjZXpo58nLFxyXG4gICAgY246ICfmjqDpo5/ngrnlkI0nLFxyXG4gICAga286ICftmY3smKXsp5Ug64yA7IOB7J6QJyxcclxuICB9LFxyXG4gIHByZXlPblBsYXllcjoge1xyXG4gICAgZW46ICdQcmV5IG9uICR7cGxheWVyfScsXHJcbiAgICBkZTogJ01hcmtlciBhdWYgJHtwbGF5ZXJ9JyxcclxuICAgIGZyOiAnTWFycXVhZ2Ugc3VyICR7cGxheWVyfScsXHJcbiAgICBqYTogJyR7cGxheWVyfeOBq+aNlemjnycsXHJcbiAgICBjbjogJ+aOoOmjn+eCueWQjSR7cGxheWVyfScsXHJcbiAgICBrbzogJ1wiJHtwbGF5ZXJ9XCIg7ZmN7Jil7KeVJyxcclxuICB9LFxyXG4gIGF3YXlGcm9tR3JvdXA6IHtcclxuICAgIGVuOiAnQXdheSBmcm9tIEdyb3VwJyxcclxuICAgIGRlOiAnV2VnIHZvbiBkZXIgR3J1cHBlJyxcclxuICAgIGZyOiAnw4lsb2lnbmV6LXZvdXMgZHUgZ3JvdXBlJyxcclxuICAgIGphOiAn5aSW44G4JyxcclxuICAgIGNuOiAn6L+c56a75Lq6576kJyxcclxuICAgIGtvOiAn64uk66W4IOyCrOuejOuTpOydtOuekSDrlqjslrTsp4DquLAnLFxyXG4gIH0sXHJcbiAgYXdheUZyb21QbGF5ZXI6IHtcclxuICAgIGVuOiAnQXdheSBmcm9tICR7cGxheWVyfScsXHJcbiAgICBkZTogJ1dlZyB2b24gJHtwbGF5ZXJ9JyxcclxuICAgIGZyOiAnw4lsb2lnbmV6LXZvdXMgZGUgJHtwbGF5ZXJ9JyxcclxuICAgIGphOiAnJHtwbGF5ZXJ944GL44KJ6Zui44KM44KLJyxcclxuICAgIGNuOiAn6L+c56a7JHtwbGF5ZXJ9JyxcclxuICAgIGtvOiAnXCIke3BsYXllcn1cIuyXkOyEnCDrqYDslrTsp4DquLAnLFxyXG4gIH0sXHJcbiAgbWV0ZW9yT25Zb3U6IHtcclxuICAgIGVuOiAnTWV0ZW9yIG9uIFlPVScsXHJcbiAgICBkZTogJ01ldGVvciBhdWYgRElSJyxcclxuICAgIGZyOiAnTcOpdMOpb3JlIHN1ciBWT1VTJyxcclxuICAgIGphOiAn6Ieq5YiG44Gr44Oh44OG44KqJyxcclxuICAgIGNuOiAn6Zmo55+z54K55ZCNJyxcclxuICAgIGtvOiAn64KY7JeQ6rKMIOuplO2FjOyYpOynlScsXHJcbiAgfSxcclxuICBzdG9wTW92aW5nOiB7XHJcbiAgICBlbjogJ1N0b3AgTW92aW5nIScsXHJcbiAgICBkZTogJ0Jld2VndW5nIHN0b3BwZW4hJyxcclxuICAgIGZyOiAnTmUgYm91Z2V6IHBhcyAhJyxcclxuICAgIGphOiAn56e75YuV56aB5q2i77yBJyxcclxuICAgIGNuOiAn5YGc5q2i56e75Yqo77yBJyxcclxuICAgIGtvOiAn7J2064+ZIOupiOy2lOq4sCEnLFxyXG4gIH0sXHJcbiAgc3RvcEV2ZXJ5dGhpbmc6IHtcclxuICAgIGVuOiAnU3RvcCBFdmVyeXRoaW5nIScsXHJcbiAgICBkZTogJ1N0b3BwZSBBbGxlcyEnLFxyXG4gICAgZnI6ICdBcnLDqnRleiBUT1VUICEnLFxyXG4gICAgamE6ICfooYzli5XnpoHmraLvvIEnLFxyXG4gICAgY246ICflgZzmraLooYzliqjvvIEnLFxyXG4gICAga286ICftlonrj5kg66mI7LaU6riwIScsXHJcbiAgfSxcclxuICBtb3ZlQXdheToge1xyXG4gICAgLy8gbW92ZSBhd2F5IHRvIGRvZGdlIGFvZXNcclxuICAgIGVuOiAnTW92ZSEnLFxyXG4gICAgZGU6ICdCZXdlZ2VuIScsXHJcbiAgICBmcjogJ0JvdWdleiAhJyxcclxuICAgIGphOiAn6YG/44GR44Gm77yBJyxcclxuICAgIGNuOiAn5b+r6Lqy5byA77yBJyxcclxuICAgIGtvOiAn7J2064+Z7ZWY6riwIScsXHJcbiAgfSxcclxuICBtb3ZlQXJvdW5kOiB7XHJcbiAgICAvLyBtb3ZlIGFyb3VuZCAoZS5nLiBqdW1waW5nKSB0byBhdm9pZCBiZWluZyBmcm96ZW5cclxuICAgIGVuOiAnTW92ZSEnLFxyXG4gICAgZGU6ICdCZXdlZ2VuIScsXHJcbiAgICBmcjogJ0JvdWdleiAhJyxcclxuICAgIGphOiAn5YuV44GP77yBJyxcclxuICAgIGNuOiAn5b+r5Yqo77yBJyxcclxuICAgIGtvOiAn7JuA7KeB7J206riwIScsXHJcbiAgfSxcclxuICBicmVha0NoYWluczoge1xyXG4gICAgZW46ICdCcmVhayBjaGFpbnMnLFxyXG4gICAgZGU6ICdLZXR0ZSB6ZXJicmVjaGVuJyxcclxuICAgIGZyOiAnQnJpc2V6IGxlcyBjaGFpbmVzJyxcclxuICAgIGphOiAn57ea44KS5YiH44KLJyxcclxuICAgIGNuOiAn5YiH5pat6L+e57q/JyxcclxuICAgIGtvOiAn7ISgIOuBiuq4sCcsXHJcbiAgfSxcclxuICBtb3ZlQ2hhaW5zVG9nZXRoZXI6IHtcclxuICAgIGVuOiAnTW92ZSBjaGFpbnMgdG9nZXRoZXInLFxyXG4gICAgZGU6ICdLZXR0ZW4genVzYW1tZW4gYmV3ZWdlbicsXHJcbiAgICBmcjogJ0JvdWdleiBsZXMgY2hhaW5lcyBlbnNlbWJsZScsXHJcbiAgICBqYTogJ+e3muWQjOWjq+S4gOe3kuOBq+enu+WLlScsXHJcbiAgICBjbjogJ+i/nue6v+S4gOi1t+enu+WKqCcsXHJcbiAgICBrbzogJ+yEoCDrtpnslrTshJwg6rCZ7J20IOybgOyngeydtOq4sCcsXHJcbiAgfSxcclxuICBlYXJ0aHNoYWtlck9uWW91OiB7XHJcbiAgICBlbjogJ0VhcnRoIFNoYWtlciBvbiBZT1UnLFxyXG4gICAgZGU6ICdFcmRzdG/DnyBhdWYgRElSJyxcclxuICAgIGZyOiAnTWFycXVlIGRlIHRlcnJlIHN1ciBWT1VTJyxcclxuICAgIGphOiAn6Ieq5YiG44Gr44Ki44O844K544K344Kn44Kk44Kr44O8JyxcclxuICAgIGNuOiAn5aSn5Zyw5pGH5Yqo54K55ZCNJyxcclxuICAgIGtvOiAn7Ja07Iqk7KeVIOuMgOyDgeyekCcsXHJcbiAgfSxcclxuICB3YWtlVXA6IHtcclxuICAgIGVuOiAnV0FLRSBVUCcsXHJcbiAgICBkZTogJ0FVRldBQ0hFTicsXHJcbiAgICBmcjogJ1LDiVZFSUxMRVMtVE9JJyxcclxuICAgIGphOiAn55uu44KS6Kaa44G+44GX44Gm77yBJyxcclxuICAgIGNuOiAn6YaS6YaS77yB5Yqo5LiA5Yqo77yB77yBJyxcclxuICAgIGtvOiAn6rCV7KCcIO2HtOyepSA367aEIOyghCcsXHJcbiAgfSxcclxuICBjbG9zZVRldGhlcnNXaXRoUGxheWVyOiB7XHJcbiAgICBlbjogJ0Nsb3NlIFRldGhlcnMgKCR7cGxheWVyfSknLFxyXG4gICAgZGU6ICdOYWhlIFZlcmJpbmR1bmdlbiAoJHtwbGF5ZXJ9KScsXHJcbiAgICBmcjogJ0xpZW5zIHByb2NoZXMgYXZlYyAoJHtwbGF5ZXJ9KScsXHJcbiAgICBqYTogJygke3BsYXllcn0p44Gr6L+R44Gl44GPJyxcclxuICAgIGNuOiAn6Z2g6L+R6L+e57q/ICgke3BsYXllcn0pJyxcclxuICAgIGtvOiAn7IOB64yA7JmAIOqwgOq5jOydtCDrtpnquLAgKCR7cGxheWVyfSknLFxyXG4gIH0sXHJcbiAgZmFyVGV0aGVyc1dpdGhQbGF5ZXI6IHtcclxuICAgIGVuOiAnRmFyIFRldGhlcnMgKCR7cGxheWVyfSknLFxyXG4gICAgZGU6ICdFbnRmZXJudGUgVmVyYmluZHVuZ2VuICgke3BsYXllcn0pJyxcclxuICAgIGZyOiAnTGllbnMgw6lsb2lnbsOpcyBhdmVjICgke3BsYXllcn0pJyxcclxuICAgIGphOiAnICgke3BsYXllcn0p44GL44KJ6Zui44KM44KLJyxcclxuICAgIGNuOiAn6L+c56a76L+e57q/ICgke3BsYXllcn0pJyxcclxuICAgIGtvOiAn7IOB64yA7JmAIOuWqOyWtOyngOq4sCAoJHtwbGF5ZXJ9KScsXHJcbiAgfSxcclxuICB1bmtub3duOiB7XHJcbiAgICBlbjogJz8/PycsXHJcbiAgICBkZTogJz8/PycsXHJcbiAgICBmcjogJz8/PycsXHJcbiAgICBqYTogJz8/PycsXHJcbiAgICBjbjogJz8/PycsXHJcbiAgICBrbzogJz8/PycsXHJcbiAgfSxcclxuICBub3J0aDoge1xyXG4gICAgZW46ICdOb3J0aCcsXHJcbiAgICBkZTogJ05vcmRlbicsXHJcbiAgICBmcjogJ05vcmQnLFxyXG4gICAgamE6ICfljJcnLFxyXG4gICAgY246ICfkuIoo5YyXKScsXHJcbiAgICBrbzogJ+u2geyqvScsXHJcbiAgfSxcclxuICBzb3V0aDoge1xyXG4gICAgZW46ICdTb3V0aCcsXHJcbiAgICBkZTogJ1PDvGRlbicsXHJcbiAgICBmcjogJ1N1ZCcsXHJcbiAgICBqYTogJ+WNlycsXHJcbiAgICBjbjogJ+S4iyjljZcpJyxcclxuICAgIGtvOiAn64Ko7Kq9JyxcclxuICB9LFxyXG4gIGVhc3Q6IHtcclxuICAgIGVuOiAnRWFzdCcsXHJcbiAgICBkZTogJ09zdGVuJyxcclxuICAgIGZyOiAnRXN0JyxcclxuICAgIGphOiAn5p2xJyxcclxuICAgIGNuOiAn5Y+zKOS4nCknLFxyXG4gICAga286ICfrj5nsqr0nLFxyXG4gIH0sXHJcbiAgd2VzdDoge1xyXG4gICAgZW46ICdXZXN0JyxcclxuICAgIGRlOiAnV2VzdGVuJyxcclxuICAgIGZyOiAnT3Vlc3QnLFxyXG4gICAgamE6ICfopb8nLFxyXG4gICAgY246ICflt6Yo6KW/KScsXHJcbiAgICBrbzogJ+yEnOyqvScsXHJcbiAgfSxcclxuICBub3J0aHdlc3Q6IHtcclxuICAgIGVuOiAnTm9ydGh3ZXN0JyxcclxuICAgIGRlOiAnTm9yZHdlc3RlbicsXHJcbiAgICBmcjogJ25vcmQtb3Vlc3QnLFxyXG4gICAgamE6ICfljJfopb8nLFxyXG4gICAgY246ICflt6bkuIoo6KW/5YyXKScsXHJcbiAgICBrbzogJ+u2geyEnCcsXHJcbiAgfSxcclxuICBub3J0aGVhc3Q6IHtcclxuICAgIGVuOiAnTm9ydGhlYXN0JyxcclxuICAgIGRlOiAnTm9yZG9zdGVuJyxcclxuICAgIGZyOiAnbm9yZC1lc3QnLFxyXG4gICAgamE6ICfljJfmnbEnLFxyXG4gICAgY246ICflj7PkuIoo5Lic5YyXKScsXHJcbiAgICBrbzogJ+u2geuPmScsXHJcbiAgfSxcclxuICBzb3V0aHdlc3Q6IHtcclxuICAgIGVuOiAnU291dGh3ZXN0JyxcclxuICAgIGRlOiAnU8O8ZHdlc3RlbicsXHJcbiAgICBmcjogJ3N1ZC1vdWVzdCcsXHJcbiAgICBqYTogJ+WNl+ilvycsXHJcbiAgICBjbjogJ+W3puS4iyjopb/ljZcpJyxcclxuICAgIGtvOiAn64Ko7IScJyxcclxuICB9LFxyXG4gIHNvdXRoZWFzdDoge1xyXG4gICAgZW46ICdTb3V0aGVhc3QnLFxyXG4gICAgZGU6ICdTw7xkb3N0ZW4nLFxyXG4gICAgZnI6ICdzdWQtZXN0JyxcclxuICAgIGphOiAn5Y2X5p2xJyxcclxuICAgIGNuOiAn5Y+z5LiLKOS4nOWNlyknLFxyXG4gICAga286ICfrgqjrj5knLFxyXG4gIH0sXHJcbiAgZGlyTjoge1xyXG4gICAgZW46ICdOJyxcclxuICAgIGRlOiAnTicsXHJcbiAgICBmcjogJ04nLFxyXG4gICAgamE6ICfljJcnLFxyXG4gICAgY246ICfkuIoo5YyXKScsXHJcbiAgICBrbzogJ+u2geyqvScsXHJcbiAgfSxcclxuICBkaXJTOiB7XHJcbiAgICBlbjogJ1MnLFxyXG4gICAgZGU6ICdTJyxcclxuICAgIGZyOiAnUycsXHJcbiAgICBqYTogJ+WNlycsXHJcbiAgICBjbjogJ+S4iyjljZcpJyxcclxuICAgIGtvOiAn64Ko7Kq9JyxcclxuICB9LFxyXG4gIGRpckU6IHtcclxuICAgIGVuOiAnRScsXHJcbiAgICBkZTogJ08nLFxyXG4gICAgZnI6ICdFJyxcclxuICAgIGphOiAn5p2xJyxcclxuICAgIGNuOiAn5Y+zKOS4nCknLFxyXG4gICAga286ICfrj5nsqr0nLFxyXG4gIH0sXHJcbiAgZGlyVzoge1xyXG4gICAgZW46ICdXJyxcclxuICAgIGRlOiAnVycsXHJcbiAgICBmcjogJ08nLFxyXG4gICAgamE6ICfopb8nLFxyXG4gICAgY246ICflt6Yo6KW/KScsXHJcbiAgICBrbzogJ+yEnOyqvScsXHJcbiAgfSxcclxuICBkaXJOVzoge1xyXG4gICAgZW46ICdOVycsXHJcbiAgICBkZTogJ05XJyxcclxuICAgIGZyOiAnTk8nLFxyXG4gICAgamE6ICfljJfopb8nLFxyXG4gICAgY246ICflt6bkuIoo6KW/5YyXKScsXHJcbiAgICBrbzogJ+u2geyEnCcsXHJcbiAgfSxcclxuICBkaXJORToge1xyXG4gICAgZW46ICdORScsXHJcbiAgICBkZTogJ05PJyxcclxuICAgIGZyOiAnTkUnLFxyXG4gICAgamE6ICfljJfmnbEnLFxyXG4gICAgY246ICflj7PkuIoo5Lic5YyXKScsXHJcbiAgICBrbzogJ+u2geuPmScsXHJcbiAgfSxcclxuICBkaXJTVzoge1xyXG4gICAgZW46ICdTVycsXHJcbiAgICBkZTogJ1NXJyxcclxuICAgIGZyOiAnU08nLFxyXG4gICAgamE6ICfljZfopb8nLFxyXG4gICAgY246ICflt6bkuIso6KW/5Y2XKScsXHJcbiAgICBrbzogJ+uCqOyEnCcsXHJcbiAgfSxcclxuICBkaXJTRToge1xyXG4gICAgZW46ICdTRScsXHJcbiAgICBkZTogJ1NPJyxcclxuICAgIGZyOiAnU0UnLFxyXG4gICAgamE6ICfljZfmnbEnLFxyXG4gICAgY246ICflj7PkuIso5Lic5Y2XKScsXHJcbiAgICBrbzogJ+uCqOuPmScsXHJcbiAgfSxcclxuICAvLyBMaXRlcmFsIG51bWJlcnMuXHJcbiAgbnVtMDogbnVtYmVyVG9PdXRwdXRTdHJpbmcoMCksXHJcbiAgbnVtMTogbnVtYmVyVG9PdXRwdXRTdHJpbmcoMSksXHJcbiAgbnVtMjogbnVtYmVyVG9PdXRwdXRTdHJpbmcoMiksXHJcbiAgbnVtMzogbnVtYmVyVG9PdXRwdXRTdHJpbmcoMyksXHJcbiAgbnVtNDogbnVtYmVyVG9PdXRwdXRTdHJpbmcoNCksXHJcbiAgbnVtNTogbnVtYmVyVG9PdXRwdXRTdHJpbmcoNSksXHJcbiAgbnVtNjogbnVtYmVyVG9PdXRwdXRTdHJpbmcoNiksXHJcbiAgbnVtNzogbnVtYmVyVG9PdXRwdXRTdHJpbmcoNyksXHJcbiAgbnVtODogbnVtYmVyVG9PdXRwdXRTdHJpbmcoOCksXHJcbiAgbnVtOTogbnVtYmVyVG9PdXRwdXRTdHJpbmcoOSksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4iLCIvLyBPdmVybGF5UGx1Z2luIEFQSSBzZXR1cFxyXG5cclxuaW1wb3J0IHsgRXZlbnRNYXAsIEV2ZW50VHlwZSwgSU92ZXJsYXlIYW5kbGVyIH0gZnJvbSAnLi4vdHlwZXMvZXZlbnQnO1xyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgX19PdmVybGF5Q2FsbGJhY2s6IEV2ZW50TWFwW0V2ZW50VHlwZV07XHJcbiAgICBkaXNwYXRjaE92ZXJsYXlFdmVudD86IHR5cGVvZiBwcm9jZXNzRXZlbnQ7XHJcbiAgICBPdmVybGF5UGx1Z2luQXBpOiB7XHJcbiAgICAgIHJlYWR5OiBib29sZWFuO1xyXG4gICAgICBjYWxsSGFuZGxlcjogKG1zZzogc3RyaW5nLCBjYj86ICh2YWx1ZTogc3RyaW5nKSA9PiB1bmtub3duKSA9PiB2b2lkO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgVGhpcyBpcyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cclxuICAgICAqXHJcbiAgICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0byBpbXBvcnQgZnJvbSB0aGlzIGZpbGU6XHJcbiAgICAgKlxyXG4gICAgICogYGltcG9ydCB7IGFkZE92ZXJsYXlMaXN0ZW5lciB9IGZyb20gJy9wYXRoL3RvL292ZXJsYXlfcGx1Z2luX2FwaSc7YFxyXG4gICAgICovXHJcbiAgICBhZGRPdmVybGF5TGlzdGVuZXI6IElBZGRPdmVybGF5TGlzdGVuZXI7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIFRoaXMgaXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXHJcbiAgICAgKlxyXG4gICAgICogSXQgaXMgcmVjb21tZW5kZWQgdG8gaW1wb3J0IGZyb20gdGhpcyBmaWxlOlxyXG4gICAgICpcclxuICAgICAqIGBpbXBvcnQgeyByZW1vdmVPdmVybGF5TGlzdGVuZXIgfSBmcm9tICcvcGF0aC90by9vdmVybGF5X3BsdWdpbl9hcGknO2BcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlT3ZlcmxheUxpc3RlbmVyOiBJUmVtb3ZlT3ZlcmxheUxpc3RlbmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIGlzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxyXG4gICAgICpcclxuICAgICAqIEl0IGlzIHJlY29tbWVuZGVkIHRvIGltcG9ydCBmcm9tIHRoaXMgZmlsZTpcclxuICAgICAqXHJcbiAgICAgKiBgaW1wb3J0IHsgY2FsbE92ZXJsYXlIYW5kbGVyIH0gZnJvbSAnL3BhdGgvdG8vb3ZlcmxheV9wbHVnaW5fYXBpJztgXHJcbiAgICAgKi9cclxuICAgIGNhbGxPdmVybGF5SGFuZGxlcjogSU92ZXJsYXlIYW5kbGVyO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbnR5cGUgSUFkZE92ZXJsYXlMaXN0ZW5lciA9IDxUIGV4dGVuZHMgRXZlbnRUeXBlPihldmVudDogVCwgY2I6IEV2ZW50TWFwW1RdKSA9PiB2b2lkO1xyXG50eXBlIElSZW1vdmVPdmVybGF5TGlzdGVuZXIgPSA8VCBleHRlbmRzIEV2ZW50VHlwZT4oZXZlbnQ6IFQsIGNiOiBFdmVudE1hcFtUXSkgPT4gdm9pZDtcclxuXHJcbnR5cGUgU3Vic2NyaWJlcjxUPiA9IHtcclxuICBba2V5IGluIEV2ZW50VHlwZV0/OiBUW107XHJcbn07XHJcbnR5cGUgRXZlbnRQYXJhbWV0ZXIgPSBQYXJhbWV0ZXJzPEV2ZW50TWFwW0V2ZW50VHlwZV0+WzBdO1xyXG50eXBlIFZvaWRGdW5jPFQ+ID0gKC4uLmFyZ3M6IFRbXSkgPT4gdm9pZDtcclxuXHJcbmxldCBpbml0ZWQgPSBmYWxzZTtcclxuXHJcbmxldCB3c1VybDogUmVnRXhwRXhlY0FycmF5IHwgbnVsbCA9IG51bGw7XHJcbmxldCB3czogV2ViU29ja2V0IHwgbnVsbCA9IG51bGw7XHJcbmxldCBxdWV1ZTogKFxyXG4gIHsgW3M6IHN0cmluZ106IHVua25vd24gfSB8XHJcbiAgW3sgW3M6IHN0cmluZ106IHVua25vd24gfSwgKCh2YWx1ZTogc3RyaW5nIHwgbnVsbCkgPT4gdW5rbm93bikgfCB1bmRlZmluZWRdXHJcbilbXSB8IG51bGwgPSBbXTtcclxubGV0IHJzZXFDb3VudGVyID0gMDtcclxuY29uc3QgcmVzcG9uc2VQcm9taXNlczogUmVjb3JkPG51bWJlciwgKHZhbHVlOiB1bmtub3duKSA9PiB2b2lkPiA9IHt9O1xyXG5cclxuY29uc3Qgc3Vic2NyaWJlcnM6IFN1YnNjcmliZXI8Vm9pZEZ1bmM8dW5rbm93bj4+ID0ge307XHJcblxyXG5jb25zdCBzZW5kTWVzc2FnZSA9IChcclxuICAgIG1zZzogeyBbczogc3RyaW5nXTogdW5rbm93biB9LFxyXG4gICAgY2I/OiAodmFsdWU6IHN0cmluZyB8IG51bGwpID0+IHVua25vd24sXHJcbik6IHZvaWQgPT4ge1xyXG4gIGlmICh3cykge1xyXG4gICAgaWYgKHF1ZXVlKVxyXG4gICAgICBxdWV1ZS5wdXNoKG1zZyk7XHJcbiAgICBlbHNlXHJcbiAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkobXNnKSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmIChxdWV1ZSlcclxuICAgICAgcXVldWUucHVzaChbbXNnLCBjYl0pO1xyXG4gICAgZWxzZVxyXG4gICAgICB3aW5kb3cuT3ZlcmxheVBsdWdpbkFwaS5jYWxsSGFuZGxlcihKU09OLnN0cmluZ2lmeShtc2cpLCBjYik7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgcHJvY2Vzc0V2ZW50ID0gPFQgZXh0ZW5kcyBFdmVudFR5cGU+KG1zZzogUGFyYW1ldGVyczxFdmVudE1hcFtUXT5bMF0pOiB2b2lkID0+IHtcclxuICBpbml0KCk7XHJcblxyXG4gIGNvbnN0IHN1YnMgPSBzdWJzY3JpYmVyc1ttc2cudHlwZV07XHJcbiAgc3Vicz8uZm9yRWFjaCgoc3ViKSA9PiBzdWIobXNnKSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZGlzcGF0Y2hPdmVybGF5RXZlbnQgPSBwcm9jZXNzRXZlbnQ7XHJcblxyXG5leHBvcnQgY29uc3QgYWRkT3ZlcmxheUxpc3RlbmVyOiBJQWRkT3ZlcmxheUxpc3RlbmVyID0gKGV2ZW50LCBjYik6IHZvaWQgPT4ge1xyXG4gIGluaXQoKTtcclxuXHJcbiAgaWYgKCFzdWJzY3JpYmVyc1tldmVudF0pIHtcclxuICAgIHN1YnNjcmliZXJzW2V2ZW50XSA9IFtdO1xyXG5cclxuICAgIGlmICghcXVldWUpIHtcclxuICAgICAgc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgIGNhbGw6ICdzdWJzY3JpYmUnLFxyXG4gICAgICAgIGV2ZW50czogW2V2ZW50XSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmVyc1tldmVudF0/LnB1c2goY2IgYXMgVm9pZEZ1bmM8dW5rbm93bj4pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZU92ZXJsYXlMaXN0ZW5lcjogSVJlbW92ZU92ZXJsYXlMaXN0ZW5lciA9IChldmVudCwgY2IpOiB2b2lkID0+IHtcclxuICBpbml0KCk7XHJcblxyXG4gIGlmIChzdWJzY3JpYmVyc1tldmVudF0pIHtcclxuICAgIGNvbnN0IGxpc3QgPSBzdWJzY3JpYmVyc1tldmVudF07XHJcbiAgICBjb25zdCBwb3MgPSBsaXN0Py5pbmRleE9mKGNiIGFzIFZvaWRGdW5jPHVua25vd24+KTtcclxuXHJcbiAgICBpZiAocG9zICYmIHBvcyA+IC0xKVxyXG4gICAgICBsaXN0Py5zcGxpY2UocG9zLCAxKTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBjYWxsT3ZlcmxheUhhbmRsZXJJbnRlcm5hbDogSU92ZXJsYXlIYW5kbGVyID0gKFxyXG4gICAgX21zZzogeyBbczogc3RyaW5nXTogdW5rbm93biB9LFxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICBpbml0KCk7XHJcblxyXG4gIGNvbnN0IG1zZyA9IHtcclxuICAgIC4uLl9tc2csXHJcbiAgICByc2VxOiAwLFxyXG4gIH07XHJcbiAgbGV0IHA6IFByb21pc2U8dW5rbm93bj47XHJcblxyXG4gIGlmICh3cykge1xyXG4gICAgbXNnLnJzZXEgPSByc2VxQ291bnRlcisrO1xyXG4gICAgcCA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgIHJlc3BvbnNlUHJvbWlzZXNbbXNnLnJzZXFdID0gcmVzb2x2ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNlbmRNZXNzYWdlKG1zZyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHAgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBzZW5kTWVzc2FnZShtc2csIChkYXRhKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShkYXRhID09PSBudWxsID8gbnVsbCA6IEpTT04ucGFyc2UoZGF0YSkpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHA7XHJcbn07XHJcblxyXG5sZXQgY2FsbE92ZXJsYXlIYW5kbGVyT3ZlcnJpZGU6IElPdmVybGF5SGFuZGxlciB8IHVuZGVmaW5lZDtcclxuXHJcbmV4cG9ydCBjb25zdCBjYWxsT3ZlcmxheUhhbmRsZXI6IElPdmVybGF5SGFuZGxlciA9IChcclxuICAgIF9tc2c6IHsgW3M6IHN0cmluZ106IHVua25vd24gfSxcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbik6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgaW5pdCgpO1xyXG4gIGlmIChjYWxsT3ZlcmxheUhhbmRsZXJPdmVycmlkZSkge1xyXG4gICAgcmV0dXJuIGNhbGxPdmVybGF5SGFuZGxlck92ZXJyaWRlKFxyXG4gICAgICBfbXNnIGFzIFBhcmFtZXRlcnM8SU92ZXJsYXlIYW5kbGVyPlswXSxcclxuICAgICkgYXMgUHJvbWlzZTx1bmtub3duPjtcclxuICB9XHJcbiAgcmV0dXJuIGNhbGxPdmVybGF5SGFuZGxlckludGVybmFsKF9tc2cgYXMgUGFyYW1ldGVyczxJT3ZlcmxheUhhbmRsZXI+WzBdKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZXRDYWxsT3ZlcmxheUhhbmRsZXJPdmVycmlkZSA9IChvdmVycmlkZT86IElPdmVybGF5SGFuZGxlcik6IElPdmVybGF5SGFuZGxlciA9PiB7XHJcbiAgY2FsbE92ZXJsYXlIYW5kbGVyT3ZlcnJpZGUgPSBvdmVycmlkZTtcclxuICByZXR1cm4gY2FsbE92ZXJsYXlIYW5kbGVySW50ZXJuYWw7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaW5pdCA9ICgpOiB2b2lkID0+IHtcclxuICBpZiAoaW5pdGVkKVxyXG4gICAgcmV0dXJuO1xyXG5cclxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHdzVXJsID0gL1tcXD8mXU9WRVJMQVlfV1M9KFteJl0rKS8uZXhlYyh3aW5kb3cubG9jYXRpb24uaHJlZik7XHJcbiAgICBpZiAod3NVcmwpIHtcclxuICAgICAgY29uc3QgY29ubmVjdFdzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgd3MgPSBuZXcgV2ViU29ja2V0KHdzVXJsPy5bMV0gYXMgc3RyaW5nKTtcclxuXHJcbiAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoZSkgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsICgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdDb25uZWN0ZWQhJyk7XHJcblxyXG4gICAgICAgICAgY29uc3QgcSA9IHF1ZXVlID8/IFtdO1xyXG4gICAgICAgICAgcXVldWUgPSBudWxsO1xyXG5cclxuICAgICAgICAgIHNlbmRNZXNzYWdlKHtcclxuICAgICAgICAgICAgY2FsbDogJ3N1YnNjcmliZScsXHJcbiAgICAgICAgICAgIGV2ZW50czogT2JqZWN0LmtleXMoc3Vic2NyaWJlcnMpLFxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgZm9yIChjb25zdCBtc2cgb2YgcSkge1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobXNnKSlcclxuICAgICAgICAgICAgICBzZW5kTWVzc2FnZShtc2cpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB3cy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKF9tc2cpID0+IHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IEpTT04ucGFyc2UoX21zZy5kYXRhKSBhcyBFdmVudFBhcmFtZXRlciAmIHsgcnNlcT86IG51bWJlciB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKG1zZy5yc2VxICE9PSB1bmRlZmluZWQgJiYgcmVzcG9uc2VQcm9taXNlc1ttc2cucnNlcV0pIHtcclxuICAgICAgICAgICAgICByZXNwb25zZVByb21pc2VzW21zZy5yc2VxXT8uKG1zZyk7XHJcbiAgICAgICAgICAgICAgZGVsZXRlIHJlc3BvbnNlUHJvbWlzZXNbbXNnLnJzZXFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHByb2Nlc3NFdmVudChtc2cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgbWVzc2FnZSByZWNlaXZlZDogJywgX21zZyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICBxdWV1ZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1RyeWluZyB0byByZWNvbm5lY3QuLi4nKTtcclxuICAgICAgICAgIC8vIERvbid0IHNwYW0gdGhlIHNlcnZlciB3aXRoIHJldHJpZXMuXHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgY29ubmVjdFdzKCk7XHJcbiAgICAgICAgICB9LCAzMDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29ubmVjdFdzKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCB3YWl0Rm9yQXBpID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuT3ZlcmxheVBsdWdpbkFwaSB8fCAhd2luZG93Lk92ZXJsYXlQbHVnaW5BcGkucmVhZHkpIHtcclxuICAgICAgICAgIHNldFRpbWVvdXQod2FpdEZvckFwaSwgMzAwKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHEgPSBxdWV1ZSA/PyBbXTtcclxuICAgICAgICBxdWV1ZSA9IG51bGw7XHJcblxyXG4gICAgICAgIHdpbmRvdy5fX092ZXJsYXlDYWxsYmFjayA9IHByb2Nlc3NFdmVudDtcclxuXHJcbiAgICAgICAgc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgY2FsbDogJ3N1YnNjcmliZScsXHJcbiAgICAgICAgICBldmVudHM6IE9iamVjdC5rZXlzKHN1YnNjcmliZXJzKSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHEpIHtcclxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKVxyXG4gICAgICAgICAgICBzZW5kTWVzc2FnZShpdGVtWzBdLCBpdGVtWzFdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB3YWl0Rm9yQXBpKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGVyZSB0aGUgT3ZlcmxheVBsdWdpbiBBUEkgaXMgcmVnaXN0ZXJlZCB0byB0aGUgd2luZG93IG9iamVjdCxcclxuICAgIC8vIGJ1dCB0aGlzIGlzIG1haW5seSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuRm9yIGNhY3Rib3QncyBidWlsdC1pbiBmaWxlcyxcclxuICAgIC8vIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgdmFyaW91cyBmdW5jdGlvbnMgZXhwb3J0ZWQgaW4gcmVzb3VyY2VzL292ZXJsYXlfcGx1Z2luX2FwaS50cy5cclxuICAgIHdpbmRvdy5hZGRPdmVybGF5TGlzdGVuZXIgPSBhZGRPdmVybGF5TGlzdGVuZXI7XHJcbiAgICB3aW5kb3cucmVtb3ZlT3ZlcmxheUxpc3RlbmVyID0gcmVtb3ZlT3ZlcmxheUxpc3RlbmVyO1xyXG4gICAgd2luZG93LmNhbGxPdmVybGF5SGFuZGxlciA9IGNhbGxPdmVybGF5SGFuZGxlcjtcclxuICAgIHdpbmRvdy5kaXNwYXRjaE92ZXJsYXlFdmVudCA9IGRpc3BhdGNoT3ZlcmxheUV2ZW50O1xyXG4gIH1cclxuXHJcbiAgaW5pdGVkID0gdHJ1ZTtcclxufTtcclxuIiwiaW1wb3J0IHsgQmFzZVJlZ0V4cCB9IGZyb20gJy4uL3R5cGVzL3RyaWdnZXInO1xyXG5cclxuZXhwb3J0IHR5cGUgUGFyYW1zPFQgZXh0ZW5kcyBzdHJpbmc+ID1cclxuICBQYXJ0aWFsPFJlY29yZDxFeGNsdWRlPFQsICd0aW1lc3RhbXAnIHwgJ2NhcHR1cmUnPiwgc3RyaW5nIHwgc3RyaW5nW10+ICZcclxuICB7ICd0aW1lc3RhbXAnOiBzdHJpbmc7ICdjYXB0dXJlJzogYm9vbGVhbiB9PjtcclxuXHJcbmV4cG9ydCB0eXBlIFJlZ2V4PFQgZXh0ZW5kcyBzdHJpbmc+ID0gQmFzZVJlZ0V4cDxFeGNsdWRlPFQsICdjYXB0dXJlJz4+O1xyXG5cclxudHlwZSBWYWxpZFN0cmluZ09yQXJyYXkgPSBzdHJpbmcgfCBzdHJpbmdbXTtcclxuXHJcbmNvbnN0IHN0YXJ0c1VzaW5nUGFyYW1zID0gWyd0aW1lc3RhbXAnLCAnc291cmNlJywgJ2lkJywgJ2FiaWxpdHknLCAndGFyZ2V0JywgJ2NhcHR1cmUnXSBhcyBjb25zdDtcclxuY29uc3QgYWJpbGl0eVBhcmFtcyA9IFsndGltZXN0YW1wJywgJ3NvdXJjZScsICdzb3VyY2VJZCcsICdpZCcsICdhYmlsaXR5JywgJ3RhcmdldElkJywgJ3RhcmdldCcsICdjYXB0dXJlJ10gYXMgY29uc3Q7XHJcbmNvbnN0IGFiaWxpdHlGdWxsUGFyYW1zID0gW1xyXG4gICd0aW1lc3RhbXAnLFxyXG4gICdzb3VyY2VJZCcsXHJcbiAgJ3NvdXJjZScsXHJcbiAgJ2lkJyxcclxuICAnYWJpbGl0eScsXHJcbiAgJ3RhcmdldElkJyxcclxuICAndGFyZ2V0JyxcclxuICAnZmxhZ3MnLFxyXG4gICdmbGFnMCcsXHJcbiAgJ2ZsYWcxJyxcclxuICAnZmxhZzInLFxyXG4gICdmbGFnMycsXHJcbiAgJ2ZsYWc0JyxcclxuICAnZmxhZzUnLFxyXG4gICdmbGFnNicsXHJcbiAgJ2ZsYWc3JyxcclxuICAnZmxhZzgnLFxyXG4gICdmbGFnOScsXHJcbiAgJ2ZsYWcxMCcsXHJcbiAgJ2ZsYWcxMScsXHJcbiAgJ2ZsYWcxMicsXHJcbiAgJ2ZsYWcxMycsXHJcbiAgJ2ZsYWcxNCcsXHJcbiAgJ3RhcmdldEhwJyxcclxuICAndGFyZ2V0TWF4SHAnLFxyXG4gICd0YXJnZXRNcCcsXHJcbiAgJ3RhcmdldE1heE1wJyxcclxuICAndGFyZ2V0WCcsXHJcbiAgJ3RhcmdldFknLFxyXG4gICd0YXJnZXRaJyxcclxuICAndGFyZ2V0SGVhZGluZycsXHJcbiAgJ2hwJyxcclxuICAnbWF4SHAnLFxyXG4gICdtcCcsXHJcbiAgJ21heE1wJyxcclxuICAneCcsXHJcbiAgJ3knLFxyXG4gICd6JyxcclxuICAnaGVhZGluZycsXHJcbiAgJ2NhcHR1cmUnLFxyXG5dIGFzIGNvbnN0O1xyXG5jb25zdCBoZWFkTWFya2VyUGFyYW1zID0gWyd0aW1lc3RhbXAnLCAndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ2lkJywgJ2NhcHR1cmUnXSBhcyBjb25zdDtcclxuY29uc3QgYWRkZWRDb21iYXRhbnRQYXJhbXMgPSBbJ3RpbWVzdGFtcCcsICduYW1lJywgJ2NhcHR1cmUnXSBhcyBjb25zdDtcclxuY29uc3QgYWRkZWRDb21iYXRhbnRGdWxsUGFyYW1zID0gW1xyXG4gICd0aW1lc3RhbXAnLFxyXG4gICdpZCcsXHJcbiAgJ25hbWUnLFxyXG4gICdqb2InLFxyXG4gICdsZXZlbCcsXHJcbiAgJ2hwJyxcclxuICAneCcsXHJcbiAgJ3knLFxyXG4gICd6JyxcclxuICAnbnBjSWQnLFxyXG4gICdjYXB0dXJlJyxcclxuXSBhcyBjb25zdDtcclxuY29uc3QgcmVtb3ZpbmdDb21iYXRhbnRQYXJhbXMgPSBbXHJcbiAgJ3RpbWVzdGFtcCcsXHJcbiAgJ2lkJyxcclxuICAnbmFtZScsXHJcbiAgJ2hwJyxcclxuICAneCcsXHJcbiAgJ3knLFxyXG4gICd6JyxcclxuICAnY2FwdHVyZScsXHJcbl0gYXMgY29uc3Q7XHJcbmNvbnN0IGdhaW5zRWZmZWN0UGFyYW1zID0gWyd0aW1lc3RhbXAnLCAndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ2VmZmVjdCcsICdzb3VyY2UnLCAnZHVyYXRpb24nLCAnY2FwdHVyZSddIGFzIGNvbnN0O1xyXG5jb25zdCBzdGF0dXNFZmZlY3RFeHBsaWNpdFBhcmFtcyA9IFtcclxuICAndGltZXN0YW1wJyxcclxuICAndGFyZ2V0SWQnLFxyXG4gICd0YXJnZXQnLFxyXG4gICdqb2InLFxyXG4gICdocCcsXHJcbiAgJ21heEhwJyxcclxuICAnbXAnLFxyXG4gICdtYXhNcCcsXHJcbiAgJ3gnLFxyXG4gICd5JyxcclxuICAneicsXHJcbiAgJ2hlYWRpbmcnLFxyXG4gICdkYXRhMCcsXHJcbiAgJ2RhdGExJyxcclxuICAnZGF0YTInLFxyXG4gICdkYXRhMycsXHJcbiAgJ2RhdGE0JyxcclxuICAnY2FwdHVyZScsXHJcbl0gYXMgY29uc3Q7XHJcbmNvbnN0IGxvc2VzRWZmZWN0UGFyYW1zID0gWyd0aW1lc3RhbXAnLCAndGFyZ2V0SWQnLCAndGFyZ2V0JywgJ2VmZmVjdCcsICdzb3VyY2UnLCAnY2FwdHVyZSddIGFzIGNvbnN0O1xyXG5jb25zdCBzdGF0Q2hhbmdlUGFyYW1zID0gW1xyXG4gICd0aW1lc3RhbXAnLFxyXG4gICdqb2InLFxyXG4gICdzdHJlbmd0aCcsXHJcbiAgJ2RleHRlcml0eScsXHJcbiAgJ3ZpdGFsaXR5JyxcclxuICAnaW50ZWxsaWdlbmNlJyxcclxuICAnbWluZCcsXHJcbiAgJ3BpZXR5JyxcclxuICAnYXR0YWNrUG93ZXInLFxyXG4gICdkaXJlY3RIaXQnLFxyXG4gICdjcml0aWNhbEhpdCcsXHJcbiAgJ2F0dGFja01hZ2ljUG90ZW5jeScsXHJcbiAgJ2hlYWxNYWdpY1BvdGVuY3knLFxyXG4gICdkZXRlcm1pbmF0aW9uJyxcclxuICAnc2tpbGxTcGVlZCcsXHJcbiAgJ3NwZWxsU3BlZWQnLFxyXG4gICd0ZW5hY2l0eScsXHJcbiAgJ2NhcHR1cmUnLFxyXG5dIGFzIGNvbnN0O1xyXG5jb25zdCB0ZXRoZXJQYXJhbXMgPSBbJ3RpbWVzdGFtcCcsICdzb3VyY2UnLCAnc291cmNlSWQnLCAndGFyZ2V0JywgJ3RhcmdldElkJywgJ2lkJywgJ2NhcHR1cmUnXSBhcyBjb25zdDtcclxuY29uc3Qgd2FzRGVmZWF0ZWRQYXJhbXMgPSBbJ3RpbWVzdGFtcCcsICd0YXJnZXQnLCAnc291cmNlJywgJ2NhcHR1cmUnXSBhcyBjb25zdDtcclxuY29uc3QgaGFzSFBQYXJhbXMgPSBbJ3RpbWVzdGFtcCcsICduYW1lJywgJ2hwJywgJ2NhcHR1cmUnXSBhcyBjb25zdDtcclxuY29uc3QgZWNob1BhcmFtcyA9IFsndGltZXN0YW1wJywgJ2NvZGUnLCAnbGluZScsICdjYXB0dXJlJ10gYXMgY29uc3Q7XHJcbmNvbnN0IGRpYWxvZ1BhcmFtcyA9IFsndGltZXN0YW1wJywgJ2NvZGUnLCAnbGluZScsICduYW1lJywgJ2NhcHR1cmUnXSBhcyBjb25zdDtcclxuY29uc3QgbWVzc2FnZVBhcmFtcyA9IFsndGltZXN0YW1wJywgJ2NvZGUnLCAnbGluZScsICdjYXB0dXJlJ10gYXMgY29uc3Q7XHJcbmNvbnN0IGdhbWVMb2dQYXJhbXMgPSBbJ3RpbWVzdGFtcCcsICdjb2RlJywgJ2xpbmUnLCAnY2FwdHVyZSddIGFzIGNvbnN0O1xyXG5jb25zdCBnYW1lTmFtZUxvZ1BhcmFtcyA9IFsndGltZXN0YW1wJywgJ2NvZGUnLCAnbmFtZScsICdsaW5lJywgJ2NhcHR1cmUnXSBhcyBjb25zdDtcclxuY29uc3QgY2hhbmdlWm9uZVBhcmFtcyA9IFsndGltZXN0YW1wJywgJ25hbWUnLCAnY2FwdHVyZSddIGFzIGNvbnN0O1xyXG5jb25zdCBuZXR3b3JrNmRQYXJhbXMgPSBbJ3RpbWVzdGFtcCcsICdpbnN0YW5jZScsICdjb21tYW5kJywgJ2RhdGEwJywgJ2RhdGExJywgJ2RhdGEyJywgJ2RhdGEzJywgJ2NhcHR1cmUnXSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCB0eXBlIFN0YXJ0c1VzaW5nUGFyYW1zID0gdHlwZW9mIHN0YXJ0c1VzaW5nUGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIEFiaWxpdHlQYXJhbXMgPSB0eXBlb2YgYWJpbGl0eVBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBBYmlsaXR5RnVsbFBhcmFtcyA9IHR5cGVvZiBhYmlsaXR5RnVsbFBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBIZWFkTWFya2VyUGFyYW1zID0gdHlwZW9mIGhlYWRNYXJrZXJQYXJhbXNbbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgQWRkZWRDb21iYXRhbnRQYXJhbXMgPSB0eXBlb2YgYWRkZWRDb21iYXRhbnRQYXJhbXNbbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgQWRkZWRDb21iYXRhbnRGdWxsUGFyYW1zID0gdHlwZW9mIGFkZGVkQ29tYmF0YW50RnVsbFBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBSZW1vdmluZ0NvbWJhdGFudFBhcmFtcyA9IHR5cGVvZiByZW1vdmluZ0NvbWJhdGFudFBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBHYWluc0VmZmVjdFBhcmFtcyA9IHR5cGVvZiBnYWluc0VmZmVjdFBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBTdGF0dXNFZmZlY3RFeHBsaWNpdFBhcmFtcyA9IHR5cGVvZiBzdGF0dXNFZmZlY3RFeHBsaWNpdFBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBMb3Nlc0VmZmVjdFBhcmFtcyA9IHR5cGVvZiBsb3Nlc0VmZmVjdFBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBTdGF0Q2hhbmdlUGFyYW1zID0gdHlwZW9mIHN0YXRDaGFuZ2VQYXJhbXNbbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgVGV0aGVyUGFyYW1zID0gdHlwZW9mIHRldGhlclBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBXYXNEZWZlYXRlZFBhcmFtcyA9IHR5cGVvZiB3YXNEZWZlYXRlZFBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBIYXNIUFBhcmFtcyA9IHR5cGVvZiBoYXNIUFBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBFY2hvUGFyYW1zID0gdHlwZW9mIGVjaG9QYXJhbXNbbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgRGlhbG9nUGFyYW1zID0gdHlwZW9mIGRpYWxvZ1BhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBNZXNzYWdlUGFyYW1zID0gdHlwZW9mIG1lc3NhZ2VQYXJhbXNbbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgR2FtZUxvZ1BhcmFtcyA9IHR5cGVvZiBnYW1lTG9nUGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIEdhbWVOYW1lTG9nUGFyYW1zID0gdHlwZW9mIGdhbWVOYW1lTG9nUGFyYW1zW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIENoYW5nZVpvbmVQYXJhbXMgPSB0eXBlb2YgY2hhbmdlWm9uZVBhcmFtc1tudW1iZXJdO1xyXG5leHBvcnQgdHlwZSBOZXR3b3JrNmRQYXJhbXMgPSB0eXBlb2YgbmV0d29yazZkUGFyYW1zW251bWJlcl07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWdleGVzIHtcclxuICAvKipcclxuICAgKiBmaWVsZHM6IHNvdXJjZSwgaWQsIGFiaWxpdHksIHRhcmdldCwgY2FwdHVyZVxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxNC1uZXR3b3Jrc3RhcnRzY2FzdGluZ1xyXG4gICAqL1xyXG4gIHN0YXRpYyBzdGFydHNVc2luZyhmPzogUGFyYW1zPFN0YXJ0c1VzaW5nUGFyYW1zPik6IFJlZ2V4PFN0YXJ0c1VzaW5nUGFyYW1zPiB7XHJcbiAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBmID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdzdGFydHNVc2luZycsIHN0YXJ0c1VzaW5nUGFyYW1zKTtcclxuICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xyXG4gICAgbGV0IHN0ciA9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0aW1lc3RhbXAnLCAnXFxcXHl7VGltZXN0YW1wfScpICtcclxuICAgICAgJyAxNDonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2lkJywgZi5pZCwgJ1xcXFx5e0FiaWxpdHlDb2RlfScpICsgJzonO1xyXG5cclxuICAgIGlmIChmLnNvdXJjZSB8fCBmLmlkIHx8IGYudGFyZ2V0IHx8IGNhcHR1cmUpXHJcbiAgICAgIHN0ciArPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnc291cmNlJywgZi5zb3VyY2UsICcuKj8nKSArICcgc3RhcnRzIHVzaW5nICc7XHJcblxyXG4gICAgaWYgKGYuYWJpbGl0eSB8fCBmLnRhcmdldCB8fCBjYXB0dXJlKVxyXG4gICAgICBzdHIgKz0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2FiaWxpdHknLCBmLmFiaWxpdHksICcuKj8nKSArICcgb24gJztcclxuXHJcbiAgICBpZiAoZi50YXJnZXQgfHwgY2FwdHVyZSlcclxuICAgICAgc3RyICs9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXQnLCBmLnRhcmdldCwgJy4qPycpICsgJ1xcXFwuJztcclxuXHJcbiAgICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZmllbGRzOiBzb3VyY2VJZCwgc291cmNlLCBpZCwgYWJpbGl0eSwgdGFyZ2V0SWQsIHRhcmdldCwgY2FwdHVyZVxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxNS1uZXR3b3JrYWJpbGl0eVxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxNi1uZXR3b3JrYW9lYWJpbGl0eVxyXG4gICAqL1xyXG4gIHN0YXRpYyBhYmlsaXR5KGY/OiBQYXJhbXM8QWJpbGl0eVBhcmFtcz4pOiBSZWdleDxBYmlsaXR5UGFyYW1zPiB7XHJcbiAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBmID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdhYmlsaXR5JywgYWJpbGl0eVBhcmFtcyk7XHJcbiAgICBjb25zdCBjYXB0dXJlID0gUmVnZXhlcy50cnVlSWZVbmRlZmluZWQoZi5jYXB0dXJlKTtcclxuICAgIGxldCBzdHIgPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGltZXN0YW1wJywgJ1xcXFx5e1RpbWVzdGFtcH0nKSArXHJcbiAgICAgICcgMVs1Nl06JyArIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdzb3VyY2VJZCcsICdcXFxceXtPYmplY3RJZH0nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdzb3VyY2UnLCBmLnNvdXJjZSwgJ1teOl0qPycpICsgJzonO1xyXG5cclxuICAgIGlmIChmLmlkIHx8IGYuYWJpbGl0eSB8fCBmLnRhcmdldCB8fCBmLnRhcmdldElkIHx8IGNhcHR1cmUpXHJcbiAgICAgIHN0ciArPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnaWQnLCBmLmlkLCAnXFxcXHl7QWJpbGl0eUNvZGV9JykgKyAnOic7XHJcblxyXG4gICAgaWYgKGYuYWJpbGl0eSB8fCBmLnRhcmdldCB8fCBmLnRhcmdldElkIHx8IGNhcHR1cmUpXHJcbiAgICAgIHN0ciArPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnYWJpbGl0eScsIGYuYWJpbGl0eSwgJ1teOl0qPycpICsgJzonO1xyXG5cclxuICAgIGlmIChmLnRhcmdldCB8fCBmLnRhcmdldElkIHx8IGNhcHR1cmUpXHJcbiAgICAgIHN0ciArPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0SWQnLCAnXFxcXHl7T2JqZWN0SWR9JykgKyAnOic7XHJcblxyXG4gICAgaWYgKGYudGFyZ2V0IHx8IGNhcHR1cmUpXHJcbiAgICAgIHN0ciArPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0JywgZi50YXJnZXQsICdbXjpdKj8nKSArICc6JztcclxuXHJcbiAgICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZmllbGRzOiBzb3VyY2VJZCwgc291cmNlLCBpZCwgYWJpbGl0eSwgdGFyZ2V0SWQsIHRhcmdldCwgZmxhZ3MsIHgsIHksIHosIGhlYWRpbmcsIGNhcHR1cmVcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMTUtbmV0d29ya2FiaWxpdHlcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMTYtbmV0d29ya2FvZWFiaWxpdHlcclxuICAgKi9cclxuICBzdGF0aWMgYWJpbGl0eUZ1bGwoZj86IFBhcmFtczxBYmlsaXR5RnVsbFBhcmFtcz4pOiBSZWdleDxBYmlsaXR5RnVsbFBhcmFtcz4ge1xyXG4gICAgaWYgKHR5cGVvZiBmID09PSAndW5kZWZpbmVkJylcclxuICAgICAgZiA9IHt9O1xyXG4gICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnYWJpbGl0eUZ1bGwnLCBhYmlsaXR5RnVsbFBhcmFtcyk7XHJcbiAgICBjb25zdCBjYXB0dXJlID0gUmVnZXhlcy50cnVlSWZVbmRlZmluZWQoZi5jYXB0dXJlKTtcclxuICAgIGNvbnN0IHN0ciA9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0aW1lc3RhbXAnLCAnXFxcXHl7VGltZXN0YW1wfScpICtcclxuICAgICAgJyAxWzU2XTonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3NvdXJjZUlkJywgZi5zb3VyY2VJZCwgJ1xcXFx5e09iamVjdElkfScpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3NvdXJjZScsIGYuc291cmNlLCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnaWQnLCBmLmlkLCAnXFxcXHl7QWJpbGl0eUNvZGV9JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnYWJpbGl0eScsIGYuYWJpbGl0eSwgJ1teOl0qPycpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RhcmdldElkJywgZi50YXJnZXRJZCwgJ1xcXFx5e09iamVjdElkfScpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RhcmdldCcsIGYudGFyZ2V0LCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZ3MnLCBmLmZsYWdzLCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzAnLCBmLmZsYWcwLCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzEnLCBmLmZsYWcxLCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzInLCBmLmZsYWcyLCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzMnLCBmLmZsYWczLCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzQnLCBmLmZsYWc0LCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzUnLCBmLmZsYWc1LCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzYnLCBmLmZsYWc2LCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzcnLCBmLmZsYWc3LCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzgnLCBmLmZsYWc4LCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzknLCBmLmZsYWc5LCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzEwJywgZi5mbGFnMTAsICdbXjpdKj8nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdmbGFnMTEnLCBmLmZsYWcxMSwgJ1teOl0qPycpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2ZsYWcxMicsIGYuZmxhZzEyLCAnW146XSo/JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZmxhZzEzJywgZi5mbGFnMTMsICdbXjpdKj8nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdmbGFnMTQnLCBmLmZsYWcxMywgJ1teOl0qPycpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0SHAnLCBmLnRhcmdldEhwLCAnXFxcXHl7RmxvYXR9JykpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0TWF4SHAnLCBmLnRhcmdldE1heEhwLCAnXFxcXHl7RmxvYXR9JykpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0TXAnLCBmLnRhcmdldE1wLCAnXFxcXHl7RmxvYXR9JykpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0TWF4TXAnLCBmLnRhcmdldE1heE1wLCAnXFxcXHl7RmxvYXR9JykpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5vcHRpb25hbCgnXFxcXHl7RmxvYXR9JykgKyAnOicgKyAvLyBUYXJnZXQgVFBcclxuICAgICAgUmVnZXhlcy5vcHRpb25hbCgnXFxcXHl7RmxvYXR9JykgKyAnOicgKyAvLyBUYXJnZXQgTWF4IFRQXHJcbiAgICAgIFJlZ2V4ZXMub3B0aW9uYWwoUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RhcmdldFgnLCBmLnRhcmdldFgsICdcXFxceXtGbG9hdH0nKSkgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm9wdGlvbmFsKFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRZJywgZi50YXJnZXRZLCAnXFxcXHl7RmxvYXR9JykpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0WicsIGYudGFyZ2V0WiwgJ1xcXFx5e0Zsb2F0fScpKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMub3B0aW9uYWwoUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RhcmdldEhlYWRpbmcnLCBmLnRhcmdldEhlYWRpbmcsICdcXFxceXtGbG9hdH0nKSkgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnaHAnLCBmLmhwLCAnXFxcXHl7RmxvYXR9JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnbWF4SHAnLCBmLm1heEhwLCAnXFxcXHl7RmxvYXR9JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnbXAnLCBmLm1wLCAnXFxcXHl7RmxvYXR9JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnbWF4TXAnLCBmLm1heE1wLCAnXFxcXHl7RmxvYXR9JykgKyAnOicgK1xyXG4gICAgICAnXFxcXHl7RmxvYXR9OicgKyAvLyBTb3VyY2UgVFBcclxuICAgICAgJ1xcXFx5e0Zsb2F0fTonICsgLy8gU291cmNlIE1heCBUUFxyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAneCcsIGYueCwgJ1xcXFx5e0Zsb2F0fScpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3knLCBmLnksICdcXFxceXtGbG9hdH0nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd6JywgZi56LCAnXFxcXHl7RmxvYXR9JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnaGVhZGluZycsIGYuaGVhZGluZywgJ1xcXFx5e0Zsb2F0fScpICsgJzonICtcclxuICAgICAgJy4qPyQnOyAvLyBVbmtub3duIGxhc3QgZmllbGRcclxuICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogZmllbGRzOiB0YXJnZXRJZCwgdGFyZ2V0LCBpZCwgY2FwdHVyZVxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxYi1uZXR3b3JrdGFyZ2V0aWNvbi1oZWFkLW1hcmtlcnNcclxuICAgKi9cclxuICBzdGF0aWMgaGVhZE1hcmtlcihmPzogUGFyYW1zPEhlYWRNYXJrZXJQYXJhbXM+KTogUmVnZXg8SGVhZE1hcmtlclBhcmFtcz4ge1xyXG4gICAgaWYgKHR5cGVvZiBmID09PSAndW5kZWZpbmVkJylcclxuICAgICAgZiA9IHt9O1xyXG4gICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnaGVhZE1hcmtlcicsIGhlYWRNYXJrZXJQYXJhbXMpO1xyXG4gICAgY29uc3QgY2FwdHVyZSA9IFJlZ2V4ZXMudHJ1ZUlmVW5kZWZpbmVkKGYuY2FwdHVyZSk7XHJcbiAgICBjb25zdCBzdHIgPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGltZXN0YW1wJywgJ1xcXFx5e1RpbWVzdGFtcH0nKSArXHJcbiAgICAgICcgMUI6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRJZCcsIGYudGFyZ2V0SWQsICdcXFxceXtPYmplY3RJZH0nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXQnLCBmLnRhcmdldCwgJ1teOl0qPycpICsgJzouLi4uOi4uLi46JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdpZCcsIGYuaWQsICcuLi4uJykgKyAnOic7XHJcbiAgICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xyXG4gIH1cclxuXHJcbiAgLy8gZmllbGRzOiBuYW1lLCBjYXB0dXJlXHJcbiAgLy8gbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzAzLWFkZGNvbWJhdGFudFxyXG4gIHN0YXRpYyBhZGRlZENvbWJhdGFudChmPzogUGFyYW1zPEFkZGVkQ29tYmF0YW50UGFyYW1zPik6IFJlZ2V4PEFkZGVkQ29tYmF0YW50UGFyYW1zPiB7XHJcbiAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBmID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdhZGRlZENvbWJhdGFudCcsIGFkZGVkQ29tYmF0YW50UGFyYW1zKTtcclxuICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xyXG4gICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxceXtUaW1lc3RhbXB9JykgK1xyXG4gICAgICAnIDAzOlxcXFx5e09iamVjdElkfTpBZGRlZCBuZXcgY29tYmF0YW50ICcgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnbmFtZScsIGYubmFtZSwgJy4qPycpICsgJ1xcXFwuJztcclxuICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBmaWVsZHM6IGlkLCBuYW1lLCBocCwgeCwgeSwgeiwgbnBjSWQsIGNhcHR1cmVcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMDMtYWRkY29tYmF0YW50XHJcbiAgICovXHJcbiAgc3RhdGljIGFkZGVkQ29tYmF0YW50RnVsbChcclxuICAgICAgZj86IFBhcmFtczxBZGRlZENvbWJhdGFudEZ1bGxQYXJhbXM+LFxyXG4gICk6IFJlZ2V4PEFkZGVkQ29tYmF0YW50RnVsbFBhcmFtcz4ge1xyXG4gICAgaWYgKHR5cGVvZiBmID09PSAndW5kZWZpbmVkJylcclxuICAgICAgZiA9IHt9O1xyXG4gICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnYWRkZWRDb21iYXRhbnRGdWxsJywgYWRkZWRDb21iYXRhbnRGdWxsUGFyYW1zKTtcclxuICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xyXG4gICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxceXtUaW1lc3RhbXB9JykgK1xyXG4gICAgICAnIDAzOicgKyBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnaWQnLCBmLmlkLCAnXFxcXHl7T2JqZWN0SWR9JykgK1xyXG4gICAgICAnOkFkZGVkIG5ldyBjb21iYXRhbnQgJyArIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICduYW1lJywgZi5uYW1lLCAnW146XSo/JykgK1xyXG4gICAgICAnXFxcXC4gezJ9Sm9iOiAnICsgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2pvYicsIGYuam9iLCAnW146XSo/JykgK1xyXG4gICAgICAnIExldmVsOiAnICsgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2xldmVsJywgZi5sZXZlbCwgJ1teOl0qPycpICtcclxuICAgICAgJyBNYXggSFA6ICcgKyBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnaHAnLCBmLmhwLCAnWzAtOV0rJykgKyAnXFwuJyArXHJcbiAgICAgICcuKj9Qb3M6IFxcXFwoJyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd4JywgZi54LCAnXFxcXHl7RmxvYXR9JykgKyAnLCcgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAneScsIGYueSwgJ1xcXFx5e0Zsb2F0fScpICsgJywnICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3onLCBmLnosICdcXFxceXtGbG9hdH0nKSArICdcXFxcKScgK1xyXG4gICAgICAnKD86IFxcXFwoJyArIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICducGNJZCcsIGYubnBjSWQsICcuKj8nKSArICdcXFxcKSk/XFxcXC4nO1xyXG4gICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZpZWxkczogaWQsIG5hbWUsIGhwLCBjYXB0dXJlXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzA0LXJlbW92ZWNvbWJhdGFudFxyXG4gICAqL1xyXG4gIHN0YXRpYyByZW1vdmluZ0NvbWJhdGFudChmPzogUGFyYW1zPFJlbW92aW5nQ29tYmF0YW50UGFyYW1zPik6IFJlZ2V4PFJlbW92aW5nQ29tYmF0YW50UGFyYW1zPiB7XHJcbiAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBmID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdyZW1vdmluZ0NvbWJhdGFudCcsIHJlbW92aW5nQ29tYmF0YW50UGFyYW1zKTtcclxuICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xyXG4gICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxceXtUaW1lc3RhbXB9JykgK1xyXG4gICAgICAnIDA0OicgKyBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnaWQnLCAnXFxcXHl7T2JqZWN0SWR9JykgK1xyXG4gICAgICAnOlJlbW92aW5nIGNvbWJhdGFudCAnICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ25hbWUnLCBmLm5hbWUsICcuKj8nKSArICdcXFxcLicgK1xyXG4gICAgICAnLio/TWF4IEhQOiAnICsgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2hwJywgZi5ocCwgJ1swLTldKycpICsgJ1xcLicgK1xyXG4gICAgICBSZWdleGVzLm9wdGlvbmFsKCcuKj9Qb3M6IFxcXFwoJyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd4JywgZi54LCAnXFxcXHl7RmxvYXR9JykgKyAnLCcgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAneScsIGYueSwgJ1xcXFx5e0Zsb2F0fScpICsgJywnICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3onLCBmLnosICdcXFxceXtGbG9hdH0nKSArICdcXFxcKScpO1xyXG4gICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcclxuICB9XHJcblxyXG5cclxuICAvLyBmaWVsZHM6IHRhcmdldElkLCB0YXJnZXQsIGVmZmVjdCwgc291cmNlLCBkdXJhdGlvbiwgY2FwdHVyZVxyXG4gIC8vIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMxYS1uZXR3b3JrYnVmZlxyXG4gIHN0YXRpYyBnYWluc0VmZmVjdChmPzogUGFyYW1zPEdhaW5zRWZmZWN0UGFyYW1zPik6IFJlZ2V4PEdhaW5zRWZmZWN0UGFyYW1zPiB7XHJcbiAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBmID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdnYWluc0VmZmVjdCcsIGdhaW5zRWZmZWN0UGFyYW1zKTtcclxuICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xyXG4gICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxceXtUaW1lc3RhbXB9JykgK1xyXG4gICAgICAnIDFBOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0SWQnLCBmLnRhcmdldElkLCAnXFxcXHl7T2JqZWN0SWR9JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGFyZ2V0JywgZi50YXJnZXQsICcuKj8nKSArXHJcbiAgICAgICcgZ2FpbnMgdGhlIGVmZmVjdCBvZiAnICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2VmZmVjdCcsIGYuZWZmZWN0LCAnLio/JykgK1xyXG4gICAgICAnIGZyb20gJyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdzb3VyY2UnLCBmLnNvdXJjZSwgJy4qPycpICtcclxuICAgICAgJyBmb3IgJyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdkdXJhdGlvbicsIGYuZHVyYXRpb24sICdcXFxceXtGbG9hdH0nKSArXHJcbiAgICAgICcgU2Vjb25kc1xcXFwuJztcclxuICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQcmVmZXIgZ2FpbnNFZmZlY3Qgb3ZlciB0aGlzIGZ1bmN0aW9uIHVubGVzcyB5b3UgcmVhbGx5IG5lZWQgZXh0cmEgZGF0YS5cclxuICAgKiBmaWVsZHM6IHRhcmdldElkLCB0YXJnZXQsIGpvYiwgaHAsIG1heEhwLCBtcCwgbWF4TXAsIHgsIHksIHosIGhlYWRpbmcsXHJcbiAgICogICAgICAgICBkYXRhMCwgZGF0YTEsIGRhdGEyLCBkYXRhMywgZGF0YTRcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMjYtbmV0d29ya3N0YXR1c2VmZmVjdHNcclxuICAgKi9cclxuICBzdGF0aWMgc3RhdHVzRWZmZWN0RXhwbGljaXQoXHJcbiAgICAgIGY/OiBQYXJhbXM8U3RhdHVzRWZmZWN0RXhwbGljaXRQYXJhbXM+LFxyXG4gICk6IFJlZ2V4PFN0YXR1c0VmZmVjdEV4cGxpY2l0UGFyYW1zPiB7XHJcbiAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBmID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdzdGF0dXNFZmZlY3RFeHBsaWNpdCcsIHN0YXR1c0VmZmVjdEV4cGxpY2l0UGFyYW1zKTtcclxuICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xyXG5cclxuICAgIGNvbnN0IGtGaWVsZCA9ICcuKj86JztcclxuXHJcbiAgICBjb25zdCBzdHIgPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGltZXN0YW1wJywgJ1xcXFx5e1RpbWVzdGFtcH0nKSArXHJcbiAgICAgICcgMjY6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRJZCcsIGYudGFyZ2V0SWQsICdcXFxceXtPYmplY3RJZH0nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXQnLCBmLnRhcmdldCwgJ1teOl0qPycpICsgJzonICtcclxuICAgICAgJ1swLTlBLUZdezAsNn0nICsgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2pvYicsIGYuam9iLCAnWzAtOUEtRl17MCwyfScpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2hwJywgZi5ocCwgJ1xcXFx5e0Zsb2F0fScpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ21heEhwJywgZi5tYXhIcCwgJ1xcXFx5e0Zsb2F0fScpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ21wJywgZi5tcCwgJ1xcXFx5e0Zsb2F0fScpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ21heE1wJywgZi5tYXhNcCwgJ1xcXFx5e0Zsb2F0fScpICsgJzonICtcclxuICAgICAga0ZpZWxkICsgLy8gdHAgbG9sXHJcbiAgICAgIGtGaWVsZCArIC8vIG1heCB0cCBleHRyYSBsb2xcclxuICAgICAgLy8geCwgeSwgeiBoZWFkaW5nIG1heSBiZSBibGFua1xyXG4gICAgICBSZWdleGVzLm9wdGlvbmFsKFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd4JywgZi54LCAnXFxcXHl7RmxvYXR9JykpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAneScsIGYueSwgJ1xcXFx5e0Zsb2F0fScpKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMub3B0aW9uYWwoUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3onLCBmLnosICdcXFxceXtGbG9hdH0nKSkgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm9wdGlvbmFsKFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdoZWFkaW5nJywgZi5oZWFkaW5nLCAnXFxcXHl7RmxvYXR9JykpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2RhdGEwJywgZi5kYXRhMCwgJ1teOl0qPycpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2RhdGExJywgZi5kYXRhMSwgJ1teOl0qPycpICsgJzonICtcclxuICAgICAgLy8gZGF0YTIsIDMsIDQgbWF5IG5vdCBleGlzdCBhbmQgdGhlIGxpbmUgbWF5IHRlcm1pbmF0ZS5cclxuICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZGF0YTInLCBmLmRhdGEyLCAnW146XSo/JykgKyAnOicpICtcclxuICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZGF0YTMnLCBmLmRhdGEzLCAnW146XSo/JykgKyAnOicpICtcclxuICAgICAgUmVnZXhlcy5vcHRpb25hbChSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZGF0YTQnLCBmLmRhdGE0LCAnW146XSo/JykgKyAnOicpO1xyXG4gICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBmaWVsZHM6IHRhcmdldElkLCB0YXJnZXQsIGVmZmVjdCwgc291cmNlLCBjYXB0dXJlXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzFlLW5ldHdvcmtidWZmcmVtb3ZlXHJcbiAgICovXHJcbiAgc3RhdGljIGxvc2VzRWZmZWN0KGY/OiBQYXJhbXM8TG9zZXNFZmZlY3RQYXJhbXM+KTogUmVnZXg8TG9zZXNFZmZlY3RQYXJhbXM+IHtcclxuICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgIGYgPSB7fTtcclxuICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoZiwgJ2xvc2VzRWZmZWN0JywgbG9zZXNFZmZlY3RQYXJhbXMpO1xyXG4gICAgY29uc3QgY2FwdHVyZSA9IFJlZ2V4ZXMudHJ1ZUlmVW5kZWZpbmVkKGYuY2FwdHVyZSk7XHJcbiAgICBjb25zdCBzdHIgPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGltZXN0YW1wJywgJ1xcXFx5e1RpbWVzdGFtcH0nKSArXHJcbiAgICAgICcgMUU6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRJZCcsIGYudGFyZ2V0SWQsICdcXFxceXtPYmplY3RJZH0nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXQnLCBmLnRhcmdldCwgJy4qPycpICtcclxuICAgICAgJyBsb3NlcyB0aGUgZWZmZWN0IG9mICcgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZWZmZWN0JywgZi5lZmZlY3QsICcuKj8nKSArXHJcbiAgICAgICcgZnJvbSAnICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3NvdXJjZScsIGYuc291cmNlLCAnLio/JykgKyAnXFxcXC4nO1xyXG4gICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBmaWVsZHM6IHNvdXJjZSwgc291cmNlSWQsIHRhcmdldCwgdGFyZ2V0SWQsIGlkLCBjYXB0dXJlXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzIzLW5ldHdvcmt0ZXRoZXJcclxuICAgKi9cclxuICBzdGF0aWMgdGV0aGVyKGY/OiBQYXJhbXM8VGV0aGVyUGFyYW1zPik6IFJlZ2V4PFRldGhlclBhcmFtcz4ge1xyXG4gICAgaWYgKHR5cGVvZiBmID09PSAndW5kZWZpbmVkJylcclxuICAgICAgZiA9IHt9O1xyXG4gICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAndGV0aGVyJywgdGV0aGVyUGFyYW1zKTtcclxuICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xyXG4gICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxceXtUaW1lc3RhbXB9JykgK1xyXG4gICAgICAnIDIzOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnc291cmNlSWQnLCBmLnNvdXJjZUlkLCAnXFxcXHl7T2JqZWN0SWR9JykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnc291cmNlJywgZi5zb3VyY2UsICdbXjpdKj8nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXRJZCcsIGYudGFyZ2V0SWQsICdcXFxceXtPYmplY3RJZH0nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXQnLCBmLnRhcmdldCwgJ1teOl0qPycpICtcclxuICAgICAgJzouLi4uOi4uLi46JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdpZCcsIGYuaWQsICcuLi4uJykgKyAnOic7XHJcbiAgICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqICd0YXJnZXQnIHdhcyBkZWZlYXRlZCBieSAnc291cmNlJ1xyXG4gICAqIGZpZWxkczogdGFyZ2V0LCBzb3VyY2UsIGNhcHR1cmVcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMTktbmV0d29ya2RlYXRoXHJcbiAgICovXHJcbiAgc3RhdGljIHdhc0RlZmVhdGVkKGY/OiBQYXJhbXM8V2FzRGVmZWF0ZWRQYXJhbXM+KTogUmVnZXg8V2FzRGVmZWF0ZWRQYXJhbXM+IHtcclxuICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgIGYgPSB7fTtcclxuICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoZiwgJ3dhc0RlZmVhdGVkJywgd2FzRGVmZWF0ZWRQYXJhbXMpO1xyXG4gICAgY29uc3QgY2FwdHVyZSA9IFJlZ2V4ZXMudHJ1ZUlmVW5kZWZpbmVkKGYuY2FwdHVyZSk7XHJcbiAgICBjb25zdCBzdHIgPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGltZXN0YW1wJywgJ1xcXFx5e1RpbWVzdGFtcH0nKSArXHJcbiAgICAgICcgMTk6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0YXJnZXQnLCBmLnRhcmdldCwgJy4qPycpICtcclxuICAgICAgJyB3YXMgZGVmZWF0ZWQgYnkgJyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdzb3VyY2UnLCBmLnNvdXJjZSwgJy4qPycpICsgJ1xcXFwuJztcclxuICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogZmllbGRzOiBuYW1lLCBocCwgY2FwdHVyZVxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwZC1jb21iYXRhbnRocFxyXG4gICAqL1xyXG4gIHN0YXRpYyBoYXNIUChmPzogUGFyYW1zPEhhc0hQUGFyYW1zPik6IFJlZ2V4PEhhc0hQUGFyYW1zPiB7XHJcbiAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBmID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdoYXNIUCcsIGhhc0hQUGFyYW1zKTtcclxuICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xyXG4gICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxceXtUaW1lc3RhbXB9JykgK1xyXG4gICAgICAnIDBEOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnbmFtZScsIGYubmFtZSwgJy4qPycpICtcclxuICAgICAgJyBIUCBhdCAnICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2hwJywgZi5ocCwgJ1xcXFxkKycpICsgJyUnO1xyXG4gICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBmaWVsZHM6IGNvZGUsIGxpbmUsIGNhcHR1cmVcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMDAtbG9nbGluZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBlY2hvKGY/OiBQYXJhbXM8RWNob1BhcmFtcz4pOiBSZWdleDxFY2hvUGFyYW1zPiB7XHJcbiAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBmID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdlY2hvJywgZWNob1BhcmFtcyk7XHJcbiAgICByZXR1cm4gUmVnZXhlcy5nYW1lTG9nKHtcclxuICAgICAgbGluZTogZi5saW5lLFxyXG4gICAgICBjYXB0dXJlOiBmLmNhcHR1cmUsXHJcbiAgICAgIGNvZGU6ICcwMDM4JyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIGZpZWxkczogY29kZSwgbGluZSwgbmFtZSwgY2FwdHVyZVxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMC1sb2dsaW5lXHJcbiAgICovXHJcbiAgc3RhdGljIGRpYWxvZyhmPzogUGFyYW1zPERpYWxvZ1BhcmFtcz4pOiBSZWdleDxEaWFsb2dQYXJhbXM+IHtcclxuICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgIGYgPSB7fTtcclxuICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoZiwgJ2RpYWxvZycsIGRpYWxvZ1BhcmFtcyk7XHJcbiAgICBjb25zdCBjYXB0dXJlID0gUmVnZXhlcy50cnVlSWZVbmRlZmluZWQoZi5jYXB0dXJlKTtcclxuICAgIGNvbnN0IHN0ciA9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0aW1lc3RhbXAnLCAnXFxcXHl7VGltZXN0YW1wfScpICtcclxuICAgICAgJyAwMDonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2NvZGUnLCAnMDA0NCcpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ25hbWUnLCBmLm5hbWUsICcuKj8nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdsaW5lJywgZi5saW5lLCAnLionKSArICckJztcclxuICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogZmllbGRzOiBjb2RlLCBsaW5lLCBjYXB0dXJlXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzAwLWxvZ2xpbmVcclxuICAgKi9cclxuICBzdGF0aWMgbWVzc2FnZShmPzogUGFyYW1zPE1lc3NhZ2VQYXJhbXM+KTogUmVnZXg8TWVzc2FnZVBhcmFtcz4ge1xyXG4gICAgaWYgKHR5cGVvZiBmID09PSAndW5kZWZpbmVkJylcclxuICAgICAgZiA9IHt9O1xyXG4gICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnbWVzc2FnZScsIG1lc3NhZ2VQYXJhbXMpO1xyXG4gICAgcmV0dXJuIFJlZ2V4ZXMuZ2FtZUxvZyh7XHJcbiAgICAgIGxpbmU6IGYubGluZSxcclxuICAgICAgY2FwdHVyZTogZi5jYXB0dXJlLFxyXG4gICAgICBjb2RlOiAnMDgzOScsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZpZWxkczogY29kZSwgbGluZSwgY2FwdHVyZVxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMC1sb2dsaW5lXHJcbiAgICovXHJcbiAgc3RhdGljIGdhbWVMb2coZj86IFBhcmFtczxHYW1lTG9nUGFyYW1zPik6IFJlZ2V4PEdhbWVMb2dQYXJhbXM+IHtcclxuICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgIGYgPSB7fTtcclxuICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoZiwgJ2dhbWVMb2cnLCBnYW1lTG9nUGFyYW1zKTtcclxuICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xyXG4gICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxceXtUaW1lc3RhbXB9JykgK1xyXG4gICAgICAnIDAwOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnY29kZScsIGYuY29kZSwgJy4uLi4nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdsaW5lJywgZi5saW5lLCAnLionKSArICckJztcclxuICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogZmllbGRzOiBjb2RlLCBuYW1lLCBsaW5lLCBjYXB0dXJlXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzAwLWxvZ2xpbmVcclxuICAgKiBTb21lIGdhbWUgbG9nIGxpbmVzIGhhdmUgbmFtZXMgaW4gdGhlbSwgYnV0IG5vdCBhbGwuICBBbGwgbmV0d29yayBsb2cgbGluZXMgZm9yIHRoZXNlXHJcbiAgICogaGF2ZSBlbXB0eSBmaWVsZHMsIGJ1dCB0aGVzZSBnZXQgZHJvcHBlZCBieSB0aGUgQUNUIEZGWFYgcGx1Z2luLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBnYW1lTmFtZUxvZyhmPzogUGFyYW1zPEdhbWVOYW1lTG9nUGFyYW1zPik6IFJlZ2V4PEdhbWVOYW1lTG9nUGFyYW1zPiB7XHJcbiAgICBpZiAodHlwZW9mIGYgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBmID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKGYsICdnYW1lTmFtZUxvZycsIGdhbWVOYW1lTG9nUGFyYW1zKTtcclxuICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xyXG4gICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxceXtUaW1lc3RhbXB9JykgK1xyXG4gICAgICAnIDAwOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnY29kZScsIGYuY29kZSwgJy4uLi4nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICduYW1lJywgZi5uYW1lLCAnW146XSonKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdsaW5lJywgZi5saW5lLCAnLionKSArICckJztcclxuICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBmaWVsZHM6IGpvYiwgc3RyZW5ndGgsIGRleHRlcml0eSwgdml0YWxpdHksIGludGVsbGlnZW5jZSwgbWluZCwgcGlldHksIGF0dGFja1Bvd2VyLFxyXG4gICAqICAgICAgICAgZGlyZWN0SGl0LCBjcml0aWNhbEhpdCwgYXR0YWNrTWFnaWNQb3RlbmN5LCBoZWFsTWFnaWNQb3RlbmN5LCBkZXRlcm1pbmF0aW9uLFxyXG4gICAqICAgICAgICAgc2tpbGxTcGVlZCwgc3BlbGxTcGVlZCwgdGVuYWNpdHksIGNhcHR1cmVcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjMGMtcGxheWVyc3RhdHNcclxuICAgKi9cclxuICBzdGF0aWMgc3RhdENoYW5nZShmPzogUGFyYW1zPFN0YXRDaGFuZ2VQYXJhbXM+KTogUmVnZXg8U3RhdENoYW5nZVBhcmFtcz4ge1xyXG4gICAgaWYgKHR5cGVvZiBmID09PSAndW5kZWZpbmVkJylcclxuICAgICAgZiA9IHt9O1xyXG4gICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhmLCAnc3RhdENoYW5nZScsIHN0YXRDaGFuZ2VQYXJhbXMpO1xyXG4gICAgY29uc3QgY2FwdHVyZSA9IFJlZ2V4ZXMudHJ1ZUlmVW5kZWZpbmVkKGYuY2FwdHVyZSk7XHJcbiAgICBjb25zdCBzdHIgPSBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGltZXN0YW1wJywgJ1xcXFx5e1RpbWVzdGFtcH0nKSArXHJcbiAgICAgICcgMEM6UGxheWVyIFN0YXRzOiAnICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2pvYicsIGYuam9iLCAnXFxcXGQrJykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnc3RyZW5ndGgnLCBmLnN0cmVuZ3RoLCAnXFxcXGQrJykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnZGV4dGVyaXR5JywgZi5kZXh0ZXJpdHksICdcXFxcZCsnKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd2aXRhbGl0eScsIGYudml0YWxpdHksICdcXFxcZCsnKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdpbnRlbGxpZ2VuY2UnLCBmLmludGVsbGlnZW5jZSwgJ1xcXFxkKycpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ21pbmQnLCBmLm1pbmQsICdcXFxcZCsnKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdwaWV0eScsIGYucGlldHksICdcXFxcZCsnKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdhdHRhY2tQb3dlcicsIGYuYXR0YWNrUG93ZXIsICdcXFxcZCsnKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdkaXJlY3RIaXQnLCBmLmRpcmVjdEhpdCwgJ1xcXFxkKycpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2NyaXRpY2FsSGl0JywgZi5jcml0aWNhbEhpdCwgJ1xcXFxkKycpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2F0dGFja01hZ2ljUG90ZW5jeScsIGYuYXR0YWNrTWFnaWNQb3RlbmN5LCAnXFxcXGQrJykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnaGVhbE1hZ2ljUG90ZW5jeScsIGYuaGVhbE1hZ2ljUG90ZW5jeSwgJ1xcXFxkKycpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2RldGVybWluYXRpb24nLCBmLmRldGVybWluYXRpb24sICdcXFxcZCsnKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdza2lsbFNwZWVkJywgZi5za2lsbFNwZWVkLCAnXFxcXGQrJykgKyAnOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAnc3BlbGxTcGVlZCcsIGYuc3BlbGxTcGVlZCwgJ1xcXFxkKycpICtcclxuICAgICAgJzowOicgK1xyXG4gICAgICBSZWdleGVzLm1heWJlQ2FwdHVyZShjYXB0dXJlLCAndGVuYWNpdHknLCBmLnRlbmFjaXR5LCAnXFxcXGQrJyk7XHJcbiAgICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIGZpZWxkczogbmFtZSwgY2FwdHVyZVxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCMwMS1jaGFuZ2V6b25lXHJcbiAgICovXHJcbiAgc3RhdGljIGNoYW5nZVpvbmUoZj86IFBhcmFtczxDaGFuZ2Vab25lUGFyYW1zPik6IFJlZ2V4PENoYW5nZVpvbmVQYXJhbXM+IHtcclxuICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgIGYgPSB7fTtcclxuICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoZiwgJ2NoYW5nZVpvbmUnLCBjaGFuZ2Vab25lUGFyYW1zKTtcclxuICAgIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChmLmNhcHR1cmUpO1xyXG4gICAgY29uc3Qgc3RyID0gUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ3RpbWVzdGFtcCcsICdcXFxceXtUaW1lc3RhbXB9JykgK1xyXG4gICAgICAnIDAxOkNoYW5nZWQgWm9uZSB0byAnICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ25hbWUnLCBmLm5hbWUsICcuKj8nKSArICdcXFxcLic7XHJcbiAgICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIGZpZWxkczogaW5zdGFuY2UsIGNvbW1hbmQsIGRhdGEwLCBkYXRhMSwgZGF0YTIsIGRhdGEzXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kIzIxLW5ldHdvcms2ZC1hY3Rvci1jb250cm9sLWxpbmVzXHJcbiAgICovXHJcbiAgc3RhdGljIG5ldHdvcms2ZChmPzogUGFyYW1zPE5ldHdvcms2ZFBhcmFtcz4pOiBSZWdleDxOZXR3b3JrNmRQYXJhbXM+IHtcclxuICAgIGlmICh0eXBlb2YgZiA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgIGYgPSB7fTtcclxuICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoZiwgJ25ldHdvcms2ZCcsIG5ldHdvcms2ZFBhcmFtcyk7XHJcbiAgICBjb25zdCBjYXB0dXJlID0gUmVnZXhlcy50cnVlSWZVbmRlZmluZWQoZi5jYXB0dXJlKTtcclxuICAgIGNvbnN0IHN0ciA9IFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICd0aW1lc3RhbXAnLCAnXFxcXHl7VGltZXN0YW1wfScpICtcclxuICAgICAgJyAyMTonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2luc3RhbmNlJywgZi5pbnN0YW5jZSwgJy4qPycpICsgJzonICtcclxuICAgICAgUmVnZXhlcy5tYXliZUNhcHR1cmUoY2FwdHVyZSwgJ2NvbW1hbmQnLCBmLmNvbW1hbmQsICcuKj8nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdkYXRhMCcsIGYuZGF0YTAsICcuKj8nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdkYXRhMScsIGYuZGF0YTEsICcuKj8nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdkYXRhMicsIGYuZGF0YTIsICcuKj8nKSArICc6JyArXHJcbiAgICAgIFJlZ2V4ZXMubWF5YmVDYXB0dXJlKGNhcHR1cmUsICdkYXRhMycsIGYuZGF0YTMsICcuKj8nKSArICckJztcclxuICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHN0cik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGJ1aWxkaW5nIG5hbWVkIGNhcHR1cmUgZ3JvdXBcclxuICAgKi9cclxuICBzdGF0aWMgbWF5YmVDYXB0dXJlKFxyXG4gICAgICBjYXB0dXJlOiBib29sZWFuLFxyXG4gICAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICAgIHZhbHVlOiBzdHJpbmcgfCBzdHJpbmdbXSB8IHVuZGVmaW5lZCxcclxuICAgICAgZGVmYXVsdFZhbHVlPzogc3RyaW5nLFxyXG4gICk6IHN0cmluZyB7XHJcbiAgICBpZiAoIXZhbHVlKVxyXG4gICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgIHZhbHVlID0gUmVnZXhlcy5hbnlPZih2YWx1ZSBhcyBWYWxpZFN0cmluZ09yQXJyYXkpO1xyXG4gICAgcmV0dXJuIGNhcHR1cmUgPyBSZWdleGVzLm5hbWVkQ2FwdHVyZShuYW1lLCB2YWx1ZSkgOiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBvcHRpb25hbChzdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCg/OiR7c3RyfSk/YDtcclxuICB9XHJcblxyXG4gIC8vIENyZWF0ZXMgYSBuYW1lZCByZWdleCBjYXB0dXJlIGdyb3VwIG5hbWVkIHxuYW1lfCBmb3IgdGhlIG1hdGNoIHx2YWx1ZXwuXHJcbiAgc3RhdGljIG5hbWVkQ2FwdHVyZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgaWYgKG5hbWUuaW5jbHVkZXMoJz4nKSlcclxuICAgICAgY29uc29sZS5lcnJvcignXCInICsgbmFtZSArICdcIiBjb250YWlucyBcIj5cIi4nKTtcclxuICAgIGlmIChuYW1lLmluY2x1ZGVzKCc8JykpXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1wiJyArIG5hbWUgKyAnXCIgY29udGFpbnMgXCI+XCIuJyk7XHJcblxyXG4gICAgcmV0dXJuICcoPzwnICsgbmFtZSArICc+JyArIHZhbHVlICsgJyknO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVuaWVuY2UgZm9yIHR1cm5pbmcgbXVsdGlwbGUgYXJncyBpbnRvIGEgdW5pb25lZCByZWd1bGFyIGV4cHJlc3Npb24uXHJcbiAgICogYW55T2YoeCwgeSwgeikgb3IgYW55T2YoW3gsIHksIHpdKSBkbyB0aGUgc2FtZSB0aGluZywgYW5kIHJldHVybiAoPzp4fHl8eikuXHJcbiAgICogYW55T2YoeCkgb3IgYW55T2YoeCkgb24gaXRzIG93biBzaW1wbGlmaWVzIHRvIGp1c3QgeC5cclxuICAgKiBhcmdzIG1heSBiZSBzdHJpbmdzIG9yIFJlZ0V4cCwgYWx0aG91Z2ggYW55IGFkZGl0aW9uYWwgbWFya2VycyB0byBSZWdFeHBcclxuICAgKiBsaWtlIC9pbnNlbnNpdGl2ZS9pIGFyZSBkcm9wcGVkLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBhbnlPZiguLi5hcmdzOiAoc3RyaW5nfHN0cmluZ1tdfFJlZ0V4cClbXSk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBhbnlPZkFycmF5ID0gKGFycmF5OiAoc3RyaW5nfFJlZ0V4cClbXSk6IHN0cmluZyA9PiB7XHJcbiAgICAgIHJldHVybiBgKD86JHthcnJheS5tYXAoKGVsZW0pID0+IGVsZW0gaW5zdGFuY2VvZiBSZWdFeHAgPyBlbGVtLnNvdXJjZSA6IGVsZW0pLmpvaW4oJ3wnKX0pYDtcclxuICAgIH07XHJcbiAgICBsZXQgYXJyYXk6IChzdHJpbmd8UmVnRXhwKVtdID0gW107XHJcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnc1swXSkpXHJcbiAgICAgICAgYXJyYXkgPSBhcmdzWzBdO1xyXG4gICAgICBlbHNlIGlmIChhcmdzWzBdKVxyXG4gICAgICAgIGFycmF5ID0gW2FyZ3NbMF1dO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgYXJyYXkgPSBbXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFRPRE86IG1vcmUgYWNjdXJhdGUgdHlwZSBpbnN0ZWFkIG9mIGBhc2AgY2FzdFxyXG4gICAgICBhcnJheSA9IGFyZ3MgYXMgc3RyaW5nW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYW55T2ZBcnJheShhcnJheSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcGFyc2UocmVnZXhwU3RyaW5nOiBSZWdFeHAgfCBzdHJpbmcpOiBSZWdFeHAge1xyXG4gICAgY29uc3Qga0NhY3Rib3RDYXRlZ29yaWVzID0ge1xyXG4gICAgICBUaW1lc3RhbXA6ICdeLnsxNH0nLFxyXG4gICAgICBOZXRUaW1lc3RhbXA6ICcuezMzfScsXHJcbiAgICAgIE5ldEZpZWxkOiAnKD86W158XSpcXFxcfCknLFxyXG4gICAgICBMb2dUeXBlOiAnWzAtOUEtRmEtZl17Mn0nLFxyXG4gICAgICBBYmlsaXR5Q29kZTogJ1swLTlBLUZhLWZdezEsOH0nLFxyXG4gICAgICBPYmplY3RJZDogJ1swLTlBLUZdezh9JyxcclxuICAgICAgLy8gTWF0Y2hlcyBhbnkgY2hhcmFjdGVyIG5hbWUgKGluY2x1ZGluZyBlbXB0eSBzdHJpbmdzIHdoaWNoIHRoZSBGRlhJVlxyXG4gICAgICAvLyBBQ1QgcGx1Z2luIGNhbiBnZW5lcmF0ZSB3aGVuIHVua25vd24pLlxyXG4gICAgICBOYW1lOiAnKD86W15cXFxcczp8XSsoPzogW15cXFxcczp8XSspP3wpJyxcclxuICAgICAgLy8gRmxvYXRzIGNhbiBoYXZlIGNvbW1hIGFzIHNlcGFyYXRvciBpbiBGRlhJViBwbHVnaW4gb3V0cHV0OiBodHRwczovL2dpdGh1Yi5jb20vcmF2YWhuL0ZGWElWX0FDVF9QbHVnaW4vaXNzdWVzLzEzN1xyXG4gICAgICBGbG9hdDogJy0/WzAtOV0rKD86Wy4sXVswLTldKyk/KD86RS0/WzAtOV0rKT8nLFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBBbGwgcmVnZXhlcyBpbiBjYWN0Ym90IGFyZSBjYXNlIGluc2Vuc2l0aXZlLlxyXG4gICAgLy8gVGhpcyBhdm9pZHMgaGVhZGFjaGVzIGFzIHRoaW5ncyBsaWtlIGBWaWNlIGFuZCBWYW5pdHlgIHR1cm5zIGludG9cclxuICAgIC8vIGBWaWNlIEFuZCBWYW5pdHlgLCBlc3BlY2lhbGx5IGZvciBGcmVuY2ggYW5kIEdlcm1hbi4gIEl0IGFwcGVhcnMgdG9cclxuICAgIC8vIGhhdmUgYSB+MjAlIHJlZ2V4IHBhcnNpbmcgb3ZlcmhlYWQsIGJ1dCBhdCBsZWFzdCB0aGV5IHdvcmsuXHJcbiAgICBsZXQgbW9kaWZpZXJzID0gJ2knO1xyXG4gICAgaWYgKHJlZ2V4cFN0cmluZyBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICBtb2RpZmllcnMgKz0gKHJlZ2V4cFN0cmluZy5nbG9iYWwgPyAnZycgOiAnJykgK1xyXG4gICAgICAgICAgICAgICAgICAgIChyZWdleHBTdHJpbmcubXVsdGlsaW5lID8gJ20nIDogJycpO1xyXG4gICAgICByZWdleHBTdHJpbmcgPSByZWdleHBTdHJpbmcuc291cmNlO1xyXG4gICAgfVxyXG4gICAgcmVnZXhwU3RyaW5nID0gcmVnZXhwU3RyaW5nLnJlcGxhY2UoL1xcXFx5XFx7KC4qPylcXH0vZywgKG1hdGNoLCBncm91cCkgPT4ge1xyXG4gICAgICByZXR1cm4ga0NhY3Rib3RDYXRlZ29yaWVzW2dyb3VwIGFzIGtleW9mIHR5cGVvZiBrQ2FjdGJvdENhdGVnb3JpZXNdIHx8IG1hdGNoO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleHBTdHJpbmcsIG1vZGlmaWVycyk7XHJcbiAgfVxyXG5cclxuICAvLyBMaWtlIFJlZ2V4LlJlZ2V4ZXMucGFyc2UsIGJ1dCBmb3JjZSBnbG9iYWwgZmxhZy5cclxuICBzdGF0aWMgcGFyc2VHbG9iYWwocmVnZXhwU3RyaW5nOiBSZWdFeHAgfCBzdHJpbmcpOiBSZWdFeHAge1xyXG4gICAgY29uc3QgcmVnZXggPSBSZWdleGVzLnBhcnNlKHJlZ2V4cFN0cmluZyk7XHJcbiAgICBsZXQgbW9kaWZpZXJzID0gJ2dpJztcclxuICAgIGlmIChyZWdleHBTdHJpbmcgaW5zdGFuY2VvZiBSZWdFeHApXHJcbiAgICAgIG1vZGlmaWVycyArPSAocmVnZXhwU3RyaW5nLm11bHRpbGluZSA/ICdtJyA6ICcnKTtcclxuICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4LnNvdXJjZSwgbW9kaWZpZXJzKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB0cnVlSWZVbmRlZmluZWQodmFsdWU/OiBib29sZWFuKTogYm9vbGVhbiB7XHJcbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiAhIXZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHZhbGlkYXRlUGFyYW1zKFxyXG4gICAgICBmOiBSZWFkb25seTx7IFtzOiBzdHJpbmddOiB1bmtub3duIH0+LFxyXG4gICAgICBmdW5jTmFtZTogc3RyaW5nLFxyXG4gICAgICBwYXJhbXM6IFJlYWRvbmx5PHN0cmluZ1tdPixcclxuICApOiB2b2lkIHtcclxuICAgIGlmIChmID09PSBudWxsKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBpZiAodHlwZW9mIGYgIT09ICdvYmplY3QnKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZik7XHJcbiAgICBmb3IgKGxldCBrID0gMDsgayA8IGtleXMubGVuZ3RoOyArK2spIHtcclxuICAgICAgY29uc3Qga2V5ID0ga2V5c1trXTtcclxuICAgICAgaWYgKGtleSAmJiAhcGFyYW1zLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZnVuY05hbWV9OiBpbnZhbGlkIHBhcmFtZXRlciAnJHtrZXl9Jy4gIGAgK1xyXG4gICAgICAgICAgICBgVmFsaWQgcGFyYW1zOiAke0pTT04uc3RyaW5naWZ5KHBhcmFtcyl9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8gVGhpcyBpcyBtZWFudCB0byBiZSB1c2VkIGluIGEgdHJpZ2dlciBhcyBzdWNoOlxyXG4vLyB7XHJcbi8vICAgaWQ6ICdTb21lIHRhbmtidXN0ZXInLFxyXG4vLyAgIHJlZ2V4OiBSZWdleGVzLnN0YXJ0c1VzaW5nKHtzb3VyY2U6ICdZZSBPbGRlIEJvc3NlJywgaWQ6ICc2NjYnfSksXHJcbi8vICAgY29uZGl0aW9uOiBDb25kaXRpb25zLmNhcmVzQWJvdXRNYWdpY2FsKGRhdGEpLFxyXG4vLyAgIHJlc3BvbnNlOiBSZXNwb25zZXMudGFua2J1c3RlcigpLFxyXG4vLyB9LFxyXG4vL1xyXG4vLyBOb3RlOiBCcmVha2luZyBvdXQgdGhlIGNvbmRpdGlvbiBsaWtlIHRoaXMgbGV0cyBwZW9wbGUgb3ZlcnJpZGUgaXQgaWYgdGhleVxyXG4vLyBhbHdheXMgKG9yIG5ldmVyKSB3YW50IHRvIGtub3cgYWJvdXQgaXQsIHJhdGhlciB0aGFuIGhpZGluZyB0aGUgbG9naWMgaW5zaWRlXHJcbi8vIHRoZSB0YW5rYnVzdGVyIGNhbGxiYWNrIHdpdGggYSBcImlzIGhlYWxlclwiIGNoZWNrLlxyXG4vL1xyXG4vLyBJZiBkYXRhLnJvbGUgaXMgdXNlZCwgaXQgc2hvdWxkIGJlIG9ubHkgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGFsZXJ0IGxldmVscyxcclxuLy8gYW5kIG5vdCB3aGV0aGVyIGEgbWVzc2FnZSBpcyBzZW50IGF0IGFsbC5cclxuLy9cclxuLy8gQWx0aG91Z2ggdGhpcyBpcyBub3QgdHJ1ZSBvZiBgcmVzcG9uc2U6IGAgZmllbGRzIG9uIHRyaWdnZXJzIGluIGdlbmVyYWwsXHJcbi8vIGFsbCByZXNwb25zZXMgaW4gdGhpcyBmaWxlIHNob3VsZCBlaXRoZXIgcmV0dXJuIGFuIG9iamVjdCBvciBhIHNpbmdsZVxyXG4vLyBmdW5jdGlvbiB0aGF0IHNldHMgb3V0cHV0U3RyaW5ncyBhbmQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aG91dCBkb2luZ1xyXG4vLyBhbnl0aGluZyB3aXRoIGRhdGEgb3IgbWF0Y2hlcy4gIFNlZSBgcmVzcG9uc2VzX3Rlc3QuanNgLlxyXG5cclxuaW1wb3J0IHsgTG9jYWxlVGV4dCwgUmVzcG9uc2VPdXRwdXQsIFJlc3BvbnNlRnVuYywgVHJpZ2dlckZ1bmMsIFRhcmdldGVkTWF0Y2hlcywgT3V0cHV0LCBUcmlnZ2VyT3V0cHV0IH0gZnJvbSAnLi4vdHlwZXMvdHJpZ2dlcic7XHJcbmltcG9ydCB7IFJhaWRib3NzRGF0YSBhcyBEYXRhIH0gZnJvbSAnLi4vdHlwZXMvZGF0YSc7XHJcblxyXG5pbXBvcnQgT3V0cHV0cyBmcm9tICcuL291dHB1dHMnO1xyXG5cclxudHlwZSBUYXJnZXRlZFJlc3BvbnNlT3V0cHV0ID0gUmVzcG9uc2VPdXRwdXQ8RGF0YSwgVGFyZ2V0ZWRNYXRjaGVzPjtcclxudHlwZSBUYXJnZXRlZFJlc3BvbnNlRnVuYyA9IFJlc3BvbnNlRnVuYzxEYXRhLCBUYXJnZXRlZE1hdGNoZXM+O1xyXG50eXBlIFRhcmdldGVkRnVuYyA9IFRyaWdnZXJGdW5jPERhdGEsIFRhcmdldGVkTWF0Y2hlcywgVHJpZ2dlck91dHB1dDxEYXRhLCBUYXJnZXRlZE1hdGNoZXM+PjtcclxudHlwZSBTdGF0aWNSZXNwb25zZUZ1bmMgPSBSZXNwb25zZUZ1bmM8RGF0YSwgdW5rbm93bj47XHJcblxyXG50eXBlIFNldmVyaXR5ID0gJ2luZm8nIHwgJ2FsZXJ0JyB8ICdhbGFybSc7XHJcbnR5cGUgU2V2VGV4dCA9ICdpbmZvVGV4dCcgfCAnYWxlcnRUZXh0JyB8ICdhbGFybVRleHQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGJ1aWx0SW5SZXNwb25zZVN0ciA9ICdjYWN0Ym90LWJ1aWx0aW4tcmVzcG9uc2UnO1xyXG5cclxuLy8gQWxsIHZhbGlkIHRyaWdnZXIgZmllbGRzLlxyXG5leHBvcnQgY29uc3QgdHJpZ2dlckZ1bmN0aW9ucyA9IFtcclxuICAnYWxhcm1UZXh0JyxcclxuICAnYWxlcnRUZXh0JyxcclxuICAnY29uZGl0aW9uJyxcclxuICAnZGVsYXlTZWNvbmRzJyxcclxuICAnZGlzYWJsZWQnLFxyXG4gICdkdXJhdGlvblNlY29uZHMnLFxyXG4gICdpZCcsXHJcbiAgJ2luZm9UZXh0JyxcclxuICAncHJlUnVuJyxcclxuICAncHJvbWlzZScsXHJcbiAgJ3Jlc3BvbnNlJyxcclxuICAncnVuJyxcclxuICAnc291bmQnLFxyXG4gICdzb3VuZFZvbHVtZScsXHJcbiAgJ3N1cHByZXNzU2Vjb25kcycsXHJcbiAgJ3R0cycsXHJcbiAgJ291dHB1dFN0cmluZ3MnLFxyXG5dO1xyXG5cclxuLy8gVHJpZ2dlciBmaWVsZHMgdGhhdCBjYW4gcHJvZHVjZSB0ZXh0IG91dHB1dC5cclxuZXhwb3J0IGNvbnN0IHRyaWdnZXJUZXh0T3V0cHV0RnVuY3Rpb25zID0gW1xyXG4gICdhbGFybVRleHQnLFxyXG4gICdhbGVydFRleHQnLFxyXG4gICdpbmZvVGV4dCcsXHJcbiAgJ3Jlc3BvbnNlJyxcclxuICAndHRzJyxcclxuXTtcclxuXHJcbi8vIElmIGEgdHJpZ2dlciBoYXMgYW55IG9mIHRoZXNlLCB0aGVuIGl0IGhhcyBhIHZpc2libGUvYXVkaW8gZWZmZWN0LlxyXG5leHBvcnQgY29uc3QgdHJpZ2dlck91dHB1dEZ1bmN0aW9ucyA9IFtcclxuICAuLi50cmlnZ2VyVGV4dE91dHB1dEZ1bmN0aW9ucyxcclxuICAnc291bmQnLFxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNldmVyaXR5TWFwOiB7IFtzZXYgaW4gU2V2ZXJpdHldOiBTZXZUZXh0IH0gPSB7XHJcbiAgJ2luZm8nOiAnaW5mb1RleHQnLFxyXG4gICdhbGVydCc6ICdhbGVydFRleHQnLFxyXG4gICdhbGFybSc6ICdhbGFybVRleHQnLFxyXG59O1xyXG5cclxuY29uc3QgZ2V0VGV4dCA9IChzZXY6IFNldmVyaXR5KTogU2V2VGV4dCA9PiB7XHJcbiAgaWYgKCEoc2V2IGluIHNldmVyaXR5TWFwKSlcclxuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzZXZlcml0eTogJHtzZXZ9LmApO1xyXG4gIHJldHVybiBzZXZlcml0eU1hcFtzZXZdO1xyXG59O1xyXG5cclxuY29uc3QgZGVmYXVsdEluZm9UZXh0ID0gKHNldj86IFNldmVyaXR5KTogU2V2VGV4dCA9PiB7XHJcbiAgaWYgKCFzZXYpXHJcbiAgICByZXR1cm4gJ2luZm9UZXh0JztcclxuICByZXR1cm4gZ2V0VGV4dChzZXYpO1xyXG59O1xyXG5cclxuY29uc3QgZGVmYXVsdEFsZXJ0VGV4dCA9IChzZXY/OiBTZXZlcml0eSk6IFNldlRleHQgPT4ge1xyXG4gIGlmICghc2V2KVxyXG4gICAgcmV0dXJuICdhbGVydFRleHQnO1xyXG4gIHJldHVybiBnZXRUZXh0KHNldik7XHJcbn07XHJcblxyXG5jb25zdCBkZWZhdWx0QWxhcm1UZXh0ID0gKHNldj86IFNldmVyaXR5KTogU2V2VGV4dCA9PiB7XHJcbiAgaWYgKCFzZXYpXHJcbiAgICByZXR1cm4gJ2FsYXJtVGV4dCc7XHJcbiAgcmV0dXJuIGdldFRleHQoc2V2KTtcclxufTtcclxuXHJcbmNvbnN0IGdldFRhcmdldCA9IChtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMpID0+IHtcclxuICAvLyBPZnRlbiB0YW5rYnVzdGVycyBjYW4gYmUgY2FzdGVkIGJ5IHRoZSBib3NzIG9uIHRoZSBib3NzLlxyXG4gIC8vIENvbnNpZGVyIHRoaXMgYXMgXCJub3QgaGF2aW5nIGEgdGFyZ2V0XCIuXHJcbiAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXMudGFyZ2V0ID09PSBtYXRjaGVzLnNvdXJjZSlcclxuICAgIHJldHVybjtcclxuICByZXR1cm4gbWF0Y2hlcy50YXJnZXQ7XHJcbn07XHJcblxyXG5jb25zdCBnZXRTb3VyY2UgPSAobWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzKSA9PiB7XHJcbiAgcmV0dXJuIG1hdGNoZXM/LnNvdXJjZTtcclxufTtcclxuXHJcbi8vIEZJWE1FOiBtYWtlIHRoaXMgd29yayBmb3IgYW55IG51bWJlciBvZiBwYWlycyBvZiBwYXJhbXNcclxuY29uc3QgY29tYmluZUZ1bmNzID0gZnVuY3Rpb24odGV4dDE6IFNldlRleHQsIGZ1bmMxOiBUYXJnZXRlZEZ1bmMsXHJcbiAgICB0ZXh0MjogU2V2VGV4dCwgZnVuYzI6IFRhcmdldGVkRnVuYykge1xyXG4gIGNvbnN0IG9iajogVGFyZ2V0ZWRSZXNwb25zZU91dHB1dCA9IHt9O1xyXG5cclxuICBpZiAodGV4dDEgIT09IHRleHQyKSB7XHJcbiAgICBvYmpbdGV4dDFdID0gZnVuYzE7XHJcbiAgICBvYmpbdGV4dDJdID0gZnVuYzI7XHJcbiAgfSBlbHNlIHtcclxuICAgIG9ialt0ZXh0MV0gPSAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICByZXR1cm4gZnVuYzEoZGF0YSwgbWF0Y2hlcywgb3V0cHV0KSB8fCBmdW5jMihkYXRhLCBtYXRjaGVzLCBvdXRwdXQpO1xyXG4gICAgfTtcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxuXHJcbmNvbnN0IGlzUGxheWVySWQgPSAoaWQ/OiBzdHJpbmcpID0+IHtcclxuICByZXR1cm4gaWQgJiYgaWRbMF0gIT09ICc0JztcclxufTtcclxuXHJcbi8vIEZvciByZXNwb25zZXMgdGhhdCB1bmNvbmRpdGlvbmFsbHkgcmV0dXJuIHN0YXRpYyB0ZXh0LlxyXG5jb25zdCBzdGF0aWNSZXNwb25zZSA9IChmaWVsZDogU2V2VGV4dCwgdGV4dDogTG9jYWxlVGV4dCk6IFN0YXRpY1Jlc3BvbnNlRnVuYyA9PiB7XHJcbiAgcmV0dXJuIChfZGF0YTogdW5rbm93biwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAvLyBjYWN0Ym90LWJ1aWx0aW4tcmVzcG9uc2VcclxuICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgIHRleHQ6IHRleHQsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgW2ZpZWxkXTogKF9kYXRhOiB1bmtub3duLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IG91dHB1dC50ZXh0Py4oKSxcclxuICAgIH07XHJcbiAgfTtcclxufTtcclxuXHJcbnR5cGUgU2luZ2xlU2V2VG9SZXNwb25zZUZ1bmMgPSAoc2V2PzogU2V2ZXJpdHkpID0+IFRhcmdldGVkUmVzcG9uc2VGdW5jIHwgU3RhdGljUmVzcG9uc2VGdW5jO1xyXG50eXBlIERvdWJsZVNldlRvUmVzcG9uc2VGdW5jID0gKHRhcmdldFNldj86IFNldmVyaXR5LCBvdGhlclNldj86IFNldmVyaXR5KSA9PiBUYXJnZXRlZFJlc3BvbnNlRnVuYztcclxudHlwZSBSZXNwb25zZXNNYXAgPSB7XHJcbiAgW3Jlc3BvbnNlOiBzdHJpbmddOiBTaW5nbGVTZXZUb1Jlc3BvbnNlRnVuYyB8IERvdWJsZVNldlRvUmVzcG9uc2VGdW5jO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IFJlc3BvbnNlcyA9IHtcclxuICB0YW5rQnVzdGVyOiAodGFyZ2V0U2V2PzogU2V2ZXJpdHksIG90aGVyU2V2PzogU2V2ZXJpdHkpID0+IHtcclxuICAgIGNvbnN0IG91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgIG5vVGFyZ2V0OiBPdXRwdXRzLnRhbmtCdXN0ZXIsXHJcbiAgICAgIGJ1c3Rlck9uWW91OiBPdXRwdXRzLnRhbmtCdXN0ZXJPbllvdSxcclxuICAgICAgYnVzdGVyT25UYXJnZXQ6IE91dHB1dHMudGFua0J1c3Rlck9uUGxheWVyLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB0YXJnZXRGdW5jID0gKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG1hdGNoZXMpO1xyXG4gICAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICAgIGlmIChkYXRhLnJvbGUgIT09ICd0YW5rJyAmJiBkYXRhLnJvbGUgIT09ICdoZWFsZXInKVxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQubm9UYXJnZXQ/LigpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGFyZ2V0ID09PSBkYXRhLm1lKVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQuYnVzdGVyT25Zb3U/LigpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBvdGhlckZ1bmMgPSAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQobWF0Y2hlcyk7XHJcbiAgICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKGRhdGEucm9sZSA9PT0gJ3RhbmsnIHx8IGRhdGEucm9sZSA9PT0gJ2hlYWxlcicpXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5ub1RhcmdldD8uKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRhcmdldCA9PT0gZGF0YS5tZSlcclxuICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICByZXR1cm4gb3V0cHV0LmJ1c3Rlck9uVGFyZ2V0Py4oeyBwbGF5ZXI6IGRhdGEuU2hvcnROYW1lKHRhcmdldCkgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNvbWJpbmVkID0gY29tYmluZUZ1bmNzKGRlZmF1bHRBbGVydFRleHQodGFyZ2V0U2V2KSwgdGFyZ2V0RnVuYyxcclxuICAgICAgICBkZWZhdWx0SW5mb1RleHQob3RoZXJTZXYpLCBvdGhlckZ1bmMpO1xyXG4gICAgcmV0dXJuIChfZGF0YTogdW5rbm93biwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KTogVGFyZ2V0ZWRSZXNwb25zZU91dHB1dCA9PiB7XHJcbiAgICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0gb3V0cHV0U3RyaW5ncztcclxuICAgICAgcmV0dXJuIGNvbWJpbmVkO1xyXG4gICAgfTtcclxuICB9LFxyXG4gIHRhbmtCdXN0ZXJTd2FwOiAoYnVzdGVyU2V2PzogU2V2ZXJpdHksIHN3YXBTZXY/OiBTZXZlcml0eSkgPT4ge1xyXG4gICAgY29uc3Qgb3V0cHV0U3RyaW5ncyA9IHtcclxuICAgICAgdGFua1N3YXA6IE91dHB1dHMudGFua1N3YXAsXHJcbiAgICAgIGJ1c3Rlck9uWW91OiBPdXRwdXRzLnRhbmtCdXN0ZXJPbllvdSxcclxuICAgICAgYnVzdGVyT25UYXJnZXQ6IE91dHB1dHMudGFua0J1c3Rlck9uUGxheWVyLFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBOb3RlOiBidXN0ZXJTZXYgYW5kIHN3YXBTZXYgY2FuIGJlIHRoZSBzYW1lIHByaW9yaXR5LlxyXG4gICAgY29uc3QgdGFua1N3YXBGdW5jID0gKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG1hdGNoZXMpO1xyXG4gICAgICBpZiAoZGF0YS5yb2xlID09PSAndGFuaycgJiYgdGFyZ2V0ICE9PSBkYXRhLm1lKVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQudGFua1N3YXA/LigpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGJ1c3RlckZ1bmMgPSAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQobWF0Y2hlcyk7XHJcblxyXG4gICAgICBpZiAoZGF0YS5yb2xlID09PSAndGFuaycgJiYgdGFyZ2V0ICE9PSBkYXRhLm1lKVxyXG4gICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgIGlmICh0YXJnZXQgPT09IGRhdGEubWUpXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5idXN0ZXJPbllvdT8uKCk7XHJcbiAgICAgIHJldHVybiBvdXRwdXQuYnVzdGVyT25UYXJnZXQ/Lih7IHBsYXllcjogZGF0YS5TaG9ydE5hbWUodGFyZ2V0KSB9KTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgY29tYmluZWQgPSBjb21iaW5lRnVuY3MoZGVmYXVsdEFsYXJtVGV4dChzd2FwU2V2KSwgdGFua1N3YXBGdW5jLFxyXG4gICAgICAgIGRlZmF1bHRBbGVydFRleHQoYnVzdGVyU2V2KSwgYnVzdGVyRnVuYyk7XHJcbiAgICByZXR1cm4gKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSBvdXRwdXRTdHJpbmdzO1xyXG4gICAgICByZXR1cm4gY29tYmluZWQ7XHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgdGFua0NsZWF2ZTogKHNldj86IFNldmVyaXR5KSA9PiAoX2RhdGE6IERhdGEsIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBjbGVhdmVPbllvdTogT3V0cHV0cy50YW5rQ2xlYXZlT25Zb3UsXHJcbiAgICAgIGNsZWF2ZU5vVGFyZ2V0OiBPdXRwdXRzLnRhbmtDbGVhdmUsXHJcbiAgICAgIGF2b2lkQ2xlYXZlOiBPdXRwdXRzLmF2b2lkVGFua0NsZWF2ZSxcclxuICAgIH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBbZGVmYXVsdEluZm9UZXh0KHNldildOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSBkYXRhLm1lKVxyXG4gICAgICAgICAgcmV0dXJuIG91dHB1dC5jbGVhdmVPbllvdT8uKCk7XHJcbiAgICAgICAgaWYgKGRhdGEucm9sZSA9PT0gJ3RhbmsnIHx8IGRhdGEuam9iID09PSAnQkxVJykge1xyXG4gICAgICAgICAgLy8gdGFyZ2V0bGVzcyB0YW5rIGNsZWF2ZVxyXG4gICAgICAgICAgLy8gQkxVIHBsYXllcnMgc2hvdWxkIGFsd2F5cyBnZXQgdGhpcyBnZW5lcmljIGNsZWF2ZSBtZXNzYWdlLlxyXG4gICAgICAgICAgLy8gV2UgaGF2ZSBubyByb2J1c3Qgd2F5IHRvIGRldGVybWluZSB3aGV0aGVyIHRoZXkgaGF2ZSB0YW5rIE1pbWljcnkgb24sXHJcbiAgICAgICAgICAvLyBhbmQgaXQncyByZWFsbHkgYW5ub3lpbmcgZm9yIGEgQkxVIHRhbmsgdG8gYmUgdG9sZCB0byBhdm9pZCBjbGVhdmVzIHdoZW4gdGhleSBjYW4ndC5cclxuICAgICAgICAgIHJldHVybiBvdXRwdXQuY2xlYXZlTm9UYXJnZXQ/LigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0cHV0LmF2b2lkQ2xlYXZlPy4oKTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuICBtaW5pQnVzdGVyOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLm1pbmlCdXN0ZXIpLFxyXG4gIGFvZTogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5hb2UpLFxyXG4gIGJpZ0FvZTogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5iaWdBb2UpLFxyXG4gIHNwcmVhZDogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5zcHJlYWQpLFxyXG4gIC8vIGZvciBzdGFjayBtYXJrZXIgc2l0dWF0aW9ucy5cclxuICBzdGFja01hcmtlcjogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMuc3RhY2tNYXJrZXIpLFxyXG4gIC8vIGZvciBnZXR0aW5nIHRvZ2V0aGVyIHdpdGhvdXQgc3RhY2sgbWFya2VyXHJcbiAgZ2V0VG9nZXRoZXI6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLmdldFRvZ2V0aGVyKSxcclxuICBzdGFja01hcmtlck9uOiAoc2V2PzogU2V2ZXJpdHkpID0+IChfZGF0YTogRGF0YSwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAvLyBjYWN0Ym90LWJ1aWx0aW4tcmVzcG9uc2VcclxuICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgIHN0YWNrT25Zb3U6IE91dHB1dHMuc3RhY2tPbllvdSxcclxuICAgICAgc3RhY2tPblRhcmdldDogT3V0cHV0cy5zdGFja09uUGxheWVyLFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFtkZWZhdWx0QWxlcnRUZXh0KHNldildOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSBkYXRhLm1lKVxyXG4gICAgICAgICAgcmV0dXJuIG91dHB1dC5zdGFja09uWW91Py4oKTtcclxuICAgICAgICByZXR1cm4gb3V0cHV0LnN0YWNrT25UYXJnZXQ/Lih7IHBsYXllcjogZGF0YS5TaG9ydE5hbWUodGFyZ2V0KSB9KTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuICBzdGFja01pZGRsZTogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5zdGFja01pZGRsZSksXHJcbiAgZG9yaXRvU3RhY2s6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLmRvcml0b1N0YWNrKSxcclxuICBzcHJlYWRUaGVuU3RhY2s6IChzZXY/OiBTZXZlcml0eSkgPT4ge1xyXG4gICAgcmV0dXJuIHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5zcHJlYWRUaGVuU3RhY2spO1xyXG4gIH0sXHJcbiAgc3RhY2tUaGVuU3ByZWFkOiAoc2V2PzogU2V2ZXJpdHkpID0+IHtcclxuICAgIHJldHVybiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMuc3RhY2tUaGVuU3ByZWFkKTtcclxuICB9LFxyXG4gIGtub2NrYmFjazogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMua25vY2tiYWNrKSxcclxuICBrbm9ja2JhY2tPbjogKHRhcmdldFNldj86IFNldmVyaXR5LCBvdGhlclNldj86IFNldmVyaXR5KSA9PiB7XHJcbiAgICBjb25zdCBvdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBrbm9ja2JhY2tPbllvdTogT3V0cHV0cy5rbm9ja2JhY2tPbllvdSxcclxuICAgICAga25vY2tiYWNrT25UYXJnZXQ6IE91dHB1dHMua25vY2tiYWNrT25QbGF5ZXIsXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHRhcmdldEZ1bmMgPSAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQobWF0Y2hlcyk7XHJcbiAgICAgIGlmICh0YXJnZXQgPT09IGRhdGEubWUpXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5rbm9ja2JhY2tPbllvdT8uKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG90aGVyRnVuYyA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgaWYgKHRhcmdldCAhPT0gZGF0YS5tZSlcclxuICAgICAgICByZXR1cm4gb3V0cHV0Lmtub2NrYmFja09uVGFyZ2V0Py4oeyBwbGF5ZXI6IGRhdGEuU2hvcnROYW1lKHRhcmdldCkgfSk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgY29tYmluZWQgPSBjb21iaW5lRnVuY3MoZGVmYXVsdEluZm9UZXh0KHRhcmdldFNldiksIHRhcmdldEZ1bmMsXHJcbiAgICAgICAgZGVmYXVsdEluZm9UZXh0KG90aGVyU2V2KSwgb3RoZXJGdW5jKTtcclxuICAgIHJldHVybiAoX2RhdGE6IERhdGEsIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAvLyBjYWN0Ym90LWJ1aWx0aW4tcmVzcG9uc2VcclxuICAgICAgb3V0cHV0LnJlc3BvbnNlT3V0cHV0U3RyaW5ncyA9IG91dHB1dFN0cmluZ3M7XHJcbiAgICAgIHJldHVybiBjb21iaW5lZDtcclxuICAgIH07XHJcbiAgfSxcclxuICBsb29rVG93YXJkczogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5sb29rVG93YXJkc0Jvc3MpLFxyXG4gIGxvb2tBd2F5OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLmxvb2tBd2F5KSxcclxuICBsb29rQXdheUZyb21UYXJnZXQ6IChzZXY/OiBTZXZlcml0eSkgPT4gKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgb3V0cHV0LnJlc3BvbnNlT3V0cHV0U3RyaW5ncyA9IHtcclxuICAgICAgbG9va0F3YXlGcm9tOiBPdXRwdXRzLmxvb2tBd2F5RnJvbVRhcmdldCxcclxuICAgIH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQobWF0Y2hlcyk7XHJcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gZGF0YS5tZSlcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBjb25zdCBuYW1lID0gaXNQbGF5ZXJJZChtYXRjaGVzPy50YXJnZXRJZCkgPyBkYXRhLlNob3J0TmFtZSh0YXJnZXQpIDogdGFyZ2V0O1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQubG9va0F3YXlGcm9tPy4oeyBuYW1lOiBuYW1lIH0pO1xyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9LFxyXG4gIGxvb2tBd2F5RnJvbVNvdXJjZTogKHNldj86IFNldmVyaXR5KSA9PiAoX2RhdGE6IERhdGEsIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBsb29rQXdheUZyb206IE91dHB1dHMubG9va0F3YXlGcm9tVGFyZ2V0LFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFtkZWZhdWx0QWxlcnRUZXh0KHNldildOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGdldFNvdXJjZShtYXRjaGVzKTtcclxuICAgICAgICBpZiAoc291cmNlID09PSBkYXRhLm1lKVxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSBpc1BsYXllcklkKG1hdGNoZXM/LnNvdXJjZUlkKSA/IGRhdGEuU2hvcnROYW1lKHNvdXJjZSkgOiBzb3VyY2U7XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5sb29rQXdheUZyb20/Lih7IG5hbWU6IG5hbWUgfSk7XHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgZ2V0QmVoaW5kOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nZXRCZWhpbmQpLFxyXG4gIGdvRnJvbnRPclNpZGVzOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nb0Zyb250T3JTaWRlcyksXHJcbiAgLy8gLmdldFVuZGVyKCkgaXMgdXNlZCB3aGVuIHlvdSBoYXZlIHRvIGdldCBpbnRvIHRoZSBib3NzZXMgaGl0Ym94XHJcbiAgZ2V0VW5kZXI6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuZ2V0VW5kZXIpLFxyXG4gIC8vIC5nZXRJbigpIGlzIG1vcmUgbGlrZSBcImdldCBjbG9zZSBidXQgbWF5YmUgZXZlbiBtZWxlZSByYW5nZSBpcyBmaW5lXCJcclxuICBnZXRJbjogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMuaW4pLFxyXG4gIC8vIC5nZXRPdXQoKSBtZWFucyBnZXQgZmFyIGF3YXlcclxuICBnZXRPdXQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLm91dCksXHJcbiAgb3V0T2ZNZWxlZTogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5vdXRPZk1lbGVlKSxcclxuICBnZXRJblRoZW5PdXQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuaW5UaGVuT3V0KSxcclxuICBnZXRPdXRUaGVuSW46IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMub3V0VGhlbkluKSxcclxuICBnZXRCYWNrVGhlbkZyb250OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLmJhY2tUaGVuRnJvbnQpLFxyXG4gIGdldEZyb250VGhlbkJhY2s6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuZnJvbnRUaGVuQmFjayksXHJcbiAgZ29NaWRkbGU6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLmdvSW50b01pZGRsZSksXHJcbiAgZ29SaWdodDogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMucmlnaHQpLFxyXG4gIGdvTGVmdDogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMubGVmdCksXHJcbiAgZ29XZXN0OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nZXRMZWZ0QW5kV2VzdCksXHJcbiAgZ29FYXN0OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nZXRSaWdodEFuZEVhc3QpLFxyXG4gIGdvRnJvbnRCYWNrOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nb0Zyb250QmFjayksXHJcbiAgZ29TaWRlczogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMuc2lkZXMpLFxyXG4gIC8vIC5raWxsQWRkcygpIGlzIHVzZWQgZm9yIGFkZHMgdGhhdCB3aWxsIGFsd2F5cyBiZSBhdmFpbGFibGVcclxuICBraWxsQWRkczogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5raWxsQWRkcyksXHJcbiAgLy8gLmtpbGxFeHRyYUFkZCgpIGlzIHVzZWQgZm9yIGFkZHMgdGhhdCBhcHBlYXIgaWYgYSBtZWNoYW5pYyB3YXMgbm90IHBsYXllZCBjb3JyZWN0bHlcclxuICBraWxsRXh0cmFBZGQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMua2lsbEV4dHJhQWRkKSxcclxuICBhd2F5RnJvbUZyb250OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5hd2F5RnJvbUZyb250KSxcclxuICBzbGVlcDogKHNldj86IFNldmVyaXR5KSA9PiAoX2RhdGE6IERhdGEsIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBzbGVlcDogT3V0cHV0cy5zbGVlcFRhcmdldCxcclxuICAgIH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKF9kYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc291cmNlID0gZ2V0U291cmNlKG1hdGNoZXMpO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQuc2xlZXA/Lih7IG5hbWU6IHNvdXJjZSB9KTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuICBzdHVuOiAoc2V2PzogU2V2ZXJpdHkpID0+IChfZGF0YTogRGF0YSwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAvLyBjYWN0Ym90LWJ1aWx0aW4tcmVzcG9uc2VcclxuICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgIHN0dW46IE91dHB1dHMuc3R1blRhcmdldCxcclxuICAgIH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKF9kYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc291cmNlID0gZ2V0U291cmNlKG1hdGNoZXMpO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQuc3R1bj8uKHsgbmFtZTogc291cmNlIH0pO1xyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9LFxyXG4gIGludGVycnVwdDogKHNldj86IFNldmVyaXR5KSA9PiAoX2RhdGE6IERhdGEsIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBpbnRlcnJ1cHQ6IE91dHB1dHMuaW50ZXJydXB0VGFyZ2V0LFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFtkZWZhdWx0QWxlcnRUZXh0KHNldildOiAoX2RhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgICBjb25zdCBzb3VyY2UgPSBnZXRTb3VyY2UobWF0Y2hlcyk7XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5pbnRlcnJ1cHQ/Lih7IG5hbWU6IHNvdXJjZSB9KTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuICBwcmV5T246ICh0YXJnZXRTZXY/OiBTZXZlcml0eSwgb3RoZXJTZXY/OiBTZXZlcml0eSkgPT4ge1xyXG4gICAgY29uc3Qgb3V0cHV0U3RyaW5ncyA9IHtcclxuICAgICAgcHJleU9uWW91OiBPdXRwdXRzLnByZXlPbllvdSxcclxuICAgICAgcHJleU9uVGFyZ2V0OiBPdXRwdXRzLnByZXlPblBsYXllcixcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdGFyZ2V0RnVuYyA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgaWYgKGRhdGEubWUgPT09IHRhcmdldClcclxuICAgICAgICByZXR1cm4gb3V0cHV0LnByZXlPbllvdT8uKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG90aGVyRnVuYyA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgaWYgKHRhcmdldCAhPT0gZGF0YS5tZSlcclxuICAgICAgICByZXR1cm4gb3V0cHV0LnByZXlPblRhcmdldD8uKHsgcGxheWVyOiBkYXRhLlNob3J0TmFtZSh0YXJnZXQpIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBjb21iaW5lZCA9IGNvbWJpbmVGdW5jcyhkZWZhdWx0QWxlcnRUZXh0KHRhcmdldFNldiksIHRhcmdldEZ1bmMsXHJcbiAgICAgICAgZGVmYXVsdEluZm9UZXh0KG90aGVyU2V2KSwgb3RoZXJGdW5jKTtcclxuICAgIHJldHVybiAoX2RhdGE6IERhdGEsIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAvLyBjYWN0Ym90LWJ1aWx0aW4tcmVzcG9uc2VcclxuICAgICAgb3V0cHV0LnJlc3BvbnNlT3V0cHV0U3RyaW5ncyA9IG91dHB1dFN0cmluZ3M7XHJcbiAgICAgIHJldHVybiBjb21iaW5lZDtcclxuICAgIH07XHJcbiAgfSxcclxuICBhd2F5RnJvbTogKHNldj86IFNldmVyaXR5KSA9PiAoX2RhdGE6IERhdGEsIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBhd2F5RnJvbUdyb3VwOiBPdXRwdXRzLmF3YXlGcm9tR3JvdXAsXHJcbiAgICAgIGF3YXlGcm9tVGFyZ2V0OiBPdXRwdXRzLmF3YXlGcm9tUGxheWVyLFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFtkZWZhdWx0QWxlcnRUZXh0KHNldildOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgICBpZiAoZGF0YS5tZSA9PT0gdGFyZ2V0KVxyXG4gICAgICAgICAgcmV0dXJuIG91dHB1dC5hd2F5RnJvbUdyb3VwPy4oKTtcclxuICAgICAgICByZXR1cm4gb3V0cHV0LmF3YXlGcm9tVGFyZ2V0Py4oeyBwbGF5ZXI6IGRhdGEuU2hvcnROYW1lKHRhcmdldCkgfSk7XHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgbWV0ZW9yT25Zb3U6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsYXJtVGV4dChzZXYpLCBPdXRwdXRzLm1ldGVvck9uWW91KSxcclxuICBzdG9wTW92aW5nOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGFybVRleHQoc2V2KSwgT3V0cHV0cy5zdG9wTW92aW5nKSxcclxuICBzdG9wRXZlcnl0aGluZzogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxhcm1UZXh0KHNldiksIE91dHB1dHMuc3RvcEV2ZXJ5dGhpbmcpLFxyXG4gIC8vIG1vdmUgYXdheSB0byBkb2RnZSBhb2VzXHJcbiAgbW92ZUF3YXk6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMubW92ZUF3YXkpLFxyXG4gIC8vIG1vdmUgYXJvdW5kIChlLmcuIGp1bXBpbmcpIHRvIGF2b2lkIGJlaW5nIGZyb3plblxyXG4gIG1vdmVBcm91bmQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMubW92ZUFyb3VuZCksXHJcbiAgYnJlYWtDaGFpbnM6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuYnJlYWtDaGFpbnMpLFxyXG4gIG1vdmVDaGFpbnNUb2dldGhlcjogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSxcclxuICAgICAgT3V0cHV0cy5tb3ZlQ2hhaW5zVG9nZXRoZXIpLFxyXG4gIGVhcnRoc2hha2VyOiAoc2V2PzogU2V2ZXJpdHkpID0+IChfZGF0YTogRGF0YSwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAvLyBjYWN0Ym90LWJ1aWx0aW4tcmVzcG9uc2VcclxuICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgIGVhcnRoc2hha2VyOiBPdXRwdXRzLmVhcnRoc2hha2VyT25Zb3UsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgW2RlZmF1bHRBbGVydFRleHQoc2V2KV06IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG1hdGNoZXMpO1xyXG4gICAgICAgIGlmICh0YXJnZXQgIT09IGRhdGEubWUpXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5lYXJ0aHNoYWtlcj8uKCk7XHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgd2FrZVVwOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGFybVRleHQoc2V2KSwgT3V0cHV0cy53YWtlVXApLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLy8gRG9uJ3QgZ2l2ZSBgUmVzcG9uc2VzYCBhIHR5cGUgaW4gaXRzIGRlY2xhcmF0aW9uIHNvIHRoYXQgaXQgY2FuIGJlIHRyZWF0ZWQgYXMgbW9yZSBzdHJpY3RcclxuLy8gdGhhbiBgUmVzcG9uc2VzTWFwYCwgYnV0IGRvIGFzc2VydCB0aGF0IGl0cyB0eXBlIGlzIGNvcnJlY3QuICBUaGlzIGFsbG93cyBjYWxsZXJzIHRvIGtub3dcclxuLy8gd2hpY2ggcHJvcGVydGllcyBhcmUgZGVmaW5lZCBpbiBSZXNwb25zZXMgd2l0aG91dCBoYXZpbmcgdG8gY29uZGl0aW9uYWxseSBjaGVjayBmb3IgdW5kZWZpbmVkLlxyXG5jb25zdCByZXNwb25zZU1hcFR5cGVBc3NlcnRpb246IFJlc3BvbnNlc01hcCA9IFJlc3BvbnNlcztcclxuLy8gU3VwcHJlc3MgdW51c2VkIHZhcmlhYmxlIHdhcm5pbmcuXHJcbmNvbnNvbGUuYXNzZXJ0KHJlc3BvbnNlTWFwVHlwZUFzc2VydGlvbik7XHJcbiIsImltcG9ydCB7IExhbmcgfSBmcm9tICcuL2xhbmd1YWdlcyc7XHJcbmltcG9ydCB7IEJhc2VPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMvZGF0YSc7XHJcbmltcG9ydCB7IENhY3Rib3RMb2FkVXNlclJldCwgU2F2ZWRDb25maWcsIFNhdmVkQ29uZmlnRW50cnkgfSBmcm9tICcuLi90eXBlcy9ldmVudCc7XHJcbmltcG9ydCB7IExvY2FsZVRleHQgfSBmcm9tICcuLi90eXBlcy90cmlnZ2VyJztcclxuaW1wb3J0IHsgYWRkT3ZlcmxheUxpc3RlbmVyLCBjYWxsT3ZlcmxheUhhbmRsZXIgfSBmcm9tICcuL292ZXJsYXlfcGx1Z2luX2FwaSc7XHJcbmltcG9ydCB7IFVucmVhY2hhYmxlQ29kZSB9IGZyb20gJy4vbm90X3JlYWNoZWQnO1xyXG5cclxuLy8gVE9ETzpcclxuLy8gVGhlIGNvbnZlbnRpb24gb2YgXCJpbXBvcnQgWCBhcyBfWDsgY29uc3QgWCA9IF9YO1wiIGlzIGN1cnJlbnRseVxyXG4vLyBiZWluZyB1c2VkIGFzIGEgbWV0aG9kIHRvIHdvcmthcm91bmQgZm9yIGRvd25zdHJlYW0gY29kZVxyXG4vLyB0aGF0IGlzIHJ1bm5pbmcgdmlhIGV2YWwoKS4gQmVjYXVzZSBpbXBvcnRpbmcgc3RhdGVtZW50cyBkbyBub3RcclxuLy8gY3JlYXRlIGEgdmFyaWFibGUgb2YgdGhlIHNhbWUgbmFtZSwgdGhlIGV2YWwoKSdkIGNvZGUgZG9lcyBub3Qga25vd1xyXG4vLyBhYm91dCB0aGUgaW1wb3J0LCBhbmQgdGh1cyB0aHJvd3MgUmVmZXJlbmNlRXJyb3JzLlxyXG4vLyBVc2VkIGJ5IGRvd25zdHJlYW0gZXZhbFxyXG5pbXBvcnQgX0NvbmRpdGlvbnMgZnJvbSAnLi9jb25kaXRpb25zJztcclxuY29uc3QgQ29uZGl0aW9ucyA9IF9Db25kaXRpb25zO1xyXG5pbXBvcnQgX0NvbnRlbnRUeXBlIGZyb20gJy4vY29udGVudF90eXBlJztcclxuY29uc3QgQ29udGVudFR5cGUgPSBfQ29udGVudFR5cGU7XHJcbmltcG9ydCBfTmV0UmVnZXhlcyBmcm9tICcuL25ldHJlZ2V4ZXMnO1xyXG5jb25zdCBOZXRSZWdleGVzID0gX05ldFJlZ2V4ZXM7XHJcbmltcG9ydCBfUmVnZXhlcyBmcm9tICcuL3JlZ2V4ZXMnO1xyXG5jb25zdCBSZWdleGVzID0gX1JlZ2V4ZXM7XHJcbmltcG9ydCB7IFJlc3BvbnNlcyBhcyBfUmVzcG9uc2VzIH0gZnJvbSAnLi9yZXNwb25zZXMnO1xyXG5jb25zdCBSZXNwb25zZXMgPSBfUmVzcG9uc2VzO1xyXG5pbXBvcnQgX091dHB1dHMgZnJvbSAnLi9vdXRwdXRzJztcclxuY29uc3QgT3V0cHV0cyA9IF9PdXRwdXRzO1xyXG5pbXBvcnQgX1V0aWwgZnJvbSAnLi91dGlsJztcclxuY29uc3QgVXRpbCA9IF9VdGlsO1xyXG5pbXBvcnQgX1pvbmVJZCBmcm9tICcuL3pvbmVfaWQnO1xyXG5jb25zdCBab25lSWQgPSBfWm9uZUlkO1xyXG5pbXBvcnQgX1pvbmVJbmZvIGZyb20gJy4vem9uZV9pbmZvJztcclxuY29uc3QgWm9uZUluZm8gPSBfWm9uZUluZm87XHJcblxyXG4vLyBDb252aW5jZSBUeXBlU2NyaXB0IGFuZCBlc2xpbnQgdGhhdCB0aGVzZSBhcmUgdXNlZC4gIFR5cGVTY3JpcHQgZG9lc24ndCBoYXZlIGEgZ3JlYXQgd2F5XHJcbi8vIHRvIGRpc2FibGUgaW5kaXZpZHVhbCBydWxlcywgc28gdGhpcyBpcyBzYWZlciB0aGFuIGRpc2FibGluZyBhbGwgcnVsZXMuXHJcbmNvbnNvbGUuYXNzZXJ0KENvbmRpdGlvbnMgJiYgQ29udGVudFR5cGUgJiYgTmV0UmVnZXhlcyAmJiBSZWdleGVzICYmXHJcbiAgICBSZXNwb25zZXMgJiYgT3V0cHV0cyAmJiBVdGlsICYmIFpvbmVJZCAmJiBab25lSW5mbyk7XHJcblxyXG4vLyBUT0RPOiB0aGlzIHR5cGUgaXMgaW4gY29uZmlnLmpzLlxyXG50eXBlIENhY3Rib3RDb25maWd1cmF0b3IgPSB1bmtub3duO1xyXG5cclxuLy8gVE9ETzogbW92ZSBhbGwgb2YgdGhlc2UgdG8gY29uZmlnLmpzP1xyXG50eXBlIFVzZXJGaWxlQ2FsbGJhY2sgPSAoanNGaWxlOiBzdHJpbmcsIGxvY2FsRmlsZXM6IHsgW2ZpbGVuYW1lOiBzdHJpbmddOiBzdHJpbmcgfSxcclxuICBvcHRpb25zOiBCYXNlT3B0aW9ucywgYmFzZVBhdGg6IHN0cmluZykgPT4gdm9pZDtcclxudHlwZSBDb25maWdWYWx1ZSA9IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW47XHJcbnR5cGUgQ29uZmlnRW50cnkgPSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBuYW1lOiBMb2NhbGVUZXh0O1xyXG4gIHR5cGU6ICdjaGVja2JveCcgfCAnc2VsZWN0JyB8ICdmbG9hdCcgfCAnaW50ZWdlcicgfCAnZGlyZWN0b3J5JztcclxuICBkZWZhdWx0OiBDb25maWdWYWx1ZTtcclxuICBkZWJ1Zz86IGJvb2xlYW47XHJcbiAgZGVidWdPbmx5PzogYm9vbGVhbjtcclxuICAvLyBGb3Igc2VsZWN0LlxyXG4gIG9wdGlvbnM/OiB7XHJcbiAgICBbbGFuZyBpbiBMYW5nXT86IHtcclxuICAgICAgW3NlbGVjdFRleHQ6IHN0cmluZ106IHN0cmluZztcclxuICAgIH1cclxuICB9O1xyXG4gIHNldHRlckZ1bmM/OiAob3B0aW9uczogQmFzZU9wdGlvbnMsIHZhbHVlOiBTYXZlZENvbmZpZ0VudHJ5KSA9PiB2b2lkO1xyXG59O1xyXG5cclxudHlwZSBPcHRpb25zVGVtcGxhdGUgPSB7XHJcbiAgYnVpbGRFeHRyYVVJPzogKGJhc2U6IENhY3Rib3RDb25maWd1cmF0b3IsIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpID0+IHZvaWQ7XHJcbiAgcHJvY2Vzc0V4dHJhT3B0aW9ucz86IChvcHRpb25zOiBCYXNlT3B0aW9ucywgc2F2ZWRDb25maWc6IFNhdmVkQ29uZmlnRW50cnkpID0+IHZvaWQ7XHJcbiAgb3B0aW9uczogQ29uZmlnRW50cnlbXTtcclxufTtcclxuXHJcbmNsYXNzIFVzZXJDb25maWcge1xyXG4gIHByaXZhdGUgb3B0aW9uVGVtcGxhdGVzOiB7IFtvdmVybGF5TmFtZTogc3RyaW5nXTogT3B0aW9uc1RlbXBsYXRlIH0gPSB7fTtcclxuICBwcml2YXRlIHNhdmVkQ29uZmlnOiBTYXZlZENvbmZpZyA9IHt9O1xyXG4gIHByaXZhdGUgdXNlckZpbGVDYWxsYmFja3M6IHsgW292ZXJsYXlOYW1lOiBzdHJpbmddOiBVc2VyRmlsZUNhbGxiYWNrIH0gPSB7fTtcclxuXHJcbiAgZ2V0RGVmYXVsdEJhc2VPcHRpb25zKCk6IEJhc2VPcHRpb25zIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFBhcnNlckxhbmd1YWdlOiAnZW4nLFxyXG4gICAgICBTaG9ydExvY2FsZTogJ2VuJyxcclxuICAgICAgRGlzcGxheUxhbmd1YWdlOiAnZW4nLFxyXG4gICAgICBUZXh0QWxlcnRzRW5hYmxlZDogdHJ1ZSxcclxuICAgICAgU291bmRBbGVydHNFbmFibGVkOiB0cnVlLFxyXG4gICAgICBTcG9rZW5BbGVydHNFbmFibGVkOiBmYWxzZSxcclxuICAgICAgR3JvdXBTcG9rZW5BbGVydHNFbmFibGVkOiBmYWxzZSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBldmFsVXNlckZpbGUoY29udGVudDogc3RyaW5nLCBvcHRpb25zOiBCYXNlT3B0aW9ucyk6IHZvaWQge1xyXG4gICAgY29uc3QgT3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICBjb25zb2xlLmFzc2VydChPcHRpb25zKTsgLy8gVXNlZCBieSBldmFsLlxyXG5cclxuICAgIC8vIFRoaXMgaXMgdGhlIG9uZSBldmFsIGNhY3Rib3Qgc2hvdWxkIGV2ZXIgbmVlZCwgd2hpY2ggaXMgZm9yIGhhbmRsaW5nIHVzZXIgZmlsZXMuXHJcbiAgICAvLyBCZWNhdXNlIHVzZXIgZmlsZXMgY2FuIGJlIGxvY2F0ZWQgYW55d2hlcmUgb24gZGlzayBhbmQgdGhlcmUncyBiYWNrd2FyZHMgY29tcGF0XHJcbiAgICAvLyBpc3N1ZXMsIGl0J3MgdW5saWtlbHkgdGhhdCB0aGVzZSB3aWxsIGJlIGFibGUgdG8gYmUgYW55dGhpbmcgYnV0IGV2YWwgZm9yZXZlci5cclxuICAgIC8vXHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1ldmFsICovXHJcbiAgICBldmFsKGNvbnRlbnQpO1xyXG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1ldmFsICovXHJcbiAgfVxyXG5cclxuICByZWdpc3Rlck9wdGlvbnMob3ZlcmxheU5hbWU6IHN0cmluZywgb3B0aW9uVGVtcGxhdGU6IE9wdGlvbnNUZW1wbGF0ZSxcclxuICAgICAgdXNlckZpbGVDYWxsYmFjaz86IFVzZXJGaWxlQ2FsbGJhY2spIHtcclxuICAgIHRoaXMub3B0aW9uVGVtcGxhdGVzW292ZXJsYXlOYW1lXSA9IG9wdGlvblRlbXBsYXRlO1xyXG4gICAgaWYgKHVzZXJGaWxlQ2FsbGJhY2spXHJcbiAgICAgIHRoaXMudXNlckZpbGVDYWxsYmFja3Nbb3ZlcmxheU5hbWVdID0gdXNlckZpbGVDYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHNvcnRVc2VyRmlsZXMoa2V5czogc3RyaW5nW10pIHtcclxuICAgIC8vIEhlbHBlciBkYXRhIHN0cnVjdHVyZSBmb3Igc3ViZGlyZWN0b3JpZXMuXHJcbiAgICBjb25zdCBzcGxpdEtleU1hcDogeyBbazogc3RyaW5nXTogc3RyaW5nW10gfSA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cylcclxuICAgICAgc3BsaXRLZXlNYXBba2V5XSA9IGtleS50b1VwcGVyQ2FzZSgpLnNwbGl0KC9bL1xcXFxdLyk7XHJcblxyXG4gICAgLy8gU29ydCBwYXRocyBhcyBhIGRlcHRoLWZpcnN0IGNhc2UtaW5zZW5zaXRpdmUgYWxwaGFiZXRpY2FsIHN1YmRpcmVjdG9yeSB3YWxrLCBmb2xsb3dlZCBieVxyXG4gICAgLy8gYWxsIGZpbGVzIHNvcnRlZCBjYXNlLWluc2Vuc2l0aXZlIGFscGhhYmV0aWNhbGx5IG9uY2UgYSBzdWJkaXIgaGFzIGJlZW4gcHJvY2Vzc2VkLCBlLmcuXHJcbiAgICAvLyAgKiBhL3NvbWUuanNcclxuICAgIC8vICAqIGIvc3ViZGlyMS96L3ovei9uZXN0ZWRfZmlsZS5qc1xyXG4gICAgLy8gICogYi9zdWJkaXIxL2ZpbGUuanNcclxuICAgIC8vICAqIGIvc3ViZGlyMi9maXJzdC5qc1xyXG4gICAgLy8gICogYi9zdWJkaXIyL3NlY29uZC5qc1xyXG4gICAgLy8gICogYi9zb21lX2ZpbGUuanNcclxuICAgIC8vICAqIHJvb3RfZmlsZTEuanNcclxuICAgIC8vICAqIHJvb3RfZmlsZTIuanNcclxuICAgIHJldHVybiBrZXlzLnNvcnQoKGtleUEsIGtleUIpID0+IHtcclxuICAgICAgY29uc3QgbGlzdEEgPSBzcGxpdEtleU1hcFtrZXlBXTtcclxuICAgICAgY29uc3QgbGlzdEIgPSBzcGxpdEtleU1hcFtrZXlCXTtcclxuICAgICAgaWYgKGxpc3RBID09PSB1bmRlZmluZWQgfHwgbGlzdEIgPT09IHVuZGVmaW5lZClcclxuICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgICBjb25zdCBtYXhMZW4gPSBNYXRoLm1heChsaXN0QS5sZW5ndGgsIGxpc3RCLmxlbmd0aCk7XHJcbiAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG1heExlbjsgKytpZHgpIHtcclxuICAgICAgICBjb25zdCBlbnRyeUEgPSBsaXN0QVtpZHhdO1xyXG4gICAgICAgIGNvbnN0IGVudHJ5QiA9IGxpc3RCW2lkeF07XHJcbiAgICAgICAgLy8gSW4gcHJhY3RpY2UsIHRoZXJlJ3MgYWx3YXlzIGF0IGxlYXN0IG9uZSBlbnRyeS5cclxuICAgICAgICBpZiAoZW50cnlBID09PSB1bmRlZmluZWQgfHwgZW50cnlCID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgICAgIC8vIElmIGJvdGggc3ViZGlyZWN0b3JpZXMgb3IgYm90aCBmaWxlcywgdGhlbiBjb21wYXJlIG5hbWVzLlxyXG4gICAgICAgIGNvbnN0IGlzTGFzdEEgPSBsaXN0QS5sZW5ndGggLSAxID09PSBpZHg7XHJcbiAgICAgICAgY29uc3QgaXNMYXN0QiA9IGxpc3RCLmxlbmd0aCAtIDEgPT09IGlkeDtcclxuXHJcbiAgICAgICAgaWYgKGlzTGFzdEEgJiYgaXNMYXN0Qikge1xyXG4gICAgICAgICAgLy8gSWYgYm90aCBsYXN0LCB0aGVuIHRoaXMgaXMgYSBmaWxlbmFtZSBjb21wYXJpc29uLlxyXG5cclxuICAgICAgICAgIC8vIEZpcnN0LCBjb21wYXJlIGZpbGVuYW1lIHdpdGhvdXQgZXh0ZW5zaW9uLlxyXG4gICAgICAgICAgY29uc3QgZmlsZUEgPSBlbnRyeUEucmVwbGFjZSgvXFwuW15cXC5dKiQvLCAnJyk7XHJcbiAgICAgICAgICBjb25zdCBmaWxlQiA9IGVudHJ5Qi5yZXBsYWNlKC9cXC5bXlxcLl0qJC8sICcnKTtcclxuICAgICAgICAgIGNvbnN0IGZpbGVuYW1lT25seURpZmYgPSBmaWxlQS5sb2NhbGVDb21wYXJlKGZpbGVCKTtcclxuICAgICAgICAgIGlmIChmaWxlbmFtZU9ubHlEaWZmKVxyXG4gICAgICAgICAgICByZXR1cm4gZmlsZW5hbWVPbmx5RGlmZjtcclxuXHJcbiAgICAgICAgICAvLyBTZWNvbmQsIGNvbXBhcmUgaW5jbHVkaW5nIHRoZSBleHRlbnNpb24uXHJcbiAgICAgICAgICAvLyBBbHdheXMgcmV0dXJuIHNvbWV0aGluZyBoZXJlLCBzZWUgbm90ZSBiZWxvdy5cclxuICAgICAgICAgIHJldHVybiBlbnRyeUEubG9jYWxlQ29tcGFyZShlbnRyeUIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzTGFzdEEgJiYgIWlzTGFzdEIpIHtcclxuICAgICAgICAgIC8vIElmIGJvdGggbm90IGxhc3QsIHRoaXMgaXMgYSBzdWJkaXJlY3RvcnkgY29tcGFyaXNvbi5cclxuICAgICAgICAgIGNvbnN0IGRpZmYgPSBlbnRyeUEubG9jYWxlQ29tcGFyZShlbnRyeUIpO1xyXG4gICAgICAgICAgaWYgKGRpZmYpXHJcbiAgICAgICAgICAgIHJldHVybiBkaWZmO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgaWYgaWR4IGlzIHRoZSBmaW5hbCBmb3IgZWFjaCwgd2Ugd291bGQgaGF2ZSByZXR1cm5lZCBhYm92ZS5cclxuICAgICAgICAvLyBTbywgY2hlY2sgaWYgZWl0aGVyIGEgb3IgYiBpcyBhdCB0aGUgZmluYWwgZW50cnkgaW4gc3BsaXRLZXlNYXAuXHJcbiAgICAgICAgLy8gSWYgc28sIHRoZW4gdGhlcmUncyBhIG1pc21hdGNoIGluIG51bWJlciBvZiBkaXJlY3RvcmllcywgYW5kIHdlIGtub3cgb25lXHJcbiAgICAgICAgLy8gdGhlIG9uZSB3aXRoIGEgZmlsZW5hbWUgc2hvdWxkIGJlIHNvcnRlZCBsYXN0LlxyXG5cclxuICAgICAgICBpZiAobGlzdEEubGVuZ3RoIC0gMSA8PSBpZHgpIHtcclxuICAgICAgICAgIC8vIGEgaGFzIGZld2VyIHN1YmRpcmVjdG9yaWVzLCBzbyBzaG91bGQgYmUgc29ydGVkIGxhc3QuXHJcbiAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpc3RCLmxlbmd0aCAtIDEgPD0gaWR4KSB7XHJcbiAgICAgICAgICAvLyBhIGhhcyBtb3JlIHN1YmRpcmVjdG9yaWVzLCBzbyBzaG91bGQgYmUgc29ydGVkIGZpcnN0LlxyXG4gICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gR2l2ZW4gYSBzZXQgb2YgcGF0aHMsIGFuIG92ZXJsYXlOYW1lLCBhbmQgYW4gZXh0ZW5zaW9uLCByZXR1cm4gYWxsIHBhdGhzIHdpdGhcclxuICAvLyB0aGF0IGV4dGVuc2lvbiB0aGF0IGhhdmUgYG92ZXJsYXlOYW1lYCBlaXRoZXIgYXMgdGhlaXIgZW50aXJlIGZpbGVuYW1lIChubyBzdWJkaXIpXHJcbiAgLy8gb3IgYXJlIGluc2lkZSBhIHJvb3QtbGV2ZWwgc3ViZGlyZWN0b3J5IG5hbWVkIGBvdmVybGF5TmFtZWAvICBUaGUgZXh0ZW5zaW9uIHNob3VsZFxyXG4gIC8vIGluY2x1ZGUgdGhlIHBlcmlvZCBzZXBhcmF0b3IsIGUuZy4gXCIuanNcIi4gIEFsbCBjb21wYXJpc29ucyBhcmUgY2FzZSBpbnNlbnNpdGl2ZS5cclxuICBmaWx0ZXJVc2VyRmlsZXMocGF0aHM6IHN0cmluZ1tdLCBvcmlnT3ZlcmxheU5hbWU6IHN0cmluZywgb3JpZ0V4dGVuc2lvbjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBleHRlbnNpb24gPSBvcmlnRXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBjb25zdCBvdmVybGF5TmFtZSA9IG9yaWdPdmVybGF5TmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgcmV0dXJuIHBhdGhzLmZpbHRlcigob3JpZ1BhdGgpID0+IHtcclxuICAgICAgY29uc3QgcGF0aCA9IG9yaWdQYXRoLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIGlmICghcGF0aC5lbmRzV2l0aChleHRlbnNpb24pKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgaWYgKHBhdGggPT09IGAke292ZXJsYXlOYW1lfSR7ZXh0ZW5zaW9ufWApXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIGlmIChwYXRoLnN0YXJ0c1dpdGgoYCR7b3ZlcmxheU5hbWV9L2ApIHx8IHBhdGguc3RhcnRzV2l0aChgJHtvdmVybGF5TmFtZX1cXFxcYCkpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckNvbmZpZ0xvY2F0aW9uKG92ZXJsYXlOYW1lOiBzdHJpbmcsIG9wdGlvbnM6IEJhc2VPcHRpb25zLCBjYWxsYmFjazogKCkgPT4gdm9pZCkge1xyXG4gICAgbGV0IGN1cnJlbnRseVJlbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgY29uc3QgcmVsb2FkT25jZSA9ICgpID0+IHtcclxuICAgICAgaWYgKGN1cnJlbnRseVJlbG9hZGluZylcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIGN1cnJlbnRseVJlbG9hZGluZyA9IHRydWU7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgIH07XHJcblxyXG4gICAgYWRkT3ZlcmxheUxpc3RlbmVyKCdvblVzZXJGaWxlQ2hhbmdlZCcsICgpID0+IHtcclxuICAgICAgcmVsb2FkT25jZSgpO1xyXG4gICAgfSk7XHJcbiAgICBhZGRPdmVybGF5TGlzdGVuZXIoJ29uRm9yY2VSZWxvYWQnLCAoKSA9PiB7XHJcbiAgICAgIHJlbG9hZE9uY2UoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMubG9hZFVzZXJGaWxlcyhvdmVybGF5TmFtZSwgb3B0aW9ucywgY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgbG9hZFVzZXJGaWxlcyhvdmVybGF5TmFtZTogc3RyaW5nLCBvcHRpb25zOiBCYXNlT3B0aW9ucywgY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcclxuICAgIGNvbnN0IHJlYWRPcHRpb25zID0gY2FsbE92ZXJsYXlIYW5kbGVyKHtcclxuICAgICAgY2FsbDogJ2NhY3Rib3RMb2FkRGF0YScsXHJcbiAgICAgIG92ZXJsYXk6ICdvcHRpb25zJyxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGxvYWRVc2VyID0gYXN5bmMgKGU6IHsgZGV0YWlsOiBDYWN0Ym90TG9hZFVzZXJSZXQgfSkgPT4ge1xyXG4gICAgICAvLyBUaGUgYmFzZVBhdGggaXNuJ3QgdXNpbmcgZm9yIGFueXRoaW5nIG90aGVyIHRoYW4gY29zbWV0aWMgcHJpbnRpbmcgb2YgZnVsbCBwYXRocyxcclxuICAgICAgLy8gc28gcmVwbGFjZSBhbnkgc2xhc2hlcyBoZXJlIGZvciB1bmlmb3JtaXR5LiAgSW4gY2FzZSBhbnlib2R5IGlzIHVzaW5nIGNhY3Rib3Qgb25cclxuICAgICAgLy8gTGludXggKD8hPyksIHN1cHBvcnQgYW55IHN0eWxlIG9mIHNsYXNoZXMgZWxzZXdoZXJlLlxyXG4gICAgICBjb25zdCBiYXNlUGF0aCA9IGUuZGV0YWlsLnVzZXJMb2NhdGlvbi5yZXBsYWNlKC9bL1xcXFxdKiQvLCAnJykgKyAnXFxcXCc7XHJcbiAgICAgIGNvbnN0IGxvY2FsRmlsZXMgPSBlLmRldGFpbC5sb2NhbFVzZXJGaWxlcztcclxuXHJcbiAgICAgIC8vIFRoZSBwbHVnaW4gYXV0by1kZXRlY3RzIHRoZSBsYW5ndWFnZSwgc28gc2V0IHRoaXMgZmlyc3QuXHJcbiAgICAgIC8vIElmIG9wdGlvbnMgZmlsZXMgd2FudCB0byBvdmVycmlkZSBpdCwgdGhleSBjYW4gZm9yIHRlc3RpbmcuXHJcblxyXG4gICAgICAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5IChsYW5ndWFnZSBpcyBub3cgc2VwYXJhdGVkIHRvIHRocmVlIHR5cGVzLilcclxuICAgICAgaWYgKGUuZGV0YWlsLmxhbmd1YWdlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5QYXJzZXJMYW5ndWFnZSA9IGUuZGV0YWlsLmxhbmd1YWdlO1xyXG4gICAgICAgIG9wdGlvbnMuU2hvcnRMb2NhbGUgPSBlLmRldGFpbC5sYW5ndWFnZTtcclxuICAgICAgICBvcHRpb25zLkRpc3BsYXlMYW5ndWFnZSA9IGUuZGV0YWlsLmxhbmd1YWdlO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIFBhcnNlciBMYW5ndWFnZVxyXG4gICAgICBpZiAoZS5kZXRhaWwucGFyc2VyTGFuZ3VhZ2UpIHtcclxuICAgICAgICBvcHRpb25zLlBhcnNlckxhbmd1YWdlID0gZS5kZXRhaWwucGFyc2VyTGFuZ3VhZ2U7XHJcbiAgICAgICAgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZXZlcnl0aGluZyBcIkxhbmd1YWdlXCIgc2hvdWxkIGJlIGNoYW5nZWQgdG8gXCJQYXJzZXJMYW5ndWFnZVwiXHJcbiAgICAgICAgb3B0aW9ucy5MYW5ndWFnZSA9IGUuZGV0YWlsLnBhcnNlckxhbmd1YWdlO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHN1cHBvcnRlZExhbmd1YWdlID0gWydlbicsICdkZScsICdmcicsICdqYScsICdjbicsICdrbyddO1xyXG4gICAgICAvLyBTeXN0ZW0gTGFuZ3VhZ2VcclxuICAgICAgaWYgKGUuZGV0YWlsLnN5c3RlbUxvY2FsZSkge1xyXG4gICAgICAgIG9wdGlvbnMuU3lzdGVtTG9jYWxlID0gZS5kZXRhaWwuc3lzdGVtTG9jYWxlO1xyXG4gICAgICAgIG9wdGlvbnMuU2hvcnRMb2NhbGUgPSBlLmRldGFpbC5zeXN0ZW1Mb2NhbGUuc3Vic3RyaW5nKDAsIDIpO1xyXG4gICAgICAgIGlmIChvcHRpb25zLlNob3J0TG9jYWxlID09PSAnemgnKVxyXG4gICAgICAgICAgb3B0aW9ucy5TaG9ydExvY2FsZSA9ICdjbic7XHJcbiAgICAgICAgaWYgKCFzdXBwb3J0ZWRMYW5ndWFnZS5pbmNsdWRlcyhvcHRpb25zLlNob3J0TG9jYWxlKSlcclxuICAgICAgICAgIG9wdGlvbnMuU2hvcnRMb2NhbGUgPSBvcHRpb25zLlBhcnNlckxhbmd1YWdlO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIFVzZXIncyBzZXR0aW5nIExhbmd1YWdlXHJcbiAgICAgIG9wdGlvbnMuRGlzcGxheUxhbmd1YWdlID0gZS5kZXRhaWwuZGlzcGxheUxhbmd1YWdlO1xyXG4gICAgICBpZiAoIXN1cHBvcnRlZExhbmd1YWdlLmluY2x1ZGVzKG9wdGlvbnMuRGlzcGxheUxhbmd1YWdlKSlcclxuICAgICAgICBvcHRpb25zLkRpc3BsYXlMYW5ndWFnZSA9IG9wdGlvbnMuUGFyc2VyTGFuZ3VhZ2UgfHwgJ2VuJztcclxuXHJcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChgbGFuZy0ke29wdGlvbnMuRGlzcGxheUxhbmd1YWdlfWApO1xyXG4gICAgICB0aGlzLmFkZFVubG9ja1RleHQob3B0aW9ucy5EaXNwbGF5TGFuZ3VhZ2UpO1xyXG5cclxuICAgICAgLy8gSGFuZGxlIHByb2Nlc3NPcHRpb25zIGFmdGVyIGRlZmF1bHQgbGFuZ3VhZ2Ugc2VsZWN0aW9uIGFib3ZlLFxyXG4gICAgICAvLyBidXQgYmVmb3JlIGNzcyBiZWxvdyB3aGljaCBtYXkgbG9hZCBza2luIGZpbGVzLlxyXG4gICAgICAvLyBwcm9jZXNzT3B0aW9ucyBuZWVkcyB0byBiZSBjYWxsZWQgd2hldGhlciBvciBub3QgdGhlcmUgYXJlXHJcbiAgICAgIC8vIGFueSB1c2VyT3B0aW9ucyBzYXZlZCwgYXMgaXQgc2V0cyB1cCB0aGUgZGVmYXVsdHMuXHJcbiAgICAgIHRoaXMuc2F2ZWRDb25maWcgPSAoYXdhaXQgcmVhZE9wdGlvbnMpPy5kYXRhID8/IHt9O1xyXG4gICAgICB0aGlzLnByb2Nlc3NPcHRpb25zKFxyXG4gICAgICAgICAgb3B0aW9ucyxcclxuICAgICAgICAgIHRoaXMuc2F2ZWRDb25maWdbb3ZlcmxheU5hbWVdID8/IHt9LFxyXG4gICAgICAgICAgdGhpcy5vcHRpb25UZW1wbGF0ZXNbb3ZlcmxheU5hbWVdLFxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gSWYgdGhlIG92ZXJsYXkgaGFzIGEgXCJEZWJ1Z1wiIHNldHRpbmcsIHNldCB0byB0cnVlIHZpYSB0aGUgY29uZmlnIHRvb2wsXHJcbiAgICAgIC8vIHRoZW4gYWxzbyBwcmludCBvdXQgdXNlciBmaWxlcyB0aGF0IGhhdmUgYmVlbiBsb2FkZWQuXHJcbiAgICAgIGNvbnN0IHByaW50VXNlckZpbGUgPSBvcHRpb25zLkRlYnVnID8gKHg6IHN0cmluZykgPT4gY29uc29sZS5sb2coeCkgOiAoKSA9PiB7Lyogbm9vcCAqL307XHJcblxyXG4gICAgICAvLyBXaXRoIHVzZXIgZmlsZXMgYmVpbmcgYXJiaXRyYXJ5IGphdmFzY3JpcHQsIGFuZCBoYXZpbmcgbXVsdGlwbGUgZmlsZXNcclxuICAgICAgLy8gaW4gdXNlciBmb2xkZXJzLCBpdCdzIHBvc3NpYmxlIGZvciBsYXRlciBmaWxlcyB0byBhY2NpZGVudGFsbHkgcmVtb3ZlXHJcbiAgICAgIC8vIHRoaW5ncyB0aGF0IHByZXZpb3VzIGZpbGVzIGhhdmUgYWRkZWQuICBXYXJuIGFib3V0IHRoaXMsIHNpbmNlIG1vc3RcclxuICAgICAgLy8gdXNlcnMgYXJlIG5vdCBwcm9ncmFtbWVycy5cclxuICAgICAgY29uc3Qgd2Fybk9uVmFyaWFibGVSZXNldE1hcDogeyBbb3ZlcmxheU5hbWU6IHN0cmluZ106IHN0cmluZ1tdIH0gPSB7XHJcbiAgICAgICAgcmFpZGJvc3M6IFtcclxuICAgICAgICAgICdUcmlnZ2VycycsXHJcbiAgICAgICAgXSxcclxuICAgICAgfTtcclxuICAgICAgd2Fybk9uVmFyaWFibGVSZXNldE1hcFtvdmVybGF5TmFtZV0gPSB3YXJuT25WYXJpYWJsZVJlc2V0TWFwW292ZXJsYXlOYW1lXSB8fCBbXTtcclxuXHJcbiAgICAgIC8vIFRoZSB2YWx1ZXMgb2YgZWFjaCBgd2Fybk9uVmFyaWFibGVSZXNldE1hcGAgZmllbGQgYXJlIGluaXRpYWxseSBzZXRcclxuICAgICAgLy8gYWZ0ZXIgdGhlIGZpcnN0IGZpbGUsIHNvIHRoYXQgaWYgdGhlcmUgaXMgb25seSBvbmUgZmlsZSwgdGhlcmUgYXJlXHJcbiAgICAgIC8vIG5vdCBhbnkgd2FybmluZ3MuXHJcblxyXG4gICAgICAvLyBUaGUgZmllbGRzIHRoYXQgYSB1c2VyIGZpbGUgc2V0cyBpbiBPcHRpb25zIGNhbiBiZSBhbnl0aGluZyAocHVuIG5vdCBpbnRlbmRlZClcclxuICAgICAgLy8gYW5kIHNvIHdlIHVzZSBgYW55YCBoZXJlLiAgVGhlIG9ubHkgb3BlcmF0aW9uIGRvbmUgb24gdGhpcyBmaWVsZCBpcyBhICE9PVxyXG4gICAgICAvLyBmb3IgY2hhbmdlIGRldGVjdGlvbiB0byBzZWUgaWYgdGhlIHRoZSB1c2VyIGZpbGUgaGFzIG1vZGlmaWVkIGl0LlxyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICBjb25zdCB2YXJpYWJsZVRyYWNrZXI6IHsgW2ZpZWxkTmFtZTogc3RyaW5nXTogYW55IH0gPSB7fTtcclxuXHJcbiAgICAgIGlmIChsb2NhbEZpbGVzKSB7XHJcbiAgICAgICAgLy8gbG9jYWxGaWxlcyBtYXkgYmUgbnVsbCBpZiB0aGVyZSBpcyBubyB2YWxpZCB1c2VyIGRpcmVjdG9yeS5cclxuICAgICAgICBjb25zdCBzb3J0ZWRGaWxlcyA9IHRoaXMuc29ydFVzZXJGaWxlcyhPYmplY3Qua2V5cyhsb2NhbEZpbGVzKSk7XHJcbiAgICAgICAgY29uc3QganNGaWxlcyA9IHRoaXMuZmlsdGVyVXNlckZpbGVzKHNvcnRlZEZpbGVzLCBvdmVybGF5TmFtZSwgJy5qcycpO1xyXG4gICAgICAgIGNvbnN0IGNzc0ZpbGVzID0gdGhpcy5maWx0ZXJVc2VyRmlsZXMoc29ydGVkRmlsZXMsIG92ZXJsYXlOYW1lLCAnLmNzcycpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGpzRmlsZSBvZiBqc0ZpbGVzKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBwcmludFVzZXJGaWxlKGBsb2NhbCB1c2VyIGZpbGU6ICR7YmFzZVBhdGh9JHtqc0ZpbGV9YCk7XHJcbiAgICAgICAgICAgIHRoaXMuZXZhbFVzZXJGaWxlKGxvY2FsRmlsZXNbanNGaWxlXSA/PyAnJywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHdhcm5PblZhcmlhYmxlUmVzZXRNYXBbb3ZlcmxheU5hbWVdID8/IFtdKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHZhcmlhYmxlVHJhY2tlcltmaWVsZF0gJiYgdmFyaWFibGVUcmFja2VyW2ZpZWxkXSAhPT0gb3B0aW9uc1tmaWVsZF0pIHtcclxuICAgICAgICAgICAgICAgIC8vIElkZWFsbHkgdXNlcnMgc2hvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGBPcHRpb25zLlRyaWdnZXJzLnB1c2goW2V0Y10pO2BcclxuICAgICAgICAgICAgICAgIC8vIGluc3RlYWQgb2YgYE9wdGlvbnMuVHJpZ2dlcnMgPSBbZXRjXTtgXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgKioqIFdBUk5JTkc6ICR7YmFzZVBhdGh9JHtqc0ZpbGV9IG92ZXJ3cml0ZXMgT3B0aW9ucy4ke2ZpZWxkfSBmcm9tIHByZXZpb3VzIGZpbGVzLmApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB2YXJpYWJsZVRyYWNrZXJbZmllbGRdID0gb3B0aW9uc1tmaWVsZF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXNlckZpbGVDYWxsYmFja3Nbb3ZlcmxheU5hbWVdPy4oanNGaWxlLCBsb2NhbEZpbGVzLCBvcHRpb25zLCBiYXNlUGF0aCk7XHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8vIEJlIHZlcnkgdmlzaWJsZSBmb3IgdXNlcnMuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCcqKiogRVJST1IgSU4gVVNFUiBGSUxFICoqKicpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRoaXMgaXMgYSBiaXQgYXdrd2FyZCB0byBoYW5kbGUgc2tpbiBzZXR0aW5ncyBoZXJlLCBidXRcclxuICAgICAgICAvLyBkb2luZyBpdCBhZnRlciB1c2VyIGNvbmZpZyBmaWxlcyBhbmQgYmVmb3JlIHVzZXIgY3NzIGZpbGVzXHJcbiAgICAgICAgLy8gYWxsb3dzIHVzZXIgY3NzIHRvIG92ZXJyaWRlIHNraW4tc3BlY2lmaWMgY3NzIGFzIHdlbGwuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuU2tpbilcclxuICAgICAgICAgIHRoaXMuaGFuZGxlU2tpbihvcHRpb25zLlNraW4pO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGNzc0ZpbGUgb2YgY3NzRmlsZXMpIHtcclxuICAgICAgICAgIHByaW50VXNlckZpbGUoYGxvY2FsIHVzZXIgZmlsZTogJHtiYXNlUGF0aH0ke2Nzc0ZpbGV9YCk7XHJcbiAgICAgICAgICBjb25zdCB1c2VyQ3NzVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XHJcbiAgICAgICAgICBjb25zdCBjb250ZW50cyA9IGxvY2FsRmlsZXNbY3NzRmlsZV07XHJcbiAgICAgICAgICBpZiAoY29udGVudHMpXHJcbiAgICAgICAgICAgIHVzZXJDc3NUZXh0LmlubmVyVGV4dCA9IGNvbnRlbnRzO1xyXG4gICAgICAgICAgY29uc3QgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XHJcbiAgICAgICAgICBpZiAoaGVhZClcclxuICAgICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZCh1c2VyQ3NzVGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBQb3N0IHRoaXMgY2FsbGJhY2sgc28gdGhhdCB0aGUganMgYW5kIGNzcyBjYW4gYmUgZXhlY3V0ZWQgZmlyc3QuXHJcbiAgICAgIGlmIChjYWxsYmFjaylcclxuICAgICAgICBjYWxsYmFjaygpO1xyXG5cclxuICAgICAgdm9pZCBjYWxsT3ZlcmxheUhhbmRsZXIoeyBjYWxsOiAnY2FjdGJvdFJlcXVlc3RTdGF0ZScgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZvaWQgY2FsbE92ZXJsYXlIYW5kbGVyKHtcclxuICAgICAgY2FsbDogJ2NhY3Rib3RMb2FkVXNlcicsXHJcbiAgICAgIHNvdXJjZTogbG9jYXRpb24uaHJlZixcclxuICAgICAgb3ZlcmxheU5hbWU6IG92ZXJsYXlOYW1lLFxyXG4gICAgfSkudGhlbigoZTogeyBkZXRhaWw6IENhY3Rib3RMb2FkVXNlclJldCB9KSA9PiB7XHJcbiAgICAgIC8vIFdhaXQgZm9yIERPTUNvbnRlbnRMb2FkZWQgaWYgbmVlZGVkLlxyXG4gICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2xvYWRpbmcnKSB7XHJcbiAgICAgICAgdm9pZCBsb2FkVXNlcihlKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuICAgICAgICB2b2lkIGxvYWRVc2VyKGUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlU2tpbihza2luTmFtZTogc3RyaW5nKSB7XHJcbiAgICBpZiAoIXNraW5OYW1lIHx8IHNraW5OYW1lID09PSAnZGVmYXVsdCcpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBsZXQgYmFzZVBhdGggPSBkb2N1bWVudC5sb2NhdGlvbi50b1N0cmluZygpO1xyXG4gICAgY29uc3Qgc2xhc2hJZHggPSBiYXNlUGF0aC5sYXN0SW5kZXhPZignLycpO1xyXG4gICAgaWYgKHNsYXNoSWR4ICE9PSAtMSlcclxuICAgICAgYmFzZVBhdGggPSBiYXNlUGF0aC5zdWJzdHIoMCwgc2xhc2hJZHgpO1xyXG4gICAgaWYgKGJhc2VQYXRoLnNsaWNlKC0xKSAhPT0gJy8nKVxyXG4gICAgICBiYXNlUGF0aCArPSAnLyc7XHJcbiAgICBjb25zdCBza2luSHJlZiA9IGJhc2VQYXRoICsgJ3NraW5zLycgKyBza2luTmFtZSArICcvJyArIHNraW5OYW1lICsgJy5jc3MnO1xyXG4gICAgdGhpcy5hcHBlbmRDU1NMaW5rKHNraW5IcmVmKTtcclxuICB9XHJcbiAgYXBwZW5kSlNMaW5rKHNyYzogc3RyaW5nKSB7XHJcbiAgICBjb25zdCB1c2VySlMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgIHVzZXJKUy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9qYXZhc2NyaXB0Jyk7XHJcbiAgICB1c2VySlMuc2V0QXR0cmlidXRlKCdzcmMnLCBzcmMpO1xyXG4gICAgdXNlckpTLnNldEF0dHJpYnV0ZSgnYXN5bmMnLCAnZmFsc2UnKTtcclxuICAgIGNvbnN0IGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xyXG4gICAgaWYgKGhlYWQpXHJcbiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQodXNlckpTKTtcclxuICB9XHJcbiAgYXBwZW5kQ1NTTGluayhocmVmOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHVzZXJDU1MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XHJcbiAgICB1c2VyQ1NTLnNldEF0dHJpYnV0ZSgncmVsJywgJ3N0eWxlc2hlZXQnKTtcclxuICAgIHVzZXJDU1Muc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7XHJcbiAgICB1c2VyQ1NTLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xyXG4gICAgY29uc3QgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XHJcbiAgICBpZiAoaGVhZClcclxuICAgICAgaGVhZC5hcHBlbmRDaGlsZCh1c2VyQ1NTKTtcclxuICB9XHJcbiAgcHJvY2Vzc09wdGlvbnMob3B0aW9uczogQmFzZU9wdGlvbnMsIHNhdmVkQ29uZmlnOiBTYXZlZENvbmZpZ0VudHJ5LCB0ZW1wbGF0ZT86IE9wdGlvbnNUZW1wbGF0ZSkge1xyXG4gICAgLy8gVGFrZSBvcHRpb25zIGZyb20gdGhlIHRlbXBsYXRlLCBmaW5kIHRoZW0gaW4gc2F2ZWRDb25maWcsXHJcbiAgICAvLyBhbmQgYXBwbHkgdGhlbSB0byBvcHRpb25zLiBUaGlzIGFsc28gaGFuZGxlcyBzZXR0aW5nXHJcbiAgICAvLyBkZWZhdWx0cyBmb3IgYW55dGhpbmcgaW4gdGhlIHRlbXBsYXRlLCBldmVuIGlmIGl0IGRvZXMgbm90XHJcbiAgICAvLyBleGlzdCBpbiBzYXZlZENvbmZpZy5cclxuICAgIGlmIChBcnJheS5pc0FycmF5KHRlbXBsYXRlKSkge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRlbXBsYXRlLmxlbmd0aDsgKytpKVxyXG4gICAgICAgIHRoaXMucHJvY2Vzc09wdGlvbnMob3B0aW9ucywgc2F2ZWRDb25maWcsIHRlbXBsYXRlW2ldKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vdCBhbGwgb3ZlcmxheXMgaGF2ZSBvcHRpb24gdGVtcGxhdGVzLlxyXG4gICAgaWYgKCF0ZW1wbGF0ZSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHRlbXBsYXRlT3B0aW9ucyA9IHRlbXBsYXRlLm9wdGlvbnMgfHwgW107XHJcbiAgICBmb3IgKGNvbnN0IG9wdCBvZiB0ZW1wbGF0ZU9wdGlvbnMpIHtcclxuICAgICAgLy8gR3JhYiB0aGUgc2F2ZWQgdmFsdWUgb3IgdGhlIGRlZmF1bHQgdG8gc2V0IGluIG9wdGlvbnMuXHJcblxyXG4gICAgICBsZXQgdmFsdWU6IFNhdmVkQ29uZmlnRW50cnkgPSBvcHQuZGVmYXVsdDtcclxuICAgICAgaWYgKHR5cGVvZiBzYXZlZENvbmZpZyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoc2F2ZWRDb25maWcpKSB7XHJcbiAgICAgICAgaWYgKG9wdC5pZCBpbiBzYXZlZENvbmZpZykge1xyXG4gICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBzYXZlZENvbmZpZ1tvcHQuaWRdO1xyXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBPcHRpb25zIGNhbiBwcm92aWRlIGN1c3RvbSBsb2dpYyB0byB0dXJuIGEgdmFsdWUgaW50byBvcHRpb25zIHNldHRpbmdzLlxyXG4gICAgICAvLyBJZiB0aGlzIGRvZXNuJ3QgZXhpc3QsIGp1c3Qgc2V0IHRoZSB2YWx1ZSBkaXJlY3RseS5cclxuICAgICAgLy8gT3B0aW9uIHRlbXBsYXRlIGlkcyBhcmUgaWRlbnRpY2FsIHRvIGZpZWxkIG5hbWVzIG9uIE9wdGlvbnMuXHJcbiAgICAgIGlmIChvcHQuc2V0dGVyRnVuYykge1xyXG4gICAgICAgIG9wdC5zZXR0ZXJGdW5jKG9wdGlvbnMsIHZhbHVlKTtcclxuICAgICAgfSBlbHNlIGlmIChvcHQudHlwZSA9PT0gJ2ludGVnZXInKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICBvcHRpb25zW29wdC5pZF0gPSBNYXRoLmZsb29yKHZhbHVlKTtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgb3B0aW9uc1tvcHQuaWRdID0gcGFyc2VJbnQodmFsdWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKG9wdC50eXBlID09PSAnZmxvYXQnKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICBvcHRpb25zW29wdC5pZF0gPSB2YWx1ZTtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgb3B0aW9uc1tvcHQuaWRdID0gcGFyc2VGbG9hdCh2YWx1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgb3B0aW9uc1tvcHQuaWRdID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBGb3IgdGhpbmdzIGxpa2UgcmFpZGJvc3MgdGhhdCBidWlsZCBleHRyYSBVSSwgYWxzbyBnaXZlIHRoZW0gYSBjaGFuY2VcclxuICAgIC8vIHRvIGhhbmRsZSBhbnl0aGluZyB0aGF0IGhhcyBiZWVuIHNldCBvbiB0aGF0IFVJLlxyXG4gICAgaWYgKHRlbXBsYXRlLnByb2Nlc3NFeHRyYU9wdGlvbnMpXHJcbiAgICAgIHRlbXBsYXRlLnByb2Nlc3NFeHRyYU9wdGlvbnMob3B0aW9ucywgc2F2ZWRDb25maWcpO1xyXG4gIH1cclxuICBhZGRVbmxvY2tUZXh0KGxhbmc6IExhbmcpIHtcclxuICAgIGNvbnN0IHVubG9ja1RleHQgPSB7XHJcbiAgICAgIGVuOiAn8J+UkyBVbmxvY2tlZCAobG9jayBvdmVybGF5IGJlZm9yZSB1c2luZyknLFxyXG4gICAgICBkZTogJ/CflJMgRW50c3BlcnJ0IChTcGVycmUgZGFzIE92ZXJsYXkgdm9yIGRlciBOdXR6dW5nKScsXHJcbiAgICAgIGZyOiAn8J+UkyBEw6libG9xdcOpIChCbG9xdWV6IGxcXCdvdmVybGF5IGF2YW50IHV0aWxpc2F0aW9uKScsXHJcbiAgICAgIGphOiAn8J+UkyDjg63jg4Pjgq/op6PpmaQgKOOCquODvOODkOODvOODrOOCpOOCkuS9v+eUqOOBmeOCi+WJjeOBq+ODreODg+OCr+OBl+OBpuOBj+OBoOOBleOBhCknLFxyXG4gICAgICBjbjogJ/CflJMg5bey6Kej6Zmk6ZSB5a6aICjkvaDpnIDopoHlsIbmraTmgqzmta7nqpfplIHlrprlkI7mlrnlj6/kvb/nlKgpJyxcclxuICAgICAga286ICfwn5STIOychOy5mCDsnqDquIgg7ZW07KCc65CoICjsgqzsmqntlZjquLAg7KCE7JeQIOychOy5mCDsnqDquIjsnYQg7ISk7KCV7ZWY7IS47JqUKScsXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGlkID0gJ2NhY3Rib3QtdW5sb2NrZWQtdGV4dCc7XHJcbiAgICBsZXQgdGV4dEVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICBpZiAoIXRleHRFbGVtKSB7XHJcbiAgICAgIHRleHRFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRleHRFbGVtLmlkID0gaWQ7XHJcbiAgICAgIHRleHRFbGVtLmNsYXNzTGlzdC5hZGQoJ3RleHQnKTtcclxuICAgICAgLy8gU2V0IGVsZW1lbnQgZGlzcGxheSB0byBub25lIGluIGNhc2UgdGhlIHBhZ2UgaGFzIG5vdCBpbmNsdWRlZCBkZWZhdWx0cy5jc3MuXHJcbiAgICAgIHRleHRFbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRleHRFbGVtKTtcclxuICAgIH1cclxuICAgIHRleHRFbGVtLmlubmVySFRNTCA9IHVubG9ja1RleHRbbGFuZ10gfHwgdW5sb2NrVGV4dFsnZW4nXTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBVc2VyQ29uZmlnKCk7XHJcblxyXG5cclxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAvLyBUaGlzIGV2ZW50IGNvbWVzIGVhcmx5IGFuZCBpcyBub3QgY2FjaGVkLCBzbyBzZXQgdXAgZXZlbnQgbGlzdGVuZXIgaW1tZWRpYXRlbHkuXHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignb25PdmVybGF5U3RhdGVVcGRhdGUnLCAoZSkgPT4ge1xyXG4gICAgY29uc3QgZG9jQ2xhc3NMaXN0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdDtcclxuICAgIGlmIChlLmRldGFpbC5pc0xvY2tlZClcclxuICAgICAgZG9jQ2xhc3NMaXN0LnJlbW92ZSgncmVzaXplSGFuZGxlJywgJ3VubG9ja2VkJyk7XHJcbiAgICBlbHNlXHJcbiAgICAgIGRvY0NsYXNzTGlzdC5hZGQoJ3Jlc2l6ZUhhbmRsZScsICd1bmxvY2tlZCcpO1xyXG4gIH0pO1xyXG59XHJcbiIsImltcG9ydCB7IEpvYiwgUm9sZSB9IGZyb20gJy4uL3R5cGVzL2pvYic7XHJcblxyXG4vLyBUT0RPOiBpdCdkIGJlIG5pY2UgdG8gbm90IHJlcGVhdCBqb2IgbmFtZXMsIGJ1dCBhdCBsZWFzdCBSZWNvcmQgZW5mb3JjZXMgdGhhdCBhbGwgYXJlIHNldC5cclxuY29uc3QgbmFtZVRvSm9iRW51bTogUmVjb3JkPEpvYiwgbnVtYmVyPiA9IHtcclxuICBOT05FOiAwLFxyXG4gIEdMQTogMSxcclxuICBQR0w6IDIsXHJcbiAgTVJEOiAzLFxyXG4gIExOQzogNCxcclxuICBBUkM6IDUsXHJcbiAgQ05KOiA2LFxyXG4gIFRITTogNyxcclxuICBDUlA6IDgsXHJcbiAgQlNNOiA5LFxyXG4gIEFSTTogMTAsXHJcbiAgR1NNOiAxMSxcclxuICBMVFc6IDEyLFxyXG4gIFdWUjogMTMsXHJcbiAgQUxDOiAxNCxcclxuICBDVUw6IDE1LFxyXG4gIE1JTjogMTYsXHJcbiAgQlROOiAxNyxcclxuICBGU0g6IDE4LFxyXG4gIFBMRDogMTksXHJcbiAgTU5LOiAyMCxcclxuICBXQVI6IDIxLFxyXG4gIERSRzogMjIsXHJcbiAgQlJEOiAyMyxcclxuICBXSE06IDI0LFxyXG4gIEJMTTogMjUsXHJcbiAgQUNOOiAyNixcclxuICBTTU46IDI3LFxyXG4gIFNDSDogMjgsXHJcbiAgUk9HOiAyOSxcclxuICBOSU46IDMwLFxyXG4gIE1DSDogMzEsXHJcbiAgRFJLOiAzMixcclxuICBBU1Q6IDMzLFxyXG4gIFNBTTogMzQsXHJcbiAgUkRNOiAzNSxcclxuICBCTFU6IDM2LFxyXG4gIEdOQjogMzcsXHJcbiAgRE5DOiAzOCxcclxufTtcclxuXHJcbmNvbnN0IGFsbEpvYnMgPSBPYmplY3Qua2V5cyhuYW1lVG9Kb2JFbnVtKSBhcyBKb2JbXTtcclxuY29uc3QgYWxsUm9sZXMgPSBbJ3RhbmsnLCAnaGVhbGVyJywgJ2RwcycsICdjcmFmdGVyJywgJ2dhdGhlcmVyJywgJ25vbmUnXSBhcyBSb2xlW107XHJcblxyXG5jb25zdCB0YW5rSm9iczogSm9iW10gPSBbJ0dMQScsICdQTEQnLCAnTVJEJywgJ1dBUicsICdEUksnLCAnR05CJ107XHJcbmNvbnN0IGhlYWxlckpvYnM6IEpvYltdID0gWydDTkonLCAnV0hNJywgJ1NDSCcsICdBU1QnXTtcclxuY29uc3QgbWVsZWVEcHNKb2JzOiBKb2JbXSA9IFsnUEdMJywgJ01OSycsICdMTkMnLCAnRFJHJywgJ1JPRycsICdOSU4nLCAnU0FNJ107XHJcbmNvbnN0IHJhbmdlZERwc0pvYnM6IEpvYltdID0gWydBUkMnLCAnQlJEJywgJ0ROQycsICdNQ0gnXTtcclxuY29uc3QgY2FzdGVyRHBzSm9iczogSm9iW10gPSBbJ0JMVScsICdSRE0nLCAnQkxNJywgJ1NNTicsICdBQ04nLCAnVEhNJ107XHJcbmNvbnN0IGRwc0pvYnM6IEpvYltdID0gWy4uLm1lbGVlRHBzSm9icywgLi4ucmFuZ2VkRHBzSm9icywgLi4uY2FzdGVyRHBzSm9ic107XHJcbmNvbnN0IGNyYWZ0aW5nSm9iczogSm9iW10gPSBbJ0NSUCcsICdCU00nLCAnQVJNJywgJ0dTTScsICdMVFcnLCAnV1ZSJywgJ0FMQycsICdDVUwnXTtcclxuY29uc3QgZ2F0aGVyaW5nSm9iczogSm9iW10gPSBbJ01JTicsICdCVE4nLCAnRlNIJ107XHJcblxyXG5jb25zdCBzdHVuSm9iczogSm9iW10gPSBbJ0JMVScsIC4uLnRhbmtKb2JzLCAuLi5tZWxlZURwc0pvYnNdO1xyXG5jb25zdCBzaWxlbmNlSm9iczogSm9iW10gPSBbJ0JMVScsIC4uLnRhbmtKb2JzLCAuLi5yYW5nZWREcHNKb2JzXTtcclxuY29uc3Qgc2xlZXBKb2JzOiBKb2JbXSA9IFsnQkxNJywgJ0JMVScsIC4uLmhlYWxlckpvYnNdO1xyXG5jb25zdCBmZWludEpvYnM6IEpvYltdID0gWy4uLm1lbGVlRHBzSm9ic107XHJcbmNvbnN0IGFkZGxlSm9iczogSm9iW10gPSBbLi4uY2FzdGVyRHBzSm9ic107XHJcbmNvbnN0IGNsZWFuc2VKb2JzOiBKb2JbXSA9IFsnQkxVJywgJ0JSRCcsIC4uLmhlYWxlckpvYnNdO1xyXG5cclxuY29uc3Qgam9iVG9Sb2xlTWFwOiBNYXA8Sm9iLCBSb2xlPiA9ICgoKSA9PiB7XHJcbiAgY29uc3QgYWRkVG9NYXAgPSAobWFwOiBNYXA8Sm9iLCBSb2xlPiwgam9iczogSm9iW10sIHJvbGU6IFJvbGUpID0+IHtcclxuICAgIGpvYnMuZm9yRWFjaCgoam9iKSA9PiBtYXAuc2V0KGpvYiwgcm9sZSkpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IG1hcDogTWFwPEpvYiwgUm9sZT4gPSBuZXcgTWFwKFtbJ05PTkUnLCAnbm9uZSddXSk7XHJcbiAgYWRkVG9NYXAobWFwLCB0YW5rSm9icywgJ3RhbmsnKTtcclxuICBhZGRUb01hcChtYXAsIGhlYWxlckpvYnMsICdoZWFsZXInKTtcclxuICBhZGRUb01hcChtYXAsIGRwc0pvYnMsICdkcHMnKTtcclxuICBhZGRUb01hcChtYXAsIGNyYWZ0aW5nSm9icywgJ2NyYWZ0ZXInKTtcclxuICBhZGRUb01hcChtYXAsIGdhdGhlcmluZ0pvYnMsICdnYXRoZXJlcicpO1xyXG5cclxuICByZXR1cm4gbWFwO1xyXG59KSgpO1xyXG5cclxuY29uc3QgVXRpbCA9IHtcclxuICBqb2JFbnVtVG9Kb2I6IChpZDogbnVtYmVyKSA9PiB7XHJcbiAgICBjb25zdCBqb2IgPSBhbGxKb2JzLmZpbmQoKGpvYjogSm9iKSA9PiBuYW1lVG9Kb2JFbnVtW2pvYl0gPT09IGlkKTtcclxuICAgIHJldHVybiBqb2IgPz8gJ05PTkUnO1xyXG4gIH0sXHJcbiAgam9iVG9Kb2JFbnVtOiAoam9iOiBKb2IpID0+IG5hbWVUb0pvYkVudW1bam9iXSxcclxuICBqb2JUb1JvbGU6IChqb2I6IEpvYikgPT4ge1xyXG4gICAgY29uc3Qgcm9sZSA9IGpvYlRvUm9sZU1hcC5nZXQoam9iKTtcclxuICAgIHJldHVybiByb2xlID8/ICdub25lJztcclxuICB9LFxyXG4gIGdldEFsbFJvbGVzOiAoKTogcmVhZG9ubHkgUm9sZVtdID0+IGFsbFJvbGVzLFxyXG4gIGlzVGFua0pvYjogKGpvYjogSm9iKSA9PiB0YW5rSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGlzSGVhbGVySm9iOiAoam9iOiBKb2IpID0+IGhlYWxlckpvYnMuaW5jbHVkZXMoam9iKSxcclxuICBpc01lbGVlRHBzSm9iOiAoam9iOiBKb2IpID0+IG1lbGVlRHBzSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGlzUmFuZ2VkRHBzSm9iOiAoam9iOiBKb2IpID0+IHJhbmdlZERwc0pvYnMuaW5jbHVkZXMoam9iKSxcclxuICBpc0Nhc3RlckRwc0pvYjogKGpvYjogSm9iKSA9PiBjYXN0ZXJEcHNKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgaXNEcHNKb2I6IChqb2I6IEpvYikgPT4gZHBzSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGlzQ3JhZnRpbmdKb2I6IChqb2I6IEpvYikgPT4gY3JhZnRpbmdKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgaXNHYXRoZXJpbmdKb2I6IChqb2I6IEpvYikgPT4gZ2F0aGVyaW5nSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGlzQ29tYmF0Sm9iOiAoam9iOiBKb2IpID0+IHtcclxuICAgIHJldHVybiAhY3JhZnRpbmdKb2JzLmluY2x1ZGVzKGpvYikgJiYgIWdhdGhlcmluZ0pvYnMuaW5jbHVkZXMoam9iKTtcclxuICB9LFxyXG4gIGNhblN0dW46IChqb2I6IEpvYikgPT4gc3R1bkpvYnMuaW5jbHVkZXMoam9iKSxcclxuICBjYW5TaWxlbmNlOiAoam9iOiBKb2IpID0+IHNpbGVuY2VKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgY2FuU2xlZXA6IChqb2I6IEpvYikgPT4gc2xlZXBKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgY2FuQ2xlYW5zZTogKGpvYjogSm9iKSA9PiBjbGVhbnNlSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGNhbkZlaW50OiAoam9iOiBKb2IpID0+IGZlaW50Sm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGNhbkFkZGxlOiAoam9iOiBKb2IpID0+IGFkZGxlSm9icy5pbmNsdWRlcyhqb2IpLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVXRpbDtcclxuIiwiLy8gQXV0by1nZW5lcmF0ZWQgZnJvbSBnZW5fem9uZV9pZF9hbmRfaW5mby5weVxyXG4vLyBETyBOT1QgRURJVCBUSElTIEZJTEUgRElSRUNUTFlcclxuXHJcbmNvbnN0IGRhdGEgPSB7XHJcbiAgJ0FCbG9vZHlSZXVuaW9uJzogNTYwLFxyXG4gICdBUmVsaWNSZWJvcm5UaGVDaGltZXJhJzogMzY4LFxyXG4gICdBUmVsaWNSZWJvcm5UaGVIeWRyYSc6IDM2OSxcclxuICAnQVJlcXVpZW1Gb3JIZXJvZXMnOiA4MzAsXHJcbiAgJ0FTbGVlcERpc3R1cmJlZCc6IDkxNCxcclxuICAnQVNwZWN0YWNsZUZvclRoZUFnZXMnOiA1MzMsXHJcbiAgJ0FjY3J1ZUVubWl0eUZyb21NdWx0aXBsZVRhcmdldHMnOiA1NDAsXHJcbiAgJ0FpckZvcmNlT25lJzogODMyLFxyXG4gICdBa2FkYWVtaWFBbnlkZXInOiA4NDEsXHJcbiAgJ0FsYU1oaWdvJzogNjg5LFxyXG4gICdBbGV4YW5kZXJUaGVBcm1PZlRoZUZhdGhlcic6IDQ0NCxcclxuICAnQWxleGFuZGVyVGhlQXJtT2ZUaGVGYXRoZXJTYXZhZ2UnOiA0NTEsXHJcbiAgJ0FsZXhhbmRlclRoZUFybU9mVGhlU29uJzogNTIyLFxyXG4gICdBbGV4YW5kZXJUaGVBcm1PZlRoZVNvblNhdmFnZSc6IDUzMSxcclxuICAnQWxleGFuZGVyVGhlQnJlYXRoT2ZUaGVDcmVhdG9yJzogNTgxLFxyXG4gICdBbGV4YW5kZXJUaGVCcmVhdGhPZlRoZUNyZWF0b3JTYXZhZ2UnOiA1ODUsXHJcbiAgJ0FsZXhhbmRlclRoZUJ1cmRlbk9mVGhlRmF0aGVyJzogNDQ1LFxyXG4gICdBbGV4YW5kZXJUaGVCdXJkZW5PZlRoZUZhdGhlclNhdmFnZSc6IDQ1MixcclxuICAnQWxleGFuZGVyVGhlQnVyZGVuT2ZUaGVTb24nOiA1MjMsXHJcbiAgJ0FsZXhhbmRlclRoZUJ1cmRlbk9mVGhlU29uU2F2YWdlJzogNTMyLFxyXG4gICdBbGV4YW5kZXJUaGVDdWZmT2ZUaGVGYXRoZXInOiA0NDMsXHJcbiAgJ0FsZXhhbmRlclRoZUN1ZmZPZlRoZUZhdGhlclNhdmFnZSc6IDQ1MCxcclxuICAnQWxleGFuZGVyVGhlQ3VmZk9mVGhlU29uJzogNTIxLFxyXG4gICdBbGV4YW5kZXJUaGVDdWZmT2ZUaGVTb25TYXZhZ2UnOiA1MzAsXHJcbiAgJ0FsZXhhbmRlclRoZUV5ZXNPZlRoZUNyZWF0b3InOiA1ODAsXHJcbiAgJ0FsZXhhbmRlclRoZUV5ZXNPZlRoZUNyZWF0b3JTYXZhZ2UnOiA1ODQsXHJcbiAgJ0FsZXhhbmRlclRoZUZpc3RPZlRoZUZhdGhlcic6IDQ0MixcclxuICAnQWxleGFuZGVyVGhlRmlzdE9mVGhlRmF0aGVyU2F2YWdlJzogNDQ5LFxyXG4gICdBbGV4YW5kZXJUaGVGaXN0T2ZUaGVTb24nOiA1MjAsXHJcbiAgJ0FsZXhhbmRlclRoZUZpc3RPZlRoZVNvblNhdmFnZSc6IDUyOSxcclxuICAnQWxleGFuZGVyVGhlSGVhcnRPZlRoZUNyZWF0b3InOiA1ODIsXHJcbiAgJ0FsZXhhbmRlclRoZUhlYXJ0T2ZUaGVDcmVhdG9yU2F2YWdlJzogNTg2LFxyXG4gICdBbGV4YW5kZXJUaGVTb3VsT2ZUaGVDcmVhdG9yJzogNTgzLFxyXG4gICdBbGV4YW5kZXJUaGVTb3VsT2ZUaGVDcmVhdG9yU2F2YWdlJzogNTg3LFxyXG4gICdBbGxzV2VsbFRoYXRFbmRzSW5UaGVXZWxsJzogMjIwLFxyXG4gICdBbGxzV2VsbFRoYXRTdGFydHNXZWxsJzogNzk2LFxyXG4gICdBbHBoYXNjYXBlVjEwJzogNzk4LFxyXG4gICdBbHBoYXNjYXBlVjEwU2F2YWdlJzogODAyLFxyXG4gICdBbHBoYXNjYXBlVjIwJzogNzk5LFxyXG4gICdBbHBoYXNjYXBlVjIwU2F2YWdlJzogODAzLFxyXG4gICdBbHBoYXNjYXBlVjMwJzogODAwLFxyXG4gICdBbHBoYXNjYXBlVjMwU2F2YWdlJzogODA0LFxyXG4gICdBbHBoYXNjYXBlVjQwJzogODAxLFxyXG4gICdBbHBoYXNjYXBlVjQwU2F2YWdlJzogODA1LFxyXG4gICdBbWF1cm90JzogODM4LFxyXG4gICdBbWRhcG9yS2VlcCc6IDE2NyxcclxuICAnQW1kYXBvcktlZXBIYXJkJzogMTg5LFxyXG4gICdBbWhBcmFlbmcnOiA4MTUsXHJcbiAgJ0FuYW1uZXNpc0FueWRlcic6IDg5OCxcclxuICAnQW5ub3lUaGVWb2lkJzogMjIyLFxyXG4gICdBc1RoZUhlYXJ0Qmlkcyc6IDg5NCxcclxuICAnQXNzaXN0QWxsaWVzSW5EZWZlYXRpbmdBVGFyZ2V0JzogNTQ0LFxyXG4gICdBc3RyYWdhbG9zJzogNzI5LFxyXG4gICdBdm9pZEFyZWFPZkVmZmVjdEF0dGFja3MnOiA1MzcsXHJcbiAgJ0F6eXNMbGEnOiA0MDIsXHJcbiAgJ0JhZWxzYXJzV2FsbCc6IDYxNSxcclxuICAnQmFyZGFtc01ldHRsZSc6IDYyMyxcclxuICAnQmFzaWNUcmFpbmluZ0VuZW15UGFydGllcyc6IDIxNCxcclxuICAnQmFzaWNUcmFpbmluZ0VuZW15U3Ryb25naG9sZHMnOiAyMTUsXHJcbiAgJ0JhdHRsZUluVGhlQmlnS2VlcCc6IDM5NixcclxuICAnQmF0dGxlT25UaGVCaWdCcmlkZ2UnOiAzNjYsXHJcbiAgJ0Jsb29kT25UaGVEZWNrJzogNzA4LFxyXG4gICdCcmF5ZmxveHNMb25nc3RvcCc6IDE1OCxcclxuICAnQnJheWZsb3hzTG9uZ3N0b3BIYXJkJzogMzYyLFxyXG4gICdDYXBlV2VzdHdpbmQnOiAzMzIsXHJcbiAgJ0Nhc3RydW1BYmFuaWEnOiA2NjEsXHJcbiAgJ0Nhc3RydW1GbHVtaW5pcyc6IDc3OCxcclxuICAnQ2FzdHJ1bU1hcmludW0nOiA5MzQsXHJcbiAgJ0Nhc3RydW1NYXJpbnVtRHJ5ZG9ja3MnOiA5NjcsXHJcbiAgJ0Nhc3RydW1NYXJpbnVtRXh0cmVtZSc6IDkzNSxcclxuICAnQ2FzdHJ1bU1lcmlkaWFudW0nOiAyMTcsXHJcbiAgJ0NlbnRyYWxTaHJvdWQnOiAxNDgsXHJcbiAgJ0NlbnRyYWxUaGFuYWxhbic6IDE0MSxcclxuICAnQ2hvY29ib1JhY2VDb3N0YURlbFNvbCc6IDM4OSxcclxuICAnQ2hvY29ib1JhY2VTYWdvbGlpUm9hZCc6IDM5MCxcclxuICAnQ2hvY29ib1JhY2VUcmFucXVpbFBhdGhzJzogMzkxLFxyXG4gICdDaG9jb2JvUmFjZVR1dG9yaWFsJzogNDE3LFxyXG4gICdDaW5kZXJEcmlmdCc6IDg5NyxcclxuICAnQ2luZGVyRHJpZnRFeHRyZW1lJzogOTEyLFxyXG4gICdDb2VydGhhc0NlbnRyYWxIaWdobGFuZHMnOiAxNTUsXHJcbiAgJ0NvZXJ0aGFzV2VzdGVybkhpZ2hsYW5kcyc6IDM5NyxcclxuICAnQ29taW5nQ2xlYW4nOiA4NjAsXHJcbiAgJ0NvbnRhaW5tZW50QmF5UDFUNic6IDU3NixcclxuICAnQ29udGFpbm1lbnRCYXlQMVQ2RXh0cmVtZSc6IDU3NyxcclxuICAnQ29udGFpbm1lbnRCYXlTMVQ3JzogNTE3LFxyXG4gICdDb250YWlubWVudEJheVMxVDdFeHRyZW1lJzogNTI0LFxyXG4gICdDb250YWlubWVudEJheVoxVDknOiA2MzcsXHJcbiAgJ0NvbnRhaW5tZW50QmF5WjFUOUV4dHJlbWUnOiA2MzgsXHJcbiAgJ0NvcHBlcmJlbGxNaW5lcyc6IDE2MSxcclxuICAnQ29wcGVyYmVsbE1pbmVzSGFyZCc6IDM0OSxcclxuICAnQ3VyaW91c0dvcmdlTWVldHNIaXNNYXRjaCc6IDcxNyxcclxuICAnQ3V0dGVyc0NyeSc6IDE3MCxcclxuICAnRGFya0FzVGhlTmlnaHRTa3knOiA3MTMsXHJcbiAgJ0RlYXRoVW50b0Rhd24nOiA5NzcsXHJcbiAgJ0RlZmVhdEFuT2NjdXBpZWRUYXJnZXQnOiA1NDUsXHJcbiAgJ0RlbHRhc2NhcGVWMTAnOiA2OTEsXHJcbiAgJ0RlbHRhc2NhcGVWMTBTYXZhZ2UnOiA2OTUsXHJcbiAgJ0RlbHRhc2NhcGVWMjAnOiA2OTIsXHJcbiAgJ0RlbHRhc2NhcGVWMjBTYXZhZ2UnOiA2OTYsXHJcbiAgJ0RlbHRhc2NhcGVWMzAnOiA2OTMsXHJcbiAgJ0RlbHRhc2NhcGVWMzBTYXZhZ2UnOiA2OTcsXHJcbiAgJ0RlbHRhc2NhcGVWNDAnOiA2OTQsXHJcbiAgJ0RlbHRhc2NhcGVWNDBTYXZhZ2UnOiA2OTgsXHJcbiAgJ0RlbHVicnVtUmVnaW5hZSc6IDkzNixcclxuICAnRGVsdWJydW1SZWdpbmFlU2F2YWdlJzogOTM3LFxyXG4gICdEb2huTWhlZyc6IDgyMSxcclxuICAnRG9tYUNhc3RsZSc6IDY2MCxcclxuICAnRHJhZ29uU291bmQnOiA3MTQsXHJcbiAgJ0R1blNjYWl0aCc6IDYyNyxcclxuICAnRHplbWFlbERhcmtob2xkJzogMTcxLFxyXG4gICdFYXN0U2hyb3VkJzogMTUyLFxyXG4gICdFYXN0ZXJuTGFOb3NjZWEnOiAxMzcsXHJcbiAgJ0Vhc3Rlcm5UaGFuYWxhbic6IDE0NSxcclxuICAnRWRlbnNHYXRlRGVzY2VudCc6IDg1MCxcclxuICAnRWRlbnNHYXRlRGVzY2VudFNhdmFnZSc6IDg1NCxcclxuICAnRWRlbnNHYXRlSW51bmRhdGlvbic6IDg1MSxcclxuICAnRWRlbnNHYXRlSW51bmRhdGlvblNhdmFnZSc6IDg1NSxcclxuICAnRWRlbnNHYXRlUmVzdXJyZWN0aW9uJzogODQ5LFxyXG4gICdFZGVuc0dhdGVSZXN1cnJlY3Rpb25TYXZhZ2UnOiA4NTMsXHJcbiAgJ0VkZW5zR2F0ZVNlcHVsdHVyZSc6IDg1MixcclxuICAnRWRlbnNHYXRlU2VwdWx0dXJlU2F2YWdlJzogODU2LFxyXG4gICdFZGVuc1Byb21pc2VBbmFtb3JwaG9zaXMnOiA5NDQsXHJcbiAgJ0VkZW5zUHJvbWlzZUFuYW1vcnBob3Npc1NhdmFnZSc6IDk0OCxcclxuICAnRWRlbnNQcm9taXNlRXRlcm5pdHknOiA5NDUsXHJcbiAgJ0VkZW5zUHJvbWlzZUV0ZXJuaXR5U2F2YWdlJzogOTQ5LFxyXG4gICdFZGVuc1Byb21pc2VMaXRhbnknOiA5NDMsXHJcbiAgJ0VkZW5zUHJvbWlzZUxpdGFueVNhdmFnZSc6IDk0NyxcclxuICAnRWRlbnNQcm9taXNlVW1icmEnOiA5NDIsXHJcbiAgJ0VkZW5zUHJvbWlzZVVtYnJhU2F2YWdlJzogOTQ2LFxyXG4gICdFZGVuc1ZlcnNlRnVsbWluYXRpb24nOiA5MDIsXHJcbiAgJ0VkZW5zVmVyc2VGdWxtaW5hdGlvblNhdmFnZSc6IDkwNixcclxuICAnRWRlbnNWZXJzZUZ1cm9yJzogOTAzLFxyXG4gICdFZGVuc1ZlcnNlRnVyb3JTYXZhZ2UnOiA5MDcsXHJcbiAgJ0VkZW5zVmVyc2VJY29ub2NsYXNtJzogOTA0LFxyXG4gICdFZGVuc1ZlcnNlSWNvbm9jbGFzbVNhdmFnZSc6IDkwOCxcclxuICAnRWRlbnNWZXJzZVJlZnVsZ2VuY2UnOiA5MDUsXHJcbiAgJ0VkZW5zVmVyc2VSZWZ1bGdlbmNlU2F2YWdlJzogOTA5LFxyXG4gICdFbWFuYXRpb24nOiA3MTksXHJcbiAgJ0VtYW5hdGlvbkV4dHJlbWUnOiA3MjAsXHJcbiAgJ0VtaXNzYXJ5T2ZUaGVEYXduJzogNzY5LFxyXG4gICdFbmdhZ2VNdWx0aXBsZVRhcmdldHMnOiA1NDEsXHJcbiAgJ0V1bG1vcmUnOiA4MjAsXHJcbiAgJ0V4ZWN1dGVBQ29tYm9JbkJhdHRsZSc6IDUzOSxcclxuICAnRXhlY3V0ZUFDb21ib1RvSW5jcmVhc2VFbm1pdHknOiA1MzgsXHJcbiAgJ0V4ZWN1dGVBUmFuZ2VkQXR0YWNrVG9JbmNyZWFzZUVubWl0eSc6IDU0MixcclxuICAnRmFkZWRNZW1vcmllcyc6IDkzMixcclxuICAnRmluYWxFeGVyY2lzZSc6IDU1MixcclxuICAnRml0Rm9yQVF1ZWVuJzogOTU1LFxyXG4gICdGbGlja2luZ1N0aWNrc0FuZFRha2luZ05hbWVzJzogMjE5LFxyXG4gICdGb3VuZGF0aW9uJzogNDE4LFxyXG4gICdGb3VyUGxheWVyTWFoam9uZ1F1aWNrTWF0Y2hLdWl0YW5EaXNhYmxlZCc6IDgzMSxcclxuICAnSGFsYXRhbGknOiAxNjIsXHJcbiAgJ0hhbGF0YWxpSGFyZCc6IDM2MCxcclxuICAnSGF1a2tlTWFub3InOiAxNjYsXHJcbiAgJ0hhdWtrZU1hbm9ySGFyZCc6IDM1MCxcclxuICAnSGVhbEFuQWxseSc6IDU0OSxcclxuICAnSGVhbE11bHRpcGxlQWxsaWVzJzogNTUwLFxyXG4gICdIZWF2ZW5PbkhpZ2hGbG9vcnMxMV8yMCc6IDc3MSxcclxuICAnSGVhdmVuT25IaWdoRmxvb3JzMV8xMCc6IDc3MCxcclxuICAnSGVhdmVuT25IaWdoRmxvb3JzMjFfMzAnOiA3NzIsXHJcbiAgJ0hlYXZlbk9uSGlnaEZsb29yczMxXzQwJzogNzgyLFxyXG4gICdIZWF2ZW5PbkhpZ2hGbG9vcnM0MV81MCc6IDc3MyxcclxuICAnSGVhdmVuT25IaWdoRmxvb3JzNTFfNjAnOiA3ODMsXHJcbiAgJ0hlYXZlbk9uSGlnaEZsb29yczYxXzcwJzogNzc0LFxyXG4gICdIZWF2ZW5PbkhpZ2hGbG9vcnM3MV84MCc6IDc4NCxcclxuICAnSGVhdmVuT25IaWdoRmxvb3JzODFfOTAnOiA3NzUsXHJcbiAgJ0hlYXZlbk9uSGlnaEZsb29yczkxXzEwMCc6IDc4NSxcclxuICAnSGVsbHNLaWVyJzogODEwLFxyXG4gICdIZWxsc0tpZXJFeHRyZW1lJzogODExLFxyXG4gICdIZWxsc0xpZCc6IDc0MixcclxuICAnSGVyb09uVGhlSGFsZlNoZWxsJzogMjE2LFxyXG4gICdIaWRkZW5Hb3JnZSc6IDc5MSxcclxuICAnSG9sbWluc3RlclN3aXRjaCc6IDgzNyxcclxuICAnSHVsbGJyZWFrZXJJc2xlJzogMzYxLFxyXG4gICdIdWxsYnJlYWtlcklzbGVIYXJkJzogNTU3LFxyXG4gICdJZHlsbHNoaXJlJzogNDc4LFxyXG4gICdJbE1oZWcnOiA4MTYsXHJcbiAgJ0luVGhhbHNOYW1lJzogNzA1LFxyXG4gICdJbnRlcmFjdFdpdGhUaGVCYXR0bGVmaWVsZCc6IDU0OCxcclxuICAnSW50ZXJkaW1lbnNpb25hbFJpZnQnOiA2OTAsXHJcbiAgJ0l0c1Byb2JhYmx5QVRyYXAnOiA2NjUsXHJcbiAgJ0tob2x1c2lhJzogODE0LFxyXG4gICdLdWdhbmUnOiA2MjgsXHJcbiAgJ0t1Z2FuZUNhc3RsZSc6IDY2MixcclxuICAnS3VnYW5lT2hhc2hpJzogODA2LFxyXG4gICdMYWtlbGFuZCc6IDgxMyxcclxuICAnTGVnZW5kT2ZUaGVOb3RTb0hpZGRlblRlbXBsZSc6IDg1OSxcclxuICAnTGltc2FMb21pbnNhTG93ZXJEZWNrcyc6IDEyOSxcclxuICAnTGltc2FMb21pbnNhVXBwZXJEZWNrcyc6IDEyOCxcclxuICAnTG9uZ0xpdmVUaGVRdWVlbic6IDI5OCxcclxuICAnTG92bU1hc3RlclRvdXJuYW1lbnQnOiA1MDYsXHJcbiAgJ0xvdm1QbGF5ZXJCYXR0bGVOb25ScCc6IDU5MSxcclxuICAnTG92bVBsYXllckJhdHRsZVJwJzogNTg5LFxyXG4gICdMb3ZtVG91cm5hbWVudCc6IDU5MCxcclxuICAnTG93ZXJMYU5vc2NlYSc6IDEzNSxcclxuICAnTWFsaWthaHNXZWxsJzogODM2LFxyXG4gICdNYXRjaEFsbCc6IG51bGwsXHJcbiAgJ01hdG95YXNSZWxpY3QnOiA5MzMsXHJcbiAgJ01hdHN1YmFNYXloZW0nOiA3MTAsXHJcbiAgJ01lbW9yaWFNaXNlcmFFeHRyZW1lJzogOTEzLFxyXG4gICdNZXNzZW5nZXJPZlRoZVdpbmRzJzogODM0LFxyXG4gICdNaWRkbGVMYU5vc2NlYSc6IDEzNCxcclxuICAnTWlzdCc6IDEzNixcclxuICAnTW9yRGhvbmEnOiAxNTYsXHJcbiAgJ01vcmVUaGFuQUZlZWxlcic6IDIyMSxcclxuICAnTXRHdWxnJzogODIyLFxyXG4gICdOYWFkYW0nOiA2ODgsXHJcbiAgJ05ldmVycmVhcCc6IDQyMCxcclxuICAnTmV3R3JpZGFuaWEnOiAxMzIsXHJcbiAgJ05vcnRoU2hyb3VkJzogMTU0LFxyXG4gICdOb3J0aGVyblRoYW5hbGFuJzogMTQ3LFxyXG4gICdOeWVsYmVydHNMYW1lbnQnOiA4NzYsXHJcbiAgJ09jZWFuRmlzaGluZyc6IDkwMCxcclxuICAnT2xkR3JpZGFuaWEnOiAxMzMsXHJcbiAgJ09uZUxpZmVGb3JPbmVXb3JsZCc6IDU5MixcclxuICAnT25zYWxIYWthaXJEYW5zaGlnTmFhZGFtJzogODg4LFxyXG4gICdPdXJDb21wcm9taXNlJzogNzE2LFxyXG4gICdPdXJVbnN1bmdIZXJvZXMnOiA3MjIsXHJcbiAgJ091dGVyTGFOb3NjZWEnOiAxODAsXHJcbiAgJ1BhZ2x0aGFuJzogOTM4LFxyXG4gICdQaGFyb3NTaXJpdXMnOiAxNjAsXHJcbiAgJ1BoYXJvc1Npcml1c0hhcmQnOiA1MTAsXHJcbiAgJ1B1bGxpbmdQb2lzb25Qb3NpZXMnOiAxOTEsXHJcbiAgJ1JhaXNpbmdUaGVTd29yZCc6IDcwNixcclxuICAnUmV0dXJuT2ZUaGVCdWxsJzogNDAzLFxyXG4gICdSaGFsZ3JzUmVhY2gnOiA2MzUsXHJcbiAgJ1NhaW50TW9jaWFubmVzQXJib3JldHVtJzogNTExLFxyXG4gICdTYWludE1vY2lhbm5lc0FyYm9yZXR1bUhhcmQnOiA3ODgsXHJcbiAgJ1Nhc3Rhc2hhJzogMTU3LFxyXG4gICdTYXN0YXNoYUhhcmQnOiAzODcsXHJcbiAgJ1NlYWxSb2NrU2VpemUnOiA0MzEsXHJcbiAgJ1NoYWRvd0FuZENsYXcnOiAyMjMsXHJcbiAgJ1NoaXN1aU9mVGhlVmlvbGV0VGlkZXMnOiA2MTYsXHJcbiAgJ1NpZ21hc2NhcGVWMTAnOiA3NDgsXHJcbiAgJ1NpZ21hc2NhcGVWMTBTYXZhZ2UnOiA3NTIsXHJcbiAgJ1NpZ21hc2NhcGVWMjAnOiA3NDksXHJcbiAgJ1NpZ21hc2NhcGVWMjBTYXZhZ2UnOiA3NTMsXHJcbiAgJ1NpZ21hc2NhcGVWMzAnOiA3NTAsXHJcbiAgJ1NpZ21hc2NhcGVWMzBTYXZhZ2UnOiA3NTQsXHJcbiAgJ1NpZ21hc2NhcGVWNDAnOiA3NTEsXHJcbiAgJ1NpZ21hc2NhcGVWNDBTYXZhZ2UnOiA3NTUsXHJcbiAgJ1Nub3djbG9hayc6IDM3MSxcclxuICAnU29obUFsJzogNDQxLFxyXG4gICdTb2htQWxIYXJkJzogNjE3LFxyXG4gICdTb2hyS2hhaSc6IDU1NSxcclxuICAnU29sZW1uVHJpbml0eSc6IDMwMCxcclxuICAnU291dGhTaHJvdWQnOiAxNTMsXHJcbiAgJ1NvdXRoZXJuVGhhbmFsYW4nOiAxNDYsXHJcbiAgJ1NwZWNpYWxFdmVudEknOiAzNTMsXHJcbiAgJ1NwZWNpYWxFdmVudElpJzogMzU0LFxyXG4gICdTcGVjaWFsRXZlbnRJaWknOiA1MDksXHJcbiAgJ1N0aW5naW5nQmFjayc6IDE5MixcclxuICAnU3lyY3VzVG93ZXInOiAzNzIsXHJcbiAgJ1RoZUFlcnknOiA0MzUsXHJcbiAgJ1RoZUFldGhlcm9jaGVtaWNhbFJlc2VhcmNoRmFjaWxpdHknOiA0MzgsXHJcbiAgJ1RoZUFraEFmYWhBbXBoaXRoZWF0cmVFeHRyZW1lJzogMzc4LFxyXG4gICdUaGVBa2hBZmFoQW1waGl0aGVhdHJlSGFyZCc6IDM3NyxcclxuICAnVGhlQWtoQWZhaEFtcGhpdGhlYXRyZVVucmVhbCc6IDkzMCxcclxuICAnVGhlQW50aXRvd2VyJzogNTE2LFxyXG4gICdUaGVBcXVhcG9saXMnOiA1NTgsXHJcbiAgJ1RoZUF1cnVtVmFsZSc6IDE3MixcclxuICAnVGhlQXppbVN0ZXBwZSc6IDYyMixcclxuICAnVGhlQmF0dGxlT25CZWtrbyc6IDcxMSxcclxuICAnVGhlQmluZGluZ0NvaWxPZkJhaGFtdXRUdXJuMSc6IDI0MSxcclxuICAnVGhlQmluZGluZ0NvaWxPZkJhaGFtdXRUdXJuMic6IDI0MixcclxuICAnVGhlQmluZGluZ0NvaWxPZkJhaGFtdXRUdXJuMyc6IDI0MyxcclxuICAnVGhlQmluZGluZ0NvaWxPZkJhaGFtdXRUdXJuNCc6IDI0NCxcclxuICAnVGhlQmluZGluZ0NvaWxPZkJhaGFtdXRUdXJuNSc6IDI0NSxcclxuICAnVGhlQm9yZGVybGFuZFJ1aW5zU2VjdXJlJzogMzc2LFxyXG4gICdUaGVCb3dsT2ZFbWJlcnMnOiAyMDIsXHJcbiAgJ1RoZUJvd2xPZkVtYmVyc0V4dHJlbWUnOiAyOTUsXHJcbiAgJ1RoZUJvd2xPZkVtYmVyc0hhcmQnOiAyOTIsXHJcbiAgJ1RoZUJvemphSW5jaWRlbnQnOiA5MTEsXHJcbiAgJ1RoZUJvemphblNvdXRoZXJuRnJvbnQnOiA5MjAsXHJcbiAgJ1RoZUJ1cm4nOiA3ODksXHJcbiAgJ1RoZUNhbGFtaXR5UmV0b2xkJzogNzkwLFxyXG4gICdUaGVDYXJ0ZW5lYXVGbGF0c0hlbGlvZHJvbWUnOiA2MzMsXHJcbiAgJ1RoZUNocnlzYWxpcyc6IDQyNixcclxuICAnVGhlQ2h1cm5pbmdNaXN0cyc6IDQwMCxcclxuICAnVGhlQ2xvdWREZWNrJzogOTUwLFxyXG4gICdUaGVDbG91ZERlY2tFeHRyZW1lJzogOTUxLFxyXG4gICdUaGVDb3BpZWRGYWN0b3J5JzogODgyLFxyXG4gICdUaGVDcm93bk9mVGhlSW1tYWN1bGF0ZSc6IDg0NixcclxuICAnVGhlQ3Jvd25PZlRoZUltbWFjdWxhdGVFeHRyZW1lJzogODQ4LFxyXG4gICdUaGVDcnlzdGFyaXVtJzogODE5LFxyXG4gICdUaGVEYW5jaW5nUGxhZ3VlJzogODQ1LFxyXG4gICdUaGVEYW5jaW5nUGxhZ3VlRXh0cmVtZSc6IDg1OCxcclxuICAnVGhlRGlhZGVtJzogOTI5LFxyXG4gICdUaGVEaWFkZW1FYXN5JzogNTEyLFxyXG4gICdUaGVEaWFkZW1IYXJkJzogNTE1LFxyXG4gICdUaGVEaWFkZW1IdW50aW5nR3JvdW5kcyc6IDYyNSxcclxuICAnVGhlRGlhZGVtSHVudGluZ0dyb3VuZHNFYXN5JzogNjI0LFxyXG4gICdUaGVEaWFkZW1UcmlhbHNPZlRoZUZ1cnknOiA2MzAsXHJcbiAgJ1RoZURpYWRlbVRyaWFsc09mVGhlTWF0cm9uJzogNjU2LFxyXG4gICdUaGVEb21hbkVuY2xhdmUnOiA3NTksXHJcbiAgJ1RoZURyYWdvbnNOZWNrJzogMTQyLFxyXG4gICdUaGVEcmF2YW5pYW5Gb3JlbGFuZHMnOiAzOTgsXHJcbiAgJ1RoZURyYXZhbmlhbkhpbnRlcmxhbmRzJzogMzk5LFxyXG4gICdUaGVEcm93bmVkQ2l0eU9mU2thbGxhJzogNzMxLFxyXG4gICdUaGVEdW5nZW9uc09mTHloZUdoaWFoJzogODc5LFxyXG4gICdUaGVEdXNrVmlnaWwnOiA0MzQsXHJcbiAgJ1RoZUR5aW5nR2FzcCc6IDg0NyxcclxuICAnVGhlRXBpY09mQWxleGFuZGVyVWx0aW1hdGUnOiA4ODcsXHJcbiAgJ1RoZUZhY2VPZlRydWVFdmlsJzogNzA5LFxyXG4gICdUaGVGZWFzdEN1c3RvbU1hdGNoQ3J5c3RhbFRvd2VyJzogNzY3LFxyXG4gICdUaGVGZWFzdEN1c3RvbU1hdGNoRmVhc3RpbmdHcm91bmRzJzogNjE5LFxyXG4gICdUaGVGZWFzdEN1c3RvbU1hdGNoTGljaGVud2VlZCc6IDY0NixcclxuICAnVGhlRmVhc3RSYW5rZWQnOiA3NjUsXHJcbiAgJ1RoZUZlYXN0VGVhbVJhbmtlZCc6IDc0NSxcclxuICAnVGhlRmVhc3RUcmFpbmluZyc6IDc2NixcclxuICAnVGhlRmllbGRzT2ZHbG9yeVNoYXR0ZXInOiA1NTQsXHJcbiAgJ1RoZUZpbmFsQ29pbE9mQmFoYW11dFR1cm4xJzogMTkzLFxyXG4gICdUaGVGaW5hbENvaWxPZkJhaGFtdXRUdXJuMic6IDE5NCxcclxuICAnVGhlRmluYWxDb2lsT2ZCYWhhbXV0VHVybjMnOiAxOTUsXHJcbiAgJ1RoZUZpbmFsQ29pbE9mQmFoYW11dFR1cm40JzogMTk2LFxyXG4gICdUaGVGaW5hbFN0ZXBzT2ZGYWl0aCc6IDU1OSxcclxuICAnVGhlRm9yYmlkZGVuTGFuZEV1cmVrYUFuZW1vcyc6IDczMixcclxuICAnVGhlRm9yYmlkZGVuTGFuZEV1cmVrYUh5ZGF0b3MnOiA4MjcsXHJcbiAgJ1RoZUZvcmJpZGRlbkxhbmRFdXJla2FQYWdvcyc6IDc2MyxcclxuICAnVGhlRm9yYmlkZGVuTGFuZEV1cmVrYVB5cm9zJzogNzk1LFxyXG4gICdUaGVGcmFjdGFsQ29udGludXVtJzogNDMwLFxyXG4gICdUaGVGcmFjdGFsQ29udGludXVtSGFyZCc6IDc0MyxcclxuICAnVGhlRnJpbmdlcyc6IDYxMixcclxuICAnVGhlR2hpbWx5dERhcmsnOiA3OTMsXHJcbiAgJ1RoZUdyYW5kQ29zbW9zJzogODg0LFxyXG4gICdUaGVHcmVhdEd1YmFsTGlicmFyeSc6IDQxNixcclxuICAnVGhlR3JlYXRHdWJhbExpYnJhcnlIYXJkJzogNTc4LFxyXG4gICdUaGVHcmVhdEh1bnQnOiA3NjEsXHJcbiAgJ1RoZUdyZWF0SHVudEV4dHJlbWUnOiA3NjIsXHJcbiAgJ1RoZUdyZWF0U2hpcFZ5bGJyYW5kJzogOTU0LFxyXG4gICdUaGVIYXJkZW5lZEhlYXJ0JzogODczLFxyXG4gICdUaGVIYXVudGVkTWFub3InOiA1NzEsXHJcbiAgJ1RoZUhlYXJ0T2ZUaGVQcm9ibGVtJzogNzE4LFxyXG4gICdUaGVIZXJvZXNHYXVudGxldCc6IDkxNixcclxuICAnVGhlSGlkZGVuQ2FuYWxzT2ZVem5haXInOiA3MjUsXHJcbiAgJ1RoZUhvd2xpbmdFeWUnOiAyMDgsXHJcbiAgJ1RoZUhvd2xpbmdFeWVFeHRyZW1lJzogMjk3LFxyXG4gICdUaGVIb3dsaW5nRXllSGFyZCc6IDI5NCxcclxuICAnVGhlSHVudGVyc0xlZ2FjeSc6IDg3NSxcclxuICAnVGhlSmFkZVN0b2EnOiA3NDYsXHJcbiAgJ1RoZUphZGVTdG9hRXh0cmVtZSc6IDc1OCxcclxuICAnVGhlS2VlcGVyT2ZUaGVMYWtlJzogMTUwLFxyXG4gICdUaGVMYWJ5cmludGhPZlRoZUFuY2llbnRzJzogMTc0LFxyXG4gICdUaGVMaW1pdGxlc3NCbHVlRXh0cmVtZSc6IDQ0NyxcclxuICAnVGhlTGltaXRsZXNzQmx1ZUhhcmQnOiA0MzYsXHJcbiAgJ1RoZUxvY2hzJzogNjIxLFxyXG4gICdUaGVMb3N0QW5kVGhlRm91bmQnOiA4NzQsXHJcbiAgJ1RoZUxvc3RDYW5hbHNPZlV6bmFpcic6IDcxMixcclxuICAnVGhlTG9zdENpdHlPZkFtZGFwb3InOiAzNjMsXHJcbiAgJ1RoZUxvc3RDaXR5T2ZBbWRhcG9ySGFyZCc6IDUxOSxcclxuICAnVGhlTWluc3RyZWxzQmFsbGFkSGFkZXNzRWxlZ3knOiA4ODUsXHJcbiAgJ1RoZU1pbnN0cmVsc0JhbGxhZE5pZGhvZ2dzUmFnZSc6IDU2NixcclxuICAnVGhlTWluc3RyZWxzQmFsbGFkU2hpbnJ5dXNEb21haW4nOiA3MzAsXHJcbiAgJ1RoZU1pbnN0cmVsc0JhbGxhZFRob3JkYW5zUmVpZ24nOiA0NDgsXHJcbiAgJ1RoZU1pbnN0cmVsc0JhbGxhZFRzdWt1eW9taXNQYWluJzogNzc5LFxyXG4gICdUaGVNaW5zdHJlbHNCYWxsYWRVbHRpbWFzQmFuZSc6IDM0OCxcclxuICAnVGhlTmF2ZWwnOiAyMDYsXHJcbiAgJ1RoZU5hdmVsRXh0cmVtZSc6IDI5NixcclxuICAnVGhlTmF2ZWxIYXJkJzogMjkzLFxyXG4gICdUaGVOYXZlbFVucmVhbCc6IDk1MyxcclxuICAnVGhlT3Jib25uZU1vbmFzdGVyeSc6IDgyNixcclxuICAnVGhlT3JwaGFuc0FuZFRoZUJyb2tlbkJsYWRlJzogNzE1LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxMDFfMTEwJzogNTk4LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxMTFfMTIwJzogNTk5LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxMV8yMCc6IDU2MixcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTIxXzEzMCc6IDYwMCxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTMxXzE0MCc6IDYwMSxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTQxXzE1MCc6IDYwMixcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTUxXzE2MCc6IDYwMyxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTYxXzE3MCc6IDYwNCxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTcxXzE4MCc6IDYwNSxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTgxXzE5MCc6IDYwNixcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMTkxXzIwMCc6IDYwNyxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMV8xMCc6IDU2MSxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMjFfMzAnOiA1NjMsXHJcbiAgJ1RoZVBhbGFjZU9mVGhlRGVhZEZsb29yczMxXzQwJzogNTY0LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnM0MV81MCc6IDU2NSxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzNTFfNjAnOiA1OTMsXHJcbiAgJ1RoZVBhbGFjZU9mVGhlRGVhZEZsb29yczYxXzcwJzogNTk0LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnM3MV84MCc6IDU5NSxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzODFfOTAnOiA1OTYsXHJcbiAgJ1RoZVBhbGFjZU9mVGhlRGVhZEZsb29yczkxXzEwMCc6IDU5NyxcclxuICAnVGhlUGVha3MnOiA2MjAsXHJcbiAgJ1RoZVBpbGxhcnMnOiA0MTksXHJcbiAgJ1RoZVBvb2xPZlRyaWJ1dGUnOiA2NzQsXHJcbiAgJ1RoZVBvb2xPZlRyaWJ1dGVFeHRyZW1lJzogNjc3LFxyXG4gICdUaGVQcmFldG9yaXVtJzogMjI0LFxyXG4gICdUaGVQdXBwZXRzQnVua2VyJzogOTE3LFxyXG4gICdUaGVRaXRhbmFSYXZlbCc6IDgyMyxcclxuICAnVGhlUmFrdGlrYUdyZWF0d29vZCc6IDgxNyxcclxuICAnVGhlUmVzb25hbnQnOiA2ODQsXHJcbiAgJ1RoZVJpZG9yYW5hTGlnaHRob3VzZSc6IDc3NixcclxuICAnVGhlUm95YWxDaXR5T2ZSYWJhbmFzdHJlJzogNzM0LFxyXG4gICdUaGVSb3lhbE1lbmFnZXJpZSc6IDY3OSxcclxuICAnVGhlUnVieVNlYSc6IDYxMyxcclxuICAnVGhlU2VhT2ZDbG91ZHMnOiA0MDEsXHJcbiAgJ1RoZVNlYXRPZlNhY3JpZmljZSc6IDkyMixcclxuICAnVGhlU2VhdE9mU2FjcmlmaWNlRXh0cmVtZSc6IDkyMyxcclxuICAnVGhlU2Vjb25kQ29pbE9mQmFoYW11dFNhdmFnZVR1cm4xJzogMzgwLFxyXG4gICdUaGVTZWNvbmRDb2lsT2ZCYWhhbXV0U2F2YWdlVHVybjInOiAzODEsXHJcbiAgJ1RoZVNlY29uZENvaWxPZkJhaGFtdXRTYXZhZ2VUdXJuMyc6IDM4MixcclxuICAnVGhlU2Vjb25kQ29pbE9mQmFoYW11dFNhdmFnZVR1cm40JzogMzgzLFxyXG4gICdUaGVTZWNvbmRDb2lsT2ZCYWhhbXV0VHVybjEnOiAzNTUsXHJcbiAgJ1RoZVNlY29uZENvaWxPZkJhaGFtdXRUdXJuMic6IDM1NixcclxuICAnVGhlU2Vjb25kQ29pbE9mQmFoYW11dFR1cm4zJzogMzU3LFxyXG4gICdUaGVTZWNvbmRDb2lsT2ZCYWhhbXV0VHVybjQnOiAzNTgsXHJcbiAgJ1RoZVNoaWZ0aW5nQWx0YXJzT2ZVem5haXInOiA3OTQsXHJcbiAgJ1RoZVNoaWZ0aW5nT3VibGlldHRlc09mTHloZUdoaWFoJzogOTI0LFxyXG4gICdUaGVTaW5ndWxhcml0eVJlYWN0b3InOiA0MzcsXHJcbiAgJ1RoZVNpcmVuc29uZ1NlYSc6IDYyNixcclxuICAnVGhlU3RlcHNPZkZhaXRoJzogMTQzLFxyXG4gICdUaGVTdG9uZVZpZ2lsJzogMTY4LFxyXG4gICdUaGVTdG9uZVZpZ2lsSGFyZCc6IDM2NSxcclxuICAnVGhlU3RyaWtpbmdUcmVlRXh0cmVtZSc6IDM3NSxcclxuICAnVGhlU3RyaWtpbmdUcmVlSGFyZCc6IDM3NCxcclxuICAnVGhlU3Vua2VuVGVtcGxlT2ZRYXJuJzogMTYzLFxyXG4gICdUaGVTdW5rZW5UZW1wbGVPZlFhcm5IYXJkJzogMzY3LFxyXG4gICdUaGVTd2FsbG93c0NvbXBhc3MnOiA3NjgsXHJcbiAgJ1RoZVRhbVRhcmFEZWVwY3JvZnQnOiAxNjQsXHJcbiAgJ1RoZVRhbVRhcmFEZWVwY3JvZnRIYXJkJzogMzczLFxyXG4gICdUaGVUZW1wZXN0JzogODE4LFxyXG4gICdUaGVUZW1wbGVPZlRoZUZpc3QnOiA2NjMsXHJcbiAgJ1RoZVRob3VzYW5kTWF3c09mVG90b1Jhayc6IDE2OSxcclxuICAnVGhlVG93ZXJBdFBhcmFkaWdtc0JyZWFjaCc6IDk2NixcclxuICAnVGhlVHJpcGxlVHJpYWRCYXR0bGVoYWxsJzogNTc5LFxyXG4gICdUaGVUd2lubmluZyc6IDg0MCxcclxuICAnVGhlVW5lbmRpbmdDb2lsT2ZCYWhhbXV0VWx0aW1hdGUnOiA3MzMsXHJcbiAgJ1RoZVZhbGVudGlvbmVzQ2VyZW1vbnknOiA3NDEsXHJcbiAgJ1RoZVZhdWx0JzogNDIxLFxyXG4gICdUaGVWb2lkQXJrJzogNTA4LFxyXG4gICdUaGVXYW5kZXJlcnNQYWxhY2UnOiAxNTksXHJcbiAgJ1RoZVdhbmRlcmVyc1BhbGFjZUhhcmQnOiAxODgsXHJcbiAgJ1RoZVdlYXBvbnNSZWZyYWluVWx0aW1hdGUnOiA3NzcsXHJcbiAgJ1RoZVdlZXBpbmdDaXR5T2ZNaGFjaCc6IDU1NixcclxuICAnVGhlV2hvcmxlYXRlckV4dHJlbWUnOiAzNTksXHJcbiAgJ1RoZVdob3JsZWF0ZXJIYXJkJzogMjgxLFxyXG4gICdUaGVXaG9ybGVhdGVyVW5yZWFsJzogOTcyLFxyXG4gICdUaGVXaWxsT2ZUaGVNb29uJzogNzk3LFxyXG4gICdUaGVXb3JsZE9mRGFya25lc3MnOiAxNTEsXHJcbiAgJ1RoZVdyZWF0aE9mU25ha2VzJzogODI0LFxyXG4gICdUaGVXcmVhdGhPZlNuYWtlc0V4dHJlbWUnOiA4MjUsXHJcbiAgJ1Rob2tBc3RUaG9rRXh0cmVtZSc6IDQ0NixcclxuICAnVGhva0FzdFRob2tIYXJkJzogNDMyLFxyXG4gICdUaG9ybm1hcmNoRXh0cmVtZSc6IDM2NCxcclxuICAnVGhvcm5tYXJjaEhhcmQnOiAyMDcsXHJcbiAgJ1RyaXBsZVRyaWFkSW52aXRhdGlvbmFsUGFybG9yJzogOTQxLFxyXG4gICdUcmlwbGVUcmlhZE9wZW5Ub3VybmFtZW50JzogOTQwLFxyXG4gICdVbGRhaFN0ZXBzT2ZOYWxkJzogMTMwLFxyXG4gICdVbGRhaFN0ZXBzT2ZUaGFsJzogMTMxLFxyXG4gICdVbmRlclRoZUFybW9yJzogMTkwLFxyXG4gICdVcHBlckxhTm9zY2VhJzogMTM5LFxyXG4gICdVcnRoc0ZvdW50JzogMzk0LFxyXG4gICdWb3dzT2ZWaXJ0dWVEZWVkc09mQ3J1ZWx0eSc6IDg5MyxcclxuICAnV2FyZFVwJzogMjk5LFxyXG4gICdXZXN0ZXJuTGFOb3NjZWEnOiAxMzgsXHJcbiAgJ1dlc3Rlcm5UaGFuYWxhbic6IDE0MCxcclxuICAnV2hlbkNsYW5zQ29sbGlkZSc6IDcyMyxcclxuICAnV2l0aEhlYXJ0QW5kU3RlZWwnOiA3MDcsXHJcbiAgJ1dvbHZlc0RlblBpZXInOiAyNTAsXHJcbiAgJ1hlbHBoYXRvbCc6IDU3MixcclxuICAnWWFueGlhJzogNjE0LFxyXG4gICdaYWRub3InOiA5NzUsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkYXRhO1xyXG4iLCIvLyBBdXRvLWdlbmVyYXRlZCBmcm9tIGdlbl96b25lX2lkX2FuZF9pbmZvLnB5XHJcbi8vIERPIE5PVCBFRElUIFRISVMgRklMRSBESVJFQ1RMWVxyXG5cclxuaW1wb3J0IHsgTG9jYWxlVGV4dCB9IGZyb20gJy4uL3R5cGVzL3RyaWdnZXInO1xyXG5cclxudHlwZSBab25lSW5mb1R5cGUgPSB7XHJcbiAgW3pvbmVJZDogbnVtYmVyXToge1xyXG4gICAgcmVhZG9ubHkgZXhWZXJzaW9uOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBjb250ZW50VHlwZT86IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG5hbWU6IExvY2FsZVRleHQ7XHJcbiAgICByZWFkb25seSBvZmZzZXRYOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBvZmZzZXRZOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBzaXplRmFjdG9yOiBudW1iZXI7XHJcbiAgICByZWFkb25seSB3ZWF0aGVyUmF0ZTogbnVtYmVyO1xyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCBkYXRhOiBab25lSW5mb1R5cGUgPSB7XHJcbiAgMTI4OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Yip5aeG6JCowrfnvZfmlY/okKjkuIrlsYLnlLLmnb8nLFxyXG4gICAgICAnZGUnOiAnT2JlcmUgRGVja3MnLFxyXG4gICAgICAnZW4nOiAnTGltc2EgTG9taW5zYSBVcHBlciBEZWNrcycsXHJcbiAgICAgICdmcic6ICdMaW1zYSBMb21pbnNhIC0gTGUgVGlsbGFjJyxcclxuICAgICAgJ2phJzogJ+ODquODoOOCteODu+ODreODn+ODs+OCte+8muS4iueUsuadv+WxpCcsXHJcbiAgICAgICdrbyc6ICfrprzsgqwg66Gc66+87IKsIOyDgey4tSDqsJHtjJAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQsXHJcbiAgfSxcclxuICAxMjk6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliKnlp4bokKjCt+e9l+aVj+iQqOS4i+WxgueUsuadvycsXHJcbiAgICAgICdkZSc6ICdVbnRlcmUgRGVja3MnLFxyXG4gICAgICAnZW4nOiAnTGltc2EgTG9taW5zYSBMb3dlciBEZWNrcycsXHJcbiAgICAgICdmcic6ICdMaW1zYSBMb21pbnNhIC0gTFxcJ0VudHJlcG9udCcsXHJcbiAgICAgICdqYSc6ICfjg6rjg6DjgrXjg7vjg63jg5/jg7PjgrXvvJrkuIvnlLLmnb/lsaQnLFxyXG4gICAgICAna28nOiAn66a87IKsIOuhnOuvvOyCrCDtlZjsuLUg6rCR7YyQJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE1LFxyXG4gIH0sXHJcbiAgMTMwOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LmM5bCU6L6+5ZOI546w5LiW5Zue5buKJyxcclxuICAgICAgJ2RlJzogJ05hbGQtS3JldXpnYW5nJyxcclxuICAgICAgJ2VuJzogJ1VsXFwnZGFoIC0gU3RlcHMgb2YgTmFsZCcsXHJcbiAgICAgICdmcic6ICdVbFxcJ2RhaCAtIEZhdWJvdXJnIGRlIE5hbGQnLFxyXG4gICAgICAnamEnOiAn44Km44Or44OA44OP77ya44OK44Or5Zue5buKJyxcclxuICAgICAgJ2tvJzogJ+yauOuLpO2VmCDrgqAg7ZqM656RJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDcsXHJcbiAgfSxcclxuICAxMzE6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuYzlsJTovr7lk4jmnaXnlJ/lm57lu4onLFxyXG4gICAgICAnZGUnOiAnVGhhbC1LcmV1emdhbmcnLFxyXG4gICAgICAnZW4nOiAnVWxcXCdkYWggLSBTdGVwcyBvZiBUaGFsJyxcclxuICAgICAgJ2ZyJzogJ1VsXFwnZGFoIC0gRmF1Ym91cmcgZGUgVGhhbCcsXHJcbiAgICAgICdqYSc6ICfjgqbjg6vjg4Djg4/vvJrjgrbjg6vlm57lu4onLFxyXG4gICAgICAna28nOiAn7Jq464uk7ZWYIOuLrCDtmozrnpEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOCxcclxuICB9LFxyXG4gIDEzMjoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+agvOmHjOi+vuWwvOS6muaWsOihlycsXHJcbiAgICAgICdkZSc6ICdOZXUtR3JpZGFuaWEnLFxyXG4gICAgICAnZW4nOiAnTmV3IEdyaWRhbmlhJyxcclxuICAgICAgJ2ZyJzogJ05vdXZlbGxlIEdyaWRhbmlhJyxcclxuICAgICAgJ2phJzogJ+OCsOODquODgOODi+OCou+8muaWsOW4guihlycsXHJcbiAgICAgICdrbyc6ICfqt7jrpqzri6Tri4jslYQg7Iug7Iuc6rCA7KeAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEsXHJcbiAgfSxcclxuICAxMzM6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmoLzph4zovr7lsLzkuprml6fooZcnLFxyXG4gICAgICAnZGUnOiAnQWx0LUdyaWRhbmlhJyxcclxuICAgICAgJ2VuJzogJ09sZCBHcmlkYW5pYScsXHJcbiAgICAgICdmcic6ICdWaWVpbGxlIEdyaWRhbmlhJyxcclxuICAgICAgJ2phJzogJ+OCsOODquODgOODi+OCou+8muaXp+W4guihlycsXHJcbiAgICAgICdrbyc6ICfqt7jrpqzri6Tri4jslYQg6rWs7Iuc6rCA7KeAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIsXHJcbiAgfSxcclxuICAxMzQ6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuK3mi4nor7ropb/kuponLFxyXG4gICAgICAnZGUnOiAnWmVudHJhbGVzIExhIE5vc2NlYScsXHJcbiAgICAgICdlbic6ICdNaWRkbGUgTGEgTm9zY2VhJyxcclxuICAgICAgJ2ZyJzogJ05vc2NlYSBjZW50cmFsZScsXHJcbiAgICAgICdqYSc6ICfkuK3lpK7jg6njg47jgrfjgqInLFxyXG4gICAgICAna28nOiAn7KSR67aAIOudvOuFuOyLnOyVhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNixcclxuICB9LFxyXG4gIDEzNToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aLieivuuilv+S6muS9juWcsCcsXHJcbiAgICAgICdkZSc6ICdVbnRlcmVzIExhIE5vc2NlYScsXHJcbiAgICAgICdlbic6ICdMb3dlciBMYSBOb3NjZWEnLFxyXG4gICAgICAnZnInOiAnQmFzc2UtTm9zY2VhJyxcclxuICAgICAgJ2phJzogJ+S9juWcsOODqeODjuOCt+OCoicsXHJcbiAgICAgICdrbyc6ICfsoIDsp4Ag652864W47Iuc7JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE3LFxyXG4gIH0sXHJcbiAgMTM2OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rW36Zu+5p2RJyxcclxuICAgICAgJ2RlJzogJ0RvcmYgZGVzIE5lYmVscycsXHJcbiAgICAgICdlbic6ICdNaXN0JyxcclxuICAgICAgJ2ZyJzogJ0JydW3DqWUnLFxyXG4gICAgICAnamEnOiAn44Of44K544OI44O744O044Kj44Os44OD44K4JyxcclxuICAgICAgJ2tvJzogJ+yViOqwr+u5myDrp4jsnYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQsXHJcbiAgfSxcclxuICAxMzc6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuJzmi4nor7ropb/kuponLFxyXG4gICAgICAnZGUnOiAnw5ZzdGxpY2hlcyBMYSBOb3NjZWEnLFxyXG4gICAgICAnZW4nOiAnRWFzdGVybiBMYSBOb3NjZWEnLFxyXG4gICAgICAnZnInOiAnTm9zY2VhIG9yaWVudGFsZScsXHJcbiAgICAgICdqYSc6ICfmnbHjg6njg47jgrfjgqInLFxyXG4gICAgICAna28nOiAn64+Z67aAIOudvOuFuOyLnOyVhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxOCxcclxuICB9LFxyXG4gIDEzODoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+ilv+aLieivuuilv+S6micsXHJcbiAgICAgICdkZSc6ICdXZXN0bGljaGVzIExhIE5vc2NlYScsXHJcbiAgICAgICdlbic6ICdXZXN0ZXJuIExhIE5vc2NlYScsXHJcbiAgICAgICdmcic6ICdOb3NjZWEgb2NjaWRlbnRhbGUnLFxyXG4gICAgICAnamEnOiAn6KW/44Op44OO44K344KiJyxcclxuICAgICAgJ2tvJzogJ+yEnOu2gCDrnbzrhbjsi5zslYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTksXHJcbiAgfSxcclxuICAxMzk6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmi4nor7ropb/kuprpq5jlnLAnLFxyXG4gICAgICAnZGUnOiAnT2JlcmVzIExhIE5vc2NlYScsXHJcbiAgICAgICdlbic6ICdVcHBlciBMYSBOb3NjZWEnLFxyXG4gICAgICAnZnInOiAnSGF1dGUtTm9zY2VhJyxcclxuICAgICAgJ2phJzogJ+mrmOWcsOODqeODjuOCt+OCoicsXHJcbiAgICAgICdrbyc6ICfqs6Dsp4Ag652864W47Iuc7JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIwLFxyXG4gIH0sXHJcbiAgMTQwOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6KW/6JCo57qz5YWwJyxcclxuICAgICAgJ2RlJzogJ1dlc3RsaWNoZXMgVGhhbmFsYW4nLFxyXG4gICAgICAnZW4nOiAnV2VzdGVybiBUaGFuYWxhbicsXHJcbiAgICAgICdmcic6ICdUaGFuYWxhbiBvY2NpZGVudGFsJyxcclxuICAgICAgJ2phJzogJ+ilv+OCtuODiuODqeODvOODsycsXHJcbiAgICAgICdrbyc6ICfshJzrtoAg64uk64Kg656AJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDksXHJcbiAgfSxcclxuICAxNDE6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuK3okKjnurPlhbAnLFxyXG4gICAgICAnZGUnOiAnWmVudHJhbGVzIFRoYW5hbGFuJyxcclxuICAgICAgJ2VuJzogJ0NlbnRyYWwgVGhhbmFsYW4nLFxyXG4gICAgICAnZnInOiAnVGhhbmFsYW4gY2VudHJhbCcsXHJcbiAgICAgICdqYSc6ICfkuK3lpK7jgrbjg4rjg6njg7zjg7MnLFxyXG4gICAgICAna28nOiAn7KSR67aAIOuLpOuCoOuegCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMCxcclxuICB9LFxyXG4gIDE0Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfoib7njpvlkInlqJzmna/mlpfmioDlpKfkvJrlhrPotZsnLFxyXG4gICAgICAnZGUnOiAnRGFzIERyYWNoZW5oYWxzLUtvbG9zc2V1bScsXHJcbiAgICAgICdlbic6ICdUaGUgRHJhZ29uXFwncyBOZWNrJyxcclxuICAgICAgJ2ZyJzogJ0xlIENvbCBkdSBkcmFnb24nLFxyXG4gICAgICAnamEnOiAn44Ki44Oe44K444OK5p2v6ZeY5oqA5Lya5rG65Yud5oimJyxcclxuICAgICAgJ2tvJzogJ+yVhOuniOyngOuCmOuwsCDtiKzquLDrjIDtmowg6rKw7Iq57KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxNDM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn55qH6YO95LyK5L+u5Yqg5b635L+d5Y2r5oiYJyxcclxuICAgICAgJ2RlJzogJ0RlciBTY2hpY2tzYWxzd2VnJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTdGVwcyBvZiBGYWl0aCcsXHJcbiAgICAgICdmcic6ICdMZSBTacOoZ2UgZGUgbGEgc2FpbnRlIENpdMOpIGRcXCdJc2hnYXJkJyxcclxuICAgICAgJ2phJzogJ+eah+mDveOCpOOCt+ODpeOCrOODq+ODiemYsuihm+aIpicsXHJcbiAgICAgICdrbyc6ICfshLHrj4Qg7J207IqI6rCA66W065OcIOuwqeyWtOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDE0NToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S4nOiQqOe6s+WFsCcsXHJcbiAgICAgICdkZSc6ICfDlnN0bGljaGVzIFRoYW5hbGFuJyxcclxuICAgICAgJ2VuJzogJ0Vhc3Rlcm4gVGhhbmFsYW4nLFxyXG4gICAgICAnZnInOiAnVGhhbmFsYW4gb3JpZW50YWwnLFxyXG4gICAgICAnamEnOiAn5p2x44K244OK44Op44O844OzJyxcclxuICAgICAgJ2tvJzogJ+uPmeu2gCDri6TrgqDrnoAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTEsXHJcbiAgfSxcclxuICAxNDY6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfljZfokKjnurPlhbAnLFxyXG4gICAgICAnZGUnOiAnU8O8ZGxpY2hlcyBUaGFuYWxhbicsXHJcbiAgICAgICdlbic6ICdTb3V0aGVybiBUaGFuYWxhbicsXHJcbiAgICAgICdmcic6ICdUaGFuYWxhbiBtw6lyaWRpb25hbCcsXHJcbiAgICAgICdqYSc6ICfljZfjgrbjg4rjg6njg7zjg7MnLFxyXG4gICAgICAna28nOiAn64Ko67aAIOuLpOuCoOuegCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMixcclxuICB9LFxyXG4gIDE0Nzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WMl+iQqOe6s+WFsCcsXHJcbiAgICAgICdkZSc6ICdOw7ZyZGxpY2hlcyBUaGFuYWxhbicsXHJcbiAgICAgICdlbic6ICdOb3J0aGVybiBUaGFuYWxhbicsXHJcbiAgICAgICdmcic6ICdUaGFuYWxhbiBzZXB0ZW50cmlvbmFsJyxcclxuICAgICAgJ2phJzogJ+WMl+OCtuODiuODqeODvOODsycsXHJcbiAgICAgICdrbyc6ICfrtoHrtoAg64uk64Kg656AJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzLFxyXG4gIH0sXHJcbiAgMTQ4OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6buR6KGj5qOu5p6X5Lit5aSu5p6X5Yy6JyxcclxuICAgICAgJ2RlJzogJ1RpZWZlciBXYWxkJyxcclxuICAgICAgJ2VuJzogJ0NlbnRyYWwgU2hyb3VkJyxcclxuICAgICAgJ2ZyJzogJ0ZvcsOqdCBjZW50cmFsZScsXHJcbiAgICAgICdqYSc6ICfpu5LooaPmo67vvJrkuK3lpK7mo67mnpcnLFxyXG4gICAgICAna28nOiAn6rKA7J2A7J6l66eJIOyIsiDspJHrtoDsgrzrprwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMyxcclxuICB9LFxyXG4gIDE1MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflubvpvpnmrovpqrjlr4bnuqbkuYvloZQnLFxyXG4gICAgICAnZGUnOiAnSMO8dGVyIGRlcyBTZWVzJyxcclxuICAgICAgJ2VuJzogJ1RoZSBLZWVwZXIgb2YgdGhlIExha2UnLFxyXG4gICAgICAnZnInOiAnTGUgR2FyZGllbiBkdSBsYWMnLFxyXG4gICAgICAnamEnOiAn5bm76b6N5q6L6aq4IOm7mee0hOOBruWhlCcsXHJcbiAgICAgICdrbyc6ICfrrLXslb3snZgg7YORJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDc0LFxyXG4gIH0sXHJcbiAgMTUxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+awtOaZtuWhlCDmmpfkuYvkuJbnlYwnLFxyXG4gICAgICAnZGUnOiAnRGllIFdlbHQgZGVyIER1bmtlbGhlaXQnLFxyXG4gICAgICAnZW4nOiAnVGhlIFdvcmxkIG9mIERhcmtuZXNzJyxcclxuICAgICAgJ2ZyJzogJ0xhIFRvdXIgZGUgQ3Jpc3RhbCAtIE1vbmRlIGRlcyBUw6luw6hicmVzJyxcclxuICAgICAgJ2phJzogJ+OCr+ODquOCueOCv+ODq+OCv+ODr+ODvO+8mumXh+OBruS4lueVjCcsXHJcbiAgICAgICdrbyc6ICftgazrpqzsiqTtg4gg7YOA7JuMOiDslrTrkaDsnZgg7IS46rOEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxNTI6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpu5HooaPmo67mnpfkuJzpg6jmnpfljLonLFxyXG4gICAgICAnZGUnOiAnT3N0d2FsZCcsXHJcbiAgICAgICdlbic6ICdFYXN0IFNocm91ZCcsXHJcbiAgICAgICdmcic6ICdGb3LDqnQgZGUgbFxcJ2VzdCcsXHJcbiAgICAgICdqYSc6ICfpu5LooaPmo67vvJrmnbHpg6jmo67mnpcnLFxyXG4gICAgICAna28nOiAn6rKA7J2A7J6l66eJIOyIsiDrj5nrtoDsgrzrprwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNCxcclxuICB9LFxyXG4gIDE1Mzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+m7keiho+ajruael+WNl+mDqOael+WMuicsXHJcbiAgICAgICdkZSc6ICdTw7xkd2FsZCcsXHJcbiAgICAgICdlbic6ICdTb3V0aCBTaHJvdWQnLFxyXG4gICAgICAnZnInOiAnRm9yw6p0IGR1IHN1ZCcsXHJcbiAgICAgICdqYSc6ICfpu5LooaPmo67vvJrljZfpg6jmo67mnpcnLFxyXG4gICAgICAna28nOiAn6rKA7J2A7J6l66eJIOyIsiDrgqjrtoDsgrzrprwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNSxcclxuICB9LFxyXG4gIDE1NDoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+m7keiho+ajruael+WMl+mDqOael+WMuicsXHJcbiAgICAgICdkZSc6ICdOb3Jkd2FsZCcsXHJcbiAgICAgICdlbic6ICdOb3J0aCBTaHJvdWQnLFxyXG4gICAgICAnZnInOiAnRm9yw6p0IGR1IG5vcmQnLFxyXG4gICAgICAnamEnOiAn6buS6KGj5qOu77ya5YyX6YOo5qOu5p6XJyxcclxuICAgICAgJ2tvJzogJ+qygOydgOyepeuniSDsiLIg67aB67aA7IK866a8JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDYsXHJcbiAgfSxcclxuICAxNTU6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflupPlsJTmnK3mlq/kuK3lpK7pq5jlnLAnLFxyXG4gICAgICAnZGUnOiAnWmVudHJhbGVzIEhvY2hsYW5kIHZvbiBDb2VydGhhcycsXHJcbiAgICAgICdlbic6ICdDb2VydGhhcyBDZW50cmFsIEhpZ2hsYW5kcycsXHJcbiAgICAgICdmcic6ICdIYXV0ZXMgdGVycmVzIGR1IENvZXJ0aGFzIGNlbnRyYWwnLFxyXG4gICAgICAnamEnOiAn44Kv44Or44K244K55Lit5aSu6auY5ZywJyxcclxuICAgICAgJ2tvJzogJ+y7pOultOuLpOyKpCDspJHslZnqs6Dsp4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjEsXHJcbiAgfSxcclxuICAxNTY6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmkanmnZznurMnLFxyXG4gICAgICAnZGUnOiAnTW9yIERob25hJyxcclxuICAgICAgJ2VuJzogJ01vciBEaG9uYScsXHJcbiAgICAgICdmcic6ICdNb3IgRGhvbmEnLFxyXG4gICAgICAnamEnOiAn44Oi44O844OJ44Kl44OKJyxcclxuICAgICAgJ2tvJzogJ+uqqOultOuPhOuCmCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMixcclxuICB9LFxyXG4gIDE1Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnnhLbopoHlrrPmspnmlq/loZTlpI/murbmtJ4nLFxyXG4gICAgICAnZGUnOiAnU2FzdGFzaGEnLFxyXG4gICAgICAnZW4nOiAnU2FzdGFzaGEnLFxyXG4gICAgICAnZnInOiAnU2FzdGFzaGEnLFxyXG4gICAgICAnamEnOiAn5aSp54S26KaB5a6zIOOCteOCueOCv+OCt+ODo+a1uOmjn+a0nicsXHJcbiAgICAgICdrbyc6ICfsgqzsiqTtg4Dsg6Qg7Lmo7IudIOuPmeq1tCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTU4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8keWFu+iDnOWcsOW4g+mbt+emj+a0m+WFi+aWr+mHjuiQpeWcsCcsXHJcbiAgICAgICdkZSc6ICdCcsO8bGx2b2x4XFwnIExhbmdyYXN0JyxcclxuICAgICAgJ2VuJzogJ0JyYXlmbG94XFwncyBMb25nc3RvcCcsXHJcbiAgICAgICdmcic6ICdMZSBCaXZvdWFjIGRlIEJyYXlmbG94JyxcclxuICAgICAgJ2phJzogJ+WlqumChOaUr+aPtCDjg5bjg6zjgqTjg5Xjg63jgq/jgrnjga7ph47llrblnLAnLFxyXG4gICAgICAna28nOiAn67iM66CI7J207ZSM66Gd7Iqk7J2YIOyVvOyYgeyngCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTU5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elnueBteWco+Wfn+aUvua1quelnuWPpOelnuauvycsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVzIFdhbmRlcmVycycsXHJcbiAgICAgICdlbic6ICdUaGUgV2FuZGVyZXJcXCdzIFBhbGFjZScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZHUgVmFnYWJvbmQnLFxyXG4gICAgICAnamEnOiAn5peF56We6IGW5Z+fIOODr+ODs+ODgOODqeODvOODkeODrOOCuScsXHJcbiAgICAgICdrbyc6ICfrsKnrnpHsnpDsnZgg6raB7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxNjA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6aKG6Iiq5piO54Gv5aSp54u85pif54Gv5aGUJyxcclxuICAgICAgJ2RlJzogJ1BoYXJvcyBTaXJpdXMnLFxyXG4gICAgICAnZW4nOiAnUGhhcm9zIFNpcml1cycsXHJcbiAgICAgICdmcic6ICdMZSBQaGFyZSBkZSBTaXJpdXMnLFxyXG4gICAgICAnamEnOiAn5oCq6bOl5beo5aGUIOOCt+ODquOCpuOCueWkp+eBr+WPsCcsXHJcbiAgICAgICdrbyc6ICfsi5zrpqzsmrDsiqQg64yA65Ox64yAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMTYxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WwgemUgeWdkemBk+mTnOmTg+mTnOWxsScsXHJcbiAgICAgICdkZSc6ICdLdXBmZXJnbG9ja2VuLU1pbmUnLFxyXG4gICAgICAnZW4nOiAnQ29wcGVyYmVsbCBNaW5lcycsXHJcbiAgICAgICdmcic6ICdMZXMgTWluZXMgZGUgQ2xvY2hlY3VpdnJlJyxcclxuICAgICAgJ2phJzogJ+WwgemOluWdkemBkyDjgqvjg4Pjg5Hjg7zjg5njg6vpioXlsbEnLFxyXG4gICAgICAna28nOiAn6rWs66as7KKFIOq0keyCsCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTYyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mtlOWFvemihuWfn+aXpeW9seWcsOS/rueCvOaJgCcsXHJcbiAgICAgICdkZSc6ICdIYWxhdGFsaScsXHJcbiAgICAgICdlbic6ICdIYWxhdGFsaScsXHJcbiAgICAgICdmcic6ICdIYWxhdGFsaScsXHJcbiAgICAgICdqYSc6ICfprZTnjaPpoJjln58g44OP44Op44K/44Oq5L+u57e05omAJyxcclxuICAgICAgJ2tvJzogJ+2VoOudvO2DiOumrCDsiJjroKjsnqUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE2Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflj6Tku6PpgZfov7nlloDmganln4vmsqHlnKPloIInLFxyXG4gICAgICAnZGUnOiAnVmVyc3Vua2VuZXIgVGVtcGVsIHZvbiBRYXJuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTdW5rZW4gVGVtcGxlIG9mIFFhcm4nLFxyXG4gICAgICAnZnInOiAnTGUgVGVtcGxlIGVuc2V2ZWxpIGRlIFFhcm4nLFxyXG4gICAgICAnamEnOiAn6YG66Leh5o6i57SiIOOCq+ODq+ODs+Wfi+ayoeWvuumZoicsXHJcbiAgICAgICdrbyc6ICfsubTrpbjsnZgg66y064SI7KeEIOyCrOybkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTY0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WcsOS4i+eBteauv+WhlOWnhsK35aGU5ouJ5aKT5ZutJyxcclxuICAgICAgJ2RlJzogJ1RvdGVuYWNrZXIgVGFtLVRhcmEnLFxyXG4gICAgICAnZW4nOiAnVGhlIFRhbeKAk1RhcmEgRGVlcGNyb2Z0JyxcclxuICAgICAgJ2ZyJzogJ0xcXCdIeXBvZ8OpZSBkZSBUYW0tVGFyYScsXHJcbiAgICAgICdqYSc6ICflnLDkuIvpnIrmrr8g44K/44Og44K/44Op44Gu5aKT5omAJyxcclxuICAgICAgJ2tvJzogJ+2DkO2DgOudvCDrrJjshownLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMzAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE2Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflkI3pl6jlupzpgrjpnZnor63luoTlm60nLFxyXG4gICAgICAnZGUnOiAnSGF1a2tlLUhlcnJlbmhhdXMnLFxyXG4gICAgICAnZW4nOiAnSGF1a2tlIE1hbm9yJyxcclxuICAgICAgJ2ZyJzogJ0xlIE1hbm9pciBkZXMgSGF1a2tlJyxcclxuICAgICAgJ2phJzogJ+WQjemWgOWxi+aVtyDjg4/jgqbjgrHjgr/lvqHnlKjpgrgnLFxyXG4gICAgICAna28nOiAn7ZWY7Jqw7LyA7YOAIOuzhOq2gScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTY3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mCquaVmempu+WcsOaXoOmZkOWfjuWPpOWgoScsXHJcbiAgICAgICdkZSc6ICdEaWUgUnVpbmVuIHZvbiBBbWRhcG9yJyxcclxuICAgICAgJ2VuJzogJ0FtZGFwb3IgS2VlcCcsXHJcbiAgICAgICdmcic6ICdMZSBDaMOidGVhdSBkXFwnQW1kYXBvcicsXHJcbiAgICAgICdqYSc6ICfpgqrmlZnmjpLmkoMg5Y+k5Z+O44Ki44Og44OA44OX44O844OrJyxcclxuICAgICAgJ2tvJzogJ+yYmyDslZTri6Ttj6zrpbQg7ISxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMTY4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+Wvuem+meWfjuWhnuefs+WNq+WhlCcsXHJcbiAgICAgICdkZSc6ICdTdGVpbmVybmUgV2FjaHQnLFxyXG4gICAgICAnZW4nOiAnVGhlIFN0b25lIFZpZ2lsJyxcclxuICAgICAgJ2ZyJzogJ0xlIFZpZ2lsZSBkZSBQaWVycmUnLFxyXG4gICAgICAnamEnOiAn5Z+O5aGe5pS755WlIOOCueODiOODvOODs+ODtOOCo+OCuOODqycsXHJcbiAgICAgICdrbyc6ICfrj4zrsKntjKgg6rK96rOE7LSI7IaMJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI3LFxyXG4gIH0sXHJcbiAgMTY5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+ebkeeLseW6n+Win+aJmOaJmMK35ouJ5YWL5Y2D54uxJyxcclxuICAgICAgJ2RlJzogJ1RhdXNlbmQgTMO2Y2hlciB2b24gVG90by1SYWsnLFxyXG4gICAgICAnZW4nOiAnVGhlIFRob3VzYW5kIE1hd3Mgb2YgVG90b+KAk1JhaycsXHJcbiAgICAgICdmcic6ICdMZXMgTWlsbGUgR3VldWxlcyBkZSBUb3RvLVJhaycsXHJcbiAgICAgICdqYSc6ICfnm6PnjYTlu4Plop8g44OI44OI44Op44Kv44Gu5Y2D542EJyxcclxuICAgICAgJ2tvJzogJ+2GoO2GoOudvO2BrCDqsJDsmKUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE3MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmtYHmspnov7flrqvmqLXpuKPmtJ4nLFxyXG4gICAgICAnZGUnOiAnU8OkZ2Vyc2NocmVpJyxcclxuICAgICAgJ2VuJzogJ0N1dHRlclxcJ3MgQ3J5JyxcclxuICAgICAgJ2ZyJzogJ0xlIEdvdWZmcmUgaHVybGFudCcsXHJcbiAgICAgICdqYSc6ICfmtYHnoILov7flrq4g44Kr44OD44K/44O844K644Kv44Op44KkJyxcclxuICAgICAgJ2tvJzogJ+uCmOustOq+vOydmCDruYTrqoUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE3MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflsbHkuK3miJjnur/ms73mooXlsJTopoHloZ4nLFxyXG4gICAgICAnZGUnOiAnRGllIEZlc3RlIER6ZW1hZWwnLFxyXG4gICAgICAnZW4nOiAnRHplbWFlbCBEYXJraG9sZCcsXHJcbiAgICAgICdmcic6ICdMYSBGb3J0ZXJlc3NlIGRlIER6ZW1hZWwnLFxyXG4gICAgICAnamEnOiAn5o6D6KiO5L2c5oimIOOCvOODvOODoeODq+imgeWhnicsXHJcbiAgICAgICdrbyc6ICfsoJzrqZwg7JqU7IOIJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxNzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q+S6Zu+5rSe56qf6buE6YeR6LC3JyxcclxuICAgICAgJ2RlJzogJ0dvbGRrbGFtbScsXHJcbiAgICAgICdlbic6ICdUaGUgQXVydW0gVmFsZScsXHJcbiAgICAgICdmcic6ICdMZSBWYWwgZFxcJ0F1cnVtJyxcclxuICAgICAgJ2phJzogJ+mcp+S4reihjOi7jSDjgqrjg7zjg6njg6Djg7TjgqfjgqTjg6snLFxyXG4gICAgICAna28nOiAn6riI67mbIOqzqOynnOq4sCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTc0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+awtOaZtuWhlCDlj6Tku6Pkurrov7flrqsnLFxyXG4gICAgICAnZGUnOiAnS3Jpc3RhbGx0dXJtIC0gRGFzIExhYnlyaW50aCBkZXIgQWx0ZW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIExhYnlyaW50aCBvZiB0aGUgQW5jaWVudHMnLFxyXG4gICAgICAnZnInOiAnTGEgVG91ciBkZSBDcmlzdGFsIC0gRMOpZGFsZSBhbnRpcXVlJyxcclxuICAgICAgJ2phJzogJ+OCr+ODquOCueOCv+ODq+OCv+ODr+ODvO+8muWPpOS7o+OBruawkeOBrui/t+WuricsXHJcbiAgICAgICdrbyc6ICftgazrpqzsiqTtg4gg7YOA7JuMOiDqs6DrjIDsnbjsnZgg66+46raBJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxODA6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmi4nor7ropb/kuprlpJblnLAnLFxyXG4gICAgICAnZGUnOiAnw4R1w59lcmVzIExhIE5vc2NlYScsXHJcbiAgICAgICdlbic6ICdPdXRlciBMYSBOb3NjZWEnLFxyXG4gICAgICAnZnInOiAnTm9zY2VhIGV4dMOpcmlldXJlJyxcclxuICAgICAgJ2phJzogJ+WkluWcsOODqeODjuOCt+OCoicsXHJcbiAgICAgICdrbyc6ICfsmbjsp4Ag652864W47Iuc7JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI0LFxyXG4gIH0sXHJcbiAgMTg4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atpuijheWco+Wfn+aUvua1quelnuWPpOelnuauvycsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVzIFdhbmRlcmVycyAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaGUgV2FuZGVyZXJcXCdzIFBhbGFjZSAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGR1IFZhZ2Fib25kIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+atpuijheiBluWfnyDjg6/jg7Pjg4Djg6njg7zjg5Hjg6zjgrkgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+uwqeuekeyekOydmCDqtoHsoIQo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0MCxcclxuICB9LFxyXG4gIDE4OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpgqrlv7XlppblnLDml6DpmZDln47lj6TloKEnLFxyXG4gICAgICAnZGUnOiAnRGllIFJ1aW5lbiB2b24gQW1kYXBvciAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdBbWRhcG9yIEtlZXAgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIENow6J0ZWF1IGRcXCdBbWRhcG9yIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+mCquW/teaOkuaSgyDlj6Tln47jgqLjg6Djg4Djg5fjg7zjg6sgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+yYmyDslZTri6Ttj6zrpbQg7ISxKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDAsXHJcbiAgfSxcclxuICAxOTA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6K6o5LyQ5b235b6o5q2754G177yBJyxcclxuICAgICAgJ2RlJzogJ0JvY2ttYW5ucyBHZWZvbGdlJyxcclxuICAgICAgJ2VuJzogJ1VuZGVyIHRoZSBBcm1vcicsXHJcbiAgICAgICdmcic6ICdDaGFzc2UgYXUgZmFudMO0bWUgZmFudG9jaGUnLFxyXG4gICAgICAnamEnOiAn5b235b6o44GG5q276ZyK44KS6KiO44Gm77yBJyxcclxuICAgICAgJ2tvJzogJ+uwqe2Zqe2VmOuKlCDsgqzroLnsnYQg7JOw65+s65yo66Ck6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzLFxyXG4gIH0sXHJcbiAgMTkxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mpsemZpOWJp+avkuWmluiKse+8gScsXHJcbiAgICAgICdkZSc6ICdVbmtyYXV0IGrDpHRlbicsXHJcbiAgICAgICdlbic6ICdQdWxsaW5nIFBvaXNvbiBQb3NpZXMnLFxyXG4gICAgICAnZnInOiAnT3DDqXJhdGlvbiBmbGV1cnMgZHUgbWFsJyxcclxuICAgICAgJ2phJzogJ+acieavkuWmluiKseOCkumnhumZpOOBm+OCiO+8gScsXHJcbiAgICAgICdrbyc6ICfrj4XshLEg7JqU6rS06r2D7J2EIOygnOqxsO2VmOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNCxcclxuICB9LFxyXG4gIDE5Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmtojnga3mgbblvpLlm6LkvJnlr4TnlJ/onILlm6LvvIEnLFxyXG4gICAgICAnZGUnOiAnSW5zIFdlc3Blbm5lc3Qgc3RlY2hlbicsXHJcbiAgICAgICdlbic6ICdTdGluZ2luZyBCYWNrJyxcclxuICAgICAgJ2ZyJzogJ0V4cMOpZGl0aW9uIHB1bml0aXZlIGNvbnRyZSBsZXMgVmVudHJlcm91Z2UnLFxyXG4gICAgICAnamEnOiAn54Sh5rOV6ICF44CM5Ly85oiR6JyC5Zuj44CN44KS5pKD5ruF44Gb44KI77yBJyxcclxuICAgICAgJ2tvJzogJ+ustOuyleyekCDsp5Hri6ggXFwn64KY64KY64uI64uoXFwn7J2EIOyErOupuO2VmOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNSxcclxuICB9LFxyXG4gIDE5Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7Tlk4jlp4bnibnlpKfov7flrqsg55yf5rqQ5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdWZXJzY2hsdW5nZW5lIFNjaGF0dGVuIDMgLSAxJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGaW5hbCBDb2lsIG9mIEJhaGFtdXQgLSBUdXJuIDEnLFxyXG4gICAgICAnZnInOiAnTFxcJ0Fiw65tZSBkZSBCYWhhbXV0IEknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya55yf5oiQ57eoMScsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsp4TshLHtjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTk0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDnnJ/mupDkuYvnq6AyJyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMyAtIDInLFxyXG4gICAgICAnZW4nOiAnVGhlIEZpbmFsIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gMicsXHJcbiAgICAgICdmcic6ICdMXFwnQWLDrm1lIGRlIEJhaGFtdXQgSUknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya55yf5oiQ57eoMicsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsp4TshLHtjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTk1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDnnJ/mupDkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMyAtIDMnLFxyXG4gICAgICAnZW4nOiAnVGhlIEZpbmFsIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gMycsXHJcbiAgICAgICdmcic6ICdMXFwnQWLDrm1lIGRlIEJhaGFtdXQgSUlJJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiO+8muecn+aIkOe3qDMnLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7KeE7ISx7Y64IDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE5Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7Tlk4jlp4bnibnlpKfov7flrqsg55yf5rqQ5LmL56ugNCcsXHJcbiAgICAgICdkZSc6ICdWZXJzY2hsdW5nZW5lIFNjaGF0dGVuIDMgLSA0JyxcclxuICAgICAgJ2VuJzogJ1RoZSBGaW5hbCBDb2lsIG9mIEJhaGFtdXQgLSBUdXJuIDQnLFxyXG4gICAgICAnZnInOiAnTFxcJ0Fiw65tZSBkZSBCYWhhbXV0IElWJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiO+8muecn+aIkOe3qDQnLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7KeE7ISx7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTQ0OCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDQsXHJcbiAgfSxcclxuICAyMDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK5byX5Yip54m56K6o5LyQ5oiYJyxcclxuICAgICAgJ2RlJzogJ0RhcyBHcmFiIGRlciBMb2hlJyxcclxuICAgICAgJ2VuJzogJ1RoZSBCb3dsIG9mIEVtYmVycycsXHJcbiAgICAgICdmcic6ICdMZSBDcmF0w6hyZSBkZXMgdGlzb25zJyxcclxuICAgICAgJ2phJzogJ+OCpOODleODquODvOODiOiojuS8kOaIpicsXHJcbiAgICAgICdrbyc6ICfsnbTtlITrpqztirgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI1LFxyXG4gIH0sXHJcbiAgMjA2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+azsOWdpuiuqOS8kOaImCcsXHJcbiAgICAgICdkZSc6ICdEZXIgTmFiZWwnLFxyXG4gICAgICAnZW4nOiAnVGhlIE5hdmVsJyxcclxuICAgICAgJ2ZyJzogJ0xlIE5vbWJyaWwnLFxyXG4gICAgICAnamEnOiAn44K/44Kk44K/44Oz6KiO5LyQ5oimJyxcclxuICAgICAgJ2tvJzogJ+2DgOydtO2DhCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjMsXHJcbiAgfSxcclxuICAyMDc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6I6r5Y+k5Yqb6LSk546L5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0vDtm5pZ2xpY2hlIEtvbmZyb250YXRpb24gKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnVGhvcm5tYXJjaCAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGEgTGlzacOocmUgZGUgcm9uY2VzIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+WWhOeOi+ODouOCsOODq+ODu+ODouOCsFhJSeS4luiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfshKDsmZUg66qo6re466OoIOuqqOq3uCBYSUnshLgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDMwLFxyXG4gIH0sXHJcbiAgMjA4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i/pualvOe9l+iuqOS8kOaImCcsXHJcbiAgICAgICdkZSc6ICdEYXMgVG9zZW5kZSBBdWdlJyxcclxuICAgICAgJ2VuJzogJ1RoZSBIb3dsaW5nIEV5ZScsXHJcbiAgICAgICdmcic6ICdIdXJsxZNpbCcsXHJcbiAgICAgICdqYSc6ICfjgqzjg6vjg7zjg4DoqI7kvJDmiKYnLFxyXG4gICAgICAna28nOiAn6rCA66Oo64ukIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyNixcclxuICB9LFxyXG4gIDIxNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflrozmiJDpm4blm6LmiJjorq3nu4PvvIEnLFxyXG4gICAgICAnZGUnOiAnRWluZXIgZsO8ciBhbGxlLCBhbGxlIGbDvHIgZWluZW4nLFxyXG4gICAgICAnZW4nOiAnQmFzaWMgVHJhaW5pbmc6IEVuZW15IFBhcnRpZXMnLFxyXG4gICAgICAnZnInOiAnRW50cmHDrm5lbWVudDxJbmRlbnQvPjogZ3JvdXBlcyBkXFwnZW5uZW1pcycsXHJcbiAgICAgICdqYSc6ICfpm4blm6PmiKboqJPnt7TjgpLjgY/jgZDjgormipzjgZHjgo3vvIEnLFxyXG4gICAgICAna28nOiAn7KeR64uo7KCEIO2biOugqOydhCDsmYTsiJjtlZjrnbwhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE2LFxyXG4gIH0sXHJcbiAgMjE1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eqgeegtOaJgOacieWFs+mXqO+8jOiuqOS8kOacgOa3seWkhOeahOaVjOS6uu+8gScsXHJcbiAgICAgICdkZSc6ICdTdHVybWtvbW1hbmRvJyxcclxuICAgICAgJ2VuJzogJ0Jhc2ljIFRyYWluaW5nOiBFbmVteSBTdHJvbmdob2xkcycsXHJcbiAgICAgICdmcic6ICdFbnRyYcOubmVtZW50PEluZGVudC8+OiBpbjxTb2Z0SHlwaGVuLz5maWw8U29mdEh5cGhlbi8+dHJhPFNvZnRIeXBoZW4vPnRpb24gZW4gYmFzZSBlbm5lbWllJyxcclxuICAgICAgJ2phJzogJ+WFqOmWoumWgOOCkueqgeegtOOBl+OAgeacgOa3semDqOOBruaVteOCkuiojuOBpu+8gScsXHJcbiAgICAgICdrbyc6ICfqtIDrrLjsnYQg64+M7YyM7ZWY6rOgIOy1nOyLrOu2gOydmCDsoIHsnYQg7JOw65+s65yo66Ck6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5LFxyXG4gIH0sXHJcbiAgMjE2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aNleiOt+mHkeW4gem+n++8gScsXHJcbiAgICAgICdkZSc6ICdHaWwgb2RlciBMZWJlbicsXHJcbiAgICAgICdlbic6ICdIZXJvIG9uIHRoZSBIYWxmIFNoZWxsJyxcclxuICAgICAgJ2ZyJzogJ1JlY29ucXXDqnRlIGRcXCd1bmUgY2FyYXBhY2UgZXNjYW1vdMOpZScsXHJcbiAgICAgICdqYSc6ICfjgq7jg6vjgqzjg6HjgpLmjZXnjbLjgZvjgojvvIEnLFxyXG4gICAgICAna28nOiAn6ri46rGw67aB7J2EIOyCrOuhnOyeoeyVhOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTAsXHJcbiAgfSxcclxuICAyMTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5bid5Zu95Y2X5pa55aCh5aSW5Zu05r+A5oiYJyxcclxuICAgICAgJ2RlJzogJ0Nhc3RydW0gTWVyaWRpYW51bSAtIEF1w59lbmJlcmVpY2gnLFxyXG4gICAgICAnZW4nOiAnQ2FzdHJ1bSBNZXJpZGlhbnVtJyxcclxuICAgICAgJ2ZyJzogJ0Nhc3RydW0gTWVyaWRpYW51bScsXHJcbiAgICAgICdqYSc6ICflpJbpg63mlLvnlaUg44Kr44K544OI44Or44Og44O744Oh44Oq44OH44Kj44Ki44OM44OgJyxcclxuICAgICAgJ2tvJzogJ+y5tOyKpO2KuOujuCDrqZTrpqzrlJTslYTriJQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDIxOToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflh7vmuoPlk6XluIPmnpfngrjlvLnlhpvlm6LvvIEnLFxyXG4gICAgICAnZGUnOiAnQm9tYmlnZSBHb2JsaW5zJyxcclxuICAgICAgJ2VuJzogJ0ZsaWNraW5nIFN0aWNrcyBhbmQgVGFraW5nIE5hbWVzJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBHb2JlbGlucyBib21iYXJkaWVycycsXHJcbiAgICAgICdqYSc6ICfniIblvL7prZTjgrTjg5bjg6rjg7Pou43lm6PjgpLmkoPmu4XjgZvjgojvvIEnLFxyXG4gICAgICAna28nOiAn7Y+t7YOE6rSRIOqzoOu4lOumsCDqtbDri6jsnYQg7ISs66m47ZWY6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzLFxyXG4gIH0sXHJcbiAgMjIwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iuqOS8kOaipuW5u+S5i+W4g+aLieWlh+W4jOWlpe+8gScsXHJcbiAgICAgICdkZSc6ICdCcmlheGlvIGF1c3NjaGFsdGVuJyxcclxuICAgICAgJ2VuJzogJ0FsbFxcJ3MgV2VsbCB0aGF0IEVuZHMgaW4gdGhlIFdlbGwnLFxyXG4gICAgICAnZnInOiAnQnJpYXhpbyDDoCBicmFzIHJhY2NvdXJjaXMnLFxyXG4gICAgICAnamEnOiAn5aSi5bm744Gu44OW44Op44Kt44K344Kq44KS6KiO44Gm77yBJyxcclxuICAgICAgJ2tvJzogJ+uqve2ZmOydmCDruIzrnbztgazsi5zsmKTrpbwg7JOw65+s65yo66Ck6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1LFxyXG4gIH0sXHJcbiAgMjIxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iuqOS8kOaxoeafk+a6kOWktOmtlOeVjOiKse+8gScsXHJcbiAgICAgICdkZSc6ICdUw7ZkbGljaGVzIFJhbmtlbnNwaWVsJyxcclxuICAgICAgJ2VuJzogJ01vcmUgdGhhbiBhIEZlZWxlcicsXHJcbiAgICAgICdmcic6ICdTdXMgYXUgbW9yYm9sIHBvbGx1ZXVyJyxcclxuICAgICAgJ2phJzogJ+axmuafk+a6kOODouODq+ODnOODq+OCkuiojuOBpu+8gScsXHJcbiAgICAgICdrbyc6ICfsmKTsl7zsm5Ag66qw67O87J2EIOyTsOufrOucqOugpOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjAsXHJcbiAgfSxcclxuICAyMjI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6K6o5LyQ5Z2R6YGT5Lit5Ye6546w55qE5aaW5byC77yBJyxcclxuICAgICAgJ2RlJzogJ0dlZmFociBhdXMgZGVtIE5pY2h0cycsXHJcbiAgICAgICdlbic6ICdBbm5veSB0aGUgVm9pZCcsXHJcbiAgICAgICdmcic6ICdCdXNvIGxcXCdpbW1vbGF0ZXVyJyxcclxuICAgICAgJ2phJzogJ+WdkemBk+OBq+ePvuOCjOOBn+WmlueVsOODluOCveOCkuiojuOBpu+8gScsXHJcbiAgICAgICdrbyc6ICfqsLHrj4Tsl5Ag64KY7YOA64KcIOyalOuniCDrtoDshozrpbwg7JOw65+s65yo66Ck6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNyxcclxuICB9LFxyXG4gIDIyMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfms6jmhI/ml6DmlYznmoTnnLflsZ7vvIzorqjkvJDlpKflnovlppblvILvvIEnLFxyXG4gICAgICAnZGUnOiAnS2FtcGYgZ2VnZW4gU2NoYXR0ZW4nLFxyXG4gICAgICAnZW4nOiAnU2hhZG93IGFuZCBDbGF3JyxcclxuICAgICAgJ2ZyJzogJ09tYnJlcyBldCBncmlmZmVzJyxcclxuICAgICAgJ2phJzogJ+eEoeaVteOBruect+WxnuOCkuW+k+OBiOOBl+OAgeWkp+Wei+WmlueVsOOCkuiojuOBpu+8gScsXHJcbiAgICAgICdrbyc6ICfrrLTsoIHsnZgg67aA7ZWY66W8IOyhsOyihe2VmOuKlCDsmpTrp4jrpbwg7JOw65+s65yo66Ck6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMSxcclxuICB9LFxyXG4gIDIyNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnluZXprZTlr7zln47mnIDnu4jlhrPmiJgnLFxyXG4gICAgICAnZGUnOiAnQ2FzdHJ1bSBNZXJpZGlhbnVtIC0gUHJhZXRvcml1bScsXHJcbiAgICAgICdlbic6ICdUaGUgUHJhZXRvcml1bScsXHJcbiAgICAgICdmcic6ICdMZSBQcmFldG9yaXVtJyxcclxuICAgICAgJ2phJzogJ+acgOe1guaxuuaIpiDprZTlsI7ln47jg5fjg6njgqjjg4jjg6rjgqbjg6AnLFxyXG4gICAgICAna28nOiAn66eI64+E7ISxIO2UhOudvOydtO2GoOumrOybgCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMjQxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDpgoLpgIXkuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMScsXHJcbiAgICAgICdlbic6ICdUaGUgQmluZGluZyBDb2lsIG9mIEJhaGFtdXQgLSBUdXJuIDEnLFxyXG4gICAgICAnZnInOiAnTGUgTGFieXJpbnRoZSBkZSBCYWhhbXV0IEknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya6YKC6YCF57eoMScsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDtlbTtm4TtjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMjQyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDpgoLpgIXkuYvnq6AyJyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMicsXHJcbiAgICAgICdlbic6ICdUaGUgQmluZGluZyBDb2lsIG9mIEJhaGFtdXQgLSBUdXJuIDInLFxyXG4gICAgICAnZnInOiAnTGUgTGFieXJpbnRoZSBkZSBCYWhhbXV0IElJJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiO+8mumCgumAhee3qDInLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7ZW07ZuE7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDI0Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7Tlk4jlp4bnibnlpKfov7flrqsg6YKC6YCF5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdWZXJzY2hsdW5nZW5lIFNjaGF0dGVuIDMnLFxyXG4gICAgICAnZW4nOiAnVGhlIEJpbmRpbmcgQ29pbCBvZiBCYWhhbXV0IC0gVHVybiAzJyxcclxuICAgICAgJ2ZyJzogJ0xlIExhYnlyaW50aGUgZGUgQmFoYW11dCBJSUknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya6YKC6YCF57eoMycsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDtlbTtm4TtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMjQ0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDpgoLpgIXkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gNCcsXHJcbiAgICAgICdlbic6ICdUaGUgQmluZGluZyBDb2lsIG9mIEJhaGFtdXQgLSBUdXJuIDQnLFxyXG4gICAgICAnZnInOiAnTGUgTGFieXJpbnRoZSBkZSBCYWhhbXV0IElWJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiO+8mumCgumAhee3qDQnLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7ZW07ZuE7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDI0NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7Tlk4jlp4bnibnlpKfov7flrqsg6YKC6YCF5LmL56ugNScsXHJcbiAgICAgICdkZSc6ICdWZXJzY2hsdW5nZW5lIFNjaGF0dGVuIDUnLFxyXG4gICAgICAnZW4nOiAnVGhlIEJpbmRpbmcgQ29pbCBvZiBCYWhhbXV0IC0gVHVybiA1JyxcclxuICAgICAgJ2ZyJzogJ0xlIExhYnlyaW50aGUgZGUgQmFoYW11dCBWJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiO+8mumCgumAhee3qDUnLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7ZW07ZuE7Y64IDUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDI1MDoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eLvOeLseWBnOiIueWcuicsXHJcbiAgICAgICdkZSc6ICdXb2xmc2jDtmhsZW4tUGllcicsXHJcbiAgICAgICdlbic6ICdXb2x2ZXNcXCcgRGVuIFBpZXInLFxyXG4gICAgICAnZnInOiAnSmV0w6llIGRlIGxcXCdBbnRyZSBkZXMgbG91cHMnLFxyXG4gICAgICAnamEnOiAn44Km44Or44O044K644K444Kn44Kk44Or5L+C6Ii55aC0JyxcclxuICAgICAgJ2tvJzogJ+uKkeuMgOyasOumrCDrtoDrkZAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTc3LFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOSxcclxuICB9LFxyXG4gIDI4MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliKnnu7TkuprmoZHmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBMZXZpYXRoYW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIDxFbXBoYXNpcz5XaG9ybGVhdGVyPC9FbXBoYXNpcz4gKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIEJyaXNldXIgZGUgbWFyw6llcyAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfnnJ/jg6rjg7TjgqHjgqTjgqLjgrXjg7PoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KeEIOumrOuwlOydtOyWtOyEoCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzgsXHJcbiAgfSxcclxuICAyOTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK5byX5Yip54m55q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gSWZyaXQnLFxyXG4gICAgICAnZW4nOiAnVGhlIEJvd2wgb2YgRW1iZXJzIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZSBDcmF0w6hyZSBkZXMgdGlzb25zIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+ecn+OCpOODleODquODvOODiOiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsp4Qg7J207ZSE66as7Yq4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyNSxcclxuICB9LFxyXG4gIDI5Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfms7Dlnabmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBUaXRhbicsXHJcbiAgICAgICdlbic6ICdUaGUgTmF2ZWwgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIE5vbWJyaWwgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55yf44K/44Kk44K/44Oz6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ynhCDtg4DsnbTtg4Qg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIzLFxyXG4gIH0sXHJcbiAgMjk0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i/pualvOe9l+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdHw7Z0dGVyZMOkbW1lcnVuZyAtIEdhcnVkYScsXHJcbiAgICAgICdlbic6ICdUaGUgSG93bGluZyBFeWUgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0h1cmzFk2lsIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+ecn+OCrOODq+ODvOODgOiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsp4Qg6rCA66Oo64ukIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyNixcclxuICB9LFxyXG4gIDI5NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrlvJfliKnnibnmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBJZnJpdCcsXHJcbiAgICAgICdlbic6ICdUaGUgQm93bCBvZiBFbWJlcnMgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xlIENyYXTDqHJlIGRlcyB0aXNvbnMgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgqTjg5Xjg6rjg7zjg4joqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOydtO2UhOumrO2KuCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjUsXHJcbiAgfSxcclxuICAyOTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rOw5Z2m5q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ1plbml0IGRlciBHw7Z0dGVyIC0gVGl0YW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIE5hdmVsIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMZSBOb21icmlsIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144K/44Kk44K/44Oz6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDtg4DsnbTtg4Qg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIzLFxyXG4gIH0sXHJcbiAgMjk3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i/pualvOe9l+atvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIEdhcnVkYScsXHJcbiAgICAgICdlbic6ICdUaGUgSG93bGluZyBFeWUgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0h1cmzFk2lsIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Ks44Or44O844OA6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDqsIDro6jri6Qg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI2LFxyXG4gIH0sXHJcbiAgMjk4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iuqOS8kOeIhuW8ueaAqueahOWls+eOi++8gScsXHJcbiAgICAgICdkZSc6ICdNaXNzIEJvbWJhc3RpYycsXHJcbiAgICAgICdlbic6ICdMb25nIExpdmUgdGhlIFF1ZWVuJyxcclxuICAgICAgJ2ZyJzogJ0xvbmd1ZSB2aWUgw6AgbGEgUmVpbmUnLFxyXG4gICAgICAnamEnOiAn44Oc44Og44KS546H44GE44KL44CM44Oc44Og44Kv44Kk44O844Oz44CN44KS6KiO44Gm77yBJyxcclxuICAgICAgJ2tvJzogJ+u0hOydhCDqsbDripDrprAgXFwn67SEIOyXrOyZlVxcJ+ydhCDsk7Drn6zrnKjroKTrnbwhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIxLFxyXG4gIH0sXHJcbiAgMjk5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atvOeBreeJueauiumYteWei+eahOWmluW8gu+8gScsXHJcbiAgICAgICdkZSc6ICdVbnplcnRyZW5ubGljaCcsXHJcbiAgICAgICdlbic6ICdXYXJkIFVwJyxcclxuICAgICAgJ2ZyJzogJ1F1aW50ZXR0ZXMgaW5mZXJuYXV4JyxcclxuICAgICAgJ2phJzogJ+S4jeawl+WRs+OBqumZo+W9ouOCkue1hOOCgOWmlueVsOOCkuOBm+OCk+a7heOBm+OCiO+8gScsXHJcbiAgICAgICdrbyc6ICfrtojquLjtlZwg7KeE7ZiV7J2EIOynnOuKlCDsmpTrp4jrpbwg7ISs66m47ZWY6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMixcclxuICB9LFxyXG4gIDMwMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliLbmraLkuInmlrnmt7fmiJjnmoTlt6jkurrml4/vvIzlrojkvY/pgZfnianvvIEnLFxyXG4gICAgICAnZGUnOiAnV3VjaHRpZ2UgRHJlaWZhbHRpZ2tlaXQnLFxyXG4gICAgICAnZW4nOiAnU29sZW1uIFRyaW5pdHknLFxyXG4gICAgICAnZnInOiAnVHJpbml0w6kgc2luaXN0cmUnLFxyXG4gICAgICAnamEnOiAn5LiJ44Gk5be044Gu5beo5Lq65peP44KS5Yi244GX44CB6YG654mp44KS5a6I44KM77yBJyxcclxuICAgICAgJ2tvJzogJ+yEuCDqsbDsnbjsobHsnYQg7KCc7JWV7ZWY7JesIOycoOusvOydhCDsp4DsvJzrgrTrnbwhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIyLFxyXG4gIH0sXHJcbiAgMzMyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mHjOWhlOaPkOaBqeW8uuaUu+aImCcsXHJcbiAgICAgICdkZSc6ICdLYXAgV2VzdHdpbmQnLFxyXG4gICAgICAnZW4nOiAnQ2FwZSBXZXN0d2luZCcsXHJcbiAgICAgICdmcic6ICdMZSBDYXAgVmVuZG91ZXN0JyxcclxuICAgICAgJ2phJzogJ+ODquODg+ODiOOCouODhuOCo+ODs+W8t+ilsuaIpicsXHJcbiAgICAgICdrbyc6ICfrpqztirjslYTti7Qg6rCV7Iq17KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDksXHJcbiAgfSxcclxuICAzNDg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56m25p6B56We5YW156C05Z2P5L2c5oiYJyxcclxuICAgICAgJ2RlJzogJ0hlbGRlbmxpZWQgdm9uIFVsdGltYScsXHJcbiAgICAgICdlbic6ICdUaGUgTWluc3RyZWxcXCdzIEJhbGxhZDogVWx0aW1hXFwncyBCYW5lJyxcclxuICAgICAgJ2ZyJzogJ0xlIGZsw6lhdSBkXFwnVWx0aW1hJyxcclxuICAgICAgJ2phJzogJ+eptualteW5u+aDsyDjgqLjg6vjg4bjg57jgqbjgqfjg53jg7PnoLTlo4rkvZzmiKYnLFxyXG4gICAgICAna28nOiAn7JWM7YWM66eIIOybqO2PsCDtjIzqtLTsnpHsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzEsXHJcbiAgfSxcclxuICAzNDk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6aqa5Lmx5Z2R6YGT6ZOc6ZOD6ZOc5bGxJyxcclxuICAgICAgJ2RlJzogJ0t1cGZlcmdsb2NrZW4tTWluZSAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdDb3BwZXJiZWxsIE1pbmVzIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZXMgTWluZXMgZGUgQ2xvY2hlY3VpdnJlIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+mokuS5seWdkemBkyDjgqvjg4Pjg5Hjg7zjg5njg6vpioXlsbEgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+q1rOumrOyihSDqtJHsgrAo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzUwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aBtueBteW6nOmCuOmdmeivreW6hOWbrScsXHJcbiAgICAgICdkZSc6ICdIYXVra2UtSGVycmVuaGF1cyAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdIYXVra2UgTWFub3IgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIE1hbm9pciBkZXMgSGF1a2tlIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+WmlueVsOWxi+aVtyDjg4/jgqbjgrHjgr/lvqHnlKjpgrggKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+2VmOyasOy8gO2DgCDrs4TqtoEo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzUzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a0u+WKqOaMkeaImDInLFxyXG4gICAgICAnZGUnOiAnRXZlbnQtSW5oYWx0IDEnLFxyXG4gICAgICAnZW4nOiAnU3BlY2lhbCBFdmVudCBJJyxcclxuICAgICAgJ2ZyJzogJ0TDqWZpIHNww6ljaWFsIEknLFxyXG4gICAgICAnamEnOiAn44Kk44OZ44Oz44OI55So44Kz44Oz44OG44Oz44OE77yaMScsXHJcbiAgICAgICdrbyc6ICfsnbTrsqTtirjsmqkg7J6E66y0OiAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rS75Yqo5oyR5oiYMycsXHJcbiAgICAgICdkZSc6ICdFdmVudC1JbmhhbHQgMicsXHJcbiAgICAgICdlbic6ICdTcGVjaWFsIEV2ZW50IElJJyxcclxuICAgICAgJ2ZyJzogJ0TDqWZpIHNww6ljaWFsIElJJyxcclxuICAgICAgJ2phJzogJ+OCpOODmeODs+ODiOeUqOOCs+ODs+ODhuODs+ODhO+8mjInLFxyXG4gICAgICAna28nOiAn7J2067Kk7Yq47JqpIOyehOustDogMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDMsXHJcbiAgfSxcclxuICAzNTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOWFpeS+teS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAyIC0gMScsXHJcbiAgICAgICdlbic6ICdUaGUgU2Vjb25kIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gMScsXHJcbiAgICAgICdmcic6ICdMZXMgTcOpYW5kcmVzIGRlIEJhaGFtdXQgSScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jvvJrkvrXmlLvnt6gxJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IOy5qOqzte2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOWFpeS+teS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAyIC0gMicsXHJcbiAgICAgICdlbic6ICdUaGUgU2Vjb25kIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gMicsXHJcbiAgICAgICdmcic6ICdMZXMgTcOpYW5kcmVzIGRlIEJhaGFtdXQgSUknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya5L615pS757eoMicsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsuajqs7XtjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDM1Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7Tlk4jlp4bnibnlpKfov7flrqsg5YWl5L615LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdWZXJzY2hsdW5nZW5lIFNjaGF0dGVuIDIgLSAzJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTZWNvbmQgQ29pbCBvZiBCYWhhbXV0IC0gVHVybiAzJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBNw6lhbmRyZXMgZGUgQmFoYW11dCBJSUknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya5L615pS757eoMycsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsuajqs7XtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzU4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDlhaXkvrXkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMiAtIDQnLFxyXG4gICAgICAnZW4nOiAnVGhlIFNlY29uZCBDb2lsIG9mIEJhaGFtdXQgLSBUdXJuIDQnLFxyXG4gICAgICAnZnInOiAnTGVzIE3DqWFuZHJlcyBkZSBCYWhhbXV0IElWJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiO+8muS+teaUu+e3qDQnLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7Lmo6rO17Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM1OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliKnnu7TkuprmoZHmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBMZXZpYXRoYW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIDxFbXBoYXNpcz5XaG9ybGVhdGVyPC9FbXBoYXNpcz4gKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xlIEJyaXNldXIgZGUgbWFyw6llcyAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteODquODtOOCoeOCpOOCouOCteODs+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg66as67CU7J207Ja07ISgIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzOCxcclxuICB9LFxyXG4gIDM2MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliZHmlpfpoobln5/ml6XlvbHlnLDkv67ngrzmiYAnLFxyXG4gICAgICAnZGUnOiAnSGFsYXRhbGkgKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnSGFsYXRhbGkgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0hhbGF0YWxpIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+WJo+mXmOmgmOWfnyDjg4/jg6njgr/jg6rkv67nt7TmiYAgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+2VoOudvO2DiOumrCDsiJjroKjsnqUo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzYxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i0ouWuneS8oOivtOegtOiIsOWymycsXHJcbiAgICAgICdkZSc6ICdTY2hpZmZicmVjaGVyLUluc2VsJyxcclxuICAgICAgJ2VuJzogJ0h1bGxicmVha2VyIElzbGUnLFxyXG4gICAgICAnZnInOiAnTFxcJ8OObGUgZGUgQ3LDqHZlY2Fyw6huZScsXHJcbiAgICAgICdqYSc6ICfosqHlrp3kvJ3oqqwg44OP44Or44OW44Os44O844Kr44O844O744Ki44Kk44OrJyxcclxuICAgICAgJ2tvJzogJ+uCnO2MjOyEoOydmCDshKwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM2Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnurfkuonopoHlnLDluIPpm7fnpo/mtJvlhYvmlq/ph47okKXlnLAnLFxyXG4gICAgICAnZGUnOiAnQnLDvGxsdm9seFxcJyBMYW5ncmFzdCAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdCcmF5ZmxveFxcJ3MgTG9uZ3N0b3AgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIEJpdm91YWMgZGUgQnJheWZsb3ggKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55uf5Y+L5pSv5o+0IOODluODrOOCpOODleODreOCr+OCueOBrumHjuWWtuWcsCAoSGFyZCknLFxyXG4gICAgICAna28nOiAn67iM66CI7J207ZSM66Gd7Iqk7J2YIOyVvOyYgeyngCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDM3LFxyXG4gIH0sXHJcbiAgMzYzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iFkOWdj+mBl+i/ueaXoOmZkOWfjuW4guihl+WPpOi/uScsXHJcbiAgICAgICdkZSc6ICdIaXN0b3Jpc2NoZXMgQW1kYXBvcicsXHJcbiAgICAgICdlbic6ICdUaGUgTG9zdCBDaXR5IG9mIEFtZGFwb3InLFxyXG4gICAgICAnZnInOiAnTGVzIFZlc3RpZ2VzIGRlIGxhIGNpdMOpIGRcXCdBbWRhcG9yJyxcclxuICAgICAgJ2phJzogJ+iFkOaVl+mBuui3oSDlj6TjgqLjg6Djg4Djg5fjg7zjg6vluILooZcnLFxyXG4gICAgICAna28nOiAn7JibIOyVlOuLpO2PrOultCDsi5zqsIDsp4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDAsXHJcbiAgfSxcclxuICAzNjQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6I6r5Y+k5Yqb6LSk546L5q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ0vDtm5pZ2xpY2hlIEtvbmZyb250YXRpb24gKGV4dHJlbSknLFxyXG4gICAgICAnZW4nOiAnVGhvcm5tYXJjaCAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGEgTGlzacOocmUgZGUgcm9uY2VzIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW1546L44Oi44Kw44Or44O744Oi44KwWElJ5LiW6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3ueyZlSDrqqjqt7jro6gg66qo6re4IFhJSeyEuCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzAsXHJcbiAgfSxcclxuICAzNjU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5r+A5oiY5Z+O5aGe55+z5Y2r5aGUJyxcclxuICAgICAgJ2RlJzogJ1N0ZWluZXJuZSBXYWNodCAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaGUgU3RvbmUgVmlnaWwgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIFZpZ2lsZSBkZSBQaWVycmUgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn5Z+O5aGe5aWq5ZueIOOCueODiOODvOODs+ODtOOCo+OCuOODqyAoSGFyZCknLFxyXG4gICAgICAna28nOiAn64+M67Cp7YyoIOqyveqzhOy0iOyGjCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQyLFxyXG4gIH0sXHJcbiAgMzY2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+Wkp+ahpeS4iueahOWGs+aWlycsXHJcbiAgICAgICdkZSc6ICdEdWVsbCBhdWYgZGVyIGdyb8OfZW4gQnLDvGNrZScsXHJcbiAgICAgICdlbic6ICdCYXR0bGUgb24gdGhlIEJpZyBCcmlkZ2UnLFxyXG4gICAgICAnZnInOiAnQWZmcm9udGVtZW50IHN1ciBsZSBncmFuZCBwb250JyxcclxuICAgICAgJ2phJzogJ+OCruODq+OCrOODoeODg+OCt+ODpeiojuS8kOaIpicsXHJcbiAgICAgICdrbyc6ICfquLjqsIDrqZTsi5wg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNjc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6IuP6YaS6YGX6L+55ZaA5oGp5Z+L5rKh5Zyj5aCCJyxcclxuICAgICAgJ2RlJzogJ1ZlcnN1bmtlbmVyIFRlbXBlbCB2b24gUWFybiAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaGUgU3Vua2VuIFRlbXBsZSBvZiBRYXJuIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZSBUZW1wbGUgZW5zZXZlbGkgZGUgUWFybiAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfpgbrot6HmlZHmj7Qg44Kr44Or44Oz5Z+L5rKh5a+66ZmiIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfsubTrpbjsnZgg66y064SI7KeEIOyCrOybkCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQxLFxyXG4gIH0sXHJcbiAgMzY4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+WMluWlh+e+juaLieiuqOS8kOaImCcsXHJcbiAgICAgICdkZSc6ICdLYW1wZiBnZWdlbiBkaWUgRGhvcm1lLUNoaW3DpHJhJyxcclxuICAgICAgJ2VuJzogJ0EgUmVsaWMgUmVib3JuOiB0aGUgQ2hpbWVyYScsXHJcbiAgICAgICdmcic6ICdMYSBjaGltw6hyZSBkaG9ybWUgZHUgQ29lcnRoYXMnLFxyXG4gICAgICAnamEnOiAn44OJ44Or44Og44Kt44Oe44Kk44Op6KiO5LyQ5oimJyxcclxuICAgICAgJ2tvJzogJ+uPhOumhCDtgqTrp4jsnbTrnbwg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIxLFxyXG4gIH0sXHJcbiAgMzY5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a1t+W+t+aLieiuqOS8kOaImCcsXHJcbiAgICAgICdkZSc6ICdLYW1wZiBnZWdlbiBkaWUgSHlkcmEnLFxyXG4gICAgICAnZW4nOiAnQSBSZWxpYyBSZWJvcm46IHRoZSBIeWRyYScsXHJcbiAgICAgICdmcic6ICdMXFwnaHlkcmUgZFxcJ0hhbGF0YWxpJyxcclxuICAgICAgJ2phJzogJ+ODj+OCpOODieODqeiojuS8kOaIpicsXHJcbiAgICAgICdrbyc6ICftlZjsnbTrk5zrnbwg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNzE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Yeb5Ya95rSe5aSp5oqr6Zuq5aSn5Yaw5aOBJyxcclxuICAgICAgJ2RlJzogJ0RhcyBTY2huZWVrbGVpZCcsXHJcbiAgICAgICdlbic6ICdTbm93Y2xvYWsnLFxyXG4gICAgICAnZnInOiAnTWFudGVuZWlnZScsXHJcbiAgICAgICdqYSc6ICfmsLfntZDmvZznqp8g44K544OO44O844Kv44Ot44O844Kv5aSn5rC35aOBJyxcclxuICAgICAgJ2tvJzogJ+yWvOydjOyZuO2IrCDrjIDruZnrsr0nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDIsXHJcbiAgfSxcclxuICAzNzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rC05pm25aGUIOW4jOWwlOenkeaWr+WhlCcsXHJcbiAgICAgICdkZSc6ICdLcmlzdGFsbHR1cm0gLSBEZXIgU3lyY3VzLVR1cm0nLFxyXG4gICAgICAnZW4nOiAnU3lyY3VzIFRvd2VyJyxcclxuICAgICAgJ2ZyJzogJ0xhIFRvdXIgZGUgQ3Jpc3RhbCAtIFRvdXIgZGUgU3lyY3VzJyxcclxuICAgICAgJ2phJzogJ+OCr+ODquOCueOCv+ODq+OCv+ODr+ODvO+8muOCt+ODq+OCr+OCueOBruWhlCcsXHJcbiAgICAgICdrbyc6ICftgazrpqzsiqTtg4gg7YOA7JuMOiDsi5zrpbTsv6DsiqQg7YORJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNzM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5oOo5Ymn54G15q6/5aGU5aeGwrfloZTmi4nlopPlm60nLFxyXG4gICAgICAnZGUnOiAnVG90ZW5hY2tlciBUYW0tVGFyYSAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaGUgVGFt4oCTVGFyYSBEZWVwY3JvZnQgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdIeXBvZ8OpZSBkZSBUYW0tVGFyYSAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfmg6jliofpnIrmrr8g44K/44Og44K/44Op44Gu5aKT5omAIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICftg5Dtg4Drnbwg66yY7IaMKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMzAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM3NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmi4nlp4bmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBSYW11aCcsXHJcbiAgICAgICdlbic6ICdUaGUgU3RyaWtpbmcgVHJlZSAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTFxcJ0FyYnJlIGR1IGp1Z2VtZW50IChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+ecn+ODqeODoOOCpuiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsp4Qg652866y0IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0MyxcclxuICB9LFxyXG4gIDM3NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmi4nlp4bmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBSYW11aCcsXHJcbiAgICAgICdlbic6ICdUaGUgU3RyaWtpbmcgVHJlZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTFxcJ0FyYnJlIGR1IGp1Z2VtZW50IChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Op44Og44Km6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrnbzrrLQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQzLFxyXG4gIH0sXHJcbiAgMzc2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WRqOi+uemBl+i/uee+pCAo6Zi15Zyw5oiYKScsXHJcbiAgICAgICdkZSc6ICfDhHXDn2VyZSBSdWluZW4gKFNpY2hlcnVuZyknLFxyXG4gICAgICAnZW4nOiAnVGhlIEJvcmRlcmxhbmQgUnVpbnMgKFNlY3VyZSknLFxyXG4gICAgICAnZnInOiAnTGVzIFJ1aW5lcyBmcm9udGFsacOocmVzIChhbm5leGlvbiknLFxyXG4gICAgICAnamEnOiAn5aSW57iB6YG66Leh576kICjliLblnKfmiKYpJyxcclxuICAgICAgJ2tvJzogJ+yZuOqzvSDsnKDsoIHsp4DrjIAo7KCc7JWV7KCEKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzc3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W4jOeTpuatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdHw7Z0dGVyZMOkbW1lcnVuZyAtIFNoaXZhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBa2ggQWZhaCBBbXBoaXRoZWF0cmUgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBbXBoaXRow6nDonRyZSBkXFwnQWtoIEFmYWggKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55yf44K344O044Kh6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ynhCDsi5zrsJQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQ2LFxyXG4gIH0sXHJcbiAgMzc4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W4jOeTpuatvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIFNoaXZhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBa2ggQWZhaCBBbXBoaXRoZWF0cmUgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBbXBoaXRow6nDonRyZSBkXFwnQWtoIEFmYWggKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgrfjg7TjgqHoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOyLnOuwlCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDYsXHJcbiAgfSxcclxuICAzODA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m56Zu25byP5aSn6L+35a6rIOWFpeS+teS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAyIC0gMSAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdUaGUgU2Vjb25kIENvaWwgb2YgQmFoYW11dCAoU2F2YWdlKSAtIFR1cm4gMScsXHJcbiAgICAgICdmcic6ICdMZXMgTcOpYW5kcmVzIGRlIEJhaGFtdXQgSSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI6Zu25byP77ya5L615pS757eoMScsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsuajqs7Xtjrgo7JiB7JuFKSAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzODE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m56Zu25byP5aSn6L+35a6rIOWFpeS+teS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAyIC0gMiAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdUaGUgU2Vjb25kIENvaWwgb2YgQmFoYW11dCAoU2F2YWdlKSAtIFR1cm4gMicsXHJcbiAgICAgICdmcic6ICdMZXMgTcOpYW5kcmVzIGRlIEJhaGFtdXQgSUkgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiOmbtuW8j++8muS+teaUu+e3qDInLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7Lmo6rO17Y64KOyYgeybhSkgMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDM4Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7Tlk4jlp4bnibnpm7blvI/lpKfov7flrqsg5YWl5L615LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdWZXJzY2hsdW5nZW5lIFNjaGF0dGVuIDIgLSAzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTZWNvbmQgQ29pbCBvZiBCYWhhbXV0IChTYXZhZ2UpIC0gVHVybiAzJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBNw6lhbmRyZXMgZGUgQmFoYW11dCBJSUkgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiOmbtuW8j++8muS+teaUu+e3qDMnLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7Lmo6rO17Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzgzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJuembtuW8j+Wkp+i/t+WuqyDlhaXkvrXkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMiAtIDQgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFNlY29uZCBDb2lsIG9mIEJhaGFtdXQgKFNhdmFnZSkgLSBUdXJuIDQnLFxyXG4gICAgICAnZnInOiAnTGVzIE3DqWFuZHJlcyBkZSBCYWhhbXV0IElWIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jpm7blvI/vvJrkvrXmlLvnt6g0JyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IOy5qOqzte2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM4Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpgIbovazopoHlrrPmspnmlq/loZTlpI/murbmtJ4nLFxyXG4gICAgICAnZGUnOiAnU2FzdGFzaGEgKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnU2FzdGFzaGEgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ1Nhc3Rhc2hhIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+mAhuilsuimgeWusyDjgrXjgrnjgr/jgrfjg6Pmtbjpo5/mtJ4gKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+yCrOyKpO2DgOyDpCDsuajsi50g64+Z6rW0KOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM4OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6ZmG6KGM6bif56ue6LWb77ya5aSq6Ziz5rW35bK4JyxcclxuICAgICAgJ2RlJzogJ0Nob2NvYm8tUmVubmVuOiBTb25uZW5rw7xzdGUnLFxyXG4gICAgICAnZW4nOiAnQ2hvY29ibyBSYWNlOiBDb3N0YSBkZWwgU29sJyxcclxuICAgICAgJ2ZyJzogJ0NvdXJzZSBkZSBjaG9jb2JvczxJbmRlbnQvPjogQ29zdGEgZGVsIFNvbCcsXHJcbiAgICAgICdqYSc6ICfjg4Hjg6fjgrPjg5zjg6zjg7zjgrnvvJrjgrPjgrnjgr/jg7vjg4fjg6vjg7vjgr3jg6snLFxyXG4gICAgICAna28nOiAn7LSI7L2U67O0IOqyveyjvDog7L2U7Iqk7YOAIOuNuCDshpQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTQ3MixcclxuICAgICdvZmZzZXRZJzogLTQyNCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM5MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6ZmG6KGM6bif56ue6LWb77ya6I2S6YeO5aSn6YGTJyxcclxuICAgICAgJ2RlJzogJ0Nob2NvYm8tUmVubmVuOiBTYWdvbGlpLVN0cmHDn2UnLFxyXG4gICAgICAnZW4nOiAnQ2hvY29ibyBSYWNlOiBTYWdvbGlpIFJvYWQnLFxyXG4gICAgICAnZnInOiAnQ291cnNlIGRlIGNob2NvYm9zPEluZGVudC8+OiBSb3V0ZSBkZSBTYWdvbGlpJyxcclxuICAgICAgJ2phJzogJ+ODgeODp+OCs+ODnOODrOODvOOCue+8muOCteOCtOODquODvOODreODvOODiScsXHJcbiAgICAgICdrbyc6ICfstIjsvZTrs7Qg6rK97KO8OiDsgqzqs6jrpqwg7IKs66eJJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzOTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mZhuihjOm4n+ernui1m++8muaBrOmdmeWwj+i3rycsXHJcbiAgICAgICdkZSc6ICdDaG9jb2JvLVJlbm5lbjogUGZhZCBkZXIgU2VlbGVucnVoZScsXHJcbiAgICAgICdlbic6ICdDaG9jb2JvIFJhY2U6IFRyYW5xdWlsIFBhdGhzJyxcclxuICAgICAgJ2ZyJzogJ0NvdXJzZSBkZSBjaG9jb2JvczxJbmRlbnQvPjogU2VudGVzIHRyYW5xdWlsbGVzJyxcclxuICAgICAgJ2phJzogJ+ODgeODp+OCs+ODnOODrOODvOOCue+8muODiOODqeODs+OCreODq+ODkeOCuScsXHJcbiAgICAgICdrbyc6ICfstIjsvZTrs7Qg6rK97KO8OiDqs6DsmpTtlZwg7JW87JiB7KeAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzOTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aWl5LiB5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0plbnNlaXRzIFVydGhzIFF1ZWxsZScsXHJcbiAgICAgICdlbic6ICdVcnRoXFwncyBGb3VudCcsXHJcbiAgICAgICdmcic6ICdMYSBGb250YWluZSBkXFwnVXJ0aCcsXHJcbiAgICAgICdqYSc6ICfpl5jnpZ7jgqrjg7zjg4fjgqPjg7PoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7Yis7IugIOyYpOuUmCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDUsXHJcbiAgfSxcclxuICAzOTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5peg6ZmQ5Z+O55qE5q275paXJyxcclxuICAgICAgJ2RlJzogJ1JldmFuY2hlIGluIGRlbiBSdWluZW4nLFxyXG4gICAgICAnZW4nOiAnQmF0dGxlIGluIHRoZSBCaWcgS2VlcCcsXHJcbiAgICAgICdmcic6ICdSZXZhbmNoZSBhdSB2aWV1eCBjaMOidGVhdScsXHJcbiAgICAgICdqYSc6ICfnnJ/jgq7jg6vjgqzjg6Hjg4Pjgrfjg6XoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KeEIOq4uOqwgOuplOyLnCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjgsXHJcbiAgfSxcclxuICAzOTc6IHtcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflupPlsJTmnK3mlq/opb/pg6jpq5jlnLAnLFxyXG4gICAgICAnZGUnOiAnV2VzdGxpY2hlcyBIb2NobGFuZCB2b24gQ29lcnRoYXMnLFxyXG4gICAgICAnZW4nOiAnQ29lcnRoYXMgV2VzdGVybiBIaWdobGFuZHMnLFxyXG4gICAgICAnZnInOiAnSGF1dGVzIHRlcnJlcyBkdSBDb2VydGhhcyBvY2NpZGVudGFsJyxcclxuICAgICAgJ2phJzogJ+OCr+ODq+OCtuOCueilv+mDqOmrmOWcsCcsXHJcbiAgICAgICdrbyc6ICfsu6TrpbTri6TsiqQg7ISc67aA6rOg7KeAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDk1LFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDksXHJcbiAgfSxcclxuICAzOTg6IHtcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpvpnloKHlj4LlpKnpq5jlnLAnLFxyXG4gICAgICAnZGUnOiAnRHJhdmFuaXNjaGVzIFZvcmxhbmQnLFxyXG4gICAgICAnZW4nOiAnVGhlIERyYXZhbmlhbiBGb3JlbGFuZHMnLFxyXG4gICAgICAnZnInOiAnQXZhbnQtcGF5cyBkcmF2YW5pZW4nLFxyXG4gICAgICAnamEnOiAn6auY5Zyw44OJ44Op44O044Kh44OL44KiJyxcclxuICAgICAgJ2tvJzogJ+qzoOyngCDrk5zrnbzrsJTri4jslYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogOTUsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1MCxcclxuICB9LFxyXG4gIDM5OToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+m+meWgoeWGhemZhuS9juWcsCcsXHJcbiAgICAgICdkZSc6ICdEcmF2YW5pc2NoZXMgSGludGVybGFuZCcsXHJcbiAgICAgICdlbic6ICdUaGUgRHJhdmFuaWFuIEhpbnRlcmxhbmRzJyxcclxuICAgICAgJ2ZyJzogJ0FycmnDqHJlLXBheXMgZHJhdmFuaWVuJyxcclxuICAgICAgJ2phJzogJ+S9juWcsOODieODqeODtOOCoeODi+OCoicsXHJcbiAgICAgICdrbyc6ICfsoIDsp4Ag65Oc652867CU64uI7JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDk1LFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTEsXHJcbiAgfSxcclxuICA0MDA6IHtcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnv7vkupHpm77mtbcnLFxyXG4gICAgICAnZGUnOiAnV2FsbGVuZGUgTmViZWwnLFxyXG4gICAgICAnZW4nOiAnVGhlIENodXJuaW5nIE1pc3RzJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiWN1bWUgZGVzIGNpZXV4IGRlIERyYXZhbmlhJyxcclxuICAgICAgJ2phJzogJ+ODieODqeODtOOCoeODi+OCoumbsua1tycsXHJcbiAgICAgICdrbyc6ICfrk5zrnbzrsJTri4jslYQg6rWs66aE67CU64ukJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDk1LFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTIsXHJcbiAgfSxcclxuICA0MDE6IHtcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpmL/lt7Tmi4nmj5DkuprkupHmtbcnLFxyXG4gICAgICAnZGUnOiAnQWJhbGF0aGlzY2hlcyBXb2xrZW5tZWVyJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTZWEgb2YgQ2xvdWRzJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiWN1bWUgZGVzIGNpZXV4IGRcXCdBYmFsYXRoaWEnLFxyXG4gICAgICAnamEnOiAn44Ki44OQ44Op44K344Ki6Zuy5rW3JyxcclxuICAgICAgJ2tvJzogJ+yVhOuwnOudvOyLnOyVhCDqtazrpoTrsJTri6QnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogOTUsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1MyxcclxuICB9LFxyXG4gIDQwMjoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mtlOWkp+mZhumYv+a1juWFueaLiScsXHJcbiAgICAgICdkZSc6ICdBenlzIExsYScsXHJcbiAgICAgICdlbic6ICdBenlzIExsYScsXHJcbiAgICAgICdmcic6ICdBenlzIExsYScsXHJcbiAgICAgICdqYSc6ICfjgqLjgrjjgrnjg7vjg6njg7wnLFxyXG4gICAgICAna28nOiAn7JWE7KeA7IqkIOudvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA5NSxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDU0LFxyXG4gIH0sXHJcbiAgNDAzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iLsembhOW9kuadpScsXHJcbiAgICAgICdkZSc6ICdWZXJyYXQgZGVyIFFhbHlhbmEnLFxyXG4gICAgICAnZW4nOiAnUmV0dXJuIG9mIHRoZSBCdWxsJyxcclxuICAgICAgJ2ZyJzogJ1JldG91ciBhdSBiZXJjYWlsJyxcclxuICAgICAgJ2phJzogJ+iLsembhOOBruW4sOmChCcsXHJcbiAgICAgICdrbyc6ICfsmIHsm4XsnZgg6reA7ZmYJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0yNTAsXHJcbiAgICAnb2Zmc2V0WSc6IDEyOCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQxNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflrabor4blrp3lupPov6blt7Tli5Llubvmg7Plm77kuabppoYnLFxyXG4gICAgICAnZGUnOiAnR3Jvw59lIEd1YmFsLUJpYmxpb3RoZWsnLFxyXG4gICAgICAnZW4nOiAnVGhlIEdyZWF0IEd1YmFsIExpYnJhcnknLFxyXG4gICAgICAnZnInOiAnTGEgR3JhbmRlIGJpYmxpb3Row6hxdWUgZGUgR3ViYWwnLFxyXG4gICAgICAnamEnOiAn56aB5pu45Zue5Y+OIOOCsOODluODqeW5u+aDs+Wbs+abuOmkqCcsXHJcbiAgICAgICdrbyc6ICfqtazruIzrnbwg7ZmY7IOB64+E7ISc6rSAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA0MTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mZhuihjOm4n+ernui1m++8muernui1m+aVmeWtpicsXHJcbiAgICAgICdkZSc6ICdDaG9jb2JvLVJlbm5lbjogw5xidW5nc2JhaG4nLFxyXG4gICAgICAnZW4nOiAnQ2hvY29ibyBSYWNlOiBUdXRvcmlhbCcsXHJcbiAgICAgICdmcic6ICdDb3Vyc2UgZFxcJ2FwcGVudGlzc2FnZScsXHJcbiAgICAgICdqYSc6ICfjg4Hjg6fjgrPjg5zjg6zjg7zjgrnvvJrjg4Hjg6Xjg7zjg4jjg6rjgqLjg6snLFxyXG4gICAgICAna28nOiAn7LSI7L2U67O0IOqyveyjvDog7Yqc7Yag66as7Ja8JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IC02OTAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA0MTg6IHtcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrkv67liqDlvrfln7rnoYDlsYInLFxyXG4gICAgICAnZGUnOiAnRnVuZGFtZW50ZScsXHJcbiAgICAgICdlbic6ICdGb3VuZGF0aW9uJyxcclxuICAgICAgJ2ZyJzogJ0lzaGdhcmQgLSBMXFwnQXNzaXNlJyxcclxuICAgICAgJ2phJzogJ+OCpOOCt+ODpeOCrOODq+ODie+8muS4i+WxpCcsXHJcbiAgICAgICdrbyc6ICfsnbTsiojqsIDrpbTrk5wg7ZWY7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQ3LFxyXG4gIH0sXHJcbiAgNDE5OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK5L+u5Yqg5b6356Cl5p+x5bGCJyxcclxuICAgICAgJ2RlJzogJ1N0cmViZXdlcmsnLFxyXG4gICAgICAnZW4nOiAnVGhlIFBpbGxhcnMnLFxyXG4gICAgICAnZnInOiAnSXNoZ2FyZCAtIExlcyBDb250cmVmb3J0cycsXHJcbiAgICAgICdqYSc6ICfjgqTjgrfjg6Xjgqzjg6vjg4nvvJrkuIrlsaQnLFxyXG4gICAgICAna28nOiAn7J207IqI6rCA66W065OcIOyDgey4tScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0OCxcclxuICB9LFxyXG4gIDQyMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnqbrkuK3npZ7ln5/kuI3ojrflspsnLFxyXG4gICAgICAnZGUnOiAnTmltbWVycmVpY2gnLFxyXG4gICAgICAnZW4nOiAnTmV2ZXJyZWFwJyxcclxuICAgICAgJ2ZyJzogJ05hbGxvbmNxdWVzJyxcclxuICAgICAgJ2phJzogJ+elnuWfn+a1ruWztiDjg43jg5Djg7zjg6rjg7zjg5cnLFxyXG4gICAgICAna28nOiAn6rGw65GQ7KeAIOyViuuKlCDshKwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQyMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflnKPmlZnkuK3mnqLkvIrkv67liqDlvrfmlZnnmofljoUnLFxyXG4gICAgICAnZGUnOiAnRXJ6YmFzaWxpa2EnLFxyXG4gICAgICAnZW4nOiAnVGhlIFZhdWx0JyxcclxuICAgICAgJ2ZyJzogJ0xhIFZvw7t0ZScsXHJcbiAgICAgICdqYSc6ICflvLfnoaznqoHlhaUg44Kk44K344Ol44Ks44Or44OJ5pWZ55qH5bqBJyxcclxuICAgICAgJ2tvJzogJ+ydtOyKiOqwgOultOuTnCDqtZDtmanssq0nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQyNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpgqPluIPph4zkuprli5Lmlq/orqjkvJDmiJgnLFxyXG4gICAgICAnZGUnOiAnQ2hyeXNhbGlzJyxcclxuICAgICAgJ2VuJzogJ1RoZSBDaHJ5c2FsaXMnLFxyXG4gICAgICAnZnInOiAnTGEgQ2hyeXNhbGlkZScsXHJcbiAgICAgICdqYSc6ICfjgqLjgrfjgqjjg7Pjg7vjg4rjg5fjg6rjgqLjg6zjgrnoqI7kvJDmiKYnLFxyXG4gICAgICAna28nOiAn7JWE7JSo7JeUIOuCmOu4jOumrOyVjOugiOyKpCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQzMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfljZrnianmiJjoiLDml6DpmZDlm57lu4onLFxyXG4gICAgICAnZGUnOiAnRGllIEZyYWt0YWwtS29udGludXVtJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGcmFjdGFsIENvbnRpbnV1bScsXHJcbiAgICAgICdmcic6ICdMZSBDb250aW51dW0gZnJhY3RhbCcsXHJcbiAgICAgICdqYSc6ICfljZrnianmiKboiaYg44OV44Op44Kv44K/44Or44O744Kz44Oz44OG44Kj44OL44Ki44OgJyxcclxuICAgICAgJ2tvJzogJ+ustO2VnOyXsOyGjSDrsJXrrLztlagnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTIxMyxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQzMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflsJjlsIHnp5jlsqkgKOS6ieWkuuaImCknLFxyXG4gICAgICAnZGUnOiAnUm9iYmVuaG9sbSAoRXJvYmVydW5nKScsXHJcbiAgICAgICdlbic6ICdTZWFsIFJvY2sgKFNlaXplKScsXHJcbiAgICAgICdmcic6ICdMZSBSb2NoZXIgZGVzIHRyw6lmb25kcyAoaW52YXNpb24pJyxcclxuICAgICAgJ2phJzogJ+OCt+ODvOODq+ODreODg+OCryAo5LqJ5aWq5oimKScsXHJcbiAgICAgICdrbyc6ICfrtInsnbjrkJwg67CU7JyE7ISsKOyfge2DiOyghCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTksXHJcbiAgfSxcclxuICA0MzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn572X5rOi6YKj5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gUmF2YW5hJyxcclxuICAgICAgJ2VuJzogJ1Rob2sgYXN0IFRob2sgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ1Rob2sgYXN0IFRob2sgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55yf44Op44O844O044Kh44OK6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ynhCDrnbzrsJTrgpgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDU3LFxyXG4gIH0sXHJcbiAgNDM0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WGsOmbquW6n+WgoeaaruWNq+WhlCcsXHJcbiAgICAgICdkZSc6ICdBYmVuZHJvdC1XYWNodCcsXHJcbiAgICAgICdlbic6ICdUaGUgRHVzayBWaWdpbCcsXHJcbiAgICAgICdmcic6ICdMZSBWaWdpbGUgZHUgQ3LDqXB1c2N1bGUnLFxyXG4gICAgICAnamEnOiAn5buD56Cm5o2c57SiIOODgOOCueOCr+ODtOOCo+OCuOODqycsXHJcbiAgICAgICdrbyc6ICfslrTsiqTrpoQg7JqU7IOIJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQyLFxyXG4gIH0sXHJcbiAgNDM1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mCqum+meeOi+W6p+m+meW3ouelnuauvycsXHJcbiAgICAgICdkZSc6ICdOZXN0IGRlcyBEcmFjaGVuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBZXJ5JyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBaXJlJyxcclxuICAgICAgJ2phJzogJ+mCquernOihgOaIpiDjg4njg6njgrTjg7PjgrrjgqjjgqLjg6rjg7wnLFxyXG4gICAgICAna28nOiAn7Jqp7J2YIOuRpeyngCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtNDAsXHJcbiAgICAnb2Zmc2V0WSc6IDU1LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDQzNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkv77mlq/puqbmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBCaXNtYXJjaycsXHJcbiAgICAgICdlbic6ICdUaGUgTGltaXRsZXNzIEJsdWUgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdJbW1lbnNpdMOpIGJsZXVlIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+ecn+ODk+OCueODnuODq+OCr+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsp4Qg67mE7Iqk66eI66W07YGsIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDQzNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflnIbmoYzpqpHlo6vmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnU2luZ3VsYXJpdMOkdHMtUmVha3RvcicsXHJcbiAgICAgICdlbic6ICdUaGUgU2luZ3VsYXJpdHkgUmVhY3RvcicsXHJcbiAgICAgICdmcic6ICdMZSBSw6lhY3RldXIgZGUgc2luZ3VsYXJpdMOpJyxcclxuICAgICAgJ2phJzogJ+ODiuOCpOODhOODu+OCquODluODu+ODqeOCpuODs+ODieiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfrgpjsnbTsuKAg7Jik67iMIOudvOyatOuTnCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTYsXHJcbiAgfSxcclxuICA0Mzg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6KGA5oiY6IuN56m56a2U56eR5a2m56CU56m25omAJyxcclxuICAgICAgJ2RlJzogJ8OEdGhlcm9jaGVtaXNjaGVzIEZvcjxTb2Z0SHlwaGVuLz5zY2h1bmdzPFNvZnRIeXBoZW4vPmxhYm9yJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBZXRoZXJvY2hlbWljYWwgUmVzZWFyY2ggRmFjaWxpdHknLFxyXG4gICAgICAnZnInOiAnTGUgTGFib3JhdG9pcmUgZGUgbWFnaXNtb2xvZ2llJyxcclxuICAgICAgJ2phJzogJ+iSvOWkqeiBluaIpiDprZTnp5HlrabnoJTnqbbmiYAnLFxyXG4gICAgICAna28nOiAn66eI6rO87ZWZIOyXsOq1rOyGjCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTgsXHJcbiAgICAnb2Zmc2V0WSc6IDE0OSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ0MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnlsbHnu53pobbntKLlp4bpmL/lsJTngbXls7AnLFxyXG4gICAgICAnZGUnOiAnU29obSBBbCcsXHJcbiAgICAgICdlbic6ICdTb2htIEFsJyxcclxuICAgICAgJ2ZyJzogJ1NvaG0gQWwnLFxyXG4gICAgICAnamEnOiAn6ZyK5bOw6LiP56C0IOOCveODvOODoOODu+OCouODqycsXHJcbiAgICAgICdrbyc6ICfshpwg7JWMJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDE4NSxcclxuICAgICdvZmZzZXRZJzogNTEsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA0NDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn5py656We5Z+OIOWQr+WKqOS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gRmF1c3QgZGVzIFZhdGVycycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgRmlzdCBvZiB0aGUgRmF0aGVyJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIFBvaW5nIGR1IFDDqHJlJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8mui1t+WLlee3qDEnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog6riw64+Z7Y64IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ0Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5ZCv5Yqo5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBFbGxlIGRlcyBWYXRlcnMnLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEN1ZmYgb2YgdGhlIEZhdGhlcicsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBQb2lnbmV0IGR1IFDDqHJlJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8mui1t+WLlee3qDInLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog6riw64+Z7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ0NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5ZCv5Yqo5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBBcm0gZGVzIFZhdGVycycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQXJtIG9mIHRoZSBGYXRoZXInLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgQnJhcyBkdSBQw6hyZScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zvvJrotbfli5Xnt6gzJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOq4sOuPme2OuCAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA0NDU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn5py656We5Z+OIOWQr+WKqOS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gTGFzdCBkZXMgVmF0ZXJzJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBCdXJkZW4gb2YgdGhlIEZhdGhlcicsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBGYXJkZWF1IGR1IFDDqHJlJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8mui1t+WLlee3qDQnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog6riw64+Z7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ0Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnvZfms6LpgqPmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBSYXZhbmEnLFxyXG4gICAgICAnZW4nOiAnVGhvayBhc3QgVGhvayAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnVGhvayBhc3QgVGhvayAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteODqeODvOODtOOCoeODiuiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg652867CU64KYIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1NyxcclxuICB9LFxyXG4gIDQ0Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkv77mlq/puqbmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBCaXNtYXJjaycsXHJcbiAgICAgICdlbic6ICdUaGUgTGltaXRsZXNzIEJsdWUgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdJbW1lbnNpdMOpIGJsZXVlIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144OT44K544Oe44Or44Kv6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDruYTsiqTrp4jrpbTtgawg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNDQ4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WchuahjOmqkeWjq+W5u+aDs+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdIZWxkZW5saWVkIHZvbiBUaG9yZGFucyBGYWxsJyxcclxuICAgICAgJ2VuJzogJ1RoZSBNaW5zdHJlbFxcJ3MgQmFsbGFkOiBUaG9yZGFuXFwncyBSZWlnbicsXHJcbiAgICAgICdmcic6ICdMZSByw6hnbmUgZGUgVGhvcmRhbicsXHJcbiAgICAgICdqYSc6ICfokrzlpKnlubvmg7Mg44OK44Kk44OE44O744Kq44OW44O744Op44Km44Oz44OJ6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrgpjsnbTsuKAg7Jik67iMIOudvOyatOuTnCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTYsXHJcbiAgfSxcclxuICA0NDk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn6Zu25byP5py656We5Z+OIOWQr+WKqOS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gRmF1c3QgZGVzIFZhdGVycyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgRmlzdCBvZiB0aGUgRmF0aGVyIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIFBvaW5nIGR1IFDDqHJlIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrotbfli5Xnt6gxJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOq4sOuPme2OuCjsmIHsm4UpIDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ1MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfpm7blvI/mnLrnpZ7ln44g5ZCv5Yqo5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBFbGxlIGRlcyBWYXRlcnMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEN1ZmYgb2YgdGhlIEZhdGhlciAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBQb2lnbmV0IGR1IFDDqHJlIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrotbfli5Xnt6gyJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOq4sOuPme2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ1MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfpm7blvI/mnLrnpZ7ln44g5ZCv5Yqo5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBBcm0gZGVzIFZhdGVycyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQXJtIG9mIHRoZSBGYXRoZXIgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgQnJhcyBkdSBQw6hyZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O86Zu25byP77ya6LW35YuV57eoMycsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDquLDrj5ntjrgo7JiB7JuFKSAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA0NTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn6Zu25byP5py656We5Z+OIOWQr+WKqOS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gTGFzdCBkZXMgVmF0ZXJzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBCdXJkZW4gb2YgdGhlIEZhdGhlciAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBGYXJkZWF1IGR1IFDDqHJlIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrotbfli5Xnt6g0JyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOq4sOuPme2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ3ODoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eUsOWbremDoScsXHJcbiAgICAgICdkZSc6ICdGcm9oZWhhbGRlJyxcclxuICAgICAgJ2VuJzogJ0lkeWxsc2hpcmUnLFxyXG4gICAgICAnZnInOiAnSWR5bGzDqWUnLFxyXG4gICAgICAnamEnOiAn44Kk44OH44Kj44Or44K344Oj44Kk44KiJyxcclxuICAgICAgJ2tvJzogJ+ydtOuUnOyDpOydtOyWtCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1NSxcclxuICB9LFxyXG4gIDUwNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6JCM5a6g5LmL546L77ya5aSn6LWb5a+55oiY77yI5Lq65py65a+55oiY77yJJyxcclxuICAgICAgJ2RlJzogJ0thbXBmIGRlciBUcmFiYW50ZW46IFR1cm5pZXIgKGdlZ2VuIEFyZW5hbWVpc3RlciknLFxyXG4gICAgICAnZW4nOiAnTG9WTTogTWFzdGVyIFRvdXJuYW1lbnQnLFxyXG4gICAgICAnZnInOiAnQmF0YWlsbGUgZGUgdG91cm5vaSBjb250cmUgbFxcJ29yZGluYXRldXInLFxyXG4gICAgICAnamEnOiAnTG9WTe+8muWkp+S8muWvvuaIpiAoQ1BV5a++5oimKScsXHJcbiAgICAgICdrbyc6ICfqvKzrp4gg7Lmc6rWsIOqzteuwqeyghDog64yA7ZqMIOuMgOqysCjsnbjqs7Ug7KeA64qlIOuMgOqysCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUwODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfprZToiKroiLnomZrml6DmlrnoiJ8nLFxyXG4gICAgICAnZGUnOiAnRGllIE5pY2h0cy1BcmNoZScsXHJcbiAgICAgICdlbic6ICdUaGUgVm9pZCBBcmsnLFxyXG4gICAgICAnZnInOiAnTFxcJ0FyY2hlIGR1IG7DqWFudCcsXHJcbiAgICAgICdqYSc6ICfprZToiKroiLnjg7TjgqnjgqTjg4njgqLjg7zjgq8nLFxyXG4gICAgICAna28nOiAn67O07J2065Oc7J2YIOuwqeyjvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAyODksXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDM3LFxyXG4gIH0sXHJcbiAgNTA5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a0u+WKqOaMkeaImDEnLFxyXG4gICAgICAnZGUnOiAnRXZlbnQtSW5oYWx0IDMnLFxyXG4gICAgICAnZW4nOiAnU3BlY2lhbCBFdmVudCBJSUknLFxyXG4gICAgICAnZnInOiAnRMOpZmkgc3DDqWNpYWwgSUlJJyxcclxuICAgICAgJ2phJzogJ+OCpOODmeODs+ODiOeUqOOCs+ODs+ODhuODs+ODhO+8mjMnLFxyXG4gICAgICAna28nOiAn7J2067Kk7Yq47JqpIOyehOustDogMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMyxcclxuICB9LFxyXG4gIDUxMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflnLDohInngbXnga/lpKnni7zmmJ/nga/loZQnLFxyXG4gICAgICAnZGUnOiAnUGhhcm9zIFNpcml1cyAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdQaGFyb3MgU2lyaXVzIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZSBQaGFyZSBkZSBTaXJpdXMgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn5Yi25Zyn5beo5aGUIOOCt+ODquOCpuOCueWkp+eBr+WPsCAoSGFyZCknLFxyXG4gICAgICAna28nOiAn7Iuc66as7Jqw7IqkIOuMgOuTseuMgCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNTExOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iNieacqOW6reWbreWco+iMieWkj+WonOakjeeJqeWbrScsXHJcbiAgICAgICdkZSc6ICdTYW5rdCBNb2NpYW5uZS1BcmJvcmV0dW0nLFxyXG4gICAgICAnZW4nOiAnU2FpbnQgTW9jaWFubmVcXCdzIEFyYm9yZXR1bScsXHJcbiAgICAgICdmcic6ICdMXFwnQXJib3JldHVtIFNhaW50ZS1Nb2NpYW5uZScsXHJcbiAgICAgICdqYSc6ICfojYnmnKjluq3lnJIg6IGW44Oi44K344Oj44O844OM5qSN54mp5ZySJyxcclxuICAgICAgJ2tvJzogJ+yEsSDrqqjsg6gg7Iud66y87JuQJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDQwLFxyXG4gICAgJ29mZnNldFknOiA2LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTEyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMyxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkupHlhqDnvqTlspvnmb3mmLzmjqLntKInLFxyXG4gICAgICAnZGUnOiAnRGFzIERpYWRlbSAobGVpY2h0KScsXHJcbiAgICAgICdlbic6ICdUaGUgRGlhZGVtIChFYXN5KScsXHJcbiAgICAgICdmcic6ICdMZSBEaWFkw6htZSAoZmFjaWxlKScsXHJcbiAgICAgICdqYSc6ICfpm7LmtbfmjqLntKIg44OH44Kj44Ki44OH44Og6Ku45bO2IChFYXN5KScsXHJcbiAgICAgICdrbyc6ICfrlJTslYTrjoAg7KCc64+EKOyJrOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNjAsXHJcbiAgfSxcclxuICA1MTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6keWGoOe+pOWym+WknOaZmuaOoue0oicsXHJcbiAgICAgICdkZSc6ICdEYXMgRGlhZGVtIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEaWFkZW0gKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIERpYWTDqG1lIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+mbsua1t+aOoue0oiDjg4fjgqPjgqLjg4fjg6Doq7jls7YgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+uUlOyVhOuOgCDsoJzrj4Qo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2MixcclxuICB9LFxyXG4gIDUxNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmmJ/mtbfnqbrpl7TpoqDlgJLloZQnLFxyXG4gICAgICAnZGUnOiAnQW50aXR1cm0nLFxyXG4gICAgICAnZW4nOiAnVGhlIEFudGl0b3dlcicsXHJcbiAgICAgICdmcic6ICdMXFwnQW50aXRvdXInLFxyXG4gICAgICAnamEnOiAn5pif5rW36Kaz5risIOmAhuOBleOBruWhlCAnLFxyXG4gICAgICAna28nOiAn6rGw6r6466GcIOyEoCDtg5EnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUxNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfokKjoj7LmtJvnibnmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBTZXBoaXJvdCcsXHJcbiAgICAgICdlbic6ICdDb250YWlubWVudCBCYXkgUzFUNycsXHJcbiAgICAgICdmcic6ICdVbml0w6kgZGUgY29udGVudGlvbiBTMVA3JyxcclxuICAgICAgJ2phJzogJ+mtlOelnuOCu+ODleOCo+ODreODiOiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfrp4jsi6Ag7IS47ZS866Gc7Yq4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2NixcclxuICB9LFxyXG4gIDUxOToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnpZ7lnKPpgZfov7nml6DpmZDln47luILooZflj6Tov7knLFxyXG4gICAgICAnZGUnOiAnSGlzdG9yaXNjaGVzIEFtZGFwb3IgKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnVGhlIExvc3QgQ2l0eSBvZiBBbWRhcG9yIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZXMgVmVzdGlnZXMgZGUgbGEgY2l0w6kgZFxcJ0FtZGFwb3IgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn56We6IGW6YG66LehIOWPpOOCouODoOODgOODl+ODvOODq+W4guihlyAoSGFyZCknLFxyXG4gICAgICAna28nOiAn7JibIOyVlOuLpO2PrOultCDsi5zqsIDsp4Ao7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA2NCxcclxuICAgICdvZmZzZXRZJzogMzE1LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2MyxcclxuICB9LFxyXG4gIDUyMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5b6L5Yqo5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBGYXVzdCBkZXMgU29obmVzJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBGaXN0IG9mIHRoZSBTb24nLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgUG9pbmcgZHUgRmlscycsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zvvJrlvovli5Xnt6gxJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOycqOuPme2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1MjE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn5py656We5Z+OIOW+i+WKqOS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gRWxsZSBkZXMgU29obmVzJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBDdWZmIG9mIHRoZSBTb24nLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgUG9pZ25ldCBkdSBGaWxzJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8muW+i+WLlee3qDInLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7Jyo64+Z7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUyMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5b6L5Yqo5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBBcm0gZGVzIFNvaG5lcycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQXJtIG9mIHRoZSBTb24nLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgQnJhcyBkdSBGaWxzJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8muW+i+WLlee3qDMnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7Jyo64+Z7Y64IDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTExMCxcclxuICAgICdvZmZzZXRZJzogLTE3MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUyMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5b6L5Yqo5LmL56ugNCcsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBMYXN0IGRlcyBTb2huZXMnLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEJ1cmRlbiBvZiB0aGUgU29uJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIEZhcmRlYXUgZHUgRmlscycsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zvvJrlvovli5Xnt6g0JyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOycqOuPme2OuCA0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1MjQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6JCo6I+y5rSb54m55q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ1plbml0IGRlciBHw7Z0dGVyIC0gU2VwaGlyb3QnLFxyXG4gICAgICAnZW4nOiAnQ29udGFpbm1lbnQgQmF5IFMxVDcgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ1VuaXTDqSBkZSBjb250ZW50aW9uIFMxUDcgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXprZTnpZ7jgrvjg5XjgqPjg63jg4joqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOuniOyLoCDshLjtlLzroZztirgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY2LFxyXG4gIH0sXHJcbiAgNTI1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e+pOeLvOebm+WutCAoNOWvuTQgLyDnu4PkuaDotZspJyxcclxuICAgICAgJ2RlJzogJ1RoZSBGZWFzdCAoNCBnZWdlbiA0LCDDnGJ1bmdza2FtcGYpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGZWFzdCAoNCBvbiA0IC0gVHJhaW5pbmcpJyxcclxuICAgICAgJ2ZyJzogJ1RoZSBGZWFzdCAoNHg0L2VuPFNvZnRIeXBoZW4vPnRyYcOuPFNvZnRIeXBoZW4vPm5lPFNvZnRIeXBoZW4vPm1lbnQpJyxcclxuICAgICAgJ2phJzogJ+OCtuODu+ODleOCo+ODvOOCueODiCAoNOWvvjQgLyDjgqvjgrjjg6XjgqLjg6vjg57jg4Pjg4EpJyxcclxuICAgICAgJ2tvJzogJ+uNlCDtlLzsiqTtirggKDQg64yAIDQgLyDsnbzrsJjsoIQpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY1LFxyXG4gIH0sXHJcbiAgNTI3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e+pOeLvOebm+WutCAoNOWvuTQgLyDmrrXkvY3otZspJyxcclxuICAgICAgJ2RlJzogJ1RoZSBGZWFzdCAoNCBnZWdlbiA0LCBnZXdlcnRldCknLFxyXG4gICAgICAnZW4nOiAnVGhlIEZlYXN0ICg0IG9uIDQgLSBSYW5rZWQpJyxcclxuICAgICAgJ2ZyJzogJ1RoZSBGZWFzdCAoNHg0L2NsYXNzw6kpJyxcclxuICAgICAgJ2phJzogJ+OCtuODu+ODleOCo+ODvOOCueODiCAoNOWvvjQgLyDjg6njg7Pjgq/jg57jg4Pjg4EpJyxcclxuICAgICAgJ2tvJzogJ+uNlCDtlLzsiqTtirggKDQg64yAIDQgLyDrk7HquInsoIQpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY1LFxyXG4gIH0sXHJcbiAgNTI5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+mbtuW8j+acuuelnuWfjiDlvovliqjkuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEZhdXN0IGRlcyBTb2huZXMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEZpc3Qgb2YgdGhlIFNvbiAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBQb2luZyBkdSBGaWxzIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrlvovli5Xnt6gxJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOycqOuPme2OuCjsmIHsm4UpIDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUzMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfpm7blvI/mnLrnpZ7ln44g5b6L5Yqo5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBFbGxlIGRlcyBTb2huZXMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEN1ZmYgb2YgdGhlIFNvbiAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBQb2lnbmV0IGR1IEZpbHMgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8muW+i+WLlee3qDInLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7Jyo64+Z7Y64KOyYgeybhSkgMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTMxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+mbtuW8j+acuuelnuWfjiDlvovliqjkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEFybSBkZXMgU29obmVzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBBcm0gb2YgdGhlIFNvbiAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBCcmFzIGR1IEZpbHMgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8muW+i+WLlee3qDMnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7Jyo64+Z7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTEwLFxyXG4gICAgJ29mZnNldFknOiAtMTcwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTMyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+mbtuW8j+acuuelnuWfjiDlvovliqjkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIExhc3QgZGVzIFNvaG5lcyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQnVyZGVuIG9mIHRoZSBTb24gKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgRmFyZGVhdSBkdSBGaWxzIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrlvovli5Xnt6g0JyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOycqOuPme2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUzMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflm5vlm73ogZTlkIjlhpvmvJQnLFxyXG4gICAgICAnZGUnOiAnVHJ1cHBlbsO8YnVuZyBkZXIgRW9yesOkaXNjaGVuIEFsbGlhbnonLFxyXG4gICAgICAnZW4nOiAnQSBTcGVjdGFjbGUgZm9yIHRoZSBBZ2VzJyxcclxuICAgICAgJ2ZyJzogJ0xhIGdyYW5kZSBtYW7Fk3V2cmUgw6lvcnrDqWVubmUnLFxyXG4gICAgICAnamEnOiAn5Zub5Zu95ZCI5ZCM5ryU57+SJyxcclxuICAgICAgJ2tvJzogJzTqsJzqta0g7ZWp64+ZIO2biOugqCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTM3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfourLpgb/ojIPlm7TmlLvlh7snLFxyXG4gICAgICAnZGUnOiAnRmzDpGNoZW5hbmdyaWZmZW4gYXVzd2VpY2hlbicsXHJcbiAgICAgICdlbic6ICdBdm9pZCBBcmVhIG9mIEVmZmVjdCBBdHRhY2tzJyxcclxuICAgICAgJ2ZyJzogJ8OJdml0ZXIgbGVzIGF0dGFxdWVzIMOgIGFpcmUgZFxcJ2VmZmV0JyxcclxuICAgICAgJ2phJzogJ+evhOWbsuaUu+aSg+OCkumBv+OBkeOCiOOBhu+8gScsXHJcbiAgICAgICdrbyc6ICfrspTsnIQg6rO16rKp7J2EIO2UvO2VmOyekCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUzODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjAsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5o6M5o+h5LuH5oGo6L+e5Ye7JyxcclxuICAgICAgJ2RlJzogJ01pdCBLb21ib3MgRmVpbmRzZWxpZ2tlaXQgYXVmIHNpY2ggemllaGVuJyxcclxuICAgICAgJ2VuJzogJ0V4ZWN1dGUgYSBDb21ibyB0byBJbmNyZWFzZSBFbm1pdHknLFxyXG4gICAgICAnZnInOiAnR8OpbsOpcmVyIGRlIGxcXCdpbmltaXRpw6kgYXZlYyB1biBjb21ibycsXHJcbiAgICAgICdqYSc6ICfjgrPjg7Pjg5zjgafmlbXoppbjgpLpm4bjgoHjgojjgYbvvIEnLFxyXG4gICAgICAna28nOiAn7L2k67O066W8IOydtOyWtCDsoIHqsJzsi6zsnYQg64GM7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTM5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmjqfliLbmlYzkurrnmoTku4fmgagnLFxyXG4gICAgICAnZGUnOiAnS29tYm9zIGltIEthbXBmIGVpbnNldHplbicsXHJcbiAgICAgICdlbic6ICdFeGVjdXRlIGEgQ29tYm8gaW4gQmF0dGxlJyxcclxuICAgICAgJ2ZyJzogJ0VmZmVjdHVlciBsZSBjb21ibyBlbiBjb21iYXQnLFxyXG4gICAgICAnamEnOiAn5a6f5oim44Gn44Kz44Oz44Oc44Gr5oyR5oim44GX44KI44GG77yBJyxcclxuICAgICAgJ2tvJzogJ+yLpOyghOyXkOyEnCDsvaTrs7Trpbwg7IKs7Jqp7ZW067O07J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTQwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmjqfliLblpJrkuKrmlYzkurrnmoTku4fmgagnLFxyXG4gICAgICAnZGUnOiAnRmVpbmRzZWxpZ2tlaXQgbWVocmVyZXIgR2VnbmVyIGF1ZiBzaWNoIHppZWhlbicsXHJcbiAgICAgICdlbic6ICdBY2NydWUgRW5taXR5IGZyb20gTXVsdGlwbGUgVGFyZ2V0cycsXHJcbiAgICAgICdmcic6ICdBdHRpcmVyIGxcXCdpbmltaXRpw6kgZGUgcGx1c2lldXJzIGVubmVtaXMgc3VyIHNvaScsXHJcbiAgICAgICdqYSc6ICfopIfmlbDjga7mlbXjgYvjgonmlbXoppbjgpLpm4bjgoHjgojjgYbvvIEnLFxyXG4gICAgICAna28nOiAn64uk7IiY7J2YIOyggeyXkOqyjOyEnCDsoIHqsJzsi6zsnYQg64GM7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTQxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflrp7miJjmjqfliLblpJrkuKrmlYzkurrnmoTku4fmgagnLFxyXG4gICAgICAnZGUnOiAnR2VnZW4gbWVocmVyZSBHZWduZXIgYXVmIGVpbm1hbCBrw6RtcGZlbicsXHJcbiAgICAgICdlbic6ICdFbmdhZ2UgTXVsdGlwbGUgVGFyZ2V0cycsXHJcbiAgICAgICdmcic6ICdBZmZyb250ZXIgcGx1c2lldXJzIGVubmVtaXMnLFxyXG4gICAgICAnamEnOiAn5a6f5oim44Gn6KSH5pWw44Gu5pW144Go5oim44Gj44Gm44G/44KI44GG77yBJyxcclxuICAgICAgJ2tvJzogJ+yLpOyghOyXkOyEnCDri6TsiJjsnZgg7KCB6rO8IOyLuOybjOuztOyekCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU0Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjAsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5o6n5Yi26L+c5aSE5pWM5Lq655qE5LuH5oGoJyxcclxuICAgICAgJ2RlJzogJ0F1cyBkZXIgRmVybmUgRmVpbmRzZWxpZ2tlaXQgYXVmIHNpY2ggemllaGVuJyxcclxuICAgICAgJ2VuJzogJ0V4ZWN1dGUgYSBSYW5nZWQgQXR0YWNrIHRvIEluY3JlYXNlIEVubWl0eScsXHJcbiAgICAgICdmcic6ICdHw6luw6lyZXIgZGUgbFxcJ2luaW1pdGnDqSDDoCBkaXN0YW5jZScsXHJcbiAgICAgICdqYSc6ICfpgaDot53pm6LjgYvjgonmlbXoppbjgpLpm4bjgoHjgojjgYbvvIEnLFxyXG4gICAgICAna28nOiAn66mA66as7IScIOyggeqwnOyLrOydhCDrgYzsnpAhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NDM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eVmeW/g+WinuaPtOeahOaVjOS6uicsXHJcbiAgICAgICdkZSc6ICdGZWluZGxpY2hlIFZlcnN0w6Rya3VuZyBhdWZoYWx0ZW4nLFxyXG4gICAgICAnZW4nOiAnRW5nYWdlIEVuZW15IFJlaW5mb3JjZW1lbnRzJyxcclxuICAgICAgJ2ZyJzogJ0ZhaXJlIGZhY2Ugw6AgZGVzIHJlbmZvcnRzIGVubmVtaXMnLFxyXG4gICAgICAnamEnOiAn5pW144Gu5aKX5o+044Gr5a++5b+c44GX44KI44GG77yBJyxcclxuICAgICAgJ2tvJzogJ+yggSDsp4Dsm5DqtbDsl5Ag64yA7LKY7ZWY7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTQ0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfphY3lkIjpmLLmiqTogYzkuJrmiZPlgJLljZXkuKrmlYzkuronLFxyXG4gICAgICAnZGUnOiAnR2VnbmVyIGdlbWVpbnNhbSBiZXNpZWdlbicsXHJcbiAgICAgICdlbic6ICdBc3Npc3QgQWxsaWVzIGluIERlZmVhdGluZyBhIFRhcmdldCcsXHJcbiAgICAgICdmcic6ICdWYWluY3JlIHVuIGVubmVtaSBlbiBhc3Npc3RhbnQgZGVzIGFsbGnDqXMnLFxyXG4gICAgICAnamEnOiAn5ZGz5pa544Go5Y2U5Yqb44GX44Gm5pW144KS5YCS44Gd44GG77yBJyxcclxuICAgICAgJ2tvJzogJ+2MjO2LsOybkOqzvCDtmJHroKXtlZjsl6wg7KCB7J2EIOusvOumrOy5mOyekCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU0NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjAsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6YWN5ZCI6Ziy5oqk6IGM5Lia5omT5YCS5aSa5Liq5pWM5Lq6JyxcclxuICAgICAgJ2RlJzogJ0RlbiBHZWduZXIgZWluZXMgVmVyYsO8bmRldGVuIGJlc2llZ2VuJyxcclxuICAgICAgJ2VuJzogJ0RlZmVhdCBhbiBPY2N1cGllZCBUYXJnZXQnLFxyXG4gICAgICAnZnInOiAnVmFpbmNyZSB1biBlbm5lbWkgb2NjdXDDqSBwYXIgdW4gYWxsacOpJyxcclxuICAgICAgJ2phJzogJ+WRs+aWueOBjOW8leOBjeOBpOOBkeOBpuOBhOOCi+aVteOCkuWAkuOBneOBhu+8gScsXHJcbiAgICAgICdrbyc6ICftjIzti7Dsm5Dqs7wg6rCZ7J2AIOyggeydhCDqs7XqsqntlZjsnpAhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i6sumBv+iMg+WbtOaUu+WHu+eahOWQjOaXtui/m+ihjOaImOaWlycsXHJcbiAgICAgICdkZSc6ICdBbmdyaWZmZW4gYXVzd2VpY2hlbicsXHJcbiAgICAgICdlbic6ICdBdm9pZCBFbmdhZ2VkIFRhcmdldHMnLFxyXG4gICAgICAnZnInOiAnQ29tYmF0dHJlIGVuIMOpdml0YW50IGxlcyBhdHRhcXVlcyBlbm5lbWllcycsXHJcbiAgICAgICdqYSc6ICfmlbXjga7mlLvmkoPjgpLpgb/jgZHjgarjgYzjgonmiKbjgYrjgYbvvIEnLFxyXG4gICAgICAna28nOiAn7KCB7J2YIOqzteqyqeydhCDtlLztlZjrqbTshJwg7Iu47Jqw7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTQ4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfngbXmtLvov5DnlKjlnLrlnLDmnLrlhbMnLFxyXG4gICAgICAnZGUnOiAnTWl0IGRlbSBHZWzDpG5kZSBpbnRlcmFnaWVyZW4nLFxyXG4gICAgICAnZW4nOiAnSW50ZXJhY3Qgd2l0aCB0aGUgQmF0dGxlZmllbGQnLFxyXG4gICAgICAnZnInOiAnSW50ZXJhZ2lyIGF2ZWMgbGUgZMOpY29yIGVuIGNvbWJhdCcsXHJcbiAgICAgICdqYSc6ICfjgq7jg5/jg4Pjgq/jgpLmtLvnlKjjgZfjgabmiKbjgYrjgYbvvIEnLFxyXG4gICAgICAna28nOiAn7Yq57IiYIOyepey5mOulvCDtmZzsmqntlZjrqbAg7Iu47Jqw7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTQ5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmsrvnlpfpmLLmiqTogYzkuJonLFxyXG4gICAgICAnZGUnOiAnVmVyYsO8bmRldGUgaGVpbGVuJyxcclxuICAgICAgJ2VuJzogJ0hlYWwgYW4gQWxseScsXHJcbiAgICAgICdmcic6ICdTb2lnbmVyIHVuIGFsbGnDqScsXHJcbiAgICAgICdqYSc6ICflkbPmlrnjgpLlm57lvqnjgZfjgojjgYbvvIEnLFxyXG4gICAgICAna28nOiAn7YyM7Yuw7JuQ7J2EIO2ajOuzteyLnO2CpOyekCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU1MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjAsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rK755aX5bCP6Zif6Zif5ZGYJyxcclxuICAgICAgJ2RlJzogJ01laHJlcmUgVmVyYsO8bmRldGUgaGVpbGVuJyxcclxuICAgICAgJ2VuJzogJ0hlYWwgTXVsdGlwbGUgQWxsaWVzJyxcclxuICAgICAgJ2ZyJzogJ1NvaWduZXIgcGx1c2lldXJzIGFsbGnDqXMnLFxyXG4gICAgICAnamEnOiAn6KSH5pWw44Gu5ZGz5pa544KS5Zue5b6p44GX44KI44GG77yBJyxcclxuICAgICAgJ2tvJzogJ+uLpOyImOydmCDtjIzti7Dsm5DsnYQg7ZqM67O17Iuc7YKk7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTUyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnIDnu4jorq3nu4MnLFxyXG4gICAgICAnZGUnOiAnTGV0enRlIMOcYnVuZycsXHJcbiAgICAgICdlbic6ICdGaW5hbCBFeGVyY2lzZScsXHJcbiAgICAgICdmcic6ICdFeGVyY2ljZSBmaW5hbCcsXHJcbiAgICAgICdqYSc6ICfmnIDntYLoqJPnt7TvvIEnLFxyXG4gICAgICAna28nOiAn66eI7KeA66eJIO2biOugqCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU1NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfojaPoqonph44gKOeijuWGsOaImCknLFxyXG4gICAgICAnZGUnOiAnRmVsZCBkZXIgRWhyZSAoWmVyc3BsaXR0ZXJ1bmcpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGaWVsZHMgb2YgR2xvcnkgKFNoYXR0ZXIpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBDaGFtcHMgZGUgbGEgR2xvaXJlIChicmlzZS1nbGFjZSknLFxyXG4gICAgICAnamEnOiAn44OV44Kj44O844Or44OJ44O744Kq44OW44O744Kw44Ot44O844Oq44O8ICjnoJXmsLfmiKYpJyxcclxuICAgICAgJ2tvJzogJ+yYgeq0keydmCDtj4nsm5Ao7IeE67mZ7KCEKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2NyxcclxuICB9LFxyXG4gIDU1NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnpvpnlrqvmrr/lv4bnvarlrqsnLFxyXG4gICAgICAnZGUnOiAnU29ociBLaGFpJyxcclxuICAgICAgJ2VuJzogJ1NvaHIgS2hhaScsXHJcbiAgICAgICdmcic6ICdTb2hyIEtoYWknLFxyXG4gICAgICAnamEnOiAn5aSp56uc5a6u5q6/IOOCveODvOODq+ODu+OCq+OCpCcsXHJcbiAgICAgICdrbyc6ICfshozrpbQg7Lm07J20JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDM3MCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU1Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnpoHlv4zln47pgqbnjpvlk4gnLFxyXG4gICAgICAnZGUnOiAnRGllIFN0YWR0IGRlciBUcsOkbmVuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBXZWVwaW5nIENpdHkgb2YgTWhhY2gnLFxyXG4gICAgICAnZnInOiAnTGEgQ2l0w6kgZMOpZmVuZHVlIGRlIE1oYWNoJyxcclxuICAgICAgJ2phJzogJ+emgeW/jOmDveW4guODnuODjycsXHJcbiAgICAgICdrbyc6ICfquIjquLDrj4Tsi5wg66eI7ZWYJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC00MCxcclxuICAgICdvZmZzZXRZJzogLTQwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTU3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+m7kea2oeS8oOivtOegtOiIsOWymycsXHJcbiAgICAgICdkZSc6ICdTY2hpZmZicmVjaGVyLUluc2VsIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ0h1bGxicmVha2VyIElzbGUgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDjmxlIGRlIENyw6h2ZWNhcsOobmUgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn6buS5rim5Lyd6KqsIOODj+ODq+ODluODrOODvOOCq+ODvOODu+OCouOCpOODqyAoSGFyZCknLFxyXG4gICAgICAna28nOiAn64Kc7YyM7ISg7J2YIOyErCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY4LFxyXG4gIH0sXHJcbiAgNTU4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+awtOWfjuWuneeJqeW6kycsXHJcbiAgICAgICdkZSc6ICdBcXVhcG9saXMnLFxyXG4gICAgICAnZW4nOiAnVGhlIEFxdWFwb2xpcycsXHJcbiAgICAgICdmcic6ICdMXFwnQXF1YXBvbGUnLFxyXG4gICAgICAnamEnOiAn5a6d54mp5bqrIOOCouOCr+OCouODneODquOCuScsXHJcbiAgICAgICdrbyc6ICfrs7TrrLzqs6Ag7JWE7L+g7JWE7Y+066as7IqkJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NTk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5bC85b636ZyN5qC85b6B6b6Z5oiYJyxcclxuICAgICAgJ2RlJzogJ0RlciBsZXR6dGUgU2NoaWNrc2Fsc3dlZycsXHJcbiAgICAgICdlbic6ICdUaGUgRmluYWwgU3RlcHMgb2YgRmFpdGgnLFxyXG4gICAgICAnZnInOiAnTGEgRGVybmnDqHJlIGF2YW5jw6llIGRlIGxhIEZvaScsXHJcbiAgICAgICdqYSc6ICfjg4vjg7zjgrrjg5jjg4PjgrDlvoHnq5zmiKYnLFxyXG4gICAgICAna28nOiAn64uI65Oc7Zi46re4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDU2MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpm7flj6Tmi4nCt+iMg8K35LyR6JGX5pav6L+95Ye75oiYJyxcclxuICAgICAgJ2RlJzogJ0JsdXRpZ2VzIFdpZWRlcjxTb2Z0SHlwaGVuLz5zZWhlbicsXHJcbiAgICAgICdlbic6ICdBIEJsb29keSBSZXVuaW9uJyxcclxuICAgICAgJ2ZyJzogJ0NvdXJzZS1wb3Vyc3VpdGUgZGFucyBsZSBsYWJvcmF0b2lyZScsXHJcbiAgICAgICdqYSc6ICfjg6zjgrDjg6njg7vjg7TjgqHjg7Pjg7vjg5Ljg6Xjg4njg6vjgrnov73mkoPmiKYnLFxyXG4gICAgICAna28nOiAn66CI6rW06528IOuwmCDtnojrk5zro6jsiqQg7LaU6rKp7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xOCxcclxuICAgICdvZmZzZXRZJzogMTQ5LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTYxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMe+9njEw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxLTEwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMS0xMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDEtMTApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMe+9nkIxMCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxfkIxMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTYyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMTHvvZ4yMOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTEtMjApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxMS0yMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDExLTIwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjEx772eQjIwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjExfkIyMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTYzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMjHvvZ4zMOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMjEtMzApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAyMS0zMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDIxLTMwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjIx772eQjMwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjIxfkIzMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTY0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMzHvvZ40MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMzEtNDApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAzMS00MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDMxLTQwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjMx772eQjQwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjMxfkI0MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTY1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLNDHvvZ41MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gNDEtNTApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyA0MS01MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDQxLTUwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjQx772eQjUwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjQxfkI1MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTY2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WwvOW+t+mcjeagvOS8oOWlh+W+gem+meaImCcsXHJcbiAgICAgICdkZSc6ICdEYXMgTGllZCB2b24gTmlkaG9nZ3MgbGV0enRlbSBSdWYnLFxyXG4gICAgICAnZW4nOiAnVGhlIE1pbnN0cmVsXFwncyBCYWxsYWQ6IE5pZGhvZ2dcXCdzIFJhZ2UnLFxyXG4gICAgICAnZnInOiAnTFxcJ2lyZSBkZSBOaWRob2dnJyxcclxuICAgICAgJ2phJzogJ+alteODi+ODvOOCuuODmOODg+OCsOW+geernOaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg64uI65Oc7Zi46re4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDU3MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqh54G15bqc6YK46Ze56ay85bqE5ZutJyxcclxuICAgICAgJ2RlJzogJ0RhcyBHZWlzdGVyc2NobG9zcycsXHJcbiAgICAgICdlbic6ICdUaGUgSGF1bnRlZCBNYW5vcicsXHJcbiAgICAgICdmcic6ICdMZSBNYW5vaXIgaGFudMOpJyxcclxuICAgICAgJ2phJzogJ+S6oemciuWxi+aVtyDjg5vjg7zjg7Pjg4bjg4Pjg4njg57jg4rjg7wnLFxyXG4gICAgICAna28nOiAn7Jyg66C57J2YIOynkScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTcyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mZqeWzu+Wzoeiwt+WhnuWwlOazleeJueWwlOa6quiwtycsXHJcbiAgICAgICdkZSc6ICdYZWxwaGF0b2wnLFxyXG4gICAgICAnZW4nOiAnWGVscGhhdG9sJyxcclxuICAgICAgJ2ZyJzogJ1hlbHBoYXRvbCcsXHJcbiAgICAgICdqYSc6ICfls7vljrPmuJPosLcg44K844Or44OV44Kh44OI44OrJyxcclxuICAgICAgJ2tvJzogJ+ygpO2MjO2GqCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTQ4LFxyXG4gICAgJ29mZnNldFknOiAzNSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDAsXHJcbiAgfSxcclxuICA1NzY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57Si6I+y5aiF5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gU29waGlhJyxcclxuICAgICAgJ2VuJzogJ0NvbnRhaW5tZW50IEJheSBQMVQ2JyxcclxuICAgICAgJ2ZyJzogJ1VuaXTDqSBkZSBjb250ZW50aW9uIFAxUDYnLFxyXG4gICAgICAnamEnOiAn5aWz56We44K944OV44Kj44Ki6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+yXrOyLoCDshoztlLzslYQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY5LFxyXG4gIH0sXHJcbiAgNTc3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e0ouiPsuWoheatvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIFNvcGhpYScsXHJcbiAgICAgICdlbic6ICdDb250YWlubWVudCBCYXkgUDFUNiAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnVW5pdMOpIGRlIGNvbnRlbnRpb24gUDFQNiAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteWls+elnuOCveODleOCo+OCouiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7Jes7IugIOyGjO2UvOyVhCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNjksXHJcbiAgfSxcclxuICA1Nzg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56eY5pys5a6d5bqT6L+m5be05YuS5bm75oOz5Zu+5Lmm6aaGJyxcclxuICAgICAgJ2RlJzogJ0dyb8OfZSBHdWJhbC1CaWJsaW90aGVrIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBHcmVhdCBHdWJhbCBMaWJyYXJ5IChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMYSBHcmFuZGUgYmlibGlvdGjDqHF1ZSBkZSBHdWJhbCAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfnqIDmm7jlm57lj44g44Kw44OW44Op5bm75oOz5Zuz5pu46aSoIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfqtazruIzrnbwg7ZmY7IOB64+E7ISc6rSAKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMTE2LFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTc5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuZ3lrqvlubvljaHvvJrlubvljaHlr7nlsYDlrqQnLFxyXG4gICAgICAnZGUnOiAnVHJpcGxlIFRyaWFkOiBXZWx0ZW5zYWxvbicsXHJcbiAgICAgICdlbic6ICdUaGUgVHJpcGxlIFRyaWFkIEJhdHRsZWhhbGwnLFxyXG4gICAgICAnZnInOiAnQXLDqG5lIFRyaXBsZSBUcmlhZGUnLFxyXG4gICAgICAnamEnOiAn44OI44Oq44OX44Or44OI44Op44Kk44Ki44OJ77ya44Kr44O844OJ44OQ44OI44Or44Or44O844OgJyxcclxuICAgICAgJ2tvJzogJ+2KuOumrO2UjCDtirjrnbzsnbTslrTrk5w6IOy5tOuTnCDrjIDqsrDsnqUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogODAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU4MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5aSp5Yqo5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBBdWdlbiBkZXMgU2Now7ZwZmVycycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgRXllcyBvZiB0aGUgQ3JlYXRvcicsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZXMgWWV1eCBkdSBDcsOpYXRldXInLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O877ya5aSp5YuV57eoMScsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDsspzrj5ntjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA3NSxcclxuICAgICdvZmZzZXRZJzogMTQsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1ODE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn5py656We5Z+OIOWkqeWKqOS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gQXRlbSBkZXMgU2Now7ZwZmVycycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQnJlYXRoIG9mIHRoZSBDcmVhdG9yJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIFNvdWZmbGUgZHUgQ3LDqWF0ZXVyJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8muWkqeWLlee3qDInLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7LKc64+Z7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTgwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTgyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+acuuelnuWfjiDlpKnliqjkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEhlcnogZGVzIFNjaMO2cGZlcnMnLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEhlYXJ0IG9mIHRoZSBDcmVhdG9yJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIEPFk3VyIGR1IENyw6lhdGV1cicsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zvvJrlpKnli5Xnt6gzJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOyynOuPme2OuCAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1ODM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn5py656We5Z+OIOWkqeWKqOS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gU2VlbGUgZGVzIFNjaMO2cGZlcnMnLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIFNvdWwgb2YgdGhlIENyZWF0b3InLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTFxcJ8OCbWUgZHUgQ3LDqWF0ZXVyJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8muWkqeWLlee3qDQnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7LKc64+Z7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU4NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfpm7blvI/mnLrnpZ7ln44g5aSp5Yqo5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBBdWdlbiBkZXMgU2Now7ZwZmVycyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgRXllcyBvZiB0aGUgQ3JlYXRvciAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZXMgWWV1eCBkdSBDcsOpYXRldXIgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8muWkqeWLlee3qDEnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7LKc64+Z7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA3NSxcclxuICAgICdvZmZzZXRZJzogMTQsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1ODU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn6Zu25byP5py656We5Z+OIOWkqeWKqOS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gQXRlbSBkZXMgU2Now7ZwZmVycyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQnJlYXRoIG9mIHRoZSBDcmVhdG9yIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIFNvdWZmbGUgZHUgQ3LDqWF0ZXVyIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrlpKnli5Xnt6gyJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOyynOuPme2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTgwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTg2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+mbtuW8j+acuuelnuWfjiDlpKnliqjkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEhlcnogZGVzIFNjaMO2cGZlcnMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEhlYXJ0IG9mIHRoZSBDcmVhdG9yIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIEPFk3VyIGR1IENyw6lhdGV1ciAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O86Zu25byP77ya5aSp5YuV57eoMycsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDsspzrj5ntjrgo7JiB7JuFKSAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1ODc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn6Zu25byP5py656We5Z+OIOWkqeWKqOS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gU2VlbGUgZGVzIFNjaMO2cGZlcnMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIFNvdWwgb2YgdGhlIENyZWF0b3IgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTFxcJ8OCbWUgZHUgQ3LDqWF0ZXVyIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrlpKnli5Xnt6g0JyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOyynOuPme2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU4OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6JCM5a6g5LmL546L77ya546p5a625a+55oiY77yI57up54K56LWb77yJJyxcclxuICAgICAgJ2RlJzogJ0thbXBmIGRlciBUcmFiYW50ZW46IEdlZ2VuIFNwaWVsZXIgKHVtIFJQKScsXHJcbiAgICAgICdlbic6ICdMb1ZNOiBQbGF5ZXIgQmF0dGxlIChSUCknLFxyXG4gICAgICAnZnInOiAnQmF0YWlsbGUgc2ltcGxlIGNvbnRyZSB1biBqb3VldXIgKGF2ZWMgUFIpJyxcclxuICAgICAgJ2phJzogJ0xvVk3vvJrjg5fjg6zjgqTjg6Tjg7zlr77miKYgKFJQ5aSJ5YuV44GC44KKKScsXHJcbiAgICAgICdrbyc6ICfqvKzrp4gg7Lmc6rWsIOqzteuwqeyghDog7ZSM66CI7J207Ja0IOuMgOqysChSUCDrs4Drj5kg7J6I7J2MKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTkwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfokIzlrqDkuYvnjovvvJrlpKfotZvlr7nmiJjvvIjnjqnlrrblr7nmiJjvvIknLFxyXG4gICAgICAnZGUnOiAnS2FtcGYgZGVyIFRyYWJhbnRlbjogVHVybmllciAoZ2VnZW4gU3BpZWxlciknLFxyXG4gICAgICAnZW4nOiAnTG9WTTogVG91cm5hbWVudCcsXHJcbiAgICAgICdmcic6ICdCYXRhaWxsZSBkZSB0b3Vybm9pIGNvbnRyZSBkZXMgam91ZXVycycsXHJcbiAgICAgICdqYSc6ICdMb1ZN77ya5aSn5Lya5a++5oimICjjg5fjg6zjgqTjg6Tjg7zlr77miKbvvIknLFxyXG4gICAgICAna28nOiAn6rys66eIIOy5nOq1rCDqs7XrsKnsoIQ6IOuMgO2ajCDrjIDqsrAo7ZSM66CI7J207Ja0IOuMgOqysCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU5MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6JCM5a6g5LmL546L77ya546p5a625a+55oiY77yI5peg57up54K56LWb77yJJyxcclxuICAgICAgJ2RlJzogJ0thbXBmIGRlciBUcmFiYW50ZW46IEdlZ2VuIFNwaWVsZXIgKG9obmUgUlApJyxcclxuICAgICAgJ2VuJzogJ0xvVk06IFBsYXllciBCYXR0bGUgKE5vbi1SUCknLFxyXG4gICAgICAnZnInOiAnQmF0YWlsbGUgc2ltcGxlIGNvbnRyZSB1biBqb3VldXIgKHNhbnMgUFIpJyxcclxuICAgICAgJ2phJzogJ0xvVk3vvJrjg5fjg6zjgqTjg6Tjg7zlr77miKYgKFJQ5aSJ5YuV44Gq44GXKScsXHJcbiAgICAgICdrbyc6ICfqvKzrp4gg7Lmc6rWsIOqzteuwqeyghDog7ZSM66CI7J207Ja0IOuMgOqysChSUCDrs4Drj5kg7JeG7J2MKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTkyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e6oOe8oOS4jea4heeahOWuv+WRvScsXHJcbiAgICAgICdkZSc6ICdXZWx0ZW7DvGJlcmdyZWlmZW5kZXMgU2NoaWNrc2FsJyxcclxuICAgICAgJ2VuJzogJ09uZSBMaWZlIGZvciBPbmUgV29ybGQnLFxyXG4gICAgICAnZnInOiAnRGVzdGlucyBlbnRyZWNyb2lzw6lzJyxcclxuICAgICAgJ2phJzogJ+e1oeOBv+WQiOOBhuWuv+WRvScsXHJcbiAgICAgICdrbyc6ICfrkqTslr3tnojripQg7IiZ66qFJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNTkzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLNTHvvZ42MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gNTEgLSA2MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDUxLTYwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgNTEtNjApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCNTHvvZ5CNjAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCNTF+QjYwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1OTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIs2Me+9njcw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiA2MSAtIDcwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgNjEtNzApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyA2MS03MCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEI2Me+9nkI3MCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEI2MX5CNzAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU5NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izcx772eODDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDcxIC0gODApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyA3MS04MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDcxLTgwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjcx772eQjgwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjcxfkI4MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTk2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLODHvvZ45MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gODEgLSA5MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDgxLTkwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgODEtOTApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCODHvvZ5COTAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCODF+QjkwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1OTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIs5Me+9njEwMOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gOTEgLSAxMDApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyA5MS0xMDApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyA5MS0xMDApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCOTHvvZ5CMTAwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjkxfkIxMDAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU5ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izEwMe+9njExMOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTAxIC0gMTEwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMTAxLTExMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDEwMS0xMTApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMTAx772eQjExMCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxMDF+QjExMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTk5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMTEx772eMTIw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxMTEgLSAxMjApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxMTEtMTIwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMTExLTEyMCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEIxMTHvvZ5CMTIwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjExMX5CMTIwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MDA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIsxMjHvvZ4xMzDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDEyMSAtIDEzMCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDEyMS0xMzApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyAxMjEtMTMwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjEyMe+9nkIxMzAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCMTIxfkIxMzAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYwMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izEzMe+9njE0MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTMxIC0gMTQwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMTMxLTE0MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDEzMS0xNDApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMTMx772eQjE0MCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxMzF+QjE0MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjAyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMTQx772eMTUw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxNDEgLSAxNTApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxNDEtMTUwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMTQxLTE1MCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEIxNDHvvZ5CMTUwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjE0MX5CMTUwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MDM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIsxNTHvvZ4xNjDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDE1MSAtIDE2MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDE1MS0xNjApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyAxNTEtMTYwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjE1Me+9nkIxNjAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCMTUxfkIxNjAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYwNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izE2Me+9njE3MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTYxIC0gMTcwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMTYxLTE3MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDE2MS0xNzApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMTYx772eQjE3MCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxNjF+QjE3MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjA1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMTcx772eMTgw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxNzEgLSAxODApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxNzEtMTgwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMTcxLTE4MCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEIxNzHvvZ5CMTgwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjE3MX5CMTgwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIsxODHvvZ4xOTDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDE4MSAtIDE5MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDE4MS0xOTApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyAxODEtMTkwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjE4Me+9nkIxOTAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCMTgxfkIxOTAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYwNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izE5Me+9njIwMOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTkxIC0gMjAwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMTkxLTIwMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDE5MS0yMDApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMTkx772eQjIwMCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxOTF+QjIwMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjEyOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Z+65ouJ5be05bC85Lqa6L655Yy6JyxcclxuICAgICAgJ2RlJzogJ0FiYW5pc2NoZXMgR3JlbnpsYW5kJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGcmluZ2VzJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBNYXJnZXMnLFxyXG4gICAgICAnamEnOiAn44Ku44Op44OQ44OL44Ki6L665aKD5Zyw5bivJyxcclxuICAgICAgJ2tvJzogJ+q4sOudvOuwlOuLiOyVhCDrs4DrsKnsp4DrjIAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzksXHJcbiAgfSxcclxuICA2MTM6IHtcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnuqLnjonmtbcnLFxyXG4gICAgICAnZGUnOiAnUnViaW5zZWUnLFxyXG4gICAgICAnZW4nOiAnVGhlIFJ1YnkgU2VhJyxcclxuICAgICAgJ2ZyJzogJ01lciBkZSBSdWJpcycsXHJcbiAgICAgICdqYSc6ICfntIXnjonmtbcnLFxyXG4gICAgICAna28nOiAn7ZmN7Jil7ZW0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDgzLFxyXG4gIH0sXHJcbiAgNjE0OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5bu25aSPJyxcclxuICAgICAgJ2RlJzogJ1lhbnhpYScsXHJcbiAgICAgICdlbic6ICdZYW54aWEnLFxyXG4gICAgICAnZnInOiAnWWFueGlhJyxcclxuICAgICAgJ2phJzogJ+ODpOODs+OCtScsXHJcbiAgICAgICdrbyc6ICfsloDsg6QnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODQsXHJcbiAgfSxcclxuICA2MTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Z2a54mi6ZOB5aOB5be05Z+D6JCo6ZW/5Z+OJyxcclxuICAgICAgJ2RlJzogJ0JhZWxzYXItV2FsbCcsXHJcbiAgICAgICdlbic6ICdCYWVsc2FyXFwncyBXYWxsJyxcclxuICAgICAgJ2ZyJzogJ0xhIE11cmFpbGxlIGRlIEJhZWxzYXInLFxyXG4gICAgICAnamEnOiAn5beo5aSn6Ziy5aOBIOODkOOCqOOCteODq+OBrumVt+WfjicsXHJcbiAgICAgICdrbyc6ICfrsJTsnbzsgqzrpbQg7J6l7ISxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDE4MixcclxuICAgICdvZmZzZXRZJzogMzIsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQwLFxyXG4gIH0sXHJcbiAgNjE2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a1t+W6leWuq+auv+e0q+awtOWuqycsXHJcbiAgICAgICdkZSc6ICdTaGlzdWknLFxyXG4gICAgICAnZW4nOiAnU2hpc3VpIG9mIHRoZSBWaW9sZXQgVGlkZXMnLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGF1eCBNYXLDqWVzIHZpb2xldHRlcycsXHJcbiAgICAgICdqYSc6ICfmtbflupXlrq7mrr8g57Sr5rC05a6uJyxcclxuICAgICAgJ2tvJzogJ+yLnOyKpOydtCDqtoEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMzUsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5bGx5rex5aKD57Si5aeG6Zi/5bCU54G15bOwJyxcclxuICAgICAgJ2RlJzogJ1NvaG0gQWwgKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnU29obSBBbCAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnU29obSBBbCAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfpnIrls7DmtYTljJYg44K944O844Og44O744Ki44OrIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfshpwg7JWMKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMTI4LFxyXG4gICAgJ29mZnNldFknOiAtMzIsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNjE5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e+pOeLvOebm+WutCAo54u854ux5ryU5Lmg5Zy677ya6Ieq5a6a6LWbKScsXHJcbiAgICAgICdkZSc6ICdUaGUgRmVhc3QgKFdvbGZzaMO2aGxlOiBTY2hhdWthbXBmKScsXHJcbiAgICAgICdlbic6ICdUaGUgRmVhc3QgKEN1c3RvbSBNYXRjaCAtIEZlYXN0aW5nIEdyb3VuZHMpJyxcclxuICAgICAgJ2ZyJzogJ1RoZSBGZWFzdCAocGVyc29ubmFsaXPDqS9GZXN0aW4gZGVzIGxvdXBzKScsXHJcbiAgICAgICdqYSc6ICfjgrbjg7vjg5XjgqPjg7zjgrnjg4ggKOOCpuODq+ODtOOCuuOCuOOCp+OCpOODq+a8lOe/kuWgtO+8muOCq+OCueOCv+ODoOODnuODg+ODge+8iScsXHJcbiAgICAgICdrbyc6ICfrjZQg7ZS87Iqk7Yq4ICjripHrjIDsmrDrpqwg7ZuI66Co7J6lOiDsuZzshKAg6rK96riwKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2NSxcclxuICB9LFxyXG4gIDYyMDoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WfuuaLieW3tOWwvOS6muWxseWMuicsXHJcbiAgICAgICdkZSc6ICdEaWUgWmlubmVuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQZWFrcycsXHJcbiAgICAgICdmcic6ICdMZXMgUGljcycsXHJcbiAgICAgICdqYSc6ICfjgq7jg6njg5Djg4vjgqLlsbHlsrPlnLDluK8nLFxyXG4gICAgICAna28nOiAn6riw652867CU64uI7JWEIOyCsOyVheyngOuMgCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4MCxcclxuICB9LFxyXG4gIDYyMToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WfuuaLieW3tOWwvOS6mua5luWMuicsXHJcbiAgICAgICdkZSc6ICdEYXMgRmVubicsXHJcbiAgICAgICdlbic6ICdUaGUgTG9jaHMnLFxyXG4gICAgICAnZnInOiAnTGVzIExhY3MnLFxyXG4gICAgICAnamEnOiAn44Ku44Op44OQ44OL44Ki5rmW55WU5Zyw5bivJyxcclxuICAgICAgJ2tvJzogJ+q4sOudvOuwlOuLiOyVhCDtmLjrsJjsp4DrjIAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODEsXHJcbiAgfSxcclxuICA2MjI6IHtcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKrpmLPnpZ7ojYnljp8nLFxyXG4gICAgICAnZGUnOiAnQXppbS1TdGVwcGUnLFxyXG4gICAgICAnZW4nOiAnVGhlIEF6aW0gU3RlcHBlJyxcclxuICAgICAgJ2ZyJzogJ1N0ZXBwZSBkXFwnQXppbScsXHJcbiAgICAgICdqYSc6ICfjgqLjgrjjg6Djgrnjg4bjg4Pjg5cnLFxyXG4gICAgICAna28nOiAn7JWE7KeQIOuMgOy0iOybkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4NSxcclxuICB9LFxyXG4gIDYyMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfor5XngrzooYzot6/lt7TlhL/ovr7mnKjpnLjpgZMnLFxyXG4gICAgICAnZGUnOiAnQmFyZGFtcyBQcm9iZScsXHJcbiAgICAgICdlbic6ICdCYXJkYW1cXCdzIE1ldHRsZScsXHJcbiAgICAgICdmcic6ICdMYSBGb3JjZSBkZSBCYXJkYW0nLFxyXG4gICAgICAnamEnOiAn5Lyd57Wx6Kmm57e0IOODkOODq+ODgOODoOimh+mBkycsXHJcbiAgICAgICdrbyc6ICfrsJTrpbTri7Qg7Yyo64+EJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MjQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6keWGoOe+pOWym+eZveaYvOaOoue0ou+8iOeLqeeMjuS4k+eUqO+8iScsXHJcbiAgICAgICdkZSc6ICdEYXMgRGlhZGVtIC0gSmFnZGdyw7xuZGUgKGxlaWNodCknLFxyXG4gICAgICAnZW4nOiAnVGhlIERpYWRlbSBIdW50aW5nIEdyb3VuZHMgKEVhc3kpJyxcclxuICAgICAgJ2ZyJzogJ0xlIERpYWTDqG1lPEluZGVudC8+OiB0ZXJyYWlucyBkZSBjaGFzc2UgKGZhY2lsZSknLFxyXG4gICAgICAnamEnOiAn6Zuy5rW35o6i57SiIOODh+OCo+OCouODh+ODoOiruOWztu+8mueLqeeMn+mZkOWumiAoRWFzeSknLFxyXG4gICAgICAna28nOiAn65SU7JWE646AIOygnOuPhDog7KCE7YisIO2VnOyglSjsiazsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDYwLFxyXG4gIH0sXHJcbiAgNjI1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMyxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkupHlhqDnvqTlspvpu4TmmI/mjqLntKLvvIjni6nnjI7kuJPnlKjvvIknLFxyXG4gICAgICAnZGUnOiAnRGFzIERpYWRlbSAtIEphZ2RncsO8bmRlJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEaWFkZW0gSHVudGluZyBHcm91bmRzJyxcclxuICAgICAgJ2ZyJzogJ0xlIERpYWTDqG1lPEluZGVudC8+OiB0ZXJyYWlucyBkZSBjaGFzc2UnLFxyXG4gICAgICAnamEnOiAn6Zuy5rW35o6i57SiIOODh+OCo+OCouODh+ODoOiruOWztu+8mueLqeeMn+mZkOWumicsXHJcbiAgICAgICdrbyc6ICfrlJTslYTrjoAg7KCc64+EOiDsoITtiKwg7ZWc7KCVJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDYxLFxyXG4gIH0sXHJcbiAgNjI2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a8gua1gea1t+Wfn+WmluatjOa1tycsXHJcbiAgICAgICdkZSc6ICdTaXJlbmVuLVNlZScsXHJcbiAgICAgICdlbic6ICdUaGUgU2lyZW5zb25nIFNlYScsXHJcbiAgICAgICdmcic6ICdMYSBNZXIgZHUgQ2hhbnQgZGVzIHNpcsOobmVzJyxcclxuICAgICAgJ2phJzogJ+a8gua1gea1t+WfnyDjgrvjgqTjg6zjg7zjg7PmtbcnLFxyXG4gICAgICAna28nOiAn7IS47J2066CMIO2VtCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzNixcclxuICB9LFxyXG4gIDYyNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflvbHkuYvlm70nLFxyXG4gICAgICAnZGUnOiAnRHVuIFNjYWl0aCcsXHJcbiAgICAgICdlbic6ICdEdW4gU2NhaXRoJyxcclxuICAgICAgJ2ZyJzogJ0R1biBTY2FpdGgnLFxyXG4gICAgICAnamEnOiAn5b2x44Gu5Zu944OA44Oz44O744K544Kr44O8JyxcclxuICAgICAgJ2tvJzogJ+uRlCDsiqTsubQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTM1MCxcclxuICAgICdvZmZzZXRZJzogLTQwMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTgsXHJcbiAgfSxcclxuICA2Mjg6IHtcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpu4Tph5HmuK8nLFxyXG4gICAgICAnZGUnOiAnS3VnYW5lJyxcclxuICAgICAgJ2VuJzogJ0t1Z2FuZScsXHJcbiAgICAgICdmcic6ICdLdWdhbmUnLFxyXG4gICAgICAnamEnOiAn44Kv44Ks44ONJyxcclxuICAgICAgJ2tvJzogJ+y/oOqwgOuEpCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4MixcclxuICB9LFxyXG4gIDYzMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjMsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LqR5Yag576k5bKb5oiY5LqJ56We54yO5Zy6JyxcclxuICAgICAgJ2RlJzogJ0RhcyBEaWFkZW0gLSBIYWxvbmVzIFByw7xmdW5nJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEaWFkZW0gLSBUcmlhbHMgb2YgdGhlIEZ1cnknLFxyXG4gICAgICAnZnInOiAnTGUgRGlhZMOobWUgLSDDiXByZXV2ZXMgZGUgSGFsb25lJyxcclxuICAgICAgJ2phJzogJ+mbsua1t+aOoue0oiDjg4fjgqPjgqLjg4fjg6Doq7jls7YgKOeLqeeMnyknLFxyXG4gICAgICAna28nOiAn65SU7JWE646AIOygnOuPhDog7KCE7YisJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDcxLFxyXG4gIH0sXHJcbiAgNjMzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WKoOWwlOaPkOivuuW5s+WOn+mBremBh+aImCcsXHJcbiAgICAgICdkZSc6ICdIZWxpb2Ryb20nLFxyXG4gICAgICAnZW4nOiAnVGhlIENhcnRlbmVhdSBGbGF0czogSGVsaW9kcm9tZScsXHJcbiAgICAgICdmcic6ICdSaXhlIMOgIGxcXCdIw6lsaW9kcm9tZScsXHJcbiAgICAgICdqYSc6ICfjgqvjg6vjg4bjg47jg7zlubPljp/pga3pgYfmiKYnLFxyXG4gICAgICAna28nOiAn7Lm066W07YWM64W4IO2PieybkCDsobDsmrDsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYzNToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elnuaLs+eXlScsXHJcbiAgICAgICdkZSc6ICdSaGFsZ3JzIFdhY2h0JyxcclxuICAgICAgJ2VuJzogJ1JoYWxnclxcJ3MgUmVhY2gnLFxyXG4gICAgICAnZnInOiAnTFxcJ8OJdGVuZHVlIGRlIFJoYWxncicsXHJcbiAgICAgICdqYSc6ICfjg6njg7zjg6vjgqzjg7zjgrrjg6rjg7zjg4EnLFxyXG4gICAgICAna28nOiAn656E6rGw7J2YIOyGkOq4uCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3OCxcclxuICB9LFxyXG4gIDYzNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnpZblsJTlrpvmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBadXJ2YW4nLFxyXG4gICAgICAnZW4nOiAnQ29udGFpbm1lbnQgQmF5IFoxVDknLFxyXG4gICAgICAnZnInOiAnVW5pdMOpIGRlIGNvbnRlbnRpb24gWjFQOScsXHJcbiAgICAgICdqYSc6ICfprLznpZ7jgrrjg6vjg6/jg7zjg7PoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6reA7IugIOyjvOultOuwmCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzUsXHJcbiAgfSxcclxuICA2Mzg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56WW5bCU5a6b5q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ1plbml0IGRlciBHw7Z0dGVyIC0gWnVydmFuJyxcclxuICAgICAgJ2VuJzogJ0NvbnRhaW5tZW50IEJheSBaMVQ5IChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdVbml0w6kgZGUgY29udGVudGlvbiBaMVA5IChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW16ay856We44K644Or44Ov44O844Oz6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDqt4Dsi6Ag7KO866W067CYIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3NSxcclxuICB9LFxyXG4gIDY0Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnvqTni7znm5vlrrQgKOWcsOiho+Wuq+a8lOS5oOWcuu+8muiHquWumui1myknLFxyXG4gICAgICAnZGUnOiAnVGhlIEZlYXN0IChGbGVjaHRlbmhhaW46IFNjaGF1a2FtcGYpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGZWFzdCAoQ3VzdG9tIE1hdGNoIC0gTGljaGVud2VlZCknLFxyXG4gICAgICAnZnInOiAnVGhlIEZlYXN0IChwZXJzb25uYWxpc8OpL1Byw6ktZGUtbGljaGVuKScsXHJcbiAgICAgICdqYSc6ICfjgrbjg7vjg5XjgqPjg7zjgrnjg4ggKOODqeOCpOOCseODs+OCpuOCo+ODvOODiea8lOe/kuWgtO+8muOCq+OCueOCv+ODoOODnuODg+ODge+8iScsXHJcbiAgICAgICdrbyc6ICfrjZQg7ZS87Iqk7Yq4ICjsnqHstIgg7ZuI66Co7J6lOiDsuZzshKAg6rK96riwKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3MyxcclxuICB9LFxyXG4gIDY1Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjMsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LqR5Yag576k5bKb5Liw6aW256We56aP5ZywJyxcclxuICAgICAgJ2RlJzogJ0RhcyBEaWFkZW0gLSBOb3BoaWNhcyBQcsO8ZnVuZycsXHJcbiAgICAgICdlbic6ICdUaGUgRGlhZGVtIC0gVHJpYWxzIG9mIHRoZSBNYXRyb24nLFxyXG4gICAgICAnZnInOiAnTGUgRGlhZMOobWUgLSDDiXByZXV2ZXMgZGUgTm9waGljYScsXHJcbiAgICAgICdqYSc6ICfpm7LmtbfmjqLntKIg44OH44Kj44Ki44OH44Og6Ku45bO2ICjmjqHpm4YpJyxcclxuICAgICAgJ2tvJzogJ+uUlOyVhOuOgCDsoJzrj4Q6IOyxhOynkScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3MSxcclxuICB9LFxyXG4gIDY2MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfop6PmlL7lhrPmiJjlpJrnjpvnjovln44nLFxyXG4gICAgICAnZGUnOiAnQnVyZyBEb21hJyxcclxuICAgICAgJ2VuJzogJ0RvbWEgQ2FzdGxlJyxcclxuICAgICAgJ2ZyJzogJ0xlIENow6J0ZWF1IGRlIERvbWEnLFxyXG4gICAgICAnamEnOiAn6Kej5pS+5rG65oimIOODieODnuWfjicsXHJcbiAgICAgICdrbyc6ICfrj4Trp4gg7ISxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2NjE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5beo54Ku6KaB5aGe5bid5Zu955m95bGx5aChJyxcclxuICAgICAgJ2RlJzogJ0Nhc3RydW0gQWJhbmlhJyxcclxuICAgICAgJ2VuJzogJ0Nhc3RydW0gQWJhbmlhJyxcclxuICAgICAgJ2ZyJzogJ0Nhc3RydW0gQWJhbmlhJyxcclxuICAgICAgJ2phJzogJ+W3qOegsuimgeWhniDjgqvjgrnjg4jjg6vjg6Djg7vjgqLjg5Djg4vjgqInLFxyXG4gICAgICAna28nOiAn7Lm07Iqk7Yq466O4IOyVhOuwlOuLiOyVhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA3MixcclxuICAgICdvZmZzZXRZJzogLTE4NixcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDY2Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmgbblhZrlraTln47pu4Tph5HpmIEnLFxyXG4gICAgICAnZGUnOiAnU2NobG9zcyBLdWdhbmUnLFxyXG4gICAgICAnZW4nOiAnS3VnYW5lIENhc3RsZScsXHJcbiAgICAgICdmcic6ICdMZSBDaMOidGVhdSBkZSBLdWdhbmUnLFxyXG4gICAgICAnamEnOiAn5oKq5YWa5oiQ5pWXIOOCr+OCrOODjeWfjicsXHJcbiAgICAgICdrbyc6ICfsv6DqsIDrhKQg7ISxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDcwLFxyXG4gICAgJ29mZnNldFknOiAzMyxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDY2Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkv67ooYzlj6TliLnmmJ/lr7zlr7onLFxyXG4gICAgICAnZGUnOiAnVGVtcGVsIGRlciBGYXVzdCcsXHJcbiAgICAgICdlbic6ICdUaGUgVGVtcGxlIG9mIHRoZSBGaXN0JyxcclxuICAgICAgJ2ZyJzogJ0xlIFRlbXBsZSBkdSBQb2luZycsXHJcbiAgICAgICdqYSc6ICflo4rnpZ7kv67ooYwg5pif5bCO5bGx5a+66ZmiJyxcclxuICAgICAgJ2tvJzogJ+yEseuPhOyCsCDsgqzsm5AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTQyNyxcclxuICAgICdvZmZzZXRZJzogLTMxNCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDY2NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpsbzpgZPnjrDouqvvvIEnLFxyXG4gICAgICAnZGUnOiAnRWluIHp3ZWlmZWxoYWZ0ZXMgQW5nZWJvdCcsXHJcbiAgICAgICdlbic6ICdJdFxcJ3MgUHJvYmFibHkgYSBUcmFwJyxcclxuICAgICAgJ2ZyJzogJ1VuIGRyw7RsZSBkZSBOYW1henUnLFxyXG4gICAgICAnamEnOiAn44Ku44On44OJ44Km54++44KL77yBJyxcclxuICAgICAgJ2tvJzogJ+q1kOuPhCDrk7HsnqUhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2NzQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6aG75L2Q5LmL55S35q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gU3VzYW5vJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQb29sIG9mIFRyaWJ1dGUnLFxyXG4gICAgICAnZnInOiAnTGEgQ3JpcXVlIGF1eCB0cmlidXRzJyxcclxuICAgICAgJ2phJzogJ+OCueOCteODjuOCquiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsiqTsgqzrhbjsmKQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDc3LFxyXG4gIH0sXHJcbiAgNjc3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mhu+S9kOS5i+eUt+atvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIFN1c2FubycsXHJcbiAgICAgICdlbic6ICdUaGUgUG9vbCBvZiBUcmlidXRlIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMYSBDcmlxdWUgYXV4IHRyaWJ1dHMgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgrnjgrXjg47jgqroqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOyKpOyCrOuFuOyYpCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzcsXHJcbiAgfSxcclxuICA2Nzk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56We6b6Z5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0vDtm5pZ2xpY2hlIE1lbmFnZXJpZScsXHJcbiAgICAgICdlbic6ICdUaGUgUm95YWwgTWVuYWdlcmllJyxcclxuICAgICAgJ2ZyJzogJ0xhIE3DqW5hZ2VyaWUgcm95YWxlJyxcclxuICAgICAgJ2phJzogJ+elnum+jeiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsi6Dro6Eg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDc2LFxyXG4gIH0sXHJcbiAgNjg0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6jumHjOaYgueDreeahOenmOetlicsXHJcbiAgICAgICdkZSc6ICdXZWdlIHp1ciBUcmFuc3plbmRlbnonLFxyXG4gICAgICAnZW4nOiAnVGhlIFJlc29uYW50JyxcclxuICAgICAgJ2ZyJzogJ0xhIHJ1c2UgZFxcJ1VyaWFuZ2VyJyxcclxuICAgICAgJ2phJzogJ+OCpuODquOCqOODs+OCuOOCp+OBruenmOetlicsXHJcbiAgICAgICdrbyc6ICfsnITrpqzslZnsoJzsnZgg67mE7LGFJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2ODg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6YKj6L6+5oWVJyxcclxuICAgICAgJ2RlJzogJ05hYWRhbScsXHJcbiAgICAgICdlbic6ICdOYWFkYW0nLFxyXG4gICAgICAnZnInOiAnTGEgZ3JhbmRlIGJhdGFpbGxlIGR1IE5hYWRhbScsXHJcbiAgICAgICdqYSc6ICfntYLnr4Djga7lkIjmiKYnLFxyXG4gICAgICAna28nOiAn6rOE7KCI64GdIO2VqeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjg5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mPluaImOe6ouiOsumYv+aLieexs+agvCcsXHJcbiAgICAgICdkZSc6ICdBbGEgTWhpZ28nLFxyXG4gICAgICAnZW4nOiAnQWxhIE1oaWdvJyxcclxuICAgICAgJ2ZyJzogJ0FsYSBNaGlnbycsXHJcbiAgICAgICdqYSc6ICfntIXok67msbrmiKYg44Ki44Op44Of44K0JyxcclxuICAgICAgJ2tvJzogJ+yVjOudvOuvuOqzoCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAyOTIsXHJcbiAgICAnb2Zmc2V0WSc6IC0xNjMsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2OTA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pe256m654ut57yd5aSW57yYJyxcclxuICAgICAgJ2RlJzogJ0ludGVyZGltZW5zaW9uYWxlciBSaXNzJyxcclxuICAgICAgJ2VuJzogJ0ludGVyZGltZW5zaW9uYWwgUmlmdCcsXHJcbiAgICAgICdmcic6ICdGaXNzdXJlIGludGVyZGltZW5zaW9ubmVsbGUnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT77ya5aSW57iBJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4g6IOyZuOqzvScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4OCxcclxuICB9LFxyXG4gIDY5MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g5b635bCU5aGU5bm75aKDMScsXHJcbiAgICAgICdkZSc6ICdEZWx0YW1ldHJpZSAxLjAnLFxyXG4gICAgICAnZW4nOiAnRGVsdGFzY2FwZSBWMS4wJyxcclxuICAgICAgJ2ZyJzogJ0RlbHRhc3RpY2UgdjEuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjg4fjg6vjgr/nt6gxJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDrjbjtg4DtjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4OCxcclxuICB9LFxyXG4gIDY5Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g5b635bCU5aGU5bm75aKDMicsXHJcbiAgICAgICdkZSc6ICdEZWx0YW1ldHJpZSAyLjAnLFxyXG4gICAgICAnZW4nOiAnRGVsdGFzY2FwZSBWMi4wJyxcclxuICAgICAgJ2ZyJzogJ0RlbHRhc3RpY2UgdjIuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjg4fjg6vjgr/nt6gyJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDrjbjtg4DtjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4OCxcclxuICB9LFxyXG4gIDY5Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g5b635bCU5aGU5bm75aKDMycsXHJcbiAgICAgICdkZSc6ICdEZWx0YW1ldHJpZSAzLjAnLFxyXG4gICAgICAnZW4nOiAnRGVsdGFzY2FwZSBWMy4wJyxcclxuICAgICAgJ2ZyJzogJ0RlbHRhc3RpY2UgdjMuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjg4fjg6vjgr/nt6gzJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDrjbjtg4DtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4OCxcclxuICB9LFxyXG4gIDY5NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g5b635bCU5aGU5bm75aKDNCcsXHJcbiAgICAgICdkZSc6ICdEZWx0YW1ldHJpZSA0LjAnLFxyXG4gICAgICAnZW4nOiAnRGVsdGFzY2FwZSBWNC4wJyxcclxuICAgICAgJ2ZyJzogJ0RlbHRhc3RpY2UgdjQuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjg4fjg6vjgr/nt6g0JyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDrjbjtg4DtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4OCxcclxuICB9LFxyXG4gIDY5NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g5b635bCU5aGU5bm75aKDMScsXHJcbiAgICAgICdkZSc6ICdEZWx0YW1ldHJpZSAxLjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRGVsdGFzY2FwZSBWMS4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0RlbHRhc3RpY2UgdjEuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44OH44Or44K/57eoMScsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog64247YOA7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4OCxcclxuICB9LFxyXG4gIDY5Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g5b635bCU5aGU5bm75aKDMicsXHJcbiAgICAgICdkZSc6ICdEZWx0YW1ldHJpZSAyLjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRGVsdGFzY2FwZSBWMi4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0RlbHRhc3RpY2UgdjIuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44OH44Or44K/57eoMicsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog64247YOA7Y64KOyYgeybhSkgMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4OCxcclxuICB9LFxyXG4gIDY5Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g5b635bCU5aGU5bm75aKDMycsXHJcbiAgICAgICdkZSc6ICdEZWx0YW1ldHJpZSAzLjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRGVsdGFzY2FwZSBWMy4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0RlbHRhc3RpY2UgdjMuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44OH44Or44K/57eoMycsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog64247YOA7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4OCxcclxuICB9LFxyXG4gIDY5ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g5b635bCU5aGU5bm75aKDNCcsXHJcbiAgICAgICdkZSc6ICdEZWx0YW1ldHJpZSA0LjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRGVsdGFzY2FwZSBWNC4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0RlbHRhc3RpY2UgdjQuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44OH44Or44K/57eoNCcsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog64247YOA7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4OCxcclxuICB9LFxyXG4gIDcwNToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKfkvJrlvIDlp4snLFxyXG4gICAgICAnZGUnOiAnVGhhbCB6dSBFaHJlbicsXHJcbiAgICAgICdlbic6ICdJbiBUaGFsXFwncyBOYW1lJyxcclxuICAgICAgJ2ZyJzogJ0xlIHRvdXJub2kgY29tbcOpbW9yYXRpZiBkdSBzdWx0YW5hdCcsXHJcbiAgICAgICdqYSc6ICfjgqbjg6vnjovmna/pl5jmioDkvJrjga7lp4vjgb7jgoonLFxyXG4gICAgICAna28nOiAn7Jq464uk7ZWYIOyZleyLpOuwsCDtiKzquLDrjIDtmownLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOCxcclxuICB9LFxyXG4gIDcwNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuLrkuobmm7TlvLonLFxyXG4gICAgICAnZGUnOiAnRGllIGhvaGUgS3Vuc3QgZGVzIFNjaHdlcnRrYW1wZnMnLFxyXG4gICAgICAnZW4nOiAnUmFpc2luZyB0aGUgU3dvcmQnLFxyXG4gICAgICAnZnInOiAnTGEgZmluYWxlIGRlcyBjaGFtcGlvbnMnLFxyXG4gICAgICAnamEnOiAn44GV44KJ44Gq44KL5Ymj6KGT44Gu6auY44G/44G4JyxcclxuICAgICAgJ2tvJzogJ+uNlCDrhpLsnYAg6rKA7Iig7J2YIOqyveyngOuhnCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4LFxyXG4gIH0sXHJcbiAgNzA3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aKl+S6ieS5i+WKmycsXHJcbiAgICAgICdkZSc6ICdEaWUgS3JhZnQgZGVzIFdpZGVyc3RhbmRzJyxcclxuICAgICAgJ2VuJzogJ1dpdGggSGVhcnQgYW5kIFN0ZWVsJyxcclxuICAgICAgJ2ZyJzogJ1RyYW5zbWlncmF0aW9uIGTDqW1vbmlhcXVlJyxcclxuICAgICAgJ2phJzogJ+aKl+OBhuWKmycsXHJcbiAgICAgICdrbyc6ICfrp57shJzripQg7Z6YJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDI5OCxcclxuICAgICdvZmZzZXRZJzogMzUwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzNyxcclxuICB9LFxyXG4gIDcwODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmtbfpg73ot6/kurrouqvpppblvIInLFxyXG4gICAgICAnZGUnOiAnTW9yZCBpc3Qgc2VpbiBIb2JieScsXHJcbiAgICAgICdlbic6ICdCbG9vZCBvbiB0aGUgRGVjaycsXHJcbiAgICAgICdmcic6ICdMYSBsw6lnZW5kZSBkZSBNdXNvc2FpPEluZGVudC8+OiBsXFwnYXNzYXNzaW4gZGUgTGltc2EgTG9taW5zYScsXHJcbiAgICAgICdqYSc6ICfmtbfpg73jgpLpnIfjgo/jgZnkurrmlqzjgorjga7lrrTvvIEnLFxyXG4gICAgICAna28nOiAn7ZW07JaR64+E7Iuc66W8IO2dlOuTnOuKlCDsgrTsnbjsnpDsnZgg7Jew7ZqMIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzA5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aegeaBtuS5i+S6uuacqOaerycsXHJcbiAgICAgICdkZSc6ICdEZXIgSW5iZWdyaWZmIGRlcyBCw7ZzZW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIEZhY2Ugb2YgVHJ1ZSBFdmlsJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdhYm9taW5hYmxlIEtvZ2FyYXNoaScsXHJcbiAgICAgICdqYSc6ICfmpbXmgqrkurrjgrPjgqzjg6njgrcnLFxyXG4gICAgICAna28nOiAn6re57JWF66y064+E7ZWcIOy9lOqwgOudvOyLnCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA5NSxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQ5LFxyXG4gIH0sXHJcbiAgNzEwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+advuWPtumXqOWkluS5i+WPmCcsXHJcbiAgICAgICdkZSc6ICdWb3JmYWxsIGF1ZiBkZW0gTWF0c3ViYS1QbGF0eicsXHJcbiAgICAgICdlbic6ICdNYXRzdWJhIE1heWhlbScsXHJcbiAgICAgICdmcic6ICdSw6hnbGVtZW50IGRlIGNvbXB0ZSBhdSBzcXVhcmUgTWF0c3ViYScsXHJcbiAgICAgICdqYSc6ICfmnb7okYnploDlpJbjga7lpIknLFxyXG4gICAgICAna28nOiAn66eI7Lig67CUIOyCrOuzgCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4MixcclxuICB9LFxyXG4gIDcxMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflhrPmiJjpvp/nlLLlspsnLFxyXG4gICAgICAnZGUnOiAnRW50PFNvZnRIeXBoZW4vPnNjaGVpPFNvZnRIeXBoZW4vPmR1bmdzPFNvZnRIeXBoZW4vPnNjaGxhY2h0IGF1ZiBCZWtrbycsXHJcbiAgICAgICdlbic6ICdUaGUgQmF0dGxlIG9uIEJla2tvJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdhZjxTb2Z0SHlwaGVuLz5mcm9uPFNvZnRIeXBoZW4vPnRlPFNvZnRIeXBoZW4vPm1lbnQgZGUgZGV1eCBqdXN0aWNlcycsXHJcbiAgICAgICdqYSc6ICfjg5njg4PjgrPjgqbls7bjga7msbrpl5gnLFxyXG4gICAgICAna28nOiAn67Kg7L2U7JqwIOyErOydmCDqsrDtiKwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODMsXHJcbiAgfSxcclxuICA3MTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDksXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6L+Q5rKz5a6d54mp5bqTJyxcclxuICAgICAgJ2RlJzogJ0thbsOkbGUgdm9uIFV6bmFpcicsXHJcbiAgICAgICdlbic6ICdUaGUgTG9zdCBDYW5hbHMgb2YgVXpuYWlyJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBDYW5hdXggcGVyZHVzIGRcXCdVem5haXInLFxyXG4gICAgICAnamEnOiAn5a6d54mp5bqrIOOCpuOCuuODjeOCouOCq+ODiuODqycsXHJcbiAgICAgICdrbyc6ICfrs7TrrLzqs6Ag7Jqw7KaI64Sk7Ja0IOyatO2VmCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzEzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a8hum7keeahOW3qOm+mScsXHJcbiAgICAgICdkZSc6ICdEZXIgdG9iZW5kZSBEcmFjaGUnLFxyXG4gICAgICAnZW4nOiAnRGFyayBhcyB0aGUgTmlnaHQgU2t5JyxcclxuICAgICAgJ2ZyJzogJ0F1c3NpIHNvbWJyZSBxdWUgbGEgbnVpdCcsXHJcbiAgICAgICdqYSc6ICfmvIbpu5Ljga7lt6jnq5wnLFxyXG4gICAgICAna28nOiAn7Lmg7Z2R7J2YIOqxsOujoScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4NSxcclxuICB9LFxyXG4gIDcxNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnuqLooYDkuYvpvpnpqpHlo6snLFxyXG4gICAgICAnZGUnOiAnRGVyIFJ1YmluLURyYWNoZW5yZWl0ZXInLFxyXG4gICAgICAnZW4nOiAnRHJhZ29uIFNvdW5kJyxcclxuICAgICAgJ2ZyJzogJ0xlIERyYWdvbiDDqWNhcmxhdGUnLFxyXG4gICAgICAnamEnOiAn57SF44Gu56uc6aiO5aOrJyxcclxuICAgICAgJ2tvJzogJ+u2ieydgCDsmqnquLDsgqwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDcxNToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpgaXov5znmoTmhqfmhqwnLFxyXG4gICAgICAnZGUnOiAnUHJvYmUgZGVzIE1laXN0ZXJzJyxcclxuICAgICAgJ2VuJzogJ1RoZSBPcnBoYW5zIGFuZCB0aGUgQnJva2VuIEJsYWRlJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdhc3BpcmF0aW9uIHJlZm91bMOpZScsXHJcbiAgICAgICdqYSc6ICfjgYLjgajkuInluqbjgIHpgaXjgYvjgarmhqfmhqwnLFxyXG4gICAgICAna28nOiAn7JWe7Jy866GcIOyEuCDrsogsIOyVhOuTne2VnCDrj5nqsr0nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogOTUsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4NixcclxuICB9LFxyXG4gIDcxNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflho3mrKHnm7jop4EnLFxyXG4gICAgICAnZGUnOiAnQXVzIGRlciBUaWVmZSBkZXMgSGVyemVucycsXHJcbiAgICAgICdlbic6ICdPdXIgQ29tcHJvbWlzZScsXHJcbiAgICAgICdmcic6ICdMYSBkZXJuacOocmUgc8OpcGFyYXRpb24nLFxyXG4gICAgICAnamEnOiAn44GC44Go5LiA5bqm44CB5ZCb44Gr5Lya44GI44Gf44KJJyxcclxuICAgICAgJ2tvJzogJ+yVnuycvOuhnCDtlZwg67KILCDrhIjsmYAg66eM64KgIOyImCDsnojri6TrqbQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjgsXHJcbiAgfSxcclxuICA3MTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Y6f5Yid55qE5oiY5aOrJyxcclxuICAgICAgJ2RlJzogJ0RpZSBVcmtyYWZ0IGluIGlocicsXHJcbiAgICAgICdlbic6ICdDdXJpb3VzIEdvcmdlIE1lZXRzIEhpcyBNYXRjaCcsXHJcbiAgICAgICdmcic6ICdMXFwnw6lwcmV1dmUgZGUgZm9yY2UnLFxyXG4gICAgICAnamEnOiAn5Y6f5Yid55qE44Gq5b285aWzJyxcclxuICAgICAgJ2tvJzogJ+ybkOy0iOyggSDqt7jrhYAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTc3LFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzE4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eHg+eDp+WQp+mrmOWQiScsXHJcbiAgICAgICdkZSc6ICdLcmllZ2VyaXNjaGUgTGVpZGVuc2NoYWZ0JyxcclxuICAgICAgJ2VuJzogJ1RoZSBIZWFydCBvZiB0aGUgUHJvYmxlbScsXHJcbiAgICAgICdmcic6ICdQYXNzaW9uIGd1ZXJyacOocmUnLFxyXG4gICAgICAnamEnOiAn54eD44GI44KI44K044O844K477yBJyxcclxuICAgICAgJ2tvJzogJ+u2iO2DgOyYrOudvOudvCwg7IKw6rOo7Kec6riwIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4NSxcclxuICB9LFxyXG4gIDcxOToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflkInnpaXlpKnlpbPmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBMYWtzaG1pJyxcclxuICAgICAgJ2VuJzogJ0VtYW5hdGlvbicsXHJcbiAgICAgICdmcic6ICfDiW1hbmF0aW9uJyxcclxuICAgICAgJ2phJzogJ+ODqeOCr+OCt+ODpeODn+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfrnb3siojrr7gg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDg3LFxyXG4gIH0sXHJcbiAgNzIwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WQieelpeWkqeWls+atvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIExha3NobWknLFxyXG4gICAgICAnZW4nOiAnRW1hbmF0aW9uIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICfDiW1hbmF0aW9uIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Op44Kv44K344Ol44Of6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrnb3siojrr7gg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDg3LFxyXG4gIH0sXHJcbiAgNzIyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+epv+i2iuaXtuepuueahOWkmeaEvycsXHJcbiAgICAgICdkZSc6ICdFaW4gV3Vuc2NoIGF1cyBhbHRlbiBaZWl0ZW4nLFxyXG4gICAgICAnZW4nOiAnT3VyIFVuc3VuZyBIZXJvZXMnLFxyXG4gICAgICAnZnInOiAnTFxcJ2VzcG9pciBlbiBow6lyaXRhZ2UnLFxyXG4gICAgICAnamEnOiAn5pmC44KS44GL44GR44KL6aGY44GEJyxcclxuICAgICAgJ2tvJzogJ+yLnOqwhOydhCDrm7DslrTrhJjsnYAg7Je87JuQJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xNzUsXHJcbiAgICAnb2Zmc2V0WSc6IC0yOTcsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDYzLFxyXG4gIH0sXHJcbiAgNzIzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W9semakOW/jeazlei0tCcsXHJcbiAgICAgICdkZSc6ICdBdXMgZGVtIFZlcmJvcmdlbmVuJyxcclxuICAgICAgJ2VuJzogJ1doZW4gQ2xhbnMgQ29sbGlkZScsXHJcbiAgICAgICdmcic6ICdMYSBiYXRhaWxsZSBkZXMgY2xhbnMnLFxyXG4gICAgICAnamEnOiAn5b2x6Zqg5b+N5rOV5biWJyxcclxuICAgICAgJ2tvJzogJ+q3uOumvOyekCDsnbjrspXssqknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODUsXHJcbiAgfSxcclxuICA3MjU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDksXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6L+Q5rKz5a6d54mp5bqT5rex5bGCJyxcclxuICAgICAgJ2RlJzogJ1Zlcmdlc3NlbmUgS2Fuw6RsZSB2b24gVXpuYWlyJyxcclxuICAgICAgJ2VuJzogJ1RoZSBIaWRkZW4gQ2FuYWxzIG9mIFV6bmFpcicsXHJcbiAgICAgICdmcic6ICdMZXMgQ2FuYXV4IGNhY2jDqXMgZFxcJ1V6bmFpcicsXHJcbiAgICAgICdqYSc6ICflrp3nianluqsg44Km44K644ON44Ki44Kr44OK44Or5rex5bGkJyxcclxuICAgICAgJ2tvJzogJ+uztOusvOqzoCDsmrDspojrhKTslrQg7Jq07ZWYIOyLrOy4tScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzI5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i3nemqqOeglOeptuaJgCAo5py65Yqo5oiYKScsXHJcbiAgICAgICdkZSc6ICdBc3RyYWdhbG9zJyxcclxuICAgICAgJ2VuJzogJ0FzdHJhZ2Fsb3MnLFxyXG4gICAgICAnZnInOiAnQXN0cmFnYWxvcyAobWFjaGluZXJpZSknLFxyXG4gICAgICAnamEnOiAn44Ki44K544OI44Op44Ks44Ot44K5ICjmqZ/lt6XmiKYpJyxcclxuICAgICAgJ2tvJzogJ+yVhOyKpO2KuOudvOqwiOuhnOyKpCjquLDqs7XsoIQpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3MzA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56We6b6Z5qKm5bm75q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0hlbGRlbmxpZWQgdm9uIFNoaW5yeXUnLFxyXG4gICAgICAnZW4nOiAnVGhlIE1pbnN0cmVsXFwncyBCYWxsYWQ6IFNoaW5yeXVcXCdzIERvbWFpbicsXHJcbiAgICAgICdmcic6ICdMZSBkb21haW5lIGRlIFNoaW5yeXUnLFxyXG4gICAgICAnamEnOiAn5qW156We6b6N6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDsi6Dro6Eg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDc2LFxyXG4gIH0sXHJcbiAgNzMxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+ayieayoeelnuauv+aWr+WNoeaLiemBl+i/uScsXHJcbiAgICAgICdkZSc6ICdEaWUgdmVyc3Vua2VuZSBTdGFkdCBTa2FsbGEnLFxyXG4gICAgICAnZW4nOiAnVGhlIERyb3duZWQgQ2l0eSBvZiBTa2FsbGEnLFxyXG4gICAgICAnZnInOiAnTGEgQ2l0w6kgZW5nbG91dGllIGRlIFNrYWxsYScsXHJcbiAgICAgICdqYSc6ICfmsLTmsqHpgbrmp4sg44K544Kr44OpJyxcclxuICAgICAgJ2tvJzogJ+yKpOy5vOudvCDsnKDsoIEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMTg1LFxyXG4gICAgJ29mZnNldFknOiA1LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzMyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyNixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnpoHlnLDkvJjpm7fljaEg5bi46aOO5LmL5ZywJyxcclxuICAgICAgJ2RlJzogJ0V1cmVrYSBBbmVtb3MnLFxyXG4gICAgICAnZW4nOiAnVGhlIEZvcmJpZGRlbiBMYW5kLCBFdXJla2EgQW5lbW9zJyxcclxuICAgICAgJ2ZyJzogJ0V1csOqa2EgQW5lbW9zJyxcclxuICAgICAgJ2phJzogJ+emgeaWreOBruWcsCDjgqjjgqbjg6zjgqvvvJrjgqLjg43jg6Ljgrnnt6gnLFxyXG4gICAgICAna28nOiAn6riI64uo7J2YIOuVhSDsl5DsmrDroIjsubQ6IOyVhOuEpOuqqOyKpO2OuCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MSxcclxuICB9LFxyXG4gIDczMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjgsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m557ud5aKD5oiYJyxcclxuICAgICAgJ2RlJzogJ0VuZGxvc2UgU2NoYXR0ZW4gdm9uIEJhaGFtdXQgKGZhdGFsKScsXHJcbiAgICAgICdlbic6ICdUaGUgVW5lbmRpbmcgQ29pbCBvZiBCYWhhbXV0IChVbHRpbWF0ZSknLFxyXG4gICAgICAnZnInOiAnTFxcJ0Fiw65tZSBpbmZpbmkgZGUgQmFoYW11dCAoZmF0YWwpJyxcclxuICAgICAgJ2phJzogJ+e1tuODkOODj+ODoOODvOODiOiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsoIgg67CU7ZWY66y07Yq4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzM0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkseiQveS5i+mDveaLieW3tOe6s+aWr+WhlCcsXHJcbiAgICAgICdkZSc6ICdSYWJhbmFzdHJlJyxcclxuICAgICAgJ2VuJzogJ1RoZSBSb3lhbCBDaXR5IG9mIFJhYmFuYXN0cmUnLFxyXG4gICAgICAnZnInOiAnTGEgQ2l0w6kgcm95YWxlIGRlIFJhYmFuYXN0cmUnLFxyXG4gICAgICAnamEnOiAn5aSx44KP44KM44Gf6YO9IOODqeODkOODiuOCueOCvycsXHJcbiAgICAgICdrbyc6ICfsmZXrj4Qg652867CU64KY7Iqk7YSwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDMwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc0MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Imv57yY5Luq5byPJyxcclxuICAgICAgJ2RlJzogJ1ZhbGVudGlvbnplcmVtb25pZScsXHJcbiAgICAgICdlbic6ICdUaGUgVmFsZW50aW9uZVxcJ3MgQ2VyZW1vbnknLFxyXG4gICAgICAnZnInOiAnTGEgQ8OpcsOpbW9uaWUgZGUgbGEgVmFsZW50aW9uJyxcclxuICAgICAgJ2phJzogJ+ODtOOCoeODrOODs+ODhuOCo+OCquODs+OCu+ODrOODouODi+ODvCcsXHJcbiAgICAgICdrbyc6ICfrsJzroIzti7DsmKgg7JiI7Iud7J6lJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDEyNSxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc0Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnuqLnjonngavlsbHni7HkuYvnm5YnLFxyXG4gICAgICAnZGUnOiAnSMO2bGxlbnNwdW5kJyxcclxuICAgICAgJ2VuJzogJ0hlbGxzXFwnIExpZCcsXHJcbiAgICAgICdmcic6ICdMZSBDb3V2ZXJjbGUgZGVzIGVuZmVycycsXHJcbiAgICAgICdqYSc6ICfntIXnjonngavlsbEg542E5LmL6JOLJyxcclxuICAgICAgJ2tvJzogJ+yngOyYpeuanOq7kScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzQzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eWr+eLguaImOiIsOaXoOmZkOWbnuW7iicsXHJcbiAgICAgICdkZSc6ICdEaWUgRnJha3RhbC1Lb250aW51dW0gKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnVGhlIEZyYWN0YWwgQ29udGludXVtIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZSBDb250aW51dW0gZnJhY3RhbCAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfmmrTotbDmiKboiaYg44OV44Op44Kv44K/44Or44O744Kz44Oz44OG44Kj44OL44Ki44OgIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfrrLTtlZzsl7Dsho0g67CV66y87ZWoKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMzUwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzQ1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e+pOeLvOebm+WutCAo5oiY6Zif5q615L2N6LWbKScsXHJcbiAgICAgICdkZSc6ICdUaGUgRmVhc3QgKFRlYW0sIGdld2VydGV0KScsXHJcbiAgICAgICdlbic6ICdUaGUgRmVhc3QgKFRlYW0gUmFua2VkKScsXHJcbiAgICAgICdmcic6ICdUaGUgRmVhc3QgKGNsYXNzw6kvw6lxdWlwZSBKY0opJyxcclxuICAgICAgJ2phJzogJ+OCtuODu+ODleOCo+ODvOOCueODiCAo44OB44O844Og55So44Op44Oz44Kv44Oe44OD44OBKScsXHJcbiAgICAgICdrbyc6ICfrjZQg7ZS87Iqk7Yq4ICjtjIAg65Ox6riJ7KCEKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MCxcclxuICB9LFxyXG4gIDc0Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnmb3omY7plYfprYLmiJgnLFxyXG4gICAgICAnZGUnOiAnU2VlbGVudGFueiAtIEJ5YWtrbycsXHJcbiAgICAgICdlbic6ICdUaGUgSmFkZSBTdG9hJyxcclxuICAgICAgJ2ZyJzogJ0xhIENsYWlyacOocmUgZGUgSmFkZScsXHJcbiAgICAgICdqYSc6ICfnmb3omY7lvoHprYLmiKYnLFxyXG4gICAgICAna28nOiAn67Cx7Zi4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MyxcclxuICB9LFxyXG4gIDc0ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMScsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAxLjAnLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMS4wJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjEuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjgrfjgrDjg57nt6gxJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDsi5zqt7jrp4jtjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc0OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMicsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAyLjAnLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMi4wJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjIuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjgrfjgrDjg57nt6gyJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDsi5zqt7jrp4jtjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMycsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAzLjAnLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMy4wJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjMuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjgrfjgrDjg57nt6gzJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDsi5zqt7jrp4jtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDNCcsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSA0LjAnLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWNC4wJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjQuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjgrfjgrDjg57nt6g0JyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDsi5zqt7jrp4jtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMScsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAxLjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMS4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjEuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44K344Kw44Oe57eoMScsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7Iuc6re466eI7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMicsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAyLjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMi4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjIuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44K344Kw44Oe57eoMicsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7Iuc6re466eI7Y64KOyYgeybhSkgMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMycsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAzLjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMy4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjMuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44K344Kw44Oe57eoMycsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7Iuc6re466eI7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDNCcsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSA0LjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWNC4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjQuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44K344Kw44Oe57eoNCcsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7Iuc6re466eI7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnmb3omY7or5fprYLmiJgnLFxyXG4gICAgICAnZGUnOiAnU2VlbGVuc3R1cm0gLSBCeWFra28nLFxyXG4gICAgICAnZW4nOiAnVGhlIEphZGUgU3RvYSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGEgQ2xhaXJpw6hyZSBkZSBKYWRlIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW155m96JmO5b6B6a2C5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrsLHtmLgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDkzLFxyXG4gIH0sXHJcbiAgNzU5OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSa546b6aOe5ZywJyxcclxuICAgICAgJ2RlJzogJ0RvbWFuaXNjaGUgRW5rbGF2ZScsXHJcbiAgICAgICdlbic6ICdUaGUgRG9tYW4gRW5jbGF2ZScsXHJcbiAgICAgICdmcic6ICdRdWFydGllciBlbmNsYXbDqSBkZSBEb21hJyxcclxuICAgICAgJ2phJzogJ+ODieODnueUuuS6uuWcsCcsXHJcbiAgICAgICdrbyc6ICfrj4Trp4gg64+E7J2N7KeAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDIzLFxyXG4gICAgJ29mZnNldFknOiAzNCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODQsXHJcbiAgfSxcclxuICA3NjE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn54Gr6b6Z54up54yO5oiYJyxcclxuICAgICAgJ2RlJzogJ0phZ2QgYXVmIFJhdGhhbG9zJyxcclxuICAgICAgJ2VuJzogJ1RoZSBHcmVhdCBIdW50JyxcclxuICAgICAgJ2ZyJzogJ0NoYXNzZSBhdSBSYXRoYWxvcycsXHJcbiAgICAgICdqYSc6ICfjg6rjgqrjg6zjgqbjgrnni6nnjJ/miKYnLFxyXG4gICAgICAna28nOiAn66as7Jik66CI7Jqw7IqkIOyImOugteyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzYyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eBq+m+meS4iuS9jeeLqeeMjuaImCcsXHJcbiAgICAgICdkZSc6ICdKYWdkIGF1ZiBSYXRoYWxvcyAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaGUgR3JlYXQgSHVudCAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnQ2hhc3NlIGF1IFJhdGhhbG9zIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Oq44Kq44Os44Km44K554up54yf5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrpqzsmKTroIjsmrDsiqQg7IiY66C17KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NjM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+emgeWcsOS8mOmbt+WNoSDmgZLlhrDkuYvlnLAnLFxyXG4gICAgICAnZGUnOiAnRXVyZWthIFBhZ29zJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGb3JiaWRkZW4gTGFuZCwgRXVyZWthIFBhZ29zJyxcclxuICAgICAgJ2ZyJzogJ0V1csOqa2EgUGFnb3MnLFxyXG4gICAgICAnamEnOiAn56aB5pat44Gu5ZywIOOCqOOCpuODrOOCq++8muODkeOCtOOCuee3qCcsXHJcbiAgICAgICdrbyc6ICfquIjri6jsnZgg65WFIOyXkOyasOugiOy5tDog7YyM6rOg7Iqk7Y64JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDk0LFxyXG4gIH0sXHJcbiAgNzY1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e+pOeLvOebm+WutCAo5q615L2N6LWbKScsXHJcbiAgICAgICdkZSc6ICdUaGUgRmVhc3QgKGdld2VydGV0KScsXHJcbiAgICAgICdlbic6ICdUaGUgRmVhc3QgKFJhbmtlZCknLFxyXG4gICAgICAnZnInOiAnVGhlIEZlYXN0IChjbGFzc8OpKScsXHJcbiAgICAgICdqYSc6ICfjgrbjg7vjg5XjgqPjg7zjgrnjg4ggKOODqeODs+OCr+ODnuODg+ODgSknLFxyXG4gICAgICAna28nOiAn642UIO2UvOyKpO2KuCAo65Ox6riJ7KCEKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MCxcclxuICB9LFxyXG4gIDc2Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnvqTni7znm5vlrrQgKOe7g+S5oOi1myknLFxyXG4gICAgICAnZGUnOiAnVGhlIEZlYXN0ICjDnGJ1bmdza2FtcGYpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGZWFzdCAoVHJhaW5pbmcpJyxcclxuICAgICAgJ2ZyJzogJ1RoZSBGZWFzdCAoZW48U29mdEh5cGhlbi8+dHJhw648U29mdEh5cGhlbi8+bmU8U29mdEh5cGhlbi8+bWVudCknLFxyXG4gICAgICAnamEnOiAn44K244O744OV44Kj44O844K544OIICjjgqvjgrjjg6XjgqLjg6vjg57jg4Pjg4EpJyxcclxuICAgICAgJ2tvJzogJ+uNlCDtlLzsiqTtirggKOydvOuwmOyghCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTAsXHJcbiAgfSxcclxuICA3Njc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDYsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn576k54u855ub5a60ICjmsLTmmbbloZTmvJTkuaDlnLrvvJroh6rlrprotZspJyxcclxuICAgICAgJ2RlJzogJ1RoZSBGZWFzdCAoS3Jpc3RhbGx0dXJtLUFyZW5hOiBTY2hhdWthbXBmKScsXHJcbiAgICAgICdlbic6ICdUaGUgRmVhc3QgKEN1c3RvbSBNYXRjaCAtIENyeXN0YWwgVG93ZXIpJyxcclxuICAgICAgJ2ZyJzogJ1RoZSBGZWFzdCAocGVyc29ubmFsaXPDqS9Ub3VyIGRlIENyaXN0YWwpJyxcclxuICAgICAgJ2phJzogJ+OCtuODu+ODleOCo+ODvOOCueODiCAo44Kv44Oq44K544K/44Or44K/44Ov44O85ryU57+S5aC077ya44Kr44K544K/44Og44Oe44OD44OB77yJJyxcclxuICAgICAgJ2tvJzogJ+uNlCDtlLzsiqTtirggKO2BrOumrOyKpO2DiCDtg4Dsm4wg7ZuI66Co7J6lOiDsuZzshKAg6rK96riwKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MCxcclxuICB9LFxyXG4gIDc2ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpo47msLTngbXlupnlsqnnh5XlupknLFxyXG4gICAgICAnZGUnOiAnS29tcGFzcyBkZXIgU2Nod2FsYmUnLFxyXG4gICAgICAnZW4nOiAnVGhlIFN3YWxsb3dcXCdzIENvbXBhc3MnLFxyXG4gICAgICAnZnInOiAnTGUgQ29tcGFzIGRlIGxcXCdIaXJvbmRlbGxlJyxcclxuICAgICAgJ2phJzogJ+miqOawtOmciuauvyDjgqzjg7Pjgqjjg7Plu58nLFxyXG4gICAgICAna28nOiAn6rCV7JeUIOyiheusmCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAyNDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3Njk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ouC5pmT55qE5bCR5bm0JyxcclxuICAgICAgJ2RlJzogJ0RlciBLbmFiZSBkZXIgTW9yZ2VucsO2dGUnLFxyXG4gICAgICAnZW4nOiAnRW1pc3Nhcnkgb2YgdGhlIERhd24nLFxyXG4gICAgICAnZnInOiAnVm95YWdlIGVuIHRlcnJlIGhvc3RpbGUnLFxyXG4gICAgICAnamEnOiAn44CM5pqB44CN44Gu5bCR5bm0JyxcclxuICAgICAgJ2tvJzogJ1xcJ+yDiOuyvVxcJ+ydmCDshozrhYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc3MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5LmL5b6h5p+xIDHvvZ4xMOWxgicsXHJcbiAgICAgICdkZSc6ICdIaW1tZWxzc8OkdWxlIChFYmVuZW4gMS0xMCknLFxyXG4gICAgICAnZW4nOiAnSGVhdmVuLW9uLUhpZ2ggIChGbG9vcnMgMS0xMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGlsaWVyIGRlcyBDaWV1eCAow6l0YWdlcyAxLTEwKScsXHJcbiAgICAgICdqYSc6ICfjgqLjg6Hjg47jg5/jg4/jgrfjg6kgMe+9njEw5bGkJyxcclxuICAgICAgJ2tvJzogJ+yynOq2ge2DkSAxfjEw7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NzE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkqeS5i+W+oeafsSAxMe+9njIw5bGCJyxcclxuICAgICAgJ2RlJzogJ0hpbW1lbHNzw6R1bGUgKEViZW5lbiAxMS0yMCknLFxyXG4gICAgICAnZW4nOiAnSGVhdmVuLW9uLUhpZ2ggIChGbG9vcnMgMTEtMjApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBpbGllciBkZXMgQ2lldXggKMOpdGFnZXMgMTEtMjApJyxcclxuICAgICAgJ2phJzogJ+OCouODoeODjuODn+ODj+OCt+ODqSAxMe+9njIw5bGkJyxcclxuICAgICAgJ2tvJzogJ+yynOq2ge2DkSAxMX4yMOy4tScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzcyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnkuYvlvqHmn7EgMjHvvZ4zMOWxgicsXHJcbiAgICAgICdkZSc6ICdIaW1tZWxzc8OkdWxlIChFYmVuZW4gMjEtMzApJyxcclxuICAgICAgJ2VuJzogJ0hlYXZlbi1vbi1IaWdoICAoRmxvb3JzIDIxLTMwKScsXHJcbiAgICAgICdmcic6ICdMZSBQaWxpZXIgZGVzIENpZXV4ICjDqXRhZ2VzIDIxLTMwKScsXHJcbiAgICAgICdqYSc6ICfjgqLjg6Hjg47jg5/jg4/jgrfjg6kgMjHvvZ4zMOWxpCcsXHJcbiAgICAgICdrbyc6ICfsspzqtoHtg5EgMjF+MzDsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc3Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5LmL5b6h5p+xIDQx772eNTDlsYInLFxyXG4gICAgICAnZGUnOiAnSGltbWVsc3PDpHVsZSAoRWJlbmVuIDQxLTUwKScsXHJcbiAgICAgICdlbic6ICdIZWF2ZW4tb24tSGlnaCAgKEZsb29ycyA0MS01MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGlsaWVyIGRlcyBDaWV1eCAow6l0YWdlcyA0MS01MCknLFxyXG4gICAgICAnamEnOiAn44Ki44Oh44OO44Of44OP44K344OpIDQx772eNTDlsaQnLFxyXG4gICAgICAna28nOiAn7LKc6raB7YORIDQxfjUw7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NzQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkqeS5i+W+oeafsSA2Me+9njcw5bGCJyxcclxuICAgICAgJ2RlJzogJ0hpbW1lbHNzw6R1bGUgKEViZW5lbiA2MS03MCknLFxyXG4gICAgICAnZW4nOiAnSGVhdmVuLW9uLUhpZ2ggIChGbG9vcnMgNjEtNzApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBpbGllciBkZXMgQ2lldXggKMOpdGFnZXMgNjEtNzApJyxcclxuICAgICAgJ2phJzogJ+OCouODoeODjuODn+ODj+OCt+ODqSA2Me+9njcw5bGkJyxcclxuICAgICAgJ2tvJzogJ+yynOq2ge2DkSA2MX43MOy4tScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzc1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnkuYvlvqHmn7EgODHvvZ45MOWxgicsXHJcbiAgICAgICdkZSc6ICdIaW1tZWxzc8OkdWxlIChFYmVuZW4gODEtOTApJyxcclxuICAgICAgJ2VuJzogJ0hlYXZlbi1vbi1IaWdoICAoRmxvb3JzIDgxLTkwKScsXHJcbiAgICAgICdmcic6ICdMZSBQaWxpZXIgZGVzIENpZXV4ICjDqXRhZ2VzIDgxLTkwKScsXHJcbiAgICAgICdqYSc6ICfjgqLjg6Hjg47jg5/jg4/jgrfjg6kgODHvvZ45MOWxpCcsXHJcbiAgICAgICdrbyc6ICfsspzqtoHtg5EgODF+OTDsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc3Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflsIHpl63lnKPloZTpu47pk47mi4nnurPlpKfnga/loZQnLFxyXG4gICAgICAnZGUnOiAnUmljaHRmZXVlciB2b24gUmlkb3JhbmEnLFxyXG4gICAgICAnZW4nOiAnVGhlIFJpZG9yYW5hIExpZ2h0aG91c2UnLFxyXG4gICAgICAnZnInOiAnTGUgUGhhcmUgZGUgUmlkb3JhbmEnLFxyXG4gICAgICAnamEnOiAn5bCB44GY44KJ44KM44Gf6IGW5aGUIOODquODieODq+OCouODiicsXHJcbiAgICAgICdrbyc6ICfrjIDrk7HrjIAg66as64+E66W07JWE64KYJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDIwMixcclxuICAgICdvZmZzZXRZJzogLTkyLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzc3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyOCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnqbbmnoHnpZ7lhbXnu53looPmiJgnLFxyXG4gICAgICAnZGUnOiAnSGVsZGVubGllZCB2b24gVWx0aW1hIChmYXRhbCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFdlYXBvblxcJ3MgUmVmcmFpbiAoVWx0aW1hdGUpJyxcclxuICAgICAgJ2ZyJzogJ0xhIEZhbnRhc21hZ29yaWUgZFxcJ1VsdGltYSAoZmF0YWwpJyxcclxuICAgICAgJ2phJzogJ+e1tuOCouODq+ODhuODnuOCpuOCp+ODneODs+egtOWjiuS9nOaIpicsXHJcbiAgICAgICdrbyc6ICfsoIgg7JWM7YWM66eIIOybqO2PsCDtjIzqtLTsnpHsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjYsXHJcbiAgfSxcclxuICA3Nzg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pyI6K+75q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gVHN1a3V5b21pJyxcclxuICAgICAgJ2VuJzogJ0Nhc3RydW0gRmx1bWluaXMnLFxyXG4gICAgICAnZnInOiAnQ2FzdHJ1bSBGbHVtaW5pcycsXHJcbiAgICAgICdqYSc6ICfjg4Tjgq/jg6jjg5/oqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7Lig7L+g7JqU66+4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzc5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aciOivu+W5veWknOatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIFRzdWt1eW9taScsXHJcbiAgICAgICdlbic6ICdUaGUgTWluc3RyZWxcXCdzIEJhbGxhZDogVHN1a3V5b21pXFwncyBQYWluJyxcclxuICAgICAgJ2ZyJzogJ0Nhc3RydW0gRmx1bWluaXMgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjg4Tjgq/jg6jjg5/oqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOy4oOy/oOyalOuvuCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc4Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5LmL5b6h5p+xIDMx772eNDDlsYInLFxyXG4gICAgICAnZGUnOiAnSGltbWVsc3PDpHVsZSAoRWJlbmVuIDMxLTQwKScsXHJcbiAgICAgICdlbic6ICdIZWF2ZW4tb24tSGlnaCAgKEZsb29ycyAzMS00MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGlsaWVyIGRlcyBDaWV1eCAow6l0YWdlcyAzMS00MCknLFxyXG4gICAgICAnamEnOiAn44Ki44Oh44OO44Of44OP44K344OpIDMx772eNDDlsaQnLFxyXG4gICAgICAna28nOiAn7LKc6raB7YORIDMxfjQw7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3ODM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkqeS5i+W+oeafsSA1Me+9njYw5bGCJyxcclxuICAgICAgJ2RlJzogJ0hpbW1lbHNzw6R1bGUgKEViZW5lbiA1MS02MCknLFxyXG4gICAgICAnZW4nOiAnSGVhdmVuLW9uLUhpZ2ggIChGbG9vcnMgNTEtNjApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBpbGllciBkZXMgQ2lldXggKMOpdGFnZXMgNTEtNjApJyxcclxuICAgICAgJ2phJzogJ+OCouODoeODjuODn+ODj+OCt+ODqSA1Me+9njYw5bGkJyxcclxuICAgICAgJ2tvJzogJ+yynOq2ge2DkSA1MX42MOy4tScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzg0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnkuYvlvqHmn7EgNzHvvZ44MOWxgicsXHJcbiAgICAgICdkZSc6ICdIaW1tZWxzc8OkdWxlIChFYmVuZW4gNzEtODApJyxcclxuICAgICAgJ2VuJzogJ0hlYXZlbi1vbi1IaWdoICAoRmxvb3JzIDcxLTgwKScsXHJcbiAgICAgICdmcic6ICdMZSBQaWxpZXIgZGVzIENpZXV4ICjDqXRhZ2VzIDcxLTgwKScsXHJcbiAgICAgICdqYSc6ICfjgqLjg6Hjg47jg5/jg4/jgrfjg6kgNzHvvZ44MOWxpCcsXHJcbiAgICAgICdrbyc6ICfsspzqtoHtg5EgNzF+ODDsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc4NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5LmL5b6h5p+xIDkx772eMTAw5bGCJyxcclxuICAgICAgJ2RlJzogJ0hpbW1lbHNzw6R1bGUgKEViZW5lbiA5MS0xMDApJyxcclxuICAgICAgJ2VuJzogJ0hlYXZlbi1vbi1IaWdoICAoRmxvb3JzIDkxLTEwMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGlsaWVyIGRlcyBDaWV1eCAow6l0YWdlcyA5MS0xMDApJyxcclxuICAgICAgJ2phJzogJ+OCouODoeODjuODn+ODj+OCt+ODqSA5Me+9njEwMOWxpCcsXHJcbiAgICAgICdrbyc6ICfsspzqtoHtg5EgOTF+MTAw7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3ODg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rGh5p+T5bqt5Zut5Zyj6IyJ5aSP5aic5qSN54mp5ZutJyxcclxuICAgICAgJ2RlJzogJ1Nhbmt0IE1vY2lhbm5lLUFyYm9yZXR1bSAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdTYWludCBNb2NpYW5uZVxcJ3MgQXJib3JldHVtIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMXFwnQXJib3JldHVtIFNhaW50ZS1Nb2NpYW5uZSAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfojYnmnKjmsZrmn5Mg6IGW44Oi44K344Oj44O844OM5qSN54mp5ZySIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfshLEg66qo7IOoIOyLneusvOybkCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3ODk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q275Lqh5aSn5Zyw57uI5pyr54Sm5ZyfJyxcclxuICAgICAgJ2RlJzogJ0RhcyBLYXJnbGFuZCcsXHJcbiAgICAgICdlbic6ICdUaGUgQnVybicsXHJcbiAgICAgICdmcic6ICdMXFwnRXNjYXJyZScsXHJcbiAgICAgICdqYSc6ICfmsLjkuYXnhKblnJ8g44K244O744OQ44O844OzJyxcclxuICAgICAgJ2tvJzogJ+yYgeq1rCDstIjthqDsp4DrjIAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTcsXHJcbiAgfSxcclxuICA3OTA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eBvuWOhOmHjeeOsOWGm+S6i+a8lOS5oCcsXHJcbiAgICAgICdkZSc6ICdHZWRlbmtzY2hsYWNodCBkZXIgRW9yesOkaXNjaGVuIEFsbGlhbnonLFxyXG4gICAgICAnZW4nOiAnVGhlIENhbGFtaXR5IFJldG9sZCcsXHJcbiAgICAgICdmcic6ICdMZXMgZ3JhbmRlcyBtYW7Fk3V2cmVzIGNvbW3DqW1vcmF0aXZlcycsXHJcbiAgICAgICdqYSc6ICfmlrDnlJ/npa3ou43kuovmvJTnv5InLFxyXG4gICAgICAna28nOiAn7Iug7IOd7KCcIOq1sOyCrO2biOugqCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5NSxcclxuICB9LFxyXG4gIDc5MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpmpDloZ4gKOacuuWKqOaImCknLFxyXG4gICAgICAnZGUnOiAnVmVyYm9yZ2VuZSBTY2hsdWNodCcsXHJcbiAgICAgICdlbic6ICdIaWRkZW4gR29yZ2UnLFxyXG4gICAgICAnZnInOiAnR29yZ2UgZMOpcm9iw6llIChtYWNoaW5lcmllKScsXHJcbiAgICAgICdqYSc6ICfjg5Ljg4njgqXjg7PjgrTjg7zjgrggKOapn+W3peaIpiknLFxyXG4gICAgICAna28nOiAn7Iio6rKo7KeEIOuztOujqCjquLDqs7XsoIQpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3OTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iZmuaZr+i3s+i3s+S5kOWkp+aMkeaImCcsXHJcbiAgICAgICdkZSc6ICdLYWt0b3ItS2xldHRlcndhbmQnLFxyXG4gICAgICAnZW4nOiAnTGVhcCBvZiBGYWl0aCcsXHJcbiAgICAgICdmcic6ICdIYXV0ZSB2b2x0aWdlJyxcclxuICAgICAgJ2phJzogJ+aMkeaIpu+8gSDjgrjjg6Pjg7Pjg5Tjg7PjgrDjgqLjgrnjg6zjg4Hjg4Pjgq8nLFxyXG4gICAgICAna28nOiAn65uw7Ja06528ISDsoJDtlZEg7Jq064+Z7ZqMJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3OTM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Zu95aKD5oiY57q/5Z+65aeG5Yip54m55pqX5Yy6JyxcclxuICAgICAgJ2RlJzogJ0RpZSBHaGltbHl0LUZpbnN0ZXJuaXMnLFxyXG4gICAgICAnZW4nOiAnVGhlIEdoaW1seXQgRGFyaycsXHJcbiAgICAgICdmcic6ICdMZXMgVMOpbsOoYnJlcyBkZSBHaGltbHl0JyxcclxuICAgICAgJ2phJzogJ+Wig+eVjOaIpue3miDjgq7jg6Djg6rjg4jjg4Djg7zjgq8nLFxyXG4gICAgICAna28nOiAn6rmA66as7Yq4IO2ZqeyVvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzk0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i/kOays+WuneeJqeW6k+elnuauvycsXHJcbiAgICAgICdkZSc6ICdHbMO8Y2tzYWx0w6RyZSB2b24gVXpuYWlyJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTaGlmdGluZyBBbHRhcnMgb2YgVXpuYWlyJyxcclxuICAgICAgJ2ZyJzogJ0xlIFRlbXBsZSBzYWNyw6kgZFxcJ1V6bmFpcicsXHJcbiAgICAgICdqYSc6ICflrp3nianluqsg44Km44K644ON44Ki44Kr44OK44Or56Wt5q6/JyxcclxuICAgICAgJ2tvJzogJ+uztOusvOqzoCDsmrDspojrhKTslrQg7Jq07ZWYIOygnOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzk1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyNixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnpoHlnLDkvJjpm7fljaEg5raM54Gr5LmL5ZywJyxcclxuICAgICAgJ2RlJzogJ0V1cmVrYSBQeXJvcycsXHJcbiAgICAgICdlbic6ICdUaGUgRm9yYmlkZGVuIExhbmQsIEV1cmVrYSBQeXJvcycsXHJcbiAgICAgICdmcic6ICdFdXLDqmthIFB5cm9zJyxcclxuICAgICAgJ2phJzogJ+emgeaWreOBruWcsCDjgqjjgqbjg6zjgqvvvJrjg5Tjg6Xjg7zjg63jgrnnt6gnLFxyXG4gICAgICAna28nOiAn6riI64uo7J2YIOuVhSDsl5DsmrDroIjsubQ6IO2UvOuhnOyKpO2OuCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5NixcclxuICB9LFxyXG4gIDc5Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjcsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Ye66YGT5oiYJyxcclxuICAgICAgJ2RlJzogJ0RlYsO8dCBpbiBkZXIgSGltbWxpc2NoZW4gQXJlbmEnLFxyXG4gICAgICAnZW4nOiAnQWxsXFwncyBXZWxsIFRoYXQgU3RhcnRzIFdlbGwnLFxyXG4gICAgICAnZnInOiAnRMOpYnV0IGR1IHNwZWN0YWNsZScsXHJcbiAgICAgICdqYSc6ICfjg4fjg5Pjg6Xjg7zjg57jg4Pjg4EnLFxyXG4gICAgICAna28nOiAn642w67eU7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3OTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qWU55+z5rSeJyxcclxuICAgICAgJ2RlJzogJ0RlciBXaWxsZSBkZXIgTW9uZGfDtnR0aW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIFdpbGwgb2YgdGhlIE1vb24nLFxyXG4gICAgICAnZnInOiAnUmFsbGllbWVudCBkYW5zIGxhIHN0ZXBwZScsXHJcbiAgICAgICdqYSc6ICfmpZTnn7Pjga7omZonLFxyXG4gICAgICAna28nOiAn7JCQ6riw64+MIOuPmeq1tCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzk4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+asp+exs+iMhOaXtuepuueLree8nSDpmL/lsJTms5XlubvlooMxJyxcclxuICAgICAgJ2RlJzogJ0FscGhhbWV0cmllIDEuMCcsXHJcbiAgICAgICdlbic6ICdBbHBoYXNjYXBlIFYxLjAnLFxyXG4gICAgICAnZnInOiAnQWxwaGFzdGljZSB2MS4wJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrO+8muOCouODq+ODleOCoee3qDEnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOyVjO2MjO2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDkyLFxyXG4gIH0sXHJcbiAgNzk5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+asp+exs+iMhOaXtuepuueLree8nSDpmL/lsJTms5XlubvlooMyJyxcclxuICAgICAgJ2RlJzogJ0FscGhhbWV0cmllIDIuMCcsXHJcbiAgICAgICdlbic6ICdBbHBoYXNjYXBlIFYyLjAnLFxyXG4gICAgICAnZnInOiAnQWxwaGFzdGljZSB2Mi4wJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrO+8muOCouODq+ODleOCoee3qDInLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOyVjO2MjO2OuCAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDkyLFxyXG4gIH0sXHJcbiAgODAwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+asp+exs+iMhOaXtuepuueLree8nSDpmL/lsJTms5XlubvlooMzJyxcclxuICAgICAgJ2RlJzogJ0FscGhhbWV0cmllIDMuMCcsXHJcbiAgICAgICdlbic6ICdBbHBoYXNjYXBlIFYzLjAnLFxyXG4gICAgICAnZnInOiAnQWxwaGFzdGljZSB2My4wJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrO+8muOCouODq+ODleOCoee3qDMnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOyVjO2MjO2OuCAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDkyLFxyXG4gIH0sXHJcbiAgODAxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+asp+exs+iMhOaXtuepuueLree8nSDpmL/lsJTms5XlubvlooM0JyxcclxuICAgICAgJ2RlJzogJ0FscGhhbWV0cmllIDQuMCcsXHJcbiAgICAgICdlbic6ICdBbHBoYXNjYXBlIFY0LjAnLFxyXG4gICAgICAnZnInOiAnQWxwaGFzdGljZSB2NC4wJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrO+8muOCouODq+ODleOCoee3qDQnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOyVjO2MjO2OuCA0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDkyLFxyXG4gIH0sXHJcbiAgODAyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+asp+exs+iMhOmbtuW8j+aXtuepuueLree8nSDpmL/lsJTms5XlubvlooMxJyxcclxuICAgICAgJ2RlJzogJ0FscGhhbWV0cmllIDEuMCAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbHBoYXNjYXBlIFYxLjAgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxwaGFzdGljZSB2MS4wIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6Hjgqzpm7blvI/vvJrjgqLjg6vjg5XjgqHnt6gxJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDslYztjIztjrgo7JiB7JuFKSAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDkyLFxyXG4gIH0sXHJcbiAgODAzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+asp+exs+iMhOmbtuW8j+aXtuepuueLree8nSDpmL/lsJTms5XlubvlooMyJyxcclxuICAgICAgJ2RlJzogJ0FscGhhbWV0cmllIDIuMCAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbHBoYXNjYXBlIFYyLjAgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxwaGFzdGljZSB2Mi4wIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6Hjgqzpm7blvI/vvJrjgqLjg6vjg5XjgqHnt6gyJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDslYztjIztjrgo7JiB7JuFKSAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDkyLFxyXG4gIH0sXHJcbiAgODA0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+asp+exs+iMhOmbtuW8j+aXtuepuueLree8nSDpmL/lsJTms5XlubvlooMzJyxcclxuICAgICAgJ2RlJzogJ0FscGhhbWV0cmllIDMuMCAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbHBoYXNjYXBlIFYzLjAgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxwaGFzdGljZSB2My4wIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6Hjgqzpm7blvI/vvJrjgqLjg6vjg5XjgqHnt6gzJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDslYztjIztjrgo7JiB7JuFKSAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDkyLFxyXG4gIH0sXHJcbiAgODA1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+asp+exs+iMhOmbtuW8j+aXtuepuueLree8nSDpmL/lsJTms5XlubvlooM0JyxcclxuICAgICAgJ2RlJzogJ0FscGhhbWV0cmllIDQuMCAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbHBoYXNjYXBlIFY0LjAgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxwaGFzdGljZSB2NC4wIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6Hjgqzpm7blvI/vvJrjgqLjg6vjg5XjgqHnt6g0JyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDslYztjIztjrgo7JiB7JuFKSA0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDkyLFxyXG4gIH0sXHJcbiAgODA2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S/nemVluatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdEdWVsbCBhdWYgZGVyIEt1Z2FuZS1CcsO8Y2tlJyxcclxuICAgICAgJ2VuJzogJ0t1Z2FuZSBPaGFzaGknLFxyXG4gICAgICAnZnInOiAnTGUgUG9udCBPaGFzaGknLFxyXG4gICAgICAnamEnOiAn55yf44Oo44Km44K444Oz44Oc44Km6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ynhCDsmpTsmrDsp4Trs7Qg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4MTA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pyx6ZuA6ZWH6a2C5oiYJyxcclxuICAgICAgJ2RlJzogJ1NlZWxlbnRhbnogLSBTdXpha3UnLFxyXG4gICAgICAnZW4nOiAnSGVsbHNcXCcgS2llcicsXHJcbiAgICAgICdmcic6ICdMZSBOaWQgZGVzIExhbWVudGF0aW9ucycsXHJcbiAgICAgICdqYSc6ICfmnLHpm4DlvoHprYLmiKYnLFxyXG4gICAgICAna28nOiAn7KO87J6RIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5OCxcclxuICB9LFxyXG4gIDgxMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnLHpm4Dor5fprYLmiJgnLFxyXG4gICAgICAnZGUnOiAnU2VlbGVuc3R1cm0gLSBTdXpha3UnLFxyXG4gICAgICAnZW4nOiAnSGVsbHNcXCcgS2llciAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGUgTmlkIGRlcyBMYW1lbnRhdGlvbnMgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXmnLHpm4DlvoHprYLmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOyjvOyekSDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTgsXHJcbiAgfSxcclxuICA4MTM6IHtcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpm7flhYvlhbDlvrcnLFxyXG4gICAgICAnZGUnOiAnU2VlbmxhbmQnLFxyXG4gICAgICAnZW4nOiAnTGFrZWxhbmQnLFxyXG4gICAgICAnZnInOiAnR3JhbmQtTGFjJyxcclxuICAgICAgJ2phJzogJ+ODrOOCpOOCr+ODqeODs+ODiScsXHJcbiAgICAgICdrbyc6ICfroIjsnbTtgazrnpzrk5wnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTA2LFxyXG4gIH0sXHJcbiAgODE0OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn54+C6Zyy6KW/5Lqa5bKbJyxcclxuICAgICAgJ2RlJzogJ0tob2x1c2lhJyxcclxuICAgICAgJ2VuJzogJ0tob2x1c2lhJyxcclxuICAgICAgJ2ZyJzogJ0tob2x1c2lhJyxcclxuICAgICAgJ2phJzogJ+OCs+ODq+OCt+OCouWzticsXHJcbiAgICAgICdrbyc6ICfsvZzro6jsi5zslYQg7ISsJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwNyxcclxuICB9LFxyXG4gIDgxNToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WuieephsK36Im+5YWwJyxcclxuICAgICAgJ2RlJzogJ0FtaCBBcmFlbmcnLFxyXG4gICAgICAnZW4nOiAnQW1oIEFyYWVuZycsXHJcbiAgICAgICdmcic6ICdBbWggQXJhZW5nJyxcclxuICAgICAgJ2phJzogJ+OCouODoOODu+OCouODrOODvOODsycsXHJcbiAgICAgICdrbyc6ICfslYTrr4Ag7JWE656tJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwOCxcclxuICB9LFxyXG4gIDgxNjoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iuWwlOe+juagvCcsXHJcbiAgICAgICdkZSc6ICdJbCBNaGVnJyxcclxuICAgICAgJ2VuJzogJ0lsIE1oZWcnLFxyXG4gICAgICAnZnInOiAnSWwgTWhlZycsXHJcbiAgICAgICdqYSc6ICfjgqTjg6vjg7vjg6HjgrAnLFxyXG4gICAgICAna28nOiAn7J28IOuplOq3uCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDksXHJcbiAgfSxcclxuICA4MTc6IHtcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmi4nlh6/mj5DljaHlpKfmo67mnpcnLFxyXG4gICAgICAnZGUnOiAnRGVyIEdyb8OfZSBXYWxkIFJha1xcJ3Rpa2EnLFxyXG4gICAgICAnZW4nOiAnVGhlIFJha1xcJ3Rpa2EgR3JlYXR3b29kJyxcclxuICAgICAgJ2ZyJzogJ1Jha1xcJ3Rpa2EnLFxyXG4gICAgICAnamEnOiAn44Op44Kx44OG44Kj44Kr5aSn5qOu5p6XJyxcclxuICAgICAgJ2tvJzogJ+udvOy8gO2LsOy5tCDrjIDsgrzrprwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTEwLFxyXG4gIH0sXHJcbiAgODE4OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6buR6aOO5rW3JyxcclxuICAgICAgJ2RlJzogJ1RlbXBlc3QnLFxyXG4gICAgICAnZW4nOiAnVGhlIFRlbXBlc3QnLFxyXG4gICAgICAnZnInOiAnTGEgVGVtcMOqdGUnLFxyXG4gICAgICAnamEnOiAn44OG44Oz44Oa44K544OIJyxcclxuICAgICAgJ2tvJzogJ+2FnO2OmOyKpO2KuCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMTEsXHJcbiAgfSxcclxuICA4MTk6IHtcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmsLTmmbbpg70nLFxyXG4gICAgICAnZGUnOiAnQ3J5c3Rhcml1bScsXHJcbiAgICAgICdlbic6ICdUaGUgQ3J5c3Rhcml1bScsXHJcbiAgICAgICdmcic6ICdDcmlzdGFyaXVtJyxcclxuICAgICAgJ2phJzogJ+OCr+ODquOCueOCv+ODquOCpuODoCcsXHJcbiAgICAgICdrbyc6ICftgazrpqzsiqTtg4Drpqzsm4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTEyLFxyXG4gIH0sXHJcbiAgODIwOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ri45pyr6YKmJyxcclxuICAgICAgJ2RlJzogJ0V1bG1vcmUnLFxyXG4gICAgICAnZW4nOiAnRXVsbW9yZScsXHJcbiAgICAgICdmcic6ICdFdWxtb3JlJyxcclxuICAgICAgJ2phJzogJ+ODpuODvOODq+ODouOCoicsXHJcbiAgICAgICdrbyc6ICfsnKjrqqjslrQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTEzLFxyXG4gIH0sXHJcbiAgODIxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+awtOWmluW5u+WbreWkmuaBqee+juagvOemgeWbrScsXHJcbiAgICAgICdkZSc6ICdEb2huIE1oZWcnLFxyXG4gICAgICAnZW4nOiAnRG9obiBNaGVnJyxcclxuICAgICAgJ2ZyJzogJ0RvaG4gTWhlZycsXHJcbiAgICAgICdqYSc6ICfmsLTlppblubvlnJIg44OJ44Kp44O844OM44O744Oh44KwJyxcclxuICAgICAgJ2tvJzogJ+uPhOuKkCDrqZTqt7gnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMjAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODIyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8qumAoOWkqeeVjOagvOmygeagvOeBq+WxsScsXHJcbiAgICAgICdkZSc6ICdEZXIgR3VsZycsXHJcbiAgICAgICdlbic6ICdNdC4gR3VsZycsXHJcbiAgICAgICdmcic6ICdNb250IEd1bGcnLFxyXG4gICAgICAnamEnOiAn5YG96YCg5aSp55WMIOOCsOODq+OCsOeBq+WxsScsXHJcbiAgICAgICdrbyc6ICfqtbTqt7gg7ZmU7IKwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xODgsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMixcclxuICB9LFxyXG4gIDgyMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmlofmmI7lj6Tov7nlpYflnabpgqPnpZ7lvbHmtJ4nLFxyXG4gICAgICAnZGUnOiAnSXJydW5nZW4gZGVyIFFpdGFyaScsXHJcbiAgICAgICdlbic6ICdUaGUgUWl0YW5hIFJhdmVsJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdFbmNoZXbDqnRyZW1lbnQgZGVzIFFpdGFyaScsXHJcbiAgICAgICdqYSc6ICflj6Tot6HmjqLntKIg44Kt44K/44Oz44OK56We5b2x5rSeJyxcclxuICAgICAgJ2tvJzogJ+2CpO2DgOuCmCDsi6DqtbQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTI3NCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTAyLFxyXG4gIH0sXHJcbiAgODI0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mdkum+memVh+mtguaImCcsXHJcbiAgICAgICdkZSc6ICdTZWVsZW50YW56IC0gU2Vpcnl1JyxcclxuICAgICAgJ2VuJzogJ1RoZSBXcmVhdGggb2YgU25ha2VzJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDjmxvdCBkZXMgQW1lcnR1bWVzJyxcclxuICAgICAgJ2phJzogJ+mdkum+jeW+gemtguaIpicsXHJcbiAgICAgICdrbyc6ICfssq3ro6Eg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDk5LFxyXG4gIH0sXHJcbiAgODI1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mdkum+meivl+mtguaImCcsXHJcbiAgICAgICdkZSc6ICdTZWVsZW5zdHVybSAtIFNlaXJ5dScsXHJcbiAgICAgICdlbic6ICdUaGUgV3JlYXRoIG9mIFNuYWtlcyAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTFxcJ8OObG90IGRlcyBBbWVydHVtZXMgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXpnZLpvo3lvoHprYLmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOyyreujoSDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTksXHJcbiAgfSxcclxuICA4MjY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LmQ5qyy5LmL5omA55Ov5Y2a6K635L+u6YGT6ZmiJyxcclxuICAgICAgJ2RlJzogJ0tsb3N0ZXIgdm9uIE9yYm9ubmUnLFxyXG4gICAgICAnZW4nOiAnVGhlIE9yYm9ubmUgTW9uYXN0ZXJ5JyxcclxuICAgICAgJ2ZyJzogJ0xlIE1vbmFzdMOocmUgZFxcJ09yYm9ubmUnLFxyXG4gICAgICAnamEnOiAn5qW95qyy44Gu5YOn6ZmiIOOCquODvOODnOODs+ODjCcsXHJcbiAgICAgICdrbyc6ICfsmKTrs7jripAg7IiY64+E7JuQJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC01NDUsXHJcbiAgICAnb2Zmc2V0WSc6IC02NjMsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4Mjc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+emgeWcsOS8mOmbt+WNoSDkuLDmsLTkuYvlnLAnLFxyXG4gICAgICAnZGUnOiAnRXVyZWthIEh5ZGF0b3MnLFxyXG4gICAgICAnZW4nOiAnVGhlIEZvcmJpZGRlbiBMYW5kLCBFdXJla2EgSHlkYXRvcycsXHJcbiAgICAgICdmcic6ICdFdXLDqmthIEh5ZGF0b3MnLFxyXG4gICAgICAnamEnOiAn56aB5pat44Gu5ZywIOOCqOOCpuODrOOCq++8muODkuODpeODgOODiOOCuee3qCcsXHJcbiAgICAgICdrbyc6ICfquIjri6jsnZgg65WFIOyXkOyasOugiOy5tDog7Z6I64uk7Yag7Iqk7Y64JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDQ3NSxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTAwLFxyXG4gIH0sXHJcbiAgODMwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iLsembhOaMveatjCcsXHJcbiAgICAgICdkZSc6ICdSZXF1aWVtIGRlciBIZWxkZW4nLFxyXG4gICAgICAnZW4nOiAnQSBSZXF1aWVtIGZvciBIZXJvZXMnLFxyXG4gICAgICAnZnInOiAnVW4gcmVxdWllbSBwb3VyIGxlcyBow6lyb3MnLFxyXG4gICAgICAnamEnOiAn6Iux6ZuE44G444Gu6Y6u6a2C5q2MJyxcclxuICAgICAgJ2tvJzogJ+yYgeybheydhCDsnITtlZwg7KeE7Zi86rCAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4MzE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkmueOm+aWueWfjuaImO+8muS4nOmjjuaImDTkurrkurLlj4vmoYzvvIjkuI3luKbpo5/mlq3vvIknLFxyXG4gICAgICAnZGUnOiAnNC1TcGllbGVyLU1haGpvbmcgKHNjaG5lbGxlIFBhcnRpZSwgS3VpdGFuIGRlYWt0aXZpZXJ0KScsXHJcbiAgICAgICdlbic6ICdGb3VyLXBsYXllciBNYWhqb25nIChRdWljayBNYXRjaCwgS3VpdGFuIERpc2FibGVkKScsXHJcbiAgICAgICdmcic6ICdNYWhqb25nIGRvbWllbjxJbmRlbnQvPjogNCBqb3VldXJzIChwYXJ0aWUgcmFwaWRlIHNhbnMga3VpdGFuKScsXHJcbiAgICAgICdqYSc6ICfjg4njg57lvI/purvpm4DvvJrmnbHpoqjmiKY05Lq644K744OD44OI5Y2T77yI44Kv44Kk44K/44Oz54Sh44GX77yJJyxcclxuICAgICAgJ2tvJzogJ+yeke2MqOycoO2drDog64+Z7ZKN7KCEIDTsnbjsmqkg7YOB7J6QKOu2gOultOq4sCDri6jsmpTqtawg7JeG7J2MKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODMyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnqbrlhpvoo4XnlLLpqb7pqbblkZgnLFxyXG4gICAgICAnZGUnOiAnTHVmdHdhZmZlLCBGZXVlciBmcmVpIScsXHJcbiAgICAgICdlbic6ICdBaXIgRm9yY2UgT25lJyxcclxuICAgICAgJ2ZyJzogJ0FzIGRlIGxcXCdhaXInLFxyXG4gICAgICAnamEnOiAn5Ye65pKD77yBIOOCqOOCouODleOCqeODvOOCueODkeOCpOODreODg+ODiCcsXHJcbiAgICAgICdrbyc6ICfstpzqsqkhIOyXkOyWtO2PrOyKpCDsobDsooXsgqwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDgzNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpo47kuYvkvb/ogIUnLFxyXG4gICAgICAnZGUnOiAnRHVyY2ggZGVuIFN0dXJtIHVuZCB6dXLDvGNrJyxcclxuICAgICAgJ2VuJzogJ01lc3NlbmdlciBvZiB0aGUgV2luZHMnLFxyXG4gICAgICAnZnInOiAnTGEgTWVzc2Fnw6hyZSBkdSB2ZW50JyxcclxuICAgICAgJ2phJzogJ+adpeioquOBm+OBl+miqOOBruW+oeS9vycsXHJcbiAgICAgICdrbyc6ICfrsJTrnozsnZgg7Ja07IKsJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMSxcclxuICB9LFxyXG4gIDgzNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpgb/mmpHnprvlrqvpqazliKnljaHlpKfkupUnLFxyXG4gICAgICAnZGUnOiAnTWFsaWthaHMgQnJ1bm5lbicsXHJcbiAgICAgICdlbic6ICdNYWxpa2FoXFwncyBXZWxsJyxcclxuICAgICAgJ2ZyJzogJ0xlIFB1aXRzIGRlIE1hbGlrYWgnLFxyXG4gICAgICAnamEnOiAn54i95ra86Zui5a6uIOODnuODquOCq+OBruWkp+S6leaIuCcsXHJcbiAgICAgICdrbyc6ICfrp5DrpqzsubQg7YGw7Jqw66y8JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC02NSxcclxuICAgICdvZmZzZXRZJzogLTMwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDIsXHJcbiAgfSxcclxuICA4Mzc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6YGH6KKt6ZuG6JC95rC05rup5p2RJyxcclxuICAgICAgJ2RlJzogJ0hvbG1pbnN0ZXInLFxyXG4gICAgICAnZW4nOiAnSG9sbWluc3RlciBTd2l0Y2gnLFxyXG4gICAgICAnZnInOiAnSG9sbWluc3RlcicsXHJcbiAgICAgICdqYSc6ICfmrrrmiK7pg7fmnZEg44Ob44Or44Of44Oz44K544K/44O8JyxcclxuICAgICAgJ2tvJzogJ+2ZgOuvvOyKpO2EsCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDIsXHJcbiAgfSxcclxuICA4Mzg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pyr5pel5pqX5b2x5Lqa6ams5LmM572X5o+QJyxcclxuICAgICAgJ2RlJzogJ0FtYXVyb3QnLFxyXG4gICAgICAnZW4nOiAnQW1hdXJvdCcsXHJcbiAgICAgICdmcic6ICdBbWF1cm90ZScsXHJcbiAgICAgICdqYSc6ICfntYLmnKvlubvmg7Mg44Ki44O844Oi44Ot44O844OIJyxcclxuICAgICAgJ2tvJzogJ+yVhOuqqOuhnO2KuCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDUsXHJcbiAgfSxcclxuICA4NDA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5byC55WM6YGX5p6E5biM5bCU56eR5pav5a2q5pm25aGUJyxcclxuICAgICAgJ2RlJzogJ0RlciBLcmlzdGFsbHp3aWxsaW5nJyxcclxuICAgICAgJ2VuJzogJ1RoZSBUd2lubmluZycsXHJcbiAgICAgICdmcic6ICdMYSBNYWNsZSBkZSBTeXJjdXMnLFxyXG4gICAgICAnamEnOiAn55Ww55WM6YG65qeLIOOCt+ODq+OCr+OCueODu+ODhOOCpOODi+ODs+OCsCcsXHJcbiAgICAgICdrbyc6ICfsjI3rkaXsnbQg7Iuc66W07L+g7IqkJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4NDE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Yib6YCg5py65p6E6Zi/5bC85b63572X5a2m6ZmiJyxcclxuICAgICAgJ2RlJzogJ0FrYWRhZW1pYSBBbnlkZXInLFxyXG4gICAgICAnZW4nOiAnQWthZGFlbWlhIEFueWRlcicsXHJcbiAgICAgICdmcic6ICdBa2FkYWVtaWEgQW55ZHJlJyxcclxuICAgICAgJ2phJzogJ+WJtemAoOapn+mWoiDjgqLjg4rjgqTjg4DjgqLjgqvjg4fjg5/jgqInLFxyXG4gICAgICAna28nOiAn7JWg64KY7J20642UIOyVhOy5tOuNsOuvuOyVhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAzMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg0NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnvIflnablpq7pm4Xmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnT2ZmZW5iYXJ1bmcgLSBUaXRhbmlhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEYW5jaW5nIFBsYWd1ZScsXHJcbiAgICAgICdmcic6ICdMYSBWYWxzZSBkdSBNb25hcnF1ZScsXHJcbiAgICAgICdqYSc6ICfjg4bjgqPjgr/jg7zjg4vjgqLoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7Yuw7YOA64uI7JWEIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDMsXHJcbiAgfSxcclxuICA4NDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5peg55GV54G15ZCb5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ09mZmVuYmFydW5nIC0gSW5ub3plbnonLFxyXG4gICAgICAnZW4nOiAnVGhlIENyb3duIG9mIHRoZSBJbW1hY3VsYXRlJyxcclxuICAgICAgJ2ZyJzogJ0xhIENvdXJvbm5lIGRlIGxcXCdJbW1hY3Vsw6knLFxyXG4gICAgICAnamEnOiAn44Kk44OO44K744Oz44K56KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ydtOuFuOyEvOyKpCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTA0LFxyXG4gIH0sXHJcbiAgODQ3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WTiOi/quaWr+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdPZmZlbmJhcnVuZyAtIEhhZGVzJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEeWluZyBHYXNwJyxcclxuICAgICAgJ2ZyJzogJ0xlIFLDomxlIGRlIGxcXCdBZ29uaWUnLFxyXG4gICAgICAnamEnOiAn44OP44O844OH44K56KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+2VmOuNsOyKpCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTA1LFxyXG4gIH0sXHJcbiAgODQ4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aXoOeRleeBteWQm+atvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdMZXR6dGUgTMOkdXRlcnVuZyAtIElubm96ZW56JyxcclxuICAgICAgJ2VuJzogJ1RoZSBDcm93biBvZiB0aGUgSW1tYWN1bGF0ZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGEgQ291cm9ubmUgZGUgbFxcJ0ltbWFjdWzDqSAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteOCpOODjuOCu+ODs+OCueiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7J2064W47IS87IqkIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDQsXHJcbiAgfSxcclxuICA4NDk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S45biM5pyb5LmQ5ZutIOiniemGkuS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgRXJ3YWNoZW4gLSBBdWZlcnN0ZWh1bmcnLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgR2F0ZTogUmVzdXJyZWN0aW9uJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gUsOpc3VycmVjdGlvbicsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJropprphpLnt6gxJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqsIHshLHtjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODUwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDop4nphpLkuYvnq6AyJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIEVyd2FjaGVuIC0gTmllZGVya3VuZnQnLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgR2F0ZTogRGVzY2VudCcsXHJcbiAgICAgICdmcic6ICdMXFwnw4l2ZWlsIGRcXCfDiWRlbiAtIERlc2NlbnRlJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs++8muimmumGkue3qDInLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqwgeyEse2OuCAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4NTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S45biM5pyb5LmQ5ZutIOiniemGkuS5i+eroDMnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgRXJ3YWNoZW4gLSDDnGJlcmZsdXR1bmcnLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgR2F0ZTogSW51bmRhdGlvbicsXHJcbiAgICAgICdmcic6ICdMXFwnw4l2ZWlsIGRcXCfDiWRlbiAtIETDqWx1Z2UnLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz77ya6Kaa6YaS57eoMycsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rCB7ISx7Y64IDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzgsXHJcbiAgfSxcclxuICA4NTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S45biM5pyb5LmQ5ZutIOiniemGkuS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgRXJ3YWNoZW4gLSBCZWVyZGlndW5nJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIEdhdGU6IFNlcHVsdHVyZScsXHJcbiAgICAgICdmcic6ICdMXFwnw4l2ZWlsIGRcXCfDiWRlbiAtIEluaHVtYXRpb24nLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz77ya6Kaa6YaS57eoNCcsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rCB7ISx7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjMsXHJcbiAgfSxcclxuICA4NTM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOiniemGkuS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgRXJ3YWNoZW4gLSBBdWZlcnN0ZWh1bmcgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgR2F0ZTogUmVzdXJyZWN0aW9uIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gUsOpc3VycmVjdGlvbiAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya6Kaa6YaS57eoMScsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rCB7ISx7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODU0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOmbtuW8j+W4jOacm+S5kOWbrSDop4nphpLkuYvnq6AyJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIEVyd2FjaGVuIC0gTmllZGVya3VuZnQgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgR2F0ZTogRGVzY2VudCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMXFwnw4l2ZWlsIGRcXCfDiWRlbiAtIERlc2NlbnRlIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7Ppm7blvI/vvJropprphpLnt6gyJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqsIHshLHtjrgo7JiB7JuFKSAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4NTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOiniemGkuS5i+eroDMnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgRXJ3YWNoZW4gLSDDnGJlcmZsdXR1bmcgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgR2F0ZTogSW51bmRhdGlvbiAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMXFwnw4l2ZWlsIGRcXCfDiWRlbiAtIETDqWx1Z2UgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs+mbtuW8j++8muimmumGkue3qDMnLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqwgeyEse2OuCjsmIHsm4UpIDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzgsXHJcbiAgfSxcclxuICA4NTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOiniemGkuS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgRXJ3YWNoZW4gLSBCZWVyZGlndW5nIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIEdhdGU6IFNlcHVsdHVyZSAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMXFwnw4l2ZWlsIGRcXCfDiWRlbiAtIEluaHVtYXRpb24gKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs+mbtuW8j++8muimmumGkue3qDQnLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqwgeyEse2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjMsXHJcbiAgfSxcclxuICA4NTg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57yH5Z2m5aau6ZuF5q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ0xldHp0ZSBMw6R1dGVydW5nIC0gVGl0YW5pYScsXHJcbiAgICAgICdlbic6ICdUaGUgRGFuY2luZyBQbGFndWUgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xhIFZhbHNlIGR1IE1vbmFycXVlIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144OG44Kj44K/44O844OL44Ki6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDti7Dtg4Dri4jslYQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMyxcclxuICB9LFxyXG4gIDg1OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnLrlhbPjgIHor4XlkpLjgIHliafmr5LkuI7igKbigKYnLFxyXG4gICAgICAnZGUnOiAnRGVyIEJlaWNodHN0dWhsIHZvbiBUb3VwYXNhIGRlbSDDhGx0ZXJlbicsXHJcbiAgICAgICdlbic6ICdMZWdlbmQgb2YgdGhlIE5vdC1zby1oaWRkZW4gVGVtcGxlJyxcclxuICAgICAgJ2ZyJzogJ0xlIENvbmZlc3Npb25uYWwgZGUgVG91cGFzYSBsXFwnYW5jaWVuJyxcclxuICAgICAgJ2phJzogJ+S7leaOm+OBkeOBqOWRquOBhOOBqOavkuOBqCcsXHJcbiAgICAgICdrbyc6ICftlajsoJXqs7wg7KCA7KO87JmAIOuPhScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDIsXHJcbiAgfSxcclxuICA4NjA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5bqf6YO95ou/5be056S66Im+5YWwJyxcclxuICAgICAgJ2RlJzogJ1ZhdGVyIHVuZCBCcnVkZXInLFxyXG4gICAgICAnZW4nOiAnQ29taW5nIENsZWFuJyxcclxuICAgICAgJ2ZyJzogJ1N1ciBsZXMgcmFpbHMgZGUgTmFiYWF0aCBBcmVuZycsXHJcbiAgICAgICdqYSc6ICflu4Ppg73jg4rjg5DjgrnjgqLjg6zjg7MnLFxyXG4gICAgICAna28nOiAn64KY67CU7Iqk7JWE66CdIO2PkO2XiCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDIsXHJcbiAgfSxcclxuICA4NzM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pGH5pGG55qE5aSp5bmzJyxcclxuICAgICAgJ2RlJzogJ09iIE1pdGxlaWQgb2RlciBIYXNzJyxcclxuICAgICAgJ2VuJzogJ1RoZSBIYXJkZW5lZCBIZWFydCcsXHJcbiAgICAgICdmcic6ICdOYWlzc2FuY2UgZFxcJ3VuIGJvdXJyZWF1JyxcclxuICAgICAgJ2phJzogJ+aPuuOCjOOCi+WkqeenpCcsXHJcbiAgICAgICdrbyc6ICftnZTrk6TrpqzripQg7LKc7LmtJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4NzQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Y+k5Luj5aSn5YaN55Sf6a2U5rOVJyxcclxuICAgICAgJ2RlJzogJ0FsdGVyIFphdWJlcicsXHJcbiAgICAgICdlbic6ICdUaGUgTG9zdCBhbmQgdGhlIEZvdW5kJyxcclxuICAgICAgJ2ZyJzogJ01hZ2llIGFuY2VzdHJhbGUnLFxyXG4gICAgICAnamEnOiAn5Y+k44Gu5aSn5YaN55Sf6a2U5rOVJyxcclxuICAgICAgJ2tvJzogJ+qzoOuMgOydmCDrjIDsnqzsg50g66eI67KVJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDExMCxcclxuICB9LFxyXG4gIDg3NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfli4fmlaLnmoTnjI7kuronLFxyXG4gICAgICAnZGUnOiAnRGVyIExlZ2VuZGUgYXVmIGRlciBTcHVyJyxcclxuICAgICAgJ2VuJzogJ1RoZSBIdW50ZXJcXCdzIExlZ2FjeScsXHJcbiAgICAgICdmcic6ICdMYSBjaGFzc2V1c2UgZGUgbMOpZ2VuZGUnLFxyXG4gICAgICAnamEnOiAn5YuH5rCX44Gu54up5Lq6JyxcclxuICAgICAgJ2tvJzogJ+yaqeq4sCDsnojripQg7IKs64Ol6r68JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDYzLFxyXG4gIH0sXHJcbiAgODc2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WliOi0neWwlOeJueeahOWQjuaClCcsXHJcbiAgICAgICdkZSc6ICdFaW4gZ3Jvw59lcyBPcGZlcicsXHJcbiAgICAgICdlbic6ICdOeWVsYmVydFxcJ3MgTGFtZW50JyxcclxuICAgICAgJ2ZyJzogJ1VuZSBjdXBpZGl0w6kgYmllbiBnw6luw6lyZXVzZScsXHJcbiAgICAgICdqYSc6ICfjg4rjgqTjg6vjg5njg6vjg4jjga7lvozmgpQnLFxyXG4gICAgICAna28nOiAn64KY7J2867Kg66W07Yq47J2YIO2bhO2ajCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODc5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aipue+veWuneWigycsXHJcbiAgICAgICdkZSc6ICdWZXJsaWVzZSB2b24gTHloZSBHaGlhaCcsXHJcbiAgICAgICdlbic6ICdUaGUgRHVuZ2VvbnMgb2YgTHloZSBHaGlhaCcsXHJcbiAgICAgICdmcic6ICdMZSBEb25qb24gaHlwb2fDqWVuIGR1IEx5aGUgR2hpYWgnLFxyXG4gICAgICAnamEnOiAn5a6d54mp5bqrIOODquOCp+ODvOODu+OCruOCouODu+ODgOODs+OCuOODp+ODsycsXHJcbiAgICAgICdrbyc6ICfrs7TrrLzqs6Ag66as7JiIIOq4sOyVhCDsp4DtlZjrr7jqtoEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg4Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpI3liLblt6XljoLlup/lop8nLFxyXG4gICAgICAnZGUnOiAnRGllIGtvcGllcnRlIEZhYnJpaycsXHJcbiAgICAgICdlbic6ICdUaGUgQ29waWVkIEZhY3RvcnknLFxyXG4gICAgICAnZnInOiAnTGEgcsOpcGxpcXVlIGRlIGxcXCd1c2luZSBkw6lzYWZmZWN0w6llJyxcclxuICAgICAgJ2phJzogJ+ikh+ijveOCteODrOOCv+W3peWgtOW7g+WinycsXHJcbiAgICAgICdrbyc6ICfrs7XsoJzrkJwg6rO17J6lIO2PkO2XiCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA2MTAsXHJcbiAgICAnb2Zmc2V0WSc6IDcwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODg0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mtlOazleWuq+auv+Wuh+WumeWuqycsXHJcbiAgICAgICdkZSc6ICdDaGF0ZWF1IENvc21lYScsXHJcbiAgICAgICdlbic6ICdUaGUgR3JhbmQgQ29zbW9zJyxcclxuICAgICAgJ2ZyJzogJ0xlIENvc21vcyBjb3J1c2NhbnQnLFxyXG4gICAgICAnamEnOiAn6a2U5rOV5a6u5q6/IOOCsOODqeODs+ODu+OCs+OCueODouOCuScsXHJcbiAgICAgICdrbyc6ICfqt7jrnpEg7L2U7Iqk66qo7IqkJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4ODU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ZOI6L+q5pav5a2k5b+15q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0xldHp0ZSBMw6R1dGVydW5nIC0gSGFkZXMnLFxyXG4gICAgICAnZW4nOiAnVGhlIE1pbnN0cmVsXFwncyBCYWxsYWQ6IEhhZGVzXFwncyBFbGVneScsXHJcbiAgICAgICdmcic6ICdMZSBSw6JsZSBkZSBsXFwnQWdvbmllIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144OP44O844OH44K56KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDtlZjrjbDsiqQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwNSxcclxuICB9LFxyXG4gIDg4Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjgsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn57ud5aKD5oiYJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAoZmF0YWwpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBFcGljIG9mIEFsZXhhbmRlciAoVWx0aW1hdGUpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdPZHlzc8OpZSBkXFwnQWxleGFuZGVyIChmYXRhbCknLFxyXG4gICAgICAnamEnOiAn57W244Ki44Os44Kt44K144Oz44OA44O86KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ygiCDslYzroInsgrDrjZQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4ODg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDYsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5piC6JCo5ZOI5Yev5bCU77yI56ue5LqJ5oiY77yJJyxcclxuICAgICAgJ2RlJzogJ09uc2FsIEhha2FpciAoRGFuc2hpZyBOYWFkYW0pJyxcclxuICAgICAgJ2VuJzogJ09uc2FsIEhha2FpciAoRGFuc2hpZyBOYWFkYW0pJyxcclxuICAgICAgJ2ZyJzogJ09uc2FsIEhha2FpciAoRGFuc2hpZyBOYWFkYW0pJyxcclxuICAgICAgJ2phJzogJ+OCquODs+OCteODq+ODu+ODj+OCq+OCpOODqyAo57WC56+A5oimKScsXHJcbiAgICAgICdrbyc6ICfsmKjsgrQg7ZWY7Lm07J2066W0KOqzhOygiOuBnSDtlansoIQpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDExNyxcclxuICB9LFxyXG4gIDg5Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnuq/nmb3oqpPnuqbjgIHmvIbpu5Hlr4bnuqYnLFxyXG4gICAgICAnZGUnOiAnRGVyIFdvbGYgdW5kIGRlciBEcmFjaGVucmVpdGVyJyxcclxuICAgICAgJ2VuJzogJ1Zvd3Mgb2YgVmlydHVlLCBEZWVkcyBvZiBDcnVlbHR5JyxcclxuICAgICAgJ2ZyJzogJ1bFk3V4IGRlIHZlcnR1LCBhY3RlcyBkZSBjcnVhdXTDqScsXHJcbiAgICAgICdqYSc6ICfnmb3jgY3oqpPntITjgIHpu5LjgY3lr4bntIQnLFxyXG4gICAgICAna28nOiAn7ZWY7JaAIOyEnOyVvSwg6rKA7J2AIOuwgOyVvScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODk0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aIkeW/g+S+neaXpycsXHJcbiAgICAgICdkZSc6ICdUcnViZWwgaW0gVHJhdW1sYW5kJyxcclxuICAgICAgJ2VuJzogJ0FzIHRoZSBIZWFydCBCaWRzJyxcclxuICAgICAgJ2ZyJzogJ8OAIGxcXCfDqWNvdXRlIGRlIHNvaScsXHJcbiAgICAgICdqYSc6ICfjgZPjga7lv4PjgYzmnJvjgoDjgYzjgb7jgb7jgasnLFxyXG4gICAgICAna28nOiAn7J20IOuniOydjOydtCDsm5DtlZjripQg64yA66GcJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMixcclxuICAgICdvZmZzZXRZJzogNTAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQwLFxyXG4gIH0sXHJcbiAgODk3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e6ouWuneefs+elnuWFteegtOWdj+S9nOaImCcsXHJcbiAgICAgICdkZSc6ICdSdWJpbmZldWVyIC0gRW50ZmVzc2VsdW5nJyxcclxuICAgICAgJ2VuJzogJ0NpbmRlciBEcmlmdCcsXHJcbiAgICAgICdmcic6ICdMZXMgTnXDqWVzIGRlIEJyYW5kb25zJyxcclxuICAgICAgJ2phJzogJ+ODq+ODk+ODvOOCpuOCp+ODneODs+egtOWjiuS9nOaIpicsXHJcbiAgICAgICdrbyc6ICfro6jruYQg7Juo7Y+wIO2MjOq0tOyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDg5ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpu5Hpo47mtbflupXpmL/lsLzlvrfnvZfov73lv4bppoYnLFxyXG4gICAgICAnZGUnOiAnQW5hbW5lc2lzIEFueWRlcicsXHJcbiAgICAgICdlbic6ICdBbmFtbmVzaXMgQW55ZGVyJyxcclxuICAgICAgJ2ZyJzogJ0FuYW1uZXNpcyBBbnlkcmUnLFxyXG4gICAgICAnamEnOiAn6buS6aKo5rW35bqVIOOCouODi+ODieODqeOCueODu+OCouODiuODoOODjeODvOOCt+OCuScsXHJcbiAgICAgICdrbyc6ICfslaDri4jrk5zrnbzsiqQg7JWE64Ko64Sk7Iuc7IqkJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDEwMCxcclxuICAgICdvZmZzZXRZJzogLTM5MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkwMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTYsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Ye65rW35Z6C6ZKTJyxcclxuICAgICAgJ2RlJzogJ0F1ZiBncm/Dn2VyIEZhaHJ0JyxcclxuICAgICAgJ2VuJzogJ09jZWFuIEZpc2hpbmcnLFxyXG4gICAgICAnZnInOiAnUMOqY2hlIGVuIG1lcicsXHJcbiAgICAgICdqYSc6ICfjgqrjg7zjgrfjg6Pjg7Pjg5XjgqPjg4Pjgrfjg7PjgrAnLFxyXG4gICAgICAna28nOiAn66i867CU64ukIOuCmuyLnCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNCxcclxuICB9LFxyXG4gIDkwMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g5YWx6bij5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdFZGVucyBSZXNvbmFueiAtIEVudGxhZHVuZycsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBWZXJzZTogRnVsbWluYXRpb24nLFxyXG4gICAgICAnZnInOiAnTGVzIEFjY29yZHMgZFxcJ8OJZGVuIC0gRnVsbWluYXRpb24nLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz77ya5YWx6bO057eoMScsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rO166qF7Y64IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkwMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g5YWx6bij5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdFZGVucyBSZXNvbmFueiAtIFJhc2VyZWknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgVmVyc2U6IEZ1cm9yJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBBY2NvcmRzIGRcXCfDiWRlbiAtIEZ1cmV1cicsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJrlhbHps7Tnt6gyJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqs7XrqoXtjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTA0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlhbHpuKPkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFJlc29uYW56IC0gQmlsZGVyc3R1cm0nLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgVmVyc2U6IEljb25vY2xhc20nLFxyXG4gICAgICAnZnInOiAnTGVzIEFjY29yZHMgZFxcJ8OJZGVuIC0gSWNvbm9jbGFzbWUnLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz77ya5YWx6bO057eoMycsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rO166qF7Y64IDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkwNToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g5YWx6bij5LmL56ugNCcsXHJcbiAgICAgICdkZSc6ICdFZGVucyBSZXNvbmFueiAtIEVyc3RhcnJ1bmcnLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgVmVyc2U6IFJlZnVsZ2VuY2UnLFxyXG4gICAgICAnZnInOiAnTGVzIEFjY29yZHMgZFxcJ8OJZGVuIC0gw4ljbGF0JyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs++8muWFsemztOe3qDQnLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqzteuqhe2OuCA0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQ2LFxyXG4gIH0sXHJcbiAgOTA2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOmbtuW8j+W4jOacm+S5kOWbrSDlhbHpuKPkuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFJlc29uYW56IC0gRW50bGFkdW5nIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFZlcnNlOiBGdWxtaW5hdGlvbiAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMZXMgQWNjb3JkcyBkXFwnw4lkZW4gLSBGdWxtaW5hdGlvbiAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya5YWx6bO057eoMScsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rO166qF7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTA3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOmbtuW8j+W4jOacm+S5kOWbrSDlhbHpuKPkuYvnq6AyJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFJlc29uYW56IC0gUmFzZXJlaSAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBWZXJzZTogRnVyb3IgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGVzIEFjY29yZHMgZFxcJ8OJZGVuIC0gRnVyZXVyIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7Ppm7blvI/vvJrlhbHps7Tnt6gyJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqs7XrqoXtjrgo7JiB7JuFKSAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MDg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOWFsem4o+S5i+eroDMnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgUmVzb25hbnogLSBCaWxkZXJzdHVybSAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBWZXJzZTogSWNvbm9jbGFzbSAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMZXMgQWNjb3JkcyBkXFwnw4lkZW4gLSBJY29ub2NsYXNtZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya5YWx6bO057eoMycsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rO166qF7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTA5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOmbtuW8j+W4jOacm+S5kOWbrSDlhbHpuKPkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFJlc29uYW56IC0gRXJzdGFycnVuZyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBWZXJzZTogUmVmdWxnZW5jZSAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMZXMgQWNjb3JkcyBkXFwnw4lkZW4gLSDDiWNsYXQgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs+mbtuW8j++8muWFsemztOe3qDQnLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqzteuqhe2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDYsXHJcbiAgfSxcclxuICA5MTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Y2a5YW56ZuF5aCh5Z6S6JK45Y+R5LqL5Lu2JyxcclxuICAgICAgJ2RlJzogJ0RlciBCb3pqYS1Wb3JmYWxsJyxcclxuICAgICAgJ2VuJzogJ1RoZSBCb3pqYSBJbmNpZGVudCcsXHJcbiAgICAgICdmcic6ICdQcsOpbHVkZSDDoCBsYSBjYXRhc3Ryb3BoZScsXHJcbiAgICAgICdqYSc6ICfjgrfjgr/jg4fjg6vjg7vjg5zjgrrjg6TokrjnmbrkuovlpIknLFxyXG4gICAgICAna28nOiAn67O07KaI7JW8IOyCrOqxtCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMjMsXHJcbiAgfSxcclxuICA5MTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57qi5a6d55+z56We5YW154uC5oOz5L2c5oiYJyxcclxuICAgICAgJ2RlJzogJ1J1YmluZmV1ZXIgLSBUcmF1bWEnLFxyXG4gICAgICAnZW4nOiAnQ2luZGVyIERyaWZ0IChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMZXMgTnXDqWVzIGRlIEJyYW5kb25zIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Or44OT44O844Km44Kn44Od44Oz56C05aOK5L2c5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDro6jruYQg7Juo7Y+wIO2MjOq0tOyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDkxMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfljZrlhbnpm4XloKHlnpLov73lv4bmiJgnLFxyXG4gICAgICAnZGUnOiAnTWVtb3JpYSBNaXNlcmEgKGV4dHJlbSknLFxyXG4gICAgICAnZW4nOiAnTWVtb3JpYSBNaXNlcmEgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ01lbW9yaWEgTWlzZXJhIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144K344K/44OH44Or44O744Oc44K644Ok6L+95oa25oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrs7Tspojslbwg7LaU7Ja17KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0zNSxcclxuICAgICdvZmZzZXRZJzogNjgzLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMjMsXHJcbiAgfSxcclxuICA5MTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Iux6ZuE5peg5rOV5a6J5oGvJyxcclxuICAgICAgJ2RlJzogJ1ZvbiBzY2hsYWZlbmRlbiBIZWxkZW4nLFxyXG4gICAgICAnZW4nOiAnQSBTbGVlcCBEaXN0dXJiZWQnLFxyXG4gICAgICAnZnInOiAnTFxcJ8OpcHJldXZlIHJvbmthJyxcclxuICAgICAgJ2phJzogJ+axneOAgeiLsembhOOBruecoOOCiuWmqOOBkuOCi+OBrycsXHJcbiAgICAgICdrbyc6ICfqt7jrjIAsIOyYgeybheydmCDsnqDsnYQg67Cp7ZW07ZWY64qU6rCAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pqX5b2x5Yaz5oiY6K+65byX5YWw54m5JyxcclxuICAgICAgJ2RlJzogJ1NjaGxhY2h0IHVtIE5vcnZyYW5kdCcsXHJcbiAgICAgICdlbic6ICdUaGUgSGVyb2VzXFwnIEdhdW50bGV0JyxcclxuICAgICAgJ2ZyJzogJ0xhIFRyYXZlcnPDqWUgZGUgTm9ydnJhbmR0JyxcclxuICAgICAgJ2phJzogJ+a8hum7kuaxuuaIpiDjg47jg6vjg7Tjg6njg7Pjg4gnLFxyXG4gICAgICAna28nOiAn64W466W067iM656A7Yq4JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDYyNixcclxuICAgICdvZmZzZXRZJzogLTYxMSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTI1LFxyXG4gIH0sXHJcbiAgOTE3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6uuWBtuWGm+S6i+WfuuWcsCcsXHJcbiAgICAgICdkZSc6ICdEaWUgUHVwcGVuZmVzdHVuZycsXHJcbiAgICAgICdlbic6ICdUaGUgUHVwcGV0c1xcJyBCdW5rZXInLFxyXG4gICAgICAnZnInOiAnTGEgYmFzZSBtaWxpdGFpcmUgZGVzIFBhbnRpbnMnLFxyXG4gICAgICAnamEnOiAn5Lq65b2i44K/44OB44OO6LuN5LqL5Z+65ZywJyxcclxuICAgICAgJ2tvJzogJ+yduO2YleuTpOydmCDqtbDsgqwg6riw7KeAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDI5MCxcclxuICAgICdvZmZzZXRZJzogLTE5MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkyMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjksXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Y2X5pa55Y2a5YW56ZuF5oiY57q/JyxcclxuICAgICAgJ2RlJzogJ0JvemphLVPDvGRmcm9udCcsXHJcbiAgICAgICdlbic6ICdUaGUgQm96amFuIFNvdXRoZXJuIEZyb250JyxcclxuICAgICAgJ2ZyJzogJ0Zyb250IHN1ZCBkZSBCb3pqYScsXHJcbiAgICAgICdqYSc6ICfljZfmlrnjg5zjgrrjg6TmiKbnt5onLFxyXG4gICAgICAna28nOiAn64Ko67aAIOuztOymiOyVvCDsoITshKAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEyNyxcclxuICAgICdvZmZzZXRZJzogLTQyNCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTI0LFxyXG4gIH0sXHJcbiAgOTIyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WFieS5i+aImOWjq+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdLcmllZ2VyIGRlcyBMaWNodHMnLFxyXG4gICAgICAnZW4nOiAnVGhlIFNlYXQgb2YgU2FjcmlmaWNlJyxcclxuICAgICAgJ2ZyJzogJ0xlIFRyw7RuZSBkdSBTYWNyaWZpY2UnLFxyXG4gICAgICAnamEnOiAn44Km44Kp44O844Oq44Ki44O744Kq44OW44O744Op44Kk44OI6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+u5m+ydmCDsoITsgqwg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEyNSxcclxuICB9LFxyXG4gIDkyMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflhYnkuYvmiJjlo6vlubvogIDmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnS3JpZWdlciBkZXMgTGljaHRzIChleHRyZW0pJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTZWF0IG9mIFNhY3JpZmljZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGUgVHLDtG5lIGR1IFNhY3JpZmljZSAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteOCpuOCqeODvOODquOCouODu+OCquODluODu+ODqeOCpOODiOiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg67mb7J2YIOyghOyCrCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTI2LFxyXG4gIH0sXHJcbiAgOTI0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aipue+veWuneauvycsXHJcbiAgICAgICdkZSc6ICdEYXMgS2FydXNzZWxsIHZvbiBMeWhlIEdoaWFoJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTaGlmdGluZyBPdWJsaWV0dGVzIG9mIEx5aGUgR2hpYWgnLFxyXG4gICAgICAnZnInOiAnTGUgSmFyZGluIHNlY3JldCBkdSBMeWhlIEdoaWFoJyxcclxuICAgICAgJ2phJzogJ+WuneeJqeW6qyDjg6rjgqfjg7zjg7vjgq7jgqLjg7vjg4Djg7Pjgrjjg6fjg7Pnpa3mrr8nLFxyXG4gICAgICAna28nOiAn67O066y86rOgIOumrOyYiCDquLDslYQg7KeA7ZWY66+46raBIOygnOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTI1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mjnue/lOWQp++8jOWJjeW+gOe7tOWwlOWIqeeJue+8gScsXHJcbiAgICAgICdkZSc6ICdMdWZ0YW5ncmlmZiBhdWYgV2VybHl0JyxcclxuICAgICAgJ2VuJzogJ1NsZWVwIE5vdyBpbiBTYXBwaGlyZScsXHJcbiAgICAgICdmcic6ICdTdXIgbGEgbWVyIGRlIHNhcGhpcicsXHJcbiAgICAgICdqYSc6ICfpo5vjgbnvvIEg44Km44Kn44Or44Oq44OI44G4ICcsXHJcbiAgICAgICdrbyc6ICfrgqDslYTrnbwhIOybsOumrO2KuOulvCDtlqXtlZjsl6wnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMTUsXHJcbiAgICAnb2Zmc2V0WSc6IC02MTAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5Mjk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkqeS4iuemj+WcsOS6keWGoOe+pOWymycsXHJcbiAgICAgICdkZSc6ICdEYXMgRGlhZGVtIC0gRXJzY2hsaWXDn3VuZycsXHJcbiAgICAgICdlbic6ICdUaGUgRGlhZGVtJyxcclxuICAgICAgJ2ZyJzogJ0xlIERpYWTDqG1lJyxcclxuICAgICAgJ2phJzogJ+mbsua1t+aOoembhiDjg4fjgqPjgqLjg4fjg6Doq7jls7YnLFxyXG4gICAgICAna28nOiAn65SU7JWE646AIOygnOuPhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2OCxcclxuICB9LFxyXG4gIDkzMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfluIznk6blubvlt6fmiJgnLFxyXG4gICAgICAnZGUnOiAnVHJhdW1wcsO8ZnVuZyAtIFNoaXZhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBa2ggQWZhaCBBbXBoaXRoZWF0cmUgKFVucmVhbCknLFxyXG4gICAgICAnZnInOiAnTFxcJ0FtcGhpdGjDqcOidHJlIGRcXCdBa2ggQWZhaCAoaXJyw6llbCknLFxyXG4gICAgICAnamEnOiAn5bm744K344O044Kh6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+2ZmCDsi5zrsJQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQ2LFxyXG4gIH0sXHJcbiAgOTMyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+ikquiJsueahOiusOW/hicsXHJcbiAgICAgICdkZSc6ICdWZXJibGFzc3RlIEVyaW5uZXJ1bmdlbicsXHJcbiAgICAgICdlbic6ICdGYWRlZCBNZW1vcmllcycsXHJcbiAgICAgICdmcic6ICdTb3V2ZW5pciBww6lyaXNzYWJsZScsXHJcbiAgICAgICdqYSc6ICfoibLjgYLjgZvjgZ/oqJjmhrYnLFxyXG4gICAgICAna28nOiAn67mb67CU656cIOq4sOyWtScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMTQsXHJcbiAgfSxcclxuICA5MzM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6a2U5pyv5bel5oi/546b5omY6ZuF5bel5L2c5a6kJyxcclxuICAgICAgJ2RlJzogJ01hdG95YXMgQXRlbGllcicsXHJcbiAgICAgICdlbic6ICdNYXRveWFcXCdzIFJlbGljdCcsXHJcbiAgICAgICdmcic6ICdMXFwnQXRlbGllciBhYmFuZG9ubsOpIGRlIE1hdG95YScsXHJcbiAgICAgICdqYSc6ICfprZTooZPlt6XmiL8g44Oe44OI44O844Ok44Gu44Ki44OI44Oq44KoJyxcclxuICAgICAgJ2tvJzogJ+uniO2GoOyVvOydmCDqs7XrsKknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTc1LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTM0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e7v+Wuneefs+elnuWFteegtOWdj+S9nOaImCcsXHJcbiAgICAgICdkZSc6ICdTbWFyYWdkc3R1cm0gLSBFbnRmZXNzZWx1bmcnLFxyXG4gICAgICAnZW4nOiAnQ2FzdHJ1bSBNYXJpbnVtJyxcclxuICAgICAgJ2ZyJzogJ0Nhc3RydW0gTWFyaW51bScsXHJcbiAgICAgICdqYSc6ICfjgqjjg6Hjg6njg6vjg4njgqbjgqfjg53jg7PnoLTlo4rkvZzmiKYnLFxyXG4gICAgICAna28nOiAn7JeQ66mU656E65OcIOybqO2PsCDtjIzqtLTsnpHsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkzNToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnu7/lrp3nn7PnpZ7lhbXni4Lmg7PkvZzmiJgnLFxyXG4gICAgICAnZGUnOiAnU21hcmFnZHN0dXJtIC0gVHJhdW1hJyxcclxuICAgICAgJ2VuJzogJ0Nhc3RydW0gTWFyaW51bSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnQ2FzdHJ1bSBNYXJpbnVtIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Ko44Oh44Op44Or44OJ44Km44Kn44Od44Oz56C05aOK5L2c5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDsl5DrqZTrnoTrk5wg7Juo7Y+wIO2MjOq0tOyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTM2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyOSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpbPnjovlj6Tmrr8nLFxyXG4gICAgICAnZGUnOiAnRGVsdWJydW0gUmVnaW5hZScsXHJcbiAgICAgICdlbic6ICdEZWx1YnJ1bSBSZWdpbmFlJyxcclxuICAgICAgJ2ZyJzogJ0RlbHVicnVtIFJlZ2luYWUnLFxyXG4gICAgICAnamEnOiAn44Kw44Oz44OS44Or44OJ44O744OH44Kj44Or44O844OW44Op44OgJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0zNzgsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5Mzc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mbtuW8j+Wls+eOi+WPpOauvycsXHJcbiAgICAgICdkZSc6ICdEZWx1YnJ1bSBSZWdpbmFlIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0RlbHVicnVtIFJlZ2luYWUgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnRGVsdWJydW0gUmVnaW5hZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn44Kw44Oz44OS44Or44OJ44O744OH44Kj44Or44O844OW44Op44Og6Zu25byPJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0zNzgsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5Mzg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnZGUnOiAnRGllIEdvbGRlbmUgRWJlbmUgdm9uIFBhZ2x0aFxcJ2FuJyxcclxuICAgICAgJ2VuJzogJ1BhZ2x0aFxcJ2FuJyxcclxuICAgICAgJ2ZyJzogJ0xhIGdyYW5kZSBwcmFpcmllIGRlIFBhZ2x0aFxcJ2FuJyxcclxuICAgICAgJ2phJzogJ+m7hOmHkeW5s+WOnyDjg5Hjgqzjg6vjgrbjg7MnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogNDE1LFxyXG4gICAgJ29mZnNldFknOiAtMTEwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuZ3lrqvlubvljaHvvJrlrpjmlrnplKbmoIfotZsnLFxyXG4gICAgICAnZGUnOiAnVHJpcGxlIFRyaWFkOiBNYW5kZXJ2aWxsZS1UdXJuaWVyJyxcclxuICAgICAgJ2VuJzogJ1RyaXBsZSBUcmlhZCBPcGVuIFRvdXJuYW1lbnQnLFxyXG4gICAgICAnZnInOiAnVG91cm5vaSBvZmZpY2llbCBkZSBUcmlwbGUgVHJpYWRlJyxcclxuICAgICAgJ2phJzogJ+ODiOODquODl+ODq+ODiOODqeOCpOOCouODie+8muOCquODleOCo+OCt+ODo+ODq+ODiOODvOODiuODoeODs+ODiCcsXHJcbiAgICAgICdrbyc6ICftirjrpqztlIwg7Yq465287J207Ja065OcOiDqs7Xsi50g7Yag64SI66i87Yq4JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDgwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5NDE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S5neWuq+W5u+WNoe+8mumUpuagh+i1m+WvueWxgOWupCcsXHJcbiAgICAgICdkZSc6ICdUcmlwbGUgVHJpYWQ6IFByaXZhdHR1cm5pZXInLFxyXG4gICAgICAnZW4nOiAnVHJpcGxlIFRyaWFkIEludml0YXRpb25hbCBQYXJsb3InLFxyXG4gICAgICAnZnInOiAnU2FsbGUgZGUgdG91cm5vaSBsaWJyZSBkZSBUcmlwbGUgVHJpYWRlJyxcclxuICAgICAgJ2phJzogJ+ODiOODquODl+ODq+ODiOODqeOCpOOCouODie+8muOCq+OCueOCv+ODoOODiOODvOODiuODoeODs+ODiOODq+ODvOODoCcsXHJcbiAgICAgICdrbyc6ICftirjrpqztlIwg7Yq465287J207Ja065OcOiDsuZzshKAg7Yag64SI66i87Yq4JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDgwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5NDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S45biM5pyb5LmQ5ZutIOWGjeeUn+S5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgVmVyaGVpw591bmcgLSBVbWJyYScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBQcm9taXNlOiBVbWJyYScsXHJcbiAgICAgICdmcic6ICdMYSBQcm9tZXNzZSBkXFwnw4lkZW4gLSBOdcOpZScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJrlho3nlJ/nt6gxJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDsnqzsg53tjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlho3nlJ/kuYvnq6AyJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFZlcmhlacOfdW5nIC0gTGl0YW5laScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBQcm9taXNlOiBMaXRhbnknLFxyXG4gICAgICAnZnInOiAnTGEgUHJvbWVzc2UgZFxcJ8OJZGVuIC0gTGl0YW5pZScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJrlho3nlJ/nt6gyJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDsnqzsg53tjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQ0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlho3nlJ/kuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFZlcmhlacOfdW5nIC0gQW5hbW9ycGhvc2UnLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogQW5hbW9ycGhvc2lzJyxcclxuICAgICAgJ2ZyJzogJ0xhIFByb21lc3NlIGRcXCfDiWRlbiAtIEFuYW1vcnBob3NlJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs++8muWGjeeUn+e3qDMnLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOyerOyDne2OuCAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5NDU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S45biM5pyb5LmQ5ZutIOWGjeeUn+S5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgVmVyaGVpw591bmcgLSBFd2lna2VpdCcsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBQcm9taXNlOiBFdGVybml0eScsXHJcbiAgICAgICdmcic6ICdMYSBQcm9tZXNzZSBkXFwnw4lkZW4gLSDDiXRlcm5pdMOpJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs++8muWGjeeUn+e3qDQnLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOyerOyDne2OuCA0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC03MSxcclxuICAgICdvZmZzZXRZJzogMjMsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5NDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOWGjeeUn+S5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgVmVyaGVpw591bmcgLSBVbWJyYSAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBQcm9taXNlOiBVbWJyYSAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMYSBQcm9tZXNzZSBkXFwnw4lkZW4gLSBOdcOpZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya5YaN55Sf57eoMScsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog7J6s7IOd7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQ3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOmbtuW8j+W4jOacm+S5kOWbrSDlho3nlJ/kuYvnq6AyJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFZlcmhlacOfdW5nIC0gTGl0YW5laSAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBQcm9taXNlOiBMaXRhbnkgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGEgUHJvbWVzc2UgZFxcJ8OJZGVuIC0gTGl0YW5pZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya5YaN55Sf57eoMicsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog7J6s7IOd7Y64KOyYgeybhSkgMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQ4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOmbtuW8j+W4jOacm+S5kOWbrSDlho3nlJ/kuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFZlcmhlacOfdW5nIC0gQW5hbW9ycGhvc2UgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogQW5hbW9ycGhvc2lzIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xhIFByb21lc3NlIGRcXCfDiWRlbiAtIEFuYW1vcnBob3NlIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7Ppm7blvI/vvJrlho3nlJ/nt6gzJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDsnqzsg53tjrgo7JiB7JuFKSAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5NDk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOWGjeeUn+S5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgVmVyaGVpw591bmcgLSBFd2lna2VpdCAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBQcm9taXNlOiBFdGVybml0eSAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMYSBQcm9tZXNzZSBkXFwnw4lkZW4gLSDDiXRlcm5pdMOpIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7Ppm7blvI/vvJrlho3nlJ/nt6g0JyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDsnqzsg53tjrgo7JiB7JuFKSA0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDc1LFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTUwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ0RpYW1hbnRibGl0eiAtIEVudGZlc3NlbHVuZycsXHJcbiAgICAgICdlbic6ICdUaGUgQ2xvdWQgRGVjaycsXHJcbiAgICAgICdmcic6ICdMZSBUaWxsYWMgZGVzIENpcnJ1cycsXHJcbiAgICAgICdqYSc6ICfjg4DjgqTjg6Tjgqbjgqfjg53jg7PmjZXnjbLkvZzmiKYnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk1MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdkZSc6ICdEaWFtYW50YmxpdHogLSBUcmF1bWEnLFxyXG4gICAgICAnZW4nOiAnVGhlIENsb3VkIERlY2sgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xlIFRpbGxhYyBkZXMgQ2lycnVzIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144OA44Kk44Ok44Km44Kn44Od44Oz5o2V542y5L2c5oimJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5NTM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rOw5Z2m5bm75ben5oiYJyxcclxuICAgICAgJ2RlJzogJ1RyYXVtcHLDvGZ1bmcgLSBUaXRhbicsXHJcbiAgICAgICdlbic6ICdUaGUgTmF2ZWwgKFVucmVhbCknLFxyXG4gICAgICAnZnInOiAnTGUgTm9tYnJpbCAoaXJyw6llbCknLFxyXG4gICAgICAnamEnOiAn5bm744K/44Kk44K/44Oz6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+2ZmCDtg4DsnbTtg4Qg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIzLFxyXG4gIH0sXHJcbiAgOTU0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WogeWwlOW4g+WFsOW+t+aJrOW4hui1t+iIqicsXHJcbiAgICAgICdkZSc6ICdHdXRlIFdpbmRlIGbDvHIgVnlsYnJhbmQnLFxyXG4gICAgICAnZW4nOiAnVGhlIEdyZWF0IFNoaXAgVnlsYnJhbmQnLFxyXG4gICAgICAnZnInOiAnVW4gbmF2aXJlIG5vbW3DqSBWeWxicmFuZCcsXHJcbiAgICAgICdqYSc6ICfjg5DjgqTjg6vjg5bjg6njg7Pjg4njga7oiLnlh7onLFxyXG4gICAgICAna28nOiAn67CU7J2867iM656c65OcIOy2nO2VrScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMyxcclxuICB9LFxyXG4gIDk1NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnpZ7kvZHlpbPnjosnLFxyXG4gICAgICAnZGUnOiAnSGluYWIgaW4gZGllIFJ1aW5lbicsXHJcbiAgICAgICdlbic6ICdGaXQgZm9yIGEgUXVlZW4nLFxyXG4gICAgICAnZnInOiAnUXVlIGxlcyBEaWV1eCBnYXJkZW50IGxhIFJlaW5lJyxcclxuICAgICAgJ2phJzogJ+OCtOODg+ODieODu+OCu+OCpOODluODu+OCtuODu+OCr+OCpOODvOODsycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtNzUwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTY2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ0RlciBUdXJtLCBQYXJhZGlnbWVuYnJlY2hlcicsXHJcbiAgICAgICdlbic6ICdUaGUgVG93ZXIgYXQgUGFyYWRpZ21cXCdzIEJyZWFjaCcsXHJcbiAgICAgICdmcic6ICdMYSB0b3VyIGRlIGxhIENvbnRpbmdlbmNlJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+ODjuegsuWPsO+8muOAjOWhlOOAjScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA4MDgsXHJcbiAgICAnb2Zmc2V0WSc6IC03NzIsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5Njc6IHtcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfluJ3lm73mtbfkuIrln7rlnLDlubLoiLnlnZ4nLFxyXG4gICAgICAnZGUnOiAnVHJvY2tlbmRvY2sgdm9uIENhc3RydW0gTWFyaW51bScsXHJcbiAgICAgICdlbic6ICdDYXN0cnVtIE1hcmludW0gRHJ5ZG9ja3MnLFxyXG4gICAgICAnZnInOiAnQ2FsZSBzw6hjaGUgZGUgQ2FzdHJ1bSBNYXJpbnVtJyxcclxuICAgICAgJ2phJzogJ+OCq+OCueODhuODg+ODq+ODoOODu+ODnuODquODjOODoOODu+ODieODqeOCpOODieODg+OCrycsXHJcbiAgICAgICdrbyc6ICfsubTsiqTtirjro7gg66eI66as64iUIOqxtOyEoOqxsCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTcyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ1RyYXVtcHLDvGZ1bmcgLSBMZXZpYXRoYW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIDxFbXBoYXNpcz5XaG9ybGVhdGVyPC9FbXBoYXNpcz4gKFVucmVhbCknLFxyXG4gICAgICAnZnInOiAnTGUgQnJpc2V1ciBkZSBtYXLDqWVzIChpcnLDqWVsKScsXHJcbiAgICAgICdqYSc6ICflubvjg6rjg7TjgqHjgqTjgqLjgrXjg7PoqI7mu4XmiKYnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzgsXHJcbiAgfSxcclxuICA5NzU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ1phZG5vci1Ib2NoZWJlbmUnLFxyXG4gICAgICAnZW4nOiAnWmFkbm9yJyxcclxuICAgICAgJ2ZyJzogJ0hhdXRzIHBsYXRlYXV4IGRlIFphZG5vcicsXHJcbiAgICAgICdqYSc6ICfjgrbjg4jjgqXjg47jg6vpq5jljp8nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTMwLFxyXG4gIH0sXHJcbiAgOTc3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ0thbXBmIGltIE1vcmdlbmdyYXVlbicsXHJcbiAgICAgICdlbic6ICdEZWF0aCBVbnRvIERhd24nLFxyXG4gICAgICAnZnInOiAnQXViZSBtZXVydHJpw6hyZScsXHJcbiAgICAgICdqYSc6ICfpu47mmI7jga7mrbvpl5gnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTE0LFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkYXRhO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmLCBuby11c2UtYmVmb3JlLWRlZmluZSwgbmV3LWNhcCAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGVudCwgd29ya2VyQ29uc3RydWN0b3IsIHdvcmtlck9wdGlvbnMsIHVybCkge1xuICB2YXIgZ2xvYmFsU2NvcGUgPSBzZWxmIHx8IHdpbmRvdztcblxuICB0cnkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgYmxvYjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gTmV3IEFQSVxuICAgICAgICBibG9iID0gbmV3IGdsb2JhbFNjb3BlLkJsb2IoW2NvbnRlbnRdKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gQmxvYkJ1aWxkZXIgPSBEZXByZWNhdGVkLCBidXQgd2lkZWx5IGltcGxlbWVudGVkXG4gICAgICAgIHZhciBCbG9iQnVpbGRlciA9IGdsb2JhbFNjb3BlLkJsb2JCdWlsZGVyIHx8IGdsb2JhbFNjb3BlLldlYktpdEJsb2JCdWlsZGVyIHx8IGdsb2JhbFNjb3BlLk1vekJsb2JCdWlsZGVyIHx8IGdsb2JhbFNjb3BlLk1TQmxvYkJ1aWxkZXI7XG4gICAgICAgIGJsb2IgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcbiAgICAgICAgYmxvYi5hcHBlbmQoY29udGVudCk7XG4gICAgICAgIGJsb2IgPSBibG9iLmdldEJsb2IoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIFVSTCA9IGdsb2JhbFNjb3BlLlVSTCB8fCBnbG9iYWxTY29wZS53ZWJraXRVUkw7XG4gICAgICB2YXIgb2JqZWN0VVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgIHZhciB3b3JrZXIgPSBuZXcgZ2xvYmFsU2NvcGVbd29ya2VyQ29uc3RydWN0b3JdKG9iamVjdFVSTCwgd29ya2VyT3B0aW9ucyk7XG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVSTCk7XG4gICAgICByZXR1cm4gd29ya2VyO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsU2NvcGVbd29ya2VyQ29uc3RydWN0b3JdKFwiZGF0YTphcHBsaWNhdGlvbi9qYXZhc2NyaXB0LFwiLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoY29udGVudCkpLCB3b3JrZXJPcHRpb25zKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgRXJyb3IoXCJJbmxpbmUgd29ya2VyIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBnbG9iYWxTY29wZVt3b3JrZXJDb25zdHJ1Y3Rvcl0odXJsLCB3b3JrZXJPcHRpb25zKTtcbiAgfVxufTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsInZhciBkZWZlcnJlZCA9IFtdO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5PID0gKHJlc3VsdCwgY2h1bmtJZHMsIGZuLCBwcmlvcml0eSkgPT4ge1xuXHRpZihjaHVua0lkcykge1xuXHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRmb3IodmFyIGkgPSBkZWZlcnJlZC5sZW5ndGg7IGkgPiAwICYmIGRlZmVycmVkW2kgLSAxXVsyXSA+IHByaW9yaXR5OyBpLS0pIGRlZmVycmVkW2ldID0gZGVmZXJyZWRbaSAtIDFdO1xuXHRcdGRlZmVycmVkW2ldID0gW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldO1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgbm90RnVsZmlsbGVkID0gSW5maW5pdHk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWQubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldID0gZGVmZXJyZWRbaV07XG5cdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKChwcmlvcml0eSAmIDEgPT09IDAgfHwgbm90RnVsZmlsbGVkID49IHByaW9yaXR5KSAmJiBPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLk8pLmV2ZXJ5KChrZXkpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fLk9ba2V5XShjaHVua0lkc1tqXSkpKSkge1xuXHRcdFx0XHRjaHVua0lkcy5zcGxpY2Uoai0tLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZihwcmlvcml0eSA8IG5vdEZ1bGZpbGxlZCkgbm90RnVsZmlsbGVkID0gcHJpb3JpdHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGZ1bGZpbGxlZCkge1xuXHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcblx0XHRcdHJlc3VsdCA9IGZuKCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmwgKyBcIi4uLy4uL1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQyNDc6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbl9fd2VicGFja19yZXF1aXJlX18uTy5qID0gKGNodW5rSWQpID0+IChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPT09IDApO1xuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZHNbaV1dID0gMDtcblx0fVxuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHJlc3VsdCk7XG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rY2FjdGJvdFwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtjYWN0Ym90XCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGRlcGVuZHMgb24gb3RoZXIgbG9hZGVkIGNodW5rcyBhbmQgZXhlY3V0aW9uIG5lZWQgdG8gYmUgZGVsYXllZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbODkwXSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oNjMpKSlcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4iXSwic291cmNlUm9vdCI6IiJ9